{"text": "Customers: Customer_ID, Customer_Details; Customer_Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claims: Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled; Settlements: Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID; Payments: Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment | Which customers do not have any policies? Find the details of these customers.", "sql": "SELECT customer_details FROM Customers EXCEPT SELECT T1.customer_details FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.customer_id  =  T2.customer_id", "example": {"db_id": "insurance_policies", "query": "SELECT customer_details FROM Customers EXCEPT SELECT T1.customer_details FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.customer_id  =  T2.customer_id", "query_toks": ["SELECT", "customer_details", "FROM", "Customers", "EXCEPT", "SELECT", "T1.customer_details", "FROM", "Customers", "AS", "T1", "JOIN", "Customer_Policies", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id"], "query_toks_no_value": ["select", "customer_details", "from", "customers", "except", "select", "t1", ".", "customer_details", "from", "customers", "as", "t1", "join", "customer_policies", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id"], "question": "Which customers do not have any policies? Find the details of these customers.", "question_toks": ["Which", "customers", "do", "not", "have", "any", "policies", "?", "Find", "the", "details", "of", "these", "customers", "."], "guid": 7417}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | For each state, find the total account balance of customers whose credit score is above 100.", "sql": "SELECT sum(acc_bal) ,  state FROM customer WHERE credit_score  >  100 GROUP BY state", "example": {"db_id": "loan_1", "query": "SELECT sum(acc_bal) ,  state FROM customer WHERE credit_score  >  100 GROUP BY state", "query_toks": ["SELECT", "sum", "(", "acc_bal", ")", ",", "state", "FROM", "customer", "WHERE", "credit_score", ">", "100", "GROUP", "BY", "state"], "query_toks_no_value": ["select", "sum", "(", "acc_bal", ")", ",", "state", "from", "customer", "where", "credit_score", ">", "value", "group", "by", "state"], "question": "For each state, find the total account balance of customers whose credit score is above 100.", "question_toks": ["For", "each", "state", ",", "find", "the", "total", "account", "balance", "of", "customers", "whose", "credit", "score", "is", "above", "100", "."], "guid": 7418}}
{"text": "ACCOUNTS: custid, name; SAVINGS: custid, balance; CHECKING: custid, balance | Find the saving balance of the account with the highest checking balance.", "sql": "SELECT T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance DESC LIMIT 1", "example": {"db_id": "small_bank_1", "query": "SELECT T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance DESC LIMIT 1", "query_toks": ["SELECT", "T3.balance", "FROM", "accounts", "AS", "T1", "JOIN", "checking", "AS", "T2", "ON", "T1.custid", "=", "T2.custid", "JOIN", "savings", "AS", "T3", "ON", "T1.custid", "=", "T3.custid", "ORDER", "BY", "T2.balance", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t3", ".", "balance", "from", "accounts", "as", "t1", "join", "checking", "as", "t2", "on", "t1", ".", "custid", "=", "t2", ".", "custid", "join", "savings", "as", "t3", "on", "t1", ".", "custid", "=", "t3", ".", "custid", "order", "by", "t2", ".", "balance", "desc", "limit", "value"], "question": "Find the saving balance of the account with the highest checking balance.", "question_toks": ["Find", "the", "saving", "balance", "of", "the", "account", "with", "the", "highest", "checking", "balance", "."], "guid": 7419}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | Find the city and state of the bank branch named morningside.", "sql": "SELECT city ,  state FROM bank WHERE bname  =  'morningside'", "example": {"db_id": "loan_1", "query": "SELECT city ,  state FROM bank WHERE bname  =  'morningside'", "query_toks": ["SELECT", "city", ",", "state", "FROM", "bank", "WHERE", "bname", "=", "'morningside", "'"], "query_toks_no_value": ["select", "city", ",", "state", "from", "bank", "where", "bname", "=", "value"], "question": "Find the city and state of the bank branch named morningside.", "question_toks": ["Find", "the", "city", "and", "state", "of", "the", "bank", "branch", "named", "morningside", "."], "guid": 7420}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | What are the total account balances for each customer from Utah or Texas?", "sql": "SELECT sum(acc_bal) FROM customer WHERE state  =  'Utah' OR state  =  'Texas'", "example": {"db_id": "loan_1", "query": "SELECT sum(acc_bal) FROM customer WHERE state  =  'Utah' OR state  =  'Texas'", "query_toks": ["SELECT", "sum", "(", "acc_bal", ")", "FROM", "customer", "WHERE", "state", "=", "'Utah", "'", "OR", "state", "=", "'Texas", "'"], "query_toks_no_value": ["select", "sum", "(", "acc_bal", ")", "from", "customer", "where", "state", "=", "value", "or", "state", "=", "value"], "question": "What are the total account balances for each customer from Utah or Texas?", "question_toks": ["What", "are", "the", "total", "account", "balances", "for", "each", "customer", "from", "Utah", "or", "Texas", "?"], "guid": 7421}}
{"text": "Addresses: Address_ID, address_details; Locations: Location_ID, Other_Details; Products: Product_ID, Product_Type_Code, Product_Name, Product_Price; Parties: Party_ID, Party_Details; Assets: Asset_ID, Other_Details; Channels: Channel_ID, Other_Details; Finances: Finance_ID, Other_Details; Events: Event_ID, Address_ID, Channel_ID, Event_Type_Code, Finance_ID, Location_ID; Products_in_Events: Product_in_Event_ID, Event_ID, Product_ID; Parties_in_Events: Party_ID, Event_ID, Role_Code | Show different type codes of products and the number of products with each type code.", "sql": "SELECT Product_Type_Code ,  COUNT(*) FROM Products GROUP BY Product_Type_Code", "example": {"db_id": "solvency_ii", "query": "SELECT Product_Type_Code ,  COUNT(*) FROM Products GROUP BY Product_Type_Code", "query_toks": ["SELECT", "Product_Type_Code", ",", "COUNT", "(", "*", ")", "FROM", "Products", "GROUP", "BY", "Product_Type_Code"], "query_toks_no_value": ["select", "product_type_code", ",", "count", "(", "*", ")", "from", "products", "group", "by", "product_type_code"], "question": "Show different type codes of products and the number of products with each type code.", "question_toks": ["Show", "different", "type", "codes", "of", "products", "and", "the", "number", "of", "products", "with", "each", "type", "code", "."], "guid": 7422}}
{"text": "Customers: Customer_ID, Customer_name; Services: Service_ID, Service_name; Available_Policies: Policy_ID, policy_type_code, Customer_Phone; Customers_Policies: Customer_ID, Policy_ID, Date_Opened, Date_Closed; First_Notification_of_Loss: FNOL_ID, Customer_ID, Policy_ID, Service_ID; Claims: Claim_ID, FNOL_ID, Effective_Date; Settlements: Settlement_ID, Claim_ID, Effective_Date, Settlement_Amount | Find the name of services that have been used for more than 2 times in first notification of loss.", "sql": "SELECT t2.service_name FROM first_notification_of_loss AS t1 JOIN services AS t2 ON t1.service_id  =  t2.service_id GROUP BY t1.service_id HAVING count(*)  >  2", "example": {"db_id": "insurance_fnol", "query": "SELECT t2.service_name FROM first_notification_of_loss AS t1 JOIN services AS t2 ON t1.service_id  =  t2.service_id GROUP BY t1.service_id HAVING count(*)  >  2", "query_toks": ["SELECT", "t2.service_name", "FROM", "first_notification_of_loss", "AS", "t1", "JOIN", "services", "AS", "t2", "ON", "t1.service_id", "=", "t2.service_id", "GROUP", "BY", "t1.service_id", "HAVING", "count", "(", "*", ")", ">", "2"], "query_toks_no_value": ["select", "t2", ".", "service_name", "from", "first_notification_of_loss", "as", "t1", "join", "services", "as", "t2", "on", "t1", ".", "service_id", "=", "t2", ".", "service_id", "group", "by", "t1", ".", "service_id", "having", "count", "(", "*", ")", ">", "value"], "question": "Find the name of services that have been used for more than 2 times in first notification of loss.", "question_toks": ["Find", "the", "name", "of", "services", "that", "have", "been", "used", "for", "more", "than", "2", "times", "in", "first", "notification", "of", "loss", "."], "guid": 7423}}
{"text": "ACCOUNTS: custid, name; SAVINGS: custid, balance; CHECKING: custid, balance | Find the name of accounts whose checking balance is below the average checking balance.", "sql": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM checking)", "example": {"db_id": "small_bank_1", "query": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM checking)", "query_toks": ["SELECT", "T1.name", "FROM", "accounts", "AS", "T1", "JOIN", "checking", "AS", "T2", "ON", "T1.custid", "=", "T2.custid", "WHERE", "T2.balance", "<", "(", "SELECT", "avg", "(", "balance", ")", "FROM", "checking", ")"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "accounts", "as", "t1", "join", "checking", "as", "t2", "on", "t1", ".", "custid", "=", "t2", ".", "custid", "where", "t2", ".", "balance", "<", "(", "select", "avg", "(", "balance", ")", "from", "checking", ")"], "question": "Find the name of accounts whose checking balance is below the average checking balance.", "question_toks": ["Find", "the", "name", "of", "accounts", "whose", "checking", "balance", "is", "below", "the", "average", "checking", "balance", "."], "guid": 7424}}
{"text": "Customers: Customer_ID, Customer_Details; Customer_Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claims: Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled; Settlements: Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID; Payments: Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment | Which Payments were processed with Visa? List the payment Id, the date and the amount.", "sql": "SELECT Payment_ID ,  Date_Payment_Made ,  Amount_Payment FROM Payments WHERE Payment_Method_Code  =  'Visa'", "example": {"db_id": "insurance_policies", "query": "SELECT Payment_ID ,  Date_Payment_Made ,  Amount_Payment FROM Payments WHERE Payment_Method_Code  =  'Visa'", "query_toks": ["SELECT", "Payment_ID", ",", "Date_Payment_Made", ",", "Amount_Payment", "FROM", "Payments", "WHERE", "Payment_Method_Code", "=", "'Visa", "'"], "query_toks_no_value": ["select", "payment_id", ",", "date_payment_made", ",", "amount_payment", "from", "payments", "where", "payment_method_code", "=", "value"], "question": "Which Payments were processed with Visa? List the payment Id, the date and the amount.", "question_toks": ["Which", "Payments", "were", "processed", "with", "Visa", "?", "List", "the", "payment", "Id", ",", "the", "date", "and", "the", "amount", "."], "guid": 7425}}
{"text": "Customers: Customer_ID, Customer_name; Services: Service_ID, Service_name; Available_Policies: Policy_ID, policy_type_code, Customer_Phone; Customers_Policies: Customer_ID, Policy_ID, Date_Opened, Date_Closed; First_Notification_of_Loss: FNOL_ID, Customer_ID, Policy_ID, Service_ID; Claims: Claim_ID, FNOL_ID, Effective_Date; Settlements: Settlement_ID, Claim_ID, Effective_Date, Settlement_Amount | What are the customer phone numbers under the policy \"Life Insurance\"?", "sql": "SELECT customer_phone FROM available_policies WHERE policy_type_code  =  \"Life Insurance\"", "example": {"db_id": "insurance_fnol", "query": "SELECT customer_phone FROM available_policies WHERE policy_type_code  =  \"Life Insurance\"", "query_toks": ["SELECT", "customer_phone", "FROM", "available_policies", "WHERE", "policy_type_code", "=", "``", "Life", "Insurance", "''"], "query_toks_no_value": ["select", "customer_phone", "from", "available_policies", "where", "policy_type_code", "=", "value"], "question": "What are the customer phone numbers under the policy \"Life Insurance\"?", "question_toks": ["What", "are", "the", "customer", "phone", "numbers", "under", "the", "policy", "``", "Life", "Insurance", "''", "?"], "guid": 7426}}
{"text": "Customers: Customer_ID, Customer_Details; Customer_Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claims: Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled; Settlements: Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID; Payments: Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment | What are all the distinct details of the customers?", "sql": "SELECT DISTINCT customer_details FROM Customers", "example": {"db_id": "insurance_policies", "query": "SELECT DISTINCT customer_details FROM Customers", "query_toks": ["SELECT", "DISTINCT", "customer_details", "FROM", "Customers"], "query_toks_no_value": ["select", "distinct", "customer_details", "from", "customers"], "question": "What are all the distinct details of the customers?", "question_toks": ["What", "are", "all", "the", "distinct", "details", "of", "the", "customers", "?"], "guid": 7427}}
{"text": "Customers: Customer_ID, Customer_Details; Staff: Staff_ID, Staff_Details; Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claim_Headers: Claim_Header_ID, Claim_Status_Code, Claim_Type_Code, Policy_ID, Date_of_Claim, Date_of_Settlement, Amount_Claimed, Amount_Piad; Claims_Documents: Claim_ID, Document_Type_Code, Created_by_Staff_ID, Created_Date; Claims_Processing_Stages: Claim_Stage_ID, Next_Claim_Stage_ID, Claim_Status_Name, Claim_Status_Description; Claims_Processing: Claim_Processing_ID, Claim_ID, Claim_Outcome_Code, Claim_Stage_ID, Staff_ID | What is the description of the claim status \"Open\"?", "sql": "SELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name  =  \"Open\"", "example": {"db_id": "insurance_and_eClaims", "query": "SELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name  =  \"Open\"", "query_toks": ["SELECT", "claim_status_description", "FROM", "claims_processing_stages", "WHERE", "claim_status_name", "=", "``", "Open", "''"], "query_toks_no_value": ["select", "claim_status_description", "from", "claims_processing_stages", "where", "claim_status_name", "=", "value"], "question": "What is the description of the claim status \"Open\"?", "question_toks": ["What", "is", "the", "description", "of", "the", "claim", "status", "``", "Open", "''", "?"], "guid": 7428}}
{"text": "ACCOUNTS: custid, name; SAVINGS: custid, balance; CHECKING: custid, balance | How many accounts have a savings balance above the average savings balance?", "sql": "SELECT count(*) FROM savings WHERE balance  >  (SELECT avg(balance) FROM savings)", "example": {"db_id": "small_bank_1", "query": "SELECT count(*) FROM savings WHERE balance  >  (SELECT avg(balance) FROM savings)", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "savings", "WHERE", "balance", ">", "(", "SELECT", "avg", "(", "balance", ")", "FROM", "savings", ")"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "savings", "where", "balance", ">", "(", "select", "avg", "(", "balance", ")", "from", "savings", ")"], "question": "How many accounts have a savings balance above the average savings balance?", "question_toks": ["How", "many", "accounts", "have", "a", "savings", "balance", "above", "the", "average", "savings", "balance", "?"], "guid": 7429}}
{"text": "Customers: Customer_ID, Customer_Details; Customer_Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claims: Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled; Settlements: Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID; Payments: Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment | List the method, date and amount of all the payments, in ascending order of date.", "sql": "SELECT Payment_Method_Code ,  Date_Payment_Made ,  Amount_Payment FROM Payments ORDER BY Date_Payment_Made ASC", "example": {"db_id": "insurance_policies", "query": "SELECT Payment_Method_Code ,  Date_Payment_Made ,  Amount_Payment FROM Payments ORDER BY Date_Payment_Made ASC", "query_toks": ["SELECT", "Payment_Method_Code", ",", "Date_Payment_Made", ",", "Amount_Payment", "FROM", "Payments", "ORDER", "BY", "Date_Payment_Made", "ASC"], "query_toks_no_value": ["select", "payment_method_code", ",", "date_payment_made", ",", "amount_payment", "from", "payments", "order", "by", "date_payment_made", "asc"], "question": "List the method, date and amount of all the payments, in ascending order of date.", "question_toks": ["List", "the", "method", ",", "date", "and", "amount", "of", "all", "the", "payments", ",", "in", "ascending", "order", "of", "date", "."], "guid": 7430}}
{"text": "Customers: Customer_ID, Customer_name; Services: Service_ID, Service_name; Available_Policies: Policy_ID, policy_type_code, Customer_Phone; Customers_Policies: Customer_ID, Policy_ID, Date_Opened, Date_Closed; First_Notification_of_Loss: FNOL_ID, Customer_ID, Policy_ID, Service_ID; Claims: Claim_ID, FNOL_ID, Effective_Date; Settlements: Settlement_ID, Claim_ID, Effective_Date, Settlement_Amount | What are all the policy types of the customer named \"Dayana Robel\"?", "sql": "SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  \"Dayana Robel\"", "example": {"db_id": "insurance_fnol", "query": "SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  \"Dayana Robel\"", "query_toks": ["SELECT", "DISTINCT", "t3.policy_type_code", "FROM", "customers", "AS", "t1", "JOIN", "customers_policies", "AS", "t2", "ON", "t1.customer_id", "=", "t2.customer_id", "JOIN", "available_policies", "AS", "t3", "ON", "t2.policy_id", "=", "t3.policy_id", "WHERE", "t1.customer_name", "=", "``", "Dayana", "Robel", "''"], "query_toks_no_value": ["select", "distinct", "t3", ".", "policy_type_code", "from", "customers", "as", "t1", "join", "customers_policies", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "join", "available_policies", "as", "t3", "on", "t2", ".", "policy_id", "=", "t3", ".", "policy_id", "where", "t1", ".", "customer_name", "=", "value"], "question": "What are all the policy types of the customer named \"Dayana Robel\"?", "question_toks": ["What", "are", "all", "the", "policy", "types", "of", "the", "customer", "named", "``", "Dayana", "Robel", "''", "?"], "guid": 7431}}
{"text": "Customers: Customer_ID, Customer_Details; Customer_Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claims: Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled; Settlements: Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID; Payments: Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment | Find the total claimed amount of all the claims.", "sql": "SELECT sum(Amount_Claimed) FROM Claims", "example": {"db_id": "insurance_policies", "query": "SELECT sum(Amount_Claimed) FROM Claims", "query_toks": ["SELECT", "sum", "(", "Amount_Claimed", ")", "FROM", "Claims"], "query_toks_no_value": ["select", "sum", "(", "amount_claimed", ")", "from", "claims"], "question": "Find the total claimed amount of all the claims.", "question_toks": ["Find", "the", "total", "claimed", "amount", "of", "all", "the", "claims", "."], "guid": 7432}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | What is the total number of customers across banks?", "sql": "SELECT sum(no_of_customers) FROM bank", "example": {"db_id": "loan_1", "query": "SELECT sum(no_of_customers) FROM bank", "query_toks": ["SELECT", "sum", "(", "no_of_customers", ")", "FROM", "bank"], "query_toks_no_value": ["select", "sum", "(", "no_of_customers", ")", "from", "bank"], "question": "What is the total number of customers across banks?", "question_toks": ["What", "is", "the", "total", "number", "of", "customers", "across", "banks", "?"], "guid": 7433}}
{"text": "Customers: Customer_ID, Customer_Details; Staff: Staff_ID, Staff_Details; Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claim_Headers: Claim_Header_ID, Claim_Status_Code, Claim_Type_Code, Policy_ID, Date_of_Claim, Date_of_Settlement, Amount_Claimed, Amount_Piad; Claims_Documents: Claim_ID, Document_Type_Code, Created_by_Staff_ID, Created_Date; Claims_Processing_Stages: Claim_Stage_ID, Next_Claim_Stage_ID, Claim_Status_Name, Claim_Status_Description; Claims_Processing: Claim_Processing_ID, Claim_ID, Claim_Outcome_Code, Claim_Stage_ID, Staff_ID | List the names of all the customers in alphabetical order.", "sql": "SELECT customer_details FROM customers ORDER BY customer_details", "example": {"db_id": "insurance_and_eClaims", "query": "SELECT customer_details FROM customers ORDER BY customer_details", "query_toks": ["SELECT", "customer_details", "FROM", "customers", "ORDER", "BY", "customer_details"], "query_toks_no_value": ["select", "customer_details", "from", "customers", "order", "by", "customer_details"], "question": "List the names of all the customers in alphabetical order.", "question_toks": ["List", "the", "names", "of", "all", "the", "customers", "in", "alphabetical", "order", "."], "guid": 7434}}
{"text": "Customers: Customer_ID, Customer_Details; Staff: Staff_ID, Staff_Details; Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claim_Headers: Claim_Header_ID, Claim_Status_Code, Claim_Type_Code, Policy_ID, Date_of_Claim, Date_of_Settlement, Amount_Claimed, Amount_Piad; Claims_Documents: Claim_ID, Document_Type_Code, Created_by_Staff_ID, Created_Date; Claims_Processing_Stages: Claim_Stage_ID, Next_Claim_Stage_ID, Claim_Status_Name, Claim_Status_Description; Claims_Processing: Claim_Processing_ID, Claim_ID, Claim_Outcome_Code, Claim_Stage_ID, Staff_ID | Find all the policy types that are used by more than 2 customers.", "sql": "SELECT policy_type_code FROM policies GROUP BY policy_type_code HAVING count(*)  >  2", "example": {"db_id": "insurance_and_eClaims", "query": "SELECT policy_type_code FROM policies GROUP BY policy_type_code HAVING count(*)  >  2", "query_toks": ["SELECT", "policy_type_code", "FROM", "policies", "GROUP", "BY", "policy_type_code", "HAVING", "count", "(", "*", ")", ">", "2"], "query_toks_no_value": ["select", "policy_type_code", "from", "policies", "group", "by", "policy_type_code", "having", "count", "(", "*", ")", ">", "value"], "question": "Find all the policy types that are used by more than 2 customers.", "question_toks": ["Find", "all", "the", "policy", "types", "that", "are", "used", "by", "more", "than", "2", "customers", "."], "guid": 7435}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | Count the number of bank branches.", "sql": "SELECT count(*) FROM bank", "example": {"db_id": "loan_1", "query": "SELECT count(*) FROM bank", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "bank"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "bank"], "question": "Count the number of bank branches.", "question_toks": ["Count", "the", "number", "of", "bank", "branches", "."], "guid": 7436}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | What are the names of all customers, ordered by account balance?", "sql": "SELECT cust_name FROM customer ORDER BY acc_bal", "example": {"db_id": "loan_1", "query": "SELECT cust_name FROM customer ORDER BY acc_bal", "query_toks": ["SELECT", "cust_name", "FROM", "customer", "ORDER", "BY", "acc_bal"], "query_toks_no_value": ["select", "cust_name", "from", "customer", "order", "by", "acc_bal"], "question": "What are the names of all customers, ordered by account balance?", "question_toks": ["What", "are", "the", "names", "of", "all", "customers", ",", "ordered", "by", "account", "balance", "?"], "guid": 7437}}
{"text": "Customers: Customer_ID, Customer_Details; Customer_Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claims: Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled; Settlements: Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID; Payments: Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment | Find the claimed amount in the claim with the least amount settled. Show both the settlement amount and claim amount.", "sql": "SELECT Amount_Settled ,  Amount_Claimed FROM Claims ORDER BY Amount_Settled ASC LIMIT 1", "example": {"db_id": "insurance_policies", "query": "SELECT Amount_Settled ,  Amount_Claimed FROM Claims ORDER BY Amount_Settled ASC LIMIT 1", "query_toks": ["SELECT", "Amount_Settled", ",", "Amount_Claimed", "FROM", "Claims", "ORDER", "BY", "Amount_Settled", "ASC", "LIMIT", "1"], "query_toks_no_value": ["select", "amount_settled", ",", "amount_claimed", "from", "claims", "order", "by", "amount_settled", "asc", "limit", "value"], "question": "Find the claimed amount in the claim with the least amount settled. Show both the settlement amount and claim amount.", "question_toks": ["Find", "the", "claimed", "amount", "in", "the", "claim", "with", "the", "least", "amount", "settled", ".", "Show", "both", "the", "settlement", "amount", "and", "claim", "amount", "."], "guid": 7438}}
{"text": "Customers: Customer_ID, Customer_Details; Customer_Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claims: Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled; Settlements: Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID; Payments: Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment | Tell me the the date when the first claim was made.", "sql": "SELECT Date_Claim_Made FROM Claims ORDER BY Date_Claim_Made ASC LIMIT 1", "example": {"db_id": "insurance_policies", "query": "SELECT Date_Claim_Made FROM Claims ORDER BY Date_Claim_Made ASC LIMIT 1", "query_toks": ["SELECT", "Date_Claim_Made", "FROM", "Claims", "ORDER", "BY", "Date_Claim_Made", "ASC", "LIMIT", "1"], "query_toks_no_value": ["select", "date_claim_made", "from", "claims", "order", "by", "date_claim_made", "asc", "limit", "value"], "question": "Tell me the the date when the first claim was made.", "question_toks": ["Tell", "me", "the", "the", "date", "when", "the", "first", "claim", "was", "made", "."], "guid": 7439}}
{"text": "ACCOUNTS: custid, name; SAVINGS: custid, balance; CHECKING: custid, balance | What are the names of customers with accounts, and what are the total savings balances for each?", "sql": "SELECT sum(T2.balance) ,  T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name", "example": {"db_id": "small_bank_1", "query": "SELECT sum(T2.balance) ,  T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name", "query_toks": ["SELECT", "sum", "(", "T2.balance", ")", ",", "T1.name", "FROM", "accounts", "AS", "T1", "JOIN", "savings", "AS", "T2", "ON", "T1.custid", "=", "T2.custid", "GROUP", "BY", "T1.name"], "query_toks_no_value": ["select", "sum", "(", "t2", ".", "balance", ")", ",", "t1", ".", "name", "from", "accounts", "as", "t1", "join", "savings", "as", "t2", "on", "t1", ".", "custid", "=", "t2", ".", "custid", "group", "by", "t1", ".", "name"], "question": "What are the names of customers with accounts, and what are the total savings balances for each?", "question_toks": ["What", "are", "the", "names", "of", "customers", "with", "accounts", ",", "and", "what", "are", "the", "total", "savings", "balances", "for", "each", "?"], "guid": 7440}}
{"text": "Customers: Customer_ID, Customer_name; Services: Service_ID, Service_name; Available_Policies: Policy_ID, policy_type_code, Customer_Phone; Customers_Policies: Customer_ID, Policy_ID, Date_Opened, Date_Closed; First_Notification_of_Loss: FNOL_ID, Customer_ID, Policy_ID, Service_ID; Claims: Claim_ID, FNOL_ID, Effective_Date; Settlements: Settlement_ID, Claim_ID, Effective_Date, Settlement_Amount | What are all the policy types of the customer that has the most policies listed?", "sql": "SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  (SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1)", "example": {"db_id": "insurance_fnol", "query": "SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  (SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1)", "query_toks": ["SELECT", "DISTINCT", "t3.policy_type_code", "FROM", "customers", "AS", "t1", "JOIN", "customers_policies", "AS", "t2", "ON", "t1.customer_id", "=", "t2.customer_id", "JOIN", "available_policies", "AS", "t3", "ON", "t2.policy_id", "=", "t3.policy_id", "WHERE", "t1.customer_name", "=", "(", "SELECT", "t1.customer_name", "FROM", "customers", "AS", "t1", "JOIN", "customers_policies", "AS", "t2", "ON", "t1.customer_id", "=", "t2.customer_id", "GROUP", "BY", "t1.customer_name", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1", ")"], "query_toks_no_value": ["select", "distinct", "t3", ".", "policy_type_code", "from", "customers", "as", "t1", "join", "customers_policies", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "join", "available_policies", "as", "t3", "on", "t2", ".", "policy_id", "=", "t3", ".", "policy_id", "where", "t1", ".", "customer_name", "=", "(", "select", "t1", ".", "customer_name", "from", "customers", "as", "t1", "join", "customers_policies", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "group", "by", "t1", ".", "customer_name", "order", "by", "count", "(", "*", ")", "desc", "limit", "value", ")"], "question": "What are all the policy types of the customer that has the most policies listed?", "question_toks": ["What", "are", "all", "the", "policy", "types", "of", "the", "customer", "that", "has", "the", "most", "policies", "listed", "?"], "guid": 7441}}
{"text": "Customers: Customer_ID, Customer_name; Services: Service_ID, Service_name; Available_Policies: Policy_ID, policy_type_code, Customer_Phone; Customers_Policies: Customer_ID, Policy_ID, Date_Opened, Date_Closed; First_Notification_of_Loss: FNOL_ID, Customer_ID, Policy_ID, Service_ID; Claims: Claim_ID, FNOL_ID, Effective_Date; Settlements: Settlement_ID, Claim_ID, Effective_Date, Settlement_Amount | Which policy type has the most records in the database?", "sql": "SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "insurance_fnol", "query": "SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "policy_type_code", "FROM", "available_policies", "GROUP", "BY", "policy_type_code", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "policy_type_code", "from", "available_policies", "group", "by", "policy_type_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which policy type has the most records in the database?", "question_toks": ["Which", "policy", "type", "has", "the", "most", "records", "in", "the", "database", "?"], "guid": 7442}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | What are the names and account balances of customers with the letter a in their names?", "sql": "SELECT cust_name ,  acc_bal FROM customer WHERE cust_name LIKE '%a%'", "example": {"db_id": "loan_1", "query": "SELECT cust_name ,  acc_bal FROM customer WHERE cust_name LIKE '%a%'", "query_toks": ["SELECT", "cust_name", ",", "acc_bal", "FROM", "customer", "WHERE", "cust_name", "LIKE", "'", "%", "a", "%", "'"], "query_toks_no_value": ["select", "cust_name", ",", "acc_bal", "from", "customer", "where", "cust_name", "like", "value"], "question": "What are the names and account balances of customers with the letter a in their names?", "question_toks": ["What", "are", "the", "names", "and", "account", "balances", "of", "customers", "with", "the", "letter", "a", "in", "their", "names", "?"], "guid": 7443}}
{"text": "ACCOUNTS: custid, name; SAVINGS: custid, balance; CHECKING: custid, balance | Find the total balance across checking accounts.", "sql": "SELECT sum(balance) FROM checking", "example": {"db_id": "small_bank_1", "query": "SELECT sum(balance) FROM checking", "query_toks": ["SELECT", "sum", "(", "balance", ")", "FROM", "checking"], "query_toks_no_value": ["select", "sum", "(", "balance", ")", "from", "checking"], "question": "Find the total balance across checking accounts.", "question_toks": ["Find", "the", "total", "balance", "across", "checking", "accounts", "."], "guid": 7444}}
{"text": "Customers: Customer_ID, Customer_Details; Staff: Staff_ID, Staff_Details; Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claim_Headers: Claim_Header_ID, Claim_Status_Code, Claim_Type_Code, Policy_ID, Date_of_Claim, Date_of_Settlement, Amount_Claimed, Amount_Piad; Claims_Documents: Claim_ID, Document_Type_Code, Created_by_Staff_ID, Created_Date; Claims_Processing_Stages: Claim_Stage_ID, Next_Claim_Stage_ID, Claim_Status_Name, Claim_Status_Description; Claims_Processing: Claim_Processing_ID, Claim_ID, Claim_Outcome_Code, Claim_Stage_ID, Staff_ID | What is the name of the claim processing stage that most of the claims are on?", "sql": "SELECT t2.claim_status_name FROM claims_processing AS t1 JOIN claims_processing_stages AS t2 ON t1.claim_stage_id  =  t2.claim_stage_id GROUP BY t1.claim_stage_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "insurance_and_eClaims", "query": "SELECT t2.claim_status_name FROM claims_processing AS t1 JOIN claims_processing_stages AS t2 ON t1.claim_stage_id  =  t2.claim_stage_id GROUP BY t1.claim_stage_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "t2.claim_status_name", "FROM", "claims_processing", "AS", "t1", "JOIN", "claims_processing_stages", "AS", "t2", "ON", "t1.claim_stage_id", "=", "t2.claim_stage_id", "GROUP", "BY", "t1.claim_stage_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "claim_status_name", "from", "claims_processing", "as", "t1", "join", "claims_processing_stages", "as", "t2", "on", "t1", ".", "claim_stage_id", "=", "t2", ".", "claim_stage_id", "group", "by", "t1", ".", "claim_stage_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the name of the claim processing stage that most of the claims are on?", "question_toks": ["What", "is", "the", "name", "of", "the", "claim", "processing", "stage", "that", "most", "of", "the", "claims", "are", "on", "?"], "guid": 7445}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | Find the name of customers who do not have an saving account.", "sql": "SELECT cust_name FROM customer EXCEPT SELECT cust_name FROM customer WHERE acc_type  =  'saving'", "example": {"db_id": "loan_1", "query": "SELECT cust_name FROM customer EXCEPT SELECT cust_name FROM customer WHERE acc_type  =  'saving'", "query_toks": ["SELECT", "cust_name", "FROM", "customer", "EXCEPT", "SELECT", "cust_name", "FROM", "customer", "WHERE", "acc_type", "=", "'saving", "'"], "query_toks_no_value": ["select", "cust_name", "from", "customer", "except", "select", "cust_name", "from", "customer", "where", "acc_type", "=", "value"], "question": "Find the name of customers who do not have an saving account.", "question_toks": ["Find", "the", "name", "of", "customers", "who", "do", "not", "have", "an", "saving", "account", "."], "guid": 7446}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | What is the average account balance of customers with credit score below 50 for the different account types?", "sql": "SELECT avg(acc_bal) ,  acc_type FROM customer WHERE credit_score  <  50 GROUP BY acc_type", "example": {"db_id": "loan_1", "query": "SELECT avg(acc_bal) ,  acc_type FROM customer WHERE credit_score  <  50 GROUP BY acc_type", "query_toks": ["SELECT", "avg", "(", "acc_bal", ")", ",", "acc_type", "FROM", "customer", "WHERE", "credit_score", "<", "50", "GROUP", "BY", "acc_type"], "query_toks_no_value": ["select", "avg", "(", "acc_bal", ")", ",", "acc_type", "from", "customer", "where", "credit_score", "<", "value", "group", "by", "acc_type"], "question": "What is the average account balance of customers with credit score below 50 for the different account types?", "question_toks": ["What", "is", "the", "average", "account", "balance", "of", "customers", "with", "credit", "score", "below", "50", "for", "the", "different", "account", "types", "?"], "guid": 7447}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | Find the name of customer who has the lowest credit score.", "sql": "SELECT cust_name FROM customer ORDER BY credit_score LIMIT 1", "example": {"db_id": "loan_1", "query": "SELECT cust_name FROM customer ORDER BY credit_score LIMIT 1", "query_toks": ["SELECT", "cust_name", "FROM", "customer", "ORDER", "BY", "credit_score", "LIMIT", "1"], "query_toks_no_value": ["select", "cust_name", "from", "customer", "order", "by", "credit_score", "limit", "value"], "question": "Find the name of customer who has the lowest credit score.", "question_toks": ["Find", "the", "name", "of", "customer", "who", "has", "the", "lowest", "credit", "score", "."], "guid": 7448}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | In how many different cities are banks located?", "sql": "SELECT count(DISTINCT city) FROM bank", "example": {"db_id": "loan_1", "query": "SELECT count(DISTINCT city) FROM bank", "query_toks": ["SELECT", "count", "(", "DISTINCT", "city", ")", "FROM", "bank"], "query_toks_no_value": ["select", "count", "(", "distinct", "city", ")", "from", "bank"], "question": "In how many different cities are banks located?", "question_toks": ["In", "how", "many", "different", "cities", "are", "banks", "located", "?"], "guid": 7449}}
{"text": "Customers: Customer_ID, Customer_Details; Staff: Staff_ID, Staff_Details; Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claim_Headers: Claim_Header_ID, Claim_Status_Code, Claim_Type_Code, Policy_ID, Date_of_Claim, Date_of_Settlement, Amount_Claimed, Amount_Piad; Claims_Documents: Claim_ID, Document_Type_Code, Created_by_Staff_ID, Created_Date; Claims_Processing_Stages: Claim_Stage_ID, Next_Claim_Stage_ID, Claim_Status_Name, Claim_Status_Description; Claims_Processing: Claim_Processing_ID, Claim_ID, Claim_Outcome_Code, Claim_Stage_ID, Staff_ID | How many distinct claim outcome codes are there?", "sql": "SELECT count(DISTINCT claim_outcome_code) FROM claims_processing", "example": {"db_id": "insurance_and_eClaims", "query": "SELECT count(DISTINCT claim_outcome_code) FROM claims_processing", "query_toks": ["SELECT", "count", "(", "DISTINCT", "claim_outcome_code", ")", "FROM", "claims_processing"], "query_toks_no_value": ["select", "count", "(", "distinct", "claim_outcome_code", ")", "from", "claims_processing"], "question": "How many distinct claim outcome codes are there?", "question_toks": ["How", "many", "distinct", "claim", "outcome", "codes", "are", "there", "?"], "guid": 7450}}
{"text": "Customers: Customer_ID, Customer_name; Services: Service_ID, Service_name; Available_Policies: Policy_ID, policy_type_code, Customer_Phone; Customers_Policies: Customer_ID, Policy_ID, Date_Opened, Date_Closed; First_Notification_of_Loss: FNOL_ID, Customer_ID, Policy_ID, Service_ID; Claims: Claim_ID, FNOL_ID, Effective_Date; Settlements: Settlement_ID, Claim_ID, Effective_Date, Settlement_Amount | Find the maximum and minimum settlement amount.", "sql": "SELECT max(settlement_amount) ,  min(settlement_amount) FROM settlements", "example": {"db_id": "insurance_fnol", "query": "SELECT max(settlement_amount) ,  min(settlement_amount) FROM settlements", "query_toks": ["SELECT", "max", "(", "settlement_amount", ")", ",", "min", "(", "settlement_amount", ")", "FROM", "settlements"], "query_toks_no_value": ["select", "max", "(", "settlement_amount", ")", ",", "min", "(", "settlement_amount", ")", "from", "settlements"], "question": "Find the maximum and minimum settlement amount.", "question_toks": ["Find", "the", "maximum", "and", "minimum", "settlement", "amount", "."], "guid": 7451}}
{"text": "Customers: Customer_ID, Customer_Details; Customer_Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claims: Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled; Settlements: Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID; Payments: Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment | Among all the claims, which claims have a claimed amount larger than the average? List the date the claim was made and the date it was settled.", "sql": "SELECT Date_Claim_Made ,  Date_Claim_Settled FROM Claims WHERE Amount_Claimed  >  ( SELECT avg(Amount_Claimed) FROM Claims )", "example": {"db_id": "insurance_policies", "query": "SELECT Date_Claim_Made ,  Date_Claim_Settled FROM Claims WHERE Amount_Claimed  >  ( SELECT avg(Amount_Claimed) FROM Claims )", "query_toks": ["SELECT", "Date_Claim_Made", ",", "Date_Claim_Settled", "FROM", "Claims", "WHERE", "Amount_Claimed", ">", "(", "SELECT", "avg", "(", "Amount_Claimed", ")", "FROM", "Claims", ")"], "query_toks_no_value": ["select", "date_claim_made", ",", "date_claim_settled", "from", "claims", "where", "amount_claimed", ">", "(", "select", "avg", "(", "amount_claimed", ")", "from", "claims", ")"], "question": "Among all the claims, which claims have a claimed amount larger than the average? List the date the claim was made and the date it was settled.", "question_toks": ["Among", "all", "the", "claims", ",", "which", "claims", "have", "a", "claimed", "amount", "larger", "than", "the", "average", "?", "List", "the", "date", "the", "claim", "was", "made", "and", "the", "date", "it", "was", "settled", "."], "guid": 7452}}
{"text": "ACCOUNTS: custid, name; SAVINGS: custid, balance; CHECKING: custid, balance | Find the name and total checking and savings balance of the accounts whose savings balance is lower than corresponding checking balance.", "sql": "SELECT T1.name ,  T3.balance + T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T3.balance  <  T2.balance", "example": {"db_id": "small_bank_1", "query": "SELECT T1.name ,  T3.balance + T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T3.balance  <  T2.balance", "query_toks": ["SELECT", "T1.name", ",", "T3.balance", "+", "T2.balance", "FROM", "accounts", "AS", "T1", "JOIN", "checking", "AS", "T2", "ON", "T1.custid", "=", "T2.custid", "JOIN", "savings", "AS", "T3", "ON", "T1.custid", "=", "T3.custid", "WHERE", "T3.balance", "<", "T2.balance"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "t3", ".", "balance", "+", "t2", ".", "balance", "from", "accounts", "as", "t1", "join", "checking", "as", "t2", "on", "t1", ".", "custid", "=", "t2", ".", "custid", "join", "savings", "as", "t3", "on", "t1", ".", "custid", "=", "t3", ".", "custid", "where", "t3", ".", "balance", "<", "t2", ".", "balance"], "question": "Find the name and total checking and savings balance of the accounts whose savings balance is lower than corresponding checking balance.", "question_toks": ["Find", "the", "name", "and", "total", "checking", "and", "savings", "balance", "of", "the", "accounts", "whose", "savings", "balance", "is", "lower", "than", "corresponding", "checking", "balance", "."], "guid": 7453}}
{"text": "Customers: Customer_ID, Customer_Details; Customer_Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claims: Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled; Settlements: Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID; Payments: Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment | Compute the total amount of payment processed.", "sql": "SELECT sum(Amount_Payment) FROM Payments", "example": {"db_id": "insurance_policies", "query": "SELECT sum(Amount_Payment) FROM Payments", "query_toks": ["SELECT", "sum", "(", "Amount_Payment", ")", "FROM", "Payments"], "query_toks_no_value": ["select", "sum", "(", "amount_payment", ")", "from", "payments"], "question": "Compute the total amount of payment processed.", "question_toks": ["Compute", "the", "total", "amount", "of", "payment", "processed", "."], "guid": 7454}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | Find the name and credit score of the customers who have some loans.", "sql": "SELECT DISTINCT T1.cust_name ,  T1.credit_score FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id", "example": {"db_id": "loan_1", "query": "SELECT DISTINCT T1.cust_name ,  T1.credit_score FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id", "query_toks": ["SELECT", "DISTINCT", "T1.cust_name", ",", "T1.credit_score", "FROM", "customer", "AS", "T1", "JOIN", "loan", "AS", "T2", "ON", "T1.cust_id", "=", "T2.cust_id"], "query_toks_no_value": ["select", "distinct", "t1", ".", "cust_name", ",", "t1", ".", "credit_score", "from", "customer", "as", "t1", "join", "loan", "as", "t2", "on", "t1", ".", "cust_id", "=", "t2", ".", "cust_id"], "question": "Find the name and credit score of the customers who have some loans.", "question_toks": ["Find", "the", "name", "and", "credit", "score", "of", "the", "customers", "who", "have", "some", "loans", "."], "guid": 7455}}
{"text": "ACCOUNTS: custid, name; SAVINGS: custid, balance; CHECKING: custid, balance | Find the total checking and saving balance of all accounts sorted by the total balance in ascending order.", "sql": "SELECT T1.balance + T2.balance FROM checking AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid ORDER BY T1.balance + T2.balance", "example": {"db_id": "small_bank_1", "query": "SELECT T1.balance + T2.balance FROM checking AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid ORDER BY T1.balance + T2.balance", "query_toks": ["SELECT", "T1.balance", "+", "T2.balance", "FROM", "checking", "AS", "T1", "JOIN", "savings", "AS", "T2", "ON", "T1.custid", "=", "T2.custid", "ORDER", "BY", "T1.balance", "+", "T2.balance"], "query_toks_no_value": ["select", "t1", ".", "balance", "+", "t2", ".", "balance", "from", "checking", "as", "t1", "join", "savings", "as", "t2", "on", "t1", ".", "custid", "=", "t2", ".", "custid", "order", "by", "t1", ".", "balance", "+", "t2", ".", "balance"], "question": "Find the total checking and saving balance of all accounts sorted by the total balance in ascending order.", "question_toks": ["Find", "the", "total", "checking", "and", "saving", "balance", "of", "all", "accounts", "sorted", "by", "the", "total", "balance", "in", "ascending", "order", "."], "guid": 7456}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | Find the name of customers who do not have a loan with a type of Mortgages.", "sql": "SELECT cust_name FROM customer EXCEPT SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE T2.loan_type  =  'Mortgages'", "example": {"db_id": "loan_1", "query": "SELECT cust_name FROM customer EXCEPT SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE T2.loan_type  =  'Mortgages'", "query_toks": ["SELECT", "cust_name", "FROM", "customer", "EXCEPT", "SELECT", "T1.cust_name", "FROM", "customer", "AS", "T1", "JOIN", "loan", "AS", "T2", "ON", "T1.cust_id", "=", "T2.cust_id", "WHERE", "T2.loan_type", "=", "'Mortgages", "'"], "query_toks_no_value": ["select", "cust_name", "from", "customer", "except", "select", "t1", ".", "cust_name", "from", "customer", "as", "t1", "join", "loan", "as", "t2", "on", "t1", ".", "cust_id", "=", "t2", ".", "cust_id", "where", "t2", ".", "loan_type", "=", "value"], "question": "Find the name of customers who do not have a loan with a type of Mortgages.", "question_toks": ["Find", "the", "name", "of", "customers", "who", "do", "not", "have", "a", "loan", "with", "a", "type", "of", "Mortgages", "."], "guid": 7457}}
{"text": "Customers: Customer_ID, Customer_Details; Staff: Staff_ID, Staff_Details; Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claim_Headers: Claim_Header_ID, Claim_Status_Code, Claim_Type_Code, Policy_ID, Date_of_Claim, Date_of_Settlement, Amount_Claimed, Amount_Piad; Claims_Documents: Claim_ID, Document_Type_Code, Created_by_Staff_ID, Created_Date; Claims_Processing_Stages: Claim_Stage_ID, Next_Claim_Stage_ID, Claim_Status_Name, Claim_Status_Description; Claims_Processing: Claim_Processing_ID, Claim_ID, Claim_Outcome_Code, Claim_Stage_ID, Staff_ID | Find the name of the customer that has been involved in the most policies.", "sql": "SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t2.customer_details ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "insurance_and_eClaims", "query": "SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t2.customer_details ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "t2.customer_details", "FROM", "policies", "AS", "t1", "JOIN", "customers", "AS", "t2", "ON", "t1.customer_id", "=", "t2.customer_id", "GROUP", "BY", "t2.customer_details", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "customer_details", "from", "policies", "as", "t1", "join", "customers", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "group", "by", "t2", ".", "customer_details", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Find the name of the customer that has been involved in the most policies.", "question_toks": ["Find", "the", "name", "of", "the", "customer", "that", "has", "been", "involved", "in", "the", "most", "policies", "."], "guid": 7458}}
{"text": "ACCOUNTS: custid, name; SAVINGS: custid, balance; CHECKING: custid, balance | What are the names, checking balances, and savings balances for all customers?", "sql": "SELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid", "example": {"db_id": "small_bank_1", "query": "SELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid", "query_toks": ["SELECT", "T2.balance", ",", "T3.balance", ",", "T1.name", "FROM", "accounts", "AS", "T1", "JOIN", "checking", "AS", "T2", "ON", "T1.custid", "=", "T2.custid", "JOIN", "savings", "AS", "T3", "ON", "T1.custid", "=", "T3.custid"], "query_toks_no_value": ["select", "t2", ".", "balance", ",", "t3", ".", "balance", ",", "t1", ".", "name", "from", "accounts", "as", "t1", "join", "checking", "as", "t2", "on", "t1", ".", "custid", "=", "t2", ".", "custid", "join", "savings", "as", "t3", "on", "t1", ".", "custid", "=", "t3", ".", "custid"], "question": "What are the names, checking balances, and savings balances for all customers?", "question_toks": ["What", "are", "the", "names", ",", "checking", "balances", ",", "and", "savings", "balances", "for", "all", "customers", "?"], "guid": 7459}}
{"text": "Customers: Customer_ID, Customer_name; Services: Service_ID, Service_name; Available_Policies: Policy_ID, policy_type_code, Customer_Phone; Customers_Policies: Customer_ID, Policy_ID, Date_Opened, Date_Closed; First_Notification_of_Loss: FNOL_ID, Customer_ID, Policy_ID, Service_ID; Claims: Claim_ID, FNOL_ID, Effective_Date; Settlements: Settlement_ID, Claim_ID, Effective_Date, Settlement_Amount | Find the names of customers who have used either the service \"Close a policy\" or the service \"Upgrade a policy\".", "sql": "SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  \"Close a policy\" OR t3.service_name  =  \"Upgrade a policy\"", "example": {"db_id": "insurance_fnol", "query": "SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  \"Close a policy\" OR t3.service_name  =  \"Upgrade a policy\"", "query_toks": ["SELECT", "t1.customer_name", "FROM", "customers", "AS", "t1", "JOIN", "first_notification_of_loss", "AS", "t2", "ON", "t1.customer_id", "=", "t2.customer_id", "JOIN", "services", "AS", "t3", "ON", "t2.service_id", "=", "t3.service_id", "WHERE", "t3.service_name", "=", "``", "Close", "a", "policy", "''", "OR", "t3.service_name", "=", "``", "Upgrade", "a", "policy", "''"], "query_toks_no_value": ["select", "t1", ".", "customer_name", "from", "customers", "as", "t1", "join", "first_notification_of_loss", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "join", "services", "as", "t3", "on", "t2", ".", "service_id", "=", "t3", ".", "service_id", "where", "t3", ".", "service_name", "=", "value", "or", "t3", ".", "service_name", "=", "value"], "question": "Find the names of customers who have used either the service \"Close a policy\" or the service \"Upgrade a policy\".", "question_toks": ["Find", "the", "names", "of", "customers", "who", "have", "used", "either", "the", "service", "``", "Close", "a", "policy", "''", "or", "the", "service", "``", "Upgrade", "a", "policy", "''", "."], "guid": 7460}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | Find the total account balance of each customer from Utah or Texas.", "sql": "SELECT sum(acc_bal) FROM customer WHERE state  =  'Utah' OR state  =  'Texas'", "example": {"db_id": "loan_1", "query": "SELECT sum(acc_bal) FROM customer WHERE state  =  'Utah' OR state  =  'Texas'", "query_toks": ["SELECT", "sum", "(", "acc_bal", ")", "FROM", "customer", "WHERE", "state", "=", "'Utah", "'", "OR", "state", "=", "'Texas", "'"], "query_toks_no_value": ["select", "sum", "(", "acc_bal", ")", "from", "customer", "where", "state", "=", "value", "or", "state", "=", "value"], "question": "Find the total account balance of each customer from Utah or Texas.", "question_toks": ["Find", "the", "total", "account", "balance", "of", "each", "customer", "from", "Utah", "or", "Texas", "."], "guid": 7461}}
{"text": "ACCOUNTS: custid, name; SAVINGS: custid, balance; CHECKING: custid, balance | What are the checking and savings balances in accounts belonging to Brown?", "sql": "SELECT T2.balance ,  T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T1.name  =  'Brown'", "example": {"db_id": "small_bank_1", "query": "SELECT T2.balance ,  T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T1.name  =  'Brown'", "query_toks": ["SELECT", "T2.balance", ",", "T3.balance", "FROM", "accounts", "AS", "T1", "JOIN", "checking", "AS", "T2", "ON", "T1.custid", "=", "T2.custid", "JOIN", "savings", "AS", "T3", "ON", "T1.custid", "=", "T3.custid", "WHERE", "T1.name", "=", "'Brown", "'"], "query_toks_no_value": ["select", "t2", ".", "balance", ",", "t3", ".", "balance", "from", "accounts", "as", "t1", "join", "checking", "as", "t2", "on", "t1", ".", "custid", "=", "t2", ".", "custid", "join", "savings", "as", "t3", "on", "t1", ".", "custid", "=", "t3", ".", "custid", "where", "t1", ".", "name", "=", "value"], "question": "What are the checking and savings balances in accounts belonging to Brown?", "question_toks": ["What", "are", "the", "checking", "and", "savings", "balances", "in", "accounts", "belonging", "to", "Brown", "?"], "guid": 7462}}
{"text": "Ref_Feature_Types: feature_type_code, feature_type_name; Ref_Property_Types: property_type_code, property_type_description; Other_Available_Features: feature_id, feature_type_code, feature_name, feature_description; Properties: property_id, property_type_code, date_on_market, date_sold, property_name, property_address, room_count, vendor_requested_price, buyer_offered_price, agreed_selling_price; Other_Property_Features: property_id, feature_id, property_feature_description | How many available features are there in total?", "sql": "SELECT count(*) FROM Other_Available_Features", "example": {"db_id": "real_estate_properties", "query": "SELECT count(*) FROM Other_Available_Features", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Other_Available_Features"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "other_available_features"], "question": "How many available features are there in total?", "question_toks": ["How", "many", "available", "features", "are", "there", "in", "total", "?"], "guid": 7463}}
{"text": "Customers: Customer_ID, Customer_Details; Customer_Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claims: Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled; Settlements: Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID; Payments: Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment | With which kind of payment method were the least number of payments processed?", "sql": "SELECT Payment_Method_Code FROM Payments GROUP BY Payment_Method_Code ORDER BY count(*) ASC LIMIT 1", "example": {"db_id": "insurance_policies", "query": "SELECT Payment_Method_Code FROM Payments GROUP BY Payment_Method_Code ORDER BY count(*) ASC LIMIT 1", "query_toks": ["SELECT", "Payment_Method_Code", "FROM", "Payments", "GROUP", "BY", "Payment_Method_Code", "ORDER", "BY", "count", "(", "*", ")", "ASC", "LIMIT", "1"], "query_toks_no_value": ["select", "payment_method_code", "from", "payments", "group", "by", "payment_method_code", "order", "by", "count", "(", "*", ")", "asc", "limit", "value"], "question": "With which kind of payment method were the least number of payments processed?", "question_toks": ["With", "which", "kind", "of", "payment", "method", "were", "the", "least", "number", "of", "payments", "processed", "?"], "guid": 7464}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | Find the the name of the customers who have a loan with amount more than 3000.", "sql": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE amount  >  3000", "example": {"db_id": "loan_1", "query": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE amount  >  3000", "query_toks": ["SELECT", "T1.cust_name", "FROM", "customer", "AS", "T1", "JOIN", "loan", "AS", "T2", "ON", "T1.cust_id", "=", "T2.cust_id", "WHERE", "amount", ">", "3000"], "query_toks_no_value": ["select", "t1", ".", "cust_name", "from", "customer", "as", "t1", "join", "loan", "as", "t2", "on", "t1", ".", "cust_id", "=", "t2", ".", "cust_id", "where", "amount", ">", "value"], "question": "Find the the name of the customers who have a loan with amount more than 3000.", "question_toks": ["Find", "the", "the", "name", "of", "the", "customers", "who", "have", "a", "loan", "with", "amount", "more", "than", "3000", "."], "guid": 7465}}
{"text": "Customers: Customer_ID, Customer_Details; Staff: Staff_ID, Staff_Details; Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claim_Headers: Claim_Header_ID, Claim_Status_Code, Claim_Type_Code, Policy_ID, Date_of_Claim, Date_of_Settlement, Amount_Claimed, Amount_Piad; Claims_Documents: Claim_ID, Document_Type_Code, Created_by_Staff_ID, Created_Date; Claims_Processing_Stages: Claim_Stage_ID, Next_Claim_Stage_ID, Claim_Status_Name, Claim_Status_Description; Claims_Processing: Claim_Processing_ID, Claim_ID, Claim_Outcome_Code, Claim_Stage_ID, Staff_ID | Which customer made the largest amount of claim in a single claim? Return the customer details.", "sql": "SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id  =  t2.policy_id JOIN customers AS t3 ON t2.customer_id  =  t3.customer_id WHERE t1.amount_claimed  =  (SELECT max(amount_claimed) FROM claim_headers)", "example": {"db_id": "insurance_and_eClaims", "query": "SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id  =  t2.policy_id JOIN customers AS t3 ON t2.customer_id  =  t3.customer_id WHERE t1.amount_claimed  =  (SELECT max(amount_claimed) FROM claim_headers)", "query_toks": ["SELECT", "t3.customer_details", "FROM", "claim_headers", "AS", "t1", "JOIN", "policies", "AS", "t2", "ON", "t1.policy_id", "=", "t2.policy_id", "JOIN", "customers", "AS", "t3", "ON", "t2.customer_id", "=", "t3.customer_id", "WHERE", "t1.amount_claimed", "=", "(", "SELECT", "max", "(", "amount_claimed", ")", "FROM", "claim_headers", ")"], "query_toks_no_value": ["select", "t3", ".", "customer_details", "from", "claim_headers", "as", "t1", "join", "policies", "as", "t2", "on", "t1", ".", "policy_id", "=", "t2", ".", "policy_id", "join", "customers", "as", "t3", "on", "t2", ".", "customer_id", "=", "t3", ".", "customer_id", "where", "t1", ".", "amount_claimed", "=", "(", "select", "max", "(", "amount_claimed", ")", "from", "claim_headers", ")"], "question": "Which customer made the largest amount of claim in a single claim? Return the customer details.", "question_toks": ["Which", "customer", "made", "the", "largest", "amount", "of", "claim", "in", "a", "single", "claim", "?", "Return", "the", "customer", "details", "."], "guid": 7466}}
{"text": "ACCOUNTS: custid, name; SAVINGS: custid, balance; CHECKING: custid, balance | Find the name of account that has the lowest total checking and saving balance.", "sql": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance + T3.balance LIMIT 1", "example": {"db_id": "small_bank_1", "query": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance + T3.balance LIMIT 1", "query_toks": ["SELECT", "T1.name", "FROM", "accounts", "AS", "T1", "JOIN", "checking", "AS", "T2", "ON", "T1.custid", "=", "T2.custid", "JOIN", "savings", "AS", "T3", "ON", "T1.custid", "=", "T3.custid", "ORDER", "BY", "T2.balance", "+", "T3.balance", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "accounts", "as", "t1", "join", "checking", "as", "t2", "on", "t1", ".", "custid", "=", "t2", ".", "custid", "join", "savings", "as", "t3", "on", "t1", ".", "custid", "=", "t3", ".", "custid", "order", "by", "t2", ".", "balance", "+", "t3", ".", "balance", "limit", "value"], "question": "Find the name of account that has the lowest total checking and saving balance.", "question_toks": ["Find", "the", "name", "of", "account", "that", "has", "the", "lowest", "total", "checking", "and", "saving", "balance", "."], "guid": 7467}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | What is the total account balance for customers with a credit score of above 100 for the different states?", "sql": "SELECT sum(acc_bal) ,  state FROM customer WHERE credit_score  >  100 GROUP BY state", "example": {"db_id": "loan_1", "query": "SELECT sum(acc_bal) ,  state FROM customer WHERE credit_score  >  100 GROUP BY state", "query_toks": ["SELECT", "sum", "(", "acc_bal", ")", ",", "state", "FROM", "customer", "WHERE", "credit_score", ">", "100", "GROUP", "BY", "state"], "query_toks_no_value": ["select", "sum", "(", "acc_bal", ")", ",", "state", "from", "customer", "where", "credit_score", ">", "value", "group", "by", "state"], "question": "What is the total account balance for customers with a credit score of above 100 for the different states?", "question_toks": ["What", "is", "the", "total", "account", "balance", "for", "customers", "with", "a", "credit", "score", "of", "above", "100", "for", "the", "different", "states", "?"], "guid": 7468}}
{"text": "Customers: Customer_ID, Customer_Details; Staff: Staff_ID, Staff_Details; Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claim_Headers: Claim_Header_ID, Claim_Status_Code, Claim_Type_Code, Policy_ID, Date_of_Claim, Date_of_Settlement, Amount_Claimed, Amount_Piad; Claims_Documents: Claim_ID, Document_Type_Code, Created_by_Staff_ID, Created_Date; Claims_Processing_Stages: Claim_Stage_ID, Next_Claim_Stage_ID, Claim_Status_Name, Claim_Status_Description; Claims_Processing: Claim_Processing_ID, Claim_ID, Claim_Outcome_Code, Claim_Stage_ID, Staff_ID | Which customers have the substring \"Diana\" in their names? Return the customer details.", "sql": "SELECT customer_details FROM customers WHERE customer_details LIKE \"%Diana%\"", "example": {"db_id": "insurance_and_eClaims", "query": "SELECT customer_details FROM customers WHERE customer_details LIKE \"%Diana%\"", "query_toks": ["SELECT", "customer_details", "FROM", "customers", "WHERE", "customer_details", "LIKE", "``", "%", "Diana", "%", "''"], "query_toks_no_value": ["select", "customer_details", "from", "customers", "where", "customer_details", "like", "value"], "question": "Which customers have the substring \"Diana\" in their names? Return the customer details.", "question_toks": ["Which", "customers", "have", "the", "substring", "``", "Diana", "''", "in", "their", "names", "?", "Return", "the", "customer", "details", "."], "guid": 7469}}
{"text": "Customers: Customer_ID, Customer_Details; Customer_Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claims: Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled; Settlements: Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID; Payments: Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment | List the details of the customers who do not have any policies.", "sql": "SELECT customer_details FROM Customers EXCEPT SELECT T1.customer_details FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.customer_id  =  T2.customer_id", "example": {"db_id": "insurance_policies", "query": "SELECT customer_details FROM Customers EXCEPT SELECT T1.customer_details FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.customer_id  =  T2.customer_id", "query_toks": ["SELECT", "customer_details", "FROM", "Customers", "EXCEPT", "SELECT", "T1.customer_details", "FROM", "Customers", "AS", "T1", "JOIN", "Customer_Policies", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id"], "query_toks_no_value": ["select", "customer_details", "from", "customers", "except", "select", "t1", ".", "customer_details", "from", "customers", "as", "t1", "join", "customer_policies", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id"], "question": "List the details of the customers who do not have any policies.", "question_toks": ["List", "the", "details", "of", "the", "customers", "who", "do", "not", "have", "any", "policies", "."], "guid": 7470}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | What is the average credit score for customers who have taken a loan?", "sql": "SELECT avg(credit_score) FROM customer WHERE cust_id IN (SELECT cust_id FROM loan)", "example": {"db_id": "loan_1", "query": "SELECT avg(credit_score) FROM customer WHERE cust_id IN (SELECT cust_id FROM loan)", "query_toks": ["SELECT", "avg", "(", "credit_score", ")", "FROM", "customer", "WHERE", "cust_id", "IN", "(", "SELECT", "cust_id", "FROM", "loan", ")"], "query_toks_no_value": ["select", "avg", "(", "credit_score", ")", "from", "customer", "where", "cust_id", "in", "(", "select", "cust_id", "from", "loan", ")"], "question": "What is the average credit score for customers who have taken a loan?", "question_toks": ["What", "is", "the", "average", "credit", "score", "for", "customers", "who", "have", "taken", "a", "loan", "?"], "guid": 7471}}
{"text": "ACCOUNTS: custid, name; SAVINGS: custid, balance; CHECKING: custid, balance | What are the balances of checking accounts belonging to people with savings balances greater than the average savings balance?", "sql": "SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T1.name IN (SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  >  (SELECT avg(balance) FROM savings))", "example": {"db_id": "small_bank_1", "query": "SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T1.name IN (SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  >  (SELECT avg(balance) FROM savings))", "query_toks": ["SELECT", "T2.balance", "FROM", "accounts", "AS", "T1", "JOIN", "checking", "AS", "T2", "ON", "T1.custid", "=", "T2.custid", "WHERE", "T1.name", "IN", "(", "SELECT", "T1.name", "FROM", "accounts", "AS", "T1", "JOIN", "savings", "AS", "T2", "ON", "T1.custid", "=", "T2.custid", "WHERE", "T2.balance", ">", "(", "SELECT", "avg", "(", "balance", ")", "FROM", "savings", ")", ")"], "query_toks_no_value": ["select", "t2", ".", "balance", "from", "accounts", "as", "t1", "join", "checking", "as", "t2", "on", "t1", ".", "custid", "=", "t2", ".", "custid", "where", "t1", ".", "name", "in", "(", "select", "t1", ".", "name", "from", "accounts", "as", "t1", "join", "savings", "as", "t2", "on", "t1", ".", "custid", "=", "t2", ".", "custid", "where", "t2", ".", "balance", ">", "(", "select", "avg", "(", "balance", ")", "from", "savings", ")", ")"], "question": "What are the balances of checking accounts belonging to people with savings balances greater than the average savings balance?", "question_toks": ["What", "are", "the", "balances", "of", "checking", "accounts", "belonging", "to", "people", "with", "savings", "balances", "greater", "than", "the", "average", "savings", "balance", "?"], "guid": 7472}}
{"text": "Customers: Customer_ID, Customer_Details; Customer_Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claims: Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled; Settlements: Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID; Payments: Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment | Give me the payment Id, the date and the amount for all the payments processed with Visa.", "sql": "SELECT Payment_ID ,  Date_Payment_Made ,  Amount_Payment FROM Payments WHERE Payment_Method_Code  =  'Visa'", "example": {"db_id": "insurance_policies", "query": "SELECT Payment_ID ,  Date_Payment_Made ,  Amount_Payment FROM Payments WHERE Payment_Method_Code  =  'Visa'", "query_toks": ["SELECT", "Payment_ID", ",", "Date_Payment_Made", ",", "Amount_Payment", "FROM", "Payments", "WHERE", "Payment_Method_Code", "=", "'Visa", "'"], "query_toks_no_value": ["select", "payment_id", ",", "date_payment_made", ",", "amount_payment", "from", "payments", "where", "payment_method_code", "=", "value"], "question": "Give me the payment Id, the date and the amount for all the payments processed with Visa.", "question_toks": ["Give", "me", "the", "payment", "Id", ",", "the", "date", "and", "the", "amount", "for", "all", "the", "payments", "processed", "with", "Visa", "."], "guid": 7473}}
{"text": "ACCOUNTS: custid, name; SAVINGS: custid, balance; CHECKING: custid, balance | What is the savings balance of the account belonging to the customer with the highest checking balance?", "sql": "SELECT T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance DESC LIMIT 1", "example": {"db_id": "small_bank_1", "query": "SELECT T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance DESC LIMIT 1", "query_toks": ["SELECT", "T3.balance", "FROM", "accounts", "AS", "T1", "JOIN", "checking", "AS", "T2", "ON", "T1.custid", "=", "T2.custid", "JOIN", "savings", "AS", "T3", "ON", "T1.custid", "=", "T3.custid", "ORDER", "BY", "T2.balance", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t3", ".", "balance", "from", "accounts", "as", "t1", "join", "checking", "as", "t2", "on", "t1", ".", "custid", "=", "t2", ".", "custid", "join", "savings", "as", "t3", "on", "t1", ".", "custid", "=", "t3", ".", "custid", "order", "by", "t2", ".", "balance", "desc", "limit", "value"], "question": "What is the savings balance of the account belonging to the customer with the highest checking balance?", "question_toks": ["What", "is", "the", "savings", "balance", "of", "the", "account", "belonging", "to", "the", "customer", "with", "the", "highest", "checking", "balance", "?"], "guid": 7474}}
{"text": "Customers: Customer_ID, Customer_Details; Staff: Staff_ID, Staff_Details; Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claim_Headers: Claim_Header_ID, Claim_Status_Code, Claim_Type_Code, Policy_ID, Date_of_Claim, Date_of_Settlement, Amount_Claimed, Amount_Piad; Claims_Documents: Claim_ID, Document_Type_Code, Created_by_Staff_ID, Created_Date; Claims_Processing_Stages: Claim_Stage_ID, Next_Claim_Stage_ID, Claim_Status_Name, Claim_Status_Description; Claims_Processing: Claim_Processing_ID, Claim_ID, Claim_Outcome_Code, Claim_Stage_ID, Staff_ID | Which customers have an insurance policy with the type code \"Deputy\"? Give me the customer details.", "sql": "SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.policy_type_code  =  \"Deputy\"", "example": {"db_id": "insurance_and_eClaims", "query": "SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.policy_type_code  =  \"Deputy\"", "query_toks": ["SELECT", "DISTINCT", "t2.customer_details", "FROM", "policies", "AS", "t1", "JOIN", "customers", "AS", "t2", "ON", "t1.customer_id", "=", "t2.customer_id", "WHERE", "t1.policy_type_code", "=", "``", "Deputy", "''"], "query_toks_no_value": ["select", "distinct", "t2", ".", "customer_details", "from", "policies", "as", "t1", "join", "customers", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "where", "t1", ".", "policy_type_code", "=", "value"], "question": "Which customers have an insurance policy with the type code \"Deputy\"? Give me the customer details.", "question_toks": ["Which", "customers", "have", "an", "insurance", "policy", "with", "the", "type", "code", "``", "Deputy", "''", "?", "Give", "me", "the", "customer", "details", "."], "guid": 7475}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | Find the city and name of bank branches that provide business loans.", "sql": "SELECT T1.bname ,  T1.city FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id WHERE T2.loan_type  =  'Business'", "example": {"db_id": "loan_1", "query": "SELECT T1.bname ,  T1.city FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id WHERE T2.loan_type  =  'Business'", "query_toks": ["SELECT", "T1.bname", ",", "T1.city", "FROM", "bank", "AS", "T1", "JOIN", "loan", "AS", "T2", "ON", "T1.branch_id", "=", "T2.branch_id", "WHERE", "T2.loan_type", "=", "'Business", "'"], "query_toks_no_value": ["select", "t1", ".", "bname", ",", "t1", ".", "city", "from", "bank", "as", "t1", "join", "loan", "as", "t2", "on", "t1", ".", "branch_id", "=", "t2", ".", "branch_id", "where", "t2", ".", "loan_type", "=", "value"], "question": "Find the city and name of bank branches that provide business loans.", "question_toks": ["Find", "the", "city", "and", "name", "of", "bank", "branches", "that", "provide", "business", "loans", "."], "guid": 7476}}
{"text": "ACCOUNTS: custid, name; SAVINGS: custid, balance; CHECKING: custid, balance | What is the name corresponding to the accoung with the lowest sum of checking and savings balances?", "sql": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance + T3.balance LIMIT 1", "example": {"db_id": "small_bank_1", "query": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance + T3.balance LIMIT 1", "query_toks": ["SELECT", "T1.name", "FROM", "accounts", "AS", "T1", "JOIN", "checking", "AS", "T2", "ON", "T1.custid", "=", "T2.custid", "JOIN", "savings", "AS", "T3", "ON", "T1.custid", "=", "T3.custid", "ORDER", "BY", "T2.balance", "+", "T3.balance", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "accounts", "as", "t1", "join", "checking", "as", "t2", "on", "t1", ".", "custid", "=", "t2", ".", "custid", "join", "savings", "as", "t3", "on", "t1", ".", "custid", "=", "t3", ".", "custid", "order", "by", "t2", ".", "balance", "+", "t3", ".", "balance", "limit", "value"], "question": "What is the name corresponding to the accoung with the lowest sum of checking and savings balances?", "question_toks": ["What", "is", "the", "name", "corresponding", "to", "the", "accoung", "with", "the", "lowest", "sum", "of", "checking", "and", "savings", "balances", "?"], "guid": 7477}}
{"text": "Customers: Customer_ID, Customer_Details; Staff: Staff_ID, Staff_Details; Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claim_Headers: Claim_Header_ID, Claim_Status_Code, Claim_Type_Code, Policy_ID, Date_of_Claim, Date_of_Settlement, Amount_Claimed, Amount_Piad; Claims_Documents: Claim_ID, Document_Type_Code, Created_by_Staff_ID, Created_Date; Claims_Processing_Stages: Claim_Stage_ID, Next_Claim_Stage_ID, Claim_Status_Name, Claim_Status_Description; Claims_Processing: Claim_Processing_ID, Claim_ID, Claim_Outcome_Code, Claim_Stage_ID, Staff_ID | Which customers have an insurance policy with the type code \"Deputy\" or \"Uniform\"? Return the customer details.", "sql": "SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.policy_type_code  =  \"Deputy\" OR t1.policy_type_code  =  \"Uniform\"", "example": {"db_id": "insurance_and_eClaims", "query": "SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.policy_type_code  =  \"Deputy\" OR t1.policy_type_code  =  \"Uniform\"", "query_toks": ["SELECT", "DISTINCT", "t2.customer_details", "FROM", "policies", "AS", "t1", "JOIN", "customers", "AS", "t2", "ON", "t1.customer_id", "=", "t2.customer_id", "WHERE", "t1.policy_type_code", "=", "``", "Deputy", "''", "OR", "t1.policy_type_code", "=", "``", "Uniform", "''"], "query_toks_no_value": ["select", "distinct", "t2", ".", "customer_details", "from", "policies", "as", "t1", "join", "customers", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "where", "t1", ".", "policy_type_code", "=", "value", "or", "t1", ".", "policy_type_code", "=", "value"], "question": "Which customers have an insurance policy with the type code \"Deputy\" or \"Uniform\"? Return the customer details.", "question_toks": ["Which", "customers", "have", "an", "insurance", "policy", "with", "the", "type", "code", "``", "Deputy", "''", "or", "``", "Uniform", "''", "?", "Return", "the", "customer", "details", "."], "guid": 7478}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | Which state has the greatest total number of bank customers?", "sql": "SELECT state FROM bank GROUP BY state ORDER BY sum(no_of_customers) DESC LIMIT 1", "example": {"db_id": "loan_1", "query": "SELECT state FROM bank GROUP BY state ORDER BY sum(no_of_customers) DESC LIMIT 1", "query_toks": ["SELECT", "state", "FROM", "bank", "GROUP", "BY", "state", "ORDER", "BY", "sum", "(", "no_of_customers", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "state", "from", "bank", "group", "by", "state", "order", "by", "sum", "(", "no_of_customers", ")", "desc", "limit", "value"], "question": "Which state has the greatest total number of bank customers?", "question_toks": ["Which", "state", "has", "the", "greatest", "total", "number", "of", "bank", "customers", "?"], "guid": 7479}}
{"text": "ACCOUNTS: custid, name; SAVINGS: custid, balance; CHECKING: custid, balance | Find the name and savings balance of the top 3 accounts with the highest saving balance sorted by savings balance in descending order.", "sql": "SELECT T1.name ,  T2.balance FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid ORDER BY T2.balance DESC LIMIT 3", "example": {"db_id": "small_bank_1", "query": "SELECT T1.name ,  T2.balance FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid ORDER BY T2.balance DESC LIMIT 3", "query_toks": ["SELECT", "T1.name", ",", "T2.balance", "FROM", "accounts", "AS", "T1", "JOIN", "savings", "AS", "T2", "ON", "T1.custid", "=", "T2.custid", "ORDER", "BY", "T2.balance", "DESC", "LIMIT", "3"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "t2", ".", "balance", "from", "accounts", "as", "t1", "join", "savings", "as", "t2", "on", "t1", ".", "custid", "=", "t2", ".", "custid", "order", "by", "t2", ".", "balance", "desc", "limit", "value"], "question": "Find the name and savings balance of the top 3 accounts with the highest saving balance sorted by savings balance in descending order.", "question_toks": ["Find", "the", "name", "and", "savings", "balance", "of", "the", "top", "3", "accounts", "with", "the", "highest", "saving", "balance", "sorted", "by", "savings", "balance", "in", "descending", "order", "."], "guid": 7480}}
{"text": "Customers: Customer_ID, Customer_Details; Customer_Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claims: Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled; Settlements: Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID; Payments: Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment | Find the policy type the most customers choose.", "sql": "SELECT Policy_Type_Code FROM Customer_Policies GROUP BY Policy_Type_Code ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "insurance_policies", "query": "SELECT Policy_Type_Code FROM Customer_Policies GROUP BY Policy_Type_Code ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "Policy_Type_Code", "FROM", "Customer_Policies", "GROUP", "BY", "Policy_Type_Code", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "policy_type_code", "from", "customer_policies", "group", "by", "policy_type_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Find the policy type the most customers choose.", "question_toks": ["Find", "the", "policy", "type", "the", "most", "customers", "choose", "."], "guid": 7481}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | Find the branch name of the bank that has the most number of customers.", "sql": "SELECT bname FROM bank ORDER BY no_of_customers DESC LIMIT 1", "example": {"db_id": "loan_1", "query": "SELECT bname FROM bank ORDER BY no_of_customers DESC LIMIT 1", "query_toks": ["SELECT", "bname", "FROM", "bank", "ORDER", "BY", "no_of_customers", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "bname", "from", "bank", "order", "by", "no_of_customers", "desc", "limit", "value"], "question": "Find the branch name of the bank that has the most number of customers.", "question_toks": ["Find", "the", "branch", "name", "of", "the", "bank", "that", "has", "the", "most", "number", "of", "customers", "."], "guid": 7482}}
{"text": "ACCOUNTS: custid, name; SAVINGS: custid, balance; CHECKING: custid, balance | How many accounts are there in total?", "sql": "SELECT count(*) FROM accounts", "example": {"db_id": "small_bank_1", "query": "SELECT count(*) FROM accounts", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "accounts"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "accounts"], "question": "How many accounts are there in total?", "question_toks": ["How", "many", "accounts", "are", "there", "in", "total", "?"], "guid": 7483}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | Find the name of customers who have more than one loan.", "sql": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING count(*)  >  1", "example": {"db_id": "loan_1", "query": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING count(*)  >  1", "query_toks": ["SELECT", "T1.cust_name", "FROM", "customer", "AS", "T1", "JOIN", "loan", "AS", "T2", "ON", "T1.cust_id", "=", "T2.cust_id", "GROUP", "BY", "T1.cust_name", "HAVING", "count", "(", "*", ")", ">", "1"], "query_toks_no_value": ["select", "t1", ".", "cust_name", "from", "customer", "as", "t1", "join", "loan", "as", "t2", "on", "t1", ".", "cust_id", "=", "t2", ".", "cust_id", "group", "by", "t1", ".", "cust_name", "having", "count", "(", "*", ")", ">", "value"], "question": "Find the name of customers who have more than one loan.", "question_toks": ["Find", "the", "name", "of", "customers", "who", "have", "more", "than", "one", "loan", "."], "guid": 7484}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | What is the average number of customers across banks in the state of Utah?", "sql": "SELECT avg(no_of_customers) FROM bank WHERE state  =  'Utah'", "example": {"db_id": "loan_1", "query": "SELECT avg(no_of_customers) FROM bank WHERE state  =  'Utah'", "query_toks": ["SELECT", "avg", "(", "no_of_customers", ")", "FROM", "bank", "WHERE", "state", "=", "'Utah", "'"], "query_toks_no_value": ["select", "avg", "(", "no_of_customers", ")", "from", "bank", "where", "state", "=", "value"], "question": "What is the average number of customers across banks in the state of Utah?", "question_toks": ["What", "is", "the", "average", "number", "of", "customers", "across", "banks", "in", "the", "state", "of", "Utah", "?"], "guid": 7485}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | What are the names and cities of bank branches that offer loans for business?", "sql": "SELECT T1.bname ,  T1.city FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id WHERE T2.loan_type  =  'Business'", "example": {"db_id": "loan_1", "query": "SELECT T1.bname ,  T1.city FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id WHERE T2.loan_type  =  'Business'", "query_toks": ["SELECT", "T1.bname", ",", "T1.city", "FROM", "bank", "AS", "T1", "JOIN", "loan", "AS", "T2", "ON", "T1.branch_id", "=", "T2.branch_id", "WHERE", "T2.loan_type", "=", "'Business", "'"], "query_toks_no_value": ["select", "t1", ".", "bname", ",", "t1", ".", "city", "from", "bank", "as", "t1", "join", "loan", "as", "t2", "on", "t1", ".", "branch_id", "=", "t2", ".", "branch_id", "where", "t2", ".", "loan_type", "=", "value"], "question": "What are the names and cities of bank branches that offer loans for business?", "question_toks": ["What", "are", "the", "names", "and", "cities", "of", "bank", "branches", "that", "offer", "loans", "for", "business", "?"], "guid": 7486}}
{"text": "Customers: Customer_ID, Customer_name; Services: Service_ID, Service_name; Available_Policies: Policy_ID, policy_type_code, Customer_Phone; Customers_Policies: Customer_ID, Policy_ID, Date_Opened, Date_Closed; First_Notification_of_Loss: FNOL_ID, Customer_ID, Policy_ID, Service_ID; Claims: Claim_ID, FNOL_ID, Effective_Date; Settlements: Settlement_ID, Claim_ID, Effective_Date, Settlement_Amount | Find the names of customers who have used both the service \"Close a policy\" and the service \"New policy application\".", "sql": "SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  \"Close a policy\" INTERSECT SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  \"New policy application\"", "example": {"db_id": "insurance_fnol", "query": "SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  \"Close a policy\" INTERSECT SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  \"New policy application\"", "query_toks": ["SELECT", "t1.customer_name", "FROM", "customers", "AS", "t1", "JOIN", "first_notification_of_loss", "AS", "t2", "ON", "t1.customer_id", "=", "t2.customer_id", "JOIN", "services", "AS", "t3", "ON", "t2.service_id", "=", "t3.service_id", "WHERE", "t3.service_name", "=", "``", "Close", "a", "policy", "''", "INTERSECT", "SELECT", "t1.customer_name", "FROM", "customers", "AS", "t1", "JOIN", "first_notification_of_loss", "AS", "t2", "ON", "t1.customer_id", "=", "t2.customer_id", "JOIN", "services", "AS", "t3", "ON", "t2.service_id", "=", "t3.service_id", "WHERE", "t3.service_name", "=", "``", "New", "policy", "application", "''"], "query_toks_no_value": ["select", "t1", ".", "customer_name", "from", "customers", "as", "t1", "join", "first_notification_of_loss", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "join", "services", "as", "t3", "on", "t2", ".", "service_id", "=", "t3", ".", "service_id", "where", "t3", ".", "service_name", "=", "value", "intersect", "select", "t1", ".", "customer_name", "from", "customers", "as", "t1", "join", "first_notification_of_loss", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "join", "services", "as", "t3", "on", "t2", ".", "service_id", "=", "t3", ".", "service_id", "where", "t3", ".", "service_name", "=", "value"], "question": "Find the names of customers who have used both the service \"Close a policy\" and the service \"New policy application\".", "question_toks": ["Find", "the", "names", "of", "customers", "who", "have", "used", "both", "the", "service", "``", "Close", "a", "policy", "''", "and", "the", "service", "``", "New", "policy", "application", "''", "."], "guid": 7487}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | Find the name and account balance of the customer whose name includes the letter \u2018a\u2019.", "sql": "SELECT cust_name ,  acc_bal FROM customer WHERE cust_name LIKE '%a%'", "example": {"db_id": "loan_1", "query": "SELECT cust_name ,  acc_bal FROM customer WHERE cust_name LIKE '%a%'", "query_toks": ["SELECT", "cust_name", ",", "acc_bal", "FROM", "customer", "WHERE", "cust_name", "LIKE", "'", "%", "a", "%", "'"], "query_toks_no_value": ["select", "cust_name", ",", "acc_bal", "from", "customer", "where", "cust_name", "like", "value"], "question": "Find the name and account balance of the customer whose name includes the letter \u2018a\u2019.", "question_toks": ["Find", "the", "name", "and", "account", "balance", "of", "the", "customer", "whose", "name", "includes", "the", "letter", "\u2018a\u2019", "."], "guid": 7488}}
{"text": "ACCOUNTS: custid, name; SAVINGS: custid, balance; CHECKING: custid, balance | What is the average balance in checking accounts?", "sql": "SELECT avg(balance) FROM checking", "example": {"db_id": "small_bank_1", "query": "SELECT avg(balance) FROM checking", "query_toks": ["SELECT", "avg", "(", "balance", ")", "FROM", "checking"], "query_toks_no_value": ["select", "avg", "(", "balance", ")", "from", "checking"], "question": "What is the average balance in checking accounts?", "question_toks": ["What", "is", "the", "average", "balance", "in", "checking", "accounts", "?"], "guid": 7489}}
{"text": "Customers: Customer_ID, Customer_Details; Customer_Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claims: Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled; Settlements: Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID; Payments: Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment | Tell me the the claim date and settlement date for each settlement case.", "sql": "SELECT Date_Claim_Made ,  Date_Claim_Settled FROM Settlements", "example": {"db_id": "insurance_policies", "query": "SELECT Date_Claim_Made ,  Date_Claim_Settled FROM Settlements", "query_toks": ["SELECT", "Date_Claim_Made", ",", "Date_Claim_Settled", "FROM", "Settlements"], "query_toks_no_value": ["select", "date_claim_made", ",", "date_claim_settled", "from", "settlements"], "question": "Tell me the the claim date and settlement date for each settlement case.", "question_toks": ["Tell", "me", "the", "the", "claim", "date", "and", "settlement", "date", "for", "each", "settlement", "case", "."], "guid": 7490}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | What are the names of the different banks that have provided loans?", "sql": "SELECT DISTINCT T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id", "example": {"db_id": "loan_1", "query": "SELECT DISTINCT T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id", "query_toks": ["SELECT", "DISTINCT", "T1.bname", "FROM", "bank", "AS", "T1", "JOIN", "loan", "AS", "T2", "ON", "T1.branch_id", "=", "T2.branch_id"], "query_toks_no_value": ["select", "distinct", "t1", ".", "bname", "from", "bank", "as", "t1", "join", "loan", "as", "t2", "on", "t1", ".", "branch_id", "=", "t2", ".", "branch_id"], "question": "What are the names of the different banks that have provided loans?", "question_toks": ["What", "are", "the", "names", "of", "the", "different", "banks", "that", "have", "provided", "loans", "?"], "guid": 7491}}
{"text": "Customers: Customer_ID, Customer_Details; Staff: Staff_ID, Staff_Details; Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claim_Headers: Claim_Header_ID, Claim_Status_Code, Claim_Type_Code, Policy_ID, Date_of_Claim, Date_of_Settlement, Amount_Claimed, Amount_Piad; Claims_Documents: Claim_ID, Document_Type_Code, Created_by_Staff_ID, Created_Date; Claims_Processing_Stages: Claim_Stage_ID, Next_Claim_Stage_ID, Claim_Status_Name, Claim_Status_Description; Claims_Processing: Claim_Processing_ID, Claim_ID, Claim_Outcome_Code, Claim_Stage_ID, Staff_ID | What are the names of customers who do not have any policies?", "sql": "SELECT customer_details FROM customers EXCEPT SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id", "example": {"db_id": "insurance_and_eClaims", "query": "SELECT customer_details FROM customers EXCEPT SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id", "query_toks": ["SELECT", "customer_details", "FROM", "customers", "EXCEPT", "SELECT", "t2.customer_details", "FROM", "policies", "AS", "t1", "JOIN", "customers", "AS", "t2", "ON", "t1.customer_id", "=", "t2.customer_id"], "query_toks_no_value": ["select", "customer_details", "from", "customers", "except", "select", "t2", ".", "customer_details", "from", "policies", "as", "t1", "join", "customers", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id"], "question": "What are the names of customers who do not have any policies?", "question_toks": ["What", "are", "the", "names", "of", "customers", "who", "do", "not", "have", "any", "policies", "?"], "guid": 7492}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | How many customers are there?", "sql": "SELECT sum(no_of_customers) FROM bank", "example": {"db_id": "loan_1", "query": "SELECT sum(no_of_customers) FROM bank", "query_toks": ["SELECT", "sum", "(", "no_of_customers", ")", "FROM", "bank"], "query_toks_no_value": ["select", "sum", "(", "no_of_customers", ")", "from", "bank"], "question": "How many customers are there?", "question_toks": ["How", "many", "customers", "are", "there", "?"], "guid": 7493}}
{"text": "Customers: Customer_ID, Customer_Details; Customer_Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claims: Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled; Settlements: Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID; Payments: Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment | Compute the total amount of settlement across all the settlements.", "sql": "SELECT sum(Amount_Settled) FROM Settlements", "example": {"db_id": "insurance_policies", "query": "SELECT sum(Amount_Settled) FROM Settlements", "query_toks": ["SELECT", "sum", "(", "Amount_Settled", ")", "FROM", "Settlements"], "query_toks_no_value": ["select", "sum", "(", "amount_settled", ")", "from", "settlements"], "question": "Compute the total amount of settlement across all the settlements.", "question_toks": ["Compute", "the", "total", "amount", "of", "settlement", "across", "all", "the", "settlements", "."], "guid": 7494}}
{"text": "Customers: Customer_ID, Customer_Details; Staff: Staff_ID, Staff_Details; Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claim_Headers: Claim_Header_ID, Claim_Status_Code, Claim_Type_Code, Policy_ID, Date_of_Claim, Date_of_Settlement, Amount_Claimed, Amount_Piad; Claims_Documents: Claim_ID, Document_Type_Code, Created_by_Staff_ID, Created_Date; Claims_Processing_Stages: Claim_Stage_ID, Next_Claim_Stage_ID, Claim_Status_Name, Claim_Status_Description; Claims_Processing: Claim_Processing_ID, Claim_ID, Claim_Outcome_Code, Claim_Stage_ID, Staff_ID | Find all the policy type codes associated with the customer \"Dayana Robel\"", "sql": "SELECT policy_type_code FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t2.customer_details  =  \"Dayana Robel\"", "example": {"db_id": "insurance_and_eClaims", "query": "SELECT policy_type_code FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t2.customer_details  =  \"Dayana Robel\"", "query_toks": ["SELECT", "policy_type_code", "FROM", "policies", "AS", "t1", "JOIN", "customers", "AS", "t2", "ON", "t1.customer_id", "=", "t2.customer_id", "WHERE", "t2.customer_details", "=", "``", "Dayana", "Robel", "''"], "query_toks_no_value": ["select", "policy_type_code", "from", "policies", "as", "t1", "join", "customers", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "where", "t2", ".", "customer_details", "=", "value"], "question": "Find all the policy type codes associated with the customer \"Dayana Robel\"", "question_toks": ["Find", "all", "the", "policy", "type", "codes", "associated", "with", "the", "customer", "``", "Dayana", "Robel", "''"], "guid": 7495}}
{"text": "Customers: Customer_ID, Customer_Details; Customer_Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claims: Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled; Settlements: Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID; Payments: Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment | What is the most popular payment method?", "sql": "SELECT Payment_Method_Code FROM Payments GROUP BY Payment_Method_Code ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "insurance_policies", "query": "SELECT Payment_Method_Code FROM Payments GROUP BY Payment_Method_Code ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "Payment_Method_Code", "FROM", "Payments", "GROUP", "BY", "Payment_Method_Code", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "payment_method_code", "from", "payments", "group", "by", "payment_method_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the most popular payment method?", "question_toks": ["What", "is", "the", "most", "popular", "payment", "method", "?"], "guid": 7496}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | How many bank branches are there?", "sql": "SELECT count(*) FROM bank", "example": {"db_id": "loan_1", "query": "SELECT count(*) FROM bank", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "bank"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "bank"], "question": "How many bank branches are there?", "question_toks": ["How", "many", "bank", "branches", "are", "there", "?"], "guid": 7497}}
{"text": "Customers: Customer_ID, Customer_Details; Staff: Staff_ID, Staff_Details; Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claim_Headers: Claim_Header_ID, Claim_Status_Code, Claim_Type_Code, Policy_ID, Date_of_Claim, Date_of_Settlement, Amount_Claimed, Amount_Piad; Claims_Documents: Claim_ID, Document_Type_Code, Created_by_Staff_ID, Created_Date; Claims_Processing_Stages: Claim_Stage_ID, Next_Claim_Stage_ID, Claim_Status_Name, Claim_Status_Description; Claims_Processing: Claim_Processing_ID, Claim_ID, Claim_Outcome_Code, Claim_Stage_ID, Staff_ID | Which type of policy is most frequently used? Give me the policy type code.", "sql": "SELECT policy_type_code FROM policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "insurance_and_eClaims", "query": "SELECT policy_type_code FROM policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "policy_type_code", "FROM", "policies", "GROUP", "BY", "policy_type_code", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "policy_type_code", "from", "policies", "group", "by", "policy_type_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which type of policy is most frequently used? Give me the policy type code.", "question_toks": ["Which", "type", "of", "policy", "is", "most", "frequently", "used", "?", "Give", "me", "the", "policy", "type", "code", "."], "guid": 7498}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | What are the different names and credit scores of customers who have taken a loan?", "sql": "SELECT DISTINCT T1.cust_name ,  T1.credit_score FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id", "example": {"db_id": "loan_1", "query": "SELECT DISTINCT T1.cust_name ,  T1.credit_score FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id", "query_toks": ["SELECT", "DISTINCT", "T1.cust_name", ",", "T1.credit_score", "FROM", "customer", "AS", "T1", "JOIN", "loan", "AS", "T2", "ON", "T1.cust_id", "=", "T2.cust_id"], "query_toks_no_value": ["select", "distinct", "t1", ".", "cust_name", ",", "t1", ".", "credit_score", "from", "customer", "as", "t1", "join", "loan", "as", "t2", "on", "t1", ".", "cust_id", "=", "t2", ".", "cust_id"], "question": "What are the different names and credit scores of customers who have taken a loan?", "question_toks": ["What", "are", "the", "different", "names", "and", "credit", "scores", "of", "customers", "who", "have", "taken", "a", "loan", "?"], "guid": 7499}}
{"text": "Customers: Customer_ID, Customer_name; Services: Service_ID, Service_name; Available_Policies: Policy_ID, policy_type_code, Customer_Phone; Customers_Policies: Customer_ID, Policy_ID, Date_Opened, Date_Closed; First_Notification_of_Loss: FNOL_ID, Customer_ID, Policy_ID, Service_ID; Claims: Claim_ID, FNOL_ID, Effective_Date; Settlements: Settlement_ID, Claim_ID, Effective_Date, Settlement_Amount | How many policies are listed for the customer named \"Dayana Robel\"?", "sql": "SELECT count(*) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  \"Dayana Robel\"", "example": {"db_id": "insurance_fnol", "query": "SELECT count(*) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  \"Dayana Robel\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "customers", "AS", "t1", "JOIN", "customers_policies", "AS", "t2", "ON", "t1.customer_id", "=", "t2.customer_id", "WHERE", "t1.customer_name", "=", "``", "Dayana", "Robel", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "customers", "as", "t1", "join", "customers_policies", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "where", "t1", ".", "customer_name", "=", "value"], "question": "How many policies are listed for the customer named \"Dayana Robel\"?", "question_toks": ["How", "many", "policies", "are", "listed", "for", "the", "customer", "named", "``", "Dayana", "Robel", "''", "?"], "guid": 7500}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | What are the names of customers who have taken out more than one loan?", "sql": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING count(*)  >  1", "example": {"db_id": "loan_1", "query": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING count(*)  >  1", "query_toks": ["SELECT", "T1.cust_name", "FROM", "customer", "AS", "T1", "JOIN", "loan", "AS", "T2", "ON", "T1.cust_id", "=", "T2.cust_id", "GROUP", "BY", "T1.cust_name", "HAVING", "count", "(", "*", ")", ">", "1"], "query_toks_no_value": ["select", "t1", ".", "cust_name", "from", "customer", "as", "t1", "join", "loan", "as", "t2", "on", "t1", ".", "cust_id", "=", "t2", ".", "cust_id", "group", "by", "t1", ".", "cust_name", "having", "count", "(", "*", ")", ">", "value"], "question": "What are the names of customers who have taken out more than one loan?", "question_toks": ["What", "are", "the", "names", "of", "customers", "who", "have", "taken", "out", "more", "than", "one", "loan", "?"], "guid": 7501}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | What are the names of customers who have a loan of more than 3000 in amount?", "sql": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE amount  >  3000", "example": {"db_id": "loan_1", "query": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE amount  >  3000", "query_toks": ["SELECT", "T1.cust_name", "FROM", "customer", "AS", "T1", "JOIN", "loan", "AS", "T2", "ON", "T1.cust_id", "=", "T2.cust_id", "WHERE", "amount", ">", "3000"], "query_toks_no_value": ["select", "t1", ".", "cust_name", "from", "customer", "as", "t1", "join", "loan", "as", "t2", "on", "t1", ".", "cust_id", "=", "t2", ".", "cust_id", "where", "amount", ">", "value"], "question": "What are the names of customers who have a loan of more than 3000 in amount?", "question_toks": ["What", "are", "the", "names", "of", "customers", "who", "have", "a", "loan", "of", "more", "than", "3000", "in", "amount", "?"], "guid": 7502}}
{"text": "Customers: Customer_ID, Customer_name; Services: Service_ID, Service_name; Available_Policies: Policy_ID, policy_type_code, Customer_Phone; Customers_Policies: Customer_ID, Policy_ID, Date_Opened, Date_Closed; First_Notification_of_Loss: FNOL_ID, Customer_ID, Policy_ID, Service_ID; Claims: Claim_ID, FNOL_ID, Effective_Date; Settlements: Settlement_ID, Claim_ID, Effective_Date, Settlement_Amount | Find the phone numbers of customers using the most common policy type among the available policies.", "sql": "SELECT customer_phone FROM available_policies WHERE policy_type_code  =  (SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1)", "example": {"db_id": "insurance_fnol", "query": "SELECT customer_phone FROM available_policies WHERE policy_type_code  =  (SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1)", "query_toks": ["SELECT", "customer_phone", "FROM", "available_policies", "WHERE", "policy_type_code", "=", "(", "SELECT", "policy_type_code", "FROM", "available_policies", "GROUP", "BY", "policy_type_code", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1", ")"], "query_toks_no_value": ["select", "customer_phone", "from", "available_policies", "where", "policy_type_code", "=", "(", "select", "policy_type_code", "from", "available_policies", "group", "by", "policy_type_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "value", ")"], "question": "Find the phone numbers of customers using the most common policy type among the available policies.", "question_toks": ["Find", "the", "phone", "numbers", "of", "customers", "using", "the", "most", "common", "policy", "type", "among", "the", "available", "policies", "."], "guid": 7503}}
{"text": "Customers: Customer_ID, Customer_Details; Customer_Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claims: Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled; Settlements: Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID; Payments: Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment | Who are the customers that had more than 1 policy? List the customer details and id.", "sql": "SELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.Customer_id GROUP BY T1.customer_id HAVING count(*)  >  1", "example": {"db_id": "insurance_policies", "query": "SELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.Customer_id GROUP BY T1.customer_id HAVING count(*)  >  1", "query_toks": ["SELECT", "T1.customer_details", ",", "T1.customer_id", "FROM", "Customers", "AS", "T1", "JOIN", "Customer_Policies", "AS", "T2", "ON", "T1.Customer_id", "=", "T2.Customer_id", "GROUP", "BY", "T1.customer_id", "HAVING", "count", "(", "*", ")", ">", "1"], "query_toks_no_value": ["select", "t1", ".", "customer_details", ",", "t1", ".", "customer_id", "from", "customers", "as", "t1", "join", "customer_policies", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "group", "by", "t1", ".", "customer_id", "having", "count", "(", "*", ")", ">", "value"], "question": "Who are the customers that had more than 1 policy? List the customer details and id.", "question_toks": ["Who", "are", "the", "customers", "that", "had", "more", "than", "1", "policy", "?", "List", "the", "customer", "details", "and", "id", "."], "guid": 7504}}
{"text": "Customers: Customer_ID, Customer_Details; Staff: Staff_ID, Staff_Details; Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claim_Headers: Claim_Header_ID, Claim_Status_Code, Claim_Type_Code, Policy_ID, Date_of_Claim, Date_of_Settlement, Amount_Claimed, Amount_Piad; Claims_Documents: Claim_ID, Document_Type_Code, Created_by_Staff_ID, Created_Date; Claims_Processing_Stages: Claim_Stage_ID, Next_Claim_Stage_ID, Claim_Status_Name, Claim_Status_Description; Claims_Processing: Claim_Processing_ID, Claim_ID, Claim_Outcome_Code, Claim_Stage_ID, Staff_ID | Find the number of records of each policy type and its type code.", "sql": "SELECT policy_type_code ,  count(*) FROM policies GROUP BY policy_type_code", "example": {"db_id": "insurance_and_eClaims", "query": "SELECT policy_type_code ,  count(*) FROM policies GROUP BY policy_type_code", "query_toks": ["SELECT", "policy_type_code", ",", "count", "(", "*", ")", "FROM", "policies", "GROUP", "BY", "policy_type_code"], "query_toks_no_value": ["select", "policy_type_code", ",", "count", "(", "*", ")", "from", "policies", "group", "by", "policy_type_code"], "question": "Find the number of records of each policy type and its type code.", "question_toks": ["Find", "the", "number", "of", "records", "of", "each", "policy", "type", "and", "its", "type", "code", "."], "guid": 7505}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | What is the name, account type, and account balance corresponding to the customer with the highest credit score?", "sql": "SELECT cust_name ,  acc_type ,  acc_bal FROM customer ORDER BY credit_score DESC LIMIT 1", "example": {"db_id": "loan_1", "query": "SELECT cust_name ,  acc_type ,  acc_bal FROM customer ORDER BY credit_score DESC LIMIT 1", "query_toks": ["SELECT", "cust_name", ",", "acc_type", ",", "acc_bal", "FROM", "customer", "ORDER", "BY", "credit_score", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "cust_name", ",", "acc_type", ",", "acc_bal", "from", "customer", "order", "by", "credit_score", "desc", "limit", "value"], "question": "What is the name, account type, and account balance corresponding to the customer with the highest credit score?", "question_toks": ["What", "is", "the", "name", ",", "account", "type", ",", "and", "account", "balance", "corresponding", "to", "the", "customer", "with", "the", "highest", "credit", "score", "?"], "guid": 7506}}
{"text": "Customers: Customer_ID, Customer_Details; Customer_Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claims: Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled; Settlements: Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID; Payments: Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment | What is the payment method that were used the least often?", "sql": "SELECT Payment_Method_Code FROM Payments GROUP BY Payment_Method_Code ORDER BY count(*) ASC LIMIT 1", "example": {"db_id": "insurance_policies", "query": "SELECT Payment_Method_Code FROM Payments GROUP BY Payment_Method_Code ORDER BY count(*) ASC LIMIT 1", "query_toks": ["SELECT", "Payment_Method_Code", "FROM", "Payments", "GROUP", "BY", "Payment_Method_Code", "ORDER", "BY", "count", "(", "*", ")", "ASC", "LIMIT", "1"], "query_toks_no_value": ["select", "payment_method_code", "from", "payments", "group", "by", "payment_method_code", "order", "by", "count", "(", "*", ")", "asc", "limit", "value"], "question": "What is the payment method that were used the least often?", "question_toks": ["What", "is", "the", "payment", "method", "that", "were", "used", "the", "least", "often", "?"], "guid": 7507}}
{"text": "Customers: Customer_ID, Customer_name; Services: Service_ID, Service_name; Available_Policies: Policy_ID, policy_type_code, Customer_Phone; Customers_Policies: Customer_ID, Policy_ID, Date_Opened, Date_Closed; First_Notification_of_Loss: FNOL_ID, Customer_ID, Policy_ID, Service_ID; Claims: Claim_ID, FNOL_ID, Effective_Date; Settlements: Settlement_ID, Claim_ID, Effective_Date, Settlement_Amount | What are the IDs of customers who have \"Diana\" in part of their names?", "sql": "SELECT customer_id FROM customers WHERE customer_name LIKE \"%Diana%\"", "example": {"db_id": "insurance_fnol", "query": "SELECT customer_id FROM customers WHERE customer_name LIKE \"%Diana%\"", "query_toks": ["SELECT", "customer_id", "FROM", "customers", "WHERE", "customer_name", "LIKE", "``", "%", "Diana", "%", "''"], "query_toks_no_value": ["select", "customer_id", "from", "customers", "where", "customer_name", "like", "value"], "question": "What are the IDs of customers who have \"Diana\" in part of their names?", "question_toks": ["What", "are", "the", "IDs", "of", "customers", "who", "have", "``", "Diana", "''", "in", "part", "of", "their", "names", "?"], "guid": 7508}}
{"text": "Customers: Customer_ID, Customer_name; Services: Service_ID, Service_name; Available_Policies: Policy_ID, policy_type_code, Customer_Phone; Customers_Policies: Customer_ID, Policy_ID, Date_Opened, Date_Closed; First_Notification_of_Loss: FNOL_ID, Customer_ID, Policy_ID, Service_ID; Claims: Claim_ID, FNOL_ID, Effective_Date; Settlements: Settlement_ID, Claim_ID, Effective_Date, Settlement_Amount | List all the services in the alphabetical order.", "sql": "SELECT service_name FROM services ORDER BY service_name", "example": {"db_id": "insurance_fnol", "query": "SELECT service_name FROM services ORDER BY service_name", "query_toks": ["SELECT", "service_name", "FROM", "services", "ORDER", "BY", "service_name"], "query_toks_no_value": ["select", "service_name", "from", "services", "order", "by", "service_name"], "question": "List all the services in the alphabetical order.", "question_toks": ["List", "all", "the", "services", "in", "the", "alphabetical", "order", "."], "guid": 7509}}
{"text": "ACCOUNTS: custid, name; SAVINGS: custid, balance; CHECKING: custid, balance | Find the names and total checking and savings balances of accounts whose savings balance is higher than the average savings balance.", "sql": "SELECT T1.name ,  T2.balance + T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T3.balance  >  (SELECT avg(balance) FROM savings)", "example": {"db_id": "small_bank_1", "query": "SELECT T1.name ,  T2.balance + T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T3.balance  >  (SELECT avg(balance) FROM savings)", "query_toks": ["SELECT", "T1.name", ",", "T2.balance", "+", "T3.balance", "FROM", "accounts", "AS", "T1", "JOIN", "checking", "AS", "T2", "ON", "T1.custid", "=", "T2.custid", "JOIN", "savings", "AS", "T3", "ON", "T1.custid", "=", "T3.custid", "WHERE", "T3.balance", ">", "(", "SELECT", "avg", "(", "balance", ")", "FROM", "savings", ")"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "t2", ".", "balance", "+", "t3", ".", "balance", "from", "accounts", "as", "t1", "join", "checking", "as", "t2", "on", "t1", ".", "custid", "=", "t2", ".", "custid", "join", "savings", "as", "t3", "on", "t1", ".", "custid", "=", "t3", ".", "custid", "where", "t3", ".", "balance", ">", "(", "select", "avg", "(", "balance", ")", "from", "savings", ")"], "question": "Find the names and total checking and savings balances of accounts whose savings balance is higher than the average savings balance.", "question_toks": ["Find", "the", "names", "and", "total", "checking", "and", "savings", "balances", "of", "accounts", "whose", "savings", "balance", "is", "higher", "than", "the", "average", "savings", "balance", "."], "guid": 7510}}
{"text": "Addresses: Address_ID, address_details; Locations: Location_ID, Other_Details; Products: Product_ID, Product_Type_Code, Product_Name, Product_Price; Parties: Party_ID, Party_Details; Assets: Asset_ID, Other_Details; Channels: Channel_ID, Other_Details; Finances: Finance_ID, Other_Details; Events: Event_ID, Address_ID, Channel_ID, Event_Type_Code, Finance_ID, Location_ID; Products_in_Events: Product_in_Event_ID, Event_ID, Product_ID; Parties_in_Events: Party_ID, Event_ID, Role_Code | Show the most common type code across products.", "sql": "SELECT Product_Type_Code FROM Products GROUP BY Product_Type_Code ORDER BY COUNT(*) DESC LIMIT 1", "example": {"db_id": "solvency_ii", "query": "SELECT Product_Type_Code FROM Products GROUP BY Product_Type_Code ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "Product_Type_Code", "FROM", "Products", "GROUP", "BY", "Product_Type_Code", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "product_type_code", "from", "products", "group", "by", "product_type_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Show the most common type code across products.", "question_toks": ["Show", "the", "most", "common", "type", "code", "across", "products", "."], "guid": 7511}}
{"text": "Addresses: Address_ID, address_details; Locations: Location_ID, Other_Details; Products: Product_ID, Product_Type_Code, Product_Name, Product_Price; Parties: Party_ID, Party_Details; Assets: Asset_ID, Other_Details; Channels: Channel_ID, Other_Details; Finances: Finance_ID, Other_Details; Events: Event_ID, Address_ID, Channel_ID, Event_Type_Code, Finance_ID, Location_ID; Products_in_Events: Product_in_Event_ID, Event_ID, Product_ID; Parties_in_Events: Party_ID, Event_ID, Role_Code | Show the product type codes that have at least two products.", "sql": "SELECT Product_Type_Code FROM Products GROUP BY Product_Type_Code HAVING COUNT(*)  >=  2", "example": {"db_id": "solvency_ii", "query": "SELECT Product_Type_Code FROM Products GROUP BY Product_Type_Code HAVING COUNT(*)  >=  2", "query_toks": ["SELECT", "Product_Type_Code", "FROM", "Products", "GROUP", "BY", "Product_Type_Code", "HAVING", "COUNT", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "product_type_code", "from", "products", "group", "by", "product_type_code", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "Show the product type codes that have at least two products.", "question_toks": ["Show", "the", "product", "type", "codes", "that", "have", "at", "least", "two", "products", "."], "guid": 7512}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | Find the names of bank branches that have provided a loan to any customer whose credit score is below 100.", "sql": "SELECT T2.bname FROM loan AS T1 JOIN bank AS T2 ON T1.branch_id  =  T2.branch_id JOIN customer AS T3 ON T1.cust_id  =  T3.cust_id WHERE T3.credit_score  <  100", "example": {"db_id": "loan_1", "query": "SELECT T2.bname FROM loan AS T1 JOIN bank AS T2 ON T1.branch_id  =  T2.branch_id JOIN customer AS T3 ON T1.cust_id  =  T3.cust_id WHERE T3.credit_score  <  100", "query_toks": ["SELECT", "T2.bname", "FROM", "loan", "AS", "T1", "JOIN", "bank", "AS", "T2", "ON", "T1.branch_id", "=", "T2.branch_id", "JOIN", "customer", "AS", "T3", "ON", "T1.cust_id", "=", "T3.cust_id", "WHERE", "T3.credit_score", "<", "100"], "query_toks_no_value": ["select", "t2", ".", "bname", "from", "loan", "as", "t1", "join", "bank", "as", "t2", "on", "t1", ".", "branch_id", "=", "t2", ".", "branch_id", "join", "customer", "as", "t3", "on", "t1", ".", "cust_id", "=", "t3", ".", "cust_id", "where", "t3", ".", "credit_score", "<", "value"], "question": "Find the names of bank branches that have provided a loan to any customer whose credit score is below 100.", "question_toks": ["Find", "the", "names", "of", "bank", "branches", "that", "have", "provided", "a", "loan", "to", "any", "customer", "whose", "credit", "score", "is", "below", "100", "."], "guid": 7513}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | How many distinct types of accounts are there?", "sql": "SELECT count(DISTINCT acc_type) FROM customer", "example": {"db_id": "loan_1", "query": "SELECT count(DISTINCT acc_type) FROM customer", "query_toks": ["SELECT", "count", "(", "DISTINCT", "acc_type", ")", "FROM", "customer"], "query_toks_no_value": ["select", "count", "(", "distinct", "acc_type", ")", "from", "customer"], "question": "How many distinct types of accounts are there?", "question_toks": ["How", "many", "distinct", "types", "of", "accounts", "are", "there", "?"], "guid": 7514}}
{"text": "Customers: Customer_ID, Customer_Details; Customer_Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claims: Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled; Settlements: Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID; Payments: Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment | Find the claims that led to more than two settlements or have the maximum claim value. For each of them, return the date the claim was made and the id of the claim.", "sql": "SELECT T1.Date_Claim_Made ,  T1.Claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id  =  T2.Claim_id GROUP BY T1.Claim_id HAVING count(*)  >  2 UNION SELECT T1.Date_Claim_Made ,  T1.Claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id  =  T2.Claim_id WHERE T1.Amount_Claimed  =  ( SELECT max(Amount_Claimed) FROM Claims )", "example": {"db_id": "insurance_policies", "query": "SELECT T1.Date_Claim_Made ,  T1.Claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id  =  T2.Claim_id GROUP BY T1.Claim_id HAVING count(*)  >  2 UNION SELECT T1.Date_Claim_Made ,  T1.Claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id  =  T2.Claim_id WHERE T1.Amount_Claimed  =  ( SELECT max(Amount_Claimed) FROM Claims )", "query_toks": ["SELECT", "T1.Date_Claim_Made", ",", "T1.Claim_id", "FROM", "Claims", "AS", "T1", "JOIN", "Settlements", "AS", "T2", "ON", "T1.Claim_id", "=", "T2.Claim_id", "GROUP", "BY", "T1.Claim_id", "HAVING", "count", "(", "*", ")", ">", "2", "UNION", "SELECT", "T1.Date_Claim_Made", ",", "T1.Claim_id", "FROM", "Claims", "AS", "T1", "JOIN", "Settlements", "AS", "T2", "ON", "T1.Claim_id", "=", "T2.Claim_id", "WHERE", "T1.Amount_Claimed", "=", "(", "SELECT", "max", "(", "Amount_Claimed", ")", "FROM", "Claims", ")"], "query_toks_no_value": ["select", "t1", ".", "date_claim_made", ",", "t1", ".", "claim_id", "from", "claims", "as", "t1", "join", "settlements", "as", "t2", "on", "t1", ".", "claim_id", "=", "t2", ".", "claim_id", "group", "by", "t1", ".", "claim_id", "having", "count", "(", "*", ")", ">", "value", "union", "select", "t1", ".", "date_claim_made", ",", "t1", ".", "claim_id", "from", "claims", "as", "t1", "join", "settlements", "as", "t2", "on", "t1", ".", "claim_id", "=", "t2", ".", "claim_id", "where", "t1", ".", "amount_claimed", "=", "(", "select", "max", "(", "amount_claimed", ")", "from", "claims", ")"], "question": "Find the claims that led to more than two settlements or have the maximum claim value. For each of them, return the date the claim was made and the id of the claim.", "question_toks": ["Find", "the", "claims", "that", "led", "to", "more", "than", "two", "settlements", "or", "have", "the", "maximum", "claim", "value", ".", "For", "each", "of", "them", ",", "return", "the", "date", "the", "claim", "was", "made", "and", "the", "id", "of", "the", "claim", "."], "guid": 7515}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | Find the name of customers who have both saving and checking account types.", "sql": "SELECT cust_name FROM customer WHERE acc_type  =  'saving' INTERSECT SELECT cust_name FROM customer WHERE acc_type  =  'checking'", "example": {"db_id": "loan_1", "query": "SELECT cust_name FROM customer WHERE acc_type  =  'saving' INTERSECT SELECT cust_name FROM customer WHERE acc_type  =  'checking'", "query_toks": ["SELECT", "cust_name", "FROM", "customer", "WHERE", "acc_type", "=", "'saving", "'", "INTERSECT", "SELECT", "cust_name", "FROM", "customer", "WHERE", "acc_type", "=", "'checking", "'"], "query_toks_no_value": ["select", "cust_name", "from", "customer", "where", "acc_type", "=", "value", "intersect", "select", "cust_name", "from", "customer", "where", "acc_type", "=", "value"], "question": "Find the name of customers who have both saving and checking account types.", "question_toks": ["Find", "the", "name", "of", "customers", "who", "have", "both", "saving", "and", "checking", "account", "types", "."], "guid": 7516}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | Find the average number of customers cross all banks.", "sql": "SELECT avg(no_of_customers) FROM bank", "example": {"db_id": "loan_1", "query": "SELECT avg(no_of_customers) FROM bank", "query_toks": ["SELECT", "avg", "(", "no_of_customers", ")", "FROM", "bank"], "query_toks_no_value": ["select", "avg", "(", "no_of_customers", ")", "from", "bank"], "question": "Find the average number of customers cross all banks.", "question_toks": ["Find", "the", "average", "number", "of", "customers", "cross", "all", "banks", "."], "guid": 7517}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | Find the name of customers who have loans of both Mortgages and Auto.", "sql": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE loan_type  =  'Mortgages' INTERSECT SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE loan_type  =  'Auto'", "example": {"db_id": "loan_1", "query": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE loan_type  =  'Mortgages' INTERSECT SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE loan_type  =  'Auto'", "query_toks": ["SELECT", "T1.cust_name", "FROM", "customer", "AS", "T1", "JOIN", "loan", "AS", "T2", "ON", "T1.cust_id", "=", "T2.cust_id", "WHERE", "loan_type", "=", "'Mortgages", "'", "INTERSECT", "SELECT", "T1.cust_name", "FROM", "customer", "AS", "T1", "JOIN", "loan", "AS", "T2", "ON", "T1.cust_id", "=", "T2.cust_id", "WHERE", "loan_type", "=", "'Auto", "'"], "query_toks_no_value": ["select", "t1", ".", "cust_name", "from", "customer", "as", "t1", "join", "loan", "as", "t2", "on", "t1", ".", "cust_id", "=", "t2", ".", "cust_id", "where", "loan_type", "=", "value", "intersect", "select", "t1", ".", "cust_name", "from", "customer", "as", "t1", "join", "loan", "as", "t2", "on", "t1", ".", "cust_id", "=", "t2", ".", "cust_id", "where", "loan_type", "=", "value"], "question": "Find the name of customers who have loans of both Mortgages and Auto.", "question_toks": ["Find", "the", "name", "of", "customers", "who", "have", "loans", "of", "both", "Mortgages", "and", "Auto", "."], "guid": 7518}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | What are the states, account types, and credit scores for customers who have 0 loans?", "sql": "SELECT state ,  acc_type ,  credit_score FROM customer WHERE no_of_loans  =  0", "example": {"db_id": "loan_1", "query": "SELECT state ,  acc_type ,  credit_score FROM customer WHERE no_of_loans  =  0", "query_toks": ["SELECT", "state", ",", "acc_type", ",", "credit_score", "FROM", "customer", "WHERE", "no_of_loans", "=", "0"], "query_toks_no_value": ["select", "state", ",", "acc_type", ",", "credit_score", "from", "customer", "where", "no_of_loans", "=", "value"], "question": "What are the states, account types, and credit scores for customers who have 0 loans?", "question_toks": ["What", "are", "the", "states", ",", "account", "types", ",", "and", "credit", "scores", "for", "customers", "who", "have", "0", "loans", "?"], "guid": 7519}}
{"text": "Customers: Customer_ID, Customer_name; Services: Service_ID, Service_name; Available_Policies: Policy_ID, policy_type_code, Customer_Phone; Customers_Policies: Customer_ID, Policy_ID, Date_Opened, Date_Closed; First_Notification_of_Loss: FNOL_ID, Customer_ID, Policy_ID, Service_ID; Claims: Claim_ID, FNOL_ID, Effective_Date; Settlements: Settlement_ID, Claim_ID, Effective_Date, Settlement_Amount | Find all the phone numbers.", "sql": "SELECT customer_phone FROM available_policies", "example": {"db_id": "insurance_fnol", "query": "SELECT customer_phone FROM available_policies", "query_toks": ["SELECT", "customer_phone", "FROM", "available_policies"], "query_toks_no_value": ["select", "customer_phone", "from", "available_policies"], "question": "Find all the phone numbers.", "question_toks": ["Find", "all", "the", "phone", "numbers", "."], "guid": 7520}}
{"text": "Customers: Customer_ID, Customer_name; Services: Service_ID, Service_name; Available_Policies: Policy_ID, policy_type_code, Customer_Phone; Customers_Policies: Customer_ID, Policy_ID, Date_Opened, Date_Closed; First_Notification_of_Loss: FNOL_ID, Customer_ID, Policy_ID, Service_ID; Claims: Claim_ID, FNOL_ID, Effective_Date; Settlements: Settlement_ID, Claim_ID, Effective_Date, Settlement_Amount | Return the sum and average of all settlement amounts.", "sql": "SELECT sum(settlement_amount) ,  avg(settlement_amount) FROM settlements", "example": {"db_id": "insurance_fnol", "query": "SELECT sum(settlement_amount) ,  avg(settlement_amount) FROM settlements", "query_toks": ["SELECT", "sum", "(", "settlement_amount", ")", ",", "avg", "(", "settlement_amount", ")", "FROM", "settlements"], "query_toks_no_value": ["select", "sum", "(", "settlement_amount", ")", ",", "avg", "(", "settlement_amount", ")", "from", "settlements"], "question": "Return the sum and average of all settlement amounts.", "question_toks": ["Return", "the", "sum", "and", "average", "of", "all", "settlement", "amounts", "."], "guid": 7521}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | What are the names of banks in the state of New York?", "sql": "SELECT bname FROM bank WHERE state  =  'New York'", "example": {"db_id": "loan_1", "query": "SELECT bname FROM bank WHERE state  =  'New York'", "query_toks": ["SELECT", "bname", "FROM", "bank", "WHERE", "state", "=", "'New", "York", "'"], "query_toks_no_value": ["select", "bname", "from", "bank", "where", "state", "=", "value"], "question": "What are the names of banks in the state of New York?", "question_toks": ["What", "are", "the", "names", "of", "banks", "in", "the", "state", "of", "New", "York", "?"], "guid": 7522}}
{"text": "ACCOUNTS: custid, name; SAVINGS: custid, balance; CHECKING: custid, balance | What are the names and sum of checking and savings balances for accounts with savings balances higher than the average savings balance?", "sql": "SELECT T1.name ,  T2.balance + T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T3.balance  >  (SELECT avg(balance) FROM savings)", "example": {"db_id": "small_bank_1", "query": "SELECT T1.name ,  T2.balance + T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T3.balance  >  (SELECT avg(balance) FROM savings)", "query_toks": ["SELECT", "T1.name", ",", "T2.balance", "+", "T3.balance", "FROM", "accounts", "AS", "T1", "JOIN", "checking", "AS", "T2", "ON", "T1.custid", "=", "T2.custid", "JOIN", "savings", "AS", "T3", "ON", "T1.custid", "=", "T3.custid", "WHERE", "T3.balance", ">", "(", "SELECT", "avg", "(", "balance", ")", "FROM", "savings", ")"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "t2", ".", "balance", "+", "t3", ".", "balance", "from", "accounts", "as", "t1", "join", "checking", "as", "t2", "on", "t1", ".", "custid", "=", "t2", ".", "custid", "join", "savings", "as", "t3", "on", "t1", ".", "custid", "=", "t3", ".", "custid", "where", "t3", ".", "balance", ">", "(", "select", "avg", "(", "balance", ")", "from", "savings", ")"], "question": "What are the names and sum of checking and savings balances for accounts with savings balances higher than the average savings balance?", "question_toks": ["What", "are", "the", "names", "and", "sum", "of", "checking", "and", "savings", "balances", "for", "accounts", "with", "savings", "balances", "higher", "than", "the", "average", "savings", "balance", "?"], "guid": 7523}}
{"text": "ACCOUNTS: custid, name; SAVINGS: custid, balance; CHECKING: custid, balance | Find the name and id of accounts whose checking balance is below the maximum checking balance.", "sql": "SELECT T1.custid ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT max(balance) FROM checking)", "example": {"db_id": "small_bank_1", "query": "SELECT T1.custid ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT max(balance) FROM checking)", "query_toks": ["SELECT", "T1.custid", ",", "T1.name", "FROM", "accounts", "AS", "T1", "JOIN", "checking", "AS", "T2", "ON", "T1.custid", "=", "T2.custid", "WHERE", "T2.balance", "<", "(", "SELECT", "max", "(", "balance", ")", "FROM", "checking", ")"], "query_toks_no_value": ["select", "t1", ".", "custid", ",", "t1", ".", "name", "from", "accounts", "as", "t1", "join", "checking", "as", "t2", "on", "t1", ".", "custid", "=", "t2", ".", "custid", "where", "t2", ".", "balance", "<", "(", "select", "max", "(", "balance", ")", "from", "checking", ")"], "question": "Find the name and id of accounts whose checking balance is below the maximum checking balance.", "question_toks": ["Find", "the", "name", "and", "id", "of", "accounts", "whose", "checking", "balance", "is", "below", "the", "maximum", "checking", "balance", "."], "guid": 7524}}
{"text": "Customers: Customer_ID, Customer_Details; Customer_Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claims: Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled; Settlements: Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID; Payments: Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment | Which payment method is used the most often?", "sql": "SELECT Payment_Method_Code FROM Payments GROUP BY Payment_Method_Code ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "insurance_policies", "query": "SELECT Payment_Method_Code FROM Payments GROUP BY Payment_Method_Code ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "Payment_Method_Code", "FROM", "Payments", "GROUP", "BY", "Payment_Method_Code", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "payment_method_code", "from", "payments", "group", "by", "payment_method_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which payment method is used the most often?", "question_toks": ["Which", "payment", "method", "is", "used", "the", "most", "often", "?"], "guid": 7525}}
{"text": "Addresses: Address_ID, address_details; Locations: Location_ID, Other_Details; Products: Product_ID, Product_Type_Code, Product_Name, Product_Price; Parties: Party_ID, Party_Details; Assets: Asset_ID, Other_Details; Channels: Channel_ID, Other_Details; Finances: Finance_ID, Other_Details; Events: Event_ID, Address_ID, Channel_ID, Event_Type_Code, Finance_ID, Location_ID; Products_in_Events: Product_in_Event_ID, Event_ID, Product_ID; Parties_in_Events: Party_ID, Event_ID, Role_Code | List the names of products that are not in any event.", "sql": "SELECT Product_Name FROM Products WHERE Product_ID NOT IN (SELECT Product_ID FROM Products_in_Events)", "example": {"db_id": "solvency_ii", "query": "SELECT Product_Name FROM Products WHERE Product_ID NOT IN (SELECT Product_ID FROM Products_in_Events)", "query_toks": ["SELECT", "Product_Name", "FROM", "Products", "WHERE", "Product_ID", "NOT", "IN", "(", "SELECT", "Product_ID", "FROM", "Products_in_Events", ")"], "query_toks_no_value": ["select", "product_name", "from", "products", "where", "product_id", "not", "in", "(", "select", "product_id", "from", "products_in_events", ")"], "question": "List the names of products that are not in any event.", "question_toks": ["List", "the", "names", "of", "products", "that", "are", "not", "in", "any", "event", "."], "guid": 7526}}
{"text": "Customers: Customer_ID, Customer_name; Services: Service_ID, Service_name; Available_Policies: Policy_ID, policy_type_code, Customer_Phone; Customers_Policies: Customer_ID, Policy_ID, Date_Opened, Date_Closed; First_Notification_of_Loss: FNOL_ID, Customer_ID, Policy_ID, Service_ID; Claims: Claim_ID, FNOL_ID, Effective_Date; Settlements: Settlement_ID, Claim_ID, Effective_Date, Settlement_Amount | Which customers have used both the service named \"Close a policy\" and the service named \"Upgrade a policy\"? Give me the customer names.", "sql": "SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  \"Close a policy\" INTERSECT SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  \"New policy application\"", "example": {"db_id": "insurance_fnol", "query": "SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  \"Close a policy\" INTERSECT SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  \"New policy application\"", "query_toks": ["SELECT", "t1.customer_name", "FROM", "customers", "AS", "t1", "JOIN", "first_notification_of_loss", "AS", "t2", "ON", "t1.customer_id", "=", "t2.customer_id", "JOIN", "services", "AS", "t3", "ON", "t2.service_id", "=", "t3.service_id", "WHERE", "t3.service_name", "=", "``", "Close", "a", "policy", "''", "INTERSECT", "SELECT", "t1.customer_name", "FROM", "customers", "AS", "t1", "JOIN", "first_notification_of_loss", "AS", "t2", "ON", "t1.customer_id", "=", "t2.customer_id", "JOIN", "services", "AS", "t3", "ON", "t2.service_id", "=", "t3.service_id", "WHERE", "t3.service_name", "=", "``", "New", "policy", "application", "''"], "query_toks_no_value": ["select", "t1", ".", "customer_name", "from", "customers", "as", "t1", "join", "first_notification_of_loss", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "join", "services", "as", "t3", "on", "t2", ".", "service_id", "=", "t3", ".", "service_id", "where", "t3", ".", "service_name", "=", "value", "intersect", "select", "t1", ".", "customer_name", "from", "customers", "as", "t1", "join", "first_notification_of_loss", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "join", "services", "as", "t3", "on", "t2", ".", "service_id", "=", "t3", ".", "service_id", "where", "t3", ".", "service_name", "=", "value"], "question": "Which customers have used both the service named \"Close a policy\" and the service named \"Upgrade a policy\"? Give me the customer names.", "question_toks": ["Which", "customers", "have", "used", "both", "the", "service", "named", "``", "Close", "a", "policy", "''", "and", "the", "service", "named", "``", "Upgrade", "a", "policy", "''", "?", "Give", "me", "the", "customer", "names", "."], "guid": 7527}}
{"text": "Customers: Customer_ID, Customer_Details; Staff: Staff_ID, Staff_Details; Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claim_Headers: Claim_Header_ID, Claim_Status_Code, Claim_Type_Code, Policy_ID, Date_of_Claim, Date_of_Settlement, Amount_Claimed, Amount_Piad; Claims_Documents: Claim_ID, Document_Type_Code, Created_by_Staff_ID, Created_Date; Claims_Processing_Stages: Claim_Stage_ID, Next_Claim_Stage_ID, Claim_Status_Name, Claim_Status_Description; Claims_Processing: Claim_Processing_ID, Claim_ID, Claim_Outcome_Code, Claim_Stage_ID, Staff_ID | What are the names of the customers and staff members?", "sql": "SELECT customer_details FROM customers UNION SELECT staff_details FROM staff", "example": {"db_id": "insurance_and_eClaims", "query": "SELECT customer_details FROM customers UNION SELECT staff_details FROM staff", "query_toks": ["SELECT", "customer_details", "FROM", "customers", "UNION", "SELECT", "staff_details", "FROM", "staff"], "query_toks_no_value": ["select", "customer_details", "from", "customers", "union", "select", "staff_details", "from", "staff"], "question": "What are the names of the customers and staff members?", "question_toks": ["What", "are", "the", "names", "of", "the", "customers", "and", "staff", "members", "?"], "guid": 7528}}
{"text": "Customers: Customer_ID, Customer_Details; Customer_Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claims: Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled; Settlements: Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID; Payments: Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment | Find the the customer details and id for the customers who had more than one policy.", "sql": "SELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.Customer_id GROUP BY T1.customer_id HAVING count(*)  >  1", "example": {"db_id": "insurance_policies", "query": "SELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.Customer_id GROUP BY T1.customer_id HAVING count(*)  >  1", "query_toks": ["SELECT", "T1.customer_details", ",", "T1.customer_id", "FROM", "Customers", "AS", "T1", "JOIN", "Customer_Policies", "AS", "T2", "ON", "T1.Customer_id", "=", "T2.Customer_id", "GROUP", "BY", "T1.customer_id", "HAVING", "count", "(", "*", ")", ">", "1"], "query_toks_no_value": ["select", "t1", ".", "customer_details", ",", "t1", ".", "customer_id", "from", "customers", "as", "t1", "join", "customer_policies", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "group", "by", "t1", ".", "customer_id", "having", "count", "(", "*", ")", ">", "value"], "question": "Find the the customer details and id for the customers who had more than one policy.", "question_toks": ["Find", "the", "the", "customer", "details", "and", "id", "for", "the", "customers", "who", "had", "more", "than", "one", "policy", "."], "guid": 7529}}
{"text": "ACCOUNTS: custid, name; SAVINGS: custid, balance; CHECKING: custid, balance | Find the names of accounts whose checking balance is above the average checking balance, but savings balance is below the average savings balance.", "sql": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  >  (SELECT avg(balance) FROM checking) INTERSECT SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM savings)", "example": {"db_id": "small_bank_1", "query": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  >  (SELECT avg(balance) FROM checking) INTERSECT SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM savings)", "query_toks": ["SELECT", "T1.name", "FROM", "accounts", "AS", "T1", "JOIN", "checking", "AS", "T2", "ON", "T1.custid", "=", "T2.custid", "WHERE", "T2.balance", ">", "(", "SELECT", "avg", "(", "balance", ")", "FROM", "checking", ")", "INTERSECT", "SELECT", "T1.name", "FROM", "accounts", "AS", "T1", "JOIN", "savings", "AS", "T2", "ON", "T1.custid", "=", "T2.custid", "WHERE", "T2.balance", "<", "(", "SELECT", "avg", "(", "balance", ")", "FROM", "savings", ")"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "accounts", "as", "t1", "join", "checking", "as", "t2", "on", "t1", ".", "custid", "=", "t2", ".", "custid", "where", "t2", ".", "balance", ">", "(", "select", "avg", "(", "balance", ")", "from", "checking", ")", "intersect", "select", "t1", ".", "name", "from", "accounts", "as", "t1", "join", "savings", "as", "t2", "on", "t1", ".", "custid", "=", "t2", ".", "custid", "where", "t2", ".", "balance", "<", "(", "select", "avg", "(", "balance", ")", "from", "savings", ")"], "question": "Find the names of accounts whose checking balance is above the average checking balance, but savings balance is below the average savings balance.", "question_toks": ["Find", "the", "names", "of", "accounts", "whose", "checking", "balance", "is", "above", "the", "average", "checking", "balance", ",", "but", "savings", "balance", "is", "below", "the", "average", "savings", "balance", "."], "guid": 7530}}
{"text": "Customers: Customer_ID, Customer_name; Services: Service_ID, Service_name; Available_Policies: Policy_ID, policy_type_code, Customer_Phone; Customers_Policies: Customer_ID, Policy_ID, Date_Opened, Date_Closed; First_Notification_of_Loss: FNOL_ID, Customer_ID, Policy_ID, Service_ID; Claims: Claim_ID, FNOL_ID, Effective_Date; Settlements: Settlement_ID, Claim_ID, Effective_Date, Settlement_Amount | Which policy type appears most frequently in the available policies?", "sql": "SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "insurance_fnol", "query": "SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "policy_type_code", "FROM", "available_policies", "GROUP", "BY", "policy_type_code", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "policy_type_code", "from", "available_policies", "group", "by", "policy_type_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which policy type appears most frequently in the available policies?", "question_toks": ["Which", "policy", "type", "appears", "most", "frequently", "in", "the", "available", "policies", "?"], "guid": 7531}}
{"text": "Customers: Customer_ID, Customer_Details; Staff: Staff_ID, Staff_Details; Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claim_Headers: Claim_Header_ID, Claim_Status_Code, Claim_Type_Code, Policy_ID, Date_of_Claim, Date_of_Settlement, Amount_Claimed, Amount_Piad; Claims_Documents: Claim_ID, Document_Type_Code, Created_by_Staff_ID, Created_Date; Claims_Processing_Stages: Claim_Stage_ID, Next_Claim_Stage_ID, Claim_Status_Name, Claim_Status_Description; Claims_Processing: Claim_Processing_ID, Claim_ID, Claim_Outcome_Code, Claim_Stage_ID, Staff_ID | Find the number of distinct stages in claim processing.", "sql": "SELECT count(*) FROM claims_processing_stages", "example": {"db_id": "insurance_and_eClaims", "query": "SELECT count(*) FROM claims_processing_stages", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "claims_processing_stages"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "claims_processing_stages"], "question": "Find the number of distinct stages in claim processing.", "question_toks": ["Find", "the", "number", "of", "distinct", "stages", "in", "claim", "processing", "."], "guid": 7532}}
{"text": "Customers: Customer_ID, Customer_Details; Customer_Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claims: Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled; Settlements: Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID; Payments: Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment | Return the distinct customer details.", "sql": "SELECT DISTINCT customer_details FROM Customers", "example": {"db_id": "insurance_policies", "query": "SELECT DISTINCT customer_details FROM Customers", "query_toks": ["SELECT", "DISTINCT", "customer_details", "FROM", "Customers"], "query_toks_no_value": ["select", "distinct", "customer_details", "from", "customers"], "question": "Return the distinct customer details.", "question_toks": ["Return", "the", "distinct", "customer", "details", "."], "guid": 7533}}
{"text": "Customers: Customer_ID, Customer_name; Services: Service_ID, Service_name; Available_Policies: Policy_ID, policy_type_code, Customer_Phone; Customers_Policies: Customer_ID, Policy_ID, Date_Opened, Date_Closed; First_Notification_of_Loss: FNOL_ID, Customer_ID, Policy_ID, Service_ID; Claims: Claim_ID, FNOL_ID, Effective_Date; Settlements: Settlement_ID, Claim_ID, Effective_Date, Settlement_Amount | Give me a list of all the service names sorted alphabetically.", "sql": "SELECT service_name FROM services ORDER BY service_name", "example": {"db_id": "insurance_fnol", "query": "SELECT service_name FROM services ORDER BY service_name", "query_toks": ["SELECT", "service_name", "FROM", "services", "ORDER", "BY", "service_name"], "query_toks_no_value": ["select", "service_name", "from", "services", "order", "by", "service_name"], "question": "Give me a list of all the service names sorted alphabetically.", "question_toks": ["Give", "me", "a", "list", "of", "all", "the", "service", "names", "sorted", "alphabetically", "."], "guid": 7534}}
{"text": "ACCOUNTS: custid, name; SAVINGS: custid, balance; CHECKING: custid, balance | Find the total saving balance for each account name.", "sql": "SELECT sum(T2.balance) ,  T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name", "example": {"db_id": "small_bank_1", "query": "SELECT sum(T2.balance) ,  T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name", "query_toks": ["SELECT", "sum", "(", "T2.balance", ")", ",", "T1.name", "FROM", "accounts", "AS", "T1", "JOIN", "savings", "AS", "T2", "ON", "T1.custid", "=", "T2.custid", "GROUP", "BY", "T1.name"], "query_toks_no_value": ["select", "sum", "(", "t2", ".", "balance", ")", ",", "t1", ".", "name", "from", "accounts", "as", "t1", "join", "savings", "as", "t2", "on", "t1", ".", "custid", "=", "t2", ".", "custid", "group", "by", "t1", ".", "name"], "question": "Find the total saving balance for each account name.", "question_toks": ["Find", "the", "total", "saving", "balance", "for", "each", "account", "name", "."], "guid": 7535}}
{"text": "Customers: Customer_ID, Customer_Details; Staff: Staff_ID, Staff_Details; Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claim_Headers: Claim_Header_ID, Claim_Status_Code, Claim_Type_Code, Policy_ID, Date_of_Claim, Date_of_Settlement, Amount_Claimed, Amount_Piad; Claims_Documents: Claim_ID, Document_Type_Code, Created_by_Staff_ID, Created_Date; Claims_Processing_Stages: Claim_Stage_ID, Next_Claim_Stage_ID, Claim_Status_Name, Claim_Status_Description; Claims_Processing: Claim_Processing_ID, Claim_ID, Claim_Outcome_Code, Claim_Stage_ID, Staff_ID | Find the names of the customers who have an deputy policy.", "sql": "SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.policy_type_code  =  \"Deputy\"", "example": {"db_id": "insurance_and_eClaims", "query": "SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.policy_type_code  =  \"Deputy\"", "query_toks": ["SELECT", "DISTINCT", "t2.customer_details", "FROM", "policies", "AS", "t1", "JOIN", "customers", "AS", "t2", "ON", "t1.customer_id", "=", "t2.customer_id", "WHERE", "t1.policy_type_code", "=", "``", "Deputy", "''"], "query_toks_no_value": ["select", "distinct", "t2", ".", "customer_details", "from", "policies", "as", "t1", "join", "customers", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "where", "t1", ".", "policy_type_code", "=", "value"], "question": "Find the names of the customers who have an deputy policy.", "question_toks": ["Find", "the", "names", "of", "the", "customers", "who", "have", "an", "deputy", "policy", "."], "guid": 7536}}
{"text": "Customers: Customer_ID, Customer_Details; Staff: Staff_ID, Staff_Details; Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claim_Headers: Claim_Header_ID, Claim_Status_Code, Claim_Type_Code, Policy_ID, Date_of_Claim, Date_of_Settlement, Amount_Claimed, Amount_Piad; Claims_Documents: Claim_ID, Document_Type_Code, Created_by_Staff_ID, Created_Date; Claims_Processing_Stages: Claim_Stage_ID, Next_Claim_Stage_ID, Claim_Status_Name, Claim_Status_Description; Claims_Processing: Claim_Processing_ID, Claim_ID, Claim_Outcome_Code, Claim_Stage_ID, Staff_ID | Find the names of customers who have no policies associated.", "sql": "SELECT customer_details FROM customers EXCEPT SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id", "example": {"db_id": "insurance_and_eClaims", "query": "SELECT customer_details FROM customers EXCEPT SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id", "query_toks": ["SELECT", "customer_details", "FROM", "customers", "EXCEPT", "SELECT", "t2.customer_details", "FROM", "policies", "AS", "t1", "JOIN", "customers", "AS", "t2", "ON", "t1.customer_id", "=", "t2.customer_id"], "query_toks_no_value": ["select", "customer_details", "from", "customers", "except", "select", "t2", ".", "customer_details", "from", "policies", "as", "t1", "join", "customers", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id"], "question": "Find the names of customers who have no policies associated.", "question_toks": ["Find", "the", "names", "of", "customers", "who", "have", "no", "policies", "associated", "."], "guid": 7537}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | What are the names of customers who do not have saving accounts?", "sql": "SELECT cust_name FROM customer EXCEPT SELECT cust_name FROM customer WHERE acc_type  =  'saving'", "example": {"db_id": "loan_1", "query": "SELECT cust_name FROM customer EXCEPT SELECT cust_name FROM customer WHERE acc_type  =  'saving'", "query_toks": ["SELECT", "cust_name", "FROM", "customer", "EXCEPT", "SELECT", "cust_name", "FROM", "customer", "WHERE", "acc_type", "=", "'saving", "'"], "query_toks_no_value": ["select", "cust_name", "from", "customer", "except", "select", "cust_name", "from", "customer", "where", "acc_type", "=", "value"], "question": "What are the names of customers who do not have saving accounts?", "question_toks": ["What", "are", "the", "names", "of", "customers", "who", "do", "not", "have", "saving", "accounts", "?"], "guid": 7538}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | What are the names of banks that have loaned money to customers with credit scores below 100?", "sql": "SELECT T2.bname FROM loan AS T1 JOIN bank AS T2 ON T1.branch_id  =  T2.branch_id JOIN customer AS T3 ON T1.cust_id  =  T3.cust_id WHERE T3.credit_score  <  100", "example": {"db_id": "loan_1", "query": "SELECT T2.bname FROM loan AS T1 JOIN bank AS T2 ON T1.branch_id  =  T2.branch_id JOIN customer AS T3 ON T1.cust_id  =  T3.cust_id WHERE T3.credit_score  <  100", "query_toks": ["SELECT", "T2.bname", "FROM", "loan", "AS", "T1", "JOIN", "bank", "AS", "T2", "ON", "T1.branch_id", "=", "T2.branch_id", "JOIN", "customer", "AS", "T3", "ON", "T1.cust_id", "=", "T3.cust_id", "WHERE", "T3.credit_score", "<", "100"], "query_toks_no_value": ["select", "t2", ".", "bname", "from", "loan", "as", "t1", "join", "bank", "as", "t2", "on", "t1", ".", "branch_id", "=", "t2", ".", "branch_id", "join", "customer", "as", "t3", "on", "t1", ".", "cust_id", "=", "t3", ".", "cust_id", "where", "t3", ".", "credit_score", "<", "value"], "question": "What are the names of banks that have loaned money to customers with credit scores below 100?", "question_toks": ["What", "are", "the", "names", "of", "banks", "that", "have", "loaned", "money", "to", "customers", "with", "credit", "scores", "below", "100", "?"], "guid": 7539}}
{"text": "ACCOUNTS: custid, name; SAVINGS: custid, balance; CHECKING: custid, balance | What are the names of accounts with checking balances greater than the average checking balance and savings balances below the average savings balance?", "sql": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  >  (SELECT avg(balance) FROM checking) INTERSECT SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM savings)", "example": {"db_id": "small_bank_1", "query": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  >  (SELECT avg(balance) FROM checking) INTERSECT SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM savings)", "query_toks": ["SELECT", "T1.name", "FROM", "accounts", "AS", "T1", "JOIN", "checking", "AS", "T2", "ON", "T1.custid", "=", "T2.custid", "WHERE", "T2.balance", ">", "(", "SELECT", "avg", "(", "balance", ")", "FROM", "checking", ")", "INTERSECT", "SELECT", "T1.name", "FROM", "accounts", "AS", "T1", "JOIN", "savings", "AS", "T2", "ON", "T1.custid", "=", "T2.custid", "WHERE", "T2.balance", "<", "(", "SELECT", "avg", "(", "balance", ")", "FROM", "savings", ")"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "accounts", "as", "t1", "join", "checking", "as", "t2", "on", "t1", ".", "custid", "=", "t2", ".", "custid", "where", "t2", ".", "balance", ">", "(", "select", "avg", "(", "balance", ")", "from", "checking", ")", "intersect", "select", "t1", ".", "name", "from", "accounts", "as", "t1", "join", "savings", "as", "t2", "on", "t1", ".", "custid", "=", "t2", ".", "custid", "where", "t2", ".", "balance", "<", "(", "select", "avg", "(", "balance", ")", "from", "savings", ")"], "question": "What are the names of accounts with checking balances greater than the average checking balance and savings balances below the average savings balance?", "question_toks": ["What", "are", "the", "names", "of", "accounts", "with", "checking", "balances", "greater", "than", "the", "average", "checking", "balance", "and", "savings", "balances", "below", "the", "average", "savings", "balance", "?"], "guid": 7540}}
{"text": "ACCOUNTS: custid, name; SAVINGS: custid, balance; CHECKING: custid, balance | What are the customer id and name corresponding to accounts with a checking balance less than the largest checking balance?", "sql": "SELECT T1.custid ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT max(balance) FROM checking)", "example": {"db_id": "small_bank_1", "query": "SELECT T1.custid ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT max(balance) FROM checking)", "query_toks": ["SELECT", "T1.custid", ",", "T1.name", "FROM", "accounts", "AS", "T1", "JOIN", "checking", "AS", "T2", "ON", "T1.custid", "=", "T2.custid", "WHERE", "T2.balance", "<", "(", "SELECT", "max", "(", "balance", ")", "FROM", "checking", ")"], "query_toks_no_value": ["select", "t1", ".", "custid", ",", "t1", ".", "name", "from", "accounts", "as", "t1", "join", "checking", "as", "t2", "on", "t1", ".", "custid", "=", "t2", ".", "custid", "where", "t2", ".", "balance", "<", "(", "select", "max", "(", "balance", ")", "from", "checking", ")"], "question": "What are the customer id and name corresponding to accounts with a checking balance less than the largest checking balance?", "question_toks": ["What", "are", "the", "customer", "id", "and", "name", "corresponding", "to", "accounts", "with", "a", "checking", "balance", "less", "than", "the", "largest", "checking", "balance", "?"], "guid": 7541}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | What is the average credit score for customers who have never taken a loan?", "sql": "SELECT avg(credit_score) FROM customer WHERE cust_id NOT IN (SELECT cust_id FROM loan)", "example": {"db_id": "loan_1", "query": "SELECT avg(credit_score) FROM customer WHERE cust_id NOT IN (SELECT cust_id FROM loan)", "query_toks": ["SELECT", "avg", "(", "credit_score", ")", "FROM", "customer", "WHERE", "cust_id", "NOT", "IN", "(", "SELECT", "cust_id", "FROM", "loan", ")"], "query_toks_no_value": ["select", "avg", "(", "credit_score", ")", "from", "customer", "where", "cust_id", "not", "in", "(", "select", "cust_id", "from", "loan", ")"], "question": "What is the average credit score for customers who have never taken a loan?", "question_toks": ["What", "is", "the", "average", "credit", "score", "for", "customers", "who", "have", "never", "taken", "a", "loan", "?"], "guid": 7542}}
{"text": "Customers: Customer_ID, Customer_name; Services: Service_ID, Service_name; Available_Policies: Policy_ID, policy_type_code, Customer_Phone; Customers_Policies: Customer_ID, Policy_ID, Date_Opened, Date_Closed; First_Notification_of_Loss: FNOL_ID, Customer_ID, Policy_ID, Service_ID; Claims: Claim_ID, FNOL_ID, Effective_Date; Settlements: Settlement_ID, Claim_ID, Effective_Date, Settlement_Amount | Tell me the types of the policy used by the customer named \"Dayana Robel\".", "sql": "SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  \"Dayana Robel\"", "example": {"db_id": "insurance_fnol", "query": "SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  \"Dayana Robel\"", "query_toks": ["SELECT", "DISTINCT", "t3.policy_type_code", "FROM", "customers", "AS", "t1", "JOIN", "customers_policies", "AS", "t2", "ON", "t1.customer_id", "=", "t2.customer_id", "JOIN", "available_policies", "AS", "t3", "ON", "t2.policy_id", "=", "t3.policy_id", "WHERE", "t1.customer_name", "=", "``", "Dayana", "Robel", "''"], "query_toks_no_value": ["select", "distinct", "t3", ".", "policy_type_code", "from", "customers", "as", "t1", "join", "customers_policies", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "join", "available_policies", "as", "t3", "on", "t2", ".", "policy_id", "=", "t3", ".", "policy_id", "where", "t1", ".", "customer_name", "=", "value"], "question": "Tell me the types of the policy used by the customer named \"Dayana Robel\".", "question_toks": ["Tell", "me", "the", "types", "of", "the", "policy", "used", "by", "the", "customer", "named", "``", "Dayana", "Robel", "''", "."], "guid": 7543}}
{"text": "Addresses: Address_ID, address_details; Locations: Location_ID, Other_Details; Products: Product_ID, Product_Type_Code, Product_Name, Product_Price; Parties: Party_ID, Party_Details; Assets: Asset_ID, Other_Details; Channels: Channel_ID, Other_Details; Finances: Finance_ID, Other_Details; Events: Event_ID, Address_ID, Channel_ID, Event_Type_Code, Finance_ID, Location_ID; Products_in_Events: Product_in_Event_ID, Event_ID, Product_ID; Parties_in_Events: Party_ID, Event_ID, Role_Code | What are the names and type codes of products?", "sql": "SELECT Product_Name ,  Product_Type_Code FROM Products", "example": {"db_id": "solvency_ii", "query": "SELECT Product_Name ,  Product_Type_Code FROM Products", "query_toks": ["SELECT", "Product_Name", ",", "Product_Type_Code", "FROM", "Products"], "query_toks_no_value": ["select", "product_name", ",", "product_type_code", "from", "products"], "question": "What are the names and type codes of products?", "question_toks": ["What", "are", "the", "names", "and", "type", "codes", "of", "products", "?"], "guid": 7544}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | What is the name of the bank branch with the greatest number of customers?", "sql": "SELECT bname FROM bank ORDER BY no_of_customers DESC LIMIT 1", "example": {"db_id": "loan_1", "query": "SELECT bname FROM bank ORDER BY no_of_customers DESC LIMIT 1", "query_toks": ["SELECT", "bname", "FROM", "bank", "ORDER", "BY", "no_of_customers", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "bname", "from", "bank", "order", "by", "no_of_customers", "desc", "limit", "value"], "question": "What is the name of the bank branch with the greatest number of customers?", "question_toks": ["What", "is", "the", "name", "of", "the", "bank", "branch", "with", "the", "greatest", "number", "of", "customers", "?"], "guid": 7545}}
{"text": "Customers: Customer_ID, Customer_Details; Customer_Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claims: Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled; Settlements: Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID; Payments: Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment | Find the settlement amount of the claim with the largest claim amount. Show both the settlement amount and claim amount.", "sql": "SELECT Amount_Settled ,  Amount_Claimed FROM Claims ORDER BY Amount_Claimed DESC LIMIT 1", "example": {"db_id": "insurance_policies", "query": "SELECT Amount_Settled ,  Amount_Claimed FROM Claims ORDER BY Amount_Claimed DESC LIMIT 1", "query_toks": ["SELECT", "Amount_Settled", ",", "Amount_Claimed", "FROM", "Claims", "ORDER", "BY", "Amount_Claimed", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "amount_settled", ",", "amount_claimed", "from", "claims", "order", "by", "amount_claimed", "desc", "limit", "value"], "question": "Find the settlement amount of the claim with the largest claim amount. Show both the settlement amount and claim amount.", "question_toks": ["Find", "the", "settlement", "amount", "of", "the", "claim", "with", "the", "largest", "claim", "amount", ".", "Show", "both", "the", "settlement", "amount", "and", "claim", "amount", "."], "guid": 7546}}
{"text": "Customers: Customer_ID, Customer_Details; Customer_Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claims: Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled; Settlements: Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID; Payments: Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment | How many settlements were made on the claim with the most recent claim settlement date? List the number and the claim id.", "sql": "SELECT count(*) ,  T1.claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id  =  T2.claim_id GROUP BY T1.claim_id ORDER BY T1.Date_Claim_Settled DESC LIMIT 1", "example": {"db_id": "insurance_policies", "query": "SELECT count(*) ,  T1.claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id  =  T2.claim_id GROUP BY T1.claim_id ORDER BY T1.Date_Claim_Settled DESC LIMIT 1", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "T1.claim_id", "FROM", "Claims", "AS", "T1", "JOIN", "Settlements", "AS", "T2", "ON", "T1.claim_id", "=", "T2.claim_id", "GROUP", "BY", "T1.claim_id", "ORDER", "BY", "T1.Date_Claim_Settled", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "t1", ".", "claim_id", "from", "claims", "as", "t1", "join", "settlements", "as", "t2", "on", "t1", ".", "claim_id", "=", "t2", ".", "claim_id", "group", "by", "t1", ".", "claim_id", "order", "by", "t1", ".", "date_claim_settled", "desc", "limit", "value"], "question": "How many settlements were made on the claim with the most recent claim settlement date? List the number and the claim id.", "question_toks": ["How", "many", "settlements", "were", "made", "on", "the", "claim", "with", "the", "most", "recent", "claim", "settlement", "date", "?", "List", "the", "number", "and", "the", "claim", "id", "."], "guid": 7547}}
{"text": "Customers: Customer_ID, Customer_name; Services: Service_ID, Service_name; Available_Policies: Policy_ID, policy_type_code, Customer_Phone; Customers_Policies: Customer_ID, Policy_ID, Date_Opened, Date_Closed; First_Notification_of_Loss: FNOL_ID, Customer_ID, Policy_ID, Service_ID; Claims: Claim_ID, FNOL_ID, Effective_Date; Settlements: Settlement_ID, Claim_ID, Effective_Date, Settlement_Amount | Find the policy type used by more than 4 customers.", "sql": "SELECT policy_type_code FROM available_policies GROUP BY policy_type_code HAVING count(*)  >  4", "example": {"db_id": "insurance_fnol", "query": "SELECT policy_type_code FROM available_policies GROUP BY policy_type_code HAVING count(*)  >  4", "query_toks": ["SELECT", "policy_type_code", "FROM", "available_policies", "GROUP", "BY", "policy_type_code", "HAVING", "count", "(", "*", ")", ">", "4"], "query_toks_no_value": ["select", "policy_type_code", "from", "available_policies", "group", "by", "policy_type_code", "having", "count", "(", "*", ")", ">", "value"], "question": "Find the policy type used by more than 4 customers.", "question_toks": ["Find", "the", "policy", "type", "used", "by", "more", "than", "4", "customers", "."], "guid": 7548}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | In how many different states are banks located?", "sql": "SELECT count(DISTINCT state) FROM bank", "example": {"db_id": "loan_1", "query": "SELECT count(DISTINCT state) FROM bank", "query_toks": ["SELECT", "count", "(", "DISTINCT", "state", ")", "FROM", "bank"], "query_toks_no_value": ["select", "count", "(", "distinct", "state", ")", "from", "bank"], "question": "In how many different states are banks located?", "question_toks": ["In", "how", "many", "different", "states", "are", "banks", "located", "?"], "guid": 7549}}
{"text": "Customers: Customer_ID, Customer_Details; Customer_Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claims: Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled; Settlements: Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID; Payments: Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment | Find the number of settlements each claim corresponds to. Show the number together with the claim id.", "sql": "SELECT T1.Claim_id ,  count(*) FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id  =  T2.claim_id GROUP BY T1.claim_id", "example": {"db_id": "insurance_policies", "query": "SELECT T1.Claim_id ,  count(*) FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id  =  T2.claim_id GROUP BY T1.claim_id", "query_toks": ["SELECT", "T1.Claim_id", ",", "count", "(", "*", ")", "FROM", "Claims", "AS", "T1", "JOIN", "Settlements", "AS", "T2", "ON", "T1.claim_id", "=", "T2.claim_id", "GROUP", "BY", "T1.claim_id"], "query_toks_no_value": ["select", "t1", ".", "claim_id", ",", "count", "(", "*", ")", "from", "claims", "as", "t1", "join", "settlements", "as", "t2", "on", "t1", ".", "claim_id", "=", "t2", ".", "claim_id", "group", "by", "t1", ".", "claim_id"], "question": "Find the number of settlements each claim corresponds to. Show the number together with the claim id.", "question_toks": ["Find", "the", "number", "of", "settlements", "each", "claim", "corresponds", "to", ".", "Show", "the", "number", "together", "with", "the", "claim", "id", "."], "guid": 7550}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | What are the names of customers who have taken both Mortgage and Auto loans?", "sql": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE loan_type  =  'Mortgages' INTERSECT SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE loan_type  =  'Auto'", "example": {"db_id": "loan_1", "query": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE loan_type  =  'Mortgages' INTERSECT SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE loan_type  =  'Auto'", "query_toks": ["SELECT", "T1.cust_name", "FROM", "customer", "AS", "T1", "JOIN", "loan", "AS", "T2", "ON", "T1.cust_id", "=", "T2.cust_id", "WHERE", "loan_type", "=", "'Mortgages", "'", "INTERSECT", "SELECT", "T1.cust_name", "FROM", "customer", "AS", "T1", "JOIN", "loan", "AS", "T2", "ON", "T1.cust_id", "=", "T2.cust_id", "WHERE", "loan_type", "=", "'Auto", "'"], "query_toks_no_value": ["select", "t1", ".", "cust_name", "from", "customer", "as", "t1", "join", "loan", "as", "t2", "on", "t1", ".", "cust_id", "=", "t2", ".", "cust_id", "where", "loan_type", "=", "value", "intersect", "select", "t1", ".", "cust_name", "from", "customer", "as", "t1", "join", "loan", "as", "t2", "on", "t1", ".", "cust_id", "=", "t2", ".", "cust_id", "where", "loan_type", "=", "value"], "question": "What are the names of customers who have taken both Mortgage and Auto loans?", "question_toks": ["What", "are", "the", "names", "of", "customers", "who", "have", "taken", "both", "Mortgage", "and", "Auto", "loans", "?"], "guid": 7551}}
{"text": "Customers: Customer_ID, Customer_Details; Staff: Staff_ID, Staff_Details; Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claim_Headers: Claim_Header_ID, Claim_Status_Code, Claim_Type_Code, Policy_ID, Date_of_Claim, Date_of_Settlement, Amount_Claimed, Amount_Piad; Claims_Documents: Claim_ID, Document_Type_Code, Created_by_Staff_ID, Created_Date; Claims_Processing_Stages: Claim_Stage_ID, Next_Claim_Stage_ID, Claim_Status_Name, Claim_Status_Description; Claims_Processing: Claim_Processing_ID, Claim_ID, Claim_Outcome_Code, Claim_Stage_ID, Staff_ID | How many claim processing stages are there in total?", "sql": "SELECT count(*) FROM claims_processing_stages", "example": {"db_id": "insurance_and_eClaims", "query": "SELECT count(*) FROM claims_processing_stages", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "claims_processing_stages"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "claims_processing_stages"], "question": "How many claim processing stages are there in total?", "question_toks": ["How", "many", "claim", "processing", "stages", "are", "there", "in", "total", "?"], "guid": 7552}}
{"text": "Customers: Customer_ID, Customer_name; Services: Service_ID, Service_name; Available_Policies: Policy_ID, policy_type_code, Customer_Phone; Customers_Policies: Customer_ID, Policy_ID, Date_Opened, Date_Closed; First_Notification_of_Loss: FNOL_ID, Customer_ID, Policy_ID, Service_ID; Claims: Claim_ID, FNOL_ID, Effective_Date; Settlements: Settlement_ID, Claim_ID, Effective_Date, Settlement_Amount | What are the open and close dates of all the policies used by the customer who have \"Diana\" in part of their names?", "sql": "SELECT t2.date_opened ,  t2.date_closed FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name LIKE \"%Diana%\"", "example": {"db_id": "insurance_fnol", "query": "SELECT t2.date_opened ,  t2.date_closed FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name LIKE \"%Diana%\"", "query_toks": ["SELECT", "t2.date_opened", ",", "t2.date_closed", "FROM", "customers", "AS", "t1", "JOIN", "customers_policies", "AS", "t2", "ON", "t1.customer_id", "=", "t2.customer_id", "WHERE", "t1.customer_name", "LIKE", "``", "%", "Diana", "%", "''"], "query_toks_no_value": ["select", "t2", ".", "date_opened", ",", "t2", ".", "date_closed", "from", "customers", "as", "t1", "join", "customers_policies", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "where", "t1", ".", "customer_name", "like", "value"], "question": "What are the open and close dates of all the policies used by the customer who have \"Diana\" in part of their names?", "question_toks": ["What", "are", "the", "open", "and", "close", "dates", "of", "all", "the", "policies", "used", "by", "the", "customer", "who", "have", "``", "Diana", "''", "in", "part", "of", "their", "names", "?"], "guid": 7553}}
{"text": "Customers: Customer_ID, Customer_Details; Staff: Staff_ID, Staff_Details; Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claim_Headers: Claim_Header_ID, Claim_Status_Code, Claim_Type_Code, Policy_ID, Date_of_Claim, Date_of_Settlement, Amount_Claimed, Amount_Piad; Claims_Documents: Claim_ID, Document_Type_Code, Created_by_Staff_ID, Created_Date; Claims_Processing_Stages: Claim_Stage_ID, Next_Claim_Stage_ID, Claim_Status_Name, Claim_Status_Description; Claims_Processing: Claim_Processing_ID, Claim_ID, Claim_Outcome_Code, Claim_Stage_ID, Staff_ID | What are the total amount and average amount paid in claim headers?", "sql": "SELECT sum(amount_piad) ,  avg(amount_piad) FROM claim_headers", "example": {"db_id": "insurance_and_eClaims", "query": "SELECT sum(amount_piad) ,  avg(amount_piad) FROM claim_headers", "query_toks": ["SELECT", "sum", "(", "amount_piad", ")", ",", "avg", "(", "amount_piad", ")", "FROM", "claim_headers"], "query_toks_no_value": ["select", "sum", "(", "amount_piad", ")", ",", "avg", "(", "amount_piad", ")", "from", "claim_headers"], "question": "What are the total amount and average amount paid in claim headers?", "question_toks": ["What", "are", "the", "total", "amount", "and", "average", "amount", "paid", "in", "claim", "headers", "?"], "guid": 7554}}
{"text": "ACCOUNTS: custid, name; SAVINGS: custid, balance; CHECKING: custid, balance | What is the sum of checking and savings balances for all customers, ordered by the total balance?", "sql": "SELECT T1.balance + T2.balance FROM checking AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid ORDER BY T1.balance + T2.balance", "example": {"db_id": "small_bank_1", "query": "SELECT T1.balance + T2.balance FROM checking AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid ORDER BY T1.balance + T2.balance", "query_toks": ["SELECT", "T1.balance", "+", "T2.balance", "FROM", "checking", "AS", "T1", "JOIN", "savings", "AS", "T2", "ON", "T1.custid", "=", "T2.custid", "ORDER", "BY", "T1.balance", "+", "T2.balance"], "query_toks_no_value": ["select", "t1", ".", "balance", "+", "t2", ".", "balance", "from", "checking", "as", "t1", "join", "savings", "as", "t2", "on", "t1", ".", "custid", "=", "t2", ".", "custid", "order", "by", "t1", ".", "balance", "+", "t2", ".", "balance"], "question": "What is the sum of checking and savings balances for all customers, ordered by the total balance?", "question_toks": ["What", "is", "the", "sum", "of", "checking", "and", "savings", "balances", "for", "all", "customers", ",", "ordered", "by", "the", "total", "balance", "?"], "guid": 7555}}
{"text": "ACCOUNTS: custid, name; SAVINGS: custid, balance; CHECKING: custid, balance | Find the name, checking balance and saving balance of all accounts in the bank.", "sql": "SELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid", "example": {"db_id": "small_bank_1", "query": "SELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid", "query_toks": ["SELECT", "T2.balance", ",", "T3.balance", ",", "T1.name", "FROM", "accounts", "AS", "T1", "JOIN", "checking", "AS", "T2", "ON", "T1.custid", "=", "T2.custid", "JOIN", "savings", "AS", "T3", "ON", "T1.custid", "=", "T3.custid"], "query_toks_no_value": ["select", "t2", ".", "balance", ",", "t3", ".", "balance", ",", "t1", ".", "name", "from", "accounts", "as", "t1", "join", "checking", "as", "t2", "on", "t1", ".", "custid", "=", "t2", ".", "custid", "join", "savings", "as", "t3", "on", "t1", ".", "custid", "=", "t3", ".", "custid"], "question": "Find the name, checking balance and saving balance of all accounts in the bank.", "question_toks": ["Find", "the", "name", ",", "checking", "balance", "and", "saving", "balance", "of", "all", "accounts", "in", "the", "bank", "."], "guid": 7556}}
{"text": "Customers: Customer_ID, Customer_Details; Staff: Staff_ID, Staff_Details; Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claim_Headers: Claim_Header_ID, Claim_Status_Code, Claim_Type_Code, Policy_ID, Date_of_Claim, Date_of_Settlement, Amount_Claimed, Amount_Piad; Claims_Documents: Claim_ID, Document_Type_Code, Created_by_Staff_ID, Created_Date; Claims_Processing_Stages: Claim_Stage_ID, Next_Claim_Stage_ID, Claim_Status_Name, Claim_Status_Description; Claims_Processing: Claim_Processing_ID, Claim_ID, Claim_Outcome_Code, Claim_Stage_ID, Staff_ID | Which claim processing stage has the most claims? Show the claim status name.", "sql": "SELECT t2.claim_status_name FROM claims_processing AS t1 JOIN claims_processing_stages AS t2 ON t1.claim_stage_id  =  t2.claim_stage_id GROUP BY t1.claim_stage_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "insurance_and_eClaims", "query": "SELECT t2.claim_status_name FROM claims_processing AS t1 JOIN claims_processing_stages AS t2 ON t1.claim_stage_id  =  t2.claim_stage_id GROUP BY t1.claim_stage_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "t2.claim_status_name", "FROM", "claims_processing", "AS", "t1", "JOIN", "claims_processing_stages", "AS", "t2", "ON", "t1.claim_stage_id", "=", "t2.claim_stage_id", "GROUP", "BY", "t1.claim_stage_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "claim_status_name", "from", "claims_processing", "as", "t1", "join", "claims_processing_stages", "as", "t2", "on", "t1", ".", "claim_stage_id", "=", "t2", ".", "claim_stage_id", "group", "by", "t1", ".", "claim_stage_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which claim processing stage has the most claims? Show the claim status name.", "question_toks": ["Which", "claim", "processing", "stage", "has", "the", "most", "claims", "?", "Show", "the", "claim", "status", "name", "."], "guid": 7557}}
{"text": "Addresses: Address_ID, address_details; Locations: Location_ID, Other_Details; Products: Product_ID, Product_Type_Code, Product_Name, Product_Price; Parties: Party_ID, Party_Details; Assets: Asset_ID, Other_Details; Channels: Channel_ID, Other_Details; Finances: Finance_ID, Other_Details; Events: Event_ID, Address_ID, Channel_ID, Event_Type_Code, Finance_ID, Location_ID; Products_in_Events: Product_in_Event_ID, Event_ID, Product_ID; Parties_in_Events: Party_ID, Event_ID, Role_Code | List the name of products in ascending order of price.", "sql": "SELECT Product_Name FROM Products ORDER BY Product_Price ASC", "example": {"db_id": "solvency_ii", "query": "SELECT Product_Name FROM Products ORDER BY Product_Price ASC", "query_toks": ["SELECT", "Product_Name", "FROM", "Products", "ORDER", "BY", "Product_Price", "ASC"], "query_toks_no_value": ["select", "product_name", "from", "products", "order", "by", "product_price", "asc"], "question": "List the name of products in ascending order of price.", "question_toks": ["List", "the", "name", "of", "products", "in", "ascending", "order", "of", "price", "."], "guid": 7558}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | Find the total amount of loans offered by each bank branch.", "sql": "SELECT sum(amount) ,  T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id GROUP BY T1.bname", "example": {"db_id": "loan_1", "query": "SELECT sum(amount) ,  T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id GROUP BY T1.bname", "query_toks": ["SELECT", "sum", "(", "amount", ")", ",", "T1.bname", "FROM", "bank", "AS", "T1", "JOIN", "loan", "AS", "T2", "ON", "T1.branch_id", "=", "T2.branch_id", "GROUP", "BY", "T1.bname"], "query_toks_no_value": ["select", "sum", "(", "amount", ")", ",", "t1", ".", "bname", "from", "bank", "as", "t1", "join", "loan", "as", "t2", "on", "t1", ".", "branch_id", "=", "t2", ".", "branch_id", "group", "by", "t1", ".", "bname"], "question": "Find the total amount of loans offered by each bank branch.", "question_toks": ["Find", "the", "total", "amount", "of", "loans", "offered", "by", "each", "bank", "branch", "."], "guid": 7559}}
{"text": "ACCOUNTS: custid, name; SAVINGS: custid, balance; CHECKING: custid, balance | Find the balance of the checking account belonging to an owner whose name contains 'ee'.", "sql": "SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T1.name LIKE '%ee%'", "example": {"db_id": "small_bank_1", "query": "SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T1.name LIKE '%ee%'", "query_toks": ["SELECT", "T2.balance", "FROM", "accounts", "AS", "T1", "JOIN", "checking", "AS", "T2", "ON", "T1.custid", "=", "T2.custid", "WHERE", "T1.name", "LIKE", "'", "%", "ee", "%", "'"], "query_toks_no_value": ["select", "t2", ".", "balance", "from", "accounts", "as", "t1", "join", "checking", "as", "t2", "on", "t1", ".", "custid", "=", "t2", ".", "custid", "where", "t1", ".", "name", "like", "value"], "question": "Find the balance of the checking account belonging to an owner whose name contains 'ee'.", "question_toks": ["Find", "the", "balance", "of", "the", "checking", "account", "belonging", "to", "an", "owner", "whose", "name", "contains", "'ee", "'", "."], "guid": 7560}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | Find the branch names of banks in the New York state.", "sql": "SELECT bname FROM bank WHERE state  =  'New York'", "example": {"db_id": "loan_1", "query": "SELECT bname FROM bank WHERE state  =  'New York'", "query_toks": ["SELECT", "bname", "FROM", "bank", "WHERE", "state", "=", "'New", "York", "'"], "query_toks_no_value": ["select", "bname", "from", "bank", "where", "state", "=", "value"], "question": "Find the branch names of banks in the New York state.", "question_toks": ["Find", "the", "branch", "names", "of", "banks", "in", "the", "New", "York", "state", "."], "guid": 7561}}
{"text": "Ref_Feature_Types: feature_type_code, feature_type_name; Ref_Property_Types: property_type_code, property_type_description; Other_Available_Features: feature_id, feature_type_code, feature_name, feature_description; Properties: property_id, property_type_code, date_on_market, date_sold, property_name, property_address, room_count, vendor_requested_price, buyer_offered_price, agreed_selling_price; Other_Property_Features: property_id, feature_id, property_feature_description | What are the names of properties that are either houses or apartments with more than 1 room?", "sql": "SELECT property_name FROM Properties WHERE property_type_code  =  \"House\" UNION SELECT property_name FROM Properties WHERE property_type_code  =  \"Apartment\" AND room_count  >  1", "example": {"db_id": "real_estate_properties", "query": "SELECT property_name FROM Properties WHERE property_type_code  =  \"House\" UNION SELECT property_name FROM Properties WHERE property_type_code  =  \"Apartment\" AND room_count  >  1", "query_toks": ["SELECT", "property_name", "FROM", "Properties", "WHERE", "property_type_code", "=", "``", "House", "''", "UNION", "SELECT", "property_name", "FROM", "Properties", "WHERE", "property_type_code", "=", "``", "Apartment", "''", "AND", "room_count", ">", "1"], "query_toks_no_value": ["select", "property_name", "from", "properties", "where", "property_type_code", "=", "value", "union", "select", "property_name", "from", "properties", "where", "property_type_code", "=", "value", "and", "room_count", ">", "value"], "question": "What are the names of properties that are either houses or apartments with more than 1 room?", "question_toks": ["What", "are", "the", "names", "of", "properties", "that", "are", "either", "houses", "or", "apartments", "with", "more", "than", "1", "room", "?"], "guid": 7562}}
{"text": "Customers: Customer_ID, Customer_Details; Customer_Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claims: Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled; Settlements: Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID; Payments: Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment | What are the method, date and amount of each payment? Sort the list in ascending order of date.", "sql": "SELECT Payment_Method_Code ,  Date_Payment_Made ,  Amount_Payment FROM Payments ORDER BY Date_Payment_Made ASC", "example": {"db_id": "insurance_policies", "query": "SELECT Payment_Method_Code ,  Date_Payment_Made ,  Amount_Payment FROM Payments ORDER BY Date_Payment_Made ASC", "query_toks": ["SELECT", "Payment_Method_Code", ",", "Date_Payment_Made", ",", "Amount_Payment", "FROM", "Payments", "ORDER", "BY", "Date_Payment_Made", "ASC"], "query_toks_no_value": ["select", "payment_method_code", ",", "date_payment_made", ",", "amount_payment", "from", "payments", "order", "by", "date_payment_made", "asc"], "question": "What are the method, date and amount of each payment? Sort the list in ascending order of date.", "question_toks": ["What", "are", "the", "method", ",", "date", "and", "amount", "of", "each", "payment", "?", "Sort", "the", "list", "in", "ascending", "order", "of", "date", "."], "guid": 7563}}
{"text": "ACCOUNTS: custid, name; SAVINGS: custid, balance; CHECKING: custid, balance | Find the name and checking balance of the account with the lowest saving balance.", "sql": "SELECT T2.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT 1", "example": {"db_id": "small_bank_1", "query": "SELECT T2.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT 1", "query_toks": ["SELECT", "T2.balance", ",", "T1.name", "FROM", "accounts", "AS", "T1", "JOIN", "checking", "AS", "T2", "ON", "T1.custid", "=", "T2.custid", "JOIN", "savings", "AS", "T3", "ON", "T1.custid", "=", "T3.custid", "ORDER", "BY", "T3.balance", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "balance", ",", "t1", ".", "name", "from", "accounts", "as", "t1", "join", "checking", "as", "t2", "on", "t1", ".", "custid", "=", "t2", ".", "custid", "join", "savings", "as", "t3", "on", "t1", ".", "custid", "=", "t3", ".", "custid", "order", "by", "t3", ".", "balance", "limit", "value"], "question": "Find the name and checking balance of the account with the lowest saving balance.", "question_toks": ["Find", "the", "name", "and", "checking", "balance", "of", "the", "account", "with", "the", "lowest", "saving", "balance", "."], "guid": 7564}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | Find the number of customers in the banks at New York City.", "sql": "SELECT sum(no_of_customers) FROM bank WHERE city  =  'New York City'", "example": {"db_id": "loan_1", "query": "SELECT sum(no_of_customers) FROM bank WHERE city  =  'New York City'", "query_toks": ["SELECT", "sum", "(", "no_of_customers", ")", "FROM", "bank", "WHERE", "city", "=", "'New", "York", "City", "'"], "query_toks_no_value": ["select", "sum", "(", "no_of_customers", ")", "from", "bank", "where", "city", "=", "value"], "question": "Find the number of customers in the banks at New York City.", "question_toks": ["Find", "the", "number", "of", "customers", "in", "the", "banks", "at", "New", "York", "City", "."], "guid": 7565}}
{"text": "ACCOUNTS: custid, name; SAVINGS: custid, balance; CHECKING: custid, balance | Find the name, checking balance and savings balance of all accounts in the bank sorted by their total checking and savings balance in descending order.", "sql": "SELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance + T3.balance DESC", "example": {"db_id": "small_bank_1", "query": "SELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance + T3.balance DESC", "query_toks": ["SELECT", "T2.balance", ",", "T3.balance", ",", "T1.name", "FROM", "accounts", "AS", "T1", "JOIN", "checking", "AS", "T2", "ON", "T1.custid", "=", "T2.custid", "JOIN", "savings", "AS", "T3", "ON", "T1.custid", "=", "T3.custid", "ORDER", "BY", "T2.balance", "+", "T3.balance", "DESC"], "query_toks_no_value": ["select", "t2", ".", "balance", ",", "t3", ".", "balance", ",", "t1", ".", "name", "from", "accounts", "as", "t1", "join", "checking", "as", "t2", "on", "t1", ".", "custid", "=", "t2", ".", "custid", "join", "savings", "as", "t3", "on", "t1", ".", "custid", "=", "t3", ".", "custid", "order", "by", "t2", ".", "balance", "+", "t3", ".", "balance", "desc"], "question": "Find the name, checking balance and savings balance of all accounts in the bank sorted by their total checking and savings balance in descending order.", "question_toks": ["Find", "the", "name", ",", "checking", "balance", "and", "savings", "balance", "of", "all", "accounts", "in", "the", "bank", "sorted", "by", "their", "total", "checking", "and", "savings", "balance", "in", "descending", "order", "."], "guid": 7566}}
{"text": "Customers: Customer_ID, Customer_name; Services: Service_ID, Service_name; Available_Policies: Policy_ID, policy_type_code, Customer_Phone; Customers_Policies: Customer_ID, Policy_ID, Date_Opened, Date_Closed; First_Notification_of_Loss: FNOL_ID, Customer_ID, Policy_ID, Service_ID; Claims: Claim_ID, FNOL_ID, Effective_Date; Settlements: Settlement_ID, Claim_ID, Effective_Date, Settlement_Amount | Which customers do not have a first notification of loss record? Give me the customer names.", "sql": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id", "example": {"db_id": "insurance_fnol", "query": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id", "query_toks": ["SELECT", "customer_name", "FROM", "customers", "EXCEPT", "SELECT", "t1.customer_name", "FROM", "customers", "AS", "t1", "JOIN", "first_notification_of_loss", "AS", "t2", "ON", "t1.customer_id", "=", "t2.customer_id"], "query_toks_no_value": ["select", "customer_name", "from", "customers", "except", "select", "t1", ".", "customer_name", "from", "customers", "as", "t1", "join", "first_notification_of_loss", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id"], "question": "Which customers do not have a first notification of loss record? Give me the customer names.", "question_toks": ["Which", "customers", "do", "not", "have", "a", "first", "notification", "of", "loss", "record", "?", "Give", "me", "the", "customer", "names", "."], "guid": 7567}}
{"text": "ACCOUNTS: custid, name; SAVINGS: custid, balance; CHECKING: custid, balance | Find the average checking balance.", "sql": "SELECT avg(balance) FROM checking", "example": {"db_id": "small_bank_1", "query": "SELECT avg(balance) FROM checking", "query_toks": ["SELECT", "avg", "(", "balance", ")", "FROM", "checking"], "query_toks_no_value": ["select", "avg", "(", "balance", ")", "from", "checking"], "question": "Find the average checking balance.", "question_toks": ["Find", "the", "average", "checking", "balance", "."], "guid": 7568}}
{"text": "Customers: Customer_ID, Customer_Details; Customer_Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claims: Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled; Settlements: Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID; Payments: Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment | List the date the claim was made, the date it was settled and the amount settled for all the claims which had exactly one settlement.", "sql": "SELECT T1.claim_id ,  T1.date_claim_made ,  T1.Date_Claim_Settled FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id  =  T2.Claim_id GROUP BY T1.claim_id HAVING count(*)  =  1", "example": {"db_id": "insurance_policies", "query": "SELECT T1.claim_id ,  T1.date_claim_made ,  T1.Date_Claim_Settled FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id  =  T2.Claim_id GROUP BY T1.claim_id HAVING count(*)  =  1", "query_toks": ["SELECT", "T1.claim_id", ",", "T1.date_claim_made", ",", "T1.Date_Claim_Settled", "FROM", "Claims", "AS", "T1", "JOIN", "Settlements", "AS", "T2", "ON", "T1.Claim_id", "=", "T2.Claim_id", "GROUP", "BY", "T1.claim_id", "HAVING", "count", "(", "*", ")", "=", "1"], "query_toks_no_value": ["select", "t1", ".", "claim_id", ",", "t1", ".", "date_claim_made", ",", "t1", ".", "date_claim_settled", "from", "claims", "as", "t1", "join", "settlements", "as", "t2", "on", "t1", ".", "claim_id", "=", "t2", ".", "claim_id", "group", "by", "t1", ".", "claim_id", "having", "count", "(", "*", ")", "=", "value"], "question": "List the date the claim was made, the date it was settled and the amount settled for all the claims which had exactly one settlement.", "question_toks": ["List", "the", "date", "the", "claim", "was", "made", ",", "the", "date", "it", "was", "settled", "and", "the", "amount", "settled", "for", "all", "the", "claims", "which", "had", "exactly", "one", "settlement", "."], "guid": 7569}}
{"text": "Customers: Customer_ID, Customer_Details; Customer_Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claims: Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled; Settlements: Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID; Payments: Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment | Of all the claims, what was the earliest date when any claim was made?", "sql": "SELECT Date_Claim_Made FROM Claims ORDER BY Date_Claim_Made ASC LIMIT 1", "example": {"db_id": "insurance_policies", "query": "SELECT Date_Claim_Made FROM Claims ORDER BY Date_Claim_Made ASC LIMIT 1", "query_toks": ["SELECT", "Date_Claim_Made", "FROM", "Claims", "ORDER", "BY", "Date_Claim_Made", "ASC", "LIMIT", "1"], "query_toks_no_value": ["select", "date_claim_made", "from", "claims", "order", "by", "date_claim_made", "asc", "limit", "value"], "question": "Of all the claims, what was the earliest date when any claim was made?", "question_toks": ["Of", "all", "the", "claims", ",", "what", "was", "the", "earliest", "date", "when", "any", "claim", "was", "made", "?"], "guid": 7570}}
{"text": "Customers: Customer_ID, Customer_Details; Customer_Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claims: Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled; Settlements: Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID; Payments: Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment | How many settlements are there in total?", "sql": "SELECT count(*) FROM Settlements", "example": {"db_id": "insurance_policies", "query": "SELECT count(*) FROM Settlements", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Settlements"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "settlements"], "question": "How many settlements are there in total?", "question_toks": ["How", "many", "settlements", "are", "there", "in", "total", "?"], "guid": 7571}}
{"text": "Addresses: Address_ID, address_details; Locations: Location_ID, Other_Details; Products: Product_ID, Product_Type_Code, Product_Name, Product_Price; Parties: Party_ID, Party_Details; Assets: Asset_ID, Other_Details; Channels: Channel_ID, Other_Details; Finances: Finance_ID, Other_Details; Events: Event_ID, Address_ID, Channel_ID, Event_Type_Code, Finance_ID, Location_ID; Products_in_Events: Product_in_Event_ID, Event_ID, Product_ID; Parties_in_Events: Party_ID, Event_ID, Role_Code | What is the average price for products?", "sql": "SELECT avg(Product_Price) FROM Products", "example": {"db_id": "solvency_ii", "query": "SELECT avg(Product_Price) FROM Products", "query_toks": ["SELECT", "avg", "(", "Product_Price", ")", "FROM", "Products"], "query_toks_no_value": ["select", "avg", "(", "product_price", ")", "from", "products"], "question": "What is the average price for products?", "question_toks": ["What", "is", "the", "average", "price", "for", "products", "?"], "guid": 7572}}
{"text": "Customers: Customer_ID, Customer_Details; Staff: Staff_ID, Staff_Details; Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claim_Headers: Claim_Header_ID, Claim_Status_Code, Claim_Type_Code, Policy_ID, Date_of_Claim, Date_of_Settlement, Amount_Claimed, Amount_Piad; Claims_Documents: Claim_ID, Document_Type_Code, Created_by_Staff_ID, Created_Date; Claims_Processing_Stages: Claim_Stage_ID, Next_Claim_Stage_ID, Claim_Status_Name, Claim_Status_Description; Claims_Processing: Claim_Processing_ID, Claim_ID, Claim_Outcome_Code, Claim_Stage_ID, Staff_ID | Count the number of distinct claim outcome codes.", "sql": "SELECT count(DISTINCT claim_outcome_code) FROM claims_processing", "example": {"db_id": "insurance_and_eClaims", "query": "SELECT count(DISTINCT claim_outcome_code) FROM claims_processing", "query_toks": ["SELECT", "count", "(", "DISTINCT", "claim_outcome_code", ")", "FROM", "claims_processing"], "query_toks_no_value": ["select", "count", "(", "distinct", "claim_outcome_code", ")", "from", "claims_processing"], "question": "Count the number of distinct claim outcome codes.", "question_toks": ["Count", "the", "number", "of", "distinct", "claim", "outcome", "codes", "."], "guid": 7573}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | List the name of all customers sorted by their account balance in ascending order.", "sql": "SELECT cust_name FROM customer ORDER BY acc_bal", "example": {"db_id": "loan_1", "query": "SELECT cust_name FROM customer ORDER BY acc_bal", "query_toks": ["SELECT", "cust_name", "FROM", "customer", "ORDER", "BY", "acc_bal"], "query_toks_no_value": ["select", "cust_name", "from", "customer", "order", "by", "acc_bal"], "question": "List the name of all customers sorted by their account balance in ascending order.", "question_toks": ["List", "the", "name", "of", "all", "customers", "sorted", "by", "their", "account", "balance", "in", "ascending", "order", "."], "guid": 7574}}
{"text": "Customers: Customer_ID, Customer_name; Services: Service_ID, Service_name; Available_Policies: Policy_ID, policy_type_code, Customer_Phone; Customers_Policies: Customer_ID, Policy_ID, Date_Opened, Date_Closed; First_Notification_of_Loss: FNOL_ID, Customer_ID, Policy_ID, Service_ID; Claims: Claim_ID, FNOL_ID, Effective_Date; Settlements: Settlement_ID, Claim_ID, Effective_Date, Settlement_Amount | Which services have been used more than twice in first notification of loss? Return the service name.", "sql": "SELECT t2.service_name FROM first_notification_of_loss AS t1 JOIN services AS t2 ON t1.service_id  =  t2.service_id GROUP BY t1.service_id HAVING count(*)  >  2", "example": {"db_id": "insurance_fnol", "query": "SELECT t2.service_name FROM first_notification_of_loss AS t1 JOIN services AS t2 ON t1.service_id  =  t2.service_id GROUP BY t1.service_id HAVING count(*)  >  2", "query_toks": ["SELECT", "t2.service_name", "FROM", "first_notification_of_loss", "AS", "t1", "JOIN", "services", "AS", "t2", "ON", "t1.service_id", "=", "t2.service_id", "GROUP", "BY", "t1.service_id", "HAVING", "count", "(", "*", ")", ">", "2"], "query_toks_no_value": ["select", "t2", ".", "service_name", "from", "first_notification_of_loss", "as", "t1", "join", "services", "as", "t2", "on", "t1", ".", "service_id", "=", "t2", ".", "service_id", "group", "by", "t1", ".", "service_id", "having", "count", "(", "*", ")", ">", "value"], "question": "Which services have been used more than twice in first notification of loss? Return the service name.", "question_toks": ["Which", "services", "have", "been", "used", "more", "than", "twice", "in", "first", "notification", "of", "loss", "?", "Return", "the", "service", "name", "."], "guid": 7575}}
{"text": "players: player_id, first_name, last_name, hand, birth_date, country_code; matches: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank; rankings: ranking_date, ranking, player_id, ranking_points, tours | What are the codes of countries with more than 50 players?", "sql": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50", "example": {"db_id": "wta_1", "query": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50", "query_toks": ["SELECT", "country_code", "FROM", "players", "GROUP", "BY", "country_code", "HAVING", "count", "(", "*", ")", ">", "50"], "query_toks_no_value": ["select", "country_code", "from", "players", "group", "by", "country_code", "having", "count", "(", "*", ")", ">", "value"], "question": "What are the codes of countries with more than 50 players?", "question_toks": ["What", "are", "the", "codes", "of", "countries", "with", "more", "than", "50", "players", "?"], "guid": 2717}}
{"text": "country: Country_id, Country_name, Capital, Official_native_language; team: Team_id, Name; match_season: Season, Player, Position, Country, Team, Draft_Pick_Number, Draft_Class, College; player: Player_ID, Player, Years_Played, Total_WL, Singles_WL, Doubles_WL, Team | Return the colleges that have players who play the Midfielder position, as well as players who play the Defender position.", "sql": "SELECT College FROM match_season WHERE POSITION  =  \"Midfielder\" INTERSECT SELECT College FROM match_season WHERE POSITION  =  \"Defender\"", "example": {"db_id": "match_season", "query": "SELECT College FROM match_season WHERE POSITION  =  \"Midfielder\" INTERSECT SELECT College FROM match_season WHERE POSITION  =  \"Defender\"", "query_toks": ["SELECT", "College", "FROM", "match_season", "WHERE", "POSITION", "=", "``", "Midfielder", "''", "INTERSECT", "SELECT", "College", "FROM", "match_season", "WHERE", "POSITION", "=", "``", "Defender", "''"], "query_toks_no_value": ["select", "college", "from", "match_season", "where", "position", "=", "value", "intersect", "select", "college", "from", "match_season", "where", "position", "=", "value"], "question": "Return the colleges that have players who play the Midfielder position, as well as players who play the Defender position.", "question_toks": ["Return", "the", "colleges", "that", "have", "players", "who", "play", "the", "Midfielder", "position", ",", "as", "well", "as", "players", "who", "play", "the", "Defender", "position", "."], "guid": 2718}}
{"text": "country: Country_id, Country_name, Capital, Official_native_language; team: Team_id, Name; match_season: Season, Player, Position, Country, Team, Draft_Pick_Number, Draft_Class, College; player: Player_ID, Player, Years_Played, Total_WL, Singles_WL, Doubles_WL, Team | Show the distinct position of players from college UCLA or Duke.", "sql": "SELECT DISTINCT POSITION FROM match_season WHERE College  =  \"UCLA\" OR College  =  \"Duke\"", "example": {"db_id": "match_season", "query": "SELECT DISTINCT POSITION FROM match_season WHERE College  =  \"UCLA\" OR College  =  \"Duke\"", "query_toks": ["SELECT", "DISTINCT", "POSITION", "FROM", "match_season", "WHERE", "College", "=", "``", "UCLA", "''", "OR", "College", "=", "``", "Duke", "''"], "query_toks_no_value": ["select", "distinct", "position", "from", "match_season", "where", "college", "=", "value", "or", "college", "=", "value"], "question": "Show the distinct position of players from college UCLA or Duke.", "question_toks": ["Show", "the", "distinct", "position", "of", "players", "from", "college", "UCLA", "or", "Duke", "."], "guid": 2719}}
{"text": "wrestler: Wrestler_ID, Name, Reign, Days_held, Location, Event; Elimination: Elimination_ID, Wrestler_ID, Team, Eliminated_By, Elimination_Move, Time | Show the times of elimination by \"Punk\" or \"Orton\".", "sql": "SELECT TIME FROM elimination WHERE Eliminated_By  =  \"Punk\" OR Eliminated_By  =  \"Orton\"", "example": {"db_id": "wrestler", "query": "SELECT TIME FROM elimination WHERE Eliminated_By  =  \"Punk\" OR Eliminated_By  =  \"Orton\"", "query_toks": ["SELECT", "TIME", "FROM", "elimination", "WHERE", "Eliminated_By", "=", "``", "Punk", "''", "OR", "Eliminated_By", "=", "``", "Orton", "''"], "query_toks_no_value": ["select", "time", "from", "elimination", "where", "eliminated_by", "=", "value", "or", "eliminated_by", "=", "value"], "question": "Show the times of elimination by \"Punk\" or \"Orton\".", "question_toks": ["Show", "the", "times", "of", "elimination", "by", "``", "Punk", "''", "or", "``", "Orton", "''", "."], "guid": 2720}}
{"text": "gymnast: Gymnast_ID, Floor_Exercise_Points, Pommel_Horse_Points, Rings_Points, Vault_Points, Parallel_Bars_Points, Horizontal_Bar_Points, Total_Points; people: People_ID, Name, Age, Height, Hometown | Give the hometowns from which two or more gymnasts are from.", "sql": "SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown HAVING COUNT(*)  >=  2", "example": {"db_id": "gymnast", "query": "SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown HAVING COUNT(*)  >=  2", "query_toks": ["SELECT", "T2.Hometown", "FROM", "gymnast", "AS", "T1", "JOIN", "people", "AS", "T2", "ON", "T1.Gymnast_ID", "=", "T2.People_ID", "GROUP", "BY", "T2.Hometown", "HAVING", "COUNT", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "t2", ".", "hometown", "from", "gymnast", "as", "t1", "join", "people", "as", "t2", "on", "t1", ".", "gymnast_id", "=", "t2", ".", "people_id", "group", "by", "t2", ".", "hometown", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "Give the hometowns from which two or more gymnasts are from.", "question_toks": ["Give", "the", "hometowns", "from", "which", "two", "or", "more", "gymnasts", "are", "from", "."], "guid": 2721}}
{"text": "wrestler: Wrestler_ID, Name, Reign, Days_held, Location, Event; Elimination: Elimination_ID, Wrestler_ID, Team, Eliminated_By, Elimination_Move, Time | List the time of elimination of the wrestlers with largest days held.", "sql": "SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID ORDER BY T2.Days_held DESC LIMIT 1", "example": {"db_id": "wrestler", "query": "SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID ORDER BY T2.Days_held DESC LIMIT 1", "query_toks": ["SELECT", "T1.Time", "FROM", "elimination", "AS", "T1", "JOIN", "wrestler", "AS", "T2", "ON", "T1.Wrestler_ID", "=", "T2.Wrestler_ID", "ORDER", "BY", "T2.Days_held", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "time", "from", "elimination", "as", "t1", "join", "wrestler", "as", "t2", "on", "t1", ".", "wrestler_id", "=", "t2", ".", "wrestler_id", "order", "by", "t2", ".", "days_held", "desc", "limit", "value"], "question": "List the time of elimination of the wrestlers with largest days held.", "question_toks": ["List", "the", "time", "of", "elimination", "of", "the", "wrestlers", "with", "largest", "days", "held", "."], "guid": 2722}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | What are the dates that have the 5 highest cloud cover rates and what are the rates?", "sql": "SELECT date ,  cloud_cover FROM weather ORDER BY cloud_cover DESC LIMIT 5", "example": {"db_id": "bike_1", "query": "SELECT date ,  cloud_cover FROM weather ORDER BY cloud_cover DESC LIMIT 5", "query_toks": ["SELECT", "date", ",", "cloud_cover", "FROM", "weather", "ORDER", "BY", "cloud_cover", "DESC", "LIMIT", "5"], "query_toks_no_value": ["select", "date", ",", "cloud_cover", "from", "weather", "order", "by", "cloud_cover", "desc", "limit", "value"], "question": "What are the dates that have the 5 highest cloud cover rates and what are the rates?", "question_toks": ["What", "are", "the", "dates", "that", "have", "the", "5", "highest", "cloud", "cover", "rates", "and", "what", "are", "the", "rates", "?"], "guid": 2723}}
{"text": "body_builder: Body_Builder_ID, People_ID, Snatch, Clean_Jerk, Total; people: People_ID, Name, Height, Weight, Birth_Date, Birth_Place | List the names and origins of people who are not body builders.", "sql": "SELECT Name ,  birth_place FROM people EXCEPT SELECT T1.Name ,  T1.birth_place FROM people AS T1 JOIN body_builder AS T2 ON T1.people_id  =  T2.people_id", "example": {"db_id": "body_builder", "query": "SELECT Name ,  birth_place FROM people EXCEPT SELECT T1.Name ,  T1.birth_place FROM people AS T1 JOIN body_builder AS T2 ON T1.people_id  =  T2.people_id", "query_toks": ["SELECT", "Name", ",", "birth_place", "FROM", "people", "EXCEPT", "SELECT", "T1.Name", ",", "T1.birth_place", "FROM", "people", "AS", "T1", "JOIN", "body_builder", "AS", "T2", "ON", "T1.people_id", "=", "T2.people_id"], "query_toks_no_value": ["select", "name", ",", "birth_place", "from", "people", "except", "select", "t1", ".", "name", ",", "t1", ".", "birth_place", "from", "people", "as", "t1", "join", "body_builder", "as", "t2", "on", "t1", ".", "people_id", "=", "t2", ".", "people_id"], "question": "List the names and origins of people who are not body builders.", "question_toks": ["List", "the", "names", "and", "origins", "of", "people", "who", "are", "not", "body", "builders", "."], "guid": 2724}}
{"text": "country: Country_id, Country_name, Capital, Official_native_language; team: Team_id, Name; match_season: Season, Player, Position, Country, Team, Draft_Pick_Number, Draft_Class, College; player: Player_ID, Player, Years_Played, Total_WL, Singles_WL, Doubles_WL, Team | What are the official languages of the countries of players from Maryland or Duke college?", "sql": "SELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.College  =  \"Maryland\" OR T2.College  =  \"Duke\"", "example": {"db_id": "match_season", "query": "SELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.College  =  \"Maryland\" OR T2.College  =  \"Duke\"", "query_toks": ["SELECT", "T1.Official_native_language", "FROM", "country", "AS", "T1", "JOIN", "match_season", "AS", "T2", "ON", "T1.Country_id", "=", "T2.Country", "WHERE", "T2.College", "=", "``", "Maryland", "''", "OR", "T2.College", "=", "``", "Duke", "''"], "query_toks_no_value": ["select", "t1", ".", "official_native_language", "from", "country", "as", "t1", "join", "match_season", "as", "t2", "on", "t1", ".", "country_id", "=", "t2", ".", "country", "where", "t2", ".", "college", "=", "value", "or", "t2", ".", "college", "=", "value"], "question": "What are the official languages of the countries of players from Maryland or Duke college?", "question_toks": ["What", "are", "the", "official", "languages", "of", "the", "countries", "of", "players", "from", "Maryland", "or", "Duke", "college", "?"], "guid": 2725}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | What is the total and maximum duration of trips with bike id 636?", "sql": "SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  636", "example": {"db_id": "bike_1", "query": "SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  636", "query_toks": ["SELECT", "sum", "(", "duration", ")", ",", "max", "(", "duration", ")", "FROM", "trip", "WHERE", "bike_id", "=", "636"], "query_toks_no_value": ["select", "sum", "(", "duration", ")", ",", "max", "(", "duration", ")", "from", "trip", "where", "bike_id", "=", "value"], "question": "What is the total and maximum duration of trips with bike id 636?", "question_toks": ["What", "is", "the", "total", "and", "maximum", "duration", "of", "trips", "with", "bike", "id", "636", "?"], "guid": 2726}}
{"text": "race: Race_ID, Name, Class, Date, Track_ID; track: Track_ID, Name, Location, Seating, Year_Opened | Show name, class, and date for all races.", "sql": "SELECT name ,  CLASS ,  date FROM race", "example": {"db_id": "race_track", "query": "SELECT name ,  CLASS ,  date FROM race", "query_toks": ["SELECT", "name", ",", "CLASS", ",", "date", "FROM", "race"], "query_toks_no_value": ["select", "name", ",", "class", ",", "date", "from", "race"], "question": "Show name, class, and date for all races.", "question_toks": ["Show", "name", ",", "class", ",", "and", "date", "for", "all", "races", "."], "guid": 2727}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | What are the names of all the Japanese constructors that have earned more than 5 points?", "sql": "SELECT T1.name FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5", "example": {"db_id": "formula_1", "query": "SELECT T1.name FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5", "query_toks": ["SELECT", "T1.name", "FROM", "constructors", "AS", "T1", "JOIN", "constructorstandings", "AS", "T2", "ON", "T1.constructorid", "=", "T2.constructorid", "WHERE", "T1.nationality", "=", "``", "Japanese", "''", "AND", "T2.points", ">", "5"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "constructors", "as", "t1", "join", "constructorstandings", "as", "t2", "on", "t1", ".", "constructorid", "=", "t2", ".", "constructorid", "where", "t1", ".", "nationality", "=", "value", "and", "t2", ".", "points", ">", "value"], "question": "What are the names of all the Japanese constructors that have earned more than 5 points?", "question_toks": ["What", "are", "the", "names", "of", "all", "the", "Japanese", "constructors", "that", "have", "earned", "more", "than", "5", "points", "?"], "guid": 2728}}
{"text": "club: Club_ID, name, Region, Start_year; club_rank: Rank, Club_ID, Gold, Silver, Bronze, Total; player: Player_ID, name, Position, Club_ID, Apps, Tries, Goals, Points; competition: Competition_ID, Year, Competition_type, Country; competition_result: Competition_ID, Club_ID_1, Club_ID_2, Score | What are the countries that have never participated in any friendly-type competitions?", "sql": "SELECT country FROM competition EXCEPT SELECT country FROM competition WHERE competition_type  =  'Friendly'", "example": {"db_id": "sports_competition", "query": "SELECT country FROM competition EXCEPT SELECT country FROM competition WHERE competition_type  =  'Friendly'", "query_toks": ["SELECT", "country", "FROM", "competition", "EXCEPT", "SELECT", "country", "FROM", "competition", "WHERE", "competition_type", "=", "'Friendly", "'"], "query_toks_no_value": ["select", "country", "from", "competition", "except", "select", "country", "from", "competition", "where", "competition_type", "=", "value"], "question": "What are the countries that have never participated in any friendly-type competitions?", "question_toks": ["What", "are", "the", "countries", "that", "have", "never", "participated", "in", "any", "friendly-type", "competitions", "?"], "guid": 2729}}
{"text": "players: player_id, first_name, last_name, hand, birth_date, country_code; matches: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank; rankings: ranking_date, ranking, player_id, ranking_points, tours | List the first name and birth date of all players from the country with code USA.", "sql": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'", "example": {"db_id": "wta_1", "query": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'", "query_toks": ["SELECT", "first_name", ",", "birth_date", "FROM", "players", "WHERE", "country_code", "=", "'USA", "'"], "query_toks_no_value": ["select", "first_name", ",", "birth_date", "from", "players", "where", "country_code", "=", "value"], "question": "List the first name and birth date of all players from the country with code USA.", "question_toks": ["List", "the", "first", "name", "and", "birth", "date", "of", "all", "players", "from", "the", "country", "with", "code", "USA", "."], "guid": 2730}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | What is the state and enrollment of the colleges where have any students who got accepted in the tryout decision.", "sql": "SELECT DISTINCT T1.state ,  T1.enr FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.decision  =  'yes'", "example": {"db_id": "soccer_2", "query": "SELECT DISTINCT T1.state ,  T1.enr FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.decision  =  'yes'", "query_toks": ["SELECT", "DISTINCT", "T1.state", ",", "T1.enr", "FROM", "college", "AS", "T1", "JOIN", "tryout", "AS", "T2", "ON", "T1.cName", "=", "T2.cName", "WHERE", "T2.decision", "=", "'yes", "'"], "query_toks_no_value": ["select", "distinct", "t1", ".", "state", ",", "t1", ".", "enr", "from", "college", "as", "t1", "join", "tryout", "as", "t2", "on", "t1", ".", "cname", "=", "t2", ".", "cname", "where", "t2", ".", "decision", "=", "value"], "question": "What is the state and enrollment of the colleges where have any students who got accepted in the tryout decision.", "question_toks": ["What", "is", "the", "state", "and", "enrollment", "of", "the", "colleges", "where", "have", "any", "students", "who", "got", "accepted", "in", "the", "tryout", "decision", "."], "guid": 2731}}
{"text": "wrestler: Wrestler_ID, Name, Reign, Days_held, Location, Event; Elimination: Elimination_ID, Wrestler_ID, Team, Eliminated_By, Elimination_Move, Time | Show teams that have suffered more than three eliminations.", "sql": "SELECT Team FROM elimination GROUP BY Team HAVING COUNT(*)  >  3", "example": {"db_id": "wrestler", "query": "SELECT Team FROM elimination GROUP BY Team HAVING COUNT(*)  >  3", "query_toks": ["SELECT", "Team", "FROM", "elimination", "GROUP", "BY", "Team", "HAVING", "COUNT", "(", "*", ")", ">", "3"], "query_toks_no_value": ["select", "team", "from", "elimination", "group", "by", "team", "having", "count", "(", "*", ")", ">", "value"], "question": "Show teams that have suffered more than three eliminations.", "question_toks": ["Show", "teams", "that", "have", "suffered", "more", "than", "three", "eliminations", "."], "guid": 2732}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | What are the first and last names of all drivers who participated in the Australian Grand Prix but not the Chinese Grand Prix?", "sql": "SELECT T3.forename ,  T3.surname FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = \"Australian Grand Prix\" EXCEPT SELECT T3.forename ,  T3.surname FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = \"Chinese Grand Prix\"", "example": {"db_id": "formula_1", "query": "SELECT T3.forename ,  T3.surname FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = \"Australian Grand Prix\" EXCEPT SELECT T3.forename ,  T3.surname FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = \"Chinese Grand Prix\"", "query_toks": ["SELECT", "T3.forename", ",", "T3.surname", "FROM", "races", "AS", "T1", "JOIN", "results", "AS", "T2", "ON", "T1.raceid", "=", "T2.raceid", "JOIN", "drivers", "AS", "T3", "ON", "T2.driverid", "=", "T3.driverid", "WHERE", "T1.name", "=", "``", "Australian", "Grand", "Prix", "''", "EXCEPT", "SELECT", "T3.forename", ",", "T3.surname", "FROM", "races", "AS", "T1", "JOIN", "results", "AS", "T2", "ON", "T1.raceid", "=", "T2.raceid", "JOIN", "drivers", "AS", "T3", "ON", "T2.driverid", "=", "T3.driverid", "WHERE", "T1.name", "=", "``", "Chinese", "Grand", "Prix", "''"], "query_toks_no_value": ["select", "t3", ".", "forename", ",", "t3", ".", "surname", "from", "races", "as", "t1", "join", "results", "as", "t2", "on", "t1", ".", "raceid", "=", "t2", ".", "raceid", "join", "drivers", "as", "t3", "on", "t2", ".", "driverid", "=", "t3", ".", "driverid", "where", "t1", ".", "name", "=", "value", "except", "select", "t3", ".", "forename", ",", "t3", ".", "surname", "from", "races", "as", "t1", "join", "results", "as", "t2", "on", "t1", ".", "raceid", "=", "t2", ".", "raceid", "join", "drivers", "as", "t3", "on", "t2", ".", "driverid", "=", "t3", ".", "driverid", "where", "t1", ".", "name", "=", "value"], "question": "What are the first and last names of all drivers who participated in the Australian Grand Prix but not the Chinese Grand Prix?", "question_toks": ["What", "are", "the", "first", "and", "last", "names", "of", "all", "drivers", "who", "participated", "in", "the", "Australian", "Grand", "Prix", "but", "not", "the", "Chinese", "Grand", "Prix", "?"], "guid": 2733}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | What is the id and first name of all the drivers who participated in the Australian Grand Prix and the Chinese Grand Prix?", "sql": "SELECT T2.driverid ,  T3.forename FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid  =  T3.driverid WHERE T1.name = \"Australian Grand Prix\" INTERSECT SELECT T2.driverid ,  T3.forename FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid  =  T3.driverid WHERE T1.name = \"Chinese Grand Prix\"", "example": {"db_id": "formula_1", "query": "SELECT T2.driverid ,  T3.forename FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid  =  T3.driverid WHERE T1.name = \"Australian Grand Prix\" INTERSECT SELECT T2.driverid ,  T3.forename FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid  =  T3.driverid WHERE T1.name = \"Chinese Grand Prix\"", "query_toks": ["SELECT", "T2.driverid", ",", "T3.forename", "FROM", "races", "AS", "T1", "JOIN", "results", "AS", "T2", "ON", "T1.raceid", "=", "T2.raceid", "JOIN", "drivers", "AS", "T3", "ON", "T2.driverid", "=", "T3.driverid", "WHERE", "T1.name", "=", "``", "Australian", "Grand", "Prix", "''", "INTERSECT", "SELECT", "T2.driverid", ",", "T3.forename", "FROM", "races", "AS", "T1", "JOIN", "results", "AS", "T2", "ON", "T1.raceid", "=", "T2.raceid", "JOIN", "drivers", "AS", "T3", "ON", "T2.driverid", "=", "T3.driverid", "WHERE", "T1.name", "=", "``", "Chinese", "Grand", "Prix", "''"], "query_toks_no_value": ["select", "t2", ".", "driverid", ",", "t3", ".", "forename", "from", "races", "as", "t1", "join", "results", "as", "t2", "on", "t1", ".", "raceid", "=", "t2", ".", "raceid", "join", "drivers", "as", "t3", "on", "t2", ".", "driverid", "=", "t3", ".", "driverid", "where", "t1", ".", "name", "=", "value", "intersect", "select", "t2", ".", "driverid", ",", "t3", ".", "forename", "from", "races", "as", "t1", "join", "results", "as", "t2", "on", "t1", ".", "raceid", "=", "t2", ".", "raceid", "join", "drivers", "as", "t3", "on", "t2", ".", "driverid", "=", "t3", ".", "driverid", "where", "t1", ".", "name", "=", "value"], "question": "What is the id and first name of all the drivers who participated in the Australian Grand Prix and the Chinese Grand Prix?", "question_toks": ["What", "is", "the", "id", "and", "first", "name", "of", "all", "the", "drivers", "who", "participated", "in", "the", "Australian", "Grand", "Prix", "and", "the", "Chinese", "Grand", "Prix", "?"], "guid": 2734}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | For each zip code, return how many times max wind speed reached 25?", "sql": "SELECT zip_code , count(*) FROM weather WHERE max_wind_Speed_mph  >=  25 GROUP BY zip_code", "example": {"db_id": "bike_1", "query": "SELECT zip_code , count(*) FROM weather WHERE max_wind_Speed_mph  >=  25 GROUP BY zip_code", "query_toks": ["SELECT", "zip_code", ",", "count", "(", "*", ")", "FROM", "weather", "WHERE", "max_wind_Speed_mph", ">", "=", "25", "GROUP", "BY", "zip_code"], "query_toks_no_value": ["select", "zip_code", ",", "count", "(", "*", ")", "from", "weather", "where", "max_wind_speed_mph", ">", "=", "value", "group", "by", "zip_code"], "question": "For each zip code, return how many times max wind speed reached 25?", "question_toks": ["For", "each", "zip", "code", ",", "return", "how", "many", "times", "max", "wind", "speed", "reached", "25", "?"], "guid": 2735}}
{"text": "swimmer: ID, name, Nationality, meter_100, meter_200, meter_300, meter_400, meter_500, meter_600, meter_700; stadium: ID, name, Capacity, City, Country, Opening_year; event: ID, Name, Stadium_ID, Year; record: ID, Result, Swimmer_ID, Event_ID | Find the name of the stadium that has the maximum capacity.", "sql": "SELECT name FROM stadium ORDER BY capacity DESC LIMIT 1", "example": {"db_id": "swimming", "query": "SELECT name FROM stadium ORDER BY capacity DESC LIMIT 1", "query_toks": ["SELECT", "name", "FROM", "stadium", "ORDER", "BY", "capacity", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "name", "from", "stadium", "order", "by", "capacity", "desc", "limit", "value"], "question": "Find the name of the stadium that has the maximum capacity.", "question_toks": ["Find", "the", "name", "of", "the", "stadium", "that", "has", "the", "maximum", "capacity", "."], "guid": 2736}}
{"text": "club: Club_ID, name, Region, Start_year; club_rank: Rank, Club_ID, Gold, Silver, Bronze, Total; player: Player_ID, name, Position, Club_ID, Apps, Tries, Goals, Points; competition: Competition_ID, Year, Competition_type, Country; competition_result: Competition_ID, Club_ID_1, Club_ID_2, Score | What are the names of all the clubs ordered in descending alphabetical order?", "sql": "SELECT name FROM club ORDER BY name DESC", "example": {"db_id": "sports_competition", "query": "SELECT name FROM club ORDER BY name DESC", "query_toks": ["SELECT", "name", "FROM", "club", "ORDER", "BY", "name", "DESC"], "query_toks_no_value": ["select", "name", "from", "club", "order", "by", "name", "desc"], "question": "What are the names of all the clubs ordered in descending alphabetical order?", "question_toks": ["What", "are", "the", "names", "of", "all", "the", "clubs", "ordered", "in", "descending", "alphabetical", "order", "?"], "guid": 2737}}
{"text": "club: Club_ID, name, Region, Start_year; club_rank: Rank, Club_ID, Gold, Silver, Bronze, Total; player: Player_ID, name, Position, Club_ID, Apps, Tries, Goals, Points; competition: Competition_ID, Year, Competition_type, Country; competition_result: Competition_ID, Club_ID_1, Club_ID_2, Score | For each position, what is the average number of points for players in that position?", "sql": "SELECT POSITION ,  avg(Points) FROM player GROUP BY POSITION", "example": {"db_id": "sports_competition", "query": "SELECT POSITION ,  avg(Points) FROM player GROUP BY POSITION", "query_toks": ["SELECT", "POSITION", ",", "avg", "(", "Points", ")", "FROM", "player", "GROUP", "BY", "POSITION"], "query_toks_no_value": ["select", "position", ",", "avg", "(", "points", ")", "from", "player", "group", "by", "position"], "question": "For each position, what is the average number of points for players in that position?", "question_toks": ["For", "each", "position", ",", "what", "is", "the", "average", "number", "of", "points", "for", "players", "in", "that", "position", "?"], "guid": 2738}}
{"text": "race: Race_ID, Name, Class, Date, Track_ID; track: Track_ID, Name, Location, Seating, Year_Opened | Show the name, location, open year for all tracks with a seating higher than the average.", "sql": "SELECT name ,  LOCATION ,  year_opened FROM track WHERE seating  >  (SELECT avg(seating) FROM track)", "example": {"db_id": "race_track", "query": "SELECT name ,  LOCATION ,  year_opened FROM track WHERE seating  >  (SELECT avg(seating) FROM track)", "query_toks": ["SELECT", "name", ",", "LOCATION", ",", "year_opened", "FROM", "track", "WHERE", "seating", ">", "(", "SELECT", "avg", "(", "seating", ")", "FROM", "track", ")"], "query_toks_no_value": ["select", "name", ",", "location", ",", "year_opened", "from", "track", "where", "seating", ">", "(", "select", "avg", "(", "seating", ")", "from", "track", ")"], "question": "Show the name, location, open year for all tracks with a seating higher than the average.", "question_toks": ["Show", "the", "name", ",", "location", ",", "open", "year", "for", "all", "tracks", "with", "a", "seating", "higher", "than", "the", "average", "."], "guid": 2739}}
{"text": "poker_player: Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings; people: People_ID, Nationality, Name, Birth_Date, Height | Return the nationalities for which there are two or more people.", "sql": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2", "example": {"db_id": "poker_player", "query": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2", "query_toks": ["SELECT", "Nationality", "FROM", "people", "GROUP", "BY", "Nationality", "HAVING", "COUNT", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "nationality", "from", "people", "group", "by", "nationality", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "Return the nationalities for which there are two or more people.", "question_toks": ["Return", "the", "nationalities", "for", "which", "there", "are", "two", "or", "more", "people", "."], "guid": 2740}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | Find the distinct driver id and the stop number of all drivers that have a shorter pit stop duration than some drivers in the race with id 841.", "sql": "SELECT DISTINCT driverid ,  STOP FROM pitstops WHERE duration  <  (SELECT max(duration) FROM pitstops WHERE raceid  =  841)", "example": {"db_id": "formula_1", "query": "SELECT DISTINCT driverid ,  STOP FROM pitstops WHERE duration  <  (SELECT max(duration) FROM pitstops WHERE raceid  =  841)", "query_toks": ["SELECT", "DISTINCT", "driverid", ",", "STOP", "FROM", "pitstops", "WHERE", "duration", "<", "(", "SELECT", "max", "(", "duration", ")", "FROM", "pitstops", "WHERE", "raceid", "=", "841", ")"], "query_toks_no_value": ["select", "distinct", "driverid", ",", "stop", "from", "pitstops", "where", "duration", "<", "(", "select", "max", "(", "duration", ")", "from", "pitstops", "where", "raceid", "=", "value", ")"], "question": "Find the distinct driver id and the stop number of all drivers that have a shorter pit stop duration than some drivers in the race with id 841.", "question_toks": ["Find", "the", "distinct", "driver", "id", "and", "the", "stop", "number", "of", "all", "drivers", "that", "have", "a", "shorter", "pit", "stop", "duration", "than", "some", "drivers", "in", "the", "race", "with", "id", "841", "."], "guid": 2741}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | For each city, what is the highest latitude for its stations?", "sql": "SELECT city ,  max(lat) FROM station GROUP BY city", "example": {"db_id": "bike_1", "query": "SELECT city ,  max(lat) FROM station GROUP BY city", "query_toks": ["SELECT", "city", ",", "max", "(", "lat", ")", "FROM", "station", "GROUP", "BY", "city"], "query_toks_no_value": ["select", "city", ",", "max", "(", "lat", ")", "from", "station", "group", "by", "city"], "question": "For each city, what is the highest latitude for its stations?", "question_toks": ["For", "each", "city", ",", "what", "is", "the", "highest", "latitude", "for", "its", "stations", "?"], "guid": 2742}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | How many students, on average, does each college have enrolled?", "sql": "SELECT avg(enr) FROM College", "example": {"db_id": "soccer_2", "query": "SELECT avg(enr) FROM College", "query_toks": ["SELECT", "avg", "(", "enr", ")", "FROM", "College"], "query_toks_no_value": ["select", "avg", "(", "enr", ")", "from", "college"], "question": "How many students, on average, does each college have enrolled?", "question_toks": ["How", "many", "students", ",", "on", "average", ",", "does", "each", "college", "have", "enrolled", "?"], "guid": 2743}}
{"text": "poker_player: Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings; people: People_ID, Nationality, Name, Birth_Date, Height | What are the names and birth dates of people, ordered by their names in alphabetical order?", "sql": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC", "example": {"db_id": "poker_player", "query": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC", "query_toks": ["SELECT", "Name", ",", "Birth_Date", "FROM", "people", "ORDER", "BY", "Name", "ASC"], "query_toks_no_value": ["select", "name", ",", "birth_date", "from", "people", "order", "by", "name", "asc"], "question": "What are the names and birth dates of people, ordered by their names in alphabetical order?", "question_toks": ["What", "are", "the", "names", "and", "birth", "dates", "of", "people", ",", "ordered", "by", "their", "names", "in", "alphabetical", "order", "?"], "guid": 2744}}
{"text": "club: Club_ID, name, Region, Start_year; club_rank: Rank, Club_ID, Gold, Silver, Bronze, Total; player: Player_ID, name, Position, Club_ID, Apps, Tries, Goals, Points; competition: Competition_ID, Year, Competition_type, Country; competition_result: Competition_ID, Club_ID_1, Club_ID_2, Score | How many different position for players are listed?", "sql": "SELECT count(DISTINCT POSITION) FROM player", "example": {"db_id": "sports_competition", "query": "SELECT count(DISTINCT POSITION) FROM player", "query_toks": ["SELECT", "count", "(", "DISTINCT", "POSITION", ")", "FROM", "player"], "query_toks_no_value": ["select", "count", "(", "distinct", "position", ")", "from", "player"], "question": "How many different position for players are listed?", "question_toks": ["How", "many", "different", "position", "for", "players", "are", "listed", "?"], "guid": 2745}}
{"text": "college: College_ID, Name, Leader_Name, College_Location; member: Member_ID, Name, Country, College_ID; round: Round_ID, Member_ID, Decoration_Theme, Rank_in_Round | List the names of members who did not participate in any round.", "sql": "SELECT Name FROM member WHERE Member_ID NOT IN (SELECT Member_ID FROM round)", "example": {"db_id": "decoration_competition", "query": "SELECT Name FROM member WHERE Member_ID NOT IN (SELECT Member_ID FROM round)", "query_toks": ["SELECT", "Name", "FROM", "member", "WHERE", "Member_ID", "NOT", "IN", "(", "SELECT", "Member_ID", "FROM", "round", ")"], "query_toks_no_value": ["select", "name", "from", "member", "where", "member_id", "not", "in", "(", "select", "member_id", "from", "round", ")"], "question": "List the names of members who did not participate in any round.", "question_toks": ["List", "the", "names", "of", "members", "who", "did", "not", "participate", "in", "any", "round", "."], "guid": 2746}}
{"text": "body_builder: Body_Builder_ID, People_ID, Snatch, Clean_Jerk, Total; people: People_ID, Name, Height, Weight, Birth_Date, Birth_Place | What is the name of the body builder with the greatest body weight?", "sql": "SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Weight DESC LIMIT 1", "example": {"db_id": "body_builder", "query": "SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Weight DESC LIMIT 1", "query_toks": ["SELECT", "T2.Name", "FROM", "body_builder", "AS", "T1", "JOIN", "people", "AS", "T2", "ON", "T1.People_ID", "=", "T2.People_ID", "ORDER", "BY", "T2.Weight", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "body_builder", "as", "t1", "join", "people", "as", "t2", "on", "t1", ".", "people_id", "=", "t2", ".", "people_id", "order", "by", "t2", ".", "weight", "desc", "limit", "value"], "question": "What is the name of the body builder with the greatest body weight?", "question_toks": ["What", "is", "the", "name", "of", "the", "body", "builder", "with", "the", "greatest", "body", "weight", "?"], "guid": 2747}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | What are the dates with a maximum temperature higher than 85?", "sql": "SELECT date FROM weather WHERE max_temperature_f  >  85", "example": {"db_id": "bike_1", "query": "SELECT date FROM weather WHERE max_temperature_f  >  85", "query_toks": ["SELECT", "date", "FROM", "weather", "WHERE", "max_temperature_f", ">", "85"], "query_toks_no_value": ["select", "date", "from", "weather", "where", "max_temperature_f", ">", "value"], "question": "What are the dates with a maximum temperature higher than 85?", "question_toks": ["What", "are", "the", "dates", "with", "a", "maximum", "temperature", "higher", "than", "85", "?"], "guid": 2748}}
{"text": "wrestler: Wrestler_ID, Name, Reign, Days_held, Location, Event; Elimination: Elimination_ID, Wrestler_ID, Team, Eliminated_By, Elimination_Move, Time | What are the teams that have both wrestlers eliminated by Orton and wrestlers eliminated by Benjamin?", "sql": "SELECT Team FROM Elimination WHERE Eliminated_By  =  \"Orton\" INTERSECT SELECT Team FROM Elimination WHERE Eliminated_By  =  \"Benjamin\"", "example": {"db_id": "wrestler", "query": "SELECT Team FROM Elimination WHERE Eliminated_By  =  \"Orton\" INTERSECT SELECT Team FROM Elimination WHERE Eliminated_By  =  \"Benjamin\"", "query_toks": ["SELECT", "Team", "FROM", "Elimination", "WHERE", "Eliminated_By", "=", "``", "Orton", "''", "INTERSECT", "SELECT", "Team", "FROM", "Elimination", "WHERE", "Eliminated_By", "=", "``", "Benjamin", "''"], "query_toks_no_value": ["select", "team", "from", "elimination", "where", "eliminated_by", "=", "value", "intersect", "select", "team", "from", "elimination", "where", "eliminated_by", "=", "value"], "question": "What are the teams that have both wrestlers eliminated by Orton and wrestlers eliminated by Benjamin?", "question_toks": ["What", "are", "the", "teams", "that", "have", "both", "wrestlers", "eliminated", "by", "Orton", "and", "wrestlers", "eliminated", "by", "Benjamin", "?"], "guid": 2749}}
{"text": "swimmer: ID, name, Nationality, meter_100, meter_200, meter_300, meter_400, meter_500, meter_600, meter_700; stadium: ID, name, Capacity, City, Country, Opening_year; event: ID, Name, Stadium_ID, Year; record: ID, Result, Swimmer_ID, Event_ID | What is the name of the stadium which held the most events?", "sql": "SELECT t1.name FROM stadium AS t1 JOIN event AS t2 ON t1.id  =  t2.stadium_id GROUP BY t2.stadium_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "swimming", "query": "SELECT t1.name FROM stadium AS t1 JOIN event AS t2 ON t1.id  =  t2.stadium_id GROUP BY t2.stadium_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "t1.name", "FROM", "stadium", "AS", "t1", "JOIN", "event", "AS", "t2", "ON", "t1.id", "=", "t2.stadium_id", "GROUP", "BY", "t2.stadium_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "stadium", "as", "t1", "join", "event", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "stadium_id", "group", "by", "t2", ".", "stadium_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the name of the stadium which held the most events?", "question_toks": ["What", "is", "the", "name", "of", "the", "stadium", "which", "held", "the", "most", "events", "?"], "guid": 2750}}
{"text": "club: Club_ID, name, Region, Start_year; club_rank: Rank, Club_ID, Gold, Silver, Bronze, Total; player: Player_ID, name, Position, Club_ID, Apps, Tries, Goals, Points; competition: Competition_ID, Year, Competition_type, Country; competition_result: Competition_ID, Club_ID_1, Club_ID_2, Score | What are the types of every competition and in which countries are they located?", "sql": "SELECT Competition_type ,  Country FROM competition", "example": {"db_id": "sports_competition", "query": "SELECT Competition_type ,  Country FROM competition", "query_toks": ["SELECT", "Competition_type", ",", "Country", "FROM", "competition"], "query_toks_no_value": ["select", "competition_type", ",", "country", "from", "competition"], "question": "What are the types of every competition and in which countries are they located?", "question_toks": ["What", "are", "the", "types", "of", "every", "competition", "and", "in", "which", "countries", "are", "they", "located", "?"], "guid": 2751}}
{"text": "club: Club_ID, name, Region, Start_year; club_rank: Rank, Club_ID, Gold, Silver, Bronze, Total; player: Player_ID, name, Position, Club_ID, Apps, Tries, Goals, Points; competition: Competition_ID, Year, Competition_type, Country; competition_result: Competition_ID, Club_ID_1, Club_ID_2, Score | What are the positions of players whose average number of points scored by that position is larger than 20?", "sql": "SELECT POSITION FROM player GROUP BY name HAVING avg(Points)  >=  20", "example": {"db_id": "sports_competition", "query": "SELECT POSITION FROM player GROUP BY name HAVING avg(Points)  >=  20", "query_toks": ["SELECT", "POSITION", "FROM", "player", "GROUP", "BY", "name", "HAVING", "avg", "(", "Points", ")", ">", "=", "20"], "query_toks_no_value": ["select", "position", "from", "player", "group", "by", "name", "having", "avg", "(", "points", ")", ">", "=", "value"], "question": "What are the positions of players whose average number of points scored by that position is larger than 20?", "question_toks": ["What", "are", "the", "positions", "of", "players", "whose", "average", "number", "of", "points", "scored", "by", "that", "position", "is", "larger", "than", "20", "?"], "guid": 2752}}
{"text": "club: Club_ID, name, Region, Start_year; club_rank: Rank, Club_ID, Gold, Silver, Bronze, Total; player: Player_ID, name, Position, Club_ID, Apps, Tries, Goals, Points; competition: Competition_ID, Year, Competition_type, Country; competition_result: Competition_ID, Club_ID_1, Club_ID_2, Score | What is the total number of clubs?", "sql": "SELECT count(*) FROM club", "example": {"db_id": "sports_competition", "query": "SELECT count(*) FROM club", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "club"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "club"], "question": "What is the total number of clubs?", "question_toks": ["What", "is", "the", "total", "number", "of", "clubs", "?"], "guid": 2753}}
{"text": "poker_player: Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings; people: People_ID, Nationality, Name, Birth_Date, Height | List the earnings of poker players in descending order.", "sql": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC", "example": {"db_id": "poker_player", "query": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC", "query_toks": ["SELECT", "Earnings", "FROM", "poker_player", "ORDER", "BY", "Earnings", "DESC"], "query_toks_no_value": ["select", "earnings", "from", "poker_player", "order", "by", "earnings", "desc"], "question": "List the earnings of poker players in descending order.", "question_toks": ["List", "the", "earnings", "of", "poker", "players", "in", "descending", "order", "."], "guid": 2754}}
{"text": "mountain: Mountain_ID, Name, Height, Prominence, Range, Country; climber: Climber_ID, Name, Country, Time, Points, Mountain_ID | What are the names of climbers and the corresponding heights of the mountains that they climb?", "sql": "SELECT T1.Name ,  T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID", "example": {"db_id": "climbing", "query": "SELECT T1.Name ,  T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID", "query_toks": ["SELECT", "T1.Name", ",", "T2.Height", "FROM", "climber", "AS", "T1", "JOIN", "mountain", "AS", "T2", "ON", "T1.Mountain_ID", "=", "T2.Mountain_ID"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "t2", ".", "height", "from", "climber", "as", "t1", "join", "mountain", "as", "t2", "on", "t1", ".", "mountain_id", "=", "t2", ".", "mountain_id"], "question": "What are the names of climbers and the corresponding heights of the mountains that they climb?", "question_toks": ["What", "are", "the", "names", "of", "climbers", "and", "the", "corresponding", "heights", "of", "the", "mountains", "that", "they", "climb", "?"], "guid": 2755}}
{"text": "race: Race_ID, Name, Class, Date, Track_ID; track: Track_ID, Name, Location, Seating, Year_Opened | What are the classes of races that have two or more corresponding races?", "sql": "SELECT CLASS FROM race GROUP BY CLASS HAVING count(*)  >=  2", "example": {"db_id": "race_track", "query": "SELECT CLASS FROM race GROUP BY CLASS HAVING count(*)  >=  2", "query_toks": ["SELECT", "CLASS", "FROM", "race", "GROUP", "BY", "CLASS", "HAVING", "count", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "class", "from", "race", "group", "by", "class", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "What are the classes of races that have two or more corresponding races?", "question_toks": ["What", "are", "the", "classes", "of", "races", "that", "have", "two", "or", "more", "corresponding", "races", "?"], "guid": 2756}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | What are the names of all races held between 2009 and 2011?", "sql": "SELECT name FROM races WHERE YEAR BETWEEN 2009 AND 2011", "example": {"db_id": "formula_1", "query": "SELECT name FROM races WHERE YEAR BETWEEN 2009 AND 2011", "query_toks": ["SELECT", "name", "FROM", "races", "WHERE", "YEAR", "BETWEEN", "2009", "AND", "2011"], "query_toks_no_value": ["select", "name", "from", "races", "where", "year", "between", "value", "and", "value"], "question": "What are the names of all races held between 2009 and 2011?", "question_toks": ["What", "are", "the", "names", "of", "all", "races", "held", "between", "2009", "and", "2011", "?"], "guid": 2757}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | How many people have membership in the club \"Pen and Paper Gaming\"?", "sql": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Pen and Paper Gaming\"", "example": {"db_id": "club_1", "query": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Pen and Paper Gaming\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "club", "AS", "t1", "JOIN", "member_of_club", "AS", "t2", "ON", "t1.clubid", "=", "t2.clubid", "JOIN", "student", "AS", "t3", "ON", "t2.stuid", "=", "t3.stuid", "WHERE", "t1.clubname", "=", "``", "Pen", "and", "Paper", "Gaming", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "club", "as", "t1", "join", "member_of_club", "as", "t2", "on", "t1", ".", "clubid", "=", "t2", ".", "clubid", "join", "student", "as", "t3", "on", "t2", ".", "stuid", "=", "t3", ".", "stuid", "where", "t1", ".", "clubname", "=", "value"], "question": "How many people have membership in the club \"Pen and Paper Gaming\"?", "question_toks": ["How", "many", "people", "have", "membership", "in", "the", "club", "``", "Pen", "and", "Paper", "Gaming", "''", "?"], "guid": 2758}}
{"text": "country: Country_id, Country_name, Capital, Official_native_language; team: Team_id, Name; match_season: Season, Player, Position, Country, Team, Draft_Pick_Number, Draft_Class, College; player: Player_ID, Player, Years_Played, Total_WL, Singles_WL, Doubles_WL, Team | Return the positions of players on the team Ryley Goldner.", "sql": "SELECT T1.Position FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  \"Ryley Goldner\"", "example": {"db_id": "match_season", "query": "SELECT T1.Position FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  \"Ryley Goldner\"", "query_toks": ["SELECT", "T1.Position", "FROM", "match_season", "AS", "T1", "JOIN", "team", "AS", "T2", "ON", "T1.Team", "=", "T2.Team_id", "WHERE", "T2.Name", "=", "``", "Ryley", "Goldner", "''"], "query_toks_no_value": ["select", "t1", ".", "position", "from", "match_season", "as", "t1", "join", "team", "as", "t2", "on", "t1", ".", "team", "=", "t2", ".", "team_id", "where", "t2", ".", "name", "=", "value"], "question": "Return the positions of players on the team Ryley Goldner.", "question_toks": ["Return", "the", "positions", "of", "players", "on", "the", "team", "Ryley", "Goldner", "."], "guid": 2759}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | From the trip record, find the number of unique bikes.", "sql": "SELECT count(DISTINCT bike_id) FROM trip", "example": {"db_id": "bike_1", "query": "SELECT count(DISTINCT bike_id) FROM trip", "query_toks": ["SELECT", "count", "(", "DISTINCT", "bike_id", ")", "FROM", "trip"], "query_toks_no_value": ["select", "count", "(", "distinct", "bike_id", ")", "from", "trip"], "question": "From the trip record, find the number of unique bikes.", "question_toks": ["From", "the", "trip", "record", ",", "find", "the", "number", "of", "unique", "bikes", "."], "guid": 2760}}
{"text": "wrestler: Wrestler_ID, Name, Reign, Days_held, Location, Event; Elimination: Elimination_ID, Wrestler_ID, Team, Eliminated_By, Elimination_Move, Time | Which teams had more than 3 eliminations?", "sql": "SELECT Team FROM elimination GROUP BY Team HAVING COUNT(*)  >  3", "example": {"db_id": "wrestler", "query": "SELECT Team FROM elimination GROUP BY Team HAVING COUNT(*)  >  3", "query_toks": ["SELECT", "Team", "FROM", "elimination", "GROUP", "BY", "Team", "HAVING", "COUNT", "(", "*", ")", ">", "3"], "query_toks_no_value": ["select", "team", "from", "elimination", "group", "by", "team", "having", "count", "(", "*", ")", ">", "value"], "question": "Which teams had more than 3 eliminations?", "question_toks": ["Which", "teams", "had", "more", "than", "3", "eliminations", "?"], "guid": 2761}}
{"text": "wrestler: Wrestler_ID, Name, Reign, Days_held, Location, Event; Elimination: Elimination_ID, Wrestler_ID, Team, Eliminated_By, Elimination_Move, Time | List the locations that are shared by more than two wrestlers.", "sql": "SELECT LOCATION FROM wrestler GROUP BY LOCATION HAVING COUNT(*)  >  2", "example": {"db_id": "wrestler", "query": "SELECT LOCATION FROM wrestler GROUP BY LOCATION HAVING COUNT(*)  >  2", "query_toks": ["SELECT", "LOCATION", "FROM", "wrestler", "GROUP", "BY", "LOCATION", "HAVING", "COUNT", "(", "*", ")", ">", "2"], "query_toks_no_value": ["select", "location", "from", "wrestler", "group", "by", "location", "having", "count", "(", "*", ")", ">", "value"], "question": "List the locations that are shared by more than two wrestlers.", "question_toks": ["List", "the", "locations", "that", "are", "shared", "by", "more", "than", "two", "wrestlers", "."], "guid": 2762}}
{"text": "country: Country_id, Country_name, Capital, Official_native_language; team: Team_id, Name; match_season: Season, Player, Position, Country, Team, Draft_Pick_Number, Draft_Class, College; player: Player_ID, Player, Years_Played, Total_WL, Singles_WL, Doubles_WL, Team | Show the country names and the corresponding number of players.", "sql": "SELECT Country_name ,  COUNT(*) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country GROUP BY T1.Country_name", "example": {"db_id": "match_season", "query": "SELECT Country_name ,  COUNT(*) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country GROUP BY T1.Country_name", "query_toks": ["SELECT", "Country_name", ",", "COUNT", "(", "*", ")", "FROM", "country", "AS", "T1", "JOIN", "match_season", "AS", "T2", "ON", "T1.Country_id", "=", "T2.Country", "GROUP", "BY", "T1.Country_name"], "query_toks_no_value": ["select", "country_name", ",", "count", "(", "*", ")", "from", "country", "as", "t1", "join", "match_season", "as", "t2", "on", "t1", ".", "country_id", "=", "t2", ".", "country", "group", "by", "t1", ".", "country_name"], "question": "Show the country names and the corresponding number of players.", "question_toks": ["Show", "the", "country", "names", "and", "the", "corresponding", "number", "of", "players", "."], "guid": 2763}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | What are the ids of all trips that had a duration as long as the average trip duration in the zip code 94103?", "sql": "SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  94103)", "example": {"db_id": "bike_1", "query": "SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  94103)", "query_toks": ["SELECT", "id", "FROM", "trip", "WHERE", "duration", ">", "=", "(", "SELECT", "avg", "(", "duration", ")", "FROM", "trip", "WHERE", "zip_code", "=", "94103", ")"], "query_toks_no_value": ["select", "id", "from", "trip", "where", "duration", ">", "=", "(", "select", "avg", "(", "duration", ")", "from", "trip", "where", "zip_code", "=", "value", ")"], "question": "What are the ids of all trips that had a duration as long as the average trip duration in the zip code 94103?", "question_toks": ["What", "are", "the", "ids", "of", "all", "trips", "that", "had", "a", "duration", "as", "long", "as", "the", "average", "trip", "duration", "in", "the", "zip", "code", "94103", "?"], "guid": 2764}}
{"text": "body_builder: Body_Builder_ID, People_ID, Snatch, Clean_Jerk, Total; people: People_ID, Name, Height, Weight, Birth_Date, Birth_Place | List each birth place along with the number of people from there.", "sql": "SELECT Birth_Place ,  COUNT(*) FROM people GROUP BY Birth_Place", "example": {"db_id": "body_builder", "query": "SELECT Birth_Place ,  COUNT(*) FROM people GROUP BY Birth_Place", "query_toks": ["SELECT", "Birth_Place", ",", "COUNT", "(", "*", ")", "FROM", "people", "GROUP", "BY", "Birth_Place"], "query_toks_no_value": ["select", "birth_place", ",", "count", "(", "*", ")", "from", "people", "group", "by", "birth_place"], "question": "List each birth place along with the number of people from there.", "question_toks": ["List", "each", "birth", "place", "along", "with", "the", "number", "of", "people", "from", "there", "."], "guid": 2765}}
{"text": "club: Club_ID, name, Region, Start_year; club_rank: Rank, Club_ID, Gold, Silver, Bronze, Total; player: Player_ID, name, Position, Club_ID, Apps, Tries, Goals, Points; competition: Competition_ID, Year, Competition_type, Country; competition_result: Competition_ID, Club_ID_1, Club_ID_2, Score | List all club names in ascending order of start year.", "sql": "SELECT name FROM club ORDER BY Start_year ASC", "example": {"db_id": "sports_competition", "query": "SELECT name FROM club ORDER BY Start_year ASC", "query_toks": ["SELECT", "name", "FROM", "club", "ORDER", "BY", "Start_year", "ASC"], "query_toks_no_value": ["select", "name", "from", "club", "order", "by", "start_year", "asc"], "question": "List all club names in ascending order of start year.", "question_toks": ["List", "all", "club", "names", "in", "ascending", "order", "of", "start", "year", "."], "guid": 2766}}
{"text": "player: Player_ID, Sponsor_name, Player_name, Gender, Residence, Occupation, Votes, Rank; club: Club_ID, Club_name, Region, Start_year; coach: Coach_ID, Coach_name, Gender, Club_ID, Rank; player_coach: Player_ID, Coach_ID, Starting_year; match_result: Rank, Club_ID, Gold, Big_Silver, Small_Silver, Bronze, Points | What are the gender and occupation of players?", "sql": "SELECT Gender ,  Occupation FROM player", "example": {"db_id": "riding_club", "query": "SELECT Gender ,  Occupation FROM player", "query_toks": ["SELECT", "Gender", ",", "Occupation", "FROM", "player"], "query_toks_no_value": ["select", "gender", ",", "occupation", "from", "player"], "question": "What are the gender and occupation of players?", "question_toks": ["What", "are", "the", "gender", "and", "occupation", "of", "players", "?"], "guid": 2767}}
{"text": "mountain: Mountain_ID, Name, Height, Prominence, Range, Country; climber: Climber_ID, Name, Country, Time, Points, Mountain_ID | What are the names of the climbers, ordered by points descending?", "sql": "SELECT Name FROM climber ORDER BY Points DESC", "example": {"db_id": "climbing", "query": "SELECT Name FROM climber ORDER BY Points DESC", "query_toks": ["SELECT", "Name", "FROM", "climber", "ORDER", "BY", "Points", "DESC"], "query_toks_no_value": ["select", "name", "from", "climber", "order", "by", "points", "desc"], "question": "What are the names of the climbers, ordered by points descending?", "question_toks": ["What", "are", "the", "names", "of", "the", "climbers", ",", "ordered", "by", "points", "descending", "?"], "guid": 2768}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | What is the name of the race that occurred most recently?", "sql": "SELECT name FROM races ORDER BY date DESC LIMIT 1", "example": {"db_id": "formula_1", "query": "SELECT name FROM races ORDER BY date DESC LIMIT 1", "query_toks": ["SELECT", "name", "FROM", "races", "ORDER", "BY", "date", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "name", "from", "races", "order", "by", "date", "desc", "limit", "value"], "question": "What is the name of the race that occurred most recently?", "question_toks": ["What", "is", "the", "name", "of", "the", "race", "that", "occurred", "most", "recently", "?"], "guid": 2769}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | Find the location of the club \"Pen and Paper Gaming\".", "sql": "SELECT clublocation FROM club WHERE clubname  =  \"Pen and Paper Gaming\"", "example": {"db_id": "club_1", "query": "SELECT clublocation FROM club WHERE clubname  =  \"Pen and Paper Gaming\"", "query_toks": ["SELECT", "clublocation", "FROM", "club", "WHERE", "clubname", "=", "``", "Pen", "and", "Paper", "Gaming", "''"], "query_toks_no_value": ["select", "clublocation", "from", "club", "where", "clubname", "=", "value"], "question": "Find the location of the club \"Pen and Paper Gaming\".", "question_toks": ["Find", "the", "location", "of", "the", "club", "``", "Pen", "and", "Paper", "Gaming", "''", "."], "guid": 2770}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | Find the name and hours of the students whose tryout decision is yes.", "sql": "SELECT T1.pName ,  T1.HS FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'", "example": {"db_id": "soccer_2", "query": "SELECT T1.pName ,  T1.HS FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'", "query_toks": ["SELECT", "T1.pName", ",", "T1.HS", "FROM", "player", "AS", "T1", "JOIN", "tryout", "AS", "T2", "ON", "T1.pID", "=", "T2.pID", "WHERE", "T2.decision", "=", "'yes", "'"], "query_toks_no_value": ["select", "t1", ".", "pname", ",", "t1", ".", "hs", "from", "player", "as", "t1", "join", "tryout", "as", "t2", "on", "t1", ".", "pid", "=", "t2", ".", "pid", "where", "t2", ".", "decision", "=", "value"], "question": "Find the name and hours of the students whose tryout decision is yes.", "question_toks": ["Find", "the", "name", "and", "hours", "of", "the", "students", "whose", "tryout", "decision", "is", "yes", "."], "guid": 2771}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | Find the names of all races held in 2017.", "sql": "SELECT name FROM races WHERE YEAR = 2017", "example": {"db_id": "formula_1", "query": "SELECT name FROM races WHERE YEAR = 2017", "query_toks": ["SELECT", "name", "FROM", "races", "WHERE", "YEAR", "=", "2017"], "query_toks_no_value": ["select", "name", "from", "races", "where", "year", "=", "value"], "question": "Find the names of all races held in 2017.", "question_toks": ["Find", "the", "names", "of", "all", "races", "held", "in", "2017", "."], "guid": 2772}}
{"text": "mountain: Mountain_ID, Name, Height, Prominence, Range, Country; climber: Climber_ID, Name, Country, Time, Points, Mountain_ID | Show the names of mountains with height more than 5000 or prominence more than 1000.", "sql": "SELECT Name FROM mountain WHERE Height  >  5000 OR Prominence  >  1000", "example": {"db_id": "climbing", "query": "SELECT Name FROM mountain WHERE Height  >  5000 OR Prominence  >  1000", "query_toks": ["SELECT", "Name", "FROM", "mountain", "WHERE", "Height", ">", "5000", "OR", "Prominence", ">", "1000"], "query_toks_no_value": ["select", "name", "from", "mountain", "where", "height", ">", "value", "or", "prominence", ">", "value"], "question": "Show the names of mountains with height more than 5000 or prominence more than 1000.", "question_toks": ["Show", "the", "names", "of", "mountains", "with", "height", "more", "than", "5000", "or", "prominence", "more", "than", "1000", "."], "guid": 2773}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | What is the maximum fastest lap speed in race named 'Monaco Grand Prix' in 2008 ?", "sql": "SELECT max(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = \"Monaco Grand Prix\"", "example": {"db_id": "formula_1", "query": "SELECT max(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = \"Monaco Grand Prix\"", "query_toks": ["SELECT", "max", "(", "T2.fastestlapspeed", ")", "FROM", "races", "AS", "T1", "JOIN", "results", "AS", "T2", "ON", "T1.raceid", "=", "T2.raceid", "WHERE", "T1.year", "=", "2008", "AND", "T1.name", "=", "``", "Monaco", "Grand", "Prix", "''"], "query_toks_no_value": ["select", "max", "(", "t2", ".", "fastestlapspeed", ")", "from", "races", "as", "t1", "join", "results", "as", "t2", "on", "t1", ".", "raceid", "=", "t2", ".", "raceid", "where", "t1", ".", "year", "=", "value", "and", "t1", ".", "name", "=", "value"], "question": "What is the maximum fastest lap speed in race named 'Monaco Grand Prix' in 2008 ?", "question_toks": ["What", "is", "the", "maximum", "fastest", "lap", "speed", "in", "race", "named", "'Monaco", "Grand", "Prix", "'", "in", "2008", "?"], "guid": 2774}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | What are the names of the stations that are located in Palo Alto but have never been the ending point of the trips", "sql": "SELECT name FROM station WHERE city  =  \"Palo Alto\" EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  100", "example": {"db_id": "bike_1", "query": "SELECT name FROM station WHERE city  =  \"Palo Alto\" EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  100", "query_toks": ["SELECT", "name", "FROM", "station", "WHERE", "city", "=", "``", "Palo", "Alto", "''", "EXCEPT", "SELECT", "end_station_name", "FROM", "trip", "GROUP", "BY", "end_station_name", "HAVING", "count", "(", "*", ")", ">", "100"], "query_toks_no_value": ["select", "name", "from", "station", "where", "city", "=", "value", "except", "select", "end_station_name", "from", "trip", "group", "by", "end_station_name", "having", "count", "(", "*", ")", ">", "value"], "question": "What are the names of the stations that are located in Palo Alto but have never been the ending point of the trips", "question_toks": ["What", "are", "the", "names", "of", "the", "stations", "that", "are", "located", "in", "Palo", "Alto", "but", "have", "never", "been", "the", "ending", "point", "of", "the", "trips"], "guid": 2775}}
{"text": "mountain: Mountain_ID, Name, Height, Prominence, Range, Country; climber: Climber_ID, Name, Country, Time, Points, Mountain_ID | Return the maximum number of points for climbers from the United Kingdom.", "sql": "SELECT max(Points) FROM climber WHERE Country  =  \"United Kingdom\"", "example": {"db_id": "climbing", "query": "SELECT max(Points) FROM climber WHERE Country  =  \"United Kingdom\"", "query_toks": ["SELECT", "max", "(", "Points", ")", "FROM", "climber", "WHERE", "Country", "=", "``", "United", "Kingdom", "''"], "query_toks_no_value": ["select", "max", "(", "points", ")", "from", "climber", "where", "country", "=", "value"], "question": "Return the maximum number of points for climbers from the United Kingdom.", "question_toks": ["Return", "the", "maximum", "number", "of", "points", "for", "climbers", "from", "the", "United", "Kingdom", "."], "guid": 2776}}
{"text": "wrestler: Wrestler_ID, Name, Reign, Days_held, Location, Event; Elimination: Elimination_ID, Wrestler_ID, Team, Eliminated_By, Elimination_Move, Time | How many eliminations did each team have?", "sql": "SELECT Team ,  COUNT(*) FROM elimination GROUP BY Team", "example": {"db_id": "wrestler", "query": "SELECT Team ,  COUNT(*) FROM elimination GROUP BY Team", "query_toks": ["SELECT", "Team", ",", "COUNT", "(", "*", ")", "FROM", "elimination", "GROUP", "BY", "Team"], "query_toks_no_value": ["select", "team", ",", "count", "(", "*", ")", "from", "elimination", "group", "by", "team"], "question": "How many eliminations did each team have?", "question_toks": ["How", "many", "eliminations", "did", "each", "team", "have", "?"], "guid": 2777}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | How many clubs does \"Linda Smith\" have membership for?", "sql": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Linda\" AND t3.lname  =  \"Smith\"", "example": {"db_id": "club_1", "query": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Linda\" AND t3.lname  =  \"Smith\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "club", "AS", "t1", "JOIN", "member_of_club", "AS", "t2", "ON", "t1.clubid", "=", "t2.clubid", "JOIN", "student", "AS", "t3", "ON", "t2.stuid", "=", "t3.stuid", "WHERE", "t3.fname", "=", "``", "Linda", "''", "AND", "t3.lname", "=", "``", "Smith", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "club", "as", "t1", "join", "member_of_club", "as", "t2", "on", "t1", ".", "clubid", "=", "t2", ".", "clubid", "join", "student", "as", "t3", "on", "t2", ".", "stuid", "=", "t3", ".", "stuid", "where", "t3", ".", "fname", "=", "value", "and", "t3", ".", "lname", "=", "value"], "question": "How many clubs does \"Linda Smith\" have membership for?", "question_toks": ["How", "many", "clubs", "does", "``", "Linda", "Smith", "''", "have", "membership", "for", "?"], "guid": 2778}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | Find the state of the college which player Charles is attending.", "sql": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName JOIN player AS T3 ON T2.pID  =  T3.pID WHERE T3.pName  =  'Charles'", "example": {"db_id": "soccer_2", "query": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName JOIN player AS T3 ON T2.pID  =  T3.pID WHERE T3.pName  =  'Charles'", "query_toks": ["SELECT", "T1.state", "FROM", "college", "AS", "T1", "JOIN", "tryout", "AS", "T2", "ON", "T1.cName", "=", "T2.cName", "JOIN", "player", "AS", "T3", "ON", "T2.pID", "=", "T3.pID", "WHERE", "T3.pName", "=", "'Charles", "'"], "query_toks_no_value": ["select", "t1", ".", "state", "from", "college", "as", "t1", "join", "tryout", "as", "t2", "on", "t1", ".", "cname", "=", "t2", ".", "cname", "join", "player", "as", "t3", "on", "t2", ".", "pid", "=", "t3", ".", "pid", "where", "t3", ".", "pname", "=", "value"], "question": "Find the state of the college which player Charles is attending.", "question_toks": ["Find", "the", "state", "of", "the", "college", "which", "player", "Charles", "is", "attending", "."], "guid": 2779}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | What are the names of the schools with the top 3 largest class sizes?", "sql": "SELECT cName FROM college ORDER BY enr DESC LIMIT 3", "example": {"db_id": "soccer_2", "query": "SELECT cName FROM college ORDER BY enr DESC LIMIT 3", "query_toks": ["SELECT", "cName", "FROM", "college", "ORDER", "BY", "enr", "DESC", "LIMIT", "3"], "query_toks_no_value": ["select", "cname", "from", "college", "order", "by", "enr", "desc", "limit", "value"], "question": "What are the names of the schools with the top 3 largest class sizes?", "question_toks": ["What", "are", "the", "names", "of", "the", "schools", "with", "the", "top", "3", "largest", "class", "sizes", "?"], "guid": 2780}}
{"text": "gymnast: Gymnast_ID, Floor_Exercise_Points, Pommel_Horse_Points, Rings_Points, Vault_Points, Parallel_Bars_Points, Horizontal_Bar_Points, Total_Points; people: People_ID, Name, Age, Height, Hometown | What are the names of gymnasts, ordered by their heights ascending?", "sql": "SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T2.Height ASC", "example": {"db_id": "gymnast", "query": "SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T2.Height ASC", "query_toks": ["SELECT", "T2.Name", "FROM", "gymnast", "AS", "T1", "JOIN", "people", "AS", "T2", "ON", "T1.Gymnast_ID", "=", "T2.People_ID", "ORDER", "BY", "T2.Height", "ASC"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "gymnast", "as", "t1", "join", "people", "as", "t2", "on", "t1", ".", "gymnast_id", "=", "t2", ".", "people_id", "order", "by", "t2", ".", "height", "asc"], "question": "What are the names of gymnasts, ordered by their heights ascending?", "question_toks": ["What", "are", "the", "names", "of", "gymnasts", ",", "ordered", "by", "their", "heights", "ascending", "?"], "guid": 2781}}
{"text": "mountain: Mountain_ID, Name, Height, Prominence, Range, Country; climber: Climber_ID, Name, Country, Time, Points, Mountain_ID | Please show the countries and the number of climbers from each country.", "sql": "SELECT Country ,  COUNT(*) FROM climber GROUP BY Country", "example": {"db_id": "climbing", "query": "SELECT Country ,  COUNT(*) FROM climber GROUP BY Country", "query_toks": ["SELECT", "Country", ",", "COUNT", "(", "*", ")", "FROM", "climber", "GROUP", "BY", "Country"], "query_toks_no_value": ["select", "country", ",", "count", "(", "*", ")", "from", "climber", "group", "by", "country"], "question": "Please show the countries and the number of climbers from each country.", "question_toks": ["Please", "show", "the", "countries", "and", "the", "number", "of", "climbers", "from", "each", "country", "."], "guid": 2782}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | What are the dates that had the top 5 cloud cover rates? Also tell me the cloud cover rate.", "sql": "SELECT date ,  cloud_cover FROM weather ORDER BY cloud_cover DESC LIMIT 5", "example": {"db_id": "bike_1", "query": "SELECT date ,  cloud_cover FROM weather ORDER BY cloud_cover DESC LIMIT 5", "query_toks": ["SELECT", "date", ",", "cloud_cover", "FROM", "weather", "ORDER", "BY", "cloud_cover", "DESC", "LIMIT", "5"], "query_toks_no_value": ["select", "date", ",", "cloud_cover", "from", "weather", "order", "by", "cloud_cover", "desc", "limit", "value"], "question": "What are the dates that had the top 5 cloud cover rates? Also tell me the cloud cover rate.", "question_toks": ["What", "are", "the", "dates", "that", "had", "the", "top", "5", "cloud", "cover", "rates", "?", "Also", "tell", "me", "the", "cloud", "cover", "rate", "."], "guid": 2783}}
{"text": "country: Country_id, Country_name, Capital, Official_native_language; team: Team_id, Name; match_season: Season, Player, Position, Country, Team, Draft_Pick_Number, Draft_Class, College; player: Player_ID, Player, Years_Played, Total_WL, Singles_WL, Doubles_WL, Team | Who are the different players and how many years has each played?", "sql": "SELECT Player ,  Years_Played FROM player", "example": {"db_id": "match_season", "query": "SELECT Player ,  Years_Played FROM player", "query_toks": ["SELECT", "Player", ",", "Years_Played", "FROM", "player"], "query_toks_no_value": ["select", "player", ",", "years_played", "from", "player"], "question": "Who are the different players and how many years has each played?", "question_toks": ["Who", "are", "the", "different", "players", "and", "how", "many", "years", "has", "each", "played", "?"], "guid": 2784}}
{"text": "club: Club_ID, name, Region, Start_year; club_rank: Rank, Club_ID, Gold, Silver, Bronze, Total; player: Player_ID, name, Position, Club_ID, Apps, Tries, Goals, Points; competition: Competition_ID, Year, Competition_type, Country; competition_result: Competition_ID, Club_ID_1, Club_ID_2, Score | How many clubs have total medals less than 10?", "sql": "SELECT count(*) FROM club_rank WHERE Total  <  10", "example": {"db_id": "sports_competition", "query": "SELECT count(*) FROM club_rank WHERE Total  <  10", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "club_rank", "WHERE", "Total", "<", "10"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "club_rank", "where", "total", "<", "value"], "question": "How many clubs have total medals less than 10?", "question_toks": ["How", "many", "clubs", "have", "total", "medals", "less", "than", "10", "?"], "guid": 2785}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | Find the names of the clubs that have at least a member from the city with city code \"HOU\".", "sql": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.city_code  =  \"HOU\"", "example": {"db_id": "club_1", "query": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.city_code  =  \"HOU\"", "query_toks": ["SELECT", "DISTINCT", "t1.clubname", "FROM", "club", "AS", "t1", "JOIN", "member_of_club", "AS", "t2", "ON", "t1.clubid", "=", "t2.clubid", "JOIN", "student", "AS", "t3", "ON", "t2.stuid", "=", "t3.stuid", "WHERE", "t3.city_code", "=", "``", "HOU", "''"], "query_toks_no_value": ["select", "distinct", "t1", ".", "clubname", "from", "club", "as", "t1", "join", "member_of_club", "as", "t2", "on", "t1", ".", "clubid", "=", "t2", ".", "clubid", "join", "student", "as", "t3", "on", "t2", ".", "stuid", "=", "t3", ".", "stuid", "where", "t3", ".", "city_code", "=", "value"], "question": "Find the names of the clubs that have at least a member from the city with city code \"HOU\".", "question_toks": ["Find", "the", "names", "of", "the", "clubs", "that", "have", "at", "least", "a", "member", "from", "the", "city", "with", "city", "code", "``", "HOU", "''", "."], "guid": 2786}}
{"text": "club: Club_ID, name, Region, Start_year; club_rank: Rank, Club_ID, Gold, Silver, Bronze, Total; player: Player_ID, name, Position, Club_ID, Apps, Tries, Goals, Points; competition: Competition_ID, Year, Competition_type, Country; competition_result: Competition_ID, Club_ID_1, Club_ID_2, Score | What are the names of all clubs that do not have any players?", "sql": "SELECT name FROM CLub WHERE Club_ID NOT IN (SELECT Club_ID FROM player)", "example": {"db_id": "sports_competition", "query": "SELECT name FROM CLub WHERE Club_ID NOT IN (SELECT Club_ID FROM player)", "query_toks": ["SELECT", "name", "FROM", "CLub", "WHERE", "Club_ID", "NOT", "IN", "(", "SELECT", "Club_ID", "FROM", "player", ")"], "query_toks_no_value": ["select", "name", "from", "club", "where", "club_id", "not", "in", "(", "select", "club_id", "from", "player", ")"], "question": "What are the names of all clubs that do not have any players?", "question_toks": ["What", "are", "the", "names", "of", "all", "clubs", "that", "do", "not", "have", "any", "players", "?"], "guid": 2787}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | Find the last names of the members of the club \"Bootup Baltimore\".", "sql": "SELECT t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\"", "example": {"db_id": "club_1", "query": "SELECT t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\"", "query_toks": ["SELECT", "t3.lname", "FROM", "club", "AS", "t1", "JOIN", "member_of_club", "AS", "t2", "ON", "t1.clubid", "=", "t2.clubid", "JOIN", "student", "AS", "t3", "ON", "t2.stuid", "=", "t3.stuid", "WHERE", "t1.clubname", "=", "``", "Bootup", "Baltimore", "''"], "query_toks_no_value": ["select", "t3", ".", "lname", "from", "club", "as", "t1", "join", "member_of_club", "as", "t2", "on", "t1", ".", "clubid", "=", "t2", ".", "clubid", "join", "student", "as", "t3", "on", "t2", ".", "stuid", "=", "t3", ".", "stuid", "where", "t1", ".", "clubname", "=", "value"], "question": "Find the last names of the members of the club \"Bootup Baltimore\".", "question_toks": ["Find", "the", "last", "names", "of", "the", "members", "of", "the", "club", "``", "Bootup", "Baltimore", "''", "."], "guid": 2788}}
{"text": "players: player_id, first_name, last_name, hand, birth_date, country_code; matches: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank; rankings: ranking_date, ranking, player_id, ranking_points, tours | What is the best rank of losers across all matches?", "sql": "SELECT min(loser_rank) FROM matches", "example": {"db_id": "wta_1", "query": "SELECT min(loser_rank) FROM matches", "query_toks": ["SELECT", "min", "(", "loser_rank", ")", "FROM", "matches"], "query_toks_no_value": ["select", "min", "(", "loser_rank", ")", "from", "matches"], "question": "What is the best rank of losers across all matches?", "question_toks": ["What", "is", "the", "best", "rank", "of", "losers", "across", "all", "matches", "?"], "guid": 2789}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | What is the name and date of the race that occurred most recently?", "sql": "SELECT name ,  date FROM races ORDER BY date DESC LIMIT 1", "example": {"db_id": "formula_1", "query": "SELECT name ,  date FROM races ORDER BY date DESC LIMIT 1", "query_toks": ["SELECT", "name", ",", "date", "FROM", "races", "ORDER", "BY", "date", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "name", ",", "date", "from", "races", "order", "by", "date", "desc", "limit", "value"], "question": "What is the name and date of the race that occurred most recently?", "question_toks": ["What", "is", "the", "name", "and", "date", "of", "the", "race", "that", "occurred", "most", "recently", "?"], "guid": 2790}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | Where is the club \"Pen and Paper Gaming\" located?", "sql": "SELECT clublocation FROM club WHERE clubname  =  \"Pen and Paper Gaming\"", "example": {"db_id": "club_1", "query": "SELECT clublocation FROM club WHERE clubname  =  \"Pen and Paper Gaming\"", "query_toks": ["SELECT", "clublocation", "FROM", "club", "WHERE", "clubname", "=", "``", "Pen", "and", "Paper", "Gaming", "''"], "query_toks_no_value": ["select", "clublocation", "from", "club", "where", "clubname", "=", "value"], "question": "Where is the club \"Pen and Paper Gaming\" located?", "question_toks": ["Where", "is", "the", "club", "``", "Pen", "and", "Paper", "Gaming", "''", "located", "?"], "guid": 2791}}
{"text": "country: Country_id, Country_name, Capital, Official_native_language; team: Team_id, Name; match_season: Season, Player, Position, Country, Team, Draft_Pick_Number, Draft_Class, College; player: Player_ID, Player, Years_Played, Total_WL, Singles_WL, Doubles_WL, Team | What are the names of colleges that have two or more players, listed in descending alphabetical order?", "sql": "SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  2 ORDER BY College DESC", "example": {"db_id": "match_season", "query": "SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  2 ORDER BY College DESC", "query_toks": ["SELECT", "College", "FROM", "match_season", "GROUP", "BY", "College", "HAVING", "count", "(", "*", ")", ">", "=", "2", "ORDER", "BY", "College", "DESC"], "query_toks_no_value": ["select", "college", "from", "match_season", "group", "by", "college", "having", "count", "(", "*", ")", ">", "=", "value", "order", "by", "college", "desc"], "question": "What are the names of colleges that have two or more players, listed in descending alphabetical order?", "question_toks": ["What", "are", "the", "names", "of", "colleges", "that", "have", "two", "or", "more", "players", ",", "listed", "in", "descending", "alphabetical", "order", "?"], "guid": 2792}}
{"text": "race: Race_ID, Name, Class, Date, Track_ID; track: Track_ID, Name, Location, Seating, Year_Opened | Show names and seatings, ordered by seating for all tracks opened after 2000.", "sql": "SELECT name ,  seating FROM track WHERE year_opened  >  2000 ORDER BY seating", "example": {"db_id": "race_track", "query": "SELECT name ,  seating FROM track WHERE year_opened  >  2000 ORDER BY seating", "query_toks": ["SELECT", "name", ",", "seating", "FROM", "track", "WHERE", "year_opened", ">", "2000", "ORDER", "BY", "seating"], "query_toks_no_value": ["select", "name", ",", "seating", "from", "track", "where", "year_opened", ">", "value", "order", "by", "seating"], "question": "Show names and seatings, ordered by seating for all tracks opened after 2000.", "question_toks": ["Show", "names", "and", "seatings", ",", "ordered", "by", "seating", "for", "all", "tracks", "opened", "after", "2000", "."], "guid": 2793}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | How many clubs are there?", "sql": "SELECT count(*) FROM club", "example": {"db_id": "club_1", "query": "SELECT count(*) FROM club", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "club"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "club"], "question": "How many clubs are there?", "question_toks": ["How", "many", "clubs", "are", "there", "?"], "guid": 2794}}
{"text": "poker_player: Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings; people: People_ID, Nationality, Name, Birth_Date, Height | Return the names of all the poker players.", "sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID", "example": {"db_id": "poker_player", "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID", "query_toks": ["SELECT", "T1.Name", "FROM", "people", "AS", "T1", "JOIN", "poker_player", "AS", "T2", "ON", "T1.People_ID", "=", "T2.People_ID"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "people", "as", "t1", "join", "poker_player", "as", "t2", "on", "t1", ".", "people_id", "=", "t2", ".", "people_id"], "question": "Return the names of all the poker players.", "question_toks": ["Return", "the", "names", "of", "all", "the", "poker", "players", "."], "guid": 2795}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | How many members of \"Bootup Baltimore\" are older than 18?", "sql": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t3.age  >  18", "example": {"db_id": "club_1", "query": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t3.age  >  18", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "club", "AS", "t1", "JOIN", "member_of_club", "AS", "t2", "ON", "t1.clubid", "=", "t2.clubid", "JOIN", "student", "AS", "t3", "ON", "t2.stuid", "=", "t3.stuid", "WHERE", "t1.clubname", "=", "``", "Bootup", "Baltimore", "''", "AND", "t3.age", ">", "18"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "club", "as", "t1", "join", "member_of_club", "as", "t2", "on", "t1", ".", "clubid", "=", "t2", ".", "clubid", "join", "student", "as", "t3", "on", "t2", ".", "stuid", "=", "t3", ".", "stuid", "where", "t1", ".", "clubname", "=", "value", "and", "t3", ".", "age", ">", "value"], "question": "How many members of \"Bootup Baltimore\" are older than 18?", "question_toks": ["How", "many", "members", "of", "``", "Bootup", "Baltimore", "''", "are", "older", "than", "18", "?"], "guid": 2796}}
{"text": "poker_player: Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings; people: People_ID, Nationality, Name, Birth_Date, Height | What is the most common nationality of people?", "sql": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1", "example": {"db_id": "poker_player", "query": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "Nationality", "FROM", "people", "GROUP", "BY", "Nationality", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "nationality", "from", "people", "group", "by", "nationality", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the most common nationality of people?", "question_toks": ["What", "is", "the", "most", "common", "nationality", "of", "people", "?"], "guid": 2797}}
{"text": "gymnast: Gymnast_ID, Floor_Exercise_Points, Pommel_Horse_Points, Rings_Points, Vault_Points, Parallel_Bars_Points, Horizontal_Bar_Points, Total_Points; people: People_ID, Name, Age, Height, Hometown | From which hometowns did both people older than 23 and younger than 20 come from?", "sql": "SELECT Hometown FROM people WHERE Age  >  23 INTERSECT SELECT Hometown FROM people WHERE Age  <  20", "example": {"db_id": "gymnast", "query": "SELECT Hometown FROM people WHERE Age  >  23 INTERSECT SELECT Hometown FROM people WHERE Age  <  20", "query_toks": ["SELECT", "Hometown", "FROM", "people", "WHERE", "Age", ">", "23", "INTERSECT", "SELECT", "Hometown", "FROM", "people", "WHERE", "Age", "<", "20"], "query_toks_no_value": ["select", "hometown", "from", "people", "where", "age", ">", "value", "intersect", "select", "hometown", "from", "people", "where", "age", "<", "value"], "question": "From which hometowns did both people older than 23 and younger than 20 come from?", "question_toks": ["From", "which", "hometowns", "did", "both", "people", "older", "than", "23", "and", "younger", "than", "20", "come", "from", "?"], "guid": 2798}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | What are the names of all students who tried out in alphabetical order?", "sql": "SELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID ORDER BY T1.pName", "example": {"db_id": "soccer_2", "query": "SELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID ORDER BY T1.pName", "query_toks": ["SELECT", "T1.pName", "FROM", "player", "AS", "T1", "JOIN", "tryout", "AS", "T2", "ON", "T1.pID", "=", "T2.pID", "ORDER", "BY", "T1.pName"], "query_toks_no_value": ["select", "t1", ".", "pname", "from", "player", "as", "t1", "join", "tryout", "as", "t2", "on", "t1", ".", "pid", "=", "t2", ".", "pid", "order", "by", "t1", ".", "pname"], "question": "What are the names of all students who tried out in alphabetical order?", "question_toks": ["What", "are", "the", "names", "of", "all", "students", "who", "tried", "out", "in", "alphabetical", "order", "?"], "guid": 2799}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | What are the first names of the different drivers who won in position 1 as driver standing and had more than 20 points?", "sql": "SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1 AND T2.points > 20", "example": {"db_id": "formula_1", "query": "SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1 AND T2.points > 20", "query_toks": ["SELECT", "DISTINCT", "T1.forename", "FROM", "drivers", "AS", "T1", "JOIN", "driverstandings", "AS", "T2", "ON", "T1.driverid", "=", "T2.driverid", "WHERE", "T2.position", "=", "1", "AND", "T2.wins", "=", "1", "AND", "T2.points", ">", "20"], "query_toks_no_value": ["select", "distinct", "t1", ".", "forename", "from", "drivers", "as", "t1", "join", "driverstandings", "as", "t2", "on", "t1", ".", "driverid", "=", "t2", ".", "driverid", "where", "t2", ".", "position", "=", "value", "and", "t2", ".", "wins", "=", "value", "and", "t2", ".", "points", ">", "value"], "question": "What are the first names of the different drivers who won in position 1 as driver standing and had more than 20 points?", "question_toks": ["What", "are", "the", "first", "names", "of", "the", "different", "drivers", "who", "won", "in", "position", "1", "as", "driver", "standing", "and", "had", "more", "than", "20", "points", "?"], "guid": 2800}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | What are the names of stations that are located in Palo Alto city but have never been the ending point of trips more than 100 times?", "sql": "SELECT name FROM station WHERE city  =  \"Palo Alto\" EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  100", "example": {"db_id": "bike_1", "query": "SELECT name FROM station WHERE city  =  \"Palo Alto\" EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  100", "query_toks": ["SELECT", "name", "FROM", "station", "WHERE", "city", "=", "``", "Palo", "Alto", "''", "EXCEPT", "SELECT", "end_station_name", "FROM", "trip", "GROUP", "BY", "end_station_name", "HAVING", "count", "(", "*", ")", ">", "100"], "query_toks_no_value": ["select", "name", "from", "station", "where", "city", "=", "value", "except", "select", "end_station_name", "from", "trip", "group", "by", "end_station_name", "having", "count", "(", "*", ")", ">", "value"], "question": "What are the names of stations that are located in Palo Alto city but have never been the ending point of trips more than 100 times?", "question_toks": ["What", "are", "the", "names", "of", "stations", "that", "are", "located", "in", "Palo", "Alto", "city", "but", "have", "never", "been", "the", "ending", "point", "of", "trips", "more", "than", "100", "times", "?"], "guid": 2801}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | On which day and in which zip code was the min dew point lower than any day in zip code 94107?", "sql": "SELECT date ,  zip_code FROM weather WHERE min_dew_point_f  <  (SELECT min(min_dew_point_f) FROM weather WHERE zip_code  =  94107)", "example": {"db_id": "bike_1", "query": "SELECT date ,  zip_code FROM weather WHERE min_dew_point_f  <  (SELECT min(min_dew_point_f) FROM weather WHERE zip_code  =  94107)", "query_toks": ["SELECT", "date", ",", "zip_code", "FROM", "weather", "WHERE", "min_dew_point_f", "<", "(", "SELECT", "min", "(", "min_dew_point_f", ")", "FROM", "weather", "WHERE", "zip_code", "=", "94107", ")"], "query_toks_no_value": ["select", "date", ",", "zip_code", "from", "weather", "where", "min_dew_point_f", "<", "(", "select", "min", "(", "min_dew_point_f", ")", "from", "weather", "where", "zip_code", "=", "value", ")"], "question": "On which day and in which zip code was the min dew point lower than any day in zip code 94107?", "question_toks": ["On", "which", "day", "and", "in", "which", "zip", "code", "was", "the", "min", "dew", "point", "lower", "than", "any", "day", "in", "zip", "code", "94107", "?"], "guid": 2802}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | How many states have a college with more students than average?", "sql": "SELECT count(DISTINCT state) FROM college WHERE enr  >  (SELECT avg(enr) FROM college)", "example": {"db_id": "soccer_2", "query": "SELECT count(DISTINCT state) FROM college WHERE enr  >  (SELECT avg(enr) FROM college)", "query_toks": ["SELECT", "count", "(", "DISTINCT", "state", ")", "FROM", "college", "WHERE", "enr", ">", "(", "SELECT", "avg", "(", "enr", ")", "FROM", "college", ")"], "query_toks_no_value": ["select", "count", "(", "distinct", "state", ")", "from", "college", "where", "enr", ">", "(", "select", "avg", "(", "enr", ")", "from", "college", ")"], "question": "How many states have a college with more students than average?", "question_toks": ["How", "many", "states", "have", "a", "college", "with", "more", "students", "than", "average", "?"], "guid": 2803}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | What is the total number of students enrolled in schools without any goalies?", "sql": "SELECT sum(enr) FROM college WHERE cName NOT IN (SELECT cName FROM tryout WHERE pPos  =  \"goalie\")", "example": {"db_id": "soccer_2", "query": "SELECT sum(enr) FROM college WHERE cName NOT IN (SELECT cName FROM tryout WHERE pPos  =  \"goalie\")", "query_toks": ["SELECT", "sum", "(", "enr", ")", "FROM", "college", "WHERE", "cName", "NOT", "IN", "(", "SELECT", "cName", "FROM", "tryout", "WHERE", "pPos", "=", "``", "goalie", "''", ")"], "query_toks_no_value": ["select", "sum", "(", "enr", ")", "from", "college", "where", "cname", "not", "in", "(", "select", "cname", "from", "tryout", "where", "ppos", "=", "value", ")"], "question": "What is the total number of students enrolled in schools without any goalies?", "question_toks": ["What", "is", "the", "total", "number", "of", "students", "enrolled", "in", "schools", "without", "any", "goalies", "?"], "guid": 2804}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | What are the names of the states that have some college students playing in the positions of goalie and mid-field?", "sql": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie' INTERSECT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid'", "example": {"db_id": "soccer_2", "query": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie' INTERSECT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid'", "query_toks": ["SELECT", "T1.state", "FROM", "college", "AS", "T1", "JOIN", "tryout", "AS", "T2", "ON", "T1.cName", "=", "T2.cName", "WHERE", "T2.pPos", "=", "'goalie", "'", "INTERSECT", "SELECT", "T1.state", "FROM", "college", "AS", "T1", "JOIN", "tryout", "AS", "T2", "ON", "T1.cName", "=", "T2.cName", "WHERE", "T2.pPos", "=", "'mid", "'"], "query_toks_no_value": ["select", "t1", ".", "state", "from", "college", "as", "t1", "join", "tryout", "as", "t2", "on", "t1", ".", "cname", "=", "t2", ".", "cname", "where", "t2", ".", "ppos", "=", "value", "intersect", "select", "t1", ".", "state", "from", "college", "as", "t1", "join", "tryout", "as", "t2", "on", "t1", ".", "cname", "=", "t2", ".", "cname", "where", "t2", ".", "ppos", "=", "value"], "question": "What are the names of the states that have some college students playing in the positions of goalie and mid-field?", "question_toks": ["What", "are", "the", "names", "of", "the", "states", "that", "have", "some", "college", "students", "playing", "in", "the", "positions", "of", "goalie", "and", "mid-field", "?"], "guid": 2805}}
{"text": "body_builder: Body_Builder_ID, People_ID, Snatch, Clean_Jerk, Total; people: People_ID, Name, Height, Weight, Birth_Date, Birth_Place | What are the birth date and birth place of the body builder with the highest total points?", "sql": "SELECT T2.Birth_Date ,  T2.Birth_Place FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Total DESC LIMIT 1", "example": {"db_id": "body_builder", "query": "SELECT T2.Birth_Date ,  T2.Birth_Place FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Total DESC LIMIT 1", "query_toks": ["SELECT", "T2.Birth_Date", ",", "T2.Birth_Place", "FROM", "body_builder", "AS", "T1", "JOIN", "people", "AS", "T2", "ON", "T1.People_ID", "=", "T2.People_ID", "ORDER", "BY", "T1.Total", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "birth_date", ",", "t2", ".", "birth_place", "from", "body_builder", "as", "t1", "join", "people", "as", "t2", "on", "t1", ".", "people_id", "=", "t2", ".", "people_id", "order", "by", "t1", ".", "total", "desc", "limit", "value"], "question": "What are the birth date and birth place of the body builder with the highest total points?", "question_toks": ["What", "are", "the", "birth", "date", "and", "birth", "place", "of", "the", "body", "builder", "with", "the", "highest", "total", "points", "?"], "guid": 2806}}
{"text": "basketball_match: Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home; university: School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference | What are the all games score and location of the school called Clemson?", "sql": "SELECT t2.All_Games ,  t1.location FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE team_name  =  'Clemson'", "example": {"db_id": "university_basketball", "query": "SELECT t2.All_Games ,  t1.location FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE team_name  =  'Clemson'", "query_toks": ["SELECT", "t2.All_Games", ",", "t1.location", "FROM", "university", "AS", "t1", "JOIN", "basketball_match", "AS", "t2", "ON", "t1.school_id", "=", "t2.school_id", "WHERE", "team_name", "=", "'Clemson", "'"], "query_toks_no_value": ["select", "t2", ".", "all_games", ",", "t1", ".", "location", "from", "university", "as", "t1", "join", "basketball_match", "as", "t2", "on", "t1", ".", "school_id", "=", "t2", ".", "school_id", "where", "team_name", "=", "value"], "question": "What are the all games score and location of the school called Clemson?", "question_toks": ["What", "are", "the", "all", "games", "score", "and", "location", "of", "the", "school", "called", "Clemson", "?"], "guid": 2807}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | Which trip started from the station with the largest dock count? Give me the trip id.", "sql": "SELECT T1.id FROM trip AS T1 JOIN station AS T2 ON T1.start_station_id  =  T2.id ORDER BY T2.dock_count DESC LIMIT 1", "example": {"db_id": "bike_1", "query": "SELECT T1.id FROM trip AS T1 JOIN station AS T2 ON T1.start_station_id  =  T2.id ORDER BY T2.dock_count DESC LIMIT 1", "query_toks": ["SELECT", "T1.id", "FROM", "trip", "AS", "T1", "JOIN", "station", "AS", "T2", "ON", "T1.start_station_id", "=", "T2.id", "ORDER", "BY", "T2.dock_count", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "id", "from", "trip", "as", "t1", "join", "station", "as", "t2", "on", "t1", ".", "start_station_id", "=", "t2", ".", "id", "order", "by", "t2", ".", "dock_count", "desc", "limit", "value"], "question": "Which trip started from the station with the largest dock count? Give me the trip id.", "question_toks": ["Which", "trip", "started", "from", "the", "station", "with", "the", "largest", "dock", "count", "?", "Give", "me", "the", "trip", "id", "."], "guid": 2808}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | Find the name and training hours of players whose hours are below 1500.", "sql": "SELECT pName ,  HS FROM Player WHERE HS  <  1500", "example": {"db_id": "soccer_2", "query": "SELECT pName ,  HS FROM Player WHERE HS  <  1500", "query_toks": ["SELECT", "pName", ",", "HS", "FROM", "Player", "WHERE", "HS", "<", "1500"], "query_toks_no_value": ["select", "pname", ",", "hs", "from", "player", "where", "hs", "<", "value"], "question": "Find the name and training hours of players whose hours are below 1500.", "question_toks": ["Find", "the", "name", "and", "training", "hours", "of", "players", "whose", "hours", "are", "below", "1500", "."], "guid": 2809}}
{"text": "country: Country_id, Country_name, Capital, Official_native_language; team: Team_id, Name; match_season: Season, Player, Position, Country, Team, Draft_Pick_Number, Draft_Class, College; player: Player_ID, Player, Years_Played, Total_WL, Singles_WL, Doubles_WL, Team | Show the name of colleges that have at least two players in descending alphabetical order.", "sql": "SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  2 ORDER BY College DESC", "example": {"db_id": "match_season", "query": "SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  2 ORDER BY College DESC", "query_toks": ["SELECT", "College", "FROM", "match_season", "GROUP", "BY", "College", "HAVING", "count", "(", "*", ")", ">", "=", "2", "ORDER", "BY", "College", "DESC"], "query_toks_no_value": ["select", "college", "from", "match_season", "group", "by", "college", "having", "count", "(", "*", ")", ">", "=", "value", "order", "by", "college", "desc"], "question": "Show the name of colleges that have at least two players in descending alphabetical order.", "question_toks": ["Show", "the", "name", "of", "colleges", "that", "have", "at", "least", "two", "players", "in", "descending", "alphabetical", "order", "."], "guid": 2810}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | How many schools have some students playing in goalie and mid positions.", "sql": "SELECT COUNT(*) FROM (SELECT cName FROM  tryout WHERE pPos  =  'goalie' INTERSECT SELECT cName FROM  tryout WHERE pPos  =  'mid')", "example": {"db_id": "soccer_2", "query": "SELECT COUNT(*) FROM (SELECT cName FROM  tryout WHERE pPos  =  'goalie' INTERSECT SELECT cName FROM  tryout WHERE pPos  =  'mid')", "query_toks": ["SELECT", "COUNT", "(", "*", ")", "FROM", "(", "SELECT", "cName", "FROM", "tryout", "WHERE", "pPos", "=", "'goalie", "'", "INTERSECT", "SELECT", "cName", "FROM", "tryout", "WHERE", "pPos", "=", "'mid", "'", ")"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "(", "select", "cname", "from", "tryout", "where", "ppos", "=", "value", "intersect", "select", "cname", "from", "tryout", "where", "ppos", "=", "value", ")"], "question": "How many schools have some students playing in goalie and mid positions.", "question_toks": ["How", "many", "schools", "have", "some", "students", "playing", "in", "goalie", "and", "mid", "positions", "."], "guid": 2811}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | Where is the club \"Hopkins Student Enterprises\" located?", "sql": "SELECT clublocation FROM club WHERE clubname  =  \"Hopkins Student Enterprises\"", "example": {"db_id": "club_1", "query": "SELECT clublocation FROM club WHERE clubname  =  \"Hopkins Student Enterprises\"", "query_toks": ["SELECT", "clublocation", "FROM", "club", "WHERE", "clubname", "=", "``", "Hopkins", "Student", "Enterprises", "''"], "query_toks_no_value": ["select", "clublocation", "from", "club", "where", "clubname", "=", "value"], "question": "Where is the club \"Hopkins Student Enterprises\" located?", "question_toks": ["Where", "is", "the", "club", "``", "Hopkins", "Student", "Enterprises", "''", "located", "?"], "guid": 2812}}
{"text": "players: player_id, first_name, last_name, hand, birth_date, country_code; matches: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank; rankings: ranking_date, ranking, player_id, ranking_points, tours | Find the average rank of winners in all matches.", "sql": "SELECT avg(winner_rank) FROM matches", "example": {"db_id": "wta_1", "query": "SELECT avg(winner_rank) FROM matches", "query_toks": ["SELECT", "avg", "(", "winner_rank", ")", "FROM", "matches"], "query_toks_no_value": ["select", "avg", "(", "winner_rank", ")", "from", "matches"], "question": "Find the average rank of winners in all matches.", "question_toks": ["Find", "the", "average", "rank", "of", "winners", "in", "all", "matches", "."], "guid": 2813}}
{"text": "country: Country_id, Country_name, Capital, Official_native_language; team: Team_id, Name; match_season: Season, Player, Position, Country, Team, Draft_Pick_Number, Draft_Class, College; player: Player_ID, Player, Years_Played, Total_WL, Singles_WL, Doubles_WL, Team | Return the names of teams that have no match season record.", "sql": "SELECT Name FROM team WHERE Team_id NOT IN (SELECT Team FROM match_season)", "example": {"db_id": "match_season", "query": "SELECT Name FROM team WHERE Team_id NOT IN (SELECT Team FROM match_season)", "query_toks": ["SELECT", "Name", "FROM", "team", "WHERE", "Team_id", "NOT", "IN", "(", "SELECT", "Team", "FROM", "match_season", ")"], "query_toks_no_value": ["select", "name", "from", "team", "where", "team_id", "not", "in", "(", "select", "team", "from", "match_season", ")"], "question": "Return the names of teams that have no match season record.", "question_toks": ["Return", "the", "names", "of", "teams", "that", "have", "no", "match", "season", "record", "."], "guid": 2814}}
{"text": "basketball_match: Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home; university: School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference | How many schools are in the basketball match?", "sql": "SELECT count(DISTINCT school_id) FROM basketball_match", "example": {"db_id": "university_basketball", "query": "SELECT count(DISTINCT school_id) FROM basketball_match", "query_toks": ["SELECT", "count", "(", "DISTINCT", "school_id", ")", "FROM", "basketball_match"], "query_toks_no_value": ["select", "count", "(", "distinct", "school_id", ")", "from", "basketball_match"], "question": "How many schools are in the basketball match?", "question_toks": ["How", "many", "schools", "are", "in", "the", "basketball", "match", "?"], "guid": 2815}}
{"text": "wrestler: Wrestler_ID, Name, Reign, Days_held, Location, Event; Elimination: Elimination_ID, Wrestler_ID, Team, Eliminated_By, Elimination_Move, Time | Give the names of wrestlers and their elimination moves.", "sql": "SELECT T2.Name ,  T1.Elimination_Move FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID", "example": {"db_id": "wrestler", "query": "SELECT T2.Name ,  T1.Elimination_Move FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID", "query_toks": ["SELECT", "T2.Name", ",", "T1.Elimination_Move", "FROM", "elimination", "AS", "T1", "JOIN", "wrestler", "AS", "T2", "ON", "T1.Wrestler_ID", "=", "T2.Wrestler_ID"], "query_toks_no_value": ["select", "t2", ".", "name", ",", "t1", ".", "elimination_move", "from", "elimination", "as", "t1", "join", "wrestler", "as", "t2", "on", "t1", ".", "wrestler_id", "=", "t2", ".", "wrestler_id"], "question": "Give the names of wrestlers and their elimination moves.", "question_toks": ["Give", "the", "names", "of", "wrestlers", "and", "their", "elimination", "moves", "."], "guid": 2816}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | Count the number of different positions in the club \"Bootup Baltimore\".", "sql": "SELECT count(DISTINCT t2.position) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid WHERE t1.clubname  =  \"Bootup Baltimore\"", "example": {"db_id": "club_1", "query": "SELECT count(DISTINCT t2.position) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid WHERE t1.clubname  =  \"Bootup Baltimore\"", "query_toks": ["SELECT", "count", "(", "DISTINCT", "t2.position", ")", "FROM", "club", "AS", "t1", "JOIN", "member_of_club", "AS", "t2", "ON", "t1.clubid", "=", "t2.clubid", "WHERE", "t1.clubname", "=", "``", "Bootup", "Baltimore", "''"], "query_toks_no_value": ["select", "count", "(", "distinct", "t2", ".", "position", ")", "from", "club", "as", "t1", "join", "member_of_club", "as", "t2", "on", "t1", ".", "clubid", "=", "t2", ".", "clubid", "where", "t1", ".", "clubname", "=", "value"], "question": "Count the number of different positions in the club \"Bootup Baltimore\".", "question_toks": ["Count", "the", "number", "of", "different", "positions", "in", "the", "club", "``", "Bootup", "Baltimore", "''", "."], "guid": 2817}}
{"text": "college: College_ID, Name, Leader_Name, College_Location; member: Member_ID, Name, Country, College_ID; round: Round_ID, Member_ID, Decoration_Theme, Rank_in_Round | Which countries have more than two members?", "sql": "SELECT Country FROM member GROUP BY Country HAVING COUNT(*)  >  2", "example": {"db_id": "decoration_competition", "query": "SELECT Country FROM member GROUP BY Country HAVING COUNT(*)  >  2", "query_toks": ["SELECT", "Country", "FROM", "member", "GROUP", "BY", "Country", "HAVING", "COUNT", "(", "*", ")", ">", "2"], "query_toks_no_value": ["select", "country", "from", "member", "group", "by", "country", "having", "count", "(", "*", ")", ">", "value"], "question": "Which countries have more than two members?", "question_toks": ["Which", "countries", "have", "more", "than", "two", "members", "?"], "guid": 2818}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | How many clubs does the student named \"Eric Tai\" belong to?", "sql": "SELECT count(DISTINCT t1.clubname) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Eric\" AND t3.lname  =  \"Tai\"", "example": {"db_id": "club_1", "query": "SELECT count(DISTINCT t1.clubname) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Eric\" AND t3.lname  =  \"Tai\"", "query_toks": ["SELECT", "count", "(", "DISTINCT", "t1.clubname", ")", "FROM", "club", "AS", "t1", "JOIN", "member_of_club", "AS", "t2", "ON", "t1.clubid", "=", "t2.clubid", "JOIN", "student", "AS", "t3", "ON", "t2.stuid", "=", "t3.stuid", "WHERE", "t3.fname", "=", "``", "Eric", "''", "AND", "t3.lname", "=", "``", "Tai", "''"], "query_toks_no_value": ["select", "count", "(", "distinct", "t1", ".", "clubname", ")", "from", "club", "as", "t1", "join", "member_of_club", "as", "t2", "on", "t1", ".", "clubid", "=", "t2", ".", "clubid", "join", "student", "as", "t3", "on", "t2", ".", "stuid", "=", "t3", ".", "stuid", "where", "t3", ".", "fname", "=", "value", "and", "t3", ".", "lname", "=", "value"], "question": "How many clubs does the student named \"Eric Tai\" belong to?", "question_toks": ["How", "many", "clubs", "does", "the", "student", "named", "``", "Eric", "Tai", "''", "belong", "to", "?"], "guid": 2819}}
{"text": "players: player_id, first_name, last_name, hand, birth_date, country_code; matches: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank; rankings: ranking_date, ranking, player_id, ranking_points, tours | Find the year that has the most number of matches.", "sql": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "wta_1", "query": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "YEAR", "FROM", "matches", "GROUP", "BY", "YEAR", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "year", "from", "matches", "group", "by", "year", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Find the year that has the most number of matches.", "question_toks": ["Find", "the", "year", "that", "has", "the", "most", "number", "of", "matches", "."], "guid": 2820}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | What are the names of races that were held after 2017 and the circuits were in the country of Spain?", "sql": "SELECT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = \"Spain\" AND T1.year > 2017", "example": {"db_id": "formula_1", "query": "SELECT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = \"Spain\" AND T1.year > 2017", "query_toks": ["SELECT", "T1.name", "FROM", "races", "AS", "T1", "JOIN", "circuits", "AS", "T2", "ON", "T1.circuitid", "=", "T2.circuitid", "WHERE", "T2.country", "=", "``", "Spain", "''", "AND", "T1.year", ">", "2017"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "races", "as", "t1", "join", "circuits", "as", "t2", "on", "t1", ".", "circuitid", "=", "t2", ".", "circuitid", "where", "t2", ".", "country", "=", "value", "and", "t1", ".", "year", ">", "value"], "question": "What are the names of races that were held after 2017 and the circuits were in the country of Spain?", "question_toks": ["What", "are", "the", "names", "of", "races", "that", "were", "held", "after", "2017", "and", "the", "circuits", "were", "in", "the", "country", "of", "Spain", "?"], "guid": 2821}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | What are the names of races held between 2009 and 2011?", "sql": "SELECT name FROM races WHERE YEAR BETWEEN 2009 AND 2011", "example": {"db_id": "formula_1", "query": "SELECT name FROM races WHERE YEAR BETWEEN 2009 AND 2011", "query_toks": ["SELECT", "name", "FROM", "races", "WHERE", "YEAR", "BETWEEN", "2009", "AND", "2011"], "query_toks_no_value": ["select", "name", "from", "races", "where", "year", "between", "value", "and", "value"], "question": "What are the names of races held between 2009 and 2011?", "question_toks": ["What", "are", "the", "names", "of", "races", "held", "between", "2009", "and", "2011", "?"], "guid": 2822}}
{"text": "gymnast: Gymnast_ID, Floor_Exercise_Points, Pommel_Horse_Points, Rings_Points, Vault_Points, Parallel_Bars_Points, Horizontal_Bar_Points, Total_Points; people: People_ID, Name, Age, Height, Hometown | Count the number of different hometowns of these people.", "sql": "SELECT count(DISTINCT Hometown) FROM people", "example": {"db_id": "gymnast", "query": "SELECT count(DISTINCT Hometown) FROM people", "query_toks": ["SELECT", "count", "(", "DISTINCT", "Hometown", ")", "FROM", "people"], "query_toks_no_value": ["select", "count", "(", "distinct", "hometown", ")", "from", "people"], "question": "Count the number of different hometowns of these people.", "question_toks": ["Count", "the", "number", "of", "different", "hometowns", "of", "these", "people", "."], "guid": 2823}}
{"text": "wrestler: Wrestler_ID, Name, Reign, Days_held, Location, Event; Elimination: Elimination_ID, Wrestler_ID, Team, Eliminated_By, Elimination_Move, Time | What are the names and location of the wrestlers?", "sql": "SELECT Name ,  LOCATION FROM wrestler", "example": {"db_id": "wrestler", "query": "SELECT Name ,  LOCATION FROM wrestler", "query_toks": ["SELECT", "Name", ",", "LOCATION", "FROM", "wrestler"], "query_toks_no_value": ["select", "name", ",", "location", "from", "wrestler"], "question": "What are the names and location of the wrestlers?", "question_toks": ["What", "are", "the", "names", "and", "location", "of", "the", "wrestlers", "?"], "guid": 2824}}
{"text": "players: player_id, first_name, last_name, hand, birth_date, country_code; matches: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank; rankings: ranking_date, ranking, player_id, ranking_points, tours | What is the first name, country code, and birth date of the player with the most winner rank points across all matches?", "sql": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1", "example": {"db_id": "wta_1", "query": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1", "query_toks": ["SELECT", "T1.first_name", ",", "T1.country_code", ",", "T1.birth_date", "FROM", "players", "AS", "T1", "JOIN", "matches", "AS", "T2", "ON", "T1.player_id", "=", "T2.winner_id", "ORDER", "BY", "T2.winner_rank_points", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "first_name", ",", "t1", ".", "country_code", ",", "t1", ".", "birth_date", "from", "players", "as", "t1", "join", "matches", "as", "t2", "on", "t1", ".", "player_id", "=", "t2", ".", "winner_id", "order", "by", "t2", ".", "winner_rank_points", "desc", "limit", "value"], "question": "What is the first name, country code, and birth date of the player with the most winner rank points across all matches?", "question_toks": ["What", "is", "the", "first", "name", ",", "country", "code", ",", "and", "birth", "date", "of", "the", "player", "with", "the", "most", "winner", "rank", "points", "across", "all", "matches", "?"], "guid": 2825}}
{"text": "gymnast: Gymnast_ID, Floor_Exercise_Points, Pommel_Horse_Points, Rings_Points, Vault_Points, Parallel_Bars_Points, Horizontal_Bar_Points, Total_Points; people: People_ID, Name, Age, Height, Hometown | Count the number of gymnasts.", "sql": "SELECT count(*) FROM gymnast", "example": {"db_id": "gymnast", "query": "SELECT count(*) FROM gymnast", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "gymnast"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "gymnast"], "question": "Count the number of gymnasts.", "question_toks": ["Count", "the", "number", "of", "gymnasts", "."], "guid": 2826}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | What are the names of all the players who received a yes during tryouts, and also what are the names of their colleges?", "sql": "SELECT T1.pName ,  T2.cName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'", "example": {"db_id": "soccer_2", "query": "SELECT T1.pName ,  T2.cName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'", "query_toks": ["SELECT", "T1.pName", ",", "T2.cName", "FROM", "player", "AS", "T1", "JOIN", "tryout", "AS", "T2", "ON", "T1.pID", "=", "T2.pID", "WHERE", "T2.decision", "=", "'yes", "'"], "query_toks_no_value": ["select", "t1", ".", "pname", ",", "t2", ".", "cname", "from", "player", "as", "t1", "join", "tryout", "as", "t2", "on", "t1", ".", "pid", "=", "t2", ".", "pid", "where", "t2", ".", "decision", "=", "value"], "question": "What are the names of all the players who received a yes during tryouts, and also what are the names of their colleges?", "question_toks": ["What", "are", "the", "names", "of", "all", "the", "players", "who", "received", "a", "yes", "during", "tryouts", ",", "and", "also", "what", "are", "the", "names", "of", "their", "colleges", "?"], "guid": 2827}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | Find the players whose names contain letter 'a'.", "sql": "SELECT DISTINCT pName FROM Player WHERE pName LIKE '%a%'", "example": {"db_id": "soccer_2", "query": "SELECT DISTINCT pName FROM Player WHERE pName LIKE '%a%'", "query_toks": ["SELECT", "DISTINCT", "pName", "FROM", "Player", "WHERE", "pName", "LIKE", "'", "%", "a", "%", "'"], "query_toks_no_value": ["select", "distinct", "pname", "from", "player", "where", "pname", "like", "value"], "question": "Find the players whose names contain letter 'a'.", "question_toks": ["Find", "the", "players", "whose", "names", "contain", "letter", "'a", "'", "."], "guid": 2828}}
{"text": "club: Club_ID, name, Region, Start_year; club_rank: Rank, Club_ID, Gold, Silver, Bronze, Total; player: Player_ID, name, Position, Club_ID, Apps, Tries, Goals, Points; competition: Competition_ID, Year, Competition_type, Country; competition_result: Competition_ID, Club_ID_1, Club_ID_2, Score | What is the total number of points for all players?", "sql": "SELECT sum(Points) FROM player", "example": {"db_id": "sports_competition", "query": "SELECT sum(Points) FROM player", "query_toks": ["SELECT", "sum", "(", "Points", ")", "FROM", "player"], "query_toks_no_value": ["select", "sum", "(", "points", ")", "from", "player"], "question": "What is the total number of points for all players?", "question_toks": ["What", "is", "the", "total", "number", "of", "points", "for", "all", "players", "?"], "guid": 2829}}
{"text": "basketball_match: Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home; university: School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference | Return the highest acc percent across all basketball matches.", "sql": "SELECT acc_percent FROM basketball_match ORDER BY acc_percent DESC LIMIT 1", "example": {"db_id": "university_basketball", "query": "SELECT acc_percent FROM basketball_match ORDER BY acc_percent DESC LIMIT 1", "query_toks": ["SELECT", "acc_percent", "FROM", "basketball_match", "ORDER", "BY", "acc_percent", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "acc_percent", "from", "basketball_match", "order", "by", "acc_percent", "desc", "limit", "value"], "question": "Return the highest acc percent across all basketball matches.", "question_toks": ["Return", "the", "highest", "acc", "percent", "across", "all", "basketball", "matches", "."], "guid": 2830}}
{"text": "basketball_match: Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home; university: School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference | Return the founded year for the school with the largest enrollment.", "sql": "SELECT founded FROM university ORDER BY enrollment DESC LIMIT 1", "example": {"db_id": "university_basketball", "query": "SELECT founded FROM university ORDER BY enrollment DESC LIMIT 1", "query_toks": ["SELECT", "founded", "FROM", "university", "ORDER", "BY", "enrollment", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "founded", "from", "university", "order", "by", "enrollment", "desc", "limit", "value"], "question": "Return the founded year for the school with the largest enrollment.", "question_toks": ["Return", "the", "founded", "year", "for", "the", "school", "with", "the", "largest", "enrollment", "."], "guid": 2831}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | Which college has any student who is a goalie and succeeded in the tryout.", "sql": "SELECT cName FROM  tryout WHERE decision  =  'yes' AND pPos  =  'goalie'", "example": {"db_id": "soccer_2", "query": "SELECT cName FROM  tryout WHERE decision  =  'yes' AND pPos  =  'goalie'", "query_toks": ["SELECT", "cName", "FROM", "tryout", "WHERE", "decision", "=", "'yes", "'", "AND", "pPos", "=", "'goalie", "'"], "query_toks_no_value": ["select", "cname", "from", "tryout", "where", "decision", "=", "value", "and", "ppos", "=", "value"], "question": "Which college has any student who is a goalie and succeeded in the tryout.", "question_toks": ["Which", "college", "has", "any", "student", "who", "is", "a", "goalie", "and", "succeeded", "in", "the", "tryout", "."], "guid": 2832}}
{"text": "gymnast: Gymnast_ID, Floor_Exercise_Points, Pommel_Horse_Points, Rings_Points, Vault_Points, Parallel_Bars_Points, Horizontal_Bar_Points, Total_Points; people: People_ID, Name, Age, Height, Hometown | Return the names of people, ordered alphabetically.", "sql": "SELECT Name FROM People ORDER BY Name ASC", "example": {"db_id": "gymnast", "query": "SELECT Name FROM People ORDER BY Name ASC", "query_toks": ["SELECT", "Name", "FROM", "People", "ORDER", "BY", "Name", "ASC"], "query_toks_no_value": ["select", "name", "from", "people", "order", "by", "name", "asc"], "question": "Return the names of people, ordered alphabetically.", "question_toks": ["Return", "the", "names", "of", "people", ",", "ordered", "alphabetically", "."], "guid": 2833}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | Find the driver id and number of races of all drivers who have at most participated in 30 races?", "sql": "SELECT T1.driverid ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  <=  30", "example": {"db_id": "formula_1", "query": "SELECT T1.driverid ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  <=  30", "query_toks": ["SELECT", "T1.driverid", ",", "count", "(", "*", ")", "FROM", "drivers", "AS", "T1", "JOIN", "results", "AS", "T2", "ON", "T1.driverid", "=", "T2.driverid", "JOIN", "races", "AS", "T3", "ON", "T2.raceid", "=", "T3.raceid", "GROUP", "BY", "T1.driverid", "HAVING", "count", "(", "*", ")", "<", "=", "30"], "query_toks_no_value": ["select", "t1", ".", "driverid", ",", "count", "(", "*", ")", "from", "drivers", "as", "t1", "join", "results", "as", "t2", "on", "t1", ".", "driverid", "=", "t2", ".", "driverid", "join", "races", "as", "t3", "on", "t2", ".", "raceid", "=", "t3", ".", "raceid", "group", "by", "t1", ".", "driverid", "having", "count", "(", "*", ")", "<", "=", "value"], "question": "Find the driver id and number of races of all drivers who have at most participated in 30 races?", "question_toks": ["Find", "the", "driver", "id", "and", "number", "of", "races", "of", "all", "drivers", "who", "have", "at", "most", "participated", "in", "30", "races", "?"], "guid": 2834}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | What are the dates that have an average sea level pressure between 30.3 and 31?", "sql": "SELECT date FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31", "example": {"db_id": "bike_1", "query": "SELECT date FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31", "query_toks": ["SELECT", "date", "FROM", "weather", "WHERE", "mean_sea_level_pressure_inches", "BETWEEN", "30.3", "AND", "31"], "query_toks_no_value": ["select", "date", "from", "weather", "where", "mean_sea_level_pressure_inches", "between", "value", "and", "value"], "question": "What are the dates that have an average sea level pressure between 30.3 and 31?", "question_toks": ["What", "are", "the", "dates", "that", "have", "an", "average", "sea", "level", "pressure", "between", "30.3", "and", "31", "?"], "guid": 2835}}
{"text": "gymnast: Gymnast_ID, Floor_Exercise_Points, Pommel_Horse_Points, Rings_Points, Vault_Points, Parallel_Bars_Points, Horizontal_Bar_Points, Total_Points; people: People_ID, Name, Age, Height, Hometown | What is the most common hometown of gymnasts?", "sql": "SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown ORDER BY COUNT(*) DESC LIMIT 1", "example": {"db_id": "gymnast", "query": "SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "T2.Hometown", "FROM", "gymnast", "AS", "T1", "JOIN", "people", "AS", "T2", "ON", "T1.Gymnast_ID", "=", "T2.People_ID", "GROUP", "BY", "T2.Hometown", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "hometown", "from", "gymnast", "as", "t1", "join", "people", "as", "t2", "on", "t1", ".", "gymnast_id", "=", "t2", ".", "people_id", "group", "by", "t2", ".", "hometown", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the most common hometown of gymnasts?", "question_toks": ["What", "is", "the", "most", "common", "hometown", "of", "gymnasts", "?"], "guid": 2836}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | How many different bike ids are there?", "sql": "SELECT count(DISTINCT bike_id) FROM trip", "example": {"db_id": "bike_1", "query": "SELECT count(DISTINCT bike_id) FROM trip", "query_toks": ["SELECT", "count", "(", "DISTINCT", "bike_id", ")", "FROM", "trip"], "query_toks_no_value": ["select", "count", "(", "distinct", "bike_id", ")", "from", "trip"], "question": "How many different bike ids are there?", "question_toks": ["How", "many", "different", "bike", "ids", "are", "there", "?"], "guid": 2837}}
{"text": "basketball_match: Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home; university: School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference | What are the different schools and their nicknames, ordered by their founding years?", "sql": "SELECT school ,  nickname FROM university ORDER BY founded", "example": {"db_id": "university_basketball", "query": "SELECT school ,  nickname FROM university ORDER BY founded", "query_toks": ["SELECT", "school", ",", "nickname", "FROM", "university", "ORDER", "BY", "founded"], "query_toks_no_value": ["select", "school", ",", "nickname", "from", "university", "order", "by", "founded"], "question": "What are the different schools and their nicknames, ordered by their founding years?", "question_toks": ["What", "are", "the", "different", "schools", "and", "their", "nicknames", ",", "ordered", "by", "their", "founding", "years", "?"], "guid": 2838}}
{"text": "race: Race_ID, Name, Class, Date, Track_ID; track: Track_ID, Name, Location, Seating, Year_Opened | What are the names, locations, and years of opening for tracks with seating higher than average?", "sql": "SELECT name ,  LOCATION ,  year_opened FROM track WHERE seating  >  (SELECT avg(seating) FROM track)", "example": {"db_id": "race_track", "query": "SELECT name ,  LOCATION ,  year_opened FROM track WHERE seating  >  (SELECT avg(seating) FROM track)", "query_toks": ["SELECT", "name", ",", "LOCATION", ",", "year_opened", "FROM", "track", "WHERE", "seating", ">", "(", "SELECT", "avg", "(", "seating", ")", "FROM", "track", ")"], "query_toks_no_value": ["select", "name", ",", "location", ",", "year_opened", "from", "track", "where", "seating", ">", "(", "select", "avg", "(", "seating", ")", "from", "track", ")"], "question": "What are the names, locations, and years of opening for tracks with seating higher than average?", "question_toks": ["What", "are", "the", "names", ",", "locations", ",", "and", "years", "of", "opening", "for", "tracks", "with", "seating", "higher", "than", "average", "?"], "guid": 2839}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | What are the states of the colleges where students who tried out for the striker position attend?", "sql": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'striker'", "example": {"db_id": "soccer_2", "query": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'striker'", "query_toks": ["SELECT", "T1.state", "FROM", "college", "AS", "T1", "JOIN", "tryout", "AS", "T2", "ON", "T1.cName", "=", "T2.cName", "WHERE", "T2.pPos", "=", "'striker", "'"], "query_toks_no_value": ["select", "t1", ".", "state", "from", "college", "as", "t1", "join", "tryout", "as", "t2", "on", "t1", ".", "cname", "=", "t2", ".", "cname", "where", "t2", ".", "ppos", "=", "value"], "question": "What are the states of the colleges where students who tried out for the striker position attend?", "question_toks": ["What", "are", "the", "states", "of", "the", "colleges", "where", "students", "who", "tried", "out", "for", "the", "striker", "position", "attend", "?"], "guid": 2840}}
{"text": "wrestler: Wrestler_ID, Name, Reign, Days_held, Location, Event; Elimination: Elimination_ID, Wrestler_ID, Team, Eliminated_By, Elimination_Move, Time | Show times of elimination of wrestlers with days held more than 50.", "sql": "SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID WHERE T2.Days_held  >  50", "example": {"db_id": "wrestler", "query": "SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID WHERE T2.Days_held  >  50", "query_toks": ["SELECT", "T1.Time", "FROM", "elimination", "AS", "T1", "JOIN", "wrestler", "AS", "T2", "ON", "T1.Wrestler_ID", "=", "T2.Wrestler_ID", "WHERE", "T2.Days_held", ">", "50"], "query_toks_no_value": ["select", "t1", ".", "time", "from", "elimination", "as", "t1", "join", "wrestler", "as", "t2", "on", "t1", ".", "wrestler_id", "=", "t2", ".", "wrestler_id", "where", "t2", ".", "days_held", ">", "value"], "question": "Show times of elimination of wrestlers with days held more than 50.", "question_toks": ["Show", "times", "of", "elimination", "of", "wrestlers", "with", "days", "held", "more", "than", "50", "."], "guid": 2841}}
{"text": "country: Country_id, Country_name, Capital, Official_native_language; team: Team_id, Name; match_season: Season, Player, Position, Country, Team, Draft_Pick_Number, Draft_Class, College; player: Player_ID, Player, Years_Played, Total_WL, Singles_WL, Doubles_WL, Team | Show the draft pick numbers and draft classes of players whose positions are defenders.", "sql": "SELECT Draft_Pick_Number ,  Draft_Class FROM match_season WHERE POSITION  =  \"Defender\"", "example": {"db_id": "match_season", "query": "SELECT Draft_Pick_Number ,  Draft_Class FROM match_season WHERE POSITION  =  \"Defender\"", "query_toks": ["SELECT", "Draft_Pick_Number", ",", "Draft_Class", "FROM", "match_season", "WHERE", "POSITION", "=", "``", "Defender", "''"], "query_toks_no_value": ["select", "draft_pick_number", ",", "draft_class", "from", "match_season", "where", "position", "=", "value"], "question": "Show the draft pick numbers and draft classes of players whose positions are defenders.", "question_toks": ["Show", "the", "draft", "pick", "numbers", "and", "draft", "classes", "of", "players", "whose", "positions", "are", "defenders", "."], "guid": 2842}}
{"text": "body_builder: Body_Builder_ID, People_ID, Snatch, Clean_Jerk, Total; people: People_ID, Name, Height, Weight, Birth_Date, Birth_Place | How many body builders are there?", "sql": "SELECT count(*) FROM body_builder", "example": {"db_id": "body_builder", "query": "SELECT count(*) FROM body_builder", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "body_builder"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "body_builder"], "question": "How many body builders are there?", "question_toks": ["How", "many", "body", "builders", "are", "there", "?"], "guid": 2843}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | What are the names and years of all races that had a driver with the last name Lewis?", "sql": "SELECT T2.name ,  T2.year FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T1.driverid = T3.driverid WHERE T3.forename = \"Lewis\"", "example": {"db_id": "formula_1", "query": "SELECT T2.name ,  T2.year FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T1.driverid = T3.driverid WHERE T3.forename = \"Lewis\"", "query_toks": ["SELECT", "T2.name", ",", "T2.year", "FROM", "results", "AS", "T1", "JOIN", "races", "AS", "T2", "ON", "T1.raceid", "=", "T2.raceid", "JOIN", "drivers", "AS", "T3", "ON", "T1.driverid", "=", "T3.driverid", "WHERE", "T3.forename", "=", "``", "Lewis", "''"], "query_toks_no_value": ["select", "t2", ".", "name", ",", "t2", ".", "year", "from", "results", "as", "t1", "join", "races", "as", "t2", "on", "t1", ".", "raceid", "=", "t2", ".", "raceid", "join", "drivers", "as", "t3", "on", "t1", ".", "driverid", "=", "t3", ".", "driverid", "where", "t3", ".", "forename", "=", "value"], "question": "What are the names and years of all races that had a driver with the last name Lewis?", "question_toks": ["What", "are", "the", "names", "and", "years", "of", "all", "races", "that", "had", "a", "driver", "with", "the", "last", "name", "Lewis", "?"], "guid": 2844}}
{"text": "players: player_id, first_name, last_name, hand, birth_date, country_code; matches: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank; rankings: ranking_date, ranking, player_id, ranking_points, tours | Find the total number of players.", "sql": "SELECT count(*) FROM players", "example": {"db_id": "wta_1", "query": "SELECT count(*) FROM players", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "players"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "players"], "question": "Find the total number of players.", "question_toks": ["Find", "the", "total", "number", "of", "players", "."], "guid": 2845}}
{"text": "gymnast: Gymnast_ID, Floor_Exercise_Points, Pommel_Horse_Points, Rings_Points, Vault_Points, Parallel_Bars_Points, Horizontal_Bar_Points, Total_Points; people: People_ID, Name, Age, Height, Hometown | Return the names of gymnasts who did not grow up in Santo Domingo.", "sql": "SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID WHERE T2.Hometown != \"Santo Domingo\"", "example": {"db_id": "gymnast", "query": "SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID WHERE T2.Hometown != \"Santo Domingo\"", "query_toks": ["SELECT", "T2.Name", "FROM", "gymnast", "AS", "T1", "JOIN", "people", "AS", "T2", "ON", "T1.Gymnast_ID", "=", "T2.People_ID", "WHERE", "T2.Hometown", "!", "=", "``", "Santo", "Domingo", "''"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "gymnast", "as", "t1", "join", "people", "as", "t2", "on", "t1", ".", "gymnast_id", "=", "t2", ".", "people_id", "where", "t2", ".", "hometown", "!", "=", "value"], "question": "Return the names of gymnasts who did not grow up in Santo Domingo.", "question_toks": ["Return", "the", "names", "of", "gymnasts", "who", "did", "not", "grow", "up", "in", "Santo", "Domingo", "."], "guid": 2846}}
{"text": "poker_player: Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings; people: People_ID, Nationality, Name, Birth_Date, Height | What are the names of people who are not from Russia?", "sql": "SELECT Name FROM people WHERE Nationality != \"Russia\"", "example": {"db_id": "poker_player", "query": "SELECT Name FROM people WHERE Nationality != \"Russia\"", "query_toks": ["SELECT", "Name", "FROM", "people", "WHERE", "Nationality", "!", "=", "``", "Russia", "''"], "query_toks_no_value": ["select", "name", "from", "people", "where", "nationality", "!", "=", "value"], "question": "What are the names of people who are not from Russia?", "question_toks": ["What", "are", "the", "names", "of", "people", "who", "are", "not", "from", "Russia", "?"], "guid": 2847}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | How many schools have students playing in goalie and mid-field positions?", "sql": "SELECT COUNT(*) FROM (SELECT cName FROM  tryout WHERE pPos  =  'goalie' INTERSECT SELECT cName FROM  tryout WHERE pPos  =  'mid')", "example": {"db_id": "soccer_2", "query": "SELECT COUNT(*) FROM (SELECT cName FROM  tryout WHERE pPos  =  'goalie' INTERSECT SELECT cName FROM  tryout WHERE pPos  =  'mid')", "query_toks": ["SELECT", "COUNT", "(", "*", ")", "FROM", "(", "SELECT", "cName", "FROM", "tryout", "WHERE", "pPos", "=", "'goalie", "'", "INTERSECT", "SELECT", "cName", "FROM", "tryout", "WHERE", "pPos", "=", "'mid", "'", ")"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "(", "select", "cname", "from", "tryout", "where", "ppos", "=", "value", "intersect", "select", "cname", "from", "tryout", "where", "ppos", "=", "value", ")"], "question": "How many schools have students playing in goalie and mid-field positions?", "question_toks": ["How", "many", "schools", "have", "students", "playing", "in", "goalie", "and", "mid-field", "positions", "?"], "guid": 2848}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | What is the average latitude and longitude of the starting points of all trips?", "sql": "SELECT avg(T1.lat) ,  avg(T1.long) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id", "example": {"db_id": "bike_1", "query": "SELECT avg(T1.lat) ,  avg(T1.long) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id", "query_toks": ["SELECT", "avg", "(", "T1.lat", ")", ",", "avg", "(", "T1.long", ")", "FROM", "station", "AS", "T1", "JOIN", "trip", "AS", "T2", "ON", "T1.id", "=", "T2.start_station_id"], "query_toks_no_value": ["select", "avg", "(", "t1", ".", "lat", ")", ",", "avg", "(", "t1", ".", "long", ")", "from", "station", "as", "t1", "join", "trip", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "start_station_id"], "question": "What is the average latitude and longitude of the starting points of all trips?", "question_toks": ["What", "is", "the", "average", "latitude", "and", "longitude", "of", "the", "starting", "points", "of", "all", "trips", "?"], "guid": 2849}}
{"text": "players: player_id, first_name, last_name, hand, birth_date, country_code; matches: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank; rankings: ranking_date, ranking, player_id, ranking_points, tours | What are the first names and country codes for players who won both the WTA Championships and the Australian Open?", "sql": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'", "example": {"db_id": "wta_1", "query": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'", "query_toks": ["SELECT", "T1.country_code", ",", "T1.first_name", "FROM", "players", "AS", "T1", "JOIN", "matches", "AS", "T2", "ON", "T1.player_id", "=", "T2.winner_id", "WHERE", "T2.tourney_name", "=", "'WTA", "Championships", "'", "INTERSECT", "SELECT", "T1.country_code", ",", "T1.first_name", "FROM", "players", "AS", "T1", "JOIN", "matches", "AS", "T2", "ON", "T1.player_id", "=", "T2.winner_id", "WHERE", "T2.tourney_name", "=", "'Australian", "Open", "'"], "query_toks_no_value": ["select", "t1", ".", "country_code", ",", "t1", ".", "first_name", "from", "players", "as", "t1", "join", "matches", "as", "t2", "on", "t1", ".", "player_id", "=", "t2", ".", "winner_id", "where", "t2", ".", "tourney_name", "=", "value", "intersect", "select", "t1", ".", "country_code", ",", "t1", ".", "first_name", "from", "players", "as", "t1", "join", "matches", "as", "t2", "on", "t1", ".", "player_id", "=", "t2", ".", "winner_id", "where", "t2", ".", "tourney_name", "=", "value"], "question": "What are the first names and country codes for players who won both the WTA Championships and the Australian Open?", "question_toks": ["What", "are", "the", "first", "names", "and", "country", "codes", "for", "players", "who", "won", "both", "the", "WTA", "Championships", "and", "the", "Australian", "Open", "?"], "guid": 2850}}
{"text": "country: Country_id, Country_name, Capital, Official_native_language; team: Team_id, Name; match_season: Season, Player, Position, Country, Team, Draft_Pick_Number, Draft_Class, College; player: Player_ID, Player, Years_Played, Total_WL, Singles_WL, Doubles_WL, Team | How many distinct colleges are associated with players from the team with name \"Columbus Crew\".", "sql": "SELECT count(DISTINCT T1.College) FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  \"Columbus Crew\"", "example": {"db_id": "match_season", "query": "SELECT count(DISTINCT T1.College) FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  \"Columbus Crew\"", "query_toks": ["SELECT", "count", "(", "DISTINCT", "T1.College", ")", "FROM", "match_season", "AS", "T1", "JOIN", "team", "AS", "T2", "ON", "T1.Team", "=", "T2.Team_id", "WHERE", "T2.Name", "=", "``", "Columbus", "Crew", "''"], "query_toks_no_value": ["select", "count", "(", "distinct", "t1", ".", "college", ")", "from", "match_season", "as", "t1", "join", "team", "as", "t2", "on", "t1", ".", "team", "=", "t2", ".", "team_id", "where", "t2", ".", "name", "=", "value"], "question": "How many distinct colleges are associated with players from the team with name \"Columbus Crew\".", "question_toks": ["How", "many", "distinct", "colleges", "are", "associated", "with", "players", "from", "the", "team", "with", "name", "``", "Columbus", "Crew", "''", "."], "guid": 2851}}
{"text": "basketball_match: Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home; university: School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference | Show the enrollment and primary_conference of the oldest college.", "sql": "SELECT enrollment ,  primary_conference FROM university ORDER BY founded LIMIT 1", "example": {"db_id": "university_basketball", "query": "SELECT enrollment ,  primary_conference FROM university ORDER BY founded LIMIT 1", "query_toks": ["SELECT", "enrollment", ",", "primary_conference", "FROM", "university", "ORDER", "BY", "founded", "LIMIT", "1"], "query_toks_no_value": ["select", "enrollment", ",", "primary_conference", "from", "university", "order", "by", "founded", "limit", "value"], "question": "Show the enrollment and primary_conference of the oldest college.", "question_toks": ["Show", "the", "enrollment", "and", "primary_conference", "of", "the", "oldest", "college", "."], "guid": 2852}}
{"text": "player: Player_ID, Sponsor_name, Player_name, Gender, Residence, Occupation, Votes, Rank; club: Club_ID, Club_name, Region, Start_year; coach: Coach_ID, Coach_name, Gender, Club_ID, Rank; player_coach: Player_ID, Coach_ID, Starting_year; match_result: Rank, Club_ID, Gold, Big_Silver, Small_Silver, Bronze, Points | Show the names and genders of players with a coach starting after 2011.", "sql": "SELECT T3.Player_name ,  T3.gender FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID  =  T2.Coach_ID JOIN player AS T3 ON T1.Player_ID  =  T3.Player_ID WHERE T1.Starting_year  >  2011", "example": {"db_id": "riding_club", "query": "SELECT T3.Player_name ,  T3.gender FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID  =  T2.Coach_ID JOIN player AS T3 ON T1.Player_ID  =  T3.Player_ID WHERE T1.Starting_year  >  2011", "query_toks": ["SELECT", "T3.Player_name", ",", "T3.gender", "FROM", "player_coach", "AS", "T1", "JOIN", "coach", "AS", "T2", "ON", "T1.Coach_ID", "=", "T2.Coach_ID", "JOIN", "player", "AS", "T3", "ON", "T1.Player_ID", "=", "T3.Player_ID", "WHERE", "T1.Starting_year", ">", "2011"], "query_toks_no_value": ["select", "t3", ".", "player_name", ",", "t3", ".", "gender", "from", "player_coach", "as", "t1", "join", "coach", "as", "t2", "on", "t1", ".", "coach_id", "=", "t2", ".", "coach_id", "join", "player", "as", "t3", "on", "t1", ".", "player_id", "=", "t3", ".", "player_id", "where", "t1", ".", "starting_year", ">", "value"], "question": "Show the names and genders of players with a coach starting after 2011.", "question_toks": ["Show", "the", "names", "and", "genders", "of", "players", "with", "a", "coach", "starting", "after", "2011", "."], "guid": 2853}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | What is the id and last name of the driver with the longest laptime?", "sql": "SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds DESC LIMIT 1", "example": {"db_id": "formula_1", "query": "SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds DESC LIMIT 1", "query_toks": ["SELECT", "T1.driverid", ",", "T1.surname", "FROM", "drivers", "AS", "T1", "JOIN", "laptimes", "AS", "T2", "ON", "T1.driverid", "=", "T2.driverid", "ORDER", "BY", "T2.milliseconds", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "driverid", ",", "t1", ".", "surname", "from", "drivers", "as", "t1", "join", "laptimes", "as", "t2", "on", "t1", ".", "driverid", "=", "t2", ".", "driverid", "order", "by", "t2", ".", "milliseconds", "desc", "limit", "value"], "question": "What is the id and last name of the driver with the longest laptime?", "question_toks": ["What", "is", "the", "id", "and", "last", "name", "of", "the", "driver", "with", "the", "longest", "laptime", "?"], "guid": 2854}}
{"text": "basketball_match: Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home; university: School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference | What are the schools that were either founded before 1850 or are public?", "sql": "SELECT school FROM university WHERE founded  >  1850 OR affiliation  =  'Public'", "example": {"db_id": "university_basketball", "query": "SELECT school FROM university WHERE founded  >  1850 OR affiliation  =  'Public'", "query_toks": ["SELECT", "school", "FROM", "university", "WHERE", "founded", ">", "1850", "OR", "affiliation", "=", "'Public", "'"], "query_toks_no_value": ["select", "school", "from", "university", "where", "founded", ">", "value", "or", "affiliation", "=", "value"], "question": "What are the schools that were either founded before 1850 or are public?", "question_toks": ["What", "are", "the", "schools", "that", "were", "either", "founded", "before", "1850", "or", "are", "public", "?"], "guid": 2855}}
{"text": "body_builder: Body_Builder_ID, People_ID, Snatch, Clean_Jerk, Total; people: People_ID, Name, Height, Weight, Birth_Date, Birth_Place | What are the total scores of the body builders whose birthday contains the string \"January\" ?", "sql": "SELECT T1.total FROM body_builder AS T1 JOIN people AS T2 ON T1.people_id  =  T2.people_id WHERE T2.Birth_Date LIKE \"%January%\";", "example": {"db_id": "body_builder", "query": "SELECT T1.total FROM body_builder AS T1 JOIN people AS T2 ON T1.people_id  =  T2.people_id WHERE T2.Birth_Date LIKE \"%January%\";", "query_toks": ["SELECT", "T1.total", "FROM", "body_builder", "AS", "T1", "JOIN", "people", "AS", "T2", "ON", "T1.people_id", "=", "T2.people_id", "WHERE", "T2.Birth_Date", "LIKE", "``", "%", "January", "%", "''", ";"], "query_toks_no_value": ["select", "t1", ".", "total", "from", "body_builder", "as", "t1", "join", "people", "as", "t2", "on", "t1", ".", "people_id", "=", "t2", ".", "people_id", "where", "t2", ".", "birth_date", "like", "value"], "question": "What are the total scores of the body builders whose birthday contains the string \"January\" ?", "question_toks": ["What", "are", "the", "total", "scores", "of", "the", "body", "builders", "whose", "birthday", "contains", "the", "string", "``", "January", "''", "?"], "guid": 2856}}
{"text": "basketball_match: Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home; university: School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference | What is the founded year of the non public school that was founded most recently?", "sql": "SELECT founded FROM university WHERE affiliation != 'Public' ORDER BY founded DESC LIMIT 1", "example": {"db_id": "university_basketball", "query": "SELECT founded FROM university WHERE affiliation != 'Public' ORDER BY founded DESC LIMIT 1", "query_toks": ["SELECT", "founded", "FROM", "university", "WHERE", "affiliation", "!", "=", "'Public", "'", "ORDER", "BY", "founded", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "founded", "from", "university", "where", "affiliation", "!", "=", "value", "order", "by", "founded", "desc", "limit", "value"], "question": "What is the founded year of the non public school that was founded most recently?", "question_toks": ["What", "is", "the", "founded", "year", "of", "the", "non", "public", "school", "that", "was", "founded", "most", "recently", "?"], "guid": 2857}}
{"text": "body_builder: Body_Builder_ID, People_ID, Snatch, Clean_Jerk, Total; people: People_ID, Name, Height, Weight, Birth_Date, Birth_Place | How many distinct birth places are there?", "sql": "SELECT count(DISTINCT Birth_Place) FROM people", "example": {"db_id": "body_builder", "query": "SELECT count(DISTINCT Birth_Place) FROM people", "query_toks": ["SELECT", "count", "(", "DISTINCT", "Birth_Place", ")", "FROM", "people"], "query_toks_no_value": ["select", "count", "(", "distinct", "birth_place", ")", "from", "people"], "question": "How many distinct birth places are there?", "question_toks": ["How", "many", "distinct", "birth", "places", "are", "there", "?"], "guid": 2858}}
{"text": "wrestler: Wrestler_ID, Name, Reign, Days_held, Location, Event; Elimination: Elimination_ID, Wrestler_ID, Team, Eliminated_By, Elimination_Move, Time | What are the reigns and days held of all wrestlers?", "sql": "SELECT Reign ,  Days_held FROM wrestler", "example": {"db_id": "wrestler", "query": "SELECT Reign ,  Days_held FROM wrestler", "query_toks": ["SELECT", "Reign", ",", "Days_held", "FROM", "wrestler"], "query_toks_no_value": ["select", "reign", ",", "days_held", "from", "wrestler"], "question": "What are the reigns and days held of all wrestlers?", "question_toks": ["What", "are", "the", "reigns", "and", "days", "held", "of", "all", "wrestlers", "?"], "guid": 2859}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | What are the names of all stations that have more than 10 bikes available and are not located in San Jose?", "sql": "SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available)  >  10 EXCEPT SELECT name FROM station WHERE city  =  \"San Jose\"", "example": {"db_id": "bike_1", "query": "SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available)  >  10 EXCEPT SELECT name FROM station WHERE city  =  \"San Jose\"", "query_toks": ["SELECT", "T1.name", "FROM", "station", "AS", "T1", "JOIN", "status", "AS", "T2", "ON", "T1.id", "=", "T2.station_id", "GROUP", "BY", "T2.station_id", "HAVING", "avg", "(", "bikes_available", ")", ">", "10", "EXCEPT", "SELECT", "name", "FROM", "station", "WHERE", "city", "=", "``", "San", "Jose", "''"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "station", "as", "t1", "join", "status", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "station_id", "group", "by", "t2", ".", "station_id", "having", "avg", "(", "bikes_available", ")", ">", "value", "except", "select", "name", "from", "station", "where", "city", "=", "value"], "question": "What are the names of all stations that have more than 10 bikes available and are not located in San Jose?", "question_toks": ["What", "are", "the", "names", "of", "all", "stations", "that", "have", "more", "than", "10", "bikes", "available", "and", "are", "not", "located", "in", "San", "Jose", "?"], "guid": 2860}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | Find the names of Japanese constructors that have once earned more than 5 points?", "sql": "SELECT T1.name FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5", "example": {"db_id": "formula_1", "query": "SELECT T1.name FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5", "query_toks": ["SELECT", "T1.name", "FROM", "constructors", "AS", "T1", "JOIN", "constructorstandings", "AS", "T2", "ON", "T1.constructorid", "=", "T2.constructorid", "WHERE", "T1.nationality", "=", "``", "Japanese", "''", "AND", "T2.points", ">", "5"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "constructors", "as", "t1", "join", "constructorstandings", "as", "t2", "on", "t1", ".", "constructorid", "=", "t2", ".", "constructorid", "where", "t1", ".", "nationality", "=", "value", "and", "t2", ".", "points", ">", "value"], "question": "Find the names of Japanese constructors that have once earned more than 5 points?", "question_toks": ["Find", "the", "names", "of", "Japanese", "constructors", "that", "have", "once", "earned", "more", "than", "5", "points", "?"], "guid": 2861}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | Find the name of the club that has the most female students.", "sql": "SELECT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.sex  =  \"F\" GROUP BY t1.clubname ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "club_1", "query": "SELECT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.sex  =  \"F\" GROUP BY t1.clubname ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "t1.clubname", "FROM", "club", "AS", "t1", "JOIN", "member_of_club", "AS", "t2", "ON", "t1.clubid", "=", "t2.clubid", "JOIN", "student", "AS", "t3", "ON", "t2.stuid", "=", "t3.stuid", "WHERE", "t3.sex", "=", "``", "F", "''", "GROUP", "BY", "t1.clubname", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "clubname", "from", "club", "as", "t1", "join", "member_of_club", "as", "t2", "on", "t1", ".", "clubid", "=", "t2", ".", "clubid", "join", "student", "as", "t3", "on", "t2", ".", "stuid", "=", "t3", ".", "stuid", "where", "t3", ".", "sex", "=", "value", "group", "by", "t1", ".", "clubname", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Find the name of the club that has the most female students.", "question_toks": ["Find", "the", "name", "of", "the", "club", "that", "has", "the", "most", "female", "students", "."], "guid": 2862}}
{"text": "swimmer: ID, name, Nationality, meter_100, meter_200, meter_300, meter_400, meter_500, meter_600, meter_700; stadium: ID, name, Capacity, City, Country, Opening_year; event: ID, Name, Stadium_ID, Year; record: ID, Result, Swimmer_ID, Event_ID | Find the names of stadiums which have never had any event.", "sql": "SELECT name FROM stadium WHERE id NOT IN (SELECT stadium_id FROM event)", "example": {"db_id": "swimming", "query": "SELECT name FROM stadium WHERE id NOT IN (SELECT stadium_id FROM event)", "query_toks": ["SELECT", "name", "FROM", "stadium", "WHERE", "id", "NOT", "IN", "(", "SELECT", "stadium_id", "FROM", "event", ")"], "query_toks_no_value": ["select", "name", "from", "stadium", "where", "id", "not", "in", "(", "select", "stadium_id", "from", "event", ")"], "question": "Find the names of stadiums which have never had any event.", "question_toks": ["Find", "the", "names", "of", "stadiums", "which", "have", "never", "had", "any", "event", "."], "guid": 2863}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | How many trips did not end in San Francisco?", "sql": "SELECT count(*) FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id WHERE T2.city != \"San Francisco\"", "example": {"db_id": "bike_1", "query": "SELECT count(*) FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id WHERE T2.city != \"San Francisco\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "trip", "AS", "T1", "JOIN", "station", "AS", "T2", "ON", "T1.end_station_id", "=", "T2.id", "WHERE", "T2.city", "!", "=", "``", "San", "Francisco", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "trip", "as", "t1", "join", "station", "as", "t2", "on", "t1", ".", "end_station_id", "=", "t2", ".", "id", "where", "t2", ".", "city", "!", "=", "value"], "question": "How many trips did not end in San Francisco?", "question_toks": ["How", "many", "trips", "did", "not", "end", "in", "San", "Francisco", "?"], "guid": 2864}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | What are the numbers of races for each constructor id?", "sql": "SELECT count(*) ,  constructorid FROM constructorStandings GROUP BY constructorid", "example": {"db_id": "formula_1", "query": "SELECT count(*) ,  constructorid FROM constructorStandings GROUP BY constructorid", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "constructorid", "FROM", "constructorStandings", "GROUP", "BY", "constructorid"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "constructorid", "from", "constructorstandings", "group", "by", "constructorid"], "question": "What are the numbers of races for each constructor id?", "question_toks": ["What", "are", "the", "numbers", "of", "races", "for", "each", "constructor", "id", "?"], "guid": 2865}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | Which start station had the most trips starting from August? Give me the name and id of the station.", "sql": "SELECT start_station_name ,  start_station_id FROM trip WHERE start_date LIKE \"8/%\" GROUP BY start_station_name ORDER BY COUNT(*) DESC LIMIT 1", "example": {"db_id": "bike_1", "query": "SELECT start_station_name ,  start_station_id FROM trip WHERE start_date LIKE \"8/%\" GROUP BY start_station_name ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "start_station_name", ",", "start_station_id", "FROM", "trip", "WHERE", "start_date", "LIKE", "``", "8/", "%", "''", "GROUP", "BY", "start_station_name", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "start_station_name", ",", "start_station_id", "from", "trip", "where", "start_date", "like", "value", "group", "by", "start_station_name", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which start station had the most trips starting from August? Give me the name and id of the station.", "question_toks": ["Which", "start", "station", "had", "the", "most", "trips", "starting", "from", "August", "?", "Give", "me", "the", "name", "and", "id", "of", "the", "station", "."], "guid": 2866}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | What are the id and name of the stations that have ever had more than 12 bikes available?", "sql": "SELECT DISTINCT T1.id ,  T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  >  12", "example": {"db_id": "bike_1", "query": "SELECT DISTINCT T1.id ,  T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  >  12", "query_toks": ["SELECT", "DISTINCT", "T1.id", ",", "T1.name", "FROM", "station", "AS", "T1", "JOIN", "status", "AS", "T2", "ON", "T1.id", "=", "T2.station_id", "WHERE", "T2.bikes_available", ">", "12"], "query_toks_no_value": ["select", "distinct", "t1", ".", "id", ",", "t1", ".", "name", "from", "station", "as", "t1", "join", "status", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "station_id", "where", "t2", ".", "bikes_available", ">", "value"], "question": "What are the id and name of the stations that have ever had more than 12 bikes available?", "question_toks": ["What", "are", "the", "id", "and", "name", "of", "the", "stations", "that", "have", "ever", "had", "more", "than", "12", "bikes", "available", "?"], "guid": 2867}}
{"text": "college: College_ID, Name, Leader_Name, College_Location; member: Member_ID, Name, Country, College_ID; round: Round_ID, Member_ID, Decoration_Theme, Rank_in_Round | List the names of members in ascending alphabetical order.", "sql": "SELECT Name FROM member ORDER BY Name ASC", "example": {"db_id": "decoration_competition", "query": "SELECT Name FROM member ORDER BY Name ASC", "query_toks": ["SELECT", "Name", "FROM", "member", "ORDER", "BY", "Name", "ASC"], "query_toks_no_value": ["select", "name", "from", "member", "order", "by", "name", "asc"], "question": "List the names of members in ascending alphabetical order.", "question_toks": ["List", "the", "names", "of", "members", "in", "ascending", "alphabetical", "order", "."], "guid": 2868}}
{"text": "body_builder: Body_Builder_ID, People_ID, Snatch, Clean_Jerk, Total; people: People_ID, Name, Height, Weight, Birth_Date, Birth_Place | Show all information about each body builder.", "sql": "SELECT * FROM body_builder", "example": {"db_id": "body_builder", "query": "SELECT * FROM body_builder", "query_toks": ["SELECT", "*", "FROM", "body_builder"], "query_toks_no_value": ["select", "*", "from", "body_builder"], "question": "Show all information about each body builder.", "question_toks": ["Show", "all", "information", "about", "each", "body", "builder", "."], "guid": 2869}}
{"text": "basketball_match: Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home; university: School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference | What are the enrollment and primary conference for the university which was founded the earliest?", "sql": "SELECT enrollment ,  primary_conference FROM university ORDER BY founded LIMIT 1", "example": {"db_id": "university_basketball", "query": "SELECT enrollment ,  primary_conference FROM university ORDER BY founded LIMIT 1", "query_toks": ["SELECT", "enrollment", ",", "primary_conference", "FROM", "university", "ORDER", "BY", "founded", "LIMIT", "1"], "query_toks_no_value": ["select", "enrollment", ",", "primary_conference", "from", "university", "order", "by", "founded", "limit", "value"], "question": "What are the enrollment and primary conference for the university which was founded the earliest?", "question_toks": ["What", "are", "the", "enrollment", "and", "primary", "conference", "for", "the", "university", "which", "was", "founded", "the", "earliest", "?"], "guid": 2870}}
{"text": "basketball_match: Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home; university: School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference | List all public schools and their locations.", "sql": "SELECT school ,  LOCATION FROM university WHERE affiliation  =  'Public'", "example": {"db_id": "university_basketball", "query": "SELECT school ,  LOCATION FROM university WHERE affiliation  =  'Public'", "query_toks": ["SELECT", "school", ",", "LOCATION", "FROM", "university", "WHERE", "affiliation", "=", "'Public", "'"], "query_toks_no_value": ["select", "school", ",", "location", "from", "university", "where", "affiliation", "=", "value"], "question": "List all public schools and their locations.", "question_toks": ["List", "all", "public", "schools", "and", "their", "locations", "."], "guid": 2871}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | How many members does the club \"Tennis Club\" has?", "sql": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Tennis Club\"", "example": {"db_id": "club_1", "query": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Tennis Club\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "club", "AS", "t1", "JOIN", "member_of_club", "AS", "t2", "ON", "t1.clubid", "=", "t2.clubid", "JOIN", "student", "AS", "t3", "ON", "t2.stuid", "=", "t3.stuid", "WHERE", "t1.clubname", "=", "``", "Tennis", "Club", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "club", "as", "t1", "join", "member_of_club", "as", "t2", "on", "t1", ".", "clubid", "=", "t2", ".", "clubid", "join", "student", "as", "t3", "on", "t2", ".", "stuid", "=", "t3", ".", "stuid", "where", "t1", ".", "clubname", "=", "value"], "question": "How many members does the club \"Tennis Club\" has?", "question_toks": ["How", "many", "members", "does", "the", "club", "``", "Tennis", "Club", "''", "has", "?"], "guid": 2872}}
{"text": "gymnast: Gymnast_ID, Floor_Exercise_Points, Pommel_Horse_Points, Rings_Points, Vault_Points, Parallel_Bars_Points, Horizontal_Bar_Points, Total_Points; people: People_ID, Name, Age, Height, Hometown | What is the total point count of the youngest gymnast?", "sql": "SELECT T1.Total_Points FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T2.Age ASC LIMIT 1", "example": {"db_id": "gymnast", "query": "SELECT T1.Total_Points FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T2.Age ASC LIMIT 1", "query_toks": ["SELECT", "T1.Total_Points", "FROM", "gymnast", "AS", "T1", "JOIN", "people", "AS", "T2", "ON", "T1.Gymnast_ID", "=", "T2.People_ID", "ORDER", "BY", "T2.Age", "ASC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "total_points", "from", "gymnast", "as", "t1", "join", "people", "as", "t2", "on", "t1", ".", "gymnast_id", "=", "t2", ".", "people_id", "order", "by", "t2", ".", "age", "asc", "limit", "value"], "question": "What is the total point count of the youngest gymnast?", "question_toks": ["What", "is", "the", "total", "point", "count", "of", "the", "youngest", "gymnast", "?"], "guid": 2873}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | How many different players trained for more than 1000 hours?", "sql": "SELECT count(*) FROM Player WHERE HS  >  1000", "example": {"db_id": "soccer_2", "query": "SELECT count(*) FROM Player WHERE HS  >  1000", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Player", "WHERE", "HS", ">", "1000"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "player", "where", "hs", ">", "value"], "question": "How many different players trained for more than 1000 hours?", "question_toks": ["How", "many", "different", "players", "trained", "for", "more", "than", "1000", "hours", "?"], "guid": 2874}}
{"text": "players: player_id, first_name, last_name, hand, birth_date, country_code; matches: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank; rankings: ranking_date, ranking, player_id, ranking_points, tours | What are the first names of all players, and their average rankings?", "sql": "SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name", "example": {"db_id": "wta_1", "query": "SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name", "query_toks": ["SELECT", "avg", "(", "ranking", ")", ",", "T1.first_name", "FROM", "players", "AS", "T1", "JOIN", "rankings", "AS", "T2", "ON", "T1.player_id", "=", "T2.player_id", "GROUP", "BY", "T1.first_name"], "query_toks_no_value": ["select", "avg", "(", "ranking", ")", ",", "t1", ".", "first_name", "from", "players", "as", "t1", "join", "rankings", "as", "t2", "on", "t1", ".", "player_id", "=", "t2", ".", "player_id", "group", "by", "t1", ".", "first_name"], "question": "What are the first names of all players, and their average rankings?", "question_toks": ["What", "are", "the", "first", "names", "of", "all", "players", ",", "and", "their", "average", "rankings", "?"], "guid": 2875}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | When and in what zip code did max temperature reach 80?", "sql": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80", "example": {"db_id": "bike_1", "query": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80", "query_toks": ["SELECT", "date", ",", "zip_code", "FROM", "weather", "WHERE", "max_temperature_f", ">", "=", "80"], "query_toks_no_value": ["select", "date", ",", "zip_code", "from", "weather", "where", "max_temperature_f", ">", "=", "value"], "question": "When and in what zip code did max temperature reach 80?", "question_toks": ["When", "and", "in", "what", "zip", "code", "did", "max", "temperature", "reach", "80", "?"], "guid": 2876}}
{"text": "country: Country_id, Country_name, Capital, Official_native_language; team: Team_id, Name; match_season: Season, Player, Position, Country, Team, Draft_Pick_Number, Draft_Class, College; player: Player_ID, Player, Years_Played, Total_WL, Singles_WL, Doubles_WL, Team | What are the distinct positions of the players from a country whose capital is Dublin?", "sql": "SELECT DISTINCT T2.Position FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Capital  =  \"Dublin\"", "example": {"db_id": "match_season", "query": "SELECT DISTINCT T2.Position FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Capital  =  \"Dublin\"", "query_toks": ["SELECT", "DISTINCT", "T2.Position", "FROM", "country", "AS", "T1", "JOIN", "match_season", "AS", "T2", "ON", "T1.Country_id", "=", "T2.Country", "WHERE", "T1.Capital", "=", "``", "Dublin", "''"], "query_toks_no_value": ["select", "distinct", "t2", ".", "position", "from", "country", "as", "t1", "join", "match_season", "as", "t2", "on", "t1", ".", "country_id", "=", "t2", ".", "country", "where", "t1", ".", "capital", "=", "value"], "question": "What are the distinct positions of the players from a country whose capital is Dublin?", "question_toks": ["What", "are", "the", "distinct", "positions", "of", "the", "players", "from", "a", "country", "whose", "capital", "is", "Dublin", "?"], "guid": 2877}}
{"text": "poker_player: Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings; people: People_ID, Nationality, Name, Birth_Date, Height | What is the maximum number of final tables made among poker players with earnings less than 200000?", "sql": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000", "example": {"db_id": "poker_player", "query": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000", "query_toks": ["SELECT", "max", "(", "Final_Table_Made", ")", "FROM", "poker_player", "WHERE", "Earnings", "<", "200000"], "query_toks_no_value": ["select", "max", "(", "final_table_made", ")", "from", "poker_player", "where", "earnings", "<", "value"], "question": "What is the maximum number of final tables made among poker players with earnings less than 200000?", "question_toks": ["What", "is", "the", "maximum", "number", "of", "final", "tables", "made", "among", "poker", "players", "with", "earnings", "less", "than", "200000", "?"], "guid": 2878}}
{"text": "swimmer: ID, name, Nationality, meter_100, meter_200, meter_300, meter_400, meter_500, meter_600, meter_700; stadium: ID, name, Capacity, City, Country, Opening_year; event: ID, Name, Stadium_ID, Year; record: ID, Result, Swimmer_ID, Event_ID | Find the names of all swimmers, sorted by their 100 meter scores in ascending order.", "sql": "SELECT name FROM swimmer ORDER BY meter_100", "example": {"db_id": "swimming", "query": "SELECT name FROM swimmer ORDER BY meter_100", "query_toks": ["SELECT", "name", "FROM", "swimmer", "ORDER", "BY", "meter_100"], "query_toks_no_value": ["select", "name", "from", "swimmer", "order", "by", "meter_100"], "question": "Find the names of all swimmers, sorted by their 100 meter scores in ascending order.", "question_toks": ["Find", "the", "names", "of", "all", "swimmers", ",", "sorted", "by", "their", "100", "meter", "scores", "in", "ascending", "order", "."], "guid": 2879}}
{"text": "race: Race_ID, Name, Class, Date, Track_ID; track: Track_ID, Name, Location, Seating, Year_Opened | What is the name, location and seating for the most recently opened track?", "sql": "SELECT name ,  LOCATION ,  seating FROM track ORDER BY year_opened DESC LIMIT 1", "example": {"db_id": "race_track", "query": "SELECT name ,  LOCATION ,  seating FROM track ORDER BY year_opened DESC LIMIT 1", "query_toks": ["SELECT", "name", ",", "LOCATION", ",", "seating", "FROM", "track", "ORDER", "BY", "year_opened", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "name", ",", "location", ",", "seating", "from", "track", "order", "by", "year_opened", "desc", "limit", "value"], "question": "What is the name, location and seating for the most recently opened track?", "question_toks": ["What", "is", "the", "name", ",", "location", "and", "seating", "for", "the", "most", "recently", "opened", "track", "?"], "guid": 2880}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | Find the first name and last name for the \"CTO\" of the club \"Hopkins Student Enterprises\"?", "sql": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Hopkins Student Enterprises\" AND t2.position  =  \"CTO\"", "example": {"db_id": "club_1", "query": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Hopkins Student Enterprises\" AND t2.position  =  \"CTO\"", "query_toks": ["SELECT", "t3.fname", ",", "t3.lname", "FROM", "club", "AS", "t1", "JOIN", "member_of_club", "AS", "t2", "ON", "t1.clubid", "=", "t2.clubid", "JOIN", "student", "AS", "t3", "ON", "t2.stuid", "=", "t3.stuid", "WHERE", "t1.clubname", "=", "``", "Hopkins", "Student", "Enterprises", "''", "AND", "t2.position", "=", "``", "CTO", "''"], "query_toks_no_value": ["select", "t3", ".", "fname", ",", "t3", ".", "lname", "from", "club", "as", "t1", "join", "member_of_club", "as", "t2", "on", "t1", ".", "clubid", "=", "t2", ".", "clubid", "join", "student", "as", "t3", "on", "t2", ".", "stuid", "=", "t3", ".", "stuid", "where", "t1", ".", "clubname", "=", "value", "and", "t2", ".", "position", "=", "value"], "question": "Find the first name and last name for the \"CTO\" of the club \"Hopkins Student Enterprises\"?", "question_toks": ["Find", "the", "first", "name", "and", "last", "name", "for", "the", "``", "CTO", "''", "of", "the", "club", "``", "Hopkins", "Student", "Enterprises", "''", "?"], "guid": 2881}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | How many days had both mean humidity above 50 and mean visibility above 8?", "sql": "SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8", "example": {"db_id": "bike_1", "query": "SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8", "query_toks": ["SELECT", "COUNT", "(", "*", ")", "FROM", "weather", "WHERE", "mean_humidity", ">", "50", "AND", "mean_visibility_miles", ">", "8"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "weather", "where", "mean_humidity", ">", "value", "and", "mean_visibility_miles", ">", "value"], "question": "How many days had both mean humidity above 50 and mean visibility above 8?", "question_toks": ["How", "many", "days", "had", "both", "mean", "humidity", "above", "50", "and", "mean", "visibility", "above", "8", "?"], "guid": 2882}}
{"text": "swimmer: ID, name, Nationality, meter_100, meter_200, meter_300, meter_400, meter_500, meter_600, meter_700; stadium: ID, name, Capacity, City, Country, Opening_year; event: ID, Name, Stadium_ID, Year; record: ID, Result, Swimmer_ID, Event_ID | Find the name of the swimmer who has at least 2 records.", "sql": "SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id GROUP BY t2.swimmer_id HAVING count(*)  >=  2", "example": {"db_id": "swimming", "query": "SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id GROUP BY t2.swimmer_id HAVING count(*)  >=  2", "query_toks": ["SELECT", "t1.name", "FROM", "swimmer", "AS", "t1", "JOIN", "record", "AS", "t2", "ON", "t1.id", "=", "t2.swimmer_id", "GROUP", "BY", "t2.swimmer_id", "HAVING", "count", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "swimmer", "as", "t1", "join", "record", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "swimmer_id", "group", "by", "t2", ".", "swimmer_id", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "Find the name of the swimmer who has at least 2 records.", "question_toks": ["Find", "the", "name", "of", "the", "swimmer", "who", "has", "at", "least", "2", "records", "."], "guid": 2883}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | Find the description of the club \"Pen and Paper Gaming\".", "sql": "SELECT clubdesc FROM club WHERE clubname  =  \"Pen and Paper Gaming\"", "example": {"db_id": "club_1", "query": "SELECT clubdesc FROM club WHERE clubname  =  \"Pen and Paper Gaming\"", "query_toks": ["SELECT", "clubdesc", "FROM", "club", "WHERE", "clubname", "=", "``", "Pen", "and", "Paper", "Gaming", "''"], "query_toks_no_value": ["select", "clubdesc", "from", "club", "where", "clubname", "=", "value"], "question": "Find the description of the club \"Pen and Paper Gaming\".", "question_toks": ["Find", "the", "description", "of", "the", "club", "``", "Pen", "and", "Paper", "Gaming", "''", "."], "guid": 2884}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | Find the name of players whose card is yes in the descending order of training hours.", "sql": "SELECT pName FROM Player WHERE yCard  =  'yes' ORDER BY HS DESC", "example": {"db_id": "soccer_2", "query": "SELECT pName FROM Player WHERE yCard  =  'yes' ORDER BY HS DESC", "query_toks": ["SELECT", "pName", "FROM", "Player", "WHERE", "yCard", "=", "'yes", "'", "ORDER", "BY", "HS", "DESC"], "query_toks_no_value": ["select", "pname", "from", "player", "where", "ycard", "=", "value", "order", "by", "hs", "desc"], "question": "Find the name of players whose card is yes in the descending order of training hours.", "question_toks": ["Find", "the", "name", "of", "players", "whose", "card", "is", "yes", "in", "the", "descending", "order", "of", "training", "hours", "."], "guid": 2885}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | What is the total number of enrollment of schools that do not have any goalie player?", "sql": "SELECT sum(enr) FROM college WHERE cName NOT IN (SELECT cName FROM tryout WHERE pPos  =  \"goalie\")", "example": {"db_id": "soccer_2", "query": "SELECT sum(enr) FROM college WHERE cName NOT IN (SELECT cName FROM tryout WHERE pPos  =  \"goalie\")", "query_toks": ["SELECT", "sum", "(", "enr", ")", "FROM", "college", "WHERE", "cName", "NOT", "IN", "(", "SELECT", "cName", "FROM", "tryout", "WHERE", "pPos", "=", "``", "goalie", "''", ")"], "query_toks_no_value": ["select", "sum", "(", "enr", ")", "from", "college", "where", "cname", "not", "in", "(", "select", "cname", "from", "tryout", "where", "ppos", "=", "value", ")"], "question": "What is the total number of enrollment of schools that do not have any goalie player?", "question_toks": ["What", "is", "the", "total", "number", "of", "enrollment", "of", "schools", "that", "do", "not", "have", "any", "goalie", "player", "?"], "guid": 2886}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | What are the different driver ids and nationalities of all drivers who had a laptime of more than 100000 milliseconds?", "sql": "SELECT DISTINCT T1.driverid ,  T1.nationality FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds >  100000", "example": {"db_id": "formula_1", "query": "SELECT DISTINCT T1.driverid ,  T1.nationality FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds >  100000", "query_toks": ["SELECT", "DISTINCT", "T1.driverid", ",", "T1.nationality", "FROM", "drivers", "AS", "T1", "JOIN", "laptimes", "AS", "T2", "ON", "T1.driverid", "=", "T2.driverid", "WHERE", "T2.milliseconds", ">", "100000"], "query_toks_no_value": ["select", "distinct", "t1", ".", "driverid", ",", "t1", ".", "nationality", "from", "drivers", "as", "t1", "join", "laptimes", "as", "t2", "on", "t1", ".", "driverid", "=", "t2", ".", "driverid", "where", "t2", ".", "milliseconds", ">", "value"], "question": "What are the different driver ids and nationalities of all drivers who had a laptime of more than 100000 milliseconds?", "question_toks": ["What", "are", "the", "different", "driver", "ids", "and", "nationalities", "of", "all", "drivers", "who", "had", "a", "laptime", "of", "more", "than", "100000", "milliseconds", "?"], "guid": 2887}}
{"text": "swimmer: ID, name, Nationality, meter_100, meter_200, meter_300, meter_400, meter_500, meter_600, meter_700; stadium: ID, name, Capacity, City, Country, Opening_year; event: ID, Name, Stadium_ID, Year; record: ID, Result, Swimmer_ID, Event_ID | How many different countries are all the swimmers from?", "sql": "SELECT count(DISTINCT nationality) FROM swimmer", "example": {"db_id": "swimming", "query": "SELECT count(DISTINCT nationality) FROM swimmer", "query_toks": ["SELECT", "count", "(", "DISTINCT", "nationality", ")", "FROM", "swimmer"], "query_toks_no_value": ["select", "count", "(", "distinct", "nationality", ")", "from", "swimmer"], "question": "How many different countries are all the swimmers from?", "question_toks": ["How", "many", "different", "countries", "are", "all", "the", "swimmers", "from", "?"], "guid": 2888}}
{"text": "players: player_id, first_name, last_name, hand, birth_date, country_code; matches: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank; rankings: ranking_date, ranking, player_id, ranking_points, tours | find the number of distinct country codes of all players.", "sql": "SELECT count(DISTINCT country_code) FROM players", "example": {"db_id": "wta_1", "query": "SELECT count(DISTINCT country_code) FROM players", "query_toks": ["SELECT", "count", "(", "DISTINCT", "country_code", ")", "FROM", "players"], "query_toks_no_value": ["select", "count", "(", "distinct", "country_code", ")", "from", "players"], "question": "find the number of distinct country codes of all players.", "question_toks": ["find", "the", "number", "of", "distinct", "country", "codes", "of", "all", "players", "."], "guid": 2889}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | Give me a list of names and years of races that had any driver whose forename is Lewis?", "sql": "SELECT T2.name ,  T2.year FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T1.driverid = T3.driverid WHERE T3.forename = \"Lewis\"", "example": {"db_id": "formula_1", "query": "SELECT T2.name ,  T2.year FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T1.driverid = T3.driverid WHERE T3.forename = \"Lewis\"", "query_toks": ["SELECT", "T2.name", ",", "T2.year", "FROM", "results", "AS", "T1", "JOIN", "races", "AS", "T2", "ON", "T1.raceid", "=", "T2.raceid", "JOIN", "drivers", "AS", "T3", "ON", "T1.driverid", "=", "T3.driverid", "WHERE", "T3.forename", "=", "``", "Lewis", "''"], "query_toks_no_value": ["select", "t2", ".", "name", ",", "t2", ".", "year", "from", "results", "as", "t1", "join", "races", "as", "t2", "on", "t1", ".", "raceid", "=", "t2", ".", "raceid", "join", "drivers", "as", "t3", "on", "t1", ".", "driverid", "=", "t3", ".", "driverid", "where", "t3", ".", "forename", "=", "value"], "question": "Give me a list of names and years of races that had any driver whose forename is Lewis?", "question_toks": ["Give", "me", "a", "list", "of", "names", "and", "years", "of", "races", "that", "had", "any", "driver", "whose", "forename", "is", "Lewis", "?"], "guid": 2890}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | What are the unique types of player positions in the tryout?", "sql": "SELECT count(DISTINCT pPos) FROM tryout", "example": {"db_id": "soccer_2", "query": "SELECT count(DISTINCT pPos) FROM tryout", "query_toks": ["SELECT", "count", "(", "DISTINCT", "pPos", ")", "FROM", "tryout"], "query_toks_no_value": ["select", "count", "(", "distinct", "ppos", ")", "from", "tryout"], "question": "What are the unique types of player positions in the tryout?", "question_toks": ["What", "are", "the", "unique", "types", "of", "player", "positions", "in", "the", "tryout", "?"], "guid": 2891}}
{"text": "swimmer: ID, name, Nationality, meter_100, meter_200, meter_300, meter_400, meter_500, meter_600, meter_700; stadium: ID, name, Capacity, City, Country, Opening_year; event: ID, Name, Stadium_ID, Year; record: ID, Result, Swimmer_ID, Event_ID | Find the names of the swimmers who have both \"win\" and \"loss\" results in the record.", "sql": "SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id WHERE RESULT  =  'Win' INTERSECT SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id WHERE RESULT  =  'Loss'", "example": {"db_id": "swimming", "query": "SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id WHERE RESULT  =  'Win' INTERSECT SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id WHERE RESULT  =  'Loss'", "query_toks": ["SELECT", "t1.name", "FROM", "swimmer", "AS", "t1", "JOIN", "record", "AS", "t2", "ON", "t1.id", "=", "t2.swimmer_id", "WHERE", "RESULT", "=", "'Win", "'", "INTERSECT", "SELECT", "t1.name", "FROM", "swimmer", "AS", "t1", "JOIN", "record", "AS", "t2", "ON", "t1.id", "=", "t2.swimmer_id", "WHERE", "RESULT", "=", "'Loss", "'"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "swimmer", "as", "t1", "join", "record", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "swimmer_id", "where", "result", "=", "value", "intersect", "select", "t1", ".", "name", "from", "swimmer", "as", "t1", "join", "record", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "swimmer_id", "where", "result", "=", "value"], "question": "Find the names of the swimmers who have both \"win\" and \"loss\" results in the record.", "question_toks": ["Find", "the", "names", "of", "the", "swimmers", "who", "have", "both", "``", "win", "''", "and", "``", "loss", "''", "results", "in", "the", "record", "."], "guid": 2892}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | What are the start station's name and id for the one that had the most start trips in August?", "sql": "SELECT start_station_name ,  start_station_id FROM trip WHERE start_date LIKE \"8/%\" GROUP BY start_station_name ORDER BY COUNT(*) DESC LIMIT 1", "example": {"db_id": "bike_1", "query": "SELECT start_station_name ,  start_station_id FROM trip WHERE start_date LIKE \"8/%\" GROUP BY start_station_name ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "start_station_name", ",", "start_station_id", "FROM", "trip", "WHERE", "start_date", "LIKE", "``", "8/", "%", "''", "GROUP", "BY", "start_station_name", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "start_station_name", ",", "start_station_id", "from", "trip", "where", "start_date", "like", "value", "group", "by", "start_station_name", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What are the start station's name and id for the one that had the most start trips in August?", "question_toks": ["What", "are", "the", "start", "station", "'s", "name", "and", "id", "for", "the", "one", "that", "had", "the", "most", "start", "trips", "in", "August", "?"], "guid": 2893}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | What is the latitude, longitude, city of the station from which the shortest trip started?", "sql": "SELECT T1.lat ,  T1.long ,  T1.city FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id ORDER BY T2.duration LIMIT 1", "example": {"db_id": "bike_1", "query": "SELECT T1.lat ,  T1.long ,  T1.city FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id ORDER BY T2.duration LIMIT 1", "query_toks": ["SELECT", "T1.lat", ",", "T1.long", ",", "T1.city", "FROM", "station", "AS", "T1", "JOIN", "trip", "AS", "T2", "ON", "T1.id", "=", "T2.start_station_id", "ORDER", "BY", "T2.duration", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "lat", ",", "t1", ".", "long", ",", "t1", ".", "city", "from", "station", "as", "t1", "join", "trip", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "start_station_id", "order", "by", "t2", ".", "duration", "limit", "value"], "question": "What is the latitude, longitude, city of the station from which the shortest trip started?", "question_toks": ["What", "is", "the", "latitude", ",", "longitude", ",", "city", "of", "the", "station", "from", "which", "the", "shortest", "trip", "started", "?"], "guid": 2894}}
{"text": "club: Club_ID, name, Region, Start_year; club_rank: Rank, Club_ID, Gold, Silver, Bronze, Total; player: Player_ID, name, Position, Club_ID, Apps, Tries, Goals, Points; competition: Competition_ID, Year, Competition_type, Country; competition_result: Competition_ID, Club_ID_1, Club_ID_2, Score | What are the distinct years in which the competitions type is not \"Tournament\"?", "sql": "SELECT DISTINCT YEAR FROM competition WHERE Competition_type != \"Tournament\"", "example": {"db_id": "sports_competition", "query": "SELECT DISTINCT YEAR FROM competition WHERE Competition_type != \"Tournament\"", "query_toks": ["SELECT", "DISTINCT", "YEAR", "FROM", "competition", "WHERE", "Competition_type", "!", "=", "``", "Tournament", "''"], "query_toks_no_value": ["select", "distinct", "year", "from", "competition", "where", "competition_type", "!", "=", "value"], "question": "What are the distinct years in which the competitions type is not \"Tournament\"?", "question_toks": ["What", "are", "the", "distinct", "years", "in", "which", "the", "competitions", "type", "is", "not", "``", "Tournament", "''", "?"], "guid": 2895}}
{"text": "players: player_id, first_name, last_name, hand, birth_date, country_code; matches: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank; rankings: ranking_date, ranking, player_id, ranking_points, tours | Find the name and rank of the 3 youngest winners across all matches.", "sql": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3", "example": {"db_id": "wta_1", "query": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3", "query_toks": ["SELECT", "DISTINCT", "winner_name", ",", "winner_rank", "FROM", "matches", "ORDER", "BY", "winner_age", "LIMIT", "3"], "query_toks_no_value": ["select", "distinct", "winner_name", ",", "winner_rank", "from", "matches", "order", "by", "winner_age", "limit", "value"], "question": "Find the name and rank of the 3 youngest winners across all matches.", "question_toks": ["Find", "the", "name", "and", "rank", "of", "the", "3", "youngest", "winners", "across", "all", "matches", "."], "guid": 2896}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | What are the ids and last names of all drivers who participated in the most races?", "sql": "SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "formula_1", "query": "SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.driverid", ",", "T1.surname", "FROM", "drivers", "AS", "T1", "JOIN", "results", "AS", "T2", "ON", "T1.driverid", "=", "T2.driverid", "JOIN", "races", "AS", "T3", "ON", "T2.raceid", "=", "T3.raceid", "GROUP", "BY", "T1.driverid", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "driverid", ",", "t1", ".", "surname", "from", "drivers", "as", "t1", "join", "results", "as", "t2", "on", "t1", ".", "driverid", "=", "t2", ".", "driverid", "join", "races", "as", "t3", "on", "t2", ".", "raceid", "=", "t3", ".", "raceid", "group", "by", "t1", ".", "driverid", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What are the ids and last names of all drivers who participated in the most races?", "question_toks": ["What", "are", "the", "ids", "and", "last", "names", "of", "all", "drivers", "who", "participated", "in", "the", "most", "races", "?"], "guid": 2897}}
{"text": "mountain: Mountain_ID, Name, Height, Prominence, Range, Country; climber: Climber_ID, Name, Country, Time, Points, Mountain_ID | What are the times used by climbers who climbed mountains in the country of Uganda?", "sql": "SELECT T1.Time FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T2.Country  =  \"Uganda\"", "example": {"db_id": "climbing", "query": "SELECT T1.Time FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T2.Country  =  \"Uganda\"", "query_toks": ["SELECT", "T1.Time", "FROM", "climber", "AS", "T1", "JOIN", "mountain", "AS", "T2", "ON", "T1.Mountain_ID", "=", "T2.Mountain_ID", "WHERE", "T2.Country", "=", "``", "Uganda", "''"], "query_toks_no_value": ["select", "t1", ".", "time", "from", "climber", "as", "t1", "join", "mountain", "as", "t2", "on", "t1", ".", "mountain_id", "=", "t2", ".", "mountain_id", "where", "t2", ".", "country", "=", "value"], "question": "What are the times used by climbers who climbed mountains in the country of Uganda?", "question_toks": ["What", "are", "the", "times", "used", "by", "climbers", "who", "climbed", "mountains", "in", "the", "country", "of", "Uganda", "?"], "guid": 2898}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | Find the distinct names of all races held between 2014 and 2017?", "sql": "SELECT DISTINCT name FROM races WHERE YEAR BETWEEN 2014 AND 2017", "example": {"db_id": "formula_1", "query": "SELECT DISTINCT name FROM races WHERE YEAR BETWEEN 2014 AND 2017", "query_toks": ["SELECT", "DISTINCT", "name", "FROM", "races", "WHERE", "YEAR", "BETWEEN", "2014", "AND", "2017"], "query_toks_no_value": ["select", "distinct", "name", "from", "races", "where", "year", "between", "value", "and", "value"], "question": "Find the distinct names of all races held between 2014 and 2017?", "question_toks": ["Find", "the", "distinct", "names", "of", "all", "races", "held", "between", "2014", "and", "2017", "?"], "guid": 2899}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | Find all the distinct id and nationality of drivers who have had laptime more than 100000 milliseconds?", "sql": "SELECT DISTINCT T1.driverid ,  T1.nationality FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds >  100000", "example": {"db_id": "formula_1", "query": "SELECT DISTINCT T1.driverid ,  T1.nationality FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds >  100000", "query_toks": ["SELECT", "DISTINCT", "T1.driverid", ",", "T1.nationality", "FROM", "drivers", "AS", "T1", "JOIN", "laptimes", "AS", "T2", "ON", "T1.driverid", "=", "T2.driverid", "WHERE", "T2.milliseconds", ">", "100000"], "query_toks_no_value": ["select", "distinct", "t1", ".", "driverid", ",", "t1", ".", "nationality", "from", "drivers", "as", "t1", "join", "laptimes", "as", "t2", "on", "t1", ".", "driverid", "=", "t2", ".", "driverid", "where", "t2", ".", "milliseconds", ">", "value"], "question": "Find all the distinct id and nationality of drivers who have had laptime more than 100000 milliseconds?", "question_toks": ["Find", "all", "the", "distinct", "id", "and", "nationality", "of", "drivers", "who", "have", "had", "laptime", "more", "than", "100000", "milliseconds", "?"], "guid": 2900}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | What is the zip code in which the average mean sea level pressure is the lowest?", "sql": "SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT 1", "example": {"db_id": "bike_1", "query": "SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT 1", "query_toks": ["SELECT", "zip_code", "FROM", "weather", "GROUP", "BY", "zip_code", "ORDER", "BY", "avg", "(", "mean_sea_level_pressure_inches", ")", "LIMIT", "1"], "query_toks_no_value": ["select", "zip_code", "from", "weather", "group", "by", "zip_code", "order", "by", "avg", "(", "mean_sea_level_pressure_inches", ")", "limit", "value"], "question": "What is the zip code in which the average mean sea level pressure is the lowest?", "question_toks": ["What", "is", "the", "zip", "code", "in", "which", "the", "average", "mean", "sea", "level", "pressure", "is", "the", "lowest", "?"], "guid": 2901}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | Find the day in which the difference between the max temperature and min temperature was the smallest. Also report the difference.", "sql": "SELECT date ,  max_temperature_f - min_temperature_f FROM weather ORDER BY max_temperature_f - min_temperature_f LIMIT 1", "example": {"db_id": "bike_1", "query": "SELECT date ,  max_temperature_f - min_temperature_f FROM weather ORDER BY max_temperature_f - min_temperature_f LIMIT 1", "query_toks": ["SELECT", "date", ",", "max_temperature_f", "-", "min_temperature_f", "FROM", "weather", "ORDER", "BY", "max_temperature_f", "-", "min_temperature_f", "LIMIT", "1"], "query_toks_no_value": ["select", "date", ",", "max_temperature_f", "-", "min_temperature_f", "from", "weather", "order", "by", "max_temperature_f", "-", "min_temperature_f", "limit", "value"], "question": "Find the day in which the difference between the max temperature and min temperature was the smallest. Also report the difference.", "question_toks": ["Find", "the", "day", "in", "which", "the", "difference", "between", "the", "max", "temperature", "and", "min", "temperature", "was", "the", "smallest", ".", "Also", "report", "the", "difference", "."], "guid": 2902}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | Find the names of schools that have some players in the mid position but not in the goalie position.", "sql": "SELECT cName FROM  tryout WHERE pPos  =  'mid' EXCEPT SELECT cName FROM  tryout WHERE pPos  =  'goalie'", "example": {"db_id": "soccer_2", "query": "SELECT cName FROM  tryout WHERE pPos  =  'mid' EXCEPT SELECT cName FROM  tryout WHERE pPos  =  'goalie'", "query_toks": ["SELECT", "cName", "FROM", "tryout", "WHERE", "pPos", "=", "'mid", "'", "EXCEPT", "SELECT", "cName", "FROM", "tryout", "WHERE", "pPos", "=", "'goalie", "'"], "query_toks_no_value": ["select", "cname", "from", "tryout", "where", "ppos", "=", "value", "except", "select", "cname", "from", "tryout", "where", "ppos", "=", "value"], "question": "Find the names of schools that have some players in the mid position but not in the goalie position.", "question_toks": ["Find", "the", "names", "of", "schools", "that", "have", "some", "players", "in", "the", "mid", "position", "but", "not", "in", "the", "goalie", "position", "."], "guid": 2903}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | Find the names of all the clubs that have at least a member from the city with city code \"BAL\".", "sql": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.city_code  =  \"BAL\"", "example": {"db_id": "club_1", "query": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.city_code  =  \"BAL\"", "query_toks": ["SELECT", "DISTINCT", "t1.clubname", "FROM", "club", "AS", "t1", "JOIN", "member_of_club", "AS", "t2", "ON", "t1.clubid", "=", "t2.clubid", "JOIN", "student", "AS", "t3", "ON", "t2.stuid", "=", "t3.stuid", "WHERE", "t3.city_code", "=", "``", "BAL", "''"], "query_toks_no_value": ["select", "distinct", "t1", ".", "clubname", "from", "club", "as", "t1", "join", "member_of_club", "as", "t2", "on", "t1", ".", "clubid", "=", "t2", ".", "clubid", "join", "student", "as", "t3", "on", "t2", ".", "stuid", "=", "t3", ".", "stuid", "where", "t3", ".", "city_code", "=", "value"], "question": "Find the names of all the clubs that have at least a member from the city with city code \"BAL\".", "question_toks": ["Find", "the", "names", "of", "all", "the", "clubs", "that", "have", "at", "least", "a", "member", "from", "the", "city", "with", "city", "code", "``", "BAL", "''", "."], "guid": 2904}}
{"text": "club: Club_ID, name, Region, Start_year; club_rank: Rank, Club_ID, Gold, Silver, Bronze, Total; player: Player_ID, name, Position, Club_ID, Apps, Tries, Goals, Points; competition: Competition_ID, Year, Competition_type, Country; competition_result: Competition_ID, Club_ID_1, Club_ID_2, Score | How many clubs are there?", "sql": "SELECT count(*) FROM club", "example": {"db_id": "sports_competition", "query": "SELECT count(*) FROM club", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "club"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "club"], "question": "How many clubs are there?", "question_toks": ["How", "many", "clubs", "are", "there", "?"], "guid": 2905}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | Which clubs have one or more members from the city with code \"BAL\"? Give me the names of the clubs.", "sql": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.city_code  =  \"BAL\"", "example": {"db_id": "club_1", "query": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.city_code  =  \"BAL\"", "query_toks": ["SELECT", "DISTINCT", "t1.clubname", "FROM", "club", "AS", "t1", "JOIN", "member_of_club", "AS", "t2", "ON", "t1.clubid", "=", "t2.clubid", "JOIN", "student", "AS", "t3", "ON", "t2.stuid", "=", "t3.stuid", "WHERE", "t3.city_code", "=", "``", "BAL", "''"], "query_toks_no_value": ["select", "distinct", "t1", ".", "clubname", "from", "club", "as", "t1", "join", "member_of_club", "as", "t2", "on", "t1", ".", "clubid", "=", "t2", ".", "clubid", "join", "student", "as", "t3", "on", "t2", ".", "stuid", "=", "t3", ".", "stuid", "where", "t3", ".", "city_code", "=", "value"], "question": "Which clubs have one or more members from the city with code \"BAL\"? Give me the names of the clubs.", "question_toks": ["Which", "clubs", "have", "one", "or", "more", "members", "from", "the", "city", "with", "code", "``", "BAL", "''", "?", "Give", "me", "the", "names", "of", "the", "clubs", "."], "guid": 2906}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | What is average enrollment of colleges in the state FL?", "sql": "SELECT avg(enr) FROM College WHERE state  =  'FL'", "example": {"db_id": "soccer_2", "query": "SELECT avg(enr) FROM College WHERE state  =  'FL'", "query_toks": ["SELECT", "avg", "(", "enr", ")", "FROM", "College", "WHERE", "state", "=", "'FL", "'"], "query_toks_no_value": ["select", "avg", "(", "enr", ")", "from", "college", "where", "state", "=", "value"], "question": "What is average enrollment of colleges in the state FL?", "question_toks": ["What", "is", "average", "enrollment", "of", "colleges", "in", "the", "state", "FL", "?"], "guid": 2907}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | In which state is the college that Charles attends?", "sql": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName JOIN player AS T3 ON T2.pID  =  T3.pID WHERE T3.pName  =  'Charles'", "example": {"db_id": "soccer_2", "query": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName JOIN player AS T3 ON T2.pID  =  T3.pID WHERE T3.pName  =  'Charles'", "query_toks": ["SELECT", "T1.state", "FROM", "college", "AS", "T1", "JOIN", "tryout", "AS", "T2", "ON", "T1.cName", "=", "T2.cName", "JOIN", "player", "AS", "T3", "ON", "T2.pID", "=", "T3.pID", "WHERE", "T3.pName", "=", "'Charles", "'"], "query_toks_no_value": ["select", "t1", ".", "state", "from", "college", "as", "t1", "join", "tryout", "as", "t2", "on", "t1", ".", "cname", "=", "t2", ".", "cname", "join", "player", "as", "t3", "on", "t2", ".", "pid", "=", "t3", ".", "pid", "where", "t3", ".", "pname", "=", "value"], "question": "In which state is the college that Charles attends?", "question_toks": ["In", "which", "state", "is", "the", "college", "that", "Charles", "attends", "?"], "guid": 2908}}
{"text": "gymnast: Gymnast_ID, Floor_Exercise_Points, Pommel_Horse_Points, Rings_Points, Vault_Points, Parallel_Bars_Points, Horizontal_Bar_Points, Total_Points; people: People_ID, Name, Age, Height, Hometown | What is the average age of all gymnasts?", "sql": "SELECT avg(T2.Age) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID", "example": {"db_id": "gymnast", "query": "SELECT avg(T2.Age) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID", "query_toks": ["SELECT", "avg", "(", "T2.Age", ")", "FROM", "gymnast", "AS", "T1", "JOIN", "people", "AS", "T2", "ON", "T1.Gymnast_ID", "=", "T2.People_ID"], "query_toks_no_value": ["select", "avg", "(", "t2", ".", "age", ")", "from", "gymnast", "as", "t1", "join", "people", "as", "t2", "on", "t1", ".", "gymnast_id", "=", "t2", ".", "people_id"], "question": "What is the average age of all gymnasts?", "question_toks": ["What", "is", "the", "average", "age", "of", "all", "gymnasts", "?"], "guid": 2909}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | Give me the dates when the max temperature was higher than 85.", "sql": "SELECT date FROM weather WHERE max_temperature_f  >  85", "example": {"db_id": "bike_1", "query": "SELECT date FROM weather WHERE max_temperature_f  >  85", "query_toks": ["SELECT", "date", "FROM", "weather", "WHERE", "max_temperature_f", ">", "85"], "query_toks_no_value": ["select", "date", "from", "weather", "where", "max_temperature_f", ">", "value"], "question": "Give me the dates when the max temperature was higher than 85.", "question_toks": ["Give", "me", "the", "dates", "when", "the", "max", "temperature", "was", "higher", "than", "85", "."], "guid": 2910}}
{"text": "country: Country_id, Country_name, Capital, Official_native_language; team: Team_id, Name; match_season: Season, Player, Position, Country, Team, Draft_Pick_Number, Draft_Class, College; player: Player_ID, Player, Years_Played, Total_WL, Singles_WL, Doubles_WL, Team | Show all official native languages that contain the word \"English\".", "sql": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\"", "example": {"db_id": "match_season", "query": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\"", "query_toks": ["SELECT", "Official_native_language", "FROM", "country", "WHERE", "Official_native_language", "LIKE", "``", "%", "English", "%", "''"], "query_toks_no_value": ["select", "official_native_language", "from", "country", "where", "official_native_language", "like", "value"], "question": "Show all official native languages that contain the word \"English\".", "question_toks": ["Show", "all", "official", "native", "languages", "that", "contain", "the", "word", "``", "English", "''", "."], "guid": 2911}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | What is the total and maximum duration for all trips with the bike id 636?", "sql": "SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  636", "example": {"db_id": "bike_1", "query": "SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  636", "query_toks": ["SELECT", "sum", "(", "duration", ")", ",", "max", "(", "duration", ")", "FROM", "trip", "WHERE", "bike_id", "=", "636"], "query_toks_no_value": ["select", "sum", "(", "duration", ")", ",", "max", "(", "duration", ")", "from", "trip", "where", "bike_id", "=", "value"], "question": "What is the total and maximum duration for all trips with the bike id 636?", "question_toks": ["What", "is", "the", "total", "and", "maximum", "duration", "for", "all", "trips", "with", "the", "bike", "id", "636", "?"], "guid": 2912}}
{"text": "mountain: Mountain_ID, Name, Height, Prominence, Range, Country; climber: Climber_ID, Name, Country, Time, Points, Mountain_ID | What is the maximum point for climbers whose country is United Kingdom?", "sql": "SELECT max(Points) FROM climber WHERE Country  =  \"United Kingdom\"", "example": {"db_id": "climbing", "query": "SELECT max(Points) FROM climber WHERE Country  =  \"United Kingdom\"", "query_toks": ["SELECT", "max", "(", "Points", ")", "FROM", "climber", "WHERE", "Country", "=", "``", "United", "Kingdom", "''"], "query_toks_no_value": ["select", "max", "(", "points", ")", "from", "climber", "where", "country", "=", "value"], "question": "What is the maximum point for climbers whose country is United Kingdom?", "question_toks": ["What", "is", "the", "maximum", "point", "for", "climbers", "whose", "country", "is", "United", "Kingdom", "?"], "guid": 2913}}
{"text": "race: Race_ID, Name, Class, Date, Track_ID; track: Track_ID, Name, Location, Seating, Year_Opened | What are the names and locations of all tracks?", "sql": "SELECT name ,  LOCATION FROM track", "example": {"db_id": "race_track", "query": "SELECT name ,  LOCATION FROM track", "query_toks": ["SELECT", "name", ",", "LOCATION", "FROM", "track"], "query_toks_no_value": ["select", "name", ",", "location", "from", "track"], "question": "What are the names and locations of all tracks?", "question_toks": ["What", "are", "the", "names", "and", "locations", "of", "all", "tracks", "?"], "guid": 2914}}
{"text": "country: Country_id, Country_name, Capital, Official_native_language; team: Team_id, Name; match_season: Season, Player, Position, Country, Team, Draft_Pick_Number, Draft_Class, College; player: Player_ID, Player, Years_Played, Total_WL, Singles_WL, Doubles_WL, Team | What are the names and capitals of each country?", "sql": "SELECT Country_name ,  Capital FROM country", "example": {"db_id": "match_season", "query": "SELECT Country_name ,  Capital FROM country", "query_toks": ["SELECT", "Country_name", ",", "Capital", "FROM", "country"], "query_toks_no_value": ["select", "country_name", ",", "capital", "from", "country"], "question": "What are the names and capitals of each country?", "question_toks": ["What", "are", "the", "names", "and", "capitals", "of", "each", "country", "?"], "guid": 2915}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | Find the names of schools that have some students playing in goalie and mid positions.", "sql": "SELECT cName FROM  tryout WHERE pPos  =  'goalie' INTERSECT SELECT cName FROM  tryout WHERE pPos  =  'mid'", "example": {"db_id": "soccer_2", "query": "SELECT cName FROM  tryout WHERE pPos  =  'goalie' INTERSECT SELECT cName FROM  tryout WHERE pPos  =  'mid'", "query_toks": ["SELECT", "cName", "FROM", "tryout", "WHERE", "pPos", "=", "'goalie", "'", "INTERSECT", "SELECT", "cName", "FROM", "tryout", "WHERE", "pPos", "=", "'mid", "'"], "query_toks_no_value": ["select", "cname", "from", "tryout", "where", "ppos", "=", "value", "intersect", "select", "cname", "from", "tryout", "where", "ppos", "=", "value"], "question": "Find the names of schools that have some students playing in goalie and mid positions.", "question_toks": ["Find", "the", "names", "of", "schools", "that", "have", "some", "students", "playing", "in", "goalie", "and", "mid", "positions", "."], "guid": 2916}}
{"text": "players: player_id, first_name, last_name, hand, birth_date, country_code; matches: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank; rankings: ranking_date, ranking, player_id, ranking_points, tours | How many players are there for each hand type?", "sql": "SELECT count(*) ,  hand FROM players GROUP BY hand", "example": {"db_id": "wta_1", "query": "SELECT count(*) ,  hand FROM players GROUP BY hand", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "hand", "FROM", "players", "GROUP", "BY", "hand"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "hand", "from", "players", "group", "by", "hand"], "question": "How many players are there for each hand type?", "question_toks": ["How", "many", "players", "are", "there", "for", "each", "hand", "type", "?"], "guid": 2917}}
{"text": "mountain: Mountain_ID, Name, Height, Prominence, Range, Country; climber: Climber_ID, Name, Country, Time, Points, Mountain_ID | How many climbers are there?", "sql": "SELECT count(*) FROM climber", "example": {"db_id": "climbing", "query": "SELECT count(*) FROM climber", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "climber"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "climber"], "question": "How many climbers are there?", "question_toks": ["How", "many", "climbers", "are", "there", "?"], "guid": 2918}}
{"text": "basketball_match: Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home; university: School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference | What are the total enrollments of universities of each affiliation type?", "sql": "SELECT sum(enrollment) ,  affiliation FROM university GROUP BY affiliation", "example": {"db_id": "university_basketball", "query": "SELECT sum(enrollment) ,  affiliation FROM university GROUP BY affiliation", "query_toks": ["SELECT", "sum", "(", "enrollment", ")", ",", "affiliation", "FROM", "university", "GROUP", "BY", "affiliation"], "query_toks_no_value": ["select", "sum", "(", "enrollment", ")", ",", "affiliation", "from", "university", "group", "by", "affiliation"], "question": "What are the total enrollments of universities of each affiliation type?", "question_toks": ["What", "are", "the", "total", "enrollments", "of", "universities", "of", "each", "affiliation", "type", "?"], "guid": 2919}}
{"text": "body_builder: Body_Builder_ID, People_ID, Snatch, Clean_Jerk, Total; people: People_ID, Name, Height, Weight, Birth_Date, Birth_Place | What are the birth places that are shared by at least two people?", "sql": "SELECT Birth_Place FROM people GROUP BY Birth_Place HAVING COUNT(*)  >=  2", "example": {"db_id": "body_builder", "query": "SELECT Birth_Place FROM people GROUP BY Birth_Place HAVING COUNT(*)  >=  2", "query_toks": ["SELECT", "Birth_Place", "FROM", "people", "GROUP", "BY", "Birth_Place", "HAVING", "COUNT", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "birth_place", "from", "people", "group", "by", "birth_place", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "What are the birth places that are shared by at least two people?", "question_toks": ["What", "are", "the", "birth", "places", "that", "are", "shared", "by", "at", "least", "two", "people", "?"], "guid": 2920}}
{"text": "college: College_ID, Name, Leader_Name, College_Location; member: Member_ID, Name, Country, College_ID; round: Round_ID, Member_ID, Decoration_Theme, Rank_in_Round | Show the most common country across members.", "sql": "SELECT Country FROM member GROUP BY Country ORDER BY COUNT(*) DESC LIMIT 1", "example": {"db_id": "decoration_competition", "query": "SELECT Country FROM member GROUP BY Country ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "Country", "FROM", "member", "GROUP", "BY", "Country", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "country", "from", "member", "group", "by", "country", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Show the most common country across members.", "question_toks": ["Show", "the", "most", "common", "country", "across", "members", "."], "guid": 2921}}
{"text": "players: player_id, first_name, last_name, hand, birth_date, country_code; matches: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank; rankings: ranking_date, ranking, player_id, ranking_points, tours | How many distinct countries do players come from?", "sql": "SELECT count(DISTINCT country_code) FROM players", "example": {"db_id": "wta_1", "query": "SELECT count(DISTINCT country_code) FROM players", "query_toks": ["SELECT", "count", "(", "DISTINCT", "country_code", ")", "FROM", "players"], "query_toks_no_value": ["select", "count", "(", "distinct", "country_code", ")", "from", "players"], "question": "How many distinct countries do players come from?", "question_toks": ["How", "many", "distinct", "countries", "do", "players", "come", "from", "?"], "guid": 2922}}
{"text": "race: Race_ID, Name, Class, Date, Track_ID; track: Track_ID, Name, Location, Seating, Year_Opened | What are the names for tracks without a race in class 'GT'.", "sql": "SELECT name FROM track EXCEPT SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id WHERE T1.class  =  'GT'", "example": {"db_id": "race_track", "query": "SELECT name FROM track EXCEPT SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id WHERE T1.class  =  'GT'", "query_toks": ["SELECT", "name", "FROM", "track", "EXCEPT", "SELECT", "T2.name", "FROM", "race", "AS", "T1", "JOIN", "track", "AS", "T2", "ON", "T1.track_id", "=", "T2.track_id", "WHERE", "T1.class", "=", "'GT", "'"], "query_toks_no_value": ["select", "name", "from", "track", "except", "select", "t2", ".", "name", "from", "race", "as", "t1", "join", "track", "as", "t2", "on", "t1", ".", "track_id", "=", "t2", ".", "track_id", "where", "t1", ".", "class", "=", "value"], "question": "What are the names for tracks without a race in class 'GT'.", "question_toks": ["What", "are", "the", "names", "for", "tracks", "without", "a", "race", "in", "class", "'GT", "'", "."], "guid": 2923}}
{"text": "swimmer: ID, name, Nationality, meter_100, meter_200, meter_300, meter_400, meter_500, meter_600, meter_700; stadium: ID, name, Capacity, City, Country, Opening_year; event: ID, Name, Stadium_ID, Year; record: ID, Result, Swimmer_ID, Event_ID | What is the average capacity of the stadiums that were opened in year 2005?", "sql": "SELECT avg(capacity) FROM stadium WHERE opening_year  =  2005", "example": {"db_id": "swimming", "query": "SELECT avg(capacity) FROM stadium WHERE opening_year  =  2005", "query_toks": ["SELECT", "avg", "(", "capacity", ")", "FROM", "stadium", "WHERE", "opening_year", "=", "2005"], "query_toks_no_value": ["select", "avg", "(", "capacity", ")", "from", "stadium", "where", "opening_year", "=", "value"], "question": "What is the average capacity of the stadiums that were opened in year 2005?", "question_toks": ["What", "is", "the", "average", "capacity", "of", "the", "stadiums", "that", "were", "opened", "in", "year", "2005", "?"], "guid": 2924}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | How many students participated in tryouts for each college by descennding count?", "sql": "SELECT count(*) ,  cName FROM tryout GROUP BY cName ORDER BY count(*) DESC", "example": {"db_id": "soccer_2", "query": "SELECT count(*) ,  cName FROM tryout GROUP BY cName ORDER BY count(*) DESC", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "cName", "FROM", "tryout", "GROUP", "BY", "cName", "ORDER", "BY", "count", "(", "*", ")", "DESC"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "cname", "from", "tryout", "group", "by", "cname", "order", "by", "count", "(", "*", ")", "desc"], "question": "How many students participated in tryouts for each college by descennding count?", "question_toks": ["How", "many", "students", "participated", "in", "tryouts", "for", "each", "college", "by", "descennding", "count", "?"], "guid": 2925}}
{"text": "body_builder: Body_Builder_ID, People_ID, Snatch, Clean_Jerk, Total; people: People_ID, Name, Height, Weight, Birth_Date, Birth_Place | List the snatch score and clean jerk score of body builders in ascending order of snatch score.", "sql": "SELECT Snatch ,  Clean_Jerk FROM body_builder ORDER BY Snatch ASC", "example": {"db_id": "body_builder", "query": "SELECT Snatch ,  Clean_Jerk FROM body_builder ORDER BY Snatch ASC", "query_toks": ["SELECT", "Snatch", ",", "Clean_Jerk", "FROM", "body_builder", "ORDER", "BY", "Snatch", "ASC"], "query_toks_no_value": ["select", "snatch", ",", "clean_jerk", "from", "body_builder", "order", "by", "snatch", "asc"], "question": "List the snatch score and clean jerk score of body builders in ascending order of snatch score.", "question_toks": ["List", "the", "snatch", "score", "and", "clean", "jerk", "score", "of", "body", "builders", "in", "ascending", "order", "of", "snatch", "score", "."], "guid": 2926}}
{"text": "player: Player_ID, Sponsor_name, Player_name, Gender, Residence, Occupation, Votes, Rank; club: Club_ID, Club_name, Region, Start_year; coach: Coach_ID, Coach_name, Gender, Club_ID, Rank; player_coach: Player_ID, Coach_ID, Starting_year; match_result: Rank, Club_ID, Gold, Big_Silver, Small_Silver, Bronze, Points | What is the name of the player with the largest number of votes?", "sql": "SELECT Player_name FROM player ORDER BY Votes DESC LIMIT 1", "example": {"db_id": "riding_club", "query": "SELECT Player_name FROM player ORDER BY Votes DESC LIMIT 1", "query_toks": ["SELECT", "Player_name", "FROM", "player", "ORDER", "BY", "Votes", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "player_name", "from", "player", "order", "by", "votes", "desc", "limit", "value"], "question": "What is the name of the player with the largest number of votes?", "question_toks": ["What", "is", "the", "name", "of", "the", "player", "with", "the", "largest", "number", "of", "votes", "?"], "guid": 2927}}
{"text": "club: Club_ID, name, Region, Start_year; club_rank: Rank, Club_ID, Gold, Silver, Bronze, Total; player: Player_ID, name, Position, Club_ID, Apps, Tries, Goals, Points; competition: Competition_ID, Year, Competition_type, Country; competition_result: Competition_ID, Club_ID_1, Club_ID_2, Score | Please show the names and the players of clubs.", "sql": "SELECT T1.name ,  T2.Player_id FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID", "example": {"db_id": "sports_competition", "query": "SELECT T1.name ,  T2.Player_id FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID", "query_toks": ["SELECT", "T1.name", ",", "T2.Player_id", "FROM", "club", "AS", "T1", "JOIN", "player", "AS", "T2", "ON", "T1.Club_ID", "=", "T2.Club_ID"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "t2", ".", "player_id", "from", "club", "as", "t1", "join", "player", "as", "t2", "on", "t1", ".", "club_id", "=", "t2", ".", "club_id"], "question": "Please show the names and the players of clubs.", "question_toks": ["Please", "show", "the", "names", "and", "the", "players", "of", "clubs", "."], "guid": 2928}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | Which colleges do the tryout players whose name starts with letter D go to?", "sql": "SELECT T1.cName FROM  tryout AS T1 JOIN player AS T2 ON T1.pID  =  T2.pID WHERE T2.pName LIKE 'D%'", "example": {"db_id": "soccer_2", "query": "SELECT T1.cName FROM  tryout AS T1 JOIN player AS T2 ON T1.pID  =  T2.pID WHERE T2.pName LIKE 'D%'", "query_toks": ["SELECT", "T1.cName", "FROM", "tryout", "AS", "T1", "JOIN", "player", "AS", "T2", "ON", "T1.pID", "=", "T2.pID", "WHERE", "T2.pName", "LIKE", "'D", "%", "'"], "query_toks_no_value": ["select", "t1", ".", "cname", "from", "tryout", "as", "t1", "join", "player", "as", "t2", "on", "t1", ".", "pid", "=", "t2", ".", "pid", "where", "t2", ".", "pname", "like", "value"], "question": "Which colleges do the tryout players whose name starts with letter D go to?", "question_toks": ["Which", "colleges", "do", "the", "tryout", "players", "whose", "name", "starts", "with", "letter", "D", "go", "to", "?"], "guid": 2929}}
{"text": "club: Club_ID, name, Region, Start_year; club_rank: Rank, Club_ID, Gold, Silver, Bronze, Total; player: Player_ID, name, Position, Club_ID, Apps, Tries, Goals, Points; competition: Competition_ID, Year, Competition_type, Country; competition_result: Competition_ID, Club_ID_1, Club_ID_2, Score | What are the positions of both players that have more than 20 20 points and less than 10 points?", "sql": "SELECT POSITION FROM player WHERE Points  >  20 INTERSECT SELECT POSITION FROM player WHERE Points  <  10", "example": {"db_id": "sports_competition", "query": "SELECT POSITION FROM player WHERE Points  >  20 INTERSECT SELECT POSITION FROM player WHERE Points  <  10", "query_toks": ["SELECT", "POSITION", "FROM", "player", "WHERE", "Points", ">", "20", "INTERSECT", "SELECT", "POSITION", "FROM", "player", "WHERE", "Points", "<", "10"], "query_toks_no_value": ["select", "position", "from", "player", "where", "points", ">", "value", "intersect", "select", "position", "from", "player", "where", "points", "<", "value"], "question": "What are the positions of both players that have more than 20 20 points and less than 10 points?", "question_toks": ["What", "are", "the", "positions", "of", "both", "players", "that", "have", "more", "than", "20", "20", "points", "and", "less", "than", "10", "points", "?"], "guid": 2930}}
{"text": "gymnast: Gymnast_ID, Floor_Exercise_Points, Pommel_Horse_Points, Rings_Points, Vault_Points, Parallel_Bars_Points, Horizontal_Bar_Points, Total_Points; people: People_ID, Name, Age, Height, Hometown | Return the average horizontal bar points across all gymnasts.", "sql": "SELECT avg(Horizontal_Bar_Points) FROM gymnast", "example": {"db_id": "gymnast", "query": "SELECT avg(Horizontal_Bar_Points) FROM gymnast", "query_toks": ["SELECT", "avg", "(", "Horizontal_Bar_Points", ")", "FROM", "gymnast"], "query_toks_no_value": ["select", "avg", "(", "horizontal_bar_points", ")", "from", "gymnast"], "question": "Return the average horizontal bar points across all gymnasts.", "question_toks": ["Return", "the", "average", "horizontal", "bar", "points", "across", "all", "gymnasts", "."], "guid": 2931}}
{"text": "players: player_id, first_name, last_name, hand, birth_date, country_code; matches: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank; rankings: ranking_date, ranking, player_id, ranking_points, tours | What is the first name and country code of the player with the most tours?", "sql": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1", "example": {"db_id": "wta_1", "query": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1", "query_toks": ["SELECT", "T1.country_code", ",", "T1.first_name", "FROM", "players", "AS", "T1", "JOIN", "rankings", "AS", "T2", "ON", "T1.player_id", "=", "T2.player_id", "ORDER", "BY", "T2.tours", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "country_code", ",", "t1", ".", "first_name", "from", "players", "as", "t1", "join", "rankings", "as", "t2", "on", "t1", ".", "player_id", "=", "t2", ".", "player_id", "order", "by", "t2", ".", "tours", "desc", "limit", "value"], "question": "What is the first name and country code of the player with the most tours?", "question_toks": ["What", "is", "the", "first", "name", "and", "country", "code", "of", "the", "player", "with", "the", "most", "tours", "?"], "guid": 2932}}
{"text": "mountain: Mountain_ID, Name, Height, Prominence, Range, Country; climber: Climber_ID, Name, Country, Time, Points, Mountain_ID | Give the names of mountains in alphabetical order.", "sql": "SELECT Name FROM mountain ORDER BY Name ASC", "example": {"db_id": "climbing", "query": "SELECT Name FROM mountain ORDER BY Name ASC", "query_toks": ["SELECT", "Name", "FROM", "mountain", "ORDER", "BY", "Name", "ASC"], "query_toks_no_value": ["select", "name", "from", "mountain", "order", "by", "name", "asc"], "question": "Give the names of mountains in alphabetical order.", "question_toks": ["Give", "the", "names", "of", "mountains", "in", "alphabetical", "order", "."], "guid": 2933}}
{"text": "poker_player: Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings; people: People_ID, Nationality, Name, Birth_Date, Height | What are different nationalities of people and the corresponding number of people from each nation?", "sql": "SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality", "example": {"db_id": "poker_player", "query": "SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality", "query_toks": ["SELECT", "Nationality", ",", "COUNT", "(", "*", ")", "FROM", "people", "GROUP", "BY", "Nationality"], "query_toks_no_value": ["select", "nationality", ",", "count", "(", "*", ")", "from", "people", "group", "by", "nationality"], "question": "What are different nationalities of people and the corresponding number of people from each nation?", "question_toks": ["What", "are", "different", "nationalities", "of", "people", "and", "the", "corresponding", "number", "of", "people", "from", "each", "nation", "?"], "guid": 2934}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | Find the forename and surname of drivers whose nationality is German?", "sql": "SELECT forename ,  surname FROM drivers WHERE nationality = \"German\"", "example": {"db_id": "formula_1", "query": "SELECT forename ,  surname FROM drivers WHERE nationality = \"German\"", "query_toks": ["SELECT", "forename", ",", "surname", "FROM", "drivers", "WHERE", "nationality", "=", "``", "German", "''"], "query_toks_no_value": ["select", "forename", ",", "surname", "from", "drivers", "where", "nationality", "=", "value"], "question": "Find the forename and surname of drivers whose nationality is German?", "question_toks": ["Find", "the", "forename", "and", "surname", "of", "drivers", "whose", "nationality", "is", "German", "?"], "guid": 2935}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | Find each student's first name.", "sql": "SELECT DISTINCT fname FROM student", "example": {"db_id": "club_1", "query": "SELECT DISTINCT fname FROM student", "query_toks": ["SELECT", "DISTINCT", "fname", "FROM", "student"], "query_toks_no_value": ["select", "distinct", "fname", "from", "student"], "question": "Find each student's first name.", "question_toks": ["Find", "each", "student", "'s", "first", "name", "."], "guid": 2936}}
{"text": "players: player_id, first_name, last_name, hand, birth_date, country_code; matches: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank; rankings: ranking_date, ranking, player_id, ranking_points, tours | Find the codes of countries that have more than 50 players.", "sql": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50", "example": {"db_id": "wta_1", "query": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50", "query_toks": ["SELECT", "country_code", "FROM", "players", "GROUP", "BY", "country_code", "HAVING", "count", "(", "*", ")", ">", "50"], "query_toks_no_value": ["select", "country_code", "from", "players", "group", "by", "country_code", "having", "count", "(", "*", ")", ">", "value"], "question": "Find the codes of countries that have more than 50 players.", "question_toks": ["Find", "the", "codes", "of", "countries", "that", "have", "more", "than", "50", "players", "."], "guid": 2937}}
{"text": "poker_player: Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings; people: People_ID, Nationality, Name, Birth_Date, Height | Count the number of poker players.", "sql": "SELECT count(*) FROM poker_player", "example": {"db_id": "poker_player", "query": "SELECT count(*) FROM poker_player", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "poker_player"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "poker_player"], "question": "Count the number of poker players.", "question_toks": ["Count", "the", "number", "of", "poker", "players", "."], "guid": 2938}}
{"text": "race: Race_ID, Name, Class, Date, Track_ID; track: Track_ID, Name, Location, Seating, Year_Opened | What is the minimum, maximum, and average seating for all tracks.", "sql": "SELECT min(seating) ,  max(seating) ,  avg(seating) FROM track", "example": {"db_id": "race_track", "query": "SELECT min(seating) ,  max(seating) ,  avg(seating) FROM track", "query_toks": ["SELECT", "min", "(", "seating", ")", ",", "max", "(", "seating", ")", ",", "avg", "(", "seating", ")", "FROM", "track"], "query_toks_no_value": ["select", "min", "(", "seating", ")", ",", "max", "(", "seating", ")", ",", "avg", "(", "seating", ")", "from", "track"], "question": "What is the minimum, maximum, and average seating for all tracks.", "question_toks": ["What", "is", "the", "minimum", ",", "maximum", ",", "and", "average", "seating", "for", "all", "tracks", "."], "guid": 2939}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | Find all the forenames of distinct drivers who was in position 1 as standing and won?", "sql": "SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1", "example": {"db_id": "formula_1", "query": "SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1", "query_toks": ["SELECT", "DISTINCT", "T1.forename", "FROM", "drivers", "AS", "T1", "JOIN", "driverstandings", "AS", "T2", "ON", "T1.driverid", "=", "T2.driverid", "WHERE", "T2.position", "=", "1", "AND", "T2.wins", "=", "1"], "query_toks_no_value": ["select", "distinct", "t1", ".", "forename", "from", "drivers", "as", "t1", "join", "driverstandings", "as", "t2", "on", "t1", ".", "driverid", "=", "t2", ".", "driverid", "where", "t2", ".", "position", "=", "value", "and", "t2", ".", "wins", "=", "value"], "question": "Find all the forenames of distinct drivers who was in position 1 as standing and won?", "question_toks": ["Find", "all", "the", "forenames", "of", "distinct", "drivers", "who", "was", "in", "position", "1", "as", "standing", "and", "won", "?"], "guid": 2940}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | Which colleges does each player with a name that starts with the letter D  who tried out go to?", "sql": "SELECT T1.cName FROM  tryout AS T1 JOIN player AS T2 ON T1.pID  =  T2.pID WHERE T2.pName LIKE 'D%'", "example": {"db_id": "soccer_2", "query": "SELECT T1.cName FROM  tryout AS T1 JOIN player AS T2 ON T1.pID  =  T2.pID WHERE T2.pName LIKE 'D%'", "query_toks": ["SELECT", "T1.cName", "FROM", "tryout", "AS", "T1", "JOIN", "player", "AS", "T2", "ON", "T1.pID", "=", "T2.pID", "WHERE", "T2.pName", "LIKE", "'D", "%", "'"], "query_toks_no_value": ["select", "t1", ".", "cname", "from", "tryout", "as", "t1", "join", "player", "as", "t2", "on", "t1", ".", "pid", "=", "t2", ".", "pid", "where", "t2", ".", "pname", "like", "value"], "question": "Which colleges does each player with a name that starts with the letter D  who tried out go to?", "question_toks": ["Which", "colleges", "does", "each", "player", "with", "a", "name", "that", "starts", "with", "the", "letter", "D", "who", "tried", "out", "go", "to", "?"], "guid": 2941}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | What is the number of states that has some colleges whose enrollment is smaller than the average enrollment?", "sql": "SELECT count(DISTINCT state) FROM college WHERE enr  <  (SELECT avg(enr) FROM college)", "example": {"db_id": "soccer_2", "query": "SELECT count(DISTINCT state) FROM college WHERE enr  <  (SELECT avg(enr) FROM college)", "query_toks": ["SELECT", "count", "(", "DISTINCT", "state", ")", "FROM", "college", "WHERE", "enr", "<", "(", "SELECT", "avg", "(", "enr", ")", "FROM", "college", ")"], "query_toks_no_value": ["select", "count", "(", "distinct", "state", ")", "from", "college", "where", "enr", "<", "(", "select", "avg", "(", "enr", ")", "from", "college", ")"], "question": "What is the number of states that has some colleges whose enrollment is smaller than the average enrollment?", "question_toks": ["What", "is", "the", "number", "of", "states", "that", "has", "some", "colleges", "whose", "enrollment", "is", "smaller", "than", "the", "average", "enrollment", "?"], "guid": 2942}}
{"text": "race: Race_ID, Name, Class, Date, Track_ID; track: Track_ID, Name, Location, Seating, Year_Opened | Show all track names that have had no races.", "sql": "SELECT name FROM track WHERE track_id NOT IN (SELECT track_id FROM race)", "example": {"db_id": "race_track", "query": "SELECT name FROM track WHERE track_id NOT IN (SELECT track_id FROM race)", "query_toks": ["SELECT", "name", "FROM", "track", "WHERE", "track_id", "NOT", "IN", "(", "SELECT", "track_id", "FROM", "race", ")"], "query_toks_no_value": ["select", "name", "from", "track", "where", "track_id", "not", "in", "(", "select", "track_id", "from", "race", ")"], "question": "Show all track names that have had no races.", "question_toks": ["Show", "all", "track", "names", "that", "have", "had", "no", "races", "."], "guid": 2943}}
{"text": "poker_player: Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings; people: People_ID, Nationality, Name, Birth_Date, Height | What are the names of poker players in descending order of earnings?", "sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC", "example": {"db_id": "poker_player", "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC", "query_toks": ["SELECT", "T1.Name", "FROM", "people", "AS", "T1", "JOIN", "poker_player", "AS", "T2", "ON", "T1.People_ID", "=", "T2.People_ID", "ORDER", "BY", "T2.Earnings", "DESC"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "people", "as", "t1", "join", "poker_player", "as", "t2", "on", "t1", ".", "people_id", "=", "t2", ".", "people_id", "order", "by", "t2", ".", "earnings", "desc"], "question": "What are the names of poker players in descending order of earnings?", "question_toks": ["What", "are", "the", "names", "of", "poker", "players", "in", "descending", "order", "of", "earnings", "?"], "guid": 2944}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | Find the average age of members of the club \"Hopkins Student Enterprises\".", "sql": "SELECT avg(t3.age) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Hopkins Student Enterprises\"", "example": {"db_id": "club_1", "query": "SELECT avg(t3.age) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Hopkins Student Enterprises\"", "query_toks": ["SELECT", "avg", "(", "t3.age", ")", "FROM", "club", "AS", "t1", "JOIN", "member_of_club", "AS", "t2", "ON", "t1.clubid", "=", "t2.clubid", "JOIN", "student", "AS", "t3", "ON", "t2.stuid", "=", "t3.stuid", "WHERE", "t1.clubname", "=", "``", "Hopkins", "Student", "Enterprises", "''"], "query_toks_no_value": ["select", "avg", "(", "t3", ".", "age", ")", "from", "club", "as", "t1", "join", "member_of_club", "as", "t2", "on", "t1", ".", "clubid", "=", "t2", ".", "clubid", "join", "student", "as", "t3", "on", "t2", ".", "stuid", "=", "t3", ".", "stuid", "where", "t1", ".", "clubname", "=", "value"], "question": "Find the average age of members of the club \"Hopkins Student Enterprises\".", "question_toks": ["Find", "the", "average", "age", "of", "members", "of", "the", "club", "``", "Hopkins", "Student", "Enterprises", "''", "."], "guid": 2945}}
{"text": "swimmer: ID, name, Nationality, meter_100, meter_200, meter_300, meter_400, meter_500, meter_600, meter_700; stadium: ID, name, Capacity, City, Country, Opening_year; event: ID, Name, Stadium_ID, Year; record: ID, Result, Swimmer_ID, Event_ID | Which countries do not have a stadium that was opened after 2006?", "sql": "SELECT country FROM stadium EXCEPT SELECT country FROM stadium WHERE opening_year  >  2006", "example": {"db_id": "swimming", "query": "SELECT country FROM stadium EXCEPT SELECT country FROM stadium WHERE opening_year  >  2006", "query_toks": ["SELECT", "country", "FROM", "stadium", "EXCEPT", "SELECT", "country", "FROM", "stadium", "WHERE", "opening_year", ">", "2006"], "query_toks_no_value": ["select", "country", "from", "stadium", "except", "select", "country", "from", "stadium", "where", "opening_year", ">", "value"], "question": "Which countries do not have a stadium that was opened after 2006?", "question_toks": ["Which", "countries", "do", "not", "have", "a", "stadium", "that", "was", "opened", "after", "2006", "?"], "guid": 2946}}
{"text": "wrestler: Wrestler_ID, Name, Reign, Days_held, Location, Event; Elimination: Elimination_ID, Wrestler_ID, Team, Eliminated_By, Elimination_Move, Time | Give the different reigns of wrestlers who are not located in Tokyo, Japan.", "sql": "SELECT DISTINCT Reign FROM wrestler WHERE LOCATION != \"Tokyo , Japan\"", "example": {"db_id": "wrestler", "query": "SELECT DISTINCT Reign FROM wrestler WHERE LOCATION != \"Tokyo , Japan\"", "query_toks": ["SELECT", "DISTINCT", "Reign", "FROM", "wrestler", "WHERE", "LOCATION", "!", "=", "``", "Tokyo", ",", "Japan", "''"], "query_toks_no_value": ["select", "distinct", "reign", "from", "wrestler", "where", "location", "!", "=", "value"], "question": "Give the different reigns of wrestlers who are not located in Tokyo, Japan.", "question_toks": ["Give", "the", "different", "reigns", "of", "wrestlers", "who", "are", "not", "located", "in", "Tokyo", ",", "Japan", "."], "guid": 2947}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | How many students got accepted after the tryout?", "sql": "SELECT count(*) FROM tryout WHERE decision  =  'yes'", "example": {"db_id": "soccer_2", "query": "SELECT count(*) FROM tryout WHERE decision  =  'yes'", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "tryout", "WHERE", "decision", "=", "'yes", "'"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "tryout", "where", "decision", "=", "value"], "question": "How many students got accepted after the tryout?", "question_toks": ["How", "many", "students", "got", "accepted", "after", "the", "tryout", "?"], "guid": 2948}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | What is the average and maximum number of hours students who made the team practiced?", "sql": "SELECT avg(T1.HS) ,  max(T1.HS) FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'", "example": {"db_id": "soccer_2", "query": "SELECT avg(T1.HS) ,  max(T1.HS) FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'", "query_toks": ["SELECT", "avg", "(", "T1.HS", ")", ",", "max", "(", "T1.HS", ")", "FROM", "player", "AS", "T1", "JOIN", "tryout", "AS", "T2", "ON", "T1.pID", "=", "T2.pID", "WHERE", "T2.decision", "=", "'yes", "'"], "query_toks_no_value": ["select", "avg", "(", "t1", ".", "hs", ")", ",", "max", "(", "t1", ".", "hs", ")", "from", "player", "as", "t1", "join", "tryout", "as", "t2", "on", "t1", ".", "pid", "=", "t2", ".", "pid", "where", "t2", ".", "decision", "=", "value"], "question": "What is the average and maximum number of hours students who made the team practiced?", "question_toks": ["What", "is", "the", "average", "and", "maximum", "number", "of", "hours", "students", "who", "made", "the", "team", "practiced", "?"], "guid": 2949}}
{"text": "college: College_ID, Name, Leader_Name, College_Location; member: Member_ID, Name, Country, College_ID; round: Round_ID, Member_ID, Decoration_Theme, Rank_in_Round | Show the names of members that have a rank in round higher than 3.", "sql": "SELECT T1.Name FROM member AS T1 JOIN round AS T2 ON T1.Member_ID  =  T2.Member_ID WHERE T2.Rank_in_Round  >  3", "example": {"db_id": "decoration_competition", "query": "SELECT T1.Name FROM member AS T1 JOIN round AS T2 ON T1.Member_ID  =  T2.Member_ID WHERE T2.Rank_in_Round  >  3", "query_toks": ["SELECT", "T1.Name", "FROM", "member", "AS", "T1", "JOIN", "round", "AS", "T2", "ON", "T1.Member_ID", "=", "T2.Member_ID", "WHERE", "T2.Rank_in_Round", ">", "3"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "member", "as", "t1", "join", "round", "as", "t2", "on", "t1", ".", "member_id", "=", "t2", ".", "member_id", "where", "t2", ".", "rank_in_round", ">", "value"], "question": "Show the names of members that have a rank in round higher than 3.", "question_toks": ["Show", "the", "names", "of", "members", "that", "have", "a", "rank", "in", "round", "higher", "than", "3", "."], "guid": 2950}}
{"text": "players: player_id, first_name, last_name, hand, birth_date, country_code; matches: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank; rankings: ranking_date, ranking, player_id, ranking_points, tours | Which year had the most matches?", "sql": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "wta_1", "query": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "YEAR", "FROM", "matches", "GROUP", "BY", "YEAR", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "year", "from", "matches", "group", "by", "year", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which year had the most matches?", "question_toks": ["Which", "year", "had", "the", "most", "matches", "?"], "guid": 2951}}
{"text": "players: player_id, first_name, last_name, hand, birth_date, country_code; matches: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank; rankings: ranking_date, ranking, player_id, ranking_points, tours | Find the name of tourney that has more than 10 matches.", "sql": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10", "example": {"db_id": "wta_1", "query": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10", "query_toks": ["SELECT", "tourney_name", "FROM", "matches", "GROUP", "BY", "tourney_name", "HAVING", "count", "(", "*", ")", ">", "10"], "query_toks_no_value": ["select", "tourney_name", "from", "matches", "group", "by", "tourney_name", "having", "count", "(", "*", ")", ">", "value"], "question": "Find the name of tourney that has more than 10 matches.", "question_toks": ["Find", "the", "name", "of", "tourney", "that", "has", "more", "than", "10", "matches", "."], "guid": 2952}}
{"text": "players: player_id, first_name, last_name, hand, birth_date, country_code; matches: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank; rankings: ranking_date, ranking, player_id, ranking_points, tours | find the code of the country where has the greatest number of players.", "sql": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "wta_1", "query": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "country_code", "FROM", "players", "GROUP", "BY", "country_code", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "country_code", "from", "players", "group", "by", "country_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "find the code of the country where has the greatest number of players.", "question_toks": ["find", "the", "code", "of", "the", "country", "where", "has", "the", "greatest", "number", "of", "players", "."], "guid": 2953}}
{"text": "mountain: Mountain_ID, Name, Height, Prominence, Range, Country; climber: Climber_ID, Name, Country, Time, Points, Mountain_ID | List the names of climbers whose country is not Switzerland.", "sql": "SELECT Name FROM climber WHERE Country != \"Switzerland\"", "example": {"db_id": "climbing", "query": "SELECT Name FROM climber WHERE Country != \"Switzerland\"", "query_toks": ["SELECT", "Name", "FROM", "climber", "WHERE", "Country", "!", "=", "``", "Switzerland", "''"], "query_toks_no_value": ["select", "name", "from", "climber", "where", "country", "!", "=", "value"], "question": "List the names of climbers whose country is not Switzerland.", "question_toks": ["List", "the", "names", "of", "climbers", "whose", "country", "is", "not", "Switzerland", "."], "guid": 2954}}
{"text": "race: Race_ID, Name, Class, Date, Track_ID; track: Track_ID, Name, Location, Seating, Year_Opened | What are the names and dates of races, and the names of the tracks where they are held?", "sql": "SELECT T1.name ,  T1.date ,  T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id", "example": {"db_id": "race_track", "query": "SELECT T1.name ,  T1.date ,  T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id", "query_toks": ["SELECT", "T1.name", ",", "T1.date", ",", "T2.name", "FROM", "race", "AS", "T1", "JOIN", "track", "AS", "T2", "ON", "T1.track_id", "=", "T2.track_id"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "t1", ".", "date", ",", "t2", ".", "name", "from", "race", "as", "t1", "join", "track", "as", "t2", "on", "t1", ".", "track_id", "=", "t2", ".", "track_id"], "question": "What are the names and dates of races, and the names of the tracks where they are held?", "question_toks": ["What", "are", "the", "names", "and", "dates", "of", "races", ",", "and", "the", "names", "of", "the", "tracks", "where", "they", "are", "held", "?"], "guid": 2955}}
{"text": "basketball_match: Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home; university: School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference | Return the average enrollment of universities founded before 1850.", "sql": "SELECT avg(enrollment) FROM university WHERE founded  <  1850", "example": {"db_id": "university_basketball", "query": "SELECT avg(enrollment) FROM university WHERE founded  <  1850", "query_toks": ["SELECT", "avg", "(", "enrollment", ")", "FROM", "university", "WHERE", "founded", "<", "1850"], "query_toks_no_value": ["select", "avg", "(", "enrollment", ")", "from", "university", "where", "founded", "<", "value"], "question": "Return the average enrollment of universities founded before 1850.", "question_toks": ["Return", "the", "average", "enrollment", "of", "universities", "founded", "before", "1850", "."], "guid": 2956}}
{"text": "gymnast: Gymnast_ID, Floor_Exercise_Points, Pommel_Horse_Points, Rings_Points, Vault_Points, Parallel_Bars_Points, Horizontal_Bar_Points, Total_Points; people: People_ID, Name, Age, Height, Hometown | From which hometowns did no gymnasts come from?", "sql": "SELECT DISTINCT Hometown FROM people EXCEPT SELECT DISTINCT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID", "example": {"db_id": "gymnast", "query": "SELECT DISTINCT Hometown FROM people EXCEPT SELECT DISTINCT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID", "query_toks": ["SELECT", "DISTINCT", "Hometown", "FROM", "people", "EXCEPT", "SELECT", "DISTINCT", "T2.Hometown", "FROM", "gymnast", "AS", "T1", "JOIN", "people", "AS", "T2", "ON", "T1.Gymnast_ID", "=", "T2.People_ID"], "query_toks_no_value": ["select", "distinct", "hometown", "from", "people", "except", "select", "distinct", "t2", ".", "hometown", "from", "gymnast", "as", "t1", "join", "people", "as", "t2", "on", "t1", ".", "gymnast_id", "=", "t2", ".", "people_id"], "question": "From which hometowns did no gymnasts come from?", "question_toks": ["From", "which", "hometowns", "did", "no", "gymnasts", "come", "from", "?"], "guid": 2957}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | What is the id and stop number for each driver that has a shorter pit stop than the driver in the race with id 841?", "sql": "SELECT DISTINCT driverid ,  STOP FROM pitstops WHERE duration  <  (SELECT max(duration) FROM pitstops WHERE raceid  =  841)", "example": {"db_id": "formula_1", "query": "SELECT DISTINCT driverid ,  STOP FROM pitstops WHERE duration  <  (SELECT max(duration) FROM pitstops WHERE raceid  =  841)", "query_toks": ["SELECT", "DISTINCT", "driverid", ",", "STOP", "FROM", "pitstops", "WHERE", "duration", "<", "(", "SELECT", "max", "(", "duration", ")", "FROM", "pitstops", "WHERE", "raceid", "=", "841", ")"], "query_toks_no_value": ["select", "distinct", "driverid", ",", "stop", "from", "pitstops", "where", "duration", "<", "(", "select", "max", "(", "duration", ")", "from", "pitstops", "where", "raceid", "=", "value", ")"], "question": "What is the id and stop number for each driver that has a shorter pit stop than the driver in the race with id 841?", "question_toks": ["What", "is", "the", "id", "and", "stop", "number", "for", "each", "driver", "that", "has", "a", "shorter", "pit", "stop", "than", "the", "driver", "in", "the", "race", "with", "id", "841", "?"], "guid": 2958}}
{"text": "race: Race_ID, Name, Class, Date, Track_ID; track: Track_ID, Name, Location, Seating, Year_Opened | How many races are there?", "sql": "SELECT count(*) FROM race", "example": {"db_id": "race_track", "query": "SELECT count(*) FROM race", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "race"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "race"], "question": "How many races are there?", "question_toks": ["How", "many", "races", "are", "there", "?"], "guid": 2959}}
{"text": "race: Race_ID, Name, Class, Date, Track_ID; track: Track_ID, Name, Location, Seating, Year_Opened | Count the number of races.", "sql": "SELECT count(*) FROM race", "example": {"db_id": "race_track", "query": "SELECT count(*) FROM race", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "race"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "race"], "question": "Count the number of races.", "question_toks": ["Count", "the", "number", "of", "races", "."], "guid": 2960}}
{"text": "swimmer: ID, name, Nationality, meter_100, meter_200, meter_300, meter_400, meter_500, meter_600, meter_700; stadium: ID, name, Capacity, City, Country, Opening_year; event: ID, Name, Stadium_ID, Year; record: ID, Result, Swimmer_ID, Event_ID | How many cities have a stadium that was opened before the year of 2006?", "sql": "SELECT count(DISTINCT city) FROM stadium WHERE opening_year  <  2006", "example": {"db_id": "swimming", "query": "SELECT count(DISTINCT city) FROM stadium WHERE opening_year  <  2006", "query_toks": ["SELECT", "count", "(", "DISTINCT", "city", ")", "FROM", "stadium", "WHERE", "opening_year", "<", "2006"], "query_toks_no_value": ["select", "count", "(", "distinct", "city", ")", "from", "stadium", "where", "opening_year", "<", "value"], "question": "How many cities have a stadium that was opened before the year of 2006?", "question_toks": ["How", "many", "cities", "have", "a", "stadium", "that", "was", "opened", "before", "the", "year", "of", "2006", "?"], "guid": 2961}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | What is the name of every city that has at least 15 stations and how many stations does it have?", "sql": "SELECT city ,  COUNT(*) FROM station GROUP BY city HAVING COUNT(*)  >=  15", "example": {"db_id": "bike_1", "query": "SELECT city ,  COUNT(*) FROM station GROUP BY city HAVING COUNT(*)  >=  15", "query_toks": ["SELECT", "city", ",", "COUNT", "(", "*", ")", "FROM", "station", "GROUP", "BY", "city", "HAVING", "COUNT", "(", "*", ")", ">", "=", "15"], "query_toks_no_value": ["select", "city", ",", "count", "(", "*", ")", "from", "station", "group", "by", "city", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "What is the name of every city that has at least 15 stations and how many stations does it have?", "question_toks": ["What", "is", "the", "name", "of", "every", "city", "that", "has", "at", "least", "15", "stations", "and", "how", "many", "stations", "does", "it", "have", "?"], "guid": 2962}}
{"text": "wrestler: Wrestler_ID, Name, Reign, Days_held, Location, Event; Elimination: Elimination_ID, Wrestler_ID, Team, Eliminated_By, Elimination_Move, Time | Show different teams in eliminations and the number of eliminations from each team.", "sql": "SELECT Team ,  COUNT(*) FROM elimination GROUP BY Team", "example": {"db_id": "wrestler", "query": "SELECT Team ,  COUNT(*) FROM elimination GROUP BY Team", "query_toks": ["SELECT", "Team", ",", "COUNT", "(", "*", ")", "FROM", "elimination", "GROUP", "BY", "Team"], "query_toks_no_value": ["select", "team", ",", "count", "(", "*", ")", "from", "elimination", "group", "by", "team"], "question": "Show different teams in eliminations and the number of eliminations from each team.", "question_toks": ["Show", "different", "teams", "in", "eliminations", "and", "the", "number", "of", "eliminations", "from", "each", "team", "."], "guid": 2963}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | What are the names of schools with the top 3 largest size?", "sql": "SELECT cName FROM college ORDER BY enr DESC LIMIT 3", "example": {"db_id": "soccer_2", "query": "SELECT cName FROM college ORDER BY enr DESC LIMIT 3", "query_toks": ["SELECT", "cName", "FROM", "college", "ORDER", "BY", "enr", "DESC", "LIMIT", "3"], "query_toks_no_value": ["select", "cname", "from", "college", "order", "by", "enr", "desc", "limit", "value"], "question": "What are the names of schools with the top 3 largest size?", "question_toks": ["What", "are", "the", "names", "of", "schools", "with", "the", "top", "3", "largest", "size", "?"], "guid": 2964}}
{"text": "race: Race_ID, Name, Class, Date, Track_ID; track: Track_ID, Name, Location, Seating, Year_Opened | Show the name and date for each race and its track name.", "sql": "SELECT T1.name ,  T1.date ,  T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id", "example": {"db_id": "race_track", "query": "SELECT T1.name ,  T1.date ,  T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id", "query_toks": ["SELECT", "T1.name", ",", "T1.date", ",", "T2.name", "FROM", "race", "AS", "T1", "JOIN", "track", "AS", "T2", "ON", "T1.track_id", "=", "T2.track_id"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "t1", ".", "date", ",", "t2", ".", "name", "from", "race", "as", "t1", "join", "track", "as", "t2", "on", "t1", ".", "track_id", "=", "t2", ".", "track_id"], "question": "Show the name and date for each race and its track name.", "question_toks": ["Show", "the", "name", "and", "date", "for", "each", "race", "and", "its", "track", "name", "."], "guid": 2965}}
{"text": "country: Country_id, Country_name, Capital, Official_native_language; team: Team_id, Name; match_season: Season, Player, Position, Country, Team, Draft_Pick_Number, Draft_Class, College; player: Player_ID, Player, Years_Played, Total_WL, Singles_WL, Doubles_WL, Team | Show the season, the player, and the name of the team that players belong to.", "sql": "SELECT T1.Season ,  T1.Player ,  T2.Name FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id", "example": {"db_id": "match_season", "query": "SELECT T1.Season ,  T1.Player ,  T2.Name FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id", "query_toks": ["SELECT", "T1.Season", ",", "T1.Player", ",", "T2.Name", "FROM", "match_season", "AS", "T1", "JOIN", "team", "AS", "T2", "ON", "T1.Team", "=", "T2.Team_id"], "query_toks_no_value": ["select", "t1", ".", "season", ",", "t1", ".", "player", ",", "t2", ".", "name", "from", "match_season", "as", "t1", "join", "team", "as", "t2", "on", "t1", ".", "team", "=", "t2", ".", "team_id"], "question": "Show the season, the player, and the name of the team that players belong to.", "question_toks": ["Show", "the", "season", ",", "the", "player", ",", "and", "the", "name", "of", "the", "team", "that", "players", "belong", "to", "."], "guid": 2966}}
{"text": "poker_player: Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings; people: People_ID, Nationality, Name, Birth_Date, Height | Count the number of different nationalities.", "sql": "SELECT count(DISTINCT Nationality) FROM people", "example": {"db_id": "poker_player", "query": "SELECT count(DISTINCT Nationality) FROM people", "query_toks": ["SELECT", "count", "(", "DISTINCT", "Nationality", ")", "FROM", "people"], "query_toks_no_value": ["select", "count", "(", "distinct", "nationality", ")", "from", "people"], "question": "Count the number of different nationalities.", "question_toks": ["Count", "the", "number", "of", "different", "nationalities", "."], "guid": 2967}}
{"text": "mountain: Mountain_ID, Name, Height, Prominence, Range, Country; climber: Climber_ID, Name, Country, Time, Points, Mountain_ID | What is the name of the highest mountain?", "sql": "SELECT Name FROM mountain ORDER BY Height DESC LIMIT 1", "example": {"db_id": "climbing", "query": "SELECT Name FROM mountain ORDER BY Height DESC LIMIT 1", "query_toks": ["SELECT", "Name", "FROM", "mountain", "ORDER", "BY", "Height", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "name", "from", "mountain", "order", "by", "height", "desc", "limit", "value"], "question": "What is the name of the highest mountain?", "question_toks": ["What", "is", "the", "name", "of", "the", "highest", "mountain", "?"], "guid": 2968}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | List the clubs that have at least a member with advisor \"1121\".", "sql": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.advisor  =  1121", "example": {"db_id": "club_1", "query": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.advisor  =  1121", "query_toks": ["SELECT", "DISTINCT", "t1.clubname", "FROM", "club", "AS", "t1", "JOIN", "member_of_club", "AS", "t2", "ON", "t1.clubid", "=", "t2.clubid", "JOIN", "student", "AS", "t3", "ON", "t2.stuid", "=", "t3.stuid", "WHERE", "t3.advisor", "=", "1121"], "query_toks_no_value": ["select", "distinct", "t1", ".", "clubname", "from", "club", "as", "t1", "join", "member_of_club", "as", "t2", "on", "t1", ".", "clubid", "=", "t2", ".", "clubid", "join", "student", "as", "t3", "on", "t2", ".", "stuid", "=", "t3", ".", "stuid", "where", "t3", ".", "advisor", "=", "value"], "question": "List the clubs that have at least a member with advisor \"1121\".", "question_toks": ["List", "the", "clubs", "that", "have", "at", "least", "a", "member", "with", "advisor", "``", "1121", "''", "."], "guid": 2969}}
{"text": "basketball_match: Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home; university: School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference | What are the names of all the teams in the basketball competition, sorted by all home scores in descending order?", "sql": "SELECT team_name FROM basketball_match ORDER BY All_Home DESC", "example": {"db_id": "university_basketball", "query": "SELECT team_name FROM basketball_match ORDER BY All_Home DESC", "query_toks": ["SELECT", "team_name", "FROM", "basketball_match", "ORDER", "BY", "All_Home", "DESC"], "query_toks_no_value": ["select", "team_name", "from", "basketball_match", "order", "by", "all_home", "desc"], "question": "What are the names of all the teams in the basketball competition, sorted by all home scores in descending order?", "question_toks": ["What", "are", "the", "names", "of", "all", "the", "teams", "in", "the", "basketball", "competition", ",", "sorted", "by", "all", "home", "scores", "in", "descending", "order", "?"], "guid": 2970}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | What are the names of all tryout participants who are from the largest college?", "sql": "SELECT T2.pName FROM  tryout AS T1 JOIN player AS T2 ON T1.pID  =  T2.pID WHERE T1.cName  =  (SELECT cName FROM college ORDER BY enr DESC LIMIT 1)", "example": {"db_id": "soccer_2", "query": "SELECT T2.pName FROM  tryout AS T1 JOIN player AS T2 ON T1.pID  =  T2.pID WHERE T1.cName  =  (SELECT cName FROM college ORDER BY enr DESC LIMIT 1)", "query_toks": ["SELECT", "T2.pName", "FROM", "tryout", "AS", "T1", "JOIN", "player", "AS", "T2", "ON", "T1.pID", "=", "T2.pID", "WHERE", "T1.cName", "=", "(", "SELECT", "cName", "FROM", "college", "ORDER", "BY", "enr", "DESC", "LIMIT", "1", ")"], "query_toks_no_value": ["select", "t2", ".", "pname", "from", "tryout", "as", "t1", "join", "player", "as", "t2", "on", "t1", ".", "pid", "=", "t2", ".", "pid", "where", "t1", ".", "cname", "=", "(", "select", "cname", "from", "college", "order", "by", "enr", "desc", "limit", "value", ")"], "question": "What are the names of all tryout participants who are from the largest college?", "question_toks": ["What", "are", "the", "names", "of", "all", "tryout", "participants", "who", "are", "from", "the", "largest", "college", "?"], "guid": 2971}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | How many drivers did not participate in the races held in 2009?", "sql": "SELECT count(DISTINCT driverId) FROM results WHERE raceId NOT IN( SELECT raceId FROM races WHERE YEAR != 2009 )", "example": {"db_id": "formula_1", "query": "SELECT count(DISTINCT driverId) FROM results WHERE raceId NOT IN( SELECT raceId FROM races WHERE YEAR != 2009 )", "query_toks": ["SELECT", "count", "(", "DISTINCT", "driverId", ")", "FROM", "results", "WHERE", "raceId", "NOT", "IN", "(", "SELECT", "raceId", "FROM", "races", "WHERE", "YEAR", "!", "=", "2009", ")"], "query_toks_no_value": ["select", "count", "(", "distinct", "driverid", ")", "from", "results", "where", "raceid", "not", "in", "(", "select", "raceid", "from", "races", "where", "year", "!", "=", "value", ")"], "question": "How many drivers did not participate in the races held in 2009?", "question_toks": ["How", "many", "drivers", "did", "not", "participate", "in", "the", "races", "held", "in", "2009", "?"], "guid": 2972}}
{"text": "poker_player: Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings; people: People_ID, Nationality, Name, Birth_Date, Height | Give average earnings of poker players who are taller than 200.", "sql": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200", "example": {"db_id": "poker_player", "query": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200", "query_toks": ["SELECT", "avg", "(", "T2.Earnings", ")", "FROM", "people", "AS", "T1", "JOIN", "poker_player", "AS", "T2", "ON", "T1.People_ID", "=", "T2.People_ID", "WHERE", "T1.Height", ">", "200"], "query_toks_no_value": ["select", "avg", "(", "t2", ".", "earnings", ")", "from", "people", "as", "t1", "join", "poker_player", "as", "t2", "on", "t1", ".", "people_id", "=", "t2", ".", "people_id", "where", "t1", ".", "height", ">", "value"], "question": "Give average earnings of poker players who are taller than 200.", "question_toks": ["Give", "average", "earnings", "of", "poker", "players", "who", "are", "taller", "than", "200", "."], "guid": 2973}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | How many clubs are located at \"HHH\"?", "sql": "SELECT count(*) FROM club WHERE clublocation  =  \"HHH\"", "example": {"db_id": "club_1", "query": "SELECT count(*) FROM club WHERE clublocation  =  \"HHH\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "club", "WHERE", "clublocation", "=", "``", "HHH", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "club", "where", "clublocation", "=", "value"], "question": "How many clubs are located at \"HHH\"?", "question_toks": ["How", "many", "clubs", "are", "located", "at", "``", "HHH", "''", "?"], "guid": 2974}}
{"text": "club: Club_ID, name, Region, Start_year; club_rank: Rank, Club_ID, Gold, Silver, Bronze, Total; player: Player_ID, name, Position, Club_ID, Apps, Tries, Goals, Points; competition: Competition_ID, Year, Competition_type, Country; competition_result: Competition_ID, Club_ID_1, Club_ID_2, Score | What are the different years for all competitions that are not of type equal to tournament?", "sql": "SELECT DISTINCT YEAR FROM competition WHERE Competition_type != \"Tournament\"", "example": {"db_id": "sports_competition", "query": "SELECT DISTINCT YEAR FROM competition WHERE Competition_type != \"Tournament\"", "query_toks": ["SELECT", "DISTINCT", "YEAR", "FROM", "competition", "WHERE", "Competition_type", "!", "=", "``", "Tournament", "''"], "query_toks_no_value": ["select", "distinct", "year", "from", "competition", "where", "competition_type", "!", "=", "value"], "question": "What are the different years for all competitions that are not of type equal to tournament?", "question_toks": ["What", "are", "the", "different", "years", "for", "all", "competitions", "that", "are", "not", "of", "type", "equal", "to", "tournament", "?"], "guid": 2975}}
{"text": "players: player_id, first_name, last_name, hand, birth_date, country_code; matches: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank; rankings: ranking_date, ranking, player_id, ranking_points, tours | List the first and last name of all players who are left / L hand in the order of birth date.", "sql": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date", "example": {"db_id": "wta_1", "query": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date", "query_toks": ["SELECT", "first_name", ",", "last_name", "FROM", "players", "WHERE", "hand", "=", "'L", "'", "ORDER", "BY", "birth_date"], "query_toks_no_value": ["select", "first_name", ",", "last_name", "from", "players", "where", "hand", "=", "value", "order", "by", "birth_date"], "question": "List the first and last name of all players who are left / L hand in the order of birth date.", "question_toks": ["List", "the", "first", "and", "last", "name", "of", "all", "players", "who", "are", "left", "/", "L", "hand", "in", "the", "order", "of", "birth", "date", "."], "guid": 2976}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | What is the maximum fastest lap speed in the Monaco Grand Prix in 2008?", "sql": "SELECT max(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = \"Monaco Grand Prix\"", "example": {"db_id": "formula_1", "query": "SELECT max(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = \"Monaco Grand Prix\"", "query_toks": ["SELECT", "max", "(", "T2.fastestlapspeed", ")", "FROM", "races", "AS", "T1", "JOIN", "results", "AS", "T2", "ON", "T1.raceid", "=", "T2.raceid", "WHERE", "T1.year", "=", "2008", "AND", "T1.name", "=", "``", "Monaco", "Grand", "Prix", "''"], "query_toks_no_value": ["select", "max", "(", "t2", ".", "fastestlapspeed", ")", "from", "races", "as", "t1", "join", "results", "as", "t2", "on", "t1", ".", "raceid", "=", "t2", ".", "raceid", "where", "t1", ".", "year", "=", "value", "and", "t1", ".", "name", "=", "value"], "question": "What is the maximum fastest lap speed in the Monaco Grand Prix in 2008?", "question_toks": ["What", "is", "the", "maximum", "fastest", "lap", "speed", "in", "the", "Monaco", "Grand", "Prix", "in", "2008", "?"], "guid": 2977}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | Find names of colleges with enrollment greater than that of some (at least one) college in the FL state.", "sql": "SELECT DISTINCT cName FROM college WHERE enr  >  (SELECT min(enr) FROM college WHERE state  =  'FL')", "example": {"db_id": "soccer_2", "query": "SELECT DISTINCT cName FROM college WHERE enr  >  (SELECT min(enr) FROM college WHERE state  =  'FL')", "query_toks": ["SELECT", "DISTINCT", "cName", "FROM", "college", "WHERE", "enr", ">", "(", "SELECT", "min", "(", "enr", ")", "FROM", "college", "WHERE", "state", "=", "'FL", "'", ")"], "query_toks_no_value": ["select", "distinct", "cname", "from", "college", "where", "enr", ">", "(", "select", "min", "(", "enr", ")", "from", "college", "where", "state", "=", "value", ")"], "question": "Find names of colleges with enrollment greater than that of some (at least one) college in the FL state.", "question_toks": ["Find", "names", "of", "colleges", "with", "enrollment", "greater", "than", "that", "of", "some", "(", "at", "least", "one", ")", "college", "in", "the", "FL", "state", "."], "guid": 2978}}
{"text": "country: Country_id, Country_name, Capital, Official_native_language; team: Team_id, Name; match_season: Season, Player, Position, Country, Team, Draft_Pick_Number, Draft_Class, College; player: Player_ID, Player, Years_Played, Total_WL, Singles_WL, Doubles_WL, Team | What are the different positions for match season?", "sql": "SELECT DISTINCT POSITION FROM match_season", "example": {"db_id": "match_season", "query": "SELECT DISTINCT POSITION FROM match_season", "query_toks": ["SELECT", "DISTINCT", "POSITION", "FROM", "match_season"], "query_toks_no_value": ["select", "distinct", "position", "from", "match_season"], "question": "What are the different positions for match season?", "question_toks": ["What", "are", "the", "different", "positions", "for", "match", "season", "?"], "guid": 2979}}
{"text": "club: Club_ID, name, Region, Start_year; club_rank: Rank, Club_ID, Gold, Silver, Bronze, Total; player: Player_ID, name, Position, Club_ID, Apps, Tries, Goals, Points; competition: Competition_ID, Year, Competition_type, Country; competition_result: Competition_ID, Club_ID_1, Club_ID_2, Score | which country did participated in the most number of Tournament competitions?", "sql": "SELECT country FROM competition WHERE competition_type  =  'Tournament' GROUP BY country ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "sports_competition", "query": "SELECT country FROM competition WHERE competition_type  =  'Tournament' GROUP BY country ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "country", "FROM", "competition", "WHERE", "competition_type", "=", "'Tournament", "'", "GROUP", "BY", "country", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "country", "from", "competition", "where", "competition_type", "=", "value", "group", "by", "country", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "which country did participated in the most number of Tournament competitions?", "question_toks": ["which", "country", "did", "participated", "in", "the", "most", "number", "of", "Tournament", "competitions", "?"], "guid": 2980}}
{"text": "players: player_id, first_name, last_name, hand, birth_date, country_code; matches: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank; rankings: ranking_date, ranking, player_id, ranking_points, tours | Find the number of matches happened in each year.", "sql": "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR", "example": {"db_id": "wta_1", "query": "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "YEAR", "FROM", "matches", "GROUP", "BY", "YEAR"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "year", "from", "matches", "group", "by", "year"], "question": "Find the number of matches happened in each year.", "question_toks": ["Find", "the", "number", "of", "matches", "happened", "in", "each", "year", "."], "guid": 2981}}
{"text": "club: Club_ID, name, Region, Start_year; club_rank: Rank, Club_ID, Gold, Silver, Bronze, Total; player: Player_ID, name, Position, Club_ID, Apps, Tries, Goals, Points; competition: Competition_ID, Year, Competition_type, Country; competition_result: Competition_ID, Club_ID_1, Club_ID_2, Score | What are the types of competition that have most 5 competitions for that type?", "sql": "SELECT Competition_type FROM competition GROUP BY Competition_type HAVING COUNT(*)  <=  5", "example": {"db_id": "sports_competition", "query": "SELECT Competition_type FROM competition GROUP BY Competition_type HAVING COUNT(*)  <=  5", "query_toks": ["SELECT", "Competition_type", "FROM", "competition", "GROUP", "BY", "Competition_type", "HAVING", "COUNT", "(", "*", ")", "<", "=", "5"], "query_toks_no_value": ["select", "competition_type", "from", "competition", "group", "by", "competition_type", "having", "count", "(", "*", ")", "<", "=", "value"], "question": "What are the types of competition that have most 5 competitions for that type?", "question_toks": ["What", "are", "the", "types", "of", "competition", "that", "have", "most", "5", "competitions", "for", "that", "type", "?"], "guid": 2982}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | What are all the different zip codes that have a maximum dew point that was always below 70?", "sql": "SELECT DISTINCT zip_code FROM weather EXCEPT SELECT DISTINCT zip_code FROM weather WHERE max_dew_point_f  >=  70", "example": {"db_id": "bike_1", "query": "SELECT DISTINCT zip_code FROM weather EXCEPT SELECT DISTINCT zip_code FROM weather WHERE max_dew_point_f  >=  70", "query_toks": ["SELECT", "DISTINCT", "zip_code", "FROM", "weather", "EXCEPT", "SELECT", "DISTINCT", "zip_code", "FROM", "weather", "WHERE", "max_dew_point_f", ">", "=", "70"], "query_toks_no_value": ["select", "distinct", "zip_code", "from", "weather", "except", "select", "distinct", "zip_code", "from", "weather", "where", "max_dew_point_f", ">", "=", "value"], "question": "What are all the different zip codes that have a maximum dew point that was always below 70?", "question_toks": ["What", "are", "all", "the", "different", "zip", "codes", "that", "have", "a", "maximum", "dew", "point", "that", "was", "always", "below", "70", "?"], "guid": 2983}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | Find the number of members of club \"Pen and Paper Gaming\".", "sql": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Pen and Paper Gaming\"", "example": {"db_id": "club_1", "query": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Pen and Paper Gaming\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "club", "AS", "t1", "JOIN", "member_of_club", "AS", "t2", "ON", "t1.clubid", "=", "t2.clubid", "JOIN", "student", "AS", "t3", "ON", "t2.stuid", "=", "t3.stuid", "WHERE", "t1.clubname", "=", "``", "Pen", "and", "Paper", "Gaming", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "club", "as", "t1", "join", "member_of_club", "as", "t2", "on", "t1", ".", "clubid", "=", "t2", ".", "clubid", "join", "student", "as", "t3", "on", "t2", ".", "stuid", "=", "t3", ".", "stuid", "where", "t1", ".", "clubname", "=", "value"], "question": "Find the number of members of club \"Pen and Paper Gaming\".", "question_toks": ["Find", "the", "number", "of", "members", "of", "club", "``", "Pen", "and", "Paper", "Gaming", "''", "."], "guid": 2984}}
{"text": "club: Club_ID, name, Region, Start_year; club_rank: Rank, Club_ID, Gold, Silver, Bronze, Total; player: Player_ID, name, Position, Club_ID, Apps, Tries, Goals, Points; competition: Competition_ID, Year, Competition_type, Country; competition_result: Competition_ID, Club_ID_1, Club_ID_2, Score | What are the maximum and minimum number of silver medals for clubs.", "sql": "SELECT max(Silver) ,  min(Silver) FROM club_rank", "example": {"db_id": "sports_competition", "query": "SELECT max(Silver) ,  min(Silver) FROM club_rank", "query_toks": ["SELECT", "max", "(", "Silver", ")", ",", "min", "(", "Silver", ")", "FROM", "club_rank"], "query_toks_no_value": ["select", "max", "(", "silver", ")", ",", "min", "(", "silver", ")", "from", "club_rank"], "question": "What are the maximum and minimum number of silver medals for clubs.", "question_toks": ["What", "are", "the", "maximum", "and", "minimum", "number", "of", "silver", "medals", "for", "clubs", "."], "guid": 2985}}
{"text": "wrestler: Wrestler_ID, Name, Reign, Days_held, Location, Event; Elimination: Elimination_ID, Wrestler_ID, Team, Eliminated_By, Elimination_Move, Time | How many different teams have had eliminated wrestlers?", "sql": "SELECT COUNT (DISTINCT team) FROM elimination", "example": {"db_id": "wrestler", "query": "SELECT COUNT (DISTINCT team) FROM elimination", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "team", ")", "FROM", "elimination"], "query_toks_no_value": ["select", "count", "(", "distinct", "team", ")", "from", "elimination"], "question": "How many different teams have had eliminated wrestlers?", "question_toks": ["How", "many", "different", "teams", "have", "had", "eliminated", "wrestlers", "?"], "guid": 2986}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | What is the average age of the members of the club \"Bootup Baltimore\"?", "sql": "SELECT avg(t3.age) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\"", "example": {"db_id": "club_1", "query": "SELECT avg(t3.age) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\"", "query_toks": ["SELECT", "avg", "(", "t3.age", ")", "FROM", "club", "AS", "t1", "JOIN", "member_of_club", "AS", "t2", "ON", "t1.clubid", "=", "t2.clubid", "JOIN", "student", "AS", "t3", "ON", "t2.stuid", "=", "t3.stuid", "WHERE", "t1.clubname", "=", "``", "Bootup", "Baltimore", "''"], "query_toks_no_value": ["select", "avg", "(", "t3", ".", "age", ")", "from", "club", "as", "t1", "join", "member_of_club", "as", "t2", "on", "t1", ".", "clubid", "=", "t2", ".", "clubid", "join", "student", "as", "t3", "on", "t2", ".", "stuid", "=", "t3", ".", "stuid", "where", "t1", ".", "clubname", "=", "value"], "question": "What is the average age of the members of the club \"Bootup Baltimore\"?", "question_toks": ["What", "is", "the", "average", "age", "of", "the", "members", "of", "the", "club", "``", "Bootup", "Baltimore", "''", "?"], "guid": 2987}}
{"text": "players: player_id, first_name, last_name, hand, birth_date, country_code; matches: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank; rankings: ranking_date, ranking, player_id, ranking_points, tours | find the number of players for each country.", "sql": "SELECT count(*) ,  country_code FROM players GROUP BY country_code", "example": {"db_id": "wta_1", "query": "SELECT count(*) ,  country_code FROM players GROUP BY country_code", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "country_code", "FROM", "players", "GROUP", "BY", "country_code"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "country_code", "from", "players", "group", "by", "country_code"], "question": "find the number of players for each country.", "question_toks": ["find", "the", "number", "of", "players", "for", "each", "country", "."], "guid": 2988}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | What are the last names and ids of all drivers who had 11 pit stops and participated in more than 5 races?", "sql": "SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  =  11 INTERSECT SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  5", "example": {"db_id": "formula_1", "query": "SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  =  11 INTERSECT SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  5", "query_toks": ["SELECT", "T1.surname", ",", "T1.driverid", "FROM", "drivers", "AS", "T1", "JOIN", "pitstops", "AS", "T2", "ON", "T1.driverid", "=", "T2.driverid", "GROUP", "BY", "T1.driverid", "HAVING", "count", "(", "*", ")", "=", "11", "INTERSECT", "SELECT", "T1.surname", ",", "T1.driverid", "FROM", "drivers", "AS", "T1", "JOIN", "results", "AS", "T2", "ON", "T1.driverid", "=", "T2.driverid", "GROUP", "BY", "T1.driverid", "HAVING", "count", "(", "*", ")", ">", "5"], "query_toks_no_value": ["select", "t1", ".", "surname", ",", "t1", ".", "driverid", "from", "drivers", "as", "t1", "join", "pitstops", "as", "t2", "on", "t1", ".", "driverid", "=", "t2", ".", "driverid", "group", "by", "t1", ".", "driverid", "having", "count", "(", "*", ")", "=", "value", "intersect", "select", "t1", ".", "surname", ",", "t1", ".", "driverid", "from", "drivers", "as", "t1", "join", "results", "as", "t2", "on", "t1", ".", "driverid", "=", "t2", ".", "driverid", "group", "by", "t1", ".", "driverid", "having", "count", "(", "*", ")", ">", "value"], "question": "What are the last names and ids of all drivers who had 11 pit stops and participated in more than 5 races?", "question_toks": ["What", "are", "the", "last", "names", "and", "ids", "of", "all", "drivers", "who", "had", "11", "pit", "stops", "and", "participated", "in", "more", "than", "5", "races", "?"], "guid": 2989}}
{"text": "player: Player_ID, Sponsor_name, Player_name, Gender, Residence, Occupation, Votes, Rank; club: Club_ID, Club_name, Region, Start_year; coach: Coach_ID, Coach_name, Gender, Club_ID, Rank; player_coach: Player_ID, Coach_ID, Starting_year; match_result: Rank, Club_ID, Gold, Big_Silver, Small_Silver, Bronze, Points | How many players are there?", "sql": "SELECT count(*) FROM player", "example": {"db_id": "riding_club", "query": "SELECT count(*) FROM player", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "player"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "player"], "question": "How many players are there?", "question_toks": ["How", "many", "players", "are", "there", "?"], "guid": 2990}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | Find names of all colleges whose enrollment is greater than that of all colleges in the FL state.", "sql": "SELECT cName FROM college WHERE enr  >  (SELECT max(enr) FROM college WHERE state  =  'FL')", "example": {"db_id": "soccer_2", "query": "SELECT cName FROM college WHERE enr  >  (SELECT max(enr) FROM college WHERE state  =  'FL')", "query_toks": ["SELECT", "cName", "FROM", "college", "WHERE", "enr", ">", "(", "SELECT", "max", "(", "enr", ")", "FROM", "college", "WHERE", "state", "=", "'FL", "'", ")"], "query_toks_no_value": ["select", "cname", "from", "college", "where", "enr", ">", "(", "select", "max", "(", "enr", ")", "from", "college", "where", "state", "=", "value", ")"], "question": "Find names of all colleges whose enrollment is greater than that of all colleges in the FL state.", "question_toks": ["Find", "names", "of", "all", "colleges", "whose", "enrollment", "is", "greater", "than", "that", "of", "all", "colleges", "in", "the", "FL", "state", "."], "guid": 2991}}
{"text": "poker_player: Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings; people: People_ID, Nationality, Name, Birth_Date, Height | What is the birth date of the poker player with the lowest earnings?", "sql": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1", "example": {"db_id": "poker_player", "query": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1", "query_toks": ["SELECT", "T1.Birth_Date", "FROM", "people", "AS", "T1", "JOIN", "poker_player", "AS", "T2", "ON", "T1.People_ID", "=", "T2.People_ID", "ORDER", "BY", "T2.Earnings", "ASC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "birth_date", "from", "people", "as", "t1", "join", "poker_player", "as", "t2", "on", "t1", ".", "people_id", "=", "t2", ".", "people_id", "order", "by", "t2", ".", "earnings", "asc", "limit", "value"], "question": "What is the birth date of the poker player with the lowest earnings?", "question_toks": ["What", "is", "the", "birth", "date", "of", "the", "poker", "player", "with", "the", "lowest", "earnings", "?"], "guid": 2992}}
{"text": "wrestler: Wrestler_ID, Name, Reign, Days_held, Location, Event; Elimination: Elimination_ID, Wrestler_ID, Team, Eliminated_By, Elimination_Move, Time | Show the teams that have both wrestlers eliminated by \"Orton\" and wrestlers eliminated by \"Benjamin\".", "sql": "SELECT Team FROM Elimination WHERE Eliminated_By  =  \"Orton\" INTERSECT SELECT Team FROM Elimination WHERE Eliminated_By  =  \"Benjamin\"", "example": {"db_id": "wrestler", "query": "SELECT Team FROM Elimination WHERE Eliminated_By  =  \"Orton\" INTERSECT SELECT Team FROM Elimination WHERE Eliminated_By  =  \"Benjamin\"", "query_toks": ["SELECT", "Team", "FROM", "Elimination", "WHERE", "Eliminated_By", "=", "``", "Orton", "''", "INTERSECT", "SELECT", "Team", "FROM", "Elimination", "WHERE", "Eliminated_By", "=", "``", "Benjamin", "''"], "query_toks_no_value": ["select", "team", "from", "elimination", "where", "eliminated_by", "=", "value", "intersect", "select", "team", "from", "elimination", "where", "eliminated_by", "=", "value"], "question": "Show the teams that have both wrestlers eliminated by \"Orton\" and wrestlers eliminated by \"Benjamin\".", "question_toks": ["Show", "the", "teams", "that", "have", "both", "wrestlers", "eliminated", "by", "``", "Orton", "''", "and", "wrestlers", "eliminated", "by", "``", "Benjamin", "''", "."], "guid": 2993}}
{"text": "gymnast: Gymnast_ID, Floor_Exercise_Points, Pommel_Horse_Points, Rings_Points, Vault_Points, Parallel_Bars_Points, Horizontal_Bar_Points, Total_Points; people: People_ID, Name, Age, Height, Hometown | How many distinct hometowns did these people have?", "sql": "SELECT count(DISTINCT Hometown) FROM people", "example": {"db_id": "gymnast", "query": "SELECT count(DISTINCT Hometown) FROM people", "query_toks": ["SELECT", "count", "(", "DISTINCT", "Hometown", ")", "FROM", "people"], "query_toks_no_value": ["select", "count", "(", "distinct", "hometown", ")", "from", "people"], "question": "How many distinct hometowns did these people have?", "question_toks": ["How", "many", "distinct", "hometowns", "did", "these", "people", "have", "?"], "guid": 2994}}
{"text": "gymnast: Gymnast_ID, Floor_Exercise_Points, Pommel_Horse_Points, Rings_Points, Vault_Points, Parallel_Bars_Points, Horizontal_Bar_Points, Total_Points; people: People_ID, Name, Age, Height, Hometown | What is the age of the tallest person?", "sql": "SELECT Age FROM people ORDER BY Height DESC LIMIT 1", "example": {"db_id": "gymnast", "query": "SELECT Age FROM people ORDER BY Height DESC LIMIT 1", "query_toks": ["SELECT", "Age", "FROM", "people", "ORDER", "BY", "Height", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "age", "from", "people", "order", "by", "height", "desc", "limit", "value"], "question": "What is the age of the tallest person?", "question_toks": ["What", "is", "the", "age", "of", "the", "tallest", "person", "?"], "guid": 2995}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | What are the different states that had students successfully try out?", "sql": "SELECT DISTINCT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.decision  =  'yes'", "example": {"db_id": "soccer_2", "query": "SELECT DISTINCT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.decision  =  'yes'", "query_toks": ["SELECT", "DISTINCT", "T1.state", "FROM", "college", "AS", "T1", "JOIN", "tryout", "AS", "T2", "ON", "T1.cName", "=", "T2.cName", "WHERE", "T2.decision", "=", "'yes", "'"], "query_toks_no_value": ["select", "distinct", "t1", ".", "state", "from", "college", "as", "t1", "join", "tryout", "as", "t2", "on", "t1", ".", "cname", "=", "t2", ".", "cname", "where", "t2", ".", "decision", "=", "value"], "question": "What are the different states that had students successfully try out?", "question_toks": ["What", "are", "the", "different", "states", "that", "had", "students", "successfully", "try", "out", "?"], "guid": 2996}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | What is the name, latitude, and city of the station that is located the furthest South?", "sql": "SELECT name ,  lat ,  city FROM station ORDER BY lat LIMIT 1", "example": {"db_id": "bike_1", "query": "SELECT name ,  lat ,  city FROM station ORDER BY lat LIMIT 1", "query_toks": ["SELECT", "name", ",", "lat", ",", "city", "FROM", "station", "ORDER", "BY", "lat", "LIMIT", "1"], "query_toks_no_value": ["select", "name", ",", "lat", ",", "city", "from", "station", "order", "by", "lat", "limit", "value"], "question": "What is the name, latitude, and city of the station that is located the furthest South?", "question_toks": ["What", "is", "the", "name", ",", "latitude", ",", "and", "city", "of", "the", "station", "that", "is", "located", "the", "furthest", "South", "?"], "guid": 2997}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | What is the name and date of the most recent race?", "sql": "SELECT name ,  date FROM races ORDER BY date DESC LIMIT 1", "example": {"db_id": "formula_1", "query": "SELECT name ,  date FROM races ORDER BY date DESC LIMIT 1", "query_toks": ["SELECT", "name", ",", "date", "FROM", "races", "ORDER", "BY", "date", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "name", ",", "date", "from", "races", "order", "by", "date", "desc", "limit", "value"], "question": "What is the name and date of the most recent race?", "question_toks": ["What", "is", "the", "name", "and", "date", "of", "the", "most", "recent", "race", "?"], "guid": 2998}}
{"text": "gymnast: Gymnast_ID, Floor_Exercise_Points, Pommel_Horse_Points, Rings_Points, Vault_Points, Parallel_Bars_Points, Horizontal_Bar_Points, Total_Points; people: People_ID, Name, Age, Height, Hometown | List the names of the top 5 oldest people.", "sql": "SELECT Name FROM People ORDER BY Age DESC LIMIT 5", "example": {"db_id": "gymnast", "query": "SELECT Name FROM People ORDER BY Age DESC LIMIT 5", "query_toks": ["SELECT", "Name", "FROM", "People", "ORDER", "BY", "Age", "DESC", "LIMIT", "5"], "query_toks_no_value": ["select", "name", "from", "people", "order", "by", "age", "desc", "limit", "value"], "question": "List the names of the top 5 oldest people.", "question_toks": ["List", "the", "names", "of", "the", "top", "5", "oldest", "people", "."], "guid": 2999}}
{"text": "players: player_id, first_name, last_name, hand, birth_date, country_code; matches: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank; rankings: ranking_date, ranking, player_id, ranking_points, tours | How many different winners both participated in the WTA Championships and were left handed?", "sql": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'", "example": {"db_id": "wta_1", "query": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'", "query_toks": ["SELECT", "count", "(", "DISTINCT", "winner_name", ")", "FROM", "matches", "WHERE", "tourney_name", "=", "'WTA", "Championships", "'", "AND", "winner_hand", "=", "'L", "'"], "query_toks_no_value": ["select", "count", "(", "distinct", "winner_name", ")", "from", "matches", "where", "tourney_name", "=", "value", "and", "winner_hand", "=", "value"], "question": "How many different winners both participated in the WTA Championships and were left handed?", "question_toks": ["How", "many", "different", "winners", "both", "participated", "in", "the", "WTA", "Championships", "and", "were", "left", "handed", "?"], "guid": 3000}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | How many trips started from Mountain View city and ended at Palo Alto city?", "sql": "SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  \"Mountain View\" AND T3.city  =  \"Palo Alto\"", "example": {"db_id": "bike_1", "query": "SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  \"Mountain View\" AND T3.city  =  \"Palo Alto\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "station", "AS", "T1", "JOIN", "trip", "AS", "T2", "JOIN", "station", "AS", "T3", "JOIN", "trip", "AS", "T4", "ON", "T1.id", "=", "T2.start_station_id", "AND", "T2.id", "=", "T4.id", "AND", "T3.id", "=", "T4.end_station_id", "WHERE", "T1.city", "=", "``", "Mountain", "View", "''", "AND", "T3.city", "=", "``", "Palo", "Alto", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "station", "as", "t1", "join", "trip", "as", "t2", "join", "station", "as", "t3", "join", "trip", "as", "t4", "on", "t1", ".", "id", "=", "t2", ".", "start_station_id", "and", "t2", ".", "id", "=", "t4", ".", "id", "and", "t3", ".", "id", "=", "t4", ".", "end_station_id", "where", "t1", ".", "city", "=", "value", "and", "t3", ".", "city", "=", "value"], "question": "How many trips started from Mountain View city and ended at Palo Alto city?", "question_toks": ["How", "many", "trips", "started", "from", "Mountain", "View", "city", "and", "ended", "at", "Palo", "Alto", "city", "?"], "guid": 3001}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | List all the distinct stations from which a trip of duration below 100 started.", "sql": "SELECT DISTINCT start_station_name FROM trip WHERE duration  <  100", "example": {"db_id": "bike_1", "query": "SELECT DISTINCT start_station_name FROM trip WHERE duration  <  100", "query_toks": ["SELECT", "DISTINCT", "start_station_name", "FROM", "trip", "WHERE", "duration", "<", "100"], "query_toks_no_value": ["select", "distinct", "start_station_name", "from", "trip", "where", "duration", "<", "value"], "question": "List all the distinct stations from which a trip of duration below 100 started.", "question_toks": ["List", "all", "the", "distinct", "stations", "from", "which", "a", "trip", "of", "duration", "below", "100", "started", "."], "guid": 3002}}
{"text": "players: player_id, first_name, last_name, hand, birth_date, country_code; matches: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank; rankings: ranking_date, ranking, player_id, ranking_points, tours | How many matches were played in 2013 or 2016?", "sql": "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016", "example": {"db_id": "wta_1", "query": "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "matches", "WHERE", "YEAR", "=", "2013", "OR", "YEAR", "=", "2016"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "matches", "where", "year", "=", "value", "or", "year", "=", "value"], "question": "How many matches were played in 2013 or 2016?", "question_toks": ["How", "many", "matches", "were", "played", "in", "2013", "or", "2016", "?"], "guid": 3003}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | For each id of a driver who participated in at most 30 races, how many races did they participate in?", "sql": "SELECT T1.driverid ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  <=  30", "example": {"db_id": "formula_1", "query": "SELECT T1.driverid ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  <=  30", "query_toks": ["SELECT", "T1.driverid", ",", "count", "(", "*", ")", "FROM", "drivers", "AS", "T1", "JOIN", "results", "AS", "T2", "ON", "T1.driverid", "=", "T2.driverid", "JOIN", "races", "AS", "T3", "ON", "T2.raceid", "=", "T3.raceid", "GROUP", "BY", "T1.driverid", "HAVING", "count", "(", "*", ")", "<", "=", "30"], "query_toks_no_value": ["select", "t1", ".", "driverid", ",", "count", "(", "*", ")", "from", "drivers", "as", "t1", "join", "results", "as", "t2", "on", "t1", ".", "driverid", "=", "t2", ".", "driverid", "join", "races", "as", "t3", "on", "t2", ".", "raceid", "=", "t3", ".", "raceid", "group", "by", "t1", ".", "driverid", "having", "count", "(", "*", ")", "<", "=", "value"], "question": "For each id of a driver who participated in at most 30 races, how many races did they participate in?", "question_toks": ["For", "each", "id", "of", "a", "driver", "who", "participated", "in", "at", "most", "30", "races", ",", "how", "many", "races", "did", "they", "participate", "in", "?"], "guid": 3004}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | What are the names of the colleges that are larger than at least one college in Florida?", "sql": "SELECT DISTINCT cName FROM college WHERE enr  >  (SELECT min(enr) FROM college WHERE state  =  'FL')", "example": {"db_id": "soccer_2", "query": "SELECT DISTINCT cName FROM college WHERE enr  >  (SELECT min(enr) FROM college WHERE state  =  'FL')", "query_toks": ["SELECT", "DISTINCT", "cName", "FROM", "college", "WHERE", "enr", ">", "(", "SELECT", "min", "(", "enr", ")", "FROM", "college", "WHERE", "state", "=", "'FL", "'", ")"], "query_toks_no_value": ["select", "distinct", "cname", "from", "college", "where", "enr", ">", "(", "select", "min", "(", "enr", ")", "from", "college", "where", "state", "=", "value", ")"], "question": "What are the names of the colleges that are larger than at least one college in Florida?", "question_toks": ["What", "are", "the", "names", "of", "the", "colleges", "that", "are", "larger", "than", "at", "least", "one", "college", "in", "Florida", "?"], "guid": 3005}}
{"text": "basketball_match: Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home; university: School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference | How many universities have a location that contains NY?", "sql": "SELECT count(*) FROM university WHERE LOCATION LIKE \"%NY%\"", "example": {"db_id": "university_basketball", "query": "SELECT count(*) FROM university WHERE LOCATION LIKE \"%NY%\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "university", "WHERE", "LOCATION", "LIKE", "``", "%", "NY", "%", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "university", "where", "location", "like", "value"], "question": "How many universities have a location that contains NY?", "question_toks": ["How", "many", "universities", "have", "a", "location", "that", "contains", "NY", "?"], "guid": 3006}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | Give me the name of each club.", "sql": "SELECT clubname FROM club", "example": {"db_id": "club_1", "query": "SELECT clubname FROM club", "query_toks": ["SELECT", "clubname", "FROM", "club"], "query_toks_no_value": ["select", "clubname", "from", "club"], "question": "Give me the name of each club.", "question_toks": ["Give", "me", "the", "name", "of", "each", "club", "."], "guid": 3007}}
{"text": "mountain: Mountain_ID, Name, Height, Prominence, Range, Country; climber: Climber_ID, Name, Country, Time, Points, Mountain_ID | Return the countries of the mountains that have a height larger than 5000.", "sql": "SELECT Country FROM mountain WHERE Height  >  5000", "example": {"db_id": "climbing", "query": "SELECT Country FROM mountain WHERE Height  >  5000", "query_toks": ["SELECT", "Country", "FROM", "mountain", "WHERE", "Height", ">", "5000"], "query_toks_no_value": ["select", "country", "from", "mountain", "where", "height", ">", "value"], "question": "Return the countries of the mountains that have a height larger than 5000.", "question_toks": ["Return", "the", "countries", "of", "the", "mountains", "that", "have", "a", "height", "larger", "than", "5000", "."], "guid": 3008}}
{"text": "players: player_id, first_name, last_name, hand, birth_date, country_code; matches: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank; rankings: ranking_date, ranking, player_id, ranking_points, tours | What are the full names of all players, sorted by birth date?", "sql": "SELECT first_name ,  last_name FROM players ORDER BY birth_date", "example": {"db_id": "wta_1", "query": "SELECT first_name ,  last_name FROM players ORDER BY birth_date", "query_toks": ["SELECT", "first_name", ",", "last_name", "FROM", "players", "ORDER", "BY", "birth_date"], "query_toks_no_value": ["select", "first_name", ",", "last_name", "from", "players", "order", "by", "birth_date"], "question": "What are the full names of all players, sorted by birth date?", "question_toks": ["What", "are", "the", "full", "names", "of", "all", "players", ",", "sorted", "by", "birth", "date", "?"], "guid": 3009}}
{"text": "basketball_match: Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home; university: School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference | Find the schools that were either founded after 1850 or public.", "sql": "SELECT school FROM university WHERE founded  >  1850 OR affiliation  =  'Public'", "example": {"db_id": "university_basketball", "query": "SELECT school FROM university WHERE founded  >  1850 OR affiliation  =  'Public'", "query_toks": ["SELECT", "school", "FROM", "university", "WHERE", "founded", ">", "1850", "OR", "affiliation", "=", "'Public", "'"], "query_toks_no_value": ["select", "school", "from", "university", "where", "founded", ">", "value", "or", "affiliation", "=", "value"], "question": "Find the schools that were either founded after 1850 or public.", "question_toks": ["Find", "the", "schools", "that", "were", "either", "founded", "after", "1850", "or", "public", "."], "guid": 3010}}
{"text": "basketball_match: Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home; university: School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference | Find the total number of students enrolled in the colleges that were founded after the year of 1850 for each affiliation type.", "sql": "SELECT sum(Enrollment) ,  affiliation FROM university WHERE founded  >  1850 GROUP BY affiliation", "example": {"db_id": "university_basketball", "query": "SELECT sum(Enrollment) ,  affiliation FROM university WHERE founded  >  1850 GROUP BY affiliation", "query_toks": ["SELECT", "sum", "(", "Enrollment", ")", ",", "affiliation", "FROM", "university", "WHERE", "founded", ">", "1850", "GROUP", "BY", "affiliation"], "query_toks_no_value": ["select", "sum", "(", "enrollment", ")", ",", "affiliation", "from", "university", "where", "founded", ">", "value", "group", "by", "affiliation"], "question": "Find the total number of students enrolled in the colleges that were founded after the year of 1850 for each affiliation type.", "question_toks": ["Find", "the", "total", "number", "of", "students", "enrolled", "in", "the", "colleges", "that", "were", "founded", "after", "the", "year", "of", "1850", "for", "each", "affiliation", "type", "."], "guid": 3011}}
{"text": "players: player_id, first_name, last_name, hand, birth_date, country_code; matches: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank; rankings: ranking_date, ranking, player_id, ranking_points, tours | What are the first names of all players, and their total ranking points?", "sql": "SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name", "example": {"db_id": "wta_1", "query": "SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name", "query_toks": ["SELECT", "sum", "(", "ranking_points", ")", ",", "T1.first_name", "FROM", "players", "AS", "T1", "JOIN", "rankings", "AS", "T2", "ON", "T1.player_id", "=", "T2.player_id", "GROUP", "BY", "T1.first_name"], "query_toks_no_value": ["select", "sum", "(", "ranking_points", ")", ",", "t1", ".", "first_name", "from", "players", "as", "t1", "join", "rankings", "as", "t2", "on", "t1", ".", "player_id", "=", "t2", ".", "player_id", "group", "by", "t1", ".", "first_name"], "question": "What are the first names of all players, and their total ranking points?", "question_toks": ["What", "are", "the", "first", "names", "of", "all", "players", ",", "and", "their", "total", "ranking", "points", "?"], "guid": 3012}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | What is the average latitude and longitude of stations located in San Jose city?", "sql": "SELECT avg(lat) ,  avg(long) FROM station WHERE city  =  \"San Jose\"", "example": {"db_id": "bike_1", "query": "SELECT avg(lat) ,  avg(long) FROM station WHERE city  =  \"San Jose\"", "query_toks": ["SELECT", "avg", "(", "lat", ")", ",", "avg", "(", "long", ")", "FROM", "station", "WHERE", "city", "=", "``", "San", "Jose", "''"], "query_toks_no_value": ["select", "avg", "(", "lat", ")", ",", "avg", "(", "long", ")", "from", "station", "where", "city", "=", "value"], "question": "What is the average latitude and longitude of stations located in San Jose city?", "question_toks": ["What", "is", "the", "average", "latitude", "and", "longitude", "of", "stations", "located", "in", "San", "Jose", "city", "?"], "guid": 3013}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | What are the average fastest lap speed in races held after 2004 grouped by race name and ordered by year?", "sql": "SELECT avg(T2.fastestlapspeed) ,  T1.name ,  T1.year FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY T1.name ORDER BY T1.year", "example": {"db_id": "formula_1", "query": "SELECT avg(T2.fastestlapspeed) ,  T1.name ,  T1.year FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY T1.name ORDER BY T1.year", "query_toks": ["SELECT", "avg", "(", "T2.fastestlapspeed", ")", ",", "T1.name", ",", "T1.year", "FROM", "races", "AS", "T1", "JOIN", "results", "AS", "T2", "ON", "T1.raceid", "=", "T2.raceid", "WHERE", "T1.year", ">", "2014", "GROUP", "BY", "T1.name", "ORDER", "BY", "T1.year"], "query_toks_no_value": ["select", "avg", "(", "t2", ".", "fastestlapspeed", ")", ",", "t1", ".", "name", ",", "t1", ".", "year", "from", "races", "as", "t1", "join", "results", "as", "t2", "on", "t1", ".", "raceid", "=", "t2", ".", "raceid", "where", "t1", ".", "year", ">", "value", "group", "by", "t1", ".", "name", "order", "by", "t1", ".", "year"], "question": "What are the average fastest lap speed in races held after 2004 grouped by race name and ordered by year?", "question_toks": ["What", "are", "the", "average", "fastest", "lap", "speed", "in", "races", "held", "after", "2004", "grouped", "by", "race", "name", "and", "ordered", "by", "year", "?"], "guid": 3014}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | List all information about college sorted by enrollment number in the ascending order.", "sql": "SELECT * FROM College ORDER BY enr", "example": {"db_id": "soccer_2", "query": "SELECT * FROM College ORDER BY enr", "query_toks": ["SELECT", "*", "FROM", "College", "ORDER", "BY", "enr"], "query_toks_no_value": ["select", "*", "from", "college", "order", "by", "enr"], "question": "List all information about college sorted by enrollment number in the ascending order.", "question_toks": ["List", "all", "information", "about", "college", "sorted", "by", "enrollment", "number", "in", "the", "ascending", "order", "."], "guid": 3015}}
{"text": "mountain: Mountain_ID, Name, Height, Prominence, Range, Country; climber: Climber_ID, Name, Country, Time, Points, Mountain_ID | What are the names of climbers who are not from the country of Switzerland?", "sql": "SELECT Name FROM climber WHERE Country != \"Switzerland\"", "example": {"db_id": "climbing", "query": "SELECT Name FROM climber WHERE Country != \"Switzerland\"", "query_toks": ["SELECT", "Name", "FROM", "climber", "WHERE", "Country", "!", "=", "``", "Switzerland", "''"], "query_toks_no_value": ["select", "name", "from", "climber", "where", "country", "!", "=", "value"], "question": "What are the names of climbers who are not from the country of Switzerland?", "question_toks": ["What", "are", "the", "names", "of", "climbers", "who", "are", "not", "from", "the", "country", "of", "Switzerland", "?"], "guid": 3016}}
{"text": "club: Club_ID, name, Region, Start_year; club_rank: Rank, Club_ID, Gold, Silver, Bronze, Total; player: Player_ID, name, Position, Club_ID, Apps, Tries, Goals, Points; competition: Competition_ID, Year, Competition_type, Country; competition_result: Competition_ID, Club_ID_1, Club_ID_2, Score | Show the names of clubs that have players with position \"Right Wing\".", "sql": "SELECT T1.name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID WHERE T2.Position  =  \"Right Wing\"", "example": {"db_id": "sports_competition", "query": "SELECT T1.name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID WHERE T2.Position  =  \"Right Wing\"", "query_toks": ["SELECT", "T1.name", "FROM", "club", "AS", "T1", "JOIN", "player", "AS", "T2", "ON", "T1.Club_ID", "=", "T2.Club_ID", "WHERE", "T2.Position", "=", "``", "Right", "Wing", "''"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "club", "as", "t1", "join", "player", "as", "t2", "on", "t1", ".", "club_id", "=", "t2", ".", "club_id", "where", "t2", ".", "position", "=", "value"], "question": "Show the names of clubs that have players with position \"Right Wing\".", "question_toks": ["Show", "the", "names", "of", "clubs", "that", "have", "players", "with", "position", "``", "Right", "Wing", "''", "."], "guid": 3017}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | Find the average and maximum hours for the students whose tryout decision is yes.", "sql": "SELECT avg(T1.HS) ,  max(T1.HS) FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'", "example": {"db_id": "soccer_2", "query": "SELECT avg(T1.HS) ,  max(T1.HS) FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'", "query_toks": ["SELECT", "avg", "(", "T1.HS", ")", ",", "max", "(", "T1.HS", ")", "FROM", "player", "AS", "T1", "JOIN", "tryout", "AS", "T2", "ON", "T1.pID", "=", "T2.pID", "WHERE", "T2.decision", "=", "'yes", "'"], "query_toks_no_value": ["select", "avg", "(", "t1", ".", "hs", ")", ",", "max", "(", "t1", ".", "hs", ")", "from", "player", "as", "t1", "join", "tryout", "as", "t2", "on", "t1", ".", "pid", "=", "t2", ".", "pid", "where", "t2", ".", "decision", "=", "value"], "question": "Find the average and maximum hours for the students whose tryout decision is yes.", "question_toks": ["Find", "the", "average", "and", "maximum", "hours", "for", "the", "students", "whose", "tryout", "decision", "is", "yes", "."], "guid": 3018}}
{"text": "players: player_id, first_name, last_name, hand, birth_date, country_code; matches: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank; rankings: ranking_date, ranking, player_id, ranking_points, tours | How many different loser names are there?", "sql": "SELECT count(DISTINCT loser_name) FROM matches", "example": {"db_id": "wta_1", "query": "SELECT count(DISTINCT loser_name) FROM matches", "query_toks": ["SELECT", "count", "(", "DISTINCT", "loser_name", ")", "FROM", "matches"], "query_toks_no_value": ["select", "count", "(", "distinct", "loser_name", ")", "from", "matches"], "question": "How many different loser names are there?", "question_toks": ["How", "many", "different", "loser", "names", "are", "there", "?"], "guid": 3019}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | What is the forename and surname of the driver with the shortest laptime?", "sql": "SELECT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds LIMIT 1", "example": {"db_id": "formula_1", "query": "SELECT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds LIMIT 1", "query_toks": ["SELECT", "T1.forename", ",", "T1.surname", "FROM", "drivers", "AS", "T1", "JOIN", "laptimes", "AS", "T2", "ON", "T1.driverid", "=", "T2.driverid", "ORDER", "BY", "T2.milliseconds", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "forename", ",", "t1", ".", "surname", "from", "drivers", "as", "t1", "join", "laptimes", "as", "t2", "on", "t1", ".", "driverid", "=", "t2", ".", "driverid", "order", "by", "t2", ".", "milliseconds", "limit", "value"], "question": "What is the forename and surname of the driver with the shortest laptime?", "question_toks": ["What", "is", "the", "forename", "and", "surname", "of", "the", "driver", "with", "the", "shortest", "laptime", "?"], "guid": 3020}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | Which clubs have one or more members from the city with code \"HOU\"? Give me the names of the clubs.", "sql": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.city_code  =  \"HOU\"", "example": {"db_id": "club_1", "query": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.city_code  =  \"HOU\"", "query_toks": ["SELECT", "DISTINCT", "t1.clubname", "FROM", "club", "AS", "t1", "JOIN", "member_of_club", "AS", "t2", "ON", "t1.clubid", "=", "t2.clubid", "JOIN", "student", "AS", "t3", "ON", "t2.stuid", "=", "t3.stuid", "WHERE", "t3.city_code", "=", "``", "HOU", "''"], "query_toks_no_value": ["select", "distinct", "t1", ".", "clubname", "from", "club", "as", "t1", "join", "member_of_club", "as", "t2", "on", "t1", ".", "clubid", "=", "t2", ".", "clubid", "join", "student", "as", "t3", "on", "t2", ".", "stuid", "=", "t3", ".", "stuid", "where", "t3", ".", "city_code", "=", "value"], "question": "Which clubs have one or more members from the city with code \"HOU\"? Give me the names of the clubs.", "question_toks": ["Which", "clubs", "have", "one", "or", "more", "members", "from", "the", "city", "with", "code", "``", "HOU", "''", "?", "Give", "me", "the", "names", "of", "the", "clubs", "."], "guid": 3021}}
{"text": "race: Race_ID, Name, Class, Date, Track_ID; track: Track_ID, Name, Location, Seating, Year_Opened | Return the names of tracks that have no had any races.", "sql": "SELECT name FROM track WHERE track_id NOT IN (SELECT track_id FROM race)", "example": {"db_id": "race_track", "query": "SELECT name FROM track WHERE track_id NOT IN (SELECT track_id FROM race)", "query_toks": ["SELECT", "name", "FROM", "track", "WHERE", "track_id", "NOT", "IN", "(", "SELECT", "track_id", "FROM", "race", ")"], "query_toks_no_value": ["select", "name", "from", "track", "where", "track_id", "not", "in", "(", "select", "track_id", "from", "race", ")"], "question": "Return the names of tracks that have no had any races.", "question_toks": ["Return", "the", "names", "of", "tracks", "that", "have", "no", "had", "any", "races", "."], "guid": 3022}}
{"text": "country: Country_id, Country_name, Capital, Official_native_language; team: Team_id, Name; match_season: Season, Player, Position, Country, Team, Draft_Pick_Number, Draft_Class, College; player: Player_ID, Player, Years_Played, Total_WL, Singles_WL, Doubles_WL, Team | Show the top 3 most common colleges of players in match seasons.", "sql": "SELECT College FROM match_season GROUP BY College ORDER BY count(*) DESC LIMIT 3", "example": {"db_id": "match_season", "query": "SELECT College FROM match_season GROUP BY College ORDER BY count(*) DESC LIMIT 3", "query_toks": ["SELECT", "College", "FROM", "match_season", "GROUP", "BY", "College", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "3"], "query_toks_no_value": ["select", "college", "from", "match_season", "group", "by", "college", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Show the top 3 most common colleges of players in match seasons.", "question_toks": ["Show", "the", "top", "3", "most", "common", "colleges", "of", "players", "in", "match", "seasons", "."], "guid": 3023}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | Count the total number of students.", "sql": "SELECT count(*) FROM student", "example": {"db_id": "club_1", "query": "SELECT count(*) FROM student", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "student"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "student"], "question": "Count the total number of students.", "question_toks": ["Count", "the", "total", "number", "of", "students", "."], "guid": 3024}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | Find the ids and names of stations from which at least 200 trips started.", "sql": "SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  200", "example": {"db_id": "bike_1", "query": "SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  200", "query_toks": ["SELECT", "start_station_id", ",", "start_station_name", "FROM", "trip", "GROUP", "BY", "start_station_name", "HAVING", "COUNT", "(", "*", ")", ">", "=", "200"], "query_toks_no_value": ["select", "start_station_id", ",", "start_station_name", "from", "trip", "group", "by", "start_station_name", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "Find the ids and names of stations from which at least 200 trips started.", "question_toks": ["Find", "the", "ids", "and", "names", "of", "stations", "from", "which", "at", "least", "200", "trips", "started", "."], "guid": 3025}}
{"text": "basketball_match: Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home; university: School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference | How many schools do not participate in the basketball match?", "sql": "SELECT count(*) FROM university WHERE school_id NOT IN (SELECT school_id FROM basketball_match)", "example": {"db_id": "university_basketball", "query": "SELECT count(*) FROM university WHERE school_id NOT IN (SELECT school_id FROM basketball_match)", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "university", "WHERE", "school_id", "NOT", "IN", "(", "SELECT", "school_id", "FROM", "basketball_match", ")"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "university", "where", "school_id", "not", "in", "(", "select", "school_id", "from", "basketball_match", ")"], "question": "How many schools do not participate in the basketball match?", "question_toks": ["How", "many", "schools", "do", "not", "participate", "in", "the", "basketball", "match", "?"], "guid": 3026}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | How many drivers were in the Australian Grand Prix held in 2009?", "sql": "SELECT count(*) FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid WHERE T2.name = \"Australian Grand Prix\" AND YEAR = 2009", "example": {"db_id": "formula_1", "query": "SELECT count(*) FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid WHERE T2.name = \"Australian Grand Prix\" AND YEAR = 2009", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "results", "AS", "T1", "JOIN", "races", "AS", "T2", "ON", "T1.raceid", "=", "T2.raceid", "WHERE", "T2.name", "=", "``", "Australian", "Grand", "Prix", "''", "AND", "YEAR", "=", "2009"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "results", "as", "t1", "join", "races", "as", "t2", "on", "t1", ".", "raceid", "=", "t2", ".", "raceid", "where", "t2", ".", "name", "=", "value", "and", "year", "=", "value"], "question": "How many drivers were in the Australian Grand Prix held in 2009?", "question_toks": ["How", "many", "drivers", "were", "in", "the", "Australian", "Grand", "Prix", "held", "in", "2009", "?"], "guid": 3027}}
{"text": "country: Country_id, Country_name, Capital, Official_native_language; team: Team_id, Name; match_season: Season, Player, Position, Country, Team, Draft_Pick_Number, Draft_Class, College; player: Player_ID, Player, Years_Played, Total_WL, Singles_WL, Doubles_WL, Team | What are the draft pick numbers and draft classes for players who play the Defender position?", "sql": "SELECT Draft_Pick_Number ,  Draft_Class FROM match_season WHERE POSITION  =  \"Defender\"", "example": {"db_id": "match_season", "query": "SELECT Draft_Pick_Number ,  Draft_Class FROM match_season WHERE POSITION  =  \"Defender\"", "query_toks": ["SELECT", "Draft_Pick_Number", ",", "Draft_Class", "FROM", "match_season", "WHERE", "POSITION", "=", "``", "Defender", "''"], "query_toks_no_value": ["select", "draft_pick_number", ",", "draft_class", "from", "match_season", "where", "position", "=", "value"], "question": "What are the draft pick numbers and draft classes for players who play the Defender position?", "question_toks": ["What", "are", "the", "draft", "pick", "numbers", "and", "draft", "classes", "for", "players", "who", "play", "the", "Defender", "position", "?"], "guid": 3028}}
{"text": "poker_player: Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings; people: People_ID, Nationality, Name, Birth_Date, Height | What are the names of poker players whose earnings is higher than 300000?", "sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000", "example": {"db_id": "poker_player", "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000", "query_toks": ["SELECT", "T1.Name", "FROM", "people", "AS", "T1", "JOIN", "poker_player", "AS", "T2", "ON", "T1.People_ID", "=", "T2.People_ID", "WHERE", "T2.Earnings", ">", "300000"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "people", "as", "t1", "join", "poker_player", "as", "t2", "on", "t1", ".", "people_id", "=", "t2", ".", "people_id", "where", "t2", ".", "earnings", ">", "value"], "question": "What are the names of poker players whose earnings is higher than 300000?", "question_toks": ["What", "are", "the", "names", "of", "poker", "players", "whose", "earnings", "is", "higher", "than", "300000", "?"], "guid": 3029}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | How many students are enrolled in colleges that have student accepted during tryouts, and in which states are those colleges?", "sql": "SELECT DISTINCT T1.state ,  T1.enr FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.decision  =  'yes'", "example": {"db_id": "soccer_2", "query": "SELECT DISTINCT T1.state ,  T1.enr FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.decision  =  'yes'", "query_toks": ["SELECT", "DISTINCT", "T1.state", ",", "T1.enr", "FROM", "college", "AS", "T1", "JOIN", "tryout", "AS", "T2", "ON", "T1.cName", "=", "T2.cName", "WHERE", "T2.decision", "=", "'yes", "'"], "query_toks_no_value": ["select", "distinct", "t1", ".", "state", ",", "t1", ".", "enr", "from", "college", "as", "t1", "join", "tryout", "as", "t2", "on", "t1", ".", "cname", "=", "t2", ".", "cname", "where", "t2", ".", "decision", "=", "value"], "question": "How many students are enrolled in colleges that have student accepted during tryouts, and in which states are those colleges?", "question_toks": ["How", "many", "students", "are", "enrolled", "in", "colleges", "that", "have", "student", "accepted", "during", "tryouts", ",", "and", "in", "which", "states", "are", "those", "colleges", "?"], "guid": 3030}}
{"text": "basketball_match: Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home; university: School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference | Return the primary conference of the school with the lowest acc percentage score.", "sql": "SELECT t1.Primary_conference FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t2.acc_percent LIMIT 1", "example": {"db_id": "university_basketball", "query": "SELECT t1.Primary_conference FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t2.acc_percent LIMIT 1", "query_toks": ["SELECT", "t1.Primary_conference", "FROM", "university", "AS", "t1", "JOIN", "basketball_match", "AS", "t2", "ON", "t1.school_id", "=", "t2.school_id", "ORDER", "BY", "t2.acc_percent", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "primary_conference", "from", "university", "as", "t1", "join", "basketball_match", "as", "t2", "on", "t1", ".", "school_id", "=", "t2", ".", "school_id", "order", "by", "t2", ".", "acc_percent", "limit", "value"], "question": "Return the primary conference of the school with the lowest acc percentage score.", "question_toks": ["Return", "the", "primary", "conference", "of", "the", "school", "with", "the", "lowest", "acc", "percentage", "score", "."], "guid": 3031}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | What is the number of days that had an average humity above 50 and an average visibility above 8?", "sql": "SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8", "example": {"db_id": "bike_1", "query": "SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8", "query_toks": ["SELECT", "COUNT", "(", "*", ")", "FROM", "weather", "WHERE", "mean_humidity", ">", "50", "AND", "mean_visibility_miles", ">", "8"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "weather", "where", "mean_humidity", ">", "value", "and", "mean_visibility_miles", ">", "value"], "question": "What is the number of days that had an average humity above 50 and an average visibility above 8?", "question_toks": ["What", "is", "the", "number", "of", "days", "that", "had", "an", "average", "humity", "above", "50", "and", "an", "average", "visibility", "above", "8", "?"], "guid": 3032}}
{"text": "wrestler: Wrestler_ID, Name, Reign, Days_held, Location, Event; Elimination: Elimination_ID, Wrestler_ID, Team, Eliminated_By, Elimination_Move, Time | Please show the most common reigns of wrestlers.", "sql": "SELECT Reign FROM wrestler GROUP BY Reign ORDER BY COUNT(*) DESC LIMIT 1", "example": {"db_id": "wrestler", "query": "SELECT Reign FROM wrestler GROUP BY Reign ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "Reign", "FROM", "wrestler", "GROUP", "BY", "Reign", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "reign", "from", "wrestler", "group", "by", "reign", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Please show the most common reigns of wrestlers.", "question_toks": ["Please", "show", "the", "most", "common", "reigns", "of", "wrestlers", "."], "guid": 3033}}
{"text": "mountain: Mountain_ID, Name, Height, Prominence, Range, Country; climber: Climber_ID, Name, Country, Time, Points, Mountain_ID | What are the names of climbers and the corresponding names of mountains that they climb?", "sql": "SELECT T1.Name ,  T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID", "example": {"db_id": "climbing", "query": "SELECT T1.Name ,  T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID", "query_toks": ["SELECT", "T1.Name", ",", "T2.Name", "FROM", "climber", "AS", "T1", "JOIN", "mountain", "AS", "T2", "ON", "T1.Mountain_ID", "=", "T2.Mountain_ID"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "t2", ".", "name", "from", "climber", "as", "t1", "join", "mountain", "as", "t2", "on", "t1", ".", "mountain_id", "=", "t2", ".", "mountain_id"], "question": "What are the names of climbers and the corresponding names of mountains that they climb?", "question_toks": ["What", "are", "the", "names", "of", "climbers", "and", "the", "corresponding", "names", "of", "mountains", "that", "they", "climb", "?"], "guid": 3034}}
{"text": "basketball_match: Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home; university: School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference | Find how many school locations have the word 'NY'.", "sql": "SELECT count(*) FROM university WHERE LOCATION LIKE \"%NY%\"", "example": {"db_id": "university_basketball", "query": "SELECT count(*) FROM university WHERE LOCATION LIKE \"%NY%\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "university", "WHERE", "LOCATION", "LIKE", "``", "%", "NY", "%", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "university", "where", "location", "like", "value"], "question": "Find how many school locations have the word 'NY'.", "question_toks": ["Find", "how", "many", "school", "locations", "have", "the", "word", "'NY", "'", "."], "guid": 3035}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | Find the average age of the members in the club \"Bootup Baltimore\".", "sql": "SELECT avg(t3.age) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\"", "example": {"db_id": "club_1", "query": "SELECT avg(t3.age) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\"", "query_toks": ["SELECT", "avg", "(", "t3.age", ")", "FROM", "club", "AS", "t1", "JOIN", "member_of_club", "AS", "t2", "ON", "t1.clubid", "=", "t2.clubid", "JOIN", "student", "AS", "t3", "ON", "t2.stuid", "=", "t3.stuid", "WHERE", "t1.clubname", "=", "``", "Bootup", "Baltimore", "''"], "query_toks_no_value": ["select", "avg", "(", "t3", ".", "age", ")", "from", "club", "as", "t1", "join", "member_of_club", "as", "t2", "on", "t1", ".", "clubid", "=", "t2", ".", "clubid", "join", "student", "as", "t3", "on", "t2", ".", "stuid", "=", "t3", ".", "stuid", "where", "t1", ".", "clubname", "=", "value"], "question": "Find the average age of the members in the club \"Bootup Baltimore\".", "question_toks": ["Find", "the", "average", "age", "of", "the", "members", "in", "the", "club", "``", "Bootup", "Baltimore", "''", "."], "guid": 3036}}
{"text": "country: Country_id, Country_name, Capital, Official_native_language; team: Team_id, Name; match_season: Season, Player, Position, Country, Team, Draft_Pick_Number, Draft_Class, College; player: Player_ID, Player, Years_Played, Total_WL, Singles_WL, Doubles_WL, Team | What are the names of all colleges that have two or more players?", "sql": "SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  2", "example": {"db_id": "match_season", "query": "SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  2", "query_toks": ["SELECT", "College", "FROM", "match_season", "GROUP", "BY", "College", "HAVING", "count", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "college", "from", "match_season", "group", "by", "college", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "What are the names of all colleges that have two or more players?", "question_toks": ["What", "are", "the", "names", "of", "all", "colleges", "that", "have", "two", "or", "more", "players", "?"], "guid": 3037}}
{"text": "poker_player: Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings; people: People_ID, Nationality, Name, Birth_Date, Height | What are the nationalities that are shared by at least two people?", "sql": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2", "example": {"db_id": "poker_player", "query": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2", "query_toks": ["SELECT", "Nationality", "FROM", "people", "GROUP", "BY", "Nationality", "HAVING", "COUNT", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "nationality", "from", "people", "group", "by", "nationality", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "What are the nationalities that are shared by at least two people?", "question_toks": ["What", "are", "the", "nationalities", "that", "are", "shared", "by", "at", "least", "two", "people", "?"], "guid": 3038}}
{"text": "race: Race_ID, Name, Class, Date, Track_ID; track: Track_ID, Name, Location, Seating, Year_Opened | What are the names of different tracks, and how many races has each had?", "sql": "SELECT T2.name ,  count(*) FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id", "example": {"db_id": "race_track", "query": "SELECT T2.name ,  count(*) FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id", "query_toks": ["SELECT", "T2.name", ",", "count", "(", "*", ")", "FROM", "race", "AS", "T1", "JOIN", "track", "AS", "T2", "ON", "T1.track_id", "=", "T2.track_id", "GROUP", "BY", "T1.track_id"], "query_toks_no_value": ["select", "t2", ".", "name", ",", "count", "(", "*", ")", "from", "race", "as", "t1", "join", "track", "as", "t2", "on", "t1", ".", "track_id", "=", "t2", ".", "track_id", "group", "by", "t1", ".", "track_id"], "question": "What are the names of different tracks, and how many races has each had?", "question_toks": ["What", "are", "the", "names", "of", "different", "tracks", ",", "and", "how", "many", "races", "has", "each", "had", "?"], "guid": 3039}}
{"text": "basketball_match: Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home; university: School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference | What are the different affiliations, and what is the total enrollment of schools founded after 1850 for each enrollment type?", "sql": "SELECT sum(Enrollment) ,  affiliation FROM university WHERE founded  >  1850 GROUP BY affiliation", "example": {"db_id": "university_basketball", "query": "SELECT sum(Enrollment) ,  affiliation FROM university WHERE founded  >  1850 GROUP BY affiliation", "query_toks": ["SELECT", "sum", "(", "Enrollment", ")", ",", "affiliation", "FROM", "university", "WHERE", "founded", ">", "1850", "GROUP", "BY", "affiliation"], "query_toks_no_value": ["select", "sum", "(", "enrollment", ")", ",", "affiliation", "from", "university", "where", "founded", ">", "value", "group", "by", "affiliation"], "question": "What are the different affiliations, and what is the total enrollment of schools founded after 1850 for each enrollment type?", "question_toks": ["What", "are", "the", "different", "affiliations", ",", "and", "what", "is", "the", "total", "enrollment", "of", "schools", "founded", "after", "1850", "for", "each", "enrollment", "type", "?"], "guid": 3040}}
{"text": "country: Country_id, Country_name, Capital, Official_native_language; team: Team_id, Name; match_season: Season, Player, Position, Country, Team, Draft_Pick_Number, Draft_Class, College; player: Player_ID, Player, Years_Played, Total_WL, Singles_WL, Doubles_WL, Team | For each player, what are their name, season, and country that they belong to?", "sql": "SELECT T2.Season ,  T2.Player ,  T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country", "example": {"db_id": "match_season", "query": "SELECT T2.Season ,  T2.Player ,  T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country", "query_toks": ["SELECT", "T2.Season", ",", "T2.Player", ",", "T1.Country_name", "FROM", "country", "AS", "T1", "JOIN", "match_season", "AS", "T2", "ON", "T1.Country_id", "=", "T2.Country"], "query_toks_no_value": ["select", "t2", ".", "season", ",", "t2", ".", "player", ",", "t1", ".", "country_name", "from", "country", "as", "t1", "join", "match_season", "as", "t2", "on", "t1", ".", "country_id", "=", "t2", ".", "country"], "question": "For each player, what are their name, season, and country that they belong to?", "question_toks": ["For", "each", "player", ",", "what", "are", "their", "name", ",", "season", ",", "and", "country", "that", "they", "belong", "to", "?"], "guid": 3041}}
{"text": "mountain: Mountain_ID, Name, Height, Prominence, Range, Country; climber: Climber_ID, Name, Country, Time, Points, Mountain_ID | Which countries have more than one mountain?", "sql": "SELECT Country FROM mountain GROUP BY Country HAVING COUNT(*)  >  1", "example": {"db_id": "climbing", "query": "SELECT Country FROM mountain GROUP BY Country HAVING COUNT(*)  >  1", "query_toks": ["SELECT", "Country", "FROM", "mountain", "GROUP", "BY", "Country", "HAVING", "COUNT", "(", "*", ")", ">", "1"], "query_toks_no_value": ["select", "country", "from", "mountain", "group", "by", "country", "having", "count", "(", "*", ")", ">", "value"], "question": "Which countries have more than one mountain?", "question_toks": ["Which", "countries", "have", "more", "than", "one", "mountain", "?"], "guid": 3042}}
{"text": "gymnast: Gymnast_ID, Floor_Exercise_Points, Pommel_Horse_Points, Rings_Points, Vault_Points, Parallel_Bars_Points, Horizontal_Bar_Points, Total_Points; people: People_ID, Name, Age, Height, Hometown | Return the names of the gymnasts.", "sql": "SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID", "example": {"db_id": "gymnast", "query": "SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID", "query_toks": ["SELECT", "T2.Name", "FROM", "gymnast", "AS", "T1", "JOIN", "people", "AS", "T2", "ON", "T1.Gymnast_ID", "=", "T2.People_ID"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "gymnast", "as", "t1", "join", "people", "as", "t2", "on", "t1", ".", "gymnast_id", "=", "t2", ".", "people_id"], "question": "Return the names of the gymnasts.", "question_toks": ["Return", "the", "names", "of", "the", "gymnasts", "."], "guid": 3043}}
{"text": "gymnast: Gymnast_ID, Floor_Exercise_Points, Pommel_Horse_Points, Rings_Points, Vault_Points, Parallel_Bars_Points, Horizontal_Bar_Points, Total_Points; people: People_ID, Name, Age, Height, Hometown | What are the names of the five oldest people?", "sql": "SELECT Name FROM People ORDER BY Age DESC LIMIT 5", "example": {"db_id": "gymnast", "query": "SELECT Name FROM People ORDER BY Age DESC LIMIT 5", "query_toks": ["SELECT", "Name", "FROM", "People", "ORDER", "BY", "Age", "DESC", "LIMIT", "5"], "query_toks_no_value": ["select", "name", "from", "people", "order", "by", "age", "desc", "limit", "value"], "question": "What are the names of the five oldest people?", "question_toks": ["What", "are", "the", "names", "of", "the", "five", "oldest", "people", "?"], "guid": 3044}}
{"text": "basketball_match: Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home; university: School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference | What is all the information about the basketball match?", "sql": "SELECT * FROM basketball_match", "example": {"db_id": "university_basketball", "query": "SELECT * FROM basketball_match", "query_toks": ["SELECT", "*", "FROM", "basketball_match"], "query_toks_no_value": ["select", "*", "from", "basketball_match"], "question": "What is all the information about the basketball match?", "question_toks": ["What", "is", "all", "the", "information", "about", "the", "basketball", "match", "?"], "guid": 3045}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | For each zip code, find the ids of all trips that have a higher average mean temperature above 60?", "sql": "SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code  =  T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f)  >  60", "example": {"db_id": "bike_1", "query": "SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code  =  T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f)  >  60", "query_toks": ["SELECT", "T1.id", "FROM", "trip", "AS", "T1", "JOIN", "weather", "AS", "T2", "ON", "T1.zip_code", "=", "T2.zip_code", "GROUP", "BY", "T2.zip_code", "HAVING", "avg", "(", "T2.mean_temperature_f", ")", ">", "60"], "query_toks_no_value": ["select", "t1", ".", "id", "from", "trip", "as", "t1", "join", "weather", "as", "t2", "on", "t1", ".", "zip_code", "=", "t2", ".", "zip_code", "group", "by", "t2", ".", "zip_code", "having", "avg", "(", "t2", ".", "mean_temperature_f", ")", ">", "value"], "question": "For each zip code, find the ids of all trips that have a higher average mean temperature above 60?", "question_toks": ["For", "each", "zip", "code", ",", "find", "the", "ids", "of", "all", "trips", "that", "have", "a", "higher", "average", "mean", "temperature", "above", "60", "?"], "guid": 3046}}
{"text": "country: Country_id, Country_name, Capital, Official_native_language; team: Team_id, Name; match_season: Season, Player, Position, Country, Team, Draft_Pick_Number, Draft_Class, College; player: Player_ID, Player, Years_Played, Total_WL, Singles_WL, Doubles_WL, Team | How many players are from each country?", "sql": "SELECT Country_name ,  COUNT(*) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country GROUP BY T1.Country_name", "example": {"db_id": "match_season", "query": "SELECT Country_name ,  COUNT(*) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country GROUP BY T1.Country_name", "query_toks": ["SELECT", "Country_name", ",", "COUNT", "(", "*", ")", "FROM", "country", "AS", "T1", "JOIN", "match_season", "AS", "T2", "ON", "T1.Country_id", "=", "T2.Country", "GROUP", "BY", "T1.Country_name"], "query_toks_no_value": ["select", "country_name", ",", "count", "(", "*", ")", "from", "country", "as", "t1", "join", "match_season", "as", "t2", "on", "t1", ".", "country_id", "=", "t2", ".", "country", "group", "by", "t1", ".", "country_name"], "question": "How many players are from each country?", "question_toks": ["How", "many", "players", "are", "from", "each", "country", "?"], "guid": 3047}}
{"text": "race: Race_ID, Name, Class, Date, Track_ID; track: Track_ID, Name, Location, Seating, Year_Opened | What are the names and locations of tracks that have had exactly 1 race?", "sql": "SELECT T2.name ,  T2.location FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id HAVING count(*)  =  1", "example": {"db_id": "race_track", "query": "SELECT T2.name ,  T2.location FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id HAVING count(*)  =  1", "query_toks": ["SELECT", "T2.name", ",", "T2.location", "FROM", "race", "AS", "T1", "JOIN", "track", "AS", "T2", "ON", "T1.track_id", "=", "T2.track_id", "GROUP", "BY", "T1.track_id", "HAVING", "count", "(", "*", ")", "=", "1"], "query_toks_no_value": ["select", "t2", ".", "name", ",", "t2", ".", "location", "from", "race", "as", "t1", "join", "track", "as", "t2", "on", "t1", ".", "track_id", "=", "t2", ".", "track_id", "group", "by", "t1", ".", "track_id", "having", "count", "(", "*", ")", "=", "value"], "question": "What are the names and locations of tracks that have had exactly 1 race?", "question_toks": ["What", "are", "the", "names", "and", "locations", "of", "tracks", "that", "have", "had", "exactly", "1", "race", "?"], "guid": 3048}}
{"text": "players: player_id, first_name, last_name, hand, birth_date, country_code; matches: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank; rankings: ranking_date, ranking, player_id, ranking_points, tours | What is the code of the country with the most players?", "sql": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "wta_1", "query": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "country_code", "FROM", "players", "GROUP", "BY", "country_code", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "country_code", "from", "players", "group", "by", "country_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the code of the country with the most players?", "question_toks": ["What", "is", "the", "code", "of", "the", "country", "with", "the", "most", "players", "?"], "guid": 3049}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | Give me the first name and last name for all the female members of the club \"Bootup Baltimore\".", "sql": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t3.sex  =  \"F\"", "example": {"db_id": "club_1", "query": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t3.sex  =  \"F\"", "query_toks": ["SELECT", "t3.fname", ",", "t3.lname", "FROM", "club", "AS", "t1", "JOIN", "member_of_club", "AS", "t2", "ON", "t1.clubid", "=", "t2.clubid", "JOIN", "student", "AS", "t3", "ON", "t2.stuid", "=", "t3.stuid", "WHERE", "t1.clubname", "=", "``", "Bootup", "Baltimore", "''", "AND", "t3.sex", "=", "``", "F", "''"], "query_toks_no_value": ["select", "t3", ".", "fname", ",", "t3", ".", "lname", "from", "club", "as", "t1", "join", "member_of_club", "as", "t2", "on", "t1", ".", "clubid", "=", "t2", ".", "clubid", "join", "student", "as", "t3", "on", "t2", ".", "stuid", "=", "t3", ".", "stuid", "where", "t1", ".", "clubname", "=", "value", "and", "t3", ".", "sex", "=", "value"], "question": "Give me the first name and last name for all the female members of the club \"Bootup Baltimore\".", "question_toks": ["Give", "me", "the", "first", "name", "and", "last", "name", "for", "all", "the", "female", "members", "of", "the", "club", "``", "Bootup", "Baltimore", "''", "."], "guid": 3050}}
{"text": "club: Club_ID, name, Region, Start_year; club_rank: Rank, Club_ID, Gold, Silver, Bronze, Total; player: Player_ID, name, Position, Club_ID, Apps, Tries, Goals, Points; competition: Competition_ID, Year, Competition_type, Country; competition_result: Competition_ID, Club_ID_1, Club_ID_2, Score | What are the types and countries of competitions?", "sql": "SELECT Competition_type ,  Country FROM competition", "example": {"db_id": "sports_competition", "query": "SELECT Competition_type ,  Country FROM competition", "query_toks": ["SELECT", "Competition_type", ",", "Country", "FROM", "competition"], "query_toks_no_value": ["select", "competition_type", ",", "country", "from", "competition"], "question": "What are the types and countries of competitions?", "question_toks": ["What", "are", "the", "types", "and", "countries", "of", "competitions", "?"], "guid": 3051}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | What is the id, forname and surname of the driver who had the first position in terms of laptime at least twice?", "sql": "SELECT T1.driverid ,  T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE POSITION  =  '1' GROUP BY T1.driverid HAVING count(*)  >=  2", "example": {"db_id": "formula_1", "query": "SELECT T1.driverid ,  T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE POSITION  =  '1' GROUP BY T1.driverid HAVING count(*)  >=  2", "query_toks": ["SELECT", "T1.driverid", ",", "T1.forename", ",", "T1.surname", "FROM", "drivers", "AS", "T1", "JOIN", "laptimes", "AS", "T2", "ON", "T1.driverid", "=", "T2.driverid", "WHERE", "POSITION", "=", "'1", "'", "GROUP", "BY", "T1.driverid", "HAVING", "count", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "t1", ".", "driverid", ",", "t1", ".", "forename", ",", "t1", ".", "surname", "from", "drivers", "as", "t1", "join", "laptimes", "as", "t2", "on", "t1", ".", "driverid", "=", "t2", ".", "driverid", "where", "position", "=", "value", "group", "by", "t1", ".", "driverid", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "What is the id, forname and surname of the driver who had the first position in terms of laptime at least twice?", "question_toks": ["What", "is", "the", "id", ",", "forname", "and", "surname", "of", "the", "driver", "who", "had", "the", "first", "position", "in", "terms", "of", "laptime", "at", "least", "twice", "?"], "guid": 3052}}
{"text": "player: Player_ID, Sponsor_name, Player_name, Gender, Residence, Occupation, Votes, Rank; club: Club_ID, Club_name, Region, Start_year; coach: Coach_ID, Coach_name, Gender, Club_ID, Rank; player_coach: Player_ID, Coach_ID, Starting_year; match_result: Rank, Club_ID, Gold, Big_Silver, Small_Silver, Bronze, Points | Please show the most common occupation of players.", "sql": "SELECT Occupation FROM player GROUP BY Occupation ORDER BY COUNT(*) DESC LIMIT 1", "example": {"db_id": "riding_club", "query": "SELECT Occupation FROM player GROUP BY Occupation ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "Occupation", "FROM", "player", "GROUP", "BY", "Occupation", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "occupation", "from", "player", "group", "by", "occupation", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Please show the most common occupation of players.", "question_toks": ["Please", "show", "the", "most", "common", "occupation", "of", "players", "."], "guid": 3053}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | Count the members of the club \"Tennis Club\".", "sql": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Tennis Club\"", "example": {"db_id": "club_1", "query": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Tennis Club\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "club", "AS", "t1", "JOIN", "member_of_club", "AS", "t2", "ON", "t1.clubid", "=", "t2.clubid", "JOIN", "student", "AS", "t3", "ON", "t2.stuid", "=", "t3.stuid", "WHERE", "t1.clubname", "=", "``", "Tennis", "Club", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "club", "as", "t1", "join", "member_of_club", "as", "t2", "on", "t1", ".", "clubid", "=", "t2", ".", "clubid", "join", "student", "as", "t3", "on", "t2", ".", "stuid", "=", "t3", ".", "stuid", "where", "t1", ".", "clubname", "=", "value"], "question": "Count the members of the club \"Tennis Club\".", "question_toks": ["Count", "the", "members", "of", "the", "club", "``", "Tennis", "Club", "''", "."], "guid": 3054}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | For each zip code, how many times has the maximum wind speed reached 25 mph?", "sql": "SELECT zip_code , count(*) FROM weather WHERE max_wind_Speed_mph  >=  25 GROUP BY zip_code", "example": {"db_id": "bike_1", "query": "SELECT zip_code , count(*) FROM weather WHERE max_wind_Speed_mph  >=  25 GROUP BY zip_code", "query_toks": ["SELECT", "zip_code", ",", "count", "(", "*", ")", "FROM", "weather", "WHERE", "max_wind_Speed_mph", ">", "=", "25", "GROUP", "BY", "zip_code"], "query_toks_no_value": ["select", "zip_code", ",", "count", "(", "*", ")", "from", "weather", "where", "max_wind_speed_mph", ">", "=", "value", "group", "by", "zip_code"], "question": "For each zip code, how many times has the maximum wind speed reached 25 mph?", "question_toks": ["For", "each", "zip", "code", ",", "how", "many", "times", "has", "the", "maximum", "wind", "speed", "reached", "25", "mph", "?"], "guid": 3055}}
{"text": "poker_player: Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings; people: People_ID, Nationality, Name, Birth_Date, Height | List the names of poker players ordered by the final tables made in ascending order.", "sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made", "example": {"db_id": "poker_player", "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made", "query_toks": ["SELECT", "T1.Name", "FROM", "people", "AS", "T1", "JOIN", "poker_player", "AS", "T2", "ON", "T1.People_ID", "=", "T2.People_ID", "ORDER", "BY", "T2.Final_Table_Made"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "people", "as", "t1", "join", "poker_player", "as", "t2", "on", "t1", ".", "people_id", "=", "t2", ".", "people_id", "order", "by", "t2", ".", "final_table_made"], "question": "List the names of poker players ordered by the final tables made in ascending order.", "question_toks": ["List", "the", "names", "of", "poker", "players", "ordered", "by", "the", "final", "tables", "made", "in", "ascending", "order", "."], "guid": 3056}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | Find the zip code in which the average mean visibility is lower than 10.", "sql": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  10", "example": {"db_id": "bike_1", "query": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  10", "query_toks": ["SELECT", "zip_code", "FROM", "weather", "GROUP", "BY", "zip_code", "HAVING", "avg", "(", "mean_visibility_miles", ")", "<", "10"], "query_toks_no_value": ["select", "zip_code", "from", "weather", "group", "by", "zip_code", "having", "avg", "(", "mean_visibility_miles", ")", "<", "value"], "question": "Find the zip code in which the average mean visibility is lower than 10.", "question_toks": ["Find", "the", "zip", "code", "in", "which", "the", "average", "mean", "visibility", "is", "lower", "than", "10", "."], "guid": 3057}}
{"text": "gymnast: Gymnast_ID, Floor_Exercise_Points, Pommel_Horse_Points, Rings_Points, Vault_Points, Parallel_Bars_Points, Horizontal_Bar_Points, Total_Points; people: People_ID, Name, Age, Height, Hometown | List the total points of gymnasts in descending order.", "sql": "SELECT Total_Points FROM gymnast ORDER BY Total_Points DESC", "example": {"db_id": "gymnast", "query": "SELECT Total_Points FROM gymnast ORDER BY Total_Points DESC", "query_toks": ["SELECT", "Total_Points", "FROM", "gymnast", "ORDER", "BY", "Total_Points", "DESC"], "query_toks_no_value": ["select", "total_points", "from", "gymnast", "order", "by", "total_points", "desc"], "question": "List the total points of gymnasts in descending order.", "question_toks": ["List", "the", "total", "points", "of", "gymnasts", "in", "descending", "order", "."], "guid": 3058}}
{"text": "basketball_match: Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home; university: School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference | List all schools and their nicknames in the order of founded year.", "sql": "SELECT school ,  nickname FROM university ORDER BY founded", "example": {"db_id": "university_basketball", "query": "SELECT school ,  nickname FROM university ORDER BY founded", "query_toks": ["SELECT", "school", ",", "nickname", "FROM", "university", "ORDER", "BY", "founded"], "query_toks_no_value": ["select", "school", ",", "nickname", "from", "university", "order", "by", "founded"], "question": "List all schools and their nicknames in the order of founded year.", "question_toks": ["List", "all", "schools", "and", "their", "nicknames", "in", "the", "order", "of", "founded", "year", "."], "guid": 3059}}
{"text": "wrestler: Wrestler_ID, Name, Reign, Days_held, Location, Event; Elimination: Elimination_ID, Wrestler_ID, Team, Eliminated_By, Elimination_Move, Time | What are the names of wrestlers days held less than 100?", "sql": "SELECT Name FROM wrestler WHERE Days_held  <  100", "example": {"db_id": "wrestler", "query": "SELECT Name FROM wrestler WHERE Days_held  <  100", "query_toks": ["SELECT", "Name", "FROM", "wrestler", "WHERE", "Days_held", "<", "100"], "query_toks_no_value": ["select", "name", "from", "wrestler", "where", "days_held", "<", "value"], "question": "What are the names of wrestlers days held less than 100?", "question_toks": ["What", "are", "the", "names", "of", "wrestlers", "days", "held", "less", "than", "100", "?"], "guid": 3060}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | What are the names of all clubs?", "sql": "SELECT clubname FROM club", "example": {"db_id": "club_1", "query": "SELECT clubname FROM club", "query_toks": ["SELECT", "clubname", "FROM", "club"], "query_toks_no_value": ["select", "clubname", "from", "club"], "question": "What are the names of all clubs?", "question_toks": ["What", "are", "the", "names", "of", "all", "clubs", "?"], "guid": 3061}}
{"text": "wrestler: Wrestler_ID, Name, Reign, Days_held, Location, Event; Elimination: Elimination_ID, Wrestler_ID, Team, Eliminated_By, Elimination_Move, Time | Give the names and locations of all wrestlers.", "sql": "SELECT Name ,  LOCATION FROM wrestler", "example": {"db_id": "wrestler", "query": "SELECT Name ,  LOCATION FROM wrestler", "query_toks": ["SELECT", "Name", ",", "LOCATION", "FROM", "wrestler"], "query_toks_no_value": ["select", "name", ",", "location", "from", "wrestler"], "question": "Give the names and locations of all wrestlers.", "question_toks": ["Give", "the", "names", "and", "locations", "of", "all", "wrestlers", "."], "guid": 3062}}
{"text": "race: Race_ID, Name, Class, Date, Track_ID; track: Track_ID, Name, Location, Seating, Year_Opened | What are the distinct classes that races can have?", "sql": "SELECT DISTINCT CLASS FROM race", "example": {"db_id": "race_track", "query": "SELECT DISTINCT CLASS FROM race", "query_toks": ["SELECT", "DISTINCT", "CLASS", "FROM", "race"], "query_toks_no_value": ["select", "distinct", "class", "from", "race"], "question": "What are the distinct classes that races can have?", "question_toks": ["What", "are", "the", "distinct", "classes", "that", "races", "can", "have", "?"], "guid": 3063}}
{"text": "basketball_match: Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home; university: School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference | Count the number of schools that have had basketball matches.", "sql": "SELECT count(DISTINCT school_id) FROM basketball_match", "example": {"db_id": "university_basketball", "query": "SELECT count(DISTINCT school_id) FROM basketball_match", "query_toks": ["SELECT", "count", "(", "DISTINCT", "school_id", ")", "FROM", "basketball_match"], "query_toks_no_value": ["select", "count", "(", "distinct", "school_id", ")", "from", "basketball_match"], "question": "Count the number of schools that have had basketball matches.", "question_toks": ["Count", "the", "number", "of", "schools", "that", "have", "had", "basketball", "matches", "."], "guid": 3064}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | What is the installation date for each ending station on all the trips?", "sql": "SELECT T1.id ,  T2.installation_date FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id", "example": {"db_id": "bike_1", "query": "SELECT T1.id ,  T2.installation_date FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id", "query_toks": ["SELECT", "T1.id", ",", "T2.installation_date", "FROM", "trip", "AS", "T1", "JOIN", "station", "AS", "T2", "ON", "T1.end_station_id", "=", "T2.id"], "query_toks_no_value": ["select", "t1", ".", "id", ",", "t2", ".", "installation_date", "from", "trip", "as", "t1", "join", "station", "as", "t2", "on", "t1", ".", "end_station_id", "=", "t2", ".", "id"], "question": "What is the installation date for each ending station on all the trips?", "question_toks": ["What", "is", "the", "installation", "date", "for", "each", "ending", "station", "on", "all", "the", "trips", "?"], "guid": 3065}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | What are the names of the races held after 2017 in Spain?", "sql": "SELECT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = \"Spain\" AND T1.year > 2017", "example": {"db_id": "formula_1", "query": "SELECT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = \"Spain\" AND T1.year > 2017", "query_toks": ["SELECT", "T1.name", "FROM", "races", "AS", "T1", "JOIN", "circuits", "AS", "T2", "ON", "T1.circuitid", "=", "T2.circuitid", "WHERE", "T2.country", "=", "``", "Spain", "''", "AND", "T1.year", ">", "2017"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "races", "as", "t1", "join", "circuits", "as", "t2", "on", "t1", ".", "circuitid", "=", "t2", ".", "circuitid", "where", "t2", ".", "country", "=", "value", "and", "t1", ".", "year", ">", "value"], "question": "What are the names of the races held after 2017 in Spain?", "question_toks": ["What", "are", "the", "names", "of", "the", "races", "held", "after", "2017", "in", "Spain", "?"], "guid": 3066}}
{"text": "players: player_id, first_name, last_name, hand, birth_date, country_code; matches: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank; rankings: ranking_date, ranking, player_id, ranking_points, tours | Find the first name and country code of the player who did the most number of tours.", "sql": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1", "example": {"db_id": "wta_1", "query": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1", "query_toks": ["SELECT", "T1.country_code", ",", "T1.first_name", "FROM", "players", "AS", "T1", "JOIN", "rankings", "AS", "T2", "ON", "T1.player_id", "=", "T2.player_id", "ORDER", "BY", "T2.tours", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "country_code", ",", "t1", ".", "first_name", "from", "players", "as", "t1", "join", "rankings", "as", "t2", "on", "t1", ".", "player_id", "=", "t2", ".", "player_id", "order", "by", "t2", ".", "tours", "desc", "limit", "value"], "question": "Find the first name and country code of the player who did the most number of tours.", "question_toks": ["Find", "the", "first", "name", "and", "country", "code", "of", "the", "player", "who", "did", "the", "most", "number", "of", "tours", "."], "guid": 3067}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | What are the names of races held after 12:00:00 or before 09:00:00?", "sql": "SELECT name FROM races WHERE TIME > \"12:00:00\" OR TIME < \"09:00:00\"", "example": {"db_id": "formula_1", "query": "SELECT name FROM races WHERE TIME > \"12:00:00\" OR TIME < \"09:00:00\"", "query_toks": ["SELECT", "name", "FROM", "races", "WHERE", "TIME", ">", "``", "12:00:00", "''", "OR", "TIME", "<", "``", "09:00:00", "''"], "query_toks_no_value": ["select", "name", "from", "races", "where", "time", ">", "value", "or", "time", "<", "value"], "question": "What are the names of races held after 12:00:00 or before 09:00:00?", "question_toks": ["What", "are", "the", "names", "of", "races", "held", "after", "12:00:00", "or", "before", "09:00:00", "?"], "guid": 3068}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | What is the first and last name of all the German drivers?", "sql": "SELECT forename ,  surname FROM drivers WHERE nationality = \"German\"", "example": {"db_id": "formula_1", "query": "SELECT forename ,  surname FROM drivers WHERE nationality = \"German\"", "query_toks": ["SELECT", "forename", ",", "surname", "FROM", "drivers", "WHERE", "nationality", "=", "``", "German", "''"], "query_toks_no_value": ["select", "forename", ",", "surname", "from", "drivers", "where", "nationality", "=", "value"], "question": "What is the first and last name of all the German drivers?", "question_toks": ["What", "is", "the", "first", "and", "last", "name", "of", "all", "the", "German", "drivers", "?"], "guid": 3069}}
{"text": "basketball_match: Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home; university: School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference | List names of all teams in the basketball competition, ordered by all home scores in descending order.", "sql": "SELECT team_name FROM basketball_match ORDER BY All_Home DESC", "example": {"db_id": "university_basketball", "query": "SELECT team_name FROM basketball_match ORDER BY All_Home DESC", "query_toks": ["SELECT", "team_name", "FROM", "basketball_match", "ORDER", "BY", "All_Home", "DESC"], "query_toks_no_value": ["select", "team_name", "from", "basketball_match", "order", "by", "all_home", "desc"], "question": "List names of all teams in the basketball competition, ordered by all home scores in descending order.", "question_toks": ["List", "names", "of", "all", "teams", "in", "the", "basketball", "competition", ",", "ordered", "by", "all", "home", "scores", "in", "descending", "order", "."], "guid": 3070}}
{"text": "mountain: Mountain_ID, Name, Height, Prominence, Range, Country; climber: Climber_ID, Name, Country, Time, Points, Mountain_ID | What are the different names of mountains ascended by climbers from the country of West Germany?", "sql": "SELECT DISTINCT T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T1.Country  =  \"West Germany\"", "example": {"db_id": "climbing", "query": "SELECT DISTINCT T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T1.Country  =  \"West Germany\"", "query_toks": ["SELECT", "DISTINCT", "T2.Name", "FROM", "climber", "AS", "T1", "JOIN", "mountain", "AS", "T2", "ON", "T1.Mountain_ID", "=", "T2.Mountain_ID", "WHERE", "T1.Country", "=", "``", "West", "Germany", "''"], "query_toks_no_value": ["select", "distinct", "t2", ".", "name", "from", "climber", "as", "t1", "join", "mountain", "as", "t2", "on", "t1", ".", "mountain_id", "=", "t2", ".", "mountain_id", "where", "t1", ".", "country", "=", "value"], "question": "What are the different names of mountains ascended by climbers from the country of West Germany?", "question_toks": ["What", "are", "the", "different", "names", "of", "mountains", "ascended", "by", "climbers", "from", "the", "country", "of", "West", "Germany", "?"], "guid": 3071}}
{"text": "players: player_id, first_name, last_name, hand, birth_date, country_code; matches: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank; rankings: ranking_date, ranking, player_id, ranking_points, tours | What are the names of the winner and loser who played in the longest match?", "sql": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1", "example": {"db_id": "wta_1", "query": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1", "query_toks": ["SELECT", "winner_name", ",", "loser_name", "FROM", "matches", "ORDER", "BY", "minutes", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "winner_name", ",", "loser_name", "from", "matches", "order", "by", "minutes", "desc", "limit", "value"], "question": "What are the names of the winner and loser who played in the longest match?", "question_toks": ["What", "are", "the", "names", "of", "the", "winner", "and", "loser", "who", "played", "in", "the", "longest", "match", "?"], "guid": 3072}}
{"text": "gymnast: Gymnast_ID, Floor_Exercise_Points, Pommel_Horse_Points, Rings_Points, Vault_Points, Parallel_Bars_Points, Horizontal_Bar_Points, Total_Points; people: People_ID, Name, Age, Height, Hometown | What are the hometowns of gymnasts and the corresponding number of gymnasts?", "sql": "SELECT T2.Hometown ,  COUNT(*) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown", "example": {"db_id": "gymnast", "query": "SELECT T2.Hometown ,  COUNT(*) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown", "query_toks": ["SELECT", "T2.Hometown", ",", "COUNT", "(", "*", ")", "FROM", "gymnast", "AS", "T1", "JOIN", "people", "AS", "T2", "ON", "T1.Gymnast_ID", "=", "T2.People_ID", "GROUP", "BY", "T2.Hometown"], "query_toks_no_value": ["select", "t2", ".", "hometown", ",", "count", "(", "*", ")", "from", "gymnast", "as", "t1", "join", "people", "as", "t2", "on", "t1", ".", "gymnast_id", "=", "t2", ".", "people_id", "group", "by", "t2", ".", "hometown"], "question": "What are the hometowns of gymnasts and the corresponding number of gymnasts?", "question_toks": ["What", "are", "the", "hometowns", "of", "gymnasts", "and", "the", "corresponding", "number", "of", "gymnasts", "?"], "guid": 3073}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | What is the date, average temperature and mean humidity for the days with the 3 largest maximum gust speeds?", "sql": "SELECT date ,  mean_temperature_f ,  mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3", "example": {"db_id": "bike_1", "query": "SELECT date ,  mean_temperature_f ,  mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3", "query_toks": ["SELECT", "date", ",", "mean_temperature_f", ",", "mean_humidity", "FROM", "weather", "ORDER", "BY", "max_gust_speed_mph", "DESC", "LIMIT", "3"], "query_toks_no_value": ["select", "date", ",", "mean_temperature_f", ",", "mean_humidity", "from", "weather", "order", "by", "max_gust_speed_mph", "desc", "limit", "value"], "question": "What is the date, average temperature and mean humidity for the days with the 3 largest maximum gust speeds?", "question_toks": ["What", "is", "the", "date", ",", "average", "temperature", "and", "mean", "humidity", "for", "the", "days", "with", "the", "3", "largest", "maximum", "gust", "speeds", "?"], "guid": 3074}}
{"text": "swimmer: ID, name, Nationality, meter_100, meter_200, meter_300, meter_400, meter_500, meter_600, meter_700; stadium: ID, name, Capacity, City, Country, Opening_year; event: ID, Name, Stadium_ID, Year; record: ID, Result, Swimmer_ID, Event_ID | Find the names of swimmers who has a result of \"win\".", "sql": "SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id WHERE RESULT  =  'Win'", "example": {"db_id": "swimming", "query": "SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id WHERE RESULT  =  'Win'", "query_toks": ["SELECT", "t1.name", "FROM", "swimmer", "AS", "t1", "JOIN", "record", "AS", "t2", "ON", "t1.id", "=", "t2.swimmer_id", "WHERE", "RESULT", "=", "'Win", "'"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "swimmer", "as", "t1", "join", "record", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "swimmer_id", "where", "result", "=", "value"], "question": "Find the names of swimmers who has a result of \"win\".", "question_toks": ["Find", "the", "names", "of", "swimmers", "who", "has", "a", "result", "of", "``", "win", "''", "."], "guid": 3075}}
{"text": "club: Club_ID, name, Region, Start_year; club_rank: Rank, Club_ID, Gold, Silver, Bronze, Total; player: Player_ID, name, Position, Club_ID, Apps, Tries, Goals, Points; competition: Competition_ID, Year, Competition_type, Country; competition_result: Competition_ID, Club_ID_1, Club_ID_2, Score | What are the names and players of all the clubs?", "sql": "SELECT T1.name ,  T2.Player_id FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID", "example": {"db_id": "sports_competition", "query": "SELECT T1.name ,  T2.Player_id FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID", "query_toks": ["SELECT", "T1.name", ",", "T2.Player_id", "FROM", "club", "AS", "T1", "JOIN", "player", "AS", "T2", "ON", "T1.Club_ID", "=", "T2.Club_ID"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "t2", ".", "player_id", "from", "club", "as", "t1", "join", "player", "as", "t2", "on", "t1", ".", "club_id", "=", "t2", ".", "club_id"], "question": "What are the names and players of all the clubs?", "question_toks": ["What", "are", "the", "names", "and", "players", "of", "all", "the", "clubs", "?"], "guid": 3076}}
{"text": "basketball_match: Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home; university: School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference | What is the maximum enrollment across all schools?", "sql": "SELECT max(Enrollment) FROM university", "example": {"db_id": "university_basketball", "query": "SELECT max(Enrollment) FROM university", "query_toks": ["SELECT", "max", "(", "Enrollment", ")", "FROM", "university"], "query_toks_no_value": ["select", "max", "(", "enrollment", ")", "from", "university"], "question": "What is the maximum enrollment across all schools?", "question_toks": ["What", "is", "the", "maximum", "enrollment", "across", "all", "schools", "?"], "guid": 3077}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | What are the names of players who train between 500 and 1500 hours?", "sql": "SELECT pName FROM Player WHERE HS BETWEEN 500 AND 1500", "example": {"db_id": "soccer_2", "query": "SELECT pName FROM Player WHERE HS BETWEEN 500 AND 1500", "query_toks": ["SELECT", "pName", "FROM", "Player", "WHERE", "HS", "BETWEEN", "500", "AND", "1500"], "query_toks_no_value": ["select", "pname", "from", "player", "where", "hs", "between", "value", "and", "value"], "question": "What are the names of players who train between 500 and 1500 hours?", "question_toks": ["What", "are", "the", "names", "of", "players", "who", "train", "between", "500", "and", "1500", "hours", "?"], "guid": 3078}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | What are the drivers' first, last names and id who had more than 8 pit stops or participated in more than 5 race results?", "sql": "SELECT T1.forename ,  T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  8 UNION SELECT T1.forename ,  T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  5", "example": {"db_id": "formula_1", "query": "SELECT T1.forename ,  T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  8 UNION SELECT T1.forename ,  T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  5", "query_toks": ["SELECT", "T1.forename", ",", "T1.surname", ",", "T1.driverid", "FROM", "drivers", "AS", "T1", "JOIN", "pitstops", "AS", "T2", "ON", "T1.driverid", "=", "T2.driverid", "GROUP", "BY", "T1.driverid", "HAVING", "count", "(", "*", ")", ">", "8", "UNION", "SELECT", "T1.forename", ",", "T1.surname", ",", "T1.driverid", "FROM", "drivers", "AS", "T1", "JOIN", "results", "AS", "T2", "ON", "T1.driverid", "=", "T2.driverid", "GROUP", "BY", "T1.driverid", "HAVING", "count", "(", "*", ")", ">", "5"], "query_toks_no_value": ["select", "t1", ".", "forename", ",", "t1", ".", "surname", ",", "t1", ".", "driverid", "from", "drivers", "as", "t1", "join", "pitstops", "as", "t2", "on", "t1", ".", "driverid", "=", "t2", ".", "driverid", "group", "by", "t1", ".", "driverid", "having", "count", "(", "*", ")", ">", "value", "union", "select", "t1", ".", "forename", ",", "t1", ".", "surname", ",", "t1", ".", "driverid", "from", "drivers", "as", "t1", "join", "results", "as", "t2", "on", "t1", ".", "driverid", "=", "t2", ".", "driverid", "group", "by", "t1", ".", "driverid", "having", "count", "(", "*", ")", ">", "value"], "question": "What are the drivers' first, last names and id who had more than 8 pit stops or participated in more than 5 race results?", "question_toks": ["What", "are", "the", "drivers", "'", "first", ",", "last", "names", "and", "id", "who", "had", "more", "than", "8", "pit", "stops", "or", "participated", "in", "more", "than", "5", "race", "results", "?"], "guid": 3079}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | Give me ids for all the trip that took place in a zip code area with average mean temperature above 60.", "sql": "SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code  =  T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f)  >  60", "example": {"db_id": "bike_1", "query": "SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code  =  T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f)  >  60", "query_toks": ["SELECT", "T1.id", "FROM", "trip", "AS", "T1", "JOIN", "weather", "AS", "T2", "ON", "T1.zip_code", "=", "T2.zip_code", "GROUP", "BY", "T2.zip_code", "HAVING", "avg", "(", "T2.mean_temperature_f", ")", ">", "60"], "query_toks_no_value": ["select", "t1", ".", "id", "from", "trip", "as", "t1", "join", "weather", "as", "t2", "on", "t1", ".", "zip_code", "=", "t2", ".", "zip_code", "group", "by", "t2", ".", "zip_code", "having", "avg", "(", "t2", ".", "mean_temperature_f", ")", ">", "value"], "question": "Give me ids for all the trip that took place in a zip code area with average mean temperature above 60.", "question_toks": ["Give", "me", "ids", "for", "all", "the", "trip", "that", "took", "place", "in", "a", "zip", "code", "area", "with", "average", "mean", "temperature", "above", "60", "."], "guid": 3080}}
{"text": "gymnast: Gymnast_ID, Floor_Exercise_Points, Pommel_Horse_Points, Rings_Points, Vault_Points, Parallel_Bars_Points, Horizontal_Bar_Points, Total_Points; people: People_ID, Name, Age, Height, Hometown | What are the total points of gymnasts, ordered by their floor exercise points descending?", "sql": "SELECT Total_Points FROM gymnast ORDER BY Floor_Exercise_Points DESC", "example": {"db_id": "gymnast", "query": "SELECT Total_Points FROM gymnast ORDER BY Floor_Exercise_Points DESC", "query_toks": ["SELECT", "Total_Points", "FROM", "gymnast", "ORDER", "BY", "Floor_Exercise_Points", "DESC"], "query_toks_no_value": ["select", "total_points", "from", "gymnast", "order", "by", "floor_exercise_points", "desc"], "question": "What are the total points of gymnasts, ordered by their floor exercise points descending?", "question_toks": ["What", "are", "the", "total", "points", "of", "gymnasts", ",", "ordered", "by", "their", "floor", "exercise", "points", "descending", "?"], "guid": 3081}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | How many colleges has more than 15000 students?", "sql": "SELECT count(*) FROM College WHERE enr  >  15000", "example": {"db_id": "soccer_2", "query": "SELECT count(*) FROM College WHERE enr  >  15000", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "College", "WHERE", "enr", ">", "15000"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "college", "where", "enr", ">", "value"], "question": "How many colleges has more than 15000 students?", "question_toks": ["How", "many", "colleges", "has", "more", "than", "15000", "students", "?"], "guid": 3082}}
{"text": "country: Country_id, Country_name, Capital, Official_native_language; team: Team_id, Name; match_season: Season, Player, Position, Country, Team, Draft_Pick_Number, Draft_Class, College; player: Player_ID, Player, Years_Played, Total_WL, Singles_WL, Doubles_WL, Team | Count the number of different colleges that players who play for Columbus Crew are from.", "sql": "SELECT count(DISTINCT T1.College) FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  \"Columbus Crew\"", "example": {"db_id": "match_season", "query": "SELECT count(DISTINCT T1.College) FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  \"Columbus Crew\"", "query_toks": ["SELECT", "count", "(", "DISTINCT", "T1.College", ")", "FROM", "match_season", "AS", "T1", "JOIN", "team", "AS", "T2", "ON", "T1.Team", "=", "T2.Team_id", "WHERE", "T2.Name", "=", "``", "Columbus", "Crew", "''"], "query_toks_no_value": ["select", "count", "(", "distinct", "t1", ".", "college", ")", "from", "match_season", "as", "t1", "join", "team", "as", "t2", "on", "t1", ".", "team", "=", "t2", ".", "team_id", "where", "t2", ".", "name", "=", "value"], "question": "Count the number of different colleges that players who play for Columbus Crew are from.", "question_toks": ["Count", "the", "number", "of", "different", "colleges", "that", "players", "who", "play", "for", "Columbus", "Crew", "are", "from", "."], "guid": 3083}}
{"text": "players: player_id, first_name, last_name, hand, birth_date, country_code; matches: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank; rankings: ranking_date, ranking, player_id, ranking_points, tours | Find the first name and country code of the oldest player.", "sql": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1", "example": {"db_id": "wta_1", "query": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1", "query_toks": ["SELECT", "first_name", ",", "country_code", "FROM", "players", "ORDER", "BY", "birth_date", "LIMIT", "1"], "query_toks_no_value": ["select", "first_name", ",", "country_code", "from", "players", "order", "by", "birth_date", "limit", "value"], "question": "Find the first name and country code of the oldest player.", "question_toks": ["Find", "the", "first", "name", "and", "country", "code", "of", "the", "oldest", "player", "."], "guid": 3084}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | What are the first names of all the students?", "sql": "SELECT DISTINCT fname FROM student", "example": {"db_id": "club_1", "query": "SELECT DISTINCT fname FROM student", "query_toks": ["SELECT", "DISTINCT", "fname", "FROM", "student"], "query_toks_no_value": ["select", "distinct", "fname", "from", "student"], "question": "What are the first names of all the students?", "question_toks": ["What", "are", "the", "first", "names", "of", "all", "the", "students", "?"], "guid": 3085}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | What is the number of states that has some college whose enrollment is larger than the average enrollment?", "sql": "SELECT count(DISTINCT state) FROM college WHERE enr  >  (SELECT avg(enr) FROM college)", "example": {"db_id": "soccer_2", "query": "SELECT count(DISTINCT state) FROM college WHERE enr  >  (SELECT avg(enr) FROM college)", "query_toks": ["SELECT", "count", "(", "DISTINCT", "state", ")", "FROM", "college", "WHERE", "enr", ">", "(", "SELECT", "avg", "(", "enr", ")", "FROM", "college", ")"], "query_toks_no_value": ["select", "count", "(", "distinct", "state", ")", "from", "college", "where", "enr", ">", "(", "select", "avg", "(", "enr", ")", "from", "college", ")"], "question": "What is the number of states that has some college whose enrollment is larger than the average enrollment?", "question_toks": ["What", "is", "the", "number", "of", "states", "that", "has", "some", "college", "whose", "enrollment", "is", "larger", "than", "the", "average", "enrollment", "?"], "guid": 3086}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | How many different roles are there in the club \"Bootup Baltimore\"?", "sql": "SELECT count(DISTINCT t2.position) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid WHERE t1.clubname  =  \"Bootup Baltimore\"", "example": {"db_id": "club_1", "query": "SELECT count(DISTINCT t2.position) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid WHERE t1.clubname  =  \"Bootup Baltimore\"", "query_toks": ["SELECT", "count", "(", "DISTINCT", "t2.position", ")", "FROM", "club", "AS", "t1", "JOIN", "member_of_club", "AS", "t2", "ON", "t1.clubid", "=", "t2.clubid", "WHERE", "t1.clubname", "=", "``", "Bootup", "Baltimore", "''"], "query_toks_no_value": ["select", "count", "(", "distinct", "t2", ".", "position", ")", "from", "club", "as", "t1", "join", "member_of_club", "as", "t2", "on", "t1", ".", "clubid", "=", "t2", ".", "clubid", "where", "t1", ".", "clubname", "=", "value"], "question": "How many different roles are there in the club \"Bootup Baltimore\"?", "question_toks": ["How", "many", "different", "roles", "are", "there", "in", "the", "club", "``", "Bootup", "Baltimore", "''", "?"], "guid": 3087}}
{"text": "player: Player_ID, Sponsor_name, Player_name, Gender, Residence, Occupation, Votes, Rank; club: Club_ID, Club_name, Region, Start_year; coach: Coach_ID, Coach_name, Gender, Club_ID, Rank; player_coach: Player_ID, Coach_ID, Starting_year; match_result: Rank, Club_ID, Gold, Big_Silver, Small_Silver, Bronze, Points | How many coaches does each club has? List the club id, name and the number of coaches.", "sql": "SELECT T1.club_id ,  T1.club_name, count(*) FROM club AS T1 JOIN coach AS T2 ON T1.club_id  =  T2.club_id GROUP BY T1.club_id", "example": {"db_id": "riding_club", "query": "SELECT T1.club_id ,  T1.club_name, count(*) FROM club AS T1 JOIN coach AS T2 ON T1.club_id  =  T2.club_id GROUP BY T1.club_id", "query_toks": ["SELECT", "T1.club_id", ",", "T1.club_name", ",", "count", "(", "*", ")", "FROM", "club", "AS", "T1", "JOIN", "coach", "AS", "T2", "ON", "T1.club_id", "=", "T2.club_id", "GROUP", "BY", "T1.club_id"], "query_toks_no_value": ["select", "t1", ".", "club_id", ",", "t1", ".", "club_name", ",", "count", "(", "*", ")", "from", "club", "as", "t1", "join", "coach", "as", "t2", "on", "t1", ".", "club_id", "=", "t2", ".", "club_id", "group", "by", "t1", ".", "club_id"], "question": "How many coaches does each club has? List the club id, name and the number of coaches.", "question_toks": ["How", "many", "coaches", "does", "each", "club", "has", "?", "List", "the", "club", "id", ",", "name", "and", "the", "number", "of", "coaches", "."], "guid": 3088}}
{"text": "club: Club_ID, name, Region, Start_year; club_rank: Rank, Club_ID, Gold, Silver, Bronze, Total; player: Player_ID, name, Position, Club_ID, Apps, Tries, Goals, Points; competition: Competition_ID, Year, Competition_type, Country; competition_result: Competition_ID, Club_ID_1, Club_ID_2, Score | which countries did participated in both Friendly and Tournament type competitions.", "sql": "SELECT country FROM competition WHERE competition_type  =  'Friendly' INTERSECT SELECT country FROM competition WHERE competition_type  =  'Tournament'", "example": {"db_id": "sports_competition", "query": "SELECT country FROM competition WHERE competition_type  =  'Friendly' INTERSECT SELECT country FROM competition WHERE competition_type  =  'Tournament'", "query_toks": ["SELECT", "country", "FROM", "competition", "WHERE", "competition_type", "=", "'Friendly", "'", "INTERSECT", "SELECT", "country", "FROM", "competition", "WHERE", "competition_type", "=", "'Tournament", "'"], "query_toks_no_value": ["select", "country", "from", "competition", "where", "competition_type", "=", "value", "intersect", "select", "country", "from", "competition", "where", "competition_type", "=", "value"], "question": "which countries did participated in both Friendly and Tournament type competitions.", "question_toks": ["which", "countries", "did", "participated", "in", "both", "Friendly", "and", "Tournament", "type", "competitions", "."], "guid": 3089}}
{"text": "poker_player: Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings; people: People_ID, Nationality, Name, Birth_Date, Height | What are the names of people who do not play poker?", "sql": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)", "example": {"db_id": "poker_player", "query": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)", "query_toks": ["SELECT", "Name", "FROM", "people", "WHERE", "People_ID", "NOT", "IN", "(", "SELECT", "People_ID", "FROM", "poker_player", ")"], "query_toks_no_value": ["select", "name", "from", "people", "where", "people_id", "not", "in", "(", "select", "people_id", "from", "poker_player", ")"], "question": "What are the names of people who do not play poker?", "question_toks": ["What", "are", "the", "names", "of", "people", "who", "do", "not", "play", "poker", "?"], "guid": 3090}}
{"text": "club: Club_ID, name, Region, Start_year; club_rank: Rank, Club_ID, Gold, Silver, Bronze, Total; player: Player_ID, name, Position, Club_ID, Apps, Tries, Goals, Points; competition: Competition_ID, Year, Competition_type, Country; competition_result: Competition_ID, Club_ID_1, Club_ID_2, Score | List the position of players and the average number of points of players of each position.", "sql": "SELECT POSITION ,  avg(Points) FROM player GROUP BY POSITION", "example": {"db_id": "sports_competition", "query": "SELECT POSITION ,  avg(Points) FROM player GROUP BY POSITION", "query_toks": ["SELECT", "POSITION", ",", "avg", "(", "Points", ")", "FROM", "player", "GROUP", "BY", "POSITION"], "query_toks_no_value": ["select", "position", ",", "avg", "(", "points", ")", "from", "player", "group", "by", "position"], "question": "List the position of players and the average number of points of players of each position.", "question_toks": ["List", "the", "position", "of", "players", "and", "the", "average", "number", "of", "points", "of", "players", "of", "each", "position", "."], "guid": 3091}}
{"text": "club: Club_ID, name, Region, Start_year; club_rank: Rank, Club_ID, Gold, Silver, Bronze, Total; player: Player_ID, name, Position, Club_ID, Apps, Tries, Goals, Points; competition: Competition_ID, Year, Competition_type, Country; competition_result: Competition_ID, Club_ID_1, Club_ID_2, Score | Show total points of all players.", "sql": "SELECT sum(Points) FROM player", "example": {"db_id": "sports_competition", "query": "SELECT sum(Points) FROM player", "query_toks": ["SELECT", "sum", "(", "Points", ")", "FROM", "player"], "query_toks_no_value": ["select", "sum", "(", "points", ")", "from", "player"], "question": "Show total points of all players.", "question_toks": ["Show", "total", "points", "of", "all", "players", "."], "guid": 3092}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | Find all the zip codes in which the max dew point have never reached 70.", "sql": "SELECT DISTINCT zip_code FROM weather EXCEPT SELECT DISTINCT zip_code FROM weather WHERE max_dew_point_f  >=  70", "example": {"db_id": "bike_1", "query": "SELECT DISTINCT zip_code FROM weather EXCEPT SELECT DISTINCT zip_code FROM weather WHERE max_dew_point_f  >=  70", "query_toks": ["SELECT", "DISTINCT", "zip_code", "FROM", "weather", "EXCEPT", "SELECT", "DISTINCT", "zip_code", "FROM", "weather", "WHERE", "max_dew_point_f", ">", "=", "70"], "query_toks_no_value": ["select", "distinct", "zip_code", "from", "weather", "except", "select", "distinct", "zip_code", "from", "weather", "where", "max_dew_point_f", ">", "=", "value"], "question": "Find all the zip codes in which the max dew point have never reached 70.", "question_toks": ["Find", "all", "the", "zip", "codes", "in", "which", "the", "max", "dew", "point", "have", "never", "reached", "70", "."], "guid": 3093}}
{"text": "poker_player: Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings; people: People_ID, Nationality, Name, Birth_Date, Height | What are the names of poker players, ordered ascending by the number of final tables they have made?", "sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made", "example": {"db_id": "poker_player", "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made", "query_toks": ["SELECT", "T1.Name", "FROM", "people", "AS", "T1", "JOIN", "poker_player", "AS", "T2", "ON", "T1.People_ID", "=", "T2.People_ID", "ORDER", "BY", "T2.Final_Table_Made"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "people", "as", "t1", "join", "poker_player", "as", "t2", "on", "t1", ".", "people_id", "=", "t2", ".", "people_id", "order", "by", "t2", ".", "final_table_made"], "question": "What are the names of poker players, ordered ascending by the number of final tables they have made?", "question_toks": ["What", "are", "the", "names", "of", "poker", "players", ",", "ordered", "ascending", "by", "the", "number", "of", "final", "tables", "they", "have", "made", "?"], "guid": 3094}}
{"text": "basketball_match: Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home; university: School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference | What is the primary conference of the school that has the lowest acc percent score in the competition?", "sql": "SELECT t1.Primary_conference FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t2.acc_percent LIMIT 1", "example": {"db_id": "university_basketball", "query": "SELECT t1.Primary_conference FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t2.acc_percent LIMIT 1", "query_toks": ["SELECT", "t1.Primary_conference", "FROM", "university", "AS", "t1", "JOIN", "basketball_match", "AS", "t2", "ON", "t1.school_id", "=", "t2.school_id", "ORDER", "BY", "t2.acc_percent", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "primary_conference", "from", "university", "as", "t1", "join", "basketball_match", "as", "t2", "on", "t1", ".", "school_id", "=", "t2", ".", "school_id", "order", "by", "t2", ".", "acc_percent", "limit", "value"], "question": "What is the primary conference of the school that has the lowest acc percent score in the competition?", "question_toks": ["What", "is", "the", "primary", "conference", "of", "the", "school", "that", "has", "the", "lowest", "acc", "percent", "score", "in", "the", "competition", "?"], "guid": 3095}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | What are the ids of stations that have latitude above 37.4 and never had bike availability below 7?", "sql": "SELECT id FROM station WHERE lat  >  37.4 EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING min(bikes_available)  <  7", "example": {"db_id": "bike_1", "query": "SELECT id FROM station WHERE lat  >  37.4 EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING min(bikes_available)  <  7", "query_toks": ["SELECT", "id", "FROM", "station", "WHERE", "lat", ">", "37.4", "EXCEPT", "SELECT", "station_id", "FROM", "status", "GROUP", "BY", "station_id", "HAVING", "min", "(", "bikes_available", ")", "<", "7"], "query_toks_no_value": ["select", "id", "from", "station", "where", "lat", ">", "value", "except", "select", "station_id", "from", "status", "group", "by", "station_id", "having", "min", "(", "bikes_available", ")", "<", "value"], "question": "What are the ids of stations that have latitude above 37.4 and never had bike availability below 7?", "question_toks": ["What", "are", "the", "ids", "of", "stations", "that", "have", "latitude", "above", "37.4", "and", "never", "had", "bike", "availability", "below", "7", "?"], "guid": 3096}}
{"text": "poker_player: Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings; people: People_ID, Nationality, Name, Birth_Date, Height | List the names and birth dates of people in ascending alphabetical order of name.", "sql": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC", "example": {"db_id": "poker_player", "query": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC", "query_toks": ["SELECT", "Name", ",", "Birth_Date", "FROM", "people", "ORDER", "BY", "Name", "ASC"], "query_toks_no_value": ["select", "name", ",", "birth_date", "from", "people", "order", "by", "name", "asc"], "question": "List the names and birth dates of people in ascending alphabetical order of name.", "question_toks": ["List", "the", "names", "and", "birth", "dates", "of", "people", "in", "ascending", "alphabetical", "order", "of", "name", "."], "guid": 3097}}
{"text": "poker_player: Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings; people: People_ID, Nationality, Name, Birth_Date, Height | What is the money rank of the tallest poker player?", "sql": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1", "example": {"db_id": "poker_player", "query": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1", "query_toks": ["SELECT", "T2.Money_Rank", "FROM", "people", "AS", "T1", "JOIN", "poker_player", "AS", "T2", "ON", "T1.People_ID", "=", "T2.People_ID", "ORDER", "BY", "T1.Height", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "money_rank", "from", "people", "as", "t1", "join", "poker_player", "as", "t2", "on", "t1", ".", "people_id", "=", "t2", ".", "people_id", "order", "by", "t1", ".", "height", "desc", "limit", "value"], "question": "What is the money rank of the tallest poker player?", "question_toks": ["What", "is", "the", "money", "rank", "of", "the", "tallest", "poker", "player", "?"], "guid": 3098}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | What is the station station and end station for the trips with the three smallest ids?", "sql": "SELECT start_station_name ,  end_station_name FROM trip ORDER BY id LIMIT 3", "example": {"db_id": "bike_1", "query": "SELECT start_station_name ,  end_station_name FROM trip ORDER BY id LIMIT 3", "query_toks": ["SELECT", "start_station_name", ",", "end_station_name", "FROM", "trip", "ORDER", "BY", "id", "LIMIT", "3"], "query_toks_no_value": ["select", "start_station_name", ",", "end_station_name", "from", "trip", "order", "by", "id", "limit", "value"], "question": "What is the station station and end station for the trips with the three smallest ids?", "question_toks": ["What", "is", "the", "station", "station", "and", "end", "station", "for", "the", "trips", "with", "the", "three", "smallest", "ids", "?"], "guid": 3099}}
{"text": "gymnast: Gymnast_ID, Floor_Exercise_Points, Pommel_Horse_Points, Rings_Points, Vault_Points, Parallel_Bars_Points, Horizontal_Bar_Points, Total_Points; people: People_ID, Name, Age, Height, Hometown | Return the age of the person with the greatest height.", "sql": "SELECT Age FROM people ORDER BY Height DESC LIMIT 1", "example": {"db_id": "gymnast", "query": "SELECT Age FROM people ORDER BY Height DESC LIMIT 1", "query_toks": ["SELECT", "Age", "FROM", "people", "ORDER", "BY", "Height", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "age", "from", "people", "order", "by", "height", "desc", "limit", "value"], "question": "Return the age of the person with the greatest height.", "question_toks": ["Return", "the", "age", "of", "the", "person", "with", "the", "greatest", "height", "."], "guid": 3100}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | How many members of club \"Bootup Baltimore\" are younger than 18?", "sql": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t3.age  <  18", "example": {"db_id": "club_1", "query": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t3.age  <  18", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "club", "AS", "t1", "JOIN", "member_of_club", "AS", "t2", "ON", "t1.clubid", "=", "t2.clubid", "JOIN", "student", "AS", "t3", "ON", "t2.stuid", "=", "t3.stuid", "WHERE", "t1.clubname", "=", "``", "Bootup", "Baltimore", "''", "AND", "t3.age", "<", "18"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "club", "as", "t1", "join", "member_of_club", "as", "t2", "on", "t1", ".", "clubid", "=", "t2", ".", "clubid", "join", "student", "as", "t3", "on", "t2", ".", "stuid", "=", "t3", ".", "stuid", "where", "t1", ".", "clubname", "=", "value", "and", "t3", ".", "age", "<", "value"], "question": "How many members of club \"Bootup Baltimore\" are younger than 18?", "question_toks": ["How", "many", "members", "of", "club", "``", "Bootup", "Baltimore", "''", "are", "younger", "than", "18", "?"], "guid": 3101}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | Who is the president of the club \"Bootup Baltimore\"? Give me the first and last name.", "sql": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t2.position  =  \"President\"", "example": {"db_id": "club_1", "query": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t2.position  =  \"President\"", "query_toks": ["SELECT", "t3.fname", ",", "t3.lname", "FROM", "club", "AS", "t1", "JOIN", "member_of_club", "AS", "t2", "ON", "t1.clubid", "=", "t2.clubid", "JOIN", "student", "AS", "t3", "ON", "t2.stuid", "=", "t3.stuid", "WHERE", "t1.clubname", "=", "``", "Bootup", "Baltimore", "''", "AND", "t2.position", "=", "``", "President", "''"], "query_toks_no_value": ["select", "t3", ".", "fname", ",", "t3", ".", "lname", "from", "club", "as", "t1", "join", "member_of_club", "as", "t2", "on", "t1", ".", "clubid", "=", "t2", ".", "clubid", "join", "student", "as", "t3", "on", "t2", ".", "stuid", "=", "t3", ".", "stuid", "where", "t1", ".", "clubname", "=", "value", "and", "t2", ".", "position", "=", "value"], "question": "Who is the president of the club \"Bootup Baltimore\"? Give me the first and last name.", "question_toks": ["Who", "is", "the", "president", "of", "the", "club", "``", "Bootup", "Baltimore", "''", "?", "Give", "me", "the", "first", "and", "last", "name", "."], "guid": 3102}}
{"text": "players: player_id, first_name, last_name, hand, birth_date, country_code; matches: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank; rankings: ranking_date, ranking, player_id, ranking_points, tours | What are the full names of all left handed players, in order of birth date?", "sql": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date", "example": {"db_id": "wta_1", "query": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date", "query_toks": ["SELECT", "first_name", ",", "last_name", "FROM", "players", "WHERE", "hand", "=", "'L", "'", "ORDER", "BY", "birth_date"], "query_toks_no_value": ["select", "first_name", ",", "last_name", "from", "players", "where", "hand", "=", "value", "order", "by", "birth_date"], "question": "What are the full names of all left handed players, in order of birth date?", "question_toks": ["What", "are", "the", "full", "names", "of", "all", "left", "handed", "players", ",", "in", "order", "of", "birth", "date", "?"], "guid": 3103}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | Find the id and location of circuits that belong to France or Belgium?", "sql": "SELECT circuitid ,  LOCATION FROM circuits WHERE country = \"France\" OR country = \"Belgium\"", "example": {"db_id": "formula_1", "query": "SELECT circuitid ,  LOCATION FROM circuits WHERE country = \"France\" OR country = \"Belgium\"", "query_toks": ["SELECT", "circuitid", ",", "LOCATION", "FROM", "circuits", "WHERE", "country", "=", "``", "France", "''", "OR", "country", "=", "``", "Belgium", "''"], "query_toks_no_value": ["select", "circuitid", ",", "location", "from", "circuits", "where", "country", "=", "value", "or", "country", "=", "value"], "question": "Find the id and location of circuits that belong to France or Belgium?", "question_toks": ["Find", "the", "id", "and", "location", "of", "circuits", "that", "belong", "to", "France", "or", "Belgium", "?"], "guid": 3104}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | List the forename and surname of all distinct drivers who once had laptime less than 93000 milliseconds?", "sql": "SELECT DISTINCT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds < 93000", "example": {"db_id": "formula_1", "query": "SELECT DISTINCT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds < 93000", "query_toks": ["SELECT", "DISTINCT", "T1.forename", ",", "T1.surname", "FROM", "drivers", "AS", "T1", "JOIN", "laptimes", "AS", "T2", "ON", "T1.driverid", "=", "T2.driverid", "WHERE", "T2.milliseconds", "<", "93000"], "query_toks_no_value": ["select", "distinct", "t1", ".", "forename", ",", "t1", ".", "surname", "from", "drivers", "as", "t1", "join", "laptimes", "as", "t2", "on", "t1", ".", "driverid", "=", "t2", ".", "driverid", "where", "t2", ".", "milliseconds", "<", "value"], "question": "List the forename and surname of all distinct drivers who once had laptime less than 93000 milliseconds?", "question_toks": ["List", "the", "forename", "and", "surname", "of", "all", "distinct", "drivers", "who", "once", "had", "laptime", "less", "than", "93000", "milliseconds", "?"], "guid": 3105}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | Which clubs have one or more members whose advisor is \"1121\"?", "sql": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.advisor  =  1121", "example": {"db_id": "club_1", "query": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.advisor  =  1121", "query_toks": ["SELECT", "DISTINCT", "t1.clubname", "FROM", "club", "AS", "t1", "JOIN", "member_of_club", "AS", "t2", "ON", "t1.clubid", "=", "t2.clubid", "JOIN", "student", "AS", "t3", "ON", "t2.stuid", "=", "t3.stuid", "WHERE", "t3.advisor", "=", "1121"], "query_toks_no_value": ["select", "distinct", "t1", ".", "clubname", "from", "club", "as", "t1", "join", "member_of_club", "as", "t2", "on", "t1", ".", "clubid", "=", "t2", ".", "clubid", "join", "student", "as", "t3", "on", "t2", ".", "stuid", "=", "t3", ".", "stuid", "where", "t3", ".", "advisor", "=", "value"], "question": "Which clubs have one or more members whose advisor is \"1121\"?", "question_toks": ["Which", "clubs", "have", "one", "or", "more", "members", "whose", "advisor", "is", "``", "1121", "''", "?"], "guid": 3106}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | What is the average training hours of all players?", "sql": "SELECT avg(HS) FROM Player", "example": {"db_id": "soccer_2", "query": "SELECT avg(HS) FROM Player", "query_toks": ["SELECT", "avg", "(", "HS", ")", "FROM", "Player"], "query_toks_no_value": ["select", "avg", "(", "hs", ")", "from", "player"], "question": "What is the average training hours of all players?", "question_toks": ["What", "is", "the", "average", "training", "hours", "of", "all", "players", "?"], "guid": 3107}}
{"text": "swimmer: ID, name, Nationality, meter_100, meter_200, meter_300, meter_400, meter_500, meter_600, meter_700; stadium: ID, name, Capacity, City, Country, Opening_year; event: ID, Name, Stadium_ID, Year; record: ID, Result, Swimmer_ID, Event_ID | Find the names of stadiums that some Australian swimmers have been to.", "sql": "SELECT t4.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id JOIN event AS t3 ON t2.event_id  =  t3.id JOIN stadium AS t4 ON t4.id  =  t3.stadium_id WHERE t1.nationality  =  'Australia'", "example": {"db_id": "swimming", "query": "SELECT t4.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id JOIN event AS t3 ON t2.event_id  =  t3.id JOIN stadium AS t4 ON t4.id  =  t3.stadium_id WHERE t1.nationality  =  'Australia'", "query_toks": ["SELECT", "t4.name", "FROM", "swimmer", "AS", "t1", "JOIN", "record", "AS", "t2", "ON", "t1.id", "=", "t2.swimmer_id", "JOIN", "event", "AS", "t3", "ON", "t2.event_id", "=", "t3.id", "JOIN", "stadium", "AS", "t4", "ON", "t4.id", "=", "t3.stadium_id", "WHERE", "t1.nationality", "=", "'Australia", "'"], "query_toks_no_value": ["select", "t4", ".", "name", "from", "swimmer", "as", "t1", "join", "record", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "swimmer_id", "join", "event", "as", "t3", "on", "t2", ".", "event_id", "=", "t3", ".", "id", "join", "stadium", "as", "t4", "on", "t4", ".", "id", "=", "t3", ".", "stadium_id", "where", "t1", ".", "nationality", "=", "value"], "question": "Find the names of stadiums that some Australian swimmers have been to.", "question_toks": ["Find", "the", "names", "of", "stadiums", "that", "some", "Australian", "swimmers", "have", "been", "to", "."], "guid": 3108}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | What college has a student who successfully made the team in the role of a goalie?", "sql": "SELECT cName FROM  tryout WHERE decision  =  'yes' AND pPos  =  'goalie'", "example": {"db_id": "soccer_2", "query": "SELECT cName FROM  tryout WHERE decision  =  'yes' AND pPos  =  'goalie'", "query_toks": ["SELECT", "cName", "FROM", "tryout", "WHERE", "decision", "=", "'yes", "'", "AND", "pPos", "=", "'goalie", "'"], "query_toks_no_value": ["select", "cname", "from", "tryout", "where", "decision", "=", "value", "and", "ppos", "=", "value"], "question": "What college has a student who successfully made the team in the role of a goalie?", "question_toks": ["What", "college", "has", "a", "student", "who", "successfully", "made", "the", "team", "in", "the", "role", "of", "a", "goalie", "?"], "guid": 3109}}
{"text": "country: Country_id, Country_name, Capital, Official_native_language; team: Team_id, Name; match_season: Season, Player, Position, Country, Team, Draft_Pick_Number, Draft_Class, College; player: Player_ID, Player, Years_Played, Total_WL, Singles_WL, Doubles_WL, Team | What is the position that is most common among players in match seasons?", "sql": "SELECT POSITION FROM match_season GROUP BY POSITION ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "match_season", "query": "SELECT POSITION FROM match_season GROUP BY POSITION ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "POSITION", "FROM", "match_season", "GROUP", "BY", "POSITION", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "position", "from", "match_season", "group", "by", "position", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the position that is most common among players in match seasons?", "question_toks": ["What", "is", "the", "position", "that", "is", "most", "common", "among", "players", "in", "match", "seasons", "?"], "guid": 3110}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | Find all the female members of club \"Bootup Baltimore\". Show the first name and last name.", "sql": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t3.sex  =  \"F\"", "example": {"db_id": "club_1", "query": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t3.sex  =  \"F\"", "query_toks": ["SELECT", "t3.fname", ",", "t3.lname", "FROM", "club", "AS", "t1", "JOIN", "member_of_club", "AS", "t2", "ON", "t1.clubid", "=", "t2.clubid", "JOIN", "student", "AS", "t3", "ON", "t2.stuid", "=", "t3.stuid", "WHERE", "t1.clubname", "=", "``", "Bootup", "Baltimore", "''", "AND", "t3.sex", "=", "``", "F", "''"], "query_toks_no_value": ["select", "t3", ".", "fname", ",", "t3", ".", "lname", "from", "club", "as", "t1", "join", "member_of_club", "as", "t2", "on", "t1", ".", "clubid", "=", "t2", ".", "clubid", "join", "student", "as", "t3", "on", "t2", ".", "stuid", "=", "t3", ".", "stuid", "where", "t1", ".", "clubname", "=", "value", "and", "t3", ".", "sex", "=", "value"], "question": "Find all the female members of club \"Bootup Baltimore\". Show the first name and last name.", "question_toks": ["Find", "all", "the", "female", "members", "of", "club", "``", "Bootup", "Baltimore", "''", ".", "Show", "the", "first", "name", "and", "last", "name", "."], "guid": 3111}}
{"text": "player: Player_ID, Sponsor_name, Player_name, Gender, Residence, Occupation, Votes, Rank; club: Club_ID, Club_name, Region, Start_year; coach: Coach_ID, Coach_name, Gender, Club_ID, Rank; player_coach: Player_ID, Coach_ID, Starting_year; match_result: Rank, Club_ID, Gold, Big_Silver, Small_Silver, Bronze, Points | How many gold medals has the club with the most coaches won?", "sql": "SELECT T1.club_id ,  T1.gold FROM match_result AS T1 JOIN coach AS T2 ON T1.club_id  =  T2.club_id GROUP BY T1.club_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "riding_club", "query": "SELECT T1.club_id ,  T1.gold FROM match_result AS T1 JOIN coach AS T2 ON T1.club_id  =  T2.club_id GROUP BY T1.club_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.club_id", ",", "T1.gold", "FROM", "match_result", "AS", "T1", "JOIN", "coach", "AS", "T2", "ON", "T1.club_id", "=", "T2.club_id", "GROUP", "BY", "T1.club_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "club_id", ",", "t1", ".", "gold", "from", "match_result", "as", "t1", "join", "coach", "as", "t2", "on", "t1", ".", "club_id", "=", "t2", ".", "club_id", "group", "by", "t1", ".", "club_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "How many gold medals has the club with the most coaches won?", "question_toks": ["How", "many", "gold", "medals", "has", "the", "club", "with", "the", "most", "coaches", "won", "?"], "guid": 3112}}
{"text": "race: Race_ID, Name, Class, Date, Track_ID; track: Track_ID, Name, Location, Seating, Year_Opened | What are the locations that have both tracks with more than 90000 seats, and tracks with fewer than 70000 seats?", "sql": "SELECT LOCATION FROM track WHERE seating  >  90000 INTERSECT SELECT LOCATION FROM track WHERE seating  <  70000", "example": {"db_id": "race_track", "query": "SELECT LOCATION FROM track WHERE seating  >  90000 INTERSECT SELECT LOCATION FROM track WHERE seating  <  70000", "query_toks": ["SELECT", "LOCATION", "FROM", "track", "WHERE", "seating", ">", "90000", "INTERSECT", "SELECT", "LOCATION", "FROM", "track", "WHERE", "seating", "<", "70000"], "query_toks_no_value": ["select", "location", "from", "track", "where", "seating", ">", "value", "intersect", "select", "location", "from", "track", "where", "seating", "<", "value"], "question": "What are the locations that have both tracks with more than 90000 seats, and tracks with fewer than 70000 seats?", "question_toks": ["What", "are", "the", "locations", "that", "have", "both", "tracks", "with", "more", "than", "90000", "seats", ",", "and", "tracks", "with", "fewer", "than", "70000", "seats", "?"], "guid": 3113}}
{"text": "players: player_id, first_name, last_name, hand, birth_date, country_code; matches: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank; rankings: ranking_date, ranking, player_id, ranking_points, tours | What are the average ages of losers and winners across matches?", "sql": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches", "example": {"db_id": "wta_1", "query": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches", "query_toks": ["SELECT", "avg", "(", "loser_age", ")", ",", "avg", "(", "winner_age", ")", "FROM", "matches"], "query_toks_no_value": ["select", "avg", "(", "loser_age", ")", ",", "avg", "(", "winner_age", ")", "from", "matches"], "question": "What are the average ages of losers and winners across matches?", "question_toks": ["What", "are", "the", "average", "ages", "of", "losers", "and", "winners", "across", "matches", "?"], "guid": 3114}}
{"text": "country: Country_id, Country_name, Capital, Official_native_language; team: Team_id, Name; match_season: Season, Player, Position, Country, Team, Draft_Pick_Number, Draft_Class, College; player: Player_ID, Player, Years_Played, Total_WL, Singles_WL, Doubles_WL, Team | Who are the players from Indonesia?", "sql": "SELECT T2.Player FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Country_name  =  \"Indonesia\"", "example": {"db_id": "match_season", "query": "SELECT T2.Player FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Country_name  =  \"Indonesia\"", "query_toks": ["SELECT", "T2.Player", "FROM", "country", "AS", "T1", "JOIN", "match_season", "AS", "T2", "ON", "T1.Country_id", "=", "T2.Country", "WHERE", "T1.Country_name", "=", "``", "Indonesia", "''"], "query_toks_no_value": ["select", "t2", ".", "player", "from", "country", "as", "t1", "join", "match_season", "as", "t2", "on", "t1", ".", "country_id", "=", "t2", ".", "country", "where", "t1", ".", "country_name", "=", "value"], "question": "Who are the players from Indonesia?", "question_toks": ["Who", "are", "the", "players", "from", "Indonesia", "?"], "guid": 3115}}
{"text": "swimmer: ID, name, Nationality, meter_100, meter_200, meter_300, meter_400, meter_500, meter_600, meter_700; stadium: ID, name, Capacity, City, Country, Opening_year; event: ID, Name, Stadium_ID, Year; record: ID, Result, Swimmer_ID, Event_ID | What is the name of the event that happened in the most recent year?", "sql": "SELECT name FROM event ORDER BY YEAR DESC LIMIT 1", "example": {"db_id": "swimming", "query": "SELECT name FROM event ORDER BY YEAR DESC LIMIT 1", "query_toks": ["SELECT", "name", "FROM", "event", "ORDER", "BY", "YEAR", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "name", "from", "event", "order", "by", "year", "desc", "limit", "value"], "question": "What is the name of the event that happened in the most recent year?", "question_toks": ["What", "is", "the", "name", "of", "the", "event", "that", "happened", "in", "the", "most", "recent", "year", "?"], "guid": 3116}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | What zip codes have a station with a max temperature greater than or equal to 80 and when did it reach that temperature?", "sql": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80", "example": {"db_id": "bike_1", "query": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80", "query_toks": ["SELECT", "date", ",", "zip_code", "FROM", "weather", "WHERE", "max_temperature_f", ">", "=", "80"], "query_toks_no_value": ["select", "date", ",", "zip_code", "from", "weather", "where", "max_temperature_f", ">", "=", "value"], "question": "What zip codes have a station with a max temperature greater than or equal to 80 and when did it reach that temperature?", "question_toks": ["What", "zip", "codes", "have", "a", "station", "with", "a", "max", "temperature", "greater", "than", "or", "equal", "to", "80", "and", "when", "did", "it", "reach", "that", "temperature", "?"], "guid": 3117}}
{"text": "club: Club_ID, name, Region, Start_year; club_rank: Rank, Club_ID, Gold, Silver, Bronze, Total; player: Player_ID, name, Position, Club_ID, Apps, Tries, Goals, Points; competition: Competition_ID, Year, Competition_type, Country; competition_result: Competition_ID, Club_ID_1, Club_ID_2, Score | List the most common type of competition.", "sql": "SELECT Competition_type FROM competition GROUP BY Competition_type ORDER BY COUNT(*) DESC LIMIT 1", "example": {"db_id": "sports_competition", "query": "SELECT Competition_type FROM competition GROUP BY Competition_type ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "Competition_type", "FROM", "competition", "GROUP", "BY", "Competition_type", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "competition_type", "from", "competition", "group", "by", "competition_type", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "List the most common type of competition.", "question_toks": ["List", "the", "most", "common", "type", "of", "competition", "."], "guid": 3118}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | Find the max, average and min training hours of all players.", "sql": "SELECT avg(HS) ,  max(HS) ,  min(HS) FROM Player", "example": {"db_id": "soccer_2", "query": "SELECT avg(HS) ,  max(HS) ,  min(HS) FROM Player", "query_toks": ["SELECT", "avg", "(", "HS", ")", ",", "max", "(", "HS", ")", ",", "min", "(", "HS", ")", "FROM", "Player"], "query_toks_no_value": ["select", "avg", "(", "hs", ")", ",", "max", "(", "hs", ")", ",", "min", "(", "hs", ")", "from", "player"], "question": "Find the max, average and min training hours of all players.", "question_toks": ["Find", "the", "max", ",", "average", "and", "min", "training", "hours", "of", "all", "players", "."], "guid": 3119}}
{"text": "club: Club_ID, name, Region, Start_year; club_rank: Rank, Club_ID, Gold, Silver, Bronze, Total; player: Player_ID, name, Position, Club_ID, Apps, Tries, Goals, Points; competition: Competition_ID, Year, Competition_type, Country; competition_result: Competition_ID, Club_ID_1, Club_ID_2, Score | find the number of players whose points are lower than 30 in each position.", "sql": "SELECT count(*) ,  POSITION FROM player WHERE points  <  30 GROUP BY POSITION", "example": {"db_id": "sports_competition", "query": "SELECT count(*) ,  POSITION FROM player WHERE points  <  30 GROUP BY POSITION", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "POSITION", "FROM", "player", "WHERE", "points", "<", "30", "GROUP", "BY", "POSITION"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "position", "from", "player", "where", "points", "<", "value", "group", "by", "position"], "question": "find the number of players whose points are lower than 30 in each position.", "question_toks": ["find", "the", "number", "of", "players", "whose", "points", "are", "lower", "than", "30", "in", "each", "position", "."], "guid": 3120}}
{"text": "country: Country_id, Country_name, Capital, Official_native_language; team: Team_id, Name; match_season: Season, Player, Position, Country, Team, Draft_Pick_Number, Draft_Class, College; player: Player_ID, Player, Years_Played, Total_WL, Singles_WL, Doubles_WL, Team | How many distinct official languages are there among countries of players whose positions are defenders.", "sql": "SELECT count(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\"", "example": {"db_id": "match_season", "query": "SELECT count(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\"", "query_toks": ["SELECT", "count", "(", "DISTINCT", "T1.Official_native_language", ")", "FROM", "country", "AS", "T1", "JOIN", "match_season", "AS", "T2", "ON", "T1.Country_id", "=", "T2.Country", "WHERE", "T2.Position", "=", "``", "Defender", "''"], "query_toks_no_value": ["select", "count", "(", "distinct", "t1", ".", "official_native_language", ")", "from", "country", "as", "t1", "join", "match_season", "as", "t2", "on", "t1", ".", "country_id", "=", "t2", ".", "country", "where", "t2", ".", "position", "=", "value"], "question": "How many distinct official languages are there among countries of players whose positions are defenders.", "question_toks": ["How", "many", "distinct", "official", "languages", "are", "there", "among", "countries", "of", "players", "whose", "positions", "are", "defenders", "."], "guid": 3121}}
{"text": "players: player_id, first_name, last_name, hand, birth_date, country_code; matches: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank; rankings: ranking_date, ranking, player_id, ranking_points, tours | Find the total number of tours for each ranking date.", "sql": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date", "example": {"db_id": "wta_1", "query": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date", "query_toks": ["SELECT", "sum", "(", "tours", ")", ",", "ranking_date", "FROM", "rankings", "GROUP", "BY", "ranking_date"], "query_toks_no_value": ["select", "sum", "(", "tours", ")", ",", "ranking_date", "from", "rankings", "group", "by", "ranking_date"], "question": "Find the total number of tours for each ranking date.", "question_toks": ["Find", "the", "total", "number", "of", "tours", "for", "each", "ranking", "date", "."], "guid": 3122}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | What is the average latitude and longitude in San Jose?", "sql": "SELECT avg(lat) ,  avg(long) FROM station WHERE city  =  \"San Jose\"", "example": {"db_id": "bike_1", "query": "SELECT avg(lat) ,  avg(long) FROM station WHERE city  =  \"San Jose\"", "query_toks": ["SELECT", "avg", "(", "lat", ")", ",", "avg", "(", "long", ")", "FROM", "station", "WHERE", "city", "=", "``", "San", "Jose", "''"], "query_toks_no_value": ["select", "avg", "(", "lat", ")", ",", "avg", "(", "long", ")", "from", "station", "where", "city", "=", "value"], "question": "What is the average latitude and longitude in San Jose?", "question_toks": ["What", "is", "the", "average", "latitude", "and", "longitude", "in", "San", "Jose", "?"], "guid": 3123}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | What are the names of all colleges with a larger enrollment than the largest college in Florida?", "sql": "SELECT cName FROM college WHERE enr  >  (SELECT max(enr) FROM college WHERE state  =  'FL')", "example": {"db_id": "soccer_2", "query": "SELECT cName FROM college WHERE enr  >  (SELECT max(enr) FROM college WHERE state  =  'FL')", "query_toks": ["SELECT", "cName", "FROM", "college", "WHERE", "enr", ">", "(", "SELECT", "max", "(", "enr", ")", "FROM", "college", "WHERE", "state", "=", "'FL", "'", ")"], "query_toks_no_value": ["select", "cname", "from", "college", "where", "enr", ">", "(", "select", "max", "(", "enr", ")", "from", "college", "where", "state", "=", "value", ")"], "question": "What are the names of all colleges with a larger enrollment than the largest college in Florida?", "question_toks": ["What", "are", "the", "names", "of", "all", "colleges", "with", "a", "larger", "enrollment", "than", "the", "largest", "college", "in", "Florida", "?"], "guid": 3124}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | What is the mean longitude for all stations that have never had more than 10 bikes available?", "sql": "SELECT avg(long) FROM station WHERE id NOT IN (SELECT station_id FROM status GROUP BY station_id HAVING max(bikes_available)  >  10)", "example": {"db_id": "bike_1", "query": "SELECT avg(long) FROM station WHERE id NOT IN (SELECT station_id FROM status GROUP BY station_id HAVING max(bikes_available)  >  10)", "query_toks": ["SELECT", "avg", "(", "long", ")", "FROM", "station", "WHERE", "id", "NOT", "IN", "(", "SELECT", "station_id", "FROM", "status", "GROUP", "BY", "station_id", "HAVING", "max", "(", "bikes_available", ")", ">", "10", ")"], "query_toks_no_value": ["select", "avg", "(", "long", ")", "from", "station", "where", "id", "not", "in", "(", "select", "station_id", "from", "status", "group", "by", "station_id", "having", "max", "(", "bikes_available", ")", ">", "value", ")"], "question": "What is the mean longitude for all stations that have never had more than 10 bikes available?", "question_toks": ["What", "is", "the", "mean", "longitude", "for", "all", "stations", "that", "have", "never", "had", "more", "than", "10", "bikes", "available", "?"], "guid": 3125}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | What are the unique names of races that held after 2000 and the circuits were in Spain?", "sql": "SELECT DISTINCT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = \"Spain\" AND T1.year > 2000", "example": {"db_id": "formula_1", "query": "SELECT DISTINCT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = \"Spain\" AND T1.year > 2000", "query_toks": ["SELECT", "DISTINCT", "T1.name", "FROM", "races", "AS", "T1", "JOIN", "circuits", "AS", "T2", "ON", "T1.circuitid", "=", "T2.circuitid", "WHERE", "T2.country", "=", "``", "Spain", "''", "AND", "T1.year", ">", "2000"], "query_toks_no_value": ["select", "distinct", "t1", ".", "name", "from", "races", "as", "t1", "join", "circuits", "as", "t2", "on", "t1", ".", "circuitid", "=", "t2", ".", "circuitid", "where", "t2", ".", "country", "=", "value", "and", "t1", ".", "year", ">", "value"], "question": "What are the unique names of races that held after 2000 and the circuits were in Spain?", "question_toks": ["What", "are", "the", "unique", "names", "of", "races", "that", "held", "after", "2000", "and", "the", "circuits", "were", "in", "Spain", "?"], "guid": 3126}}
{"text": "mountain: Mountain_ID, Name, Height, Prominence, Range, Country; climber: Climber_ID, Name, Country, Time, Points, Mountain_ID | What are the names of mountains in ascending alphabetical order?", "sql": "SELECT Name FROM mountain ORDER BY Name ASC", "example": {"db_id": "climbing", "query": "SELECT Name FROM mountain ORDER BY Name ASC", "query_toks": ["SELECT", "Name", "FROM", "mountain", "ORDER", "BY", "Name", "ASC"], "query_toks_no_value": ["select", "name", "from", "mountain", "order", "by", "name", "asc"], "question": "What are the names of mountains in ascending alphabetical order?", "question_toks": ["What", "are", "the", "names", "of", "mountains", "in", "ascending", "alphabetical", "order", "?"], "guid": 3127}}
{"text": "wrestler: Wrestler_ID, Name, Reign, Days_held, Location, Event; Elimination: Elimination_ID, Wrestler_ID, Team, Eliminated_By, Elimination_Move, Time | What are the names of the wrestlers, ordered descending by days held?", "sql": "SELECT Name FROM wrestler ORDER BY Days_held DESC", "example": {"db_id": "wrestler", "query": "SELECT Name FROM wrestler ORDER BY Days_held DESC", "query_toks": ["SELECT", "Name", "FROM", "wrestler", "ORDER", "BY", "Days_held", "DESC"], "query_toks_no_value": ["select", "name", "from", "wrestler", "order", "by", "days_held", "desc"], "question": "What are the names of the wrestlers, ordered descending by days held?", "question_toks": ["What", "are", "the", "names", "of", "the", "wrestlers", ",", "ordered", "descending", "by", "days", "held", "?"], "guid": 3128}}
{"text": "country: Country_id, Country_name, Capital, Official_native_language; team: Team_id, Name; match_season: Season, Player, Position, Country, Team, Draft_Pick_Number, Draft_Class, College; player: Player_ID, Player, Years_Played, Total_WL, Singles_WL, Doubles_WL, Team | What are the three colleges from which the most players are from?", "sql": "SELECT College FROM match_season GROUP BY College ORDER BY count(*) DESC LIMIT 3", "example": {"db_id": "match_season", "query": "SELECT College FROM match_season GROUP BY College ORDER BY count(*) DESC LIMIT 3", "query_toks": ["SELECT", "College", "FROM", "match_season", "GROUP", "BY", "College", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "3"], "query_toks_no_value": ["select", "college", "from", "match_season", "group", "by", "college", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What are the three colleges from which the most players are from?", "question_toks": ["What", "are", "the", "three", "colleges", "from", "which", "the", "most", "players", "are", "from", "?"], "guid": 3129}}
{"text": "mountain: Mountain_ID, Name, Height, Prominence, Range, Country; climber: Climber_ID, Name, Country, Time, Points, Mountain_ID | What are the names of countains that no climber has climbed?", "sql": "SELECT Name FROM mountain WHERE Mountain_ID NOT IN (SELECT Mountain_ID FROM climber)", "example": {"db_id": "climbing", "query": "SELECT Name FROM mountain WHERE Mountain_ID NOT IN (SELECT Mountain_ID FROM climber)", "query_toks": ["SELECT", "Name", "FROM", "mountain", "WHERE", "Mountain_ID", "NOT", "IN", "(", "SELECT", "Mountain_ID", "FROM", "climber", ")"], "query_toks_no_value": ["select", "name", "from", "mountain", "where", "mountain_id", "not", "in", "(", "select", "mountain_id", "from", "climber", ")"], "question": "What are the names of countains that no climber has climbed?", "question_toks": ["What", "are", "the", "names", "of", "countains", "that", "no", "climber", "has", "climbed", "?"], "guid": 3130}}
{"text": "race: Race_ID, Name, Class, Date, Track_ID; track: Track_ID, Name, Location, Seating, Year_Opened | Show the name of track and the number of races in each track.", "sql": "SELECT T2.name ,  count(*) FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id", "example": {"db_id": "race_track", "query": "SELECT T2.name ,  count(*) FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id", "query_toks": ["SELECT", "T2.name", ",", "count", "(", "*", ")", "FROM", "race", "AS", "T1", "JOIN", "track", "AS", "T2", "ON", "T1.track_id", "=", "T2.track_id", "GROUP", "BY", "T1.track_id"], "query_toks_no_value": ["select", "t2", ".", "name", ",", "count", "(", "*", ")", "from", "race", "as", "t1", "join", "track", "as", "t2", "on", "t1", ".", "track_id", "=", "t2", ".", "track_id", "group", "by", "t1", ".", "track_id"], "question": "Show the name of track and the number of races in each track.", "question_toks": ["Show", "the", "name", "of", "track", "and", "the", "number", "of", "races", "in", "each", "track", "."], "guid": 3131}}
{"text": "wrestler: Wrestler_ID, Name, Reign, Days_held, Location, Event; Elimination: Elimination_ID, Wrestler_ID, Team, Eliminated_By, Elimination_Move, Time | What are the names of wrestlers and the elimination moves?", "sql": "SELECT T2.Name ,  T1.Elimination_Move FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID", "example": {"db_id": "wrestler", "query": "SELECT T2.Name ,  T1.Elimination_Move FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID", "query_toks": ["SELECT", "T2.Name", ",", "T1.Elimination_Move", "FROM", "elimination", "AS", "T1", "JOIN", "wrestler", "AS", "T2", "ON", "T1.Wrestler_ID", "=", "T2.Wrestler_ID"], "query_toks_no_value": ["select", "t2", ".", "name", ",", "t1", ".", "elimination_move", "from", "elimination", "as", "t1", "join", "wrestler", "as", "t2", "on", "t1", ".", "wrestler_id", "=", "t2", ".", "wrestler_id"], "question": "What are the names of wrestlers and the elimination moves?", "question_toks": ["What", "are", "the", "names", "of", "wrestlers", "and", "the", "elimination", "moves", "?"], "guid": 3132}}
{"text": "wrestler: Wrestler_ID, Name, Reign, Days_held, Location, Event; Elimination: Elimination_ID, Wrestler_ID, Team, Eliminated_By, Elimination_Move, Time | What is the number of distinct teams that suffer elimination?", "sql": "SELECT COUNT (DISTINCT team) FROM elimination", "example": {"db_id": "wrestler", "query": "SELECT COUNT (DISTINCT team) FROM elimination", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "team", ")", "FROM", "elimination"], "query_toks_no_value": ["select", "count", "(", "distinct", "team", ")", "from", "elimination"], "question": "What is the number of distinct teams that suffer elimination?", "question_toks": ["What", "is", "the", "number", "of", "distinct", "teams", "that", "suffer", "elimination", "?"], "guid": 3133}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | Find the name of all the clubs at \"AKW\".", "sql": "SELECT clubname FROM club WHERE clublocation  =  \"AKW\"", "example": {"db_id": "club_1", "query": "SELECT clubname FROM club WHERE clublocation  =  \"AKW\"", "query_toks": ["SELECT", "clubname", "FROM", "club", "WHERE", "clublocation", "=", "``", "AKW", "''"], "query_toks_no_value": ["select", "clubname", "from", "club", "where", "clublocation", "=", "value"], "question": "Find the name of all the clubs at \"AKW\".", "question_toks": ["Find", "the", "name", "of", "all", "the", "clubs", "at", "``", "AKW", "''", "."], "guid": 3134}}
{"text": "club: Club_ID, name, Region, Start_year; club_rank: Rank, Club_ID, Gold, Silver, Bronze, Total; player: Player_ID, name, Position, Club_ID, Apps, Tries, Goals, Points; competition: Competition_ID, Year, Competition_type, Country; competition_result: Competition_ID, Club_ID_1, Club_ID_2, Score | What is the number of players who have points less than 30 for each position?", "sql": "SELECT count(*) ,  POSITION FROM player WHERE points  <  30 GROUP BY POSITION", "example": {"db_id": "sports_competition", "query": "SELECT count(*) ,  POSITION FROM player WHERE points  <  30 GROUP BY POSITION", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "POSITION", "FROM", "player", "WHERE", "points", "<", "30", "GROUP", "BY", "POSITION"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "position", "from", "player", "where", "points", "<", "value", "group", "by", "position"], "question": "What is the number of players who have points less than 30 for each position?", "question_toks": ["What", "is", "the", "number", "of", "players", "who", "have", "points", "less", "than", "30", "for", "each", "position", "?"], "guid": 3135}}
{"text": "mountain: Mountain_ID, Name, Height, Prominence, Range, Country; climber: Climber_ID, Name, Country, Time, Points, Mountain_ID | List the distinct ranges of the mountains with the top 3 prominence.", "sql": "SELECT DISTINCT Range FROM mountain ORDER BY Prominence DESC LIMIT 3", "example": {"db_id": "climbing", "query": "SELECT DISTINCT Range FROM mountain ORDER BY Prominence DESC LIMIT 3", "query_toks": ["SELECT", "DISTINCT", "Range", "FROM", "mountain", "ORDER", "BY", "Prominence", "DESC", "LIMIT", "3"], "query_toks_no_value": ["select", "distinct", "range", "from", "mountain", "order", "by", "prominence", "desc", "limit", "value"], "question": "List the distinct ranges of the mountains with the top 3 prominence.", "question_toks": ["List", "the", "distinct", "ranges", "of", "the", "mountains", "with", "the", "top", "3", "prominence", "."], "guid": 3136}}
{"text": "race: Race_ID, Name, Class, Date, Track_ID; track: Track_ID, Name, Location, Seating, Year_Opened | Return the different classes of races.", "sql": "SELECT DISTINCT CLASS FROM race", "example": {"db_id": "race_track", "query": "SELECT DISTINCT CLASS FROM race", "query_toks": ["SELECT", "DISTINCT", "CLASS", "FROM", "race"], "query_toks_no_value": ["select", "distinct", "class", "from", "race"], "question": "Return the different classes of races.", "question_toks": ["Return", "the", "different", "classes", "of", "races", "."], "guid": 3137}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | Find the states where have some college students in tryout.", "sql": "SELECT DISTINCT state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName", "example": {"db_id": "soccer_2", "query": "SELECT DISTINCT state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName", "query_toks": ["SELECT", "DISTINCT", "state", "FROM", "college", "AS", "T1", "JOIN", "tryout", "AS", "T2", "ON", "T1.cName", "=", "T2.cName"], "query_toks_no_value": ["select", "distinct", "state", "from", "college", "as", "t1", "join", "tryout", "as", "t2", "on", "t1", ".", "cname", "=", "t2", ".", "cname"], "question": "Find the states where have some college students in tryout.", "question_toks": ["Find", "the", "states", "where", "have", "some", "college", "students", "in", "tryout", "."], "guid": 3138}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | What are the names of all schools that have students trying out for the position of goal and 'mid'-field.", "sql": "SELECT cName FROM  tryout WHERE pPos  =  'goalie' INTERSECT SELECT cName FROM  tryout WHERE pPos  =  'mid'", "example": {"db_id": "soccer_2", "query": "SELECT cName FROM  tryout WHERE pPos  =  'goalie' INTERSECT SELECT cName FROM  tryout WHERE pPos  =  'mid'", "query_toks": ["SELECT", "cName", "FROM", "tryout", "WHERE", "pPos", "=", "'goalie", "'", "INTERSECT", "SELECT", "cName", "FROM", "tryout", "WHERE", "pPos", "=", "'mid", "'"], "query_toks_no_value": ["select", "cname", "from", "tryout", "where", "ppos", "=", "value", "intersect", "select", "cname", "from", "tryout", "where", "ppos", "=", "value"], "question": "What are the names of all schools that have students trying out for the position of goal and 'mid'-field.", "question_toks": ["What", "are", "the", "names", "of", "all", "schools", "that", "have", "students", "trying", "out", "for", "the", "position", "of", "goal", "and", "'mid'-field", "."], "guid": 3139}}
{"text": "gymnast: Gymnast_ID, Floor_Exercise_Points, Pommel_Horse_Points, Rings_Points, Vault_Points, Parallel_Bars_Points, Horizontal_Bar_Points, Total_Points; people: People_ID, Name, Age, Height, Hometown | Return the total points of the gymnast with the lowest age.", "sql": "SELECT T1.Total_Points FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T2.Age ASC LIMIT 1", "example": {"db_id": "gymnast", "query": "SELECT T1.Total_Points FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T2.Age ASC LIMIT 1", "query_toks": ["SELECT", "T1.Total_Points", "FROM", "gymnast", "AS", "T1", "JOIN", "people", "AS", "T2", "ON", "T1.Gymnast_ID", "=", "T2.People_ID", "ORDER", "BY", "T2.Age", "ASC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "total_points", "from", "gymnast", "as", "t1", "join", "people", "as", "t2", "on", "t1", ".", "gymnast_id", "=", "t2", ".", "people_id", "order", "by", "t2", ".", "age", "asc", "limit", "value"], "question": "Return the total points of the gymnast with the lowest age.", "question_toks": ["Return", "the", "total", "points", "of", "the", "gymnast", "with", "the", "lowest", "age", "."], "guid": 3140}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | What are the names of colleges in LA that have more than 15,000 students and of colleges in AZ with less than 13,000 students?", "sql": "SELECT cName FROM College WHERE enr  <  13000 AND state = \"AZ\" UNION SELECT cName FROM College WHERE enr  >  15000 AND state = \"LA\"", "example": {"db_id": "soccer_2", "query": "SELECT cName FROM College WHERE enr  <  13000 AND state = \"AZ\" UNION SELECT cName FROM College WHERE enr  >  15000 AND state = \"LA\"", "query_toks": ["SELECT", "cName", "FROM", "College", "WHERE", "enr", "<", "13000", "AND", "state", "=", "``", "AZ", "''", "UNION", "SELECT", "cName", "FROM", "College", "WHERE", "enr", ">", "15000", "AND", "state", "=", "``", "LA", "''"], "query_toks_no_value": ["select", "cname", "from", "college", "where", "enr", "<", "value", "and", "state", "=", "value", "union", "select", "cname", "from", "college", "where", "enr", ">", "value", "and", "state", "=", "value"], "question": "What are the names of colleges in LA that have more than 15,000 students and of colleges in AZ with less than 13,000 students?", "question_toks": ["What", "are", "the", "names", "of", "colleges", "in", "LA", "that", "have", "more", "than", "15,000", "students", "and", "of", "colleges", "in", "AZ", "with", "less", "than", "13,000", "students", "?"], "guid": 3141}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | How many different colleges do attend the tryout test?", "sql": "SELECT count(DISTINCT cName) FROM tryout", "example": {"db_id": "soccer_2", "query": "SELECT count(DISTINCT cName) FROM tryout", "query_toks": ["SELECT", "count", "(", "DISTINCT", "cName", ")", "FROM", "tryout"], "query_toks_no_value": ["select", "count", "(", "distinct", "cname", ")", "from", "tryout"], "question": "How many different colleges do attend the tryout test?", "question_toks": ["How", "many", "different", "colleges", "do", "attend", "the", "tryout", "test", "?"], "guid": 3142}}
{"text": "country: Country_id, Country_name, Capital, Official_native_language; team: Team_id, Name; match_season: Season, Player, Position, Country, Team, Draft_Pick_Number, Draft_Class, College; player: Player_ID, Player, Years_Played, Total_WL, Singles_WL, Doubles_WL, Team | Show the players and the years played.", "sql": "SELECT Player ,  Years_Played FROM player", "example": {"db_id": "match_season", "query": "SELECT Player ,  Years_Played FROM player", "query_toks": ["SELECT", "Player", ",", "Years_Played", "FROM", "player"], "query_toks_no_value": ["select", "player", ",", "years_played", "from", "player"], "question": "Show the players and the years played.", "question_toks": ["Show", "the", "players", "and", "the", "years", "played", "."], "guid": 3143}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | What are the zip codes that have an average mean humidity below 70 and had at least 100 trips come through there?", "sql": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_humidity)  <  70 INTERSECT SELECT zip_code FROM trip GROUP BY zip_code HAVING count(*)  >=  100", "example": {"db_id": "bike_1", "query": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_humidity)  <  70 INTERSECT SELECT zip_code FROM trip GROUP BY zip_code HAVING count(*)  >=  100", "query_toks": ["SELECT", "zip_code", "FROM", "weather", "GROUP", "BY", "zip_code", "HAVING", "avg", "(", "mean_humidity", ")", "<", "70", "INTERSECT", "SELECT", "zip_code", "FROM", "trip", "GROUP", "BY", "zip_code", "HAVING", "count", "(", "*", ")", ">", "=", "100"], "query_toks_no_value": ["select", "zip_code", "from", "weather", "group", "by", "zip_code", "having", "avg", "(", "mean_humidity", ")", "<", "value", "intersect", "select", "zip_code", "from", "trip", "group", "by", "zip_code", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "What are the zip codes that have an average mean humidity below 70 and had at least 100 trips come through there?", "question_toks": ["What", "are", "the", "zip", "codes", "that", "have", "an", "average", "mean", "humidity", "below", "70", "and", "had", "at", "least", "100", "trips", "come", "through", "there", "?"], "guid": 3144}}
{"text": "gymnast: Gymnast_ID, Floor_Exercise_Points, Pommel_Horse_Points, Rings_Points, Vault_Points, Parallel_Bars_Points, Horizontal_Bar_Points, Total_Points; people: People_ID, Name, Age, Height, Hometown | How many gymnasts are there?", "sql": "SELECT count(*) FROM gymnast", "example": {"db_id": "gymnast", "query": "SELECT count(*) FROM gymnast", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "gymnast"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "gymnast"], "question": "How many gymnasts are there?", "question_toks": ["How", "many", "gymnasts", "are", "there", "?"], "guid": 3145}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | What is the latitude, longitude, and city of the station from which the trip with smallest duration started?", "sql": "SELECT T1.lat ,  T1.long ,  T1.city FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id ORDER BY T2.duration LIMIT 1", "example": {"db_id": "bike_1", "query": "SELECT T1.lat ,  T1.long ,  T1.city FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id ORDER BY T2.duration LIMIT 1", "query_toks": ["SELECT", "T1.lat", ",", "T1.long", ",", "T1.city", "FROM", "station", "AS", "T1", "JOIN", "trip", "AS", "T2", "ON", "T1.id", "=", "T2.start_station_id", "ORDER", "BY", "T2.duration", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "lat", ",", "t1", ".", "long", ",", "t1", ".", "city", "from", "station", "as", "t1", "join", "trip", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "start_station_id", "order", "by", "t2", ".", "duration", "limit", "value"], "question": "What is the latitude, longitude, and city of the station from which the trip with smallest duration started?", "question_toks": ["What", "is", "the", "latitude", ",", "longitude", ",", "and", "city", "of", "the", "station", "from", "which", "the", "trip", "with", "smallest", "duration", "started", "?"], "guid": 3146}}
{"text": "race: Race_ID, Name, Class, Date, Track_ID; track: Track_ID, Name, Location, Seating, Year_Opened | What are distinct locations where tracks are located?", "sql": "SELECT DISTINCT LOCATION FROM track", "example": {"db_id": "race_track", "query": "SELECT DISTINCT LOCATION FROM track", "query_toks": ["SELECT", "DISTINCT", "LOCATION", "FROM", "track"], "query_toks_no_value": ["select", "distinct", "location", "from", "track"], "question": "What are distinct locations where tracks are located?", "question_toks": ["What", "are", "distinct", "locations", "where", "tracks", "are", "located", "?"], "guid": 3147}}
{"text": "country: Country_id, Country_name, Capital, Official_native_language; team: Team_id, Name; match_season: Season, Player, Position, Country, Team, Draft_Pick_Number, Draft_Class, College; player: Player_ID, Player, Years_Played, Total_WL, Singles_WL, Doubles_WL, Team | Count the number of countries.", "sql": "SELECT count(*) FROM country", "example": {"db_id": "match_season", "query": "SELECT count(*) FROM country", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "country"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "country"], "question": "Count the number of countries.", "question_toks": ["Count", "the", "number", "of", "countries", "."], "guid": 3148}}
{"text": "college: College_ID, Name, Leader_Name, College_Location; member: Member_ID, Name, Country, College_ID; round: Round_ID, Member_ID, Decoration_Theme, Rank_in_Round | Show the names of members and names of colleges they go to.", "sql": "SELECT T2.Name ,  T1.Name FROM college AS T1 JOIN member AS T2 ON T1.College_ID  =  T2.College_ID", "example": {"db_id": "decoration_competition", "query": "SELECT T2.Name ,  T1.Name FROM college AS T1 JOIN member AS T2 ON T1.College_ID  =  T2.College_ID", "query_toks": ["SELECT", "T2.Name", ",", "T1.Name", "FROM", "college", "AS", "T1", "JOIN", "member", "AS", "T2", "ON", "T1.College_ID", "=", "T2.College_ID"], "query_toks_no_value": ["select", "t2", ".", "name", ",", "t1", ".", "name", "from", "college", "as", "t1", "join", "member", "as", "t2", "on", "t1", ".", "college_id", "=", "t2", ".", "college_id"], "question": "Show the names of members and names of colleges they go to.", "question_toks": ["Show", "the", "names", "of", "members", "and", "names", "of", "colleges", "they", "go", "to", "."], "guid": 3149}}
{"text": "body_builder: Body_Builder_ID, People_ID, Snatch, Clean_Jerk, Total; people: People_ID, Name, Height, Weight, Birth_Date, Birth_Place | List the height and weight of people in descending order of height.", "sql": "SELECT Height ,  Weight FROM people ORDER BY Height DESC", "example": {"db_id": "body_builder", "query": "SELECT Height ,  Weight FROM people ORDER BY Height DESC", "query_toks": ["SELECT", "Height", ",", "Weight", "FROM", "people", "ORDER", "BY", "Height", "DESC"], "query_toks_no_value": ["select", "height", ",", "weight", "from", "people", "order", "by", "height", "desc"], "question": "List the height and weight of people in descending order of height.", "question_toks": ["List", "the", "height", "and", "weight", "of", "people", "in", "descending", "order", "of", "height", "."], "guid": 3150}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | What are the ids and names of all start stations that were the beginning of at least 200 trips?", "sql": "SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  200", "example": {"db_id": "bike_1", "query": "SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  200", "query_toks": ["SELECT", "start_station_id", ",", "start_station_name", "FROM", "trip", "GROUP", "BY", "start_station_name", "HAVING", "COUNT", "(", "*", ")", ">", "=", "200"], "query_toks_no_value": ["select", "start_station_id", ",", "start_station_name", "from", "trip", "group", "by", "start_station_name", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "What are the ids and names of all start stations that were the beginning of at least 200 trips?", "question_toks": ["What", "are", "the", "ids", "and", "names", "of", "all", "start", "stations", "that", "were", "the", "beginning", "of", "at", "least", "200", "trips", "?"], "guid": 3151}}
{"text": "club: Club_ID, name, Region, Start_year; club_rank: Rank, Club_ID, Gold, Silver, Bronze, Total; player: Player_ID, name, Position, Club_ID, Apps, Tries, Goals, Points; competition: Competition_ID, Year, Competition_type, Country; competition_result: Competition_ID, Club_ID_1, Club_ID_2, Score | What are the names of all players that got more than the average number of points?", "sql": "SELECT name FROM player WHERE points  >  (SELECT avg(points) FROM player)", "example": {"db_id": "sports_competition", "query": "SELECT name FROM player WHERE points  >  (SELECT avg(points) FROM player)", "query_toks": ["SELECT", "name", "FROM", "player", "WHERE", "points", ">", "(", "SELECT", "avg", "(", "points", ")", "FROM", "player", ")"], "query_toks_no_value": ["select", "name", "from", "player", "where", "points", ">", "(", "select", "avg", "(", "points", ")", "from", "player", ")"], "question": "What are the names of all players that got more than the average number of points?", "question_toks": ["What", "are", "the", "names", "of", "all", "players", "that", "got", "more", "than", "the", "average", "number", "of", "points", "?"], "guid": 3152}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | What is the name of every college in alphabetical order that has more than 18000 students enrolled?", "sql": "SELECT cName FROM College WHERE enr  >  18000 ORDER BY cName", "example": {"db_id": "soccer_2", "query": "SELECT cName FROM College WHERE enr  >  18000 ORDER BY cName", "query_toks": ["SELECT", "cName", "FROM", "College", "WHERE", "enr", ">", "18000", "ORDER", "BY", "cName"], "query_toks_no_value": ["select", "cname", "from", "college", "where", "enr", ">", "value", "order", "by", "cname"], "question": "What is the name of every college in alphabetical order that has more than 18000 students enrolled?", "question_toks": ["What", "is", "the", "name", "of", "every", "college", "in", "alphabetical", "order", "that", "has", "more", "than", "18000", "students", "enrolled", "?"], "guid": 3153}}
{"text": "poker_player: Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings; people: People_ID, Nationality, Name, Birth_Date, Height | Show names of people whose nationality is not \"Russia\".", "sql": "SELECT Name FROM people WHERE Nationality != \"Russia\"", "example": {"db_id": "poker_player", "query": "SELECT Name FROM people WHERE Nationality != \"Russia\"", "query_toks": ["SELECT", "Name", "FROM", "people", "WHERE", "Nationality", "!", "=", "``", "Russia", "''"], "query_toks_no_value": ["select", "name", "from", "people", "where", "nationality", "!", "=", "value"], "question": "Show names of people whose nationality is not \"Russia\".", "question_toks": ["Show", "names", "of", "people", "whose", "nationality", "is", "not", "``", "Russia", "''", "."], "guid": 3154}}
{"text": "player: Player_ID, Sponsor_name, Player_name, Gender, Residence, Occupation, Votes, Rank; club: Club_ID, Club_name, Region, Start_year; coach: Coach_ID, Coach_name, Gender, Club_ID, Rank; player_coach: Player_ID, Coach_ID, Starting_year; match_result: Rank, Club_ID, Gold, Big_Silver, Small_Silver, Bronze, Points | List the name and residence for players whose occupation is not \"Researcher\".", "sql": "SELECT Player_name ,  residence FROM player WHERE Occupation != \"Researcher\"", "example": {"db_id": "riding_club", "query": "SELECT Player_name ,  residence FROM player WHERE Occupation != \"Researcher\"", "query_toks": ["SELECT", "Player_name", ",", "residence", "FROM", "player", "WHERE", "Occupation", "!", "=", "``", "Researcher", "''"], "query_toks_no_value": ["select", "player_name", ",", "residence", "from", "player", "where", "occupation", "!", "=", "value"], "question": "List the name and residence for players whose occupation is not \"Researcher\".", "question_toks": ["List", "the", "name", "and", "residence", "for", "players", "whose", "occupation", "is", "not", "``", "Researcher", "''", "."], "guid": 3155}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | Find the states where have the colleges whose enrollments are less than the largest size.", "sql": "SELECT DISTINCT state FROM college WHERE enr  <  (SELECT max(enr) FROM college)", "example": {"db_id": "soccer_2", "query": "SELECT DISTINCT state FROM college WHERE enr  <  (SELECT max(enr) FROM college)", "query_toks": ["SELECT", "DISTINCT", "state", "FROM", "college", "WHERE", "enr", "<", "(", "SELECT", "max", "(", "enr", ")", "FROM", "college", ")"], "query_toks_no_value": ["select", "distinct", "state", "from", "college", "where", "enr", "<", "(", "select", "max", "(", "enr", ")", "from", "college", ")"], "question": "Find the states where have the colleges whose enrollments are less than the largest size.", "question_toks": ["Find", "the", "states", "where", "have", "the", "colleges", "whose", "enrollments", "are", "less", "than", "the", "largest", "size", "."], "guid": 3156}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | How many stations does Mountain View city has?", "sql": "SELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"", "example": {"db_id": "bike_1", "query": "SELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"", "query_toks": ["SELECT", "COUNT", "(", "*", ")", "FROM", "station", "WHERE", "city", "=", "``", "Mountain", "View", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "station", "where", "city", "=", "value"], "question": "How many stations does Mountain View city has?", "question_toks": ["How", "many", "stations", "does", "Mountain", "View", "city", "has", "?"], "guid": 3157}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | Find the states where have some college students in tryout and their decisions are yes.", "sql": "SELECT DISTINCT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.decision  =  'yes'", "example": {"db_id": "soccer_2", "query": "SELECT DISTINCT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.decision  =  'yes'", "query_toks": ["SELECT", "DISTINCT", "T1.state", "FROM", "college", "AS", "T1", "JOIN", "tryout", "AS", "T2", "ON", "T1.cName", "=", "T2.cName", "WHERE", "T2.decision", "=", "'yes", "'"], "query_toks_no_value": ["select", "distinct", "t1", ".", "state", "from", "college", "as", "t1", "join", "tryout", "as", "t2", "on", "t1", ".", "cname", "=", "t2", ".", "cname", "where", "t2", ".", "decision", "=", "value"], "question": "Find the states where have some college students in tryout and their decisions are yes.", "question_toks": ["Find", "the", "states", "where", "have", "some", "college", "students", "in", "tryout", "and", "their", "decisions", "are", "yes", "."], "guid": 3158}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | How many different colleges are there?", "sql": "SELECT count(*) FROM College", "example": {"db_id": "soccer_2", "query": "SELECT count(*) FROM College", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "College"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "college"], "question": "How many different colleges are there?", "question_toks": ["How", "many", "different", "colleges", "are", "there", "?"], "guid": 3159}}
{"text": "club: Club_ID, name, Region, Start_year; club_rank: Rank, Club_ID, Gold, Silver, Bronze, Total; player: Player_ID, name, Position, Club_ID, Apps, Tries, Goals, Points; competition: Competition_ID, Year, Competition_type, Country; competition_result: Competition_ID, Club_ID_1, Club_ID_2, Score | What are the positions with both players having more than 20 points and less than 10 points.", "sql": "SELECT POSITION FROM player WHERE Points  >  20 INTERSECT SELECT POSITION FROM player WHERE Points  <  10", "example": {"db_id": "sports_competition", "query": "SELECT POSITION FROM player WHERE Points  >  20 INTERSECT SELECT POSITION FROM player WHERE Points  <  10", "query_toks": ["SELECT", "POSITION", "FROM", "player", "WHERE", "Points", ">", "20", "INTERSECT", "SELECT", "POSITION", "FROM", "player", "WHERE", "Points", "<", "10"], "query_toks_no_value": ["select", "position", "from", "player", "where", "points", ">", "value", "intersect", "select", "position", "from", "player", "where", "points", "<", "value"], "question": "What are the positions with both players having more than 20 points and less than 10 points.", "question_toks": ["What", "are", "the", "positions", "with", "both", "players", "having", "more", "than", "20", "points", "and", "less", "than", "10", "points", "."], "guid": 3160}}
{"text": "club: Club_ID, name, Region, Start_year; club_rank: Rank, Club_ID, Gold, Silver, Bronze, Total; player: Player_ID, name, Position, Club_ID, Apps, Tries, Goals, Points; competition: Competition_ID, Year, Competition_type, Country; competition_result: Competition_ID, Club_ID_1, Club_ID_2, Score | how many different positions are there?", "sql": "SELECT count(DISTINCT POSITION) FROM player", "example": {"db_id": "sports_competition", "query": "SELECT count(DISTINCT POSITION) FROM player", "query_toks": ["SELECT", "count", "(", "DISTINCT", "POSITION", ")", "FROM", "player"], "query_toks_no_value": ["select", "count", "(", "distinct", "position", ")", "from", "player"], "question": "how many different positions are there?", "question_toks": ["how", "many", "different", "positions", "are", "there", "?"], "guid": 3161}}
{"text": "poker_player: Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings; people: People_ID, Nationality, Name, Birth_Date, Height | Return the maximum final tables made across all poker players who have earnings below 200000.", "sql": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000", "example": {"db_id": "poker_player", "query": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000", "query_toks": ["SELECT", "max", "(", "Final_Table_Made", ")", "FROM", "poker_player", "WHERE", "Earnings", "<", "200000"], "query_toks_no_value": ["select", "max", "(", "final_table_made", ")", "from", "poker_player", "where", "earnings", "<", "value"], "question": "Return the maximum final tables made across all poker players who have earnings below 200000.", "question_toks": ["Return", "the", "maximum", "final", "tables", "made", "across", "all", "poker", "players", "who", "have", "earnings", "below", "200000", "."], "guid": 3162}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | Which position is most popular among players in the tryout?", "sql": "SELECT pPos FROM tryout GROUP BY pPos ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "soccer_2", "query": "SELECT pPos FROM tryout GROUP BY pPos ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "pPos", "FROM", "tryout", "GROUP", "BY", "pPos", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "ppos", "from", "tryout", "group", "by", "ppos", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which position is most popular among players in the tryout?", "question_toks": ["Which", "position", "is", "most", "popular", "among", "players", "in", "the", "tryout", "?"], "guid": 3163}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | Find the name of the tryout players who are from the college with largest size.", "sql": "SELECT T2.pName FROM  tryout AS T1 JOIN player AS T2 ON T1.pID  =  T2.pID WHERE T1.cName  =  (SELECT cName FROM college ORDER BY enr DESC LIMIT 1)", "example": {"db_id": "soccer_2", "query": "SELECT T2.pName FROM  tryout AS T1 JOIN player AS T2 ON T1.pID  =  T2.pID WHERE T1.cName  =  (SELECT cName FROM college ORDER BY enr DESC LIMIT 1)", "query_toks": ["SELECT", "T2.pName", "FROM", "tryout", "AS", "T1", "JOIN", "player", "AS", "T2", "ON", "T1.pID", "=", "T2.pID", "WHERE", "T1.cName", "=", "(", "SELECT", "cName", "FROM", "college", "ORDER", "BY", "enr", "DESC", "LIMIT", "1", ")"], "query_toks_no_value": ["select", "t2", ".", "pname", "from", "tryout", "as", "t1", "join", "player", "as", "t2", "on", "t1", ".", "pid", "=", "t2", ".", "pid", "where", "t1", ".", "cname", "=", "(", "select", "cname", "from", "college", "order", "by", "enr", "desc", "limit", "value", ")"], "question": "Find the name of the tryout players who are from the college with largest size.", "question_toks": ["Find", "the", "name", "of", "the", "tryout", "players", "who", "are", "from", "the", "college", "with", "largest", "size", "."], "guid": 3164}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | Who are the members of the club named \"Bootup Baltimore\"? Give me their last names.", "sql": "SELECT t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\"", "example": {"db_id": "club_1", "query": "SELECT t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\"", "query_toks": ["SELECT", "t3.lname", "FROM", "club", "AS", "t1", "JOIN", "member_of_club", "AS", "t2", "ON", "t1.clubid", "=", "t2.clubid", "JOIN", "student", "AS", "t3", "ON", "t2.stuid", "=", "t3.stuid", "WHERE", "t1.clubname", "=", "``", "Bootup", "Baltimore", "''"], "query_toks_no_value": ["select", "t3", ".", "lname", "from", "club", "as", "t1", "join", "member_of_club", "as", "t2", "on", "t1", ".", "clubid", "=", "t2", ".", "clubid", "join", "student", "as", "t3", "on", "t2", ".", "stuid", "=", "t3", ".", "stuid", "where", "t1", ".", "clubname", "=", "value"], "question": "Who are the members of the club named \"Bootup Baltimore\"? Give me their last names.", "question_toks": ["Who", "are", "the", "members", "of", "the", "club", "named", "``", "Bootup", "Baltimore", "''", "?", "Give", "me", "their", "last", "names", "."], "guid": 3165}}
{"text": "basketball_match: Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home; university: School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference | Find the number of universities that have over a 20000 enrollment size for each affiliation type.", "sql": "SELECT count(*) ,  affiliation FROM university WHERE enrollment  >  20000 GROUP BY affiliation", "example": {"db_id": "university_basketball", "query": "SELECT count(*) ,  affiliation FROM university WHERE enrollment  >  20000 GROUP BY affiliation", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "affiliation", "FROM", "university", "WHERE", "enrollment", ">", "20000", "GROUP", "BY", "affiliation"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "affiliation", "from", "university", "where", "enrollment", ">", "value", "group", "by", "affiliation"], "question": "Find the number of universities that have over a 20000 enrollment size for each affiliation type.", "question_toks": ["Find", "the", "number", "of", "universities", "that", "have", "over", "a", "20000", "enrollment", "size", "for", "each", "affiliation", "type", "."], "guid": 3166}}
{"text": "players: player_id, first_name, last_name, hand, birth_date, country_code; matches: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank; rankings: ranking_date, ranking, player_id, ranking_points, tours | List the number of all matches who played in years of 2013 or 2016.", "sql": "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016", "example": {"db_id": "wta_1", "query": "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "matches", "WHERE", "YEAR", "=", "2013", "OR", "YEAR", "=", "2016"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "matches", "where", "year", "=", "value", "or", "year", "=", "value"], "question": "List the number of all matches who played in years of 2013 or 2016.", "question_toks": ["List", "the", "number", "of", "all", "matches", "who", "played", "in", "years", "of", "2013", "or", "2016", "."], "guid": 3167}}
{"text": "swimmer: ID, name, Nationality, meter_100, meter_200, meter_300, meter_400, meter_500, meter_600, meter_700; stadium: ID, name, Capacity, City, Country, Opening_year; event: ID, Name, Stadium_ID, Year; record: ID, Result, Swimmer_ID, Event_ID | How many events are there?", "sql": "SELECT count(*) FROM event", "example": {"db_id": "swimming", "query": "SELECT count(*) FROM event", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "event"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "event"], "question": "How many events are there?", "question_toks": ["How", "many", "events", "are", "there", "?"], "guid": 3168}}
{"text": "player: Player_ID, Sponsor_name, Player_name, Gender, Residence, Occupation, Votes, Rank; club: Club_ID, Club_name, Region, Start_year; coach: Coach_ID, Coach_name, Gender, Club_ID, Rank; player_coach: Player_ID, Coach_ID, Starting_year; match_result: Rank, Club_ID, Gold, Big_Silver, Small_Silver, Bronze, Points | List the names of players in ascending order of votes.", "sql": "SELECT Player_name FROM player ORDER BY Votes ASC", "example": {"db_id": "riding_club", "query": "SELECT Player_name FROM player ORDER BY Votes ASC", "query_toks": ["SELECT", "Player_name", "FROM", "player", "ORDER", "BY", "Votes", "ASC"], "query_toks_no_value": ["select", "player_name", "from", "player", "order", "by", "votes", "asc"], "question": "List the names of players in ascending order of votes.", "question_toks": ["List", "the", "names", "of", "players", "in", "ascending", "order", "of", "votes", "."], "guid": 3169}}
{"text": "gymnast: Gymnast_ID, Floor_Exercise_Points, Pommel_Horse_Points, Rings_Points, Vault_Points, Parallel_Bars_Points, Horizontal_Bar_Points, Total_Points; people: People_ID, Name, Age, Height, Hometown | What are the names of gymnasts whose hometown is not \"Santo Domingo\"?", "sql": "SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID WHERE T2.Hometown != \"Santo Domingo\"", "example": {"db_id": "gymnast", "query": "SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID WHERE T2.Hometown != \"Santo Domingo\"", "query_toks": ["SELECT", "T2.Name", "FROM", "gymnast", "AS", "T1", "JOIN", "people", "AS", "T2", "ON", "T1.Gymnast_ID", "=", "T2.People_ID", "WHERE", "T2.Hometown", "!", "=", "``", "Santo", "Domingo", "''"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "gymnast", "as", "t1", "join", "people", "as", "t2", "on", "t1", ".", "gymnast_id", "=", "t2", ".", "people_id", "where", "t2", ".", "hometown", "!", "=", "value"], "question": "What are the names of gymnasts whose hometown is not \"Santo Domingo\"?", "question_toks": ["What", "are", "the", "names", "of", "gymnasts", "whose", "hometown", "is", "not", "``", "Santo", "Domingo", "''", "?"], "guid": 3170}}
{"text": "body_builder: Body_Builder_ID, People_ID, Snatch, Clean_Jerk, Total; people: People_ID, Name, Height, Weight, Birth_Date, Birth_Place | What are the names of body builders in descending order of total scores?", "sql": "SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Total DESC", "example": {"db_id": "body_builder", "query": "SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Total DESC", "query_toks": ["SELECT", "T2.Name", "FROM", "body_builder", "AS", "T1", "JOIN", "people", "AS", "T2", "ON", "T1.People_ID", "=", "T2.People_ID", "ORDER", "BY", "T1.Total", "DESC"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "body_builder", "as", "t1", "join", "people", "as", "t2", "on", "t1", ".", "people_id", "=", "t2", ".", "people_id", "order", "by", "t1", ".", "total", "desc"], "question": "What are the names of body builders in descending order of total scores?", "question_toks": ["What", "are", "the", "names", "of", "body", "builders", "in", "descending", "order", "of", "total", "scores", "?"], "guid": 3171}}
{"text": "players: player_id, first_name, last_name, hand, birth_date, country_code; matches: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank; rankings: ranking_date, ranking, player_id, ranking_points, tours | What are the first names and birth dates of players from the USA?", "sql": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'", "example": {"db_id": "wta_1", "query": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'", "query_toks": ["SELECT", "first_name", ",", "birth_date", "FROM", "players", "WHERE", "country_code", "=", "'USA", "'"], "query_toks_no_value": ["select", "first_name", ",", "birth_date", "from", "players", "where", "country_code", "=", "value"], "question": "What are the first names and birth dates of players from the USA?", "question_toks": ["What", "are", "the", "first", "names", "and", "birth", "dates", "of", "players", "from", "the", "USA", "?"], "guid": 3172}}
{"text": "country: Country_id, Country_name, Capital, Official_native_language; team: Team_id, Name; match_season: Season, Player, Position, Country, Team, Draft_Pick_Number, Draft_Class, College; player: Player_ID, Player, Years_Played, Total_WL, Singles_WL, Doubles_WL, Team | Show the country name and capital of all countries.", "sql": "SELECT Country_name ,  Capital FROM country", "example": {"db_id": "match_season", "query": "SELECT Country_name ,  Capital FROM country", "query_toks": ["SELECT", "Country_name", ",", "Capital", "FROM", "country"], "query_toks_no_value": ["select", "country_name", ",", "capital", "from", "country"], "question": "Show the country name and capital of all countries.", "question_toks": ["Show", "the", "country", "name", "and", "capital", "of", "all", "countries", "."], "guid": 3173}}
{"text": "gymnast: Gymnast_ID, Floor_Exercise_Points, Pommel_Horse_Points, Rings_Points, Vault_Points, Parallel_Bars_Points, Horizontal_Bar_Points, Total_Points; people: People_ID, Name, Age, Height, Hometown | Give the different hometowns of gymnasts that have a total point score of above 57.5.", "sql": "SELECT DISTINCT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID WHERE T1.Total_Points  >  57.5", "example": {"db_id": "gymnast", "query": "SELECT DISTINCT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID WHERE T1.Total_Points  >  57.5", "query_toks": ["SELECT", "DISTINCT", "T2.Hometown", "FROM", "gymnast", "AS", "T1", "JOIN", "people", "AS", "T2", "ON", "T1.Gymnast_ID", "=", "T2.People_ID", "WHERE", "T1.Total_Points", ">", "57.5"], "query_toks_no_value": ["select", "distinct", "t2", ".", "hometown", "from", "gymnast", "as", "t1", "join", "people", "as", "t2", "on", "t1", ".", "gymnast_id", "=", "t2", ".", "people_id", "where", "t1", ".", "total_points", ">", "value"], "question": "Give the different hometowns of gymnasts that have a total point score of above 57.5.", "question_toks": ["Give", "the", "different", "hometowns", "of", "gymnasts", "that", "have", "a", "total", "point", "score", "of", "above", "57.5", "."], "guid": 3174}}
{"text": "basketball_match: Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home; university: School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference | What are the average enrollment size of the universities that are founded before 1850?", "sql": "SELECT avg(enrollment) FROM university WHERE founded  <  1850", "example": {"db_id": "university_basketball", "query": "SELECT avg(enrollment) FROM university WHERE founded  <  1850", "query_toks": ["SELECT", "avg", "(", "enrollment", ")", "FROM", "university", "WHERE", "founded", "<", "1850"], "query_toks_no_value": ["select", "avg", "(", "enrollment", ")", "from", "university", "where", "founded", "<", "value"], "question": "What are the average enrollment size of the universities that are founded before 1850?", "question_toks": ["What", "are", "the", "average", "enrollment", "size", "of", "the", "universities", "that", "are", "founded", "before", "1850", "?"], "guid": 3175}}
{"text": "players: player_id, first_name, last_name, hand, birth_date, country_code; matches: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank; rankings: ranking_date, ranking, player_id, ranking_points, tours | Find the name and rank points of the winner who won the most times.", "sql": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "wta_1", "query": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "winner_name", ",", "winner_rank_points", "FROM", "matches", "GROUP", "BY", "winner_name", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "winner_name", ",", "winner_rank_points", "from", "matches", "group", "by", "winner_name", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Find the name and rank points of the winner who won the most times.", "question_toks": ["Find", "the", "name", "and", "rank", "points", "of", "the", "winner", "who", "won", "the", "most", "times", "."], "guid": 3176}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | Give me the zip code where the average mean humidity is below 70 and at least 100 trips took place.", "sql": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_humidity)  <  70 INTERSECT SELECT zip_code FROM trip GROUP BY zip_code HAVING count(*)  >=  100", "example": {"db_id": "bike_1", "query": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_humidity)  <  70 INTERSECT SELECT zip_code FROM trip GROUP BY zip_code HAVING count(*)  >=  100", "query_toks": ["SELECT", "zip_code", "FROM", "weather", "GROUP", "BY", "zip_code", "HAVING", "avg", "(", "mean_humidity", ")", "<", "70", "INTERSECT", "SELECT", "zip_code", "FROM", "trip", "GROUP", "BY", "zip_code", "HAVING", "count", "(", "*", ")", ">", "=", "100"], "query_toks_no_value": ["select", "zip_code", "from", "weather", "group", "by", "zip_code", "having", "avg", "(", "mean_humidity", ")", "<", "value", "intersect", "select", "zip_code", "from", "trip", "group", "by", "zip_code", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "Give me the zip code where the average mean humidity is below 70 and at least 100 trips took place.", "question_toks": ["Give", "me", "the", "zip", "code", "where", "the", "average", "mean", "humidity", "is", "below", "70", "and", "at", "least", "100", "trips", "took", "place", "."], "guid": 3177}}
{"text": "body_builder: Body_Builder_ID, People_ID, Snatch, Clean_Jerk, Total; people: People_ID, Name, Height, Weight, Birth_Date, Birth_Place | What is the minimum snatch score?", "sql": "SELECT min(snatch) FROM body_builder", "example": {"db_id": "body_builder", "query": "SELECT min(snatch) FROM body_builder", "query_toks": ["SELECT", "min", "(", "snatch", ")", "FROM", "body_builder"], "query_toks_no_value": ["select", "min", "(", "snatch", ")", "from", "body_builder"], "question": "What is the minimum snatch score?", "question_toks": ["What", "is", "the", "minimum", "snatch", "score", "?"], "guid": 3178}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | What is the average fastest lap speed for the Monaco Grand Prix in 2008?", "sql": "SELECT avg(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = \"Monaco Grand Prix\"", "example": {"db_id": "formula_1", "query": "SELECT avg(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = \"Monaco Grand Prix\"", "query_toks": ["SELECT", "avg", "(", "T2.fastestlapspeed", ")", "FROM", "races", "AS", "T1", "JOIN", "results", "AS", "T2", "ON", "T1.raceid", "=", "T2.raceid", "WHERE", "T1.year", "=", "2008", "AND", "T1.name", "=", "``", "Monaco", "Grand", "Prix", "''"], "query_toks_no_value": ["select", "avg", "(", "t2", ".", "fastestlapspeed", ")", "from", "races", "as", "t1", "join", "results", "as", "t2", "on", "t1", ".", "raceid", "=", "t2", ".", "raceid", "where", "t1", ".", "year", "=", "value", "and", "t1", ".", "name", "=", "value"], "question": "What is the average fastest lap speed for the Monaco Grand Prix in 2008?", "question_toks": ["What", "is", "the", "average", "fastest", "lap", "speed", "for", "the", "Monaco", "Grand", "Prix", "in", "2008", "?"], "guid": 3179}}
{"text": "race: Race_ID, Name, Class, Date, Track_ID; track: Track_ID, Name, Location, Seating, Year_Opened | What are the years of opening for tracks with seating between 4000 and 5000?", "sql": "SELECT year_opened FROM track WHERE seating BETWEEN 4000 AND 5000", "example": {"db_id": "race_track", "query": "SELECT year_opened FROM track WHERE seating BETWEEN 4000 AND 5000", "query_toks": ["SELECT", "year_opened", "FROM", "track", "WHERE", "seating", "BETWEEN", "4000", "AND", "5000"], "query_toks_no_value": ["select", "year_opened", "from", "track", "where", "seating", "between", "value", "and", "value"], "question": "What are the years of opening for tracks with seating between 4000 and 5000?", "question_toks": ["What", "are", "the", "years", "of", "opening", "for", "tracks", "with", "seating", "between", "4000", "and", "5000", "?"], "guid": 3180}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | For each trip, return its ending station's installation date.", "sql": "SELECT T1.id ,  T2.installation_date FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id", "example": {"db_id": "bike_1", "query": "SELECT T1.id ,  T2.installation_date FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id", "query_toks": ["SELECT", "T1.id", ",", "T2.installation_date", "FROM", "trip", "AS", "T1", "JOIN", "station", "AS", "T2", "ON", "T1.end_station_id", "=", "T2.id"], "query_toks_no_value": ["select", "t1", ".", "id", ",", "t2", ".", "installation_date", "from", "trip", "as", "t1", "join", "station", "as", "t2", "on", "t1", ".", "end_station_id", "=", "t2", ".", "id"], "question": "For each trip, return its ending station's installation date.", "question_toks": ["For", "each", "trip", ",", "return", "its", "ending", "station", "'s", "installation", "date", "."], "guid": 3181}}
{"text": "gymnast: Gymnast_ID, Floor_Exercise_Points, Pommel_Horse_Points, Rings_Points, Vault_Points, Parallel_Bars_Points, Horizontal_Bar_Points, Total_Points; people: People_ID, Name, Age, Height, Hometown | Return the hometown that is most common among gymnasts.", "sql": "SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown ORDER BY COUNT(*) DESC LIMIT 1", "example": {"db_id": "gymnast", "query": "SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "T2.Hometown", "FROM", "gymnast", "AS", "T1", "JOIN", "people", "AS", "T2", "ON", "T1.Gymnast_ID", "=", "T2.People_ID", "GROUP", "BY", "T2.Hometown", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "hometown", "from", "gymnast", "as", "t1", "join", "people", "as", "t2", "on", "t1", ".", "gymnast_id", "=", "t2", ".", "people_id", "group", "by", "t2", ".", "hometown", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Return the hometown that is most common among gymnasts.", "question_toks": ["Return", "the", "hometown", "that", "is", "most", "common", "among", "gymnasts", "."], "guid": 3182}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | What are the names and ids of stations that had more than 14 bikes available on average or were installed in December?", "sql": "SELECT T1.name ,  T1.id FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(T2.bikes_available)  >  14 UNION SELECT name ,  id FROM station WHERE installation_date LIKE \"12/%\"", "example": {"db_id": "bike_1", "query": "SELECT T1.name ,  T1.id FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(T2.bikes_available)  >  14 UNION SELECT name ,  id FROM station WHERE installation_date LIKE \"12/%\"", "query_toks": ["SELECT", "T1.name", ",", "T1.id", "FROM", "station", "AS", "T1", "JOIN", "status", "AS", "T2", "ON", "T1.id", "=", "T2.station_id", "GROUP", "BY", "T2.station_id", "HAVING", "avg", "(", "T2.bikes_available", ")", ">", "14", "UNION", "SELECT", "name", ",", "id", "FROM", "station", "WHERE", "installation_date", "LIKE", "``", "12/", "%", "''"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "t1", ".", "id", "from", "station", "as", "t1", "join", "status", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "station_id", "group", "by", "t2", ".", "station_id", "having", "avg", "(", "t2", ".", "bikes_available", ")", ">", "value", "union", "select", "name", ",", "id", "from", "station", "where", "installation_date", "like", "value"], "question": "What are the names and ids of stations that had more than 14 bikes available on average or were installed in December?", "question_toks": ["What", "are", "the", "names", "and", "ids", "of", "stations", "that", "had", "more", "than", "14", "bikes", "available", "on", "average", "or", "were", "installed", "in", "December", "?"], "guid": 3183}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | Find all the forenames of distinct drivers who won in position 1 as driver standing and had more than 20 points?", "sql": "SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1 AND T2.points > 20", "example": {"db_id": "formula_1", "query": "SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1 AND T2.points > 20", "query_toks": ["SELECT", "DISTINCT", "T1.forename", "FROM", "drivers", "AS", "T1", "JOIN", "driverstandings", "AS", "T2", "ON", "T1.driverid", "=", "T2.driverid", "WHERE", "T2.position", "=", "1", "AND", "T2.wins", "=", "1", "AND", "T2.points", ">", "20"], "query_toks_no_value": ["select", "distinct", "t1", ".", "forename", "from", "drivers", "as", "t1", "join", "driverstandings", "as", "t2", "on", "t1", ".", "driverid", "=", "t2", ".", "driverid", "where", "t2", ".", "position", "=", "value", "and", "t2", ".", "wins", "=", "value", "and", "t2", ".", "points", ">", "value"], "question": "Find all the forenames of distinct drivers who won in position 1 as driver standing and had more than 20 points?", "question_toks": ["Find", "all", "the", "forenames", "of", "distinct", "drivers", "who", "won", "in", "position", "1", "as", "driver", "standing", "and", "had", "more", "than", "20", "points", "?"], "guid": 3184}}
{"text": "poker_player: Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings; people: People_ID, Nationality, Name, Birth_Date, Height | Give the names of poker players who have earnings above 300000.", "sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000", "example": {"db_id": "poker_player", "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000", "query_toks": ["SELECT", "T1.Name", "FROM", "people", "AS", "T1", "JOIN", "poker_player", "AS", "T2", "ON", "T1.People_ID", "=", "T2.People_ID", "WHERE", "T2.Earnings", ">", "300000"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "people", "as", "t1", "join", "poker_player", "as", "t2", "on", "t1", ".", "people_id", "=", "t2", ".", "people_id", "where", "t2", ".", "earnings", ">", "value"], "question": "Give the names of poker players who have earnings above 300000.", "question_toks": ["Give", "the", "names", "of", "poker", "players", "who", "have", "earnings", "above", "300000", "."], "guid": 3185}}
{"text": "wrestler: Wrestler_ID, Name, Reign, Days_held, Location, Event; Elimination: Elimination_ID, Wrestler_ID, Team, Eliminated_By, Elimination_Move, Time | What is the name of the wrestler with the fewest days held?", "sql": "SELECT Name FROM wrestler ORDER BY Days_held ASC LIMIT 1", "example": {"db_id": "wrestler", "query": "SELECT Name FROM wrestler ORDER BY Days_held ASC LIMIT 1", "query_toks": ["SELECT", "Name", "FROM", "wrestler", "ORDER", "BY", "Days_held", "ASC", "LIMIT", "1"], "query_toks_no_value": ["select", "name", "from", "wrestler", "order", "by", "days_held", "asc", "limit", "value"], "question": "What is the name of the wrestler with the fewest days held?", "question_toks": ["What", "is", "the", "name", "of", "the", "wrestler", "with", "the", "fewest", "days", "held", "?"], "guid": 3186}}
{"text": "players: player_id, first_name, last_name, hand, birth_date, country_code; matches: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank; rankings: ranking_date, ranking, player_id, ranking_points, tours | Find the total number of matches.", "sql": "SELECT count(*) FROM matches", "example": {"db_id": "wta_1", "query": "SELECT count(*) FROM matches", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "matches"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "matches"], "question": "Find the total number of matches.", "question_toks": ["Find", "the", "total", "number", "of", "matches", "."], "guid": 3187}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | For each city, list their names in decreasing order by their highest station latitude.", "sql": "SELECT city FROM station GROUP BY city ORDER BY max(lat) DESC", "example": {"db_id": "bike_1", "query": "SELECT city FROM station GROUP BY city ORDER BY max(lat) DESC", "query_toks": ["SELECT", "city", "FROM", "station", "GROUP", "BY", "city", "ORDER", "BY", "max", "(", "lat", ")", "DESC"], "query_toks_no_value": ["select", "city", "from", "station", "group", "by", "city", "order", "by", "max", "(", "lat", ")", "desc"], "question": "For each city, list their names in decreasing order by their highest station latitude.", "question_toks": ["For", "each", "city", ",", "list", "their", "names", "in", "decreasing", "order", "by", "their", "highest", "station", "latitude", "."], "guid": 3188}}
{"text": "wrestler: Wrestler_ID, Name, Reign, Days_held, Location, Event; Elimination: Elimination_ID, Wrestler_ID, Team, Eliminated_By, Elimination_Move, Time | List the names of wrestlers in descending order of days held.", "sql": "SELECT Name FROM wrestler ORDER BY Days_held DESC", "example": {"db_id": "wrestler", "query": "SELECT Name FROM wrestler ORDER BY Days_held DESC", "query_toks": ["SELECT", "Name", "FROM", "wrestler", "ORDER", "BY", "Days_held", "DESC"], "query_toks_no_value": ["select", "name", "from", "wrestler", "order", "by", "days_held", "desc"], "question": "List the names of wrestlers in descending order of days held.", "question_toks": ["List", "the", "names", "of", "wrestlers", "in", "descending", "order", "of", "days", "held", "."], "guid": 3189}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | What is the id of the trip that has the shortest duration?", "sql": "SELECT id FROM trip ORDER BY duration LIMIT 1", "example": {"db_id": "bike_1", "query": "SELECT id FROM trip ORDER BY duration LIMIT 1", "query_toks": ["SELECT", "id", "FROM", "trip", "ORDER", "BY", "duration", "LIMIT", "1"], "query_toks_no_value": ["select", "id", "from", "trip", "order", "by", "duration", "limit", "value"], "question": "What is the id of the trip that has the shortest duration?", "question_toks": ["What", "is", "the", "id", "of", "the", "trip", "that", "has", "the", "shortest", "duration", "?"], "guid": 3190}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | How many drivers participated in the race Australian Grand Prix held in 2009?", "sql": "SELECT count(*) FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid WHERE T2.name = \"Australian Grand Prix\" AND YEAR = 2009", "example": {"db_id": "formula_1", "query": "SELECT count(*) FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid WHERE T2.name = \"Australian Grand Prix\" AND YEAR = 2009", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "results", "AS", "T1", "JOIN", "races", "AS", "T2", "ON", "T1.raceid", "=", "T2.raceid", "WHERE", "T2.name", "=", "``", "Australian", "Grand", "Prix", "''", "AND", "YEAR", "=", "2009"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "results", "as", "t1", "join", "races", "as", "t2", "on", "t1", ".", "raceid", "=", "t2", ".", "raceid", "where", "t2", ".", "name", "=", "value", "and", "year", "=", "value"], "question": "How many drivers participated in the race Australian Grand Prix held in 2009?", "question_toks": ["How", "many", "drivers", "participated", "in", "the", "race", "Australian", "Grand", "Prix", "held", "in", "2009", "?"], "guid": 3191}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | Which days had a minimum dew point smaller than any day in zip code 94107, and in which zip codes were those measurements taken?", "sql": "SELECT date ,  zip_code FROM weather WHERE min_dew_point_f  <  (SELECT min(min_dew_point_f) FROM weather WHERE zip_code  =  94107)", "example": {"db_id": "bike_1", "query": "SELECT date ,  zip_code FROM weather WHERE min_dew_point_f  <  (SELECT min(min_dew_point_f) FROM weather WHERE zip_code  =  94107)", "query_toks": ["SELECT", "date", ",", "zip_code", "FROM", "weather", "WHERE", "min_dew_point_f", "<", "(", "SELECT", "min", "(", "min_dew_point_f", ")", "FROM", "weather", "WHERE", "zip_code", "=", "94107", ")"], "query_toks_no_value": ["select", "date", ",", "zip_code", "from", "weather", "where", "min_dew_point_f", "<", "(", "select", "min", "(", "min_dew_point_f", ")", "from", "weather", "where", "zip_code", "=", "value", ")"], "question": "Which days had a minimum dew point smaller than any day in zip code 94107, and in which zip codes were those measurements taken?", "question_toks": ["Which", "days", "had", "a", "minimum", "dew", "point", "smaller", "than", "any", "day", "in", "zip", "code", "94107", ",", "and", "in", "which", "zip", "codes", "were", "those", "measurements", "taken", "?"], "guid": 3192}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | Tell me the location of the club \"Hopkins Student Enterprises\".", "sql": "SELECT clublocation FROM club WHERE clubname  =  \"Hopkins Student Enterprises\"", "example": {"db_id": "club_1", "query": "SELECT clublocation FROM club WHERE clubname  =  \"Hopkins Student Enterprises\"", "query_toks": ["SELECT", "clublocation", "FROM", "club", "WHERE", "clubname", "=", "``", "Hopkins", "Student", "Enterprises", "''"], "query_toks_no_value": ["select", "clublocation", "from", "club", "where", "clubname", "=", "value"], "question": "Tell me the location of the club \"Hopkins Student Enterprises\".", "question_toks": ["Tell", "me", "the", "location", "of", "the", "club", "``", "Hopkins", "Student", "Enterprises", "''", "."], "guid": 3193}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | What are the maximum fastest lap speed in races held after 2004 grouped by race name and ordered by year?", "sql": "SELECT max(T2.fastestlapspeed) ,  T1.name ,  T1.year FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY T1.name ORDER BY T1.year", "example": {"db_id": "formula_1", "query": "SELECT max(T2.fastestlapspeed) ,  T1.name ,  T1.year FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY T1.name ORDER BY T1.year", "query_toks": ["SELECT", "max", "(", "T2.fastestlapspeed", ")", ",", "T1.name", ",", "T1.year", "FROM", "races", "AS", "T1", "JOIN", "results", "AS", "T2", "ON", "T1.raceid", "=", "T2.raceid", "WHERE", "T1.year", ">", "2014", "GROUP", "BY", "T1.name", "ORDER", "BY", "T1.year"], "query_toks_no_value": ["select", "max", "(", "t2", ".", "fastestlapspeed", ")", ",", "t1", ".", "name", ",", "t1", ".", "year", "from", "races", "as", "t1", "join", "results", "as", "t2", "on", "t1", ".", "raceid", "=", "t2", ".", "raceid", "where", "t1", ".", "year", ">", "value", "group", "by", "t1", ".", "name", "order", "by", "t1", ".", "year"], "question": "What are the maximum fastest lap speed in races held after 2004 grouped by race name and ordered by year?", "question_toks": ["What", "are", "the", "maximum", "fastest", "lap", "speed", "in", "races", "held", "after", "2004", "grouped", "by", "race", "name", "and", "ordered", "by", "year", "?"], "guid": 3194}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | What is the average latitude and longitude of all starting stations for the trips?", "sql": "SELECT avg(T1.lat) ,  avg(T1.long) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id", "example": {"db_id": "bike_1", "query": "SELECT avg(T1.lat) ,  avg(T1.long) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id", "query_toks": ["SELECT", "avg", "(", "T1.lat", ")", ",", "avg", "(", "T1.long", ")", "FROM", "station", "AS", "T1", "JOIN", "trip", "AS", "T2", "ON", "T1.id", "=", "T2.start_station_id"], "query_toks_no_value": ["select", "avg", "(", "t1", ".", "lat", ")", ",", "avg", "(", "t1", ".", "long", ")", "from", "station", "as", "t1", "join", "trip", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "start_station_id"], "question": "What is the average latitude and longitude of all starting stations for the trips?", "question_toks": ["What", "is", "the", "average", "latitude", "and", "longitude", "of", "all", "starting", "stations", "for", "the", "trips", "?"], "guid": 3195}}
{"text": "poker_player: Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings; people: People_ID, Nationality, Name, Birth_Date, Height | How many people are there of each nationality?", "sql": "SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality", "example": {"db_id": "poker_player", "query": "SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality", "query_toks": ["SELECT", "Nationality", ",", "COUNT", "(", "*", ")", "FROM", "people", "GROUP", "BY", "Nationality"], "query_toks_no_value": ["select", "nationality", ",", "count", "(", "*", ")", "from", "people", "group", "by", "nationality"], "question": "How many people are there of each nationality?", "question_toks": ["How", "many", "people", "are", "there", "of", "each", "nationality", "?"], "guid": 3196}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | For each zip code, select all those that have an average mean visiblity below 10.", "sql": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  10", "example": {"db_id": "bike_1", "query": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  10", "query_toks": ["SELECT", "zip_code", "FROM", "weather", "GROUP", "BY", "zip_code", "HAVING", "avg", "(", "mean_visibility_miles", ")", "<", "10"], "query_toks_no_value": ["select", "zip_code", "from", "weather", "group", "by", "zip_code", "having", "avg", "(", "mean_visibility_miles", ")", "<", "value"], "question": "For each zip code, select all those that have an average mean visiblity below 10.", "question_toks": ["For", "each", "zip", "code", ",", "select", "all", "those", "that", "have", "an", "average", "mean", "visiblity", "below", "10", "."], "guid": 3197}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | On which day has it neither been foggy nor rained in the zip code of 94107?", "sql": "SELECT date FROM weather WHERE zip_code  =  94107 AND EVENTS != \"Fog\" AND EVENTS != \"Rain\"", "example": {"db_id": "bike_1", "query": "SELECT date FROM weather WHERE zip_code  =  94107 AND EVENTS != \"Fog\" AND EVENTS != \"Rain\"", "query_toks": ["SELECT", "date", "FROM", "weather", "WHERE", "zip_code", "=", "94107", "AND", "EVENTS", "!", "=", "``", "Fog", "''", "AND", "EVENTS", "!", "=", "``", "Rain", "''"], "query_toks_no_value": ["select", "date", "from", "weather", "where", "zip_code", "=", "value", "and", "events", "!", "=", "value", "and", "events", "!", "=", "value"], "question": "On which day has it neither been foggy nor rained in the zip code of 94107?", "question_toks": ["On", "which", "day", "has", "it", "neither", "been", "foggy", "nor", "rained", "in", "the", "zip", "code", "of", "94107", "?"], "guid": 3198}}
{"text": "club: Club_ID, name, Region, Start_year; club_rank: Rank, Club_ID, Gold, Silver, Bronze, Total; player: Player_ID, name, Position, Club_ID, Apps, Tries, Goals, Points; competition: Competition_ID, Year, Competition_type, Country; competition_result: Competition_ID, Club_ID_1, Club_ID_2, Score | List the names of clubs that do not have any players.", "sql": "SELECT name FROM CLub WHERE Club_ID NOT IN (SELECT Club_ID FROM player)", "example": {"db_id": "sports_competition", "query": "SELECT name FROM CLub WHERE Club_ID NOT IN (SELECT Club_ID FROM player)", "query_toks": ["SELECT", "name", "FROM", "CLub", "WHERE", "Club_ID", "NOT", "IN", "(", "SELECT", "Club_ID", "FROM", "player", ")"], "query_toks_no_value": ["select", "name", "from", "club", "where", "club_id", "not", "in", "(", "select", "club_id", "from", "player", ")"], "question": "List the names of clubs that do not have any players.", "question_toks": ["List", "the", "names", "of", "clubs", "that", "do", "not", "have", "any", "players", "."], "guid": 3199}}
{"text": "race: Race_ID, Name, Class, Date, Track_ID; track: Track_ID, Name, Location, Seating, Year_Opened | Show the race class and number of races in each class.", "sql": "SELECT CLASS ,  count(*) FROM race GROUP BY CLASS", "example": {"db_id": "race_track", "query": "SELECT CLASS ,  count(*) FROM race GROUP BY CLASS", "query_toks": ["SELECT", "CLASS", ",", "count", "(", "*", ")", "FROM", "race", "GROUP", "BY", "CLASS"], "query_toks_no_value": ["select", "class", ",", "count", "(", "*", ")", "from", "race", "group", "by", "class"], "question": "Show the race class and number of races in each class.", "question_toks": ["Show", "the", "race", "class", "and", "number", "of", "races", "in", "each", "class", "."], "guid": 3200}}
{"text": "players: player_id, first_name, last_name, hand, birth_date, country_code; matches: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank; rankings: ranking_date, ranking, player_id, ranking_points, tours | Find the average ranking for each player and their first name.", "sql": "SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name", "example": {"db_id": "wta_1", "query": "SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name", "query_toks": ["SELECT", "avg", "(", "ranking", ")", ",", "T1.first_name", "FROM", "players", "AS", "T1", "JOIN", "rankings", "AS", "T2", "ON", "T1.player_id", "=", "T2.player_id", "GROUP", "BY", "T1.first_name"], "query_toks_no_value": ["select", "avg", "(", "ranking", ")", ",", "t1", ".", "first_name", "from", "players", "as", "t1", "join", "rankings", "as", "t2", "on", "t1", ".", "player_id", "=", "t2", ".", "player_id", "group", "by", "t1", ".", "first_name"], "question": "Find the average ranking for each player and their first name.", "question_toks": ["Find", "the", "average", "ranking", "for", "each", "player", "and", "their", "first", "name", "."], "guid": 3201}}
{"text": "race: Race_ID, Name, Class, Date, Track_ID; track: Track_ID, Name, Location, Seating, Year_Opened | How many tracks do we have?", "sql": "SELECT count(*) FROM track", "example": {"db_id": "race_track", "query": "SELECT count(*) FROM track", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "track"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "track"], "question": "How many tracks do we have?", "question_toks": ["How", "many", "tracks", "do", "we", "have", "?"], "guid": 3202}}
{"text": "race: Race_ID, Name, Class, Date, Track_ID; track: Track_ID, Name, Location, Seating, Year_Opened | What are the names and seatings for all tracks opened after 2000, ordered by seating?", "sql": "SELECT name ,  seating FROM track WHERE year_opened  >  2000 ORDER BY seating", "example": {"db_id": "race_track", "query": "SELECT name ,  seating FROM track WHERE year_opened  >  2000 ORDER BY seating", "query_toks": ["SELECT", "name", ",", "seating", "FROM", "track", "WHERE", "year_opened", ">", "2000", "ORDER", "BY", "seating"], "query_toks_no_value": ["select", "name", ",", "seating", "from", "track", "where", "year_opened", ">", "value", "order", "by", "seating"], "question": "What are the names and seatings for all tracks opened after 2000, ordered by seating?", "question_toks": ["What", "are", "the", "names", "and", "seatings", "for", "all", "tracks", "opened", "after", "2000", ",", "ordered", "by", "seating", "?"], "guid": 3203}}
{"text": "body_builder: Body_Builder_ID, People_ID, Snatch, Clean_Jerk, Total; people: People_ID, Name, Height, Weight, Birth_Date, Birth_Place | What are the clean and jerk score of the body builder with the highest total score?", "sql": "SELECT Clean_Jerk FROM body_builder ORDER BY Total DESC LIMIT 1", "example": {"db_id": "body_builder", "query": "SELECT Clean_Jerk FROM body_builder ORDER BY Total DESC LIMIT 1", "query_toks": ["SELECT", "Clean_Jerk", "FROM", "body_builder", "ORDER", "BY", "Total", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "clean_jerk", "from", "body_builder", "order", "by", "total", "desc", "limit", "value"], "question": "What are the clean and jerk score of the body builder with the highest total score?", "question_toks": ["What", "are", "the", "clean", "and", "jerk", "score", "of", "the", "body", "builder", "with", "the", "highest", "total", "score", "?"], "guid": 3204}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | What is the name of the race held most recently?", "sql": "SELECT name FROM races ORDER BY date DESC LIMIT 1", "example": {"db_id": "formula_1", "query": "SELECT name FROM races ORDER BY date DESC LIMIT 1", "query_toks": ["SELECT", "name", "FROM", "races", "ORDER", "BY", "date", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "name", "from", "races", "order", "by", "date", "desc", "limit", "value"], "question": "What is the name of the race held most recently?", "question_toks": ["What", "is", "the", "name", "of", "the", "race", "held", "most", "recently", "?"], "guid": 3205}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | What is the id and last name of the driver who participated in the most races after 2010?", "sql": "SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid WHERE T3.year > 2010 GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "formula_1", "query": "SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid WHERE T3.year > 2010 GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.driverid", ",", "T1.surname", "FROM", "drivers", "AS", "T1", "JOIN", "results", "AS", "T2", "ON", "T1.driverid", "=", "T2.driverid", "JOIN", "races", "AS", "T3", "ON", "T2.raceid", "=", "T3.raceid", "WHERE", "T3.year", ">", "2010", "GROUP", "BY", "T1.driverid", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "driverid", ",", "t1", ".", "surname", "from", "drivers", "as", "t1", "join", "results", "as", "t2", "on", "t1", ".", "driverid", "=", "t2", ".", "driverid", "join", "races", "as", "t3", "on", "t2", ".", "raceid", "=", "t3", ".", "raceid", "where", "t3", ".", "year", ">", "value", "group", "by", "t1", ".", "driverid", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the id and last name of the driver who participated in the most races after 2010?", "question_toks": ["What", "is", "the", "id", "and", "last", "name", "of", "the", "driver", "who", "participated", "in", "the", "most", "races", "after", "2010", "?"], "guid": 3206}}
{"text": "basketball_match: Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home; university: School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference | What is the team name and acc regular season score of the school that was founded for the longest time?", "sql": "SELECT t2.team_name ,  t2.ACC_Regular_Season FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t1.founded LIMIT 1", "example": {"db_id": "university_basketball", "query": "SELECT t2.team_name ,  t2.ACC_Regular_Season FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t1.founded LIMIT 1", "query_toks": ["SELECT", "t2.team_name", ",", "t2.ACC_Regular_Season", "FROM", "university", "AS", "t1", "JOIN", "basketball_match", "AS", "t2", "ON", "t1.school_id", "=", "t2.school_id", "ORDER", "BY", "t1.founded", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "team_name", ",", "t2", ".", "acc_regular_season", "from", "university", "as", "t1", "join", "basketball_match", "as", "t2", "on", "t1", ".", "school_id", "=", "t2", ".", "school_id", "order", "by", "t1", ".", "founded", "limit", "value"], "question": "What is the team name and acc regular season score of the school that was founded for the longest time?", "question_toks": ["What", "is", "the", "team", "name", "and", "acc", "regular", "season", "score", "of", "the", "school", "that", "was", "founded", "for", "the", "longest", "time", "?"], "guid": 3207}}
{"text": "mountain: Mountain_ID, Name, Height, Prominence, Range, Country; climber: Climber_ID, Name, Country, Time, Points, Mountain_ID | Show the distinct names of mountains climbed by climbers from country \"West Germany\".", "sql": "SELECT DISTINCT T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T1.Country  =  \"West Germany\"", "example": {"db_id": "climbing", "query": "SELECT DISTINCT T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T1.Country  =  \"West Germany\"", "query_toks": ["SELECT", "DISTINCT", "T2.Name", "FROM", "climber", "AS", "T1", "JOIN", "mountain", "AS", "T2", "ON", "T1.Mountain_ID", "=", "T2.Mountain_ID", "WHERE", "T1.Country", "=", "``", "West", "Germany", "''"], "query_toks_no_value": ["select", "distinct", "t2", ".", "name", "from", "climber", "as", "t1", "join", "mountain", "as", "t2", "on", "t1", ".", "mountain_id", "=", "t2", ".", "mountain_id", "where", "t1", ".", "country", "=", "value"], "question": "Show the distinct names of mountains climbed by climbers from country \"West Germany\".", "question_toks": ["Show", "the", "distinct", "names", "of", "mountains", "climbed", "by", "climbers", "from", "country", "``", "West", "Germany", "''", "."], "guid": 3208}}
{"text": "swimmer: ID, name, Nationality, meter_100, meter_200, meter_300, meter_400, meter_500, meter_600, meter_700; stadium: ID, name, Capacity, City, Country, Opening_year; event: ID, Name, Stadium_ID, Year; record: ID, Result, Swimmer_ID, Event_ID | How many stadiums does each country have?", "sql": "SELECT country ,  count(*) FROM stadium GROUP BY country", "example": {"db_id": "swimming", "query": "SELECT country ,  count(*) FROM stadium GROUP BY country", "query_toks": ["SELECT", "country", ",", "count", "(", "*", ")", "FROM", "stadium", "GROUP", "BY", "country"], "query_toks_no_value": ["select", "country", ",", "count", "(", "*", ")", "from", "stadium", "group", "by", "country"], "question": "How many stadiums does each country have?", "question_toks": ["How", "many", "stadiums", "does", "each", "country", "have", "?"], "guid": 3209}}
{"text": "player: Player_ID, Sponsor_name, Player_name, Gender, Residence, Occupation, Votes, Rank; club: Club_ID, Club_name, Region, Start_year; coach: Coach_ID, Coach_name, Gender, Club_ID, Rank; player_coach: Player_ID, Coach_ID, Starting_year; match_result: Rank, Club_ID, Gold, Big_Silver, Small_Silver, Bronze, Points | Show the names of players coached by the rank 1 coach.", "sql": "SELECT T3.Player_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID  =  T2.Coach_ID JOIN player AS T3 ON T1.Player_ID  =  T3.Player_ID WHERE T2.Rank  =  1", "example": {"db_id": "riding_club", "query": "SELECT T3.Player_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID  =  T2.Coach_ID JOIN player AS T3 ON T1.Player_ID  =  T3.Player_ID WHERE T2.Rank  =  1", "query_toks": ["SELECT", "T3.Player_name", "FROM", "player_coach", "AS", "T1", "JOIN", "coach", "AS", "T2", "ON", "T1.Coach_ID", "=", "T2.Coach_ID", "JOIN", "player", "AS", "T3", "ON", "T1.Player_ID", "=", "T3.Player_ID", "WHERE", "T2.Rank", "=", "1"], "query_toks_no_value": ["select", "t3", ".", "player_name", "from", "player_coach", "as", "t1", "join", "coach", "as", "t2", "on", "t1", ".", "coach_id", "=", "t2", ".", "coach_id", "join", "player", "as", "t3", "on", "t1", ".", "player_id", "=", "t3", ".", "player_id", "where", "t2", ".", "rank", "=", "value"], "question": "Show the names of players coached by the rank 1 coach.", "question_toks": ["Show", "the", "names", "of", "players", "coached", "by", "the", "rank", "1", "coach", "."], "guid": 3210}}
{"text": "genre: g_name, rating, most_popular_in; artist: artist_name, country, gender, preferred_genre; files: f_id, artist_name, file_size, duration, formats; song: song_name, artist_name, country, f_id, genre_is, rating, languages, releasedate, resolution | What is the language that was used most often in songs with resolution above 500?", "sql": "SELECT artist_name FROM song WHERE resolution  >  500 GROUP BY languages ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "music_1", "query": "SELECT artist_name FROM song WHERE resolution  >  500 GROUP BY languages ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "artist_name", "FROM", "song", "WHERE", "resolution", ">", "500", "GROUP", "BY", "languages", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "artist_name", "from", "song", "where", "resolution", ">", "value", "group", "by", "languages", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the language that was used most often in songs with resolution above 500?", "question_toks": ["What", "is", "the", "language", "that", "was", "used", "most", "often", "in", "songs", "with", "resolution", "above", "500", "?"], "guid": 1561}}
{"text": "Songs: SongId, Title; Albums: AId, Title, Year, Label, Type; Band: Id, Firstname, Lastname; Instruments: SongId, BandmateId, Instrument; Performance: SongId, Bandmate, StagePosition; Tracklists: AlbumId, Position, SongId; Vocals: SongId, Bandmate, Type | How many instrument does the musician with last name \"Heilo\" use?", "sql": "SELECT count(DISTINCT instrument) FROM instruments AS T1 JOIN Band AS T2 ON T1.bandmateid  =  T2.id WHERE T2.lastname  =  \"Heilo\"", "example": {"db_id": "music_2", "query": "SELECT count(DISTINCT instrument) FROM instruments AS T1 JOIN Band AS T2 ON T1.bandmateid  =  T2.id WHERE T2.lastname  =  \"Heilo\"", "query_toks": ["SELECT", "count", "(", "DISTINCT", "instrument", ")", "FROM", "instruments", "AS", "T1", "JOIN", "Band", "AS", "T2", "ON", "T1.bandmateid", "=", "T2.id", "WHERE", "T2.lastname", "=", "``", "Heilo", "''"], "query_toks_no_value": ["select", "count", "(", "distinct", "instrument", ")", "from", "instruments", "as", "t1", "join", "band", "as", "t2", "on", "t1", ".", "bandmateid", "=", "t2", ".", "id", "where", "t2", ".", "lastname", "=", "value"], "question": "How many instrument does the musician with last name \"Heilo\" use?", "question_toks": ["How", "many", "instrument", "does", "the", "musician", "with", "last", "name", "``", "Heilo", "''", "use", "?"], "guid": 1562}}
{"text": "genre: g_name, rating, most_popular_in; artist: artist_name, country, gender, preferred_genre; files: f_id, artist_name, file_size, duration, formats; song: song_name, artist_name, country, f_id, genre_is, rating, languages, releasedate, resolution | What are the names of all genres in alphabetical order, combined with its ratings?", "sql": "SELECT g_name ,  rating FROM genre ORDER BY g_name", "example": {"db_id": "music_1", "query": "SELECT g_name ,  rating FROM genre ORDER BY g_name", "query_toks": ["SELECT", "g_name", ",", "rating", "FROM", "genre", "ORDER", "BY", "g_name"], "query_toks_no_value": ["select", "g_name", ",", "rating", "from", "genre", "order", "by", "g_name"], "question": "What are the names of all genres in alphabetical order, combined with its ratings?", "question_toks": ["What", "are", "the", "names", "of", "all", "genres", "in", "alphabetical", "order", ",", "combined", "with", "its", "ratings", "?"], "guid": 1563}}
{"text": "Songs: SongId, Title; Albums: AId, Title, Year, Label, Type; Band: Id, Firstname, Lastname; Instruments: SongId, BandmateId, Instrument; Performance: SongId, Bandmate, StagePosition; Tracklists: AlbumId, Position, SongId; Vocals: SongId, Bandmate, Type | How many different songs have shared vocals?", "sql": "SELECT count(DISTINCT title) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE TYPE  =  \"shared\"", "example": {"db_id": "music_2", "query": "SELECT count(DISTINCT title) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE TYPE  =  \"shared\"", "query_toks": ["SELECT", "count", "(", "DISTINCT", "title", ")", "FROM", "vocals", "AS", "T1", "JOIN", "songs", "AS", "T2", "ON", "T1.songid", "=", "T2.songid", "WHERE", "TYPE", "=", "``", "shared", "''"], "query_toks_no_value": ["select", "count", "(", "distinct", "title", ")", "from", "vocals", "as", "t1", "join", "songs", "as", "t2", "on", "t1", ".", "songid", "=", "t2", ".", "songid", "where", "type", "=", "value"], "question": "How many different songs have shared vocals?", "question_toks": ["How", "many", "different", "songs", "have", "shared", "vocals", "?"], "guid": 1564}}
{"text": "genre: g_name, rating, most_popular_in; artist: artist_name, country, gender, preferred_genre; files: f_id, artist_name, file_size, duration, formats; song: song_name, artist_name, country, f_id, genre_is, rating, languages, releasedate, resolution | What is the average duration of songs that have mp3 format and resolution below 800?", "sql": "SELECT avg(T1.duration) FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.formats  =  \"mp3\" AND T2.resolution   <  800", "example": {"db_id": "music_1", "query": "SELECT avg(T1.duration) FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.formats  =  \"mp3\" AND T2.resolution   <  800", "query_toks": ["SELECT", "avg", "(", "T1.duration", ")", "FROM", "files", "AS", "T1", "JOIN", "song", "AS", "T2", "ON", "T1.f_id", "=", "T2.f_id", "WHERE", "T1.formats", "=", "``", "mp3", "''", "AND", "T2.resolution", "<", "800"], "query_toks_no_value": ["select", "avg", "(", "t1", ".", "duration", ")", "from", "files", "as", "t1", "join", "song", "as", "t2", "on", "t1", ".", "f_id", "=", "t2", ".", "f_id", "where", "t1", ".", "formats", "=", "value", "and", "t2", ".", "resolution", "<", "value"], "question": "What is the average duration of songs that have mp3 format and resolution below 800?", "question_toks": ["What", "is", "the", "average", "duration", "of", "songs", "that", "have", "mp3", "format", "and", "resolution", "below", "800", "?"], "guid": 1565}}
{"text": "artist: Artist_ID, Artist, Age, Famous_Title, Famous_Release_date; volume: Volume_ID, Volume_Issue, Issue_Date, Weeks_on_Top, Song, Artist_ID; music_festival: ID, Music_Festival, Date_of_ceremony, Category, Volume, Result | Count the number of distinct artists who have volumes.", "sql": "SELECT COUNT(DISTINCT Artist_ID) FROM volume", "example": {"db_id": "music_4", "query": "SELECT COUNT(DISTINCT Artist_ID) FROM volume", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "Artist_ID", ")", "FROM", "volume"], "query_toks_no_value": ["select", "count", "(", "distinct", "artist_id", ")", "from", "volume"], "question": "Count the number of distinct artists who have volumes.", "question_toks": ["Count", "the", "number", "of", "distinct", "artists", "who", "have", "volumes", "."], "guid": 1566}}
{"text": "artist: Artist_ID, Artist, Age, Famous_Title, Famous_Release_date; volume: Volume_ID, Volume_Issue, Issue_Date, Weeks_on_Top, Song, Artist_ID; music_festival: ID, Music_Festival, Date_of_ceremony, Category, Volume, Result | Return the issue dates of volumes that are by the artist named Gorgoroth.", "sql": "SELECT T2.Issue_Date FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.Artist  =  \"Gorgoroth\"", "example": {"db_id": "music_4", "query": "SELECT T2.Issue_Date FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.Artist  =  \"Gorgoroth\"", "query_toks": ["SELECT", "T2.Issue_Date", "FROM", "artist", "AS", "T1", "JOIN", "volume", "AS", "T2", "ON", "T1.Artist_ID", "=", "T2.Artist_ID", "WHERE", "T1.Artist", "=", "``", "Gorgoroth", "''"], "query_toks_no_value": ["select", "t2", ".", "issue_date", "from", "artist", "as", "t1", "join", "volume", "as", "t2", "on", "t1", ".", "artist_id", "=", "t2", ".", "artist_id", "where", "t1", ".", "artist", "=", "value"], "question": "Return the issue dates of volumes that are by the artist named Gorgoroth.", "question_toks": ["Return", "the", "issue", "dates", "of", "volumes", "that", "are", "by", "the", "artist", "named", "Gorgoroth", "."], "guid": 1567}}
{"text": "musical: Musical_ID, Name, Year, Award, Category, Nominee, Result; actor: Actor_ID, Name, Musical_ID, Character, Duration, age | What are the names of actors ordered descending by the year in which their musical was awarded?", "sql": "SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID ORDER BY T2.Year DESC", "example": {"db_id": "musical", "query": "SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID ORDER BY T2.Year DESC", "query_toks": ["SELECT", "T1.Name", "FROM", "actor", "AS", "T1", "JOIN", "musical", "AS", "T2", "ON", "T1.Musical_ID", "=", "T2.Musical_ID", "ORDER", "BY", "T2.Year", "DESC"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "actor", "as", "t1", "join", "musical", "as", "t2", "on", "t1", ".", "musical_id", "=", "t2", ".", "musical_id", "order", "by", "t2", ".", "year", "desc"], "question": "What are the names of actors ordered descending by the year in which their musical was awarded?", "question_toks": ["What", "are", "the", "names", "of", "actors", "ordered", "descending", "by", "the", "year", "in", "which", "their", "musical", "was", "awarded", "?"], "guid": 1568}}
{"text": "genre: g_name, rating, most_popular_in; artist: artist_name, country, gender, preferred_genre; files: f_id, artist_name, file_size, duration, formats; song: song_name, artist_name, country, f_id, genre_is, rating, languages, releasedate, resolution | How many artists are from Bangladesh?", "sql": "SELECT count(*) FROM artist WHERE country  =  \"Bangladesh\"", "example": {"db_id": "music_1", "query": "SELECT count(*) FROM artist WHERE country  =  \"Bangladesh\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "artist", "WHERE", "country", "=", "``", "Bangladesh", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "artist", "where", "country", "=", "value"], "question": "How many artists are from Bangladesh?", "question_toks": ["How", "many", "artists", "are", "from", "Bangladesh", "?"], "guid": 1569}}
{"text": "singer: Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship; song: Song_ID, Title, Singer_ID, Sales, Highest_Position | What is the most common singer citizenship ?", "sql": "select citizenship from singer group by citizenship order by count(*) desc limit 1", "example": {"db_id": "singer", "query": "select citizenship from singer group by citizenship order by count(*) desc limit 1", "query_toks": ["select", "citizenship", "from", "singer", "group", "by", "citizenship", "order", "by", "count", "(", "*", ")", "desc", "limit", "1"], "query_toks_no_value": ["select", "citizenship", "from", "singer", "group", "by", "citizenship", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the most common singer citizenship ?", "question_toks": ["What", "is", "the", "most", "common", "singer", "citizenship", "?"], "guid": 1570}}
{"text": "singer: Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship; song: Song_ID, Title, Singer_ID, Sales, Highest_Position | What are the song titles and singer names?", "sql": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID", "example": {"db_id": "singer", "query": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID", "query_toks": ["SELECT", "T2.Title", ",", "T1.Name", "FROM", "singer", "AS", "T1", "JOIN", "song", "AS", "T2", "ON", "T1.Singer_ID", "=", "T2.Singer_ID"], "query_toks_no_value": ["select", "t2", ".", "title", ",", "t1", ".", "name", "from", "singer", "as", "t1", "join", "song", "as", "t2", "on", "t1", ".", "singer_id", "=", "t2", ".", "singer_id"], "question": "What are the song titles and singer names?", "question_toks": ["What", "are", "the", "song", "titles", "and", "singer", "names", "?"], "guid": 1571}}
{"text": "musical: Musical_ID, Name, Year, Award, Category, Nominee, Result; actor: Actor_ID, Name, Musical_ID, Character, Duration, age | Who is the nominee who has been nominated for the most musicals?", "sql": "SELECT Nominee FROM musical GROUP BY Nominee ORDER BY COUNT(*) DESC LIMIT 1", "example": {"db_id": "musical", "query": "SELECT Nominee FROM musical GROUP BY Nominee ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "Nominee", "FROM", "musical", "GROUP", "BY", "Nominee", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "nominee", "from", "musical", "group", "by", "nominee", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Who is the nominee who has been nominated for the most musicals?", "question_toks": ["Who", "is", "the", "nominee", "who", "has", "been", "nominated", "for", "the", "most", "musicals", "?"], "guid": 1572}}
{"text": "genre: g_name, rating, most_popular_in; artist: artist_name, country, gender, preferred_genre; files: f_id, artist_name, file_size, duration, formats; song: song_name, artist_name, country, f_id, genre_is, rating, languages, releasedate, resolution | What is the name of the song that was released most recently?", "sql": "SELECT song_name ,  releasedate FROM song ORDER BY releasedate DESC LIMIT 1", "example": {"db_id": "music_1", "query": "SELECT song_name ,  releasedate FROM song ORDER BY releasedate DESC LIMIT 1", "query_toks": ["SELECT", "song_name", ",", "releasedate", "FROM", "song", "ORDER", "BY", "releasedate", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "song_name", ",", "releasedate", "from", "song", "order", "by", "releasedate", "desc", "limit", "value"], "question": "What is the name of the song that was released most recently?", "question_toks": ["What", "is", "the", "name", "of", "the", "song", "that", "was", "released", "most", "recently", "?"], "guid": 1573}}
{"text": "musical: Musical_ID, Name, Year, Award, Category, Nominee, Result; actor: Actor_ID, Name, Musical_ID, Character, Duration, age | Show names of actors and names of musicals they are in.", "sql": "SELECT T1.Name ,  T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID", "example": {"db_id": "musical", "query": "SELECT T1.Name ,  T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID", "query_toks": ["SELECT", "T1.Name", ",", "T2.Name", "FROM", "actor", "AS", "T1", "JOIN", "musical", "AS", "T2", "ON", "T1.Musical_ID", "=", "T2.Musical_ID"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "t2", ".", "name", "from", "actor", "as", "t1", "join", "musical", "as", "t2", "on", "t1", ".", "musical_id", "=", "t2", ".", "musical_id"], "question": "Show names of actors and names of musicals they are in.", "question_toks": ["Show", "names", "of", "actors", "and", "names", "of", "musicals", "they", "are", "in", "."], "guid": 1574}}
{"text": "genre: g_name, rating, most_popular_in; artist: artist_name, country, gender, preferred_genre; files: f_id, artist_name, file_size, duration, formats; song: song_name, artist_name, country, f_id, genre_is, rating, languages, releasedate, resolution | What are the names of the three artists who have produced the most songs, and how many works did they produce?", "sql": "SELECT T1.artist_name ,  count(*) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name GROUP BY T2.artist_name ORDER BY count(*) DESC LIMIT 3", "example": {"db_id": "music_1", "query": "SELECT T1.artist_name ,  count(*) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name GROUP BY T2.artist_name ORDER BY count(*) DESC LIMIT 3", "query_toks": ["SELECT", "T1.artist_name", ",", "count", "(", "*", ")", "FROM", "artist", "AS", "T1", "JOIN", "song", "AS", "T2", "ON", "T1.artist_name", "=", "T2.artist_name", "GROUP", "BY", "T2.artist_name", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "3"], "query_toks_no_value": ["select", "t1", ".", "artist_name", ",", "count", "(", "*", ")", "from", "artist", "as", "t1", "join", "song", "as", "t2", "on", "t1", ".", "artist_name", "=", "t2", ".", "artist_name", "group", "by", "t2", ".", "artist_name", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What are the names of the three artists who have produced the most songs, and how many works did they produce?", "question_toks": ["What", "are", "the", "names", "of", "the", "three", "artists", "who", "have", "produced", "the", "most", "songs", ",", "and", "how", "many", "works", "did", "they", "produce", "?"], "guid": 1575}}
{"text": "stadium: Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average; singer: Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male; concert: concert_ID, concert_Name, Theme, Stadium_ID, Year; singer_in_concert: concert_ID, Singer_ID | Show the name and theme for all concerts and the number of singers in each concert.", "sql": "SELECT T2.concert_name ,  T2.theme ,  count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T2.concert_id", "example": {"db_id": "concert_singer", "query": "SELECT T2.concert_name ,  T2.theme ,  count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T2.concert_id", "query_toks": ["SELECT", "T2.concert_name", ",", "T2.theme", ",", "count", "(", "*", ")", "FROM", "singer_in_concert", "AS", "T1", "JOIN", "concert", "AS", "T2", "ON", "T1.concert_id", "=", "T2.concert_id", "GROUP", "BY", "T2.concert_id"], "query_toks_no_value": ["select", "t2", ".", "concert_name", ",", "t2", ".", "theme", ",", "count", "(", "*", ")", "from", "singer_in_concert", "as", "t1", "join", "concert", "as", "t2", "on", "t1", ".", "concert_id", "=", "t2", ".", "concert_id", "group", "by", "t2", ".", "concert_id"], "question": "Show the name and theme for all concerts and the number of singers in each concert.", "question_toks": ["Show", "the", "name", "and", "theme", "for", "all", "concerts", "and", "the", "number", "of", "singers", "in", "each", "concert", "."], "guid": 1576}}
{"text": "musical: Musical_ID, Name, Year, Award, Category, Nominee, Result; actor: Actor_ID, Name, Musical_ID, Character, Duration, age | Show names of actors that have appeared in musical with name \"The Phantom of the Opera\".", "sql": "SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID WHERE T2.Name  =  \"The Phantom of the Opera\"", "example": {"db_id": "musical", "query": "SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID WHERE T2.Name  =  \"The Phantom of the Opera\"", "query_toks": ["SELECT", "T1.Name", "FROM", "actor", "AS", "T1", "JOIN", "musical", "AS", "T2", "ON", "T1.Musical_ID", "=", "T2.Musical_ID", "WHERE", "T2.Name", "=", "``", "The", "Phantom", "of", "the", "Opera", "''"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "actor", "as", "t1", "join", "musical", "as", "t2", "on", "t1", ".", "musical_id", "=", "t2", ".", "musical_id", "where", "t2", ".", "name", "=", "value"], "question": "Show names of actors that have appeared in musical with name \"The Phantom of the Opera\".", "question_toks": ["Show", "names", "of", "actors", "that", "have", "appeared", "in", "musical", "with", "name", "``", "The", "Phantom", "of", "the", "Opera", "''", "."], "guid": 1577}}
{"text": "Songs: SongId, Title; Albums: AId, Title, Year, Label, Type; Band: Id, Firstname, Lastname; Instruments: SongId, BandmateId, Instrument; Performance: SongId, Bandmate, StagePosition; Tracklists: AlbumId, Position, SongId; Vocals: SongId, Bandmate, Type | What are the different instruments listed in the database?", "sql": "SELECT DISTINCT instrument FROM Instruments", "example": {"db_id": "music_2", "query": "SELECT DISTINCT instrument FROM Instruments", "query_toks": ["SELECT", "DISTINCT", "instrument", "FROM", "Instruments"], "query_toks_no_value": ["select", "distinct", "instrument", "from", "instruments"], "question": "What are the different instruments listed in the database?", "question_toks": ["What", "are", "the", "different", "instruments", "listed", "in", "the", "database", "?"], "guid": 1578}}
{"text": "artist: Artist_ID, Artist, Age, Famous_Title, Famous_Release_date; volume: Volume_ID, Volume_Issue, Issue_Date, Weeks_on_Top, Song, Artist_ID; music_festival: ID, Music_Festival, Date_of_ceremony, Category, Volume, Result | Please show the categories of the music festivals with count more than 1.", "sql": "SELECT Category FROM music_festival GROUP BY Category HAVING COUNT(*)  >  1", "example": {"db_id": "music_4", "query": "SELECT Category FROM music_festival GROUP BY Category HAVING COUNT(*)  >  1", "query_toks": ["SELECT", "Category", "FROM", "music_festival", "GROUP", "BY", "Category", "HAVING", "COUNT", "(", "*", ")", ">", "1"], "query_toks_no_value": ["select", "category", "from", "music_festival", "group", "by", "category", "having", "count", "(", "*", ")", ">", "value"], "question": "Please show the categories of the music festivals with count more than 1.", "question_toks": ["Please", "show", "the", "categories", "of", "the", "music", "festivals", "with", "count", "more", "than", "1", "."], "guid": 1579}}
{"text": "genre: g_name, rating, most_popular_in; artist: artist_name, country, gender, preferred_genre; files: f_id, artist_name, file_size, duration, formats; song: song_name, artist_name, country, f_id, genre_is, rating, languages, releasedate, resolution | What is the name and country of origin of the artist who released a song that has \"love\" in its title?", "sql": "SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.song_name LIKE \"%love%\"", "example": {"db_id": "music_1", "query": "SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.song_name LIKE \"%love%\"", "query_toks": ["SELECT", "T1.artist_name", ",", "T1.country", "FROM", "artist", "AS", "T1", "JOIN", "song", "AS", "T2", "ON", "T1.artist_name", "=", "T2.artist_name", "WHERE", "T2.song_name", "LIKE", "``", "%", "love", "%", "''"], "query_toks_no_value": ["select", "t1", ".", "artist_name", ",", "t1", ".", "country", "from", "artist", "as", "t1", "join", "song", "as", "t2", "on", "t1", ".", "artist_name", "=", "t2", ".", "artist_name", "where", "t2", ".", "song_name", "like", "value"], "question": "What is the name and country of origin of the artist who released a song that has \"love\" in its title?", "question_toks": ["What", "is", "the", "name", "and", "country", "of", "origin", "of", "the", "artist", "who", "released", "a", "song", "that", "has", "``", "love", "''", "in", "its", "title", "?"], "guid": 1580}}
{"text": "artist: Artist_ID, Artist, Age, Famous_Title, Famous_Release_date; volume: Volume_ID, Volume_Issue, Issue_Date, Weeks_on_Top, Song, Artist_ID; music_festival: ID, Music_Festival, Date_of_ceremony, Category, Volume, Result | Return the average age across all artists.", "sql": "SELECT avg(Age) FROM artist", "example": {"db_id": "music_4", "query": "SELECT avg(Age) FROM artist", "query_toks": ["SELECT", "avg", "(", "Age", ")", "FROM", "artist"], "query_toks_no_value": ["select", "avg", "(", "age", ")", "from", "artist"], "question": "Return the average age across all artists.", "question_toks": ["Return", "the", "average", "age", "across", "all", "artists", "."], "guid": 1581}}
{"text": "stadium: Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average; singer: Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male; concert: concert_ID, concert_Name, Theme, Stadium_ID, Year; singer_in_concert: concert_ID, Singer_ID | Find the number of concerts happened in the stadium with the highest capacity .", "sql": "select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)", "example": {"db_id": "concert_singer", "query": "select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)", "query_toks": ["select", "count", "(", "*", ")", "from", "concert", "where", "stadium_id", "=", "(", "select", "stadium_id", "from", "stadium", "order", "by", "capacity", "desc", "limit", "1", ")"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "concert", "where", "stadium_id", "=", "(", "select", "stadium_id", "from", "stadium", "order", "by", "capacity", "desc", "limit", "value", ")"], "question": "Find the number of concerts happened in the stadium with the highest capacity .", "question_toks": ["Find", "the", "number", "of", "concerts", "happened", "in", "the", "stadium", "with", "the", "highest", "capacity", "."], "guid": 1582}}
{"text": "genre: g_name, rating, most_popular_in; artist: artist_name, country, gender, preferred_genre; files: f_id, artist_name, file_size, duration, formats; song: song_name, artist_name, country, f_id, genre_is, rating, languages, releasedate, resolution | What is the duration, file size, and song format for every pop song, ordered by title alphabetically?", "sql": "SELECT T1.duration ,  T1.file_size ,  T1.formats FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T2.genre_is  =  \"pop\" ORDER BY T2.song_name", "example": {"db_id": "music_1", "query": "SELECT T1.duration ,  T1.file_size ,  T1.formats FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T2.genre_is  =  \"pop\" ORDER BY T2.song_name", "query_toks": ["SELECT", "T1.duration", ",", "T1.file_size", ",", "T1.formats", "FROM", "files", "AS", "T1", "JOIN", "song", "AS", "T2", "ON", "T1.f_id", "=", "T2.f_id", "WHERE", "T2.genre_is", "=", "``", "pop", "''", "ORDER", "BY", "T2.song_name"], "query_toks_no_value": ["select", "t1", ".", "duration", ",", "t1", ".", "file_size", ",", "t1", ".", "formats", "from", "files", "as", "t1", "join", "song", "as", "t2", "on", "t1", ".", "f_id", "=", "t2", ".", "f_id", "where", "t2", ".", "genre_is", "=", "value", "order", "by", "t2", ".", "song_name"], "question": "What is the duration, file size, and song format for every pop song, ordered by title alphabetically?", "question_toks": ["What", "is", "the", "duration", ",", "file", "size", ",", "and", "song", "format", "for", "every", "pop", "song", ",", "ordered", "by", "title", "alphabetically", "?"], "guid": 1583}}
{"text": "genre: g_name, rating, most_popular_in; artist: artist_name, country, gender, preferred_genre; files: f_id, artist_name, file_size, duration, formats; song: song_name, artist_name, country, f_id, genre_is, rating, languages, releasedate, resolution | Return the names of songs for which format is mp3 and resolution is below 1000.", "sql": "SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.formats  =  \"mp3\" INTERSECT SELECT song_name FROM song WHERE resolution  <  1000", "example": {"db_id": "music_1", "query": "SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.formats  =  \"mp3\" INTERSECT SELECT song_name FROM song WHERE resolution  <  1000", "query_toks": ["SELECT", "T2.song_name", "FROM", "files", "AS", "T1", "JOIN", "song", "AS", "T2", "ON", "T1.f_id", "=", "T2.f_id", "WHERE", "T1.formats", "=", "``", "mp3", "''", "INTERSECT", "SELECT", "song_name", "FROM", "song", "WHERE", "resolution", "<", "1000"], "query_toks_no_value": ["select", "t2", ".", "song_name", "from", "files", "as", "t1", "join", "song", "as", "t2", "on", "t1", ".", "f_id", "=", "t2", ".", "f_id", "where", "t1", ".", "formats", "=", "value", "intersect", "select", "song_name", "from", "song", "where", "resolution", "<", "value"], "question": "Return the names of songs for which format is mp3 and resolution is below 1000.", "question_toks": ["Return", "the", "names", "of", "songs", "for", "which", "format", "is", "mp3", "and", "resolution", "is", "below", "1000", "."], "guid": 1584}}
{"text": "stadium: Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average; singer: Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male; concert: concert_ID, concert_Name, Theme, Stadium_ID, Year; singer_in_concert: concert_ID, Singer_ID | How many concerts occurred in 2014 or 2015?", "sql": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015", "example": {"db_id": "concert_singer", "query": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "concert", "WHERE", "YEAR", "=", "2014", "OR", "YEAR", "=", "2015"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "concert", "where", "year", "=", "value", "or", "year", "=", "value"], "question": "How many concerts occurred in 2014 or 2015?", "question_toks": ["How", "many", "concerts", "occurred", "in", "2014", "or", "2015", "?"], "guid": 1585}}
{"text": "stadium: Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average; singer: Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male; concert: concert_ID, concert_Name, Theme, Stadium_ID, Year; singer_in_concert: concert_ID, Singer_ID | Show location and name for all stadiums with a capacity between 5000 and 10000.", "sql": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000", "example": {"db_id": "concert_singer", "query": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000", "query_toks": ["SELECT", "LOCATION", ",", "name", "FROM", "stadium", "WHERE", "capacity", "BETWEEN", "5000", "AND", "10000"], "query_toks_no_value": ["select", "location", ",", "name", "from", "stadium", "where", "capacity", "between", "value", "and", "value"], "question": "Show location and name for all stadiums with a capacity between 5000 and 10000.", "question_toks": ["Show", "location", "and", "name", "for", "all", "stadiums", "with", "a", "capacity", "between", "5000", "and", "10000", "."], "guid": 1586}}
{"text": "artist: Artist_ID, Artist, Age, Famous_Title, Famous_Release_date; volume: Volume_ID, Volume_Issue, Issue_Date, Weeks_on_Top, Song, Artist_ID; music_festival: ID, Music_Festival, Date_of_ceremony, Category, Volume, Result | What is the most common result of the music festival?", "sql": "SELECT RESULT FROM music_festival GROUP BY RESULT ORDER BY COUNT(*) DESC LIMIT 1", "example": {"db_id": "music_4", "query": "SELECT RESULT FROM music_festival GROUP BY RESULT ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "RESULT", "FROM", "music_festival", "GROUP", "BY", "RESULT", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "result", "from", "music_festival", "group", "by", "result", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the most common result of the music festival?", "question_toks": ["What", "is", "the", "most", "common", "result", "of", "the", "music", "festival", "?"], "guid": 1587}}
{"text": "musical: Musical_ID, Name, Year, Award, Category, Nominee, Result; actor: Actor_ID, Name, Musical_ID, Character, Duration, age | List the name of actors in ascending alphabetical order.", "sql": "SELECT Name FROM actor ORDER BY Name ASC", "example": {"db_id": "musical", "query": "SELECT Name FROM actor ORDER BY Name ASC", "query_toks": ["SELECT", "Name", "FROM", "actor", "ORDER", "BY", "Name", "ASC"], "query_toks_no_value": ["select", "name", "from", "actor", "order", "by", "name", "asc"], "question": "List the name of actors in ascending alphabetical order.", "question_toks": ["List", "the", "name", "of", "actors", "in", "ascending", "alphabetical", "order", "."], "guid": 1588}}
{"text": "artist: Artist_ID, Artist, Age, Famous_Title, Famous_Release_date; volume: Volume_ID, Volume_Issue, Issue_Date, Weeks_on_Top, Song, Artist_ID; music_festival: ID, Music_Festival, Date_of_ceremony, Category, Volume, Result | What is the issue date of the volume with the minimum weeks on top?", "sql": "SELECT Issue_Date FROM volume ORDER BY Weeks_on_Top ASC LIMIT 1", "example": {"db_id": "music_4", "query": "SELECT Issue_Date FROM volume ORDER BY Weeks_on_Top ASC LIMIT 1", "query_toks": ["SELECT", "Issue_Date", "FROM", "volume", "ORDER", "BY", "Weeks_on_Top", "ASC", "LIMIT", "1"], "query_toks_no_value": ["select", "issue_date", "from", "volume", "order", "by", "weeks_on_top", "asc", "limit", "value"], "question": "What is the issue date of the volume with the minimum weeks on top?", "question_toks": ["What", "is", "the", "issue", "date", "of", "the", "volume", "with", "the", "minimum", "weeks", "on", "top", "?"], "guid": 1589}}
{"text": "artist: Artist_ID, Artist, Age, Famous_Title, Famous_Release_date; volume: Volume_ID, Volume_Issue, Issue_Date, Weeks_on_Top, Song, Artist_ID; music_festival: ID, Music_Festival, Date_of_ceremony, Category, Volume, Result | What are the the songs in volumes, listed in ascending order?", "sql": "SELECT Song FROM volume ORDER BY Song", "example": {"db_id": "music_4", "query": "SELECT Song FROM volume ORDER BY Song", "query_toks": ["SELECT", "Song", "FROM", "volume", "ORDER", "BY", "Song"], "query_toks_no_value": ["select", "song", "from", "volume", "order", "by", "song"], "question": "What are the the songs in volumes, listed in ascending order?", "question_toks": ["What", "are", "the", "the", "songs", "in", "volumes", ",", "listed", "in", "ascending", "order", "?"], "guid": 1590}}
{"text": "Songs: SongId, Title; Albums: AId, Title, Year, Label, Type; Band: Id, Firstname, Lastname; Instruments: SongId, BandmateId, Instrument; Performance: SongId, Bandmate, StagePosition; Tracklists: AlbumId, Position, SongId; Vocals: SongId, Bandmate, Type | How many songs have vocals of type lead?", "sql": "SELECT count(DISTINCT title) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE TYPE  =  \"lead\"", "example": {"db_id": "music_2", "query": "SELECT count(DISTINCT title) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE TYPE  =  \"lead\"", "query_toks": ["SELECT", "count", "(", "DISTINCT", "title", ")", "FROM", "vocals", "AS", "T1", "JOIN", "songs", "AS", "T2", "ON", "T1.songid", "=", "T2.songid", "WHERE", "TYPE", "=", "``", "lead", "''"], "query_toks_no_value": ["select", "count", "(", "distinct", "title", ")", "from", "vocals", "as", "t1", "join", "songs", "as", "t2", "on", "t1", ".", "songid", "=", "t2", ".", "songid", "where", "type", "=", "value"], "question": "How many songs have vocals of type lead?", "question_toks": ["How", "many", "songs", "have", "vocals", "of", "type", "lead", "?"], "guid": 1591}}
{"text": "genre: g_name, rating, most_popular_in; artist: artist_name, country, gender, preferred_genre; files: f_id, artist_name, file_size, duration, formats; song: song_name, artist_name, country, f_id, genre_is, rating, languages, releasedate, resolution | How many Bangladeshi artists are listed?", "sql": "SELECT count(*) FROM artist WHERE country  =  \"Bangladesh\"", "example": {"db_id": "music_1", "query": "SELECT count(*) FROM artist WHERE country  =  \"Bangladesh\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "artist", "WHERE", "country", "=", "``", "Bangladesh", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "artist", "where", "country", "=", "value"], "question": "How many Bangladeshi artists are listed?", "question_toks": ["How", "many", "Bangladeshi", "artists", "are", "listed", "?"], "guid": 1592}}
{"text": "Songs: SongId, Title; Albums: AId, Title, Year, Label, Type; Band: Id, Firstname, Lastname; Instruments: SongId, BandmateId, Instrument; Performance: SongId, Bandmate, StagePosition; Tracklists: AlbumId, Position, SongId; Vocals: SongId, Bandmate, Type | What is the last name of the artist who sang the most songs?", "sql": "SELECT T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId GROUP BY lastname ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "music_2", "query": "SELECT T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId GROUP BY lastname ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T2.lastname", "FROM", "Performance", "AS", "T1", "JOIN", "Band", "AS", "T2", "ON", "T1.bandmate", "=", "T2.id", "JOIN", "Songs", "AS", "T3", "ON", "T3.SongId", "=", "T1.SongId", "GROUP", "BY", "lastname", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "lastname", "from", "performance", "as", "t1", "join", "band", "as", "t2", "on", "t1", ".", "bandmate", "=", "t2", ".", "id", "join", "songs", "as", "t3", "on", "t3", ".", "songid", "=", "t1", ".", "songid", "group", "by", "lastname", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the last name of the artist who sang the most songs?", "question_toks": ["What", "is", "the", "last", "name", "of", "the", "artist", "who", "sang", "the", "most", "songs", "?"], "guid": 1593}}
{"text": "conductor: Conductor_ID, Name, Age, Nationality, Year_of_Work; orchestra: Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format; performance: Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share; show: Show_ID, Performance_ID, If_first_show, Result, Attendance | Return the record companies of orchestras, sorted descending by the years in which they were founded.", "sql": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC", "example": {"db_id": "orchestra", "query": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC", "query_toks": ["SELECT", "Record_Company", "FROM", "orchestra", "ORDER", "BY", "Year_of_Founded", "DESC"], "query_toks_no_value": ["select", "record_company", "from", "orchestra", "order", "by", "year_of_founded", "desc"], "question": "Return the record companies of orchestras, sorted descending by the years in which they were founded.", "question_toks": ["Return", "the", "record", "companies", "of", "orchestras", ",", "sorted", "descending", "by", "the", "years", "in", "which", "they", "were", "founded", "."], "guid": 1594}}
{"text": "genre: g_name, rating, most_popular_in; artist: artist_name, country, gender, preferred_genre; files: f_id, artist_name, file_size, duration, formats; song: song_name, artist_name, country, f_id, genre_is, rating, languages, releasedate, resolution | Find the name and country of origin for all artists who have release at least one song of resolution above 900.", "sql": "SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.resolution  >  900 GROUP BY T2.artist_name HAVING count(*)  >=  1", "example": {"db_id": "music_1", "query": "SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.resolution  >  900 GROUP BY T2.artist_name HAVING count(*)  >=  1", "query_toks": ["SELECT", "T1.artist_name", ",", "T1.country", "FROM", "artist", "AS", "T1", "JOIN", "song", "AS", "T2", "ON", "T1.artist_name", "=", "T2.artist_name", "WHERE", "T2.resolution", ">", "900", "GROUP", "BY", "T2.artist_name", "HAVING", "count", "(", "*", ")", ">", "=", "1"], "query_toks_no_value": ["select", "t1", ".", "artist_name", ",", "t1", ".", "country", "from", "artist", "as", "t1", "join", "song", "as", "t2", "on", "t1", ".", "artist_name", "=", "t2", ".", "artist_name", "where", "t2", ".", "resolution", ">", "value", "group", "by", "t2", ".", "artist_name", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "Find the name and country of origin for all artists who have release at least one song of resolution above 900.", "question_toks": ["Find", "the", "name", "and", "country", "of", "origin", "for", "all", "artists", "who", "have", "release", "at", "least", "one", "song", "of", "resolution", "above", "900", "."], "guid": 1595}}
{"text": "conductor: Conductor_ID, Name, Age, Nationality, Year_of_Work; orchestra: Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format; performance: Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share; show: Show_ID, Performance_ID, If_first_show, Result, Attendance | Count the number of conductors.", "sql": "SELECT count(*) FROM conductor", "example": {"db_id": "orchestra", "query": "SELECT count(*) FROM conductor", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "conductor"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "conductor"], "question": "Count the number of conductors.", "question_toks": ["Count", "the", "number", "of", "conductors", "."], "guid": 1596}}
{"text": "Songs: SongId, Title; Albums: AId, Title, Year, Label, Type; Band: Id, Firstname, Lastname; Instruments: SongId, BandmateId, Instrument; Performance: SongId, Bandmate, StagePosition; Tracklists: AlbumId, Position, SongId; Vocals: SongId, Bandmate, Type | What are the names of the songs by the artist whose last name is \"Heilo\"?", "sql": "SELECT T3.Title FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T2.Lastname  =  \"Heilo\"", "example": {"db_id": "music_2", "query": "SELECT T3.Title FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T2.Lastname  =  \"Heilo\"", "query_toks": ["SELECT", "T3.Title", "FROM", "Performance", "AS", "T1", "JOIN", "Band", "AS", "T2", "ON", "T1.bandmate", "=", "T2.id", "JOIN", "Songs", "AS", "T3", "ON", "T3.SongId", "=", "T1.SongId", "WHERE", "T2.Lastname", "=", "``", "Heilo", "''"], "query_toks_no_value": ["select", "t3", ".", "title", "from", "performance", "as", "t1", "join", "band", "as", "t2", "on", "t1", ".", "bandmate", "=", "t2", ".", "id", "join", "songs", "as", "t3", "on", "t3", ".", "songid", "=", "t1", ".", "songid", "where", "t2", ".", "lastname", "=", "value"], "question": "What are the names of the songs by the artist whose last name is \"Heilo\"?", "question_toks": ["What", "are", "the", "names", "of", "the", "songs", "by", "the", "artist", "whose", "last", "name", "is", "``", "Heilo", "''", "?"], "guid": 1597}}
{"text": "Songs: SongId, Title; Albums: AId, Title, Year, Label, Type; Band: Id, Firstname, Lastname; Instruments: SongId, BandmateId, Instrument; Performance: SongId, Bandmate, StagePosition; Tracklists: AlbumId, Position, SongId; Vocals: SongId, Bandmate, Type | What are the different stage positions for all musicians whose first name is \"Solveig\"?", "sql": "SELECT DISTINCT T1.stageposition FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id WHERE Firstname  =  \"Solveig\"", "example": {"db_id": "music_2", "query": "SELECT DISTINCT T1.stageposition FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id WHERE Firstname  =  \"Solveig\"", "query_toks": ["SELECT", "DISTINCT", "T1.stageposition", "FROM", "Performance", "AS", "T1", "JOIN", "Band", "AS", "T2", "ON", "T1.bandmate", "=", "T2.id", "WHERE", "Firstname", "=", "``", "Solveig", "''"], "query_toks_no_value": ["select", "distinct", "t1", ".", "stageposition", "from", "performance", "as", "t1", "join", "band", "as", "t2", "on", "t1", ".", "bandmate", "=", "t2", ".", "id", "where", "firstname", "=", "value"], "question": "What are the different stage positions for all musicians whose first name is \"Solveig\"?", "question_toks": ["What", "are", "the", "different", "stage", "positions", "for", "all", "musicians", "whose", "first", "name", "is", "``", "Solveig", "''", "?"], "guid": 1598}}
{"text": "genre: g_name, rating, most_popular_in; artist: artist_name, country, gender, preferred_genre; files: f_id, artist_name, file_size, duration, formats; song: song_name, artist_name, country, f_id, genre_is, rating, languages, releasedate, resolution | Find the names and number of works of all artists who have at least one English songs.", "sql": "SELECT T1.artist_name ,  count(*) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.languages  =  \"english\" GROUP BY T2.artist_name HAVING count(*)  >=  1", "example": {"db_id": "music_1", "query": "SELECT T1.artist_name ,  count(*) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.languages  =  \"english\" GROUP BY T2.artist_name HAVING count(*)  >=  1", "query_toks": ["SELECT", "T1.artist_name", ",", "count", "(", "*", ")", "FROM", "artist", "AS", "T1", "JOIN", "song", "AS", "T2", "ON", "T1.artist_name", "=", "T2.artist_name", "WHERE", "T2.languages", "=", "``", "english", "''", "GROUP", "BY", "T2.artist_name", "HAVING", "count", "(", "*", ")", ">", "=", "1"], "query_toks_no_value": ["select", "t1", ".", "artist_name", ",", "count", "(", "*", ")", "from", "artist", "as", "t1", "join", "song", "as", "t2", "on", "t1", ".", "artist_name", "=", "t2", ".", "artist_name", "where", "t2", ".", "languages", "=", "value", "group", "by", "t2", ".", "artist_name", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "Find the names and number of works of all artists who have at least one English songs.", "question_toks": ["Find", "the", "names", "and", "number", "of", "works", "of", "all", "artists", "who", "have", "at", "least", "one", "English", "songs", "."], "guid": 1599}}
{"text": "conductor: Conductor_ID, Name, Age, Nationality, Year_of_Work; orchestra: Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format; performance: Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share; show: Show_ID, Performance_ID, If_first_show, Result, Attendance | What are the maximum and minimum share of performances whose type is not \"Live final\".", "sql": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"", "example": {"db_id": "orchestra", "query": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"", "query_toks": ["SELECT", "max", "(", "SHARE", ")", ",", "min", "(", "SHARE", ")", "FROM", "performance", "WHERE", "TYPE", "!", "=", "``", "Live", "final", "''"], "query_toks_no_value": ["select", "max", "(", "share", ")", ",", "min", "(", "share", ")", "from", "performance", "where", "type", "!", "=", "value"], "question": "What are the maximum and minimum share of performances whose type is not \"Live final\".", "question_toks": ["What", "are", "the", "maximum", "and", "minimum", "share", "of", "performances", "whose", "type", "is", "not", "``", "Live", "final", "''", "."], "guid": 1600}}
{"text": "genre: g_name, rating, most_popular_in; artist: artist_name, country, gender, preferred_genre; files: f_id, artist_name, file_size, duration, formats; song: song_name, artist_name, country, f_id, genre_is, rating, languages, releasedate, resolution | What is the name of the artist who produced the shortest song?", "sql": "SELECT T1.artist_name FROM song AS T1 JOIN files AS T2 ON T1.f_id  =  T2.f_id ORDER BY T2.duration LIMIT 1", "example": {"db_id": "music_1", "query": "SELECT T1.artist_name FROM song AS T1 JOIN files AS T2 ON T1.f_id  =  T2.f_id ORDER BY T2.duration LIMIT 1", "query_toks": ["SELECT", "T1.artist_name", "FROM", "song", "AS", "T1", "JOIN", "files", "AS", "T2", "ON", "T1.f_id", "=", "T2.f_id", "ORDER", "BY", "T2.duration", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "artist_name", "from", "song", "as", "t1", "join", "files", "as", "t2", "on", "t1", ".", "f_id", "=", "t2", ".", "f_id", "order", "by", "t2", ".", "duration", "limit", "value"], "question": "What is the name of the artist who produced the shortest song?", "question_toks": ["What", "is", "the", "name", "of", "the", "artist", "who", "produced", "the", "shortest", "song", "?"], "guid": 1601}}
{"text": "artist: Artist_ID, Artist, Age, Famous_Title, Famous_Release_date; volume: Volume_ID, Volume_Issue, Issue_Date, Weeks_on_Top, Song, Artist_ID; music_festival: ID, Music_Festival, Date_of_ceremony, Category, Volume, Result | Please list the age and famous title of artists in descending order of age.", "sql": "SELECT Famous_Title ,  Age FROM artist ORDER BY Age DESC", "example": {"db_id": "music_4", "query": "SELECT Famous_Title ,  Age FROM artist ORDER BY Age DESC", "query_toks": ["SELECT", "Famous_Title", ",", "Age", "FROM", "artist", "ORDER", "BY", "Age", "DESC"], "query_toks_no_value": ["select", "famous_title", ",", "age", "from", "artist", "order", "by", "age", "desc"], "question": "Please list the age and famous title of artists in descending order of age.", "question_toks": ["Please", "list", "the", "age", "and", "famous", "title", "of", "artists", "in", "descending", "order", "of", "age", "."], "guid": 1602}}
{"text": "Songs: SongId, Title; Albums: AId, Title, Year, Label, Type; Band: Id, Firstname, Lastname; Instruments: SongId, BandmateId, Instrument; Performance: SongId, Bandmate, StagePosition; Tracklists: AlbumId, Position, SongId; Vocals: SongId, Bandmate, Type | How many instruments does the song \"Badlands\" use?", "sql": "SELECT count(DISTINCT instrument) FROM instruments AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Badlands\"", "example": {"db_id": "music_2", "query": "SELECT count(DISTINCT instrument) FROM instruments AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Badlands\"", "query_toks": ["SELECT", "count", "(", "DISTINCT", "instrument", ")", "FROM", "instruments", "AS", "T1", "JOIN", "songs", "AS", "T2", "ON", "T1.songid", "=", "T2.songid", "WHERE", "title", "=", "``", "Badlands", "''"], "query_toks_no_value": ["select", "count", "(", "distinct", "instrument", ")", "from", "instruments", "as", "t1", "join", "songs", "as", "t2", "on", "t1", ".", "songid", "=", "t2", ".", "songid", "where", "title", "=", "value"], "question": "How many instruments does the song \"Badlands\" use?", "question_toks": ["How", "many", "instruments", "does", "the", "song", "``", "Badlands", "''", "use", "?"], "guid": 1603}}
{"text": "genre: g_name, rating, most_popular_in; artist: artist_name, country, gender, preferred_genre; files: f_id, artist_name, file_size, duration, formats; song: song_name, artist_name, country, f_id, genre_is, rating, languages, releasedate, resolution | What are the names of artists who are Male and are from UK?", "sql": "SELECT artist_name FROM artist WHERE country  =  \"UK\" AND gender  =  \"Male\"", "example": {"db_id": "music_1", "query": "SELECT artist_name FROM artist WHERE country  =  \"UK\" AND gender  =  \"Male\"", "query_toks": ["SELECT", "artist_name", "FROM", "artist", "WHERE", "country", "=", "``", "UK", "''", "AND", "gender", "=", "``", "Male", "''"], "query_toks_no_value": ["select", "artist_name", "from", "artist", "where", "country", "=", "value", "and", "gender", "=", "value"], "question": "What are the names of artists who are Male and are from UK?", "question_toks": ["What", "are", "the", "names", "of", "artists", "who", "are", "Male", "and", "are", "from", "UK", "?"], "guid": 1604}}
{"text": "singer: Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship; song: Song_ID, Title, Singer_ID, Sales, Highest_Position | Show different citizenship of singers and the number of singers of each citizenship.", "sql": "SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship", "example": {"db_id": "singer", "query": "SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship", "query_toks": ["SELECT", "Citizenship", ",", "COUNT", "(", "*", ")", "FROM", "singer", "GROUP", "BY", "Citizenship"], "query_toks_no_value": ["select", "citizenship", ",", "count", "(", "*", ")", "from", "singer", "group", "by", "citizenship"], "question": "Show different citizenship of singers and the number of singers of each citizenship.", "question_toks": ["Show", "different", "citizenship", "of", "singers", "and", "the", "number", "of", "singers", "of", "each", "citizenship", "."], "guid": 1605}}
{"text": "stadium: Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average; singer: Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male; concert: concert_ID, concert_Name, Theme, Stadium_ID, Year; singer_in_concert: concert_ID, Singer_ID | What are the names and release years for all the songs of the youngest singer?", "sql": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1", "example": {"db_id": "concert_singer", "query": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1", "query_toks": ["SELECT", "song_name", ",", "song_release_year", "FROM", "singer", "ORDER", "BY", "age", "LIMIT", "1"], "query_toks_no_value": ["select", "song_name", ",", "song_release_year", "from", "singer", "order", "by", "age", "limit", "value"], "question": "What are the names and release years for all the songs of the youngest singer?", "question_toks": ["What", "are", "the", "names", "and", "release", "years", "for", "all", "the", "songs", "of", "the", "youngest", "singer", "?"], "guid": 1606}}
{"text": "singer: Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship; song: Song_ID, Title, Singer_ID, Sales, Highest_Position | Show the citizenship shared by singers with birth year before 1945 and after 1955.", "sql": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955", "example": {"db_id": "singer", "query": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955", "query_toks": ["SELECT", "Citizenship", "FROM", "singer", "WHERE", "Birth_Year", "<", "1945", "INTERSECT", "SELECT", "Citizenship", "FROM", "singer", "WHERE", "Birth_Year", ">", "1955"], "query_toks_no_value": ["select", "citizenship", "from", "singer", "where", "birth_year", "<", "value", "intersect", "select", "citizenship", "from", "singer", "where", "birth_year", ">", "value"], "question": "Show the citizenship shared by singers with birth year before 1945 and after 1955.", "question_toks": ["Show", "the", "citizenship", "shared", "by", "singers", "with", "birth", "year", "before", "1945", "and", "after", "1955", "."], "guid": 1607}}
{"text": "singer: Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship; song: Song_ID, Title, Singer_ID, Sales, Highest_Position | List the name of singers in ascending order of net worth.", "sql": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC", "example": {"db_id": "singer", "query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC", "query_toks": ["SELECT", "Name", "FROM", "singer", "ORDER", "BY", "Net_Worth_Millions", "ASC"], "query_toks_no_value": ["select", "name", "from", "singer", "order", "by", "net_worth_millions", "asc"], "question": "List the name of singers in ascending order of net worth.", "question_toks": ["List", "the", "name", "of", "singers", "in", "ascending", "order", "of", "net", "worth", "."], "guid": 1608}}
{"text": "conductor: Conductor_ID, Name, Age, Nationality, Year_of_Work; orchestra: Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format; performance: Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share; show: Show_ID, Performance_ID, If_first_show, Result, Attendance | Find the number of orchestras whose record format is \"CD\" or \"DVD\".", "sql": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\"", "example": {"db_id": "orchestra", "query": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\"", "query_toks": ["SELECT", "COUNT", "(", "*", ")", "FROM", "orchestra", "WHERE", "Major_Record_Format", "=", "``", "CD", "''", "OR", "Major_Record_Format", "=", "``", "DVD", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "orchestra", "where", "major_record_format", "=", "value", "or", "major_record_format", "=", "value"], "question": "Find the number of orchestras whose record format is \"CD\" or \"DVD\".", "question_toks": ["Find", "the", "number", "of", "orchestras", "whose", "record", "format", "is", "``", "CD", "''", "or", "``", "DVD", "''", "."], "guid": 1609}}
{"text": "Songs: SongId, Title; Albums: AId, Title, Year, Label, Type; Band: Id, Firstname, Lastname; Instruments: SongId, BandmateId, Instrument; Performance: SongId, Bandmate, StagePosition; Tracklists: AlbumId, Position, SongId; Vocals: SongId, Bandmate, Type | How many songs have used the instrument \"drums\"?", "sql": "SELECT count(*) FROM instruments WHERE instrument  =  \"drums\"", "example": {"db_id": "music_2", "query": "SELECT count(*) FROM instruments WHERE instrument  =  \"drums\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "instruments", "WHERE", "instrument", "=", "``", "drums", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "instruments", "where", "instrument", "=", "value"], "question": "How many songs have used the instrument \"drums\"?", "question_toks": ["How", "many", "songs", "have", "used", "the", "instrument", "``", "drums", "''", "?"], "guid": 1610}}
{"text": "genre: g_name, rating, most_popular_in; artist: artist_name, country, gender, preferred_genre; files: f_id, artist_name, file_size, duration, formats; song: song_name, artist_name, country, f_id, genre_is, rating, languages, releasedate, resolution | What are the names of the singers who sang the top 3 most highly rated songs and what countries do they hail from?", "sql": "SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name ORDER BY T2.rating DESC LIMIT 3", "example": {"db_id": "music_1", "query": "SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name ORDER BY T2.rating DESC LIMIT 3", "query_toks": ["SELECT", "T1.artist_name", ",", "T1.country", "FROM", "artist", "AS", "T1", "JOIN", "song", "AS", "T2", "ON", "T1.artist_name", "=", "T2.artist_name", "ORDER", "BY", "T2.rating", "DESC", "LIMIT", "3"], "query_toks_no_value": ["select", "t1", ".", "artist_name", ",", "t1", ".", "country", "from", "artist", "as", "t1", "join", "song", "as", "t2", "on", "t1", ".", "artist_name", "=", "t2", ".", "artist_name", "order", "by", "t2", ".", "rating", "desc", "limit", "value"], "question": "What are the names of the singers who sang the top 3 most highly rated songs and what countries do they hail from?", "question_toks": ["What", "are", "the", "names", "of", "the", "singers", "who", "sang", "the", "top", "3", "most", "highly", "rated", "songs", "and", "what", "countries", "do", "they", "hail", "from", "?"], "guid": 1611}}
{"text": "Songs: SongId, Title; Albums: AId, Title, Year, Label, Type; Band: Id, Firstname, Lastname; Instruments: SongId, BandmateId, Instrument; Performance: SongId, Bandmate, StagePosition; Tracklists: AlbumId, Position, SongId; Vocals: SongId, Bandmate, Type | Find the name of songs that does not have a back vocal.", "sql": "SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid WHERE TYPE  =  \"back\"", "example": {"db_id": "music_2", "query": "SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid WHERE TYPE  =  \"back\"", "query_toks": ["SELECT", "DISTINCT", "title", "FROM", "vocals", "AS", "t1", "JOIN", "songs", "AS", "t2", "ON", "t1.songid", "=", "t2.songid", "EXCEPT", "SELECT", "t2.title", "FROM", "vocals", "AS", "t1", "JOIN", "songs", "AS", "t2", "ON", "t1.songid", "=", "t2.songid", "WHERE", "TYPE", "=", "``", "back", "''"], "query_toks_no_value": ["select", "distinct", "title", "from", "vocals", "as", "t1", "join", "songs", "as", "t2", "on", "t1", ".", "songid", "=", "t2", ".", "songid", "except", "select", "t2", ".", "title", "from", "vocals", "as", "t1", "join", "songs", "as", "t2", "on", "t1", ".", "songid", "=", "t2", ".", "songid", "where", "type", "=", "value"], "question": "Find the name of songs that does not have a back vocal.", "question_toks": ["Find", "the", "name", "of", "songs", "that", "does", "not", "have", "a", "back", "vocal", "."], "guid": 1612}}
{"text": "stadium: Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average; singer: Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male; concert: concert_ID, concert_Name, Theme, Stadium_ID, Year; singer_in_concert: concert_ID, Singer_ID | How many singers are from each country?", "sql": "SELECT country ,  count(*) FROM singer GROUP BY country", "example": {"db_id": "concert_singer", "query": "SELECT country ,  count(*) FROM singer GROUP BY country", "query_toks": ["SELECT", "country", ",", "count", "(", "*", ")", "FROM", "singer", "GROUP", "BY", "country"], "query_toks_no_value": ["select", "country", ",", "count", "(", "*", ")", "from", "singer", "group", "by", "country"], "question": "How many singers are from each country?", "question_toks": ["How", "many", "singers", "are", "from", "each", "country", "?"], "guid": 1613}}
{"text": "conductor: Conductor_ID, Name, Age, Nationality, Year_of_Work; orchestra: Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format; performance: Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share; show: Show_ID, Performance_ID, If_first_show, Result, Attendance | How many orchestras does each record company manage?", "sql": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company", "example": {"db_id": "orchestra", "query": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company", "query_toks": ["SELECT", "Record_Company", ",", "COUNT", "(", "*", ")", "FROM", "orchestra", "GROUP", "BY", "Record_Company"], "query_toks_no_value": ["select", "record_company", ",", "count", "(", "*", ")", "from", "orchestra", "group", "by", "record_company"], "question": "How many orchestras does each record company manage?", "question_toks": ["How", "many", "orchestras", "does", "each", "record", "company", "manage", "?"], "guid": 1614}}
{"text": "musical: Musical_ID, Name, Year, Award, Category, Nominee, Result; actor: Actor_ID, Name, Musical_ID, Character, Duration, age | List the name of musicals that do not have actors.", "sql": "SELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)", "example": {"db_id": "musical", "query": "SELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)", "query_toks": ["SELECT", "Name", "FROM", "musical", "WHERE", "Musical_ID", "NOT", "IN", "(", "SELECT", "Musical_ID", "FROM", "actor", ")"], "query_toks_no_value": ["select", "name", "from", "musical", "where", "musical_id", "not", "in", "(", "select", "musical_id", "from", "actor", ")"], "question": "List the name of musicals that do not have actors.", "question_toks": ["List", "the", "name", "of", "musicals", "that", "do", "not", "have", "actors", "."], "guid": 1615}}
{"text": "Songs: SongId, Title; Albums: AId, Title, Year, Label, Type; Band: Id, Firstname, Lastname; Instruments: SongId, BandmateId, Instrument; Performance: SongId, Bandmate, StagePosition; Tracklists: AlbumId, Position, SongId; Vocals: SongId, Bandmate, Type | Find the number of vocal types used in song \"Demon Kitty Rag\"?", "sql": "SELECT count(*) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Demon Kitty Rag\"", "example": {"db_id": "music_2", "query": "SELECT count(*) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Demon Kitty Rag\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "vocals", "AS", "T1", "JOIN", "songs", "AS", "T2", "ON", "T1.songid", "=", "T2.songid", "WHERE", "title", "=", "``", "Demon", "Kitty", "Rag", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "vocals", "as", "t1", "join", "songs", "as", "t2", "on", "t1", ".", "songid", "=", "t2", ".", "songid", "where", "title", "=", "value"], "question": "Find the number of vocal types used in song \"Demon Kitty Rag\"?", "question_toks": ["Find", "the", "number", "of", "vocal", "types", "used", "in", "song", "``", "Demon", "Kitty", "Rag", "''", "?"], "guid": 1616}}
{"text": "genre: g_name, rating, most_popular_in; artist: artist_name, country, gender, preferred_genre; files: f_id, artist_name, file_size, duration, formats; song: song_name, artist_name, country, f_id, genre_is, rating, languages, releasedate, resolution | What are the shortest duration and lowest rating of songs grouped by genre and ordered by genre?", "sql": "SELECT min(T1.duration) ,  min(T2.rating) ,  T2.genre_is FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id GROUP BY T2.genre_is ORDER BY T2.genre_is", "example": {"db_id": "music_1", "query": "SELECT min(T1.duration) ,  min(T2.rating) ,  T2.genre_is FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id GROUP BY T2.genre_is ORDER BY T2.genre_is", "query_toks": ["SELECT", "min", "(", "T1.duration", ")", ",", "min", "(", "T2.rating", ")", ",", "T2.genre_is", "FROM", "files", "AS", "T1", "JOIN", "song", "AS", "T2", "ON", "T1.f_id", "=", "T2.f_id", "GROUP", "BY", "T2.genre_is", "ORDER", "BY", "T2.genre_is"], "query_toks_no_value": ["select", "min", "(", "t1", ".", "duration", ")", ",", "min", "(", "t2", ".", "rating", ")", ",", "t2", ".", "genre_is", "from", "files", "as", "t1", "join", "song", "as", "t2", "on", "t1", ".", "f_id", "=", "t2", ".", "f_id", "group", "by", "t2", ".", "genre_is", "order", "by", "t2", ".", "genre_is"], "question": "What are the shortest duration and lowest rating of songs grouped by genre and ordered by genre?", "question_toks": ["What", "are", "the", "shortest", "duration", "and", "lowest", "rating", "of", "songs", "grouped", "by", "genre", "and", "ordered", "by", "genre", "?"], "guid": 1617}}
{"text": "musical: Musical_ID, Name, Year, Award, Category, Nominee, Result; actor: Actor_ID, Name, Musical_ID, Character, Duration, age | Show names of actors in descending order of the year their musical is awarded.", "sql": "SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID ORDER BY T2.Year DESC", "example": {"db_id": "musical", "query": "SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID ORDER BY T2.Year DESC", "query_toks": ["SELECT", "T1.Name", "FROM", "actor", "AS", "T1", "JOIN", "musical", "AS", "T2", "ON", "T1.Musical_ID", "=", "T2.Musical_ID", "ORDER", "BY", "T2.Year", "DESC"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "actor", "as", "t1", "join", "musical", "as", "t2", "on", "t1", ".", "musical_id", "=", "t2", ".", "musical_id", "order", "by", "t2", ".", "year", "desc"], "question": "Show names of actors in descending order of the year their musical is awarded.", "question_toks": ["Show", "names", "of", "actors", "in", "descending", "order", "of", "the", "year", "their", "musical", "is", "awarded", "."], "guid": 1618}}
{"text": "Songs: SongId, Title; Albums: AId, Title, Year, Label, Type; Band: Id, Firstname, Lastname; Instruments: SongId, BandmateId, Instrument; Performance: SongId, Bandmate, StagePosition; Tracklists: AlbumId, Position, SongId; Vocals: SongId, Bandmate, Type | What information is there on albums from 2010?", "sql": "SELECT * FROM Albums WHERE YEAR  =  2010", "example": {"db_id": "music_2", "query": "SELECT * FROM Albums WHERE YEAR  =  2010", "query_toks": ["SELECT", "*", "FROM", "Albums", "WHERE", "YEAR", "=", "2010"], "query_toks_no_value": ["select", "*", "from", "albums", "where", "year", "=", "value"], "question": "What information is there on albums from 2010?", "question_toks": ["What", "information", "is", "there", "on", "albums", "from", "2010", "?"], "guid": 1619}}
{"text": "Songs: SongId, Title; Albums: AId, Title, Year, Label, Type; Band: Id, Firstname, Lastname; Instruments: SongId, BandmateId, Instrument; Performance: SongId, Bandmate, StagePosition; Tracklists: AlbumId, Position, SongId; Vocals: SongId, Bandmate, Type | What are the names of the songs that do not have back vocals?", "sql": "SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid WHERE TYPE  =  \"back\"", "example": {"db_id": "music_2", "query": "SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid WHERE TYPE  =  \"back\"", "query_toks": ["SELECT", "DISTINCT", "title", "FROM", "vocals", "AS", "t1", "JOIN", "songs", "AS", "t2", "ON", "t1.songid", "=", "t2.songid", "EXCEPT", "SELECT", "t2.title", "FROM", "vocals", "AS", "t1", "JOIN", "songs", "AS", "t2", "ON", "t1.songid", "=", "t2.songid", "WHERE", "TYPE", "=", "``", "back", "''"], "query_toks_no_value": ["select", "distinct", "title", "from", "vocals", "as", "t1", "join", "songs", "as", "t2", "on", "t1", ".", "songid", "=", "t2", ".", "songid", "except", "select", "t2", ".", "title", "from", "vocals", "as", "t1", "join", "songs", "as", "t2", "on", "t1", ".", "songid", "=", "t2", ".", "songid", "where", "type", "=", "value"], "question": "What are the names of the songs that do not have back vocals?", "question_toks": ["What", "are", "the", "names", "of", "the", "songs", "that", "do", "not", "have", "back", "vocals", "?"], "guid": 1620}}
{"text": "Songs: SongId, Title; Albums: AId, Title, Year, Label, Type; Band: Id, Firstname, Lastname; Instruments: SongId, BandmateId, Instrument; Performance: SongId, Bandmate, StagePosition; Tracklists: AlbumId, Position, SongId; Vocals: SongId, Bandmate, Type | How many unique labels are there for albums?", "sql": "SELECT count(DISTINCT label) FROM albums", "example": {"db_id": "music_2", "query": "SELECT count(DISTINCT label) FROM albums", "query_toks": ["SELECT", "count", "(", "DISTINCT", "label", ")", "FROM", "albums"], "query_toks_no_value": ["select", "count", "(", "distinct", "label", ")", "from", "albums"], "question": "How many unique labels are there for albums?", "question_toks": ["How", "many", "unique", "labels", "are", "there", "for", "albums", "?"], "guid": 1621}}
{"text": "stadium: Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average; singer: Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male; concert: concert_ID, concert_Name, Theme, Stadium_ID, Year; singer_in_concert: concert_ID, Singer_ID | What is the name and capacity of the stadium with the most concerts after 2013 ?", "sql": "select t2.name ,  t2.capacity from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id where t1.year  >  2013 group by t2.stadium_id order by count(*) desc limit 1", "example": {"db_id": "concert_singer", "query": "select t2.name ,  t2.capacity from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id where t1.year  >  2013 group by t2.stadium_id order by count(*) desc limit 1", "query_toks": ["select", "t2.name", ",", "t2.capacity", "from", "concert", "as", "t1", "join", "stadium", "as", "t2", "on", "t1.stadium_id", "=", "t2.stadium_id", "where", "t1.year", ">", "2013", "group", "by", "t2.stadium_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1"], "query_toks_no_value": ["select", "t2", ".", "name", ",", "t2", ".", "capacity", "from", "concert", "as", "t1", "join", "stadium", "as", "t2", "on", "t1", ".", "stadium_id", "=", "t2", ".", "stadium_id", "where", "t1", ".", "year", ">", "value", "group", "by", "t2", ".", "stadium_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the name and capacity of the stadium with the most concerts after 2013 ?", "question_toks": ["What", "is", "the", "name", "and", "capacity", "of", "the", "stadium", "with", "the", "most", "concerts", "after", "2013", "?"], "guid": 1622}}
{"text": "conductor: Conductor_ID, Name, Age, Nationality, Year_of_Work; orchestra: Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format; performance: Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share; show: Show_ID, Performance_ID, If_first_show, Result, Attendance | Count the number of orchestras that have CD or DVD as their record format.", "sql": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\"", "example": {"db_id": "orchestra", "query": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\"", "query_toks": ["SELECT", "COUNT", "(", "*", ")", "FROM", "orchestra", "WHERE", "Major_Record_Format", "=", "``", "CD", "''", "OR", "Major_Record_Format", "=", "``", "DVD", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "orchestra", "where", "major_record_format", "=", "value", "or", "major_record_format", "=", "value"], "question": "Count the number of orchestras that have CD or DVD as their record format.", "question_toks": ["Count", "the", "number", "of", "orchestras", "that", "have", "CD", "or", "DVD", "as", "their", "record", "format", "."], "guid": 1623}}
{"text": "genre: g_name, rating, most_popular_in; artist: artist_name, country, gender, preferred_genre; files: f_id, artist_name, file_size, duration, formats; song: song_name, artist_name, country, f_id, genre_is, rating, languages, releasedate, resolution | Find the distinct names of all songs that have a higher resolution than some songs in English.", "sql": "SELECT DISTINCT song_name FROM song WHERE resolution  >  (SELECT min(resolution) FROM song WHERE languages  =  \"english\")", "example": {"db_id": "music_1", "query": "SELECT DISTINCT song_name FROM song WHERE resolution  >  (SELECT min(resolution) FROM song WHERE languages  =  \"english\")", "query_toks": ["SELECT", "DISTINCT", "song_name", "FROM", "song", "WHERE", "resolution", ">", "(", "SELECT", "min", "(", "resolution", ")", "FROM", "song", "WHERE", "languages", "=", "``", "english", "''", ")"], "query_toks_no_value": ["select", "distinct", "song_name", "from", "song", "where", "resolution", ">", "(", "select", "min", "(", "resolution", ")", "from", "song", "where", "languages", "=", "value", ")"], "question": "Find the distinct names of all songs that have a higher resolution than some songs in English.", "question_toks": ["Find", "the", "distinct", "names", "of", "all", "songs", "that", "have", "a", "higher", "resolution", "than", "some", "songs", "in", "English", "."], "guid": 1624}}
{"text": "stadium: Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average; singer: Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male; concert: concert_ID, concert_Name, Theme, Stadium_ID, Year; singer_in_concert: concert_ID, Singer_ID | Show names for all stadiums except for stadiums having a concert in year 2014.", "sql": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014", "example": {"db_id": "concert_singer", "query": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014", "query_toks": ["SELECT", "name", "FROM", "stadium", "EXCEPT", "SELECT", "T2.name", "FROM", "concert", "AS", "T1", "JOIN", "stadium", "AS", "T2", "ON", "T1.stadium_id", "=", "T2.stadium_id", "WHERE", "T1.year", "=", "2014"], "query_toks_no_value": ["select", "name", "from", "stadium", "except", "select", "t2", ".", "name", "from", "concert", "as", "t1", "join", "stadium", "as", "t2", "on", "t1", ".", "stadium_id", "=", "t2", ".", "stadium_id", "where", "t1", ".", "year", "=", "value"], "question": "Show names for all stadiums except for stadiums having a concert in year 2014.", "question_toks": ["Show", "names", "for", "all", "stadiums", "except", "for", "stadiums", "having", "a", "concert", "in", "year", "2014", "."], "guid": 1625}}
{"text": "stadium: Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average; singer: Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male; concert: concert_ID, concert_Name, Theme, Stadium_ID, Year; singer_in_concert: concert_ID, Singer_ID | For each stadium, how many concerts play there?", "sql": "SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id", "example": {"db_id": "concert_singer", "query": "SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id", "query_toks": ["SELECT", "T2.name", ",", "count", "(", "*", ")", "FROM", "concert", "AS", "T1", "JOIN", "stadium", "AS", "T2", "ON", "T1.stadium_id", "=", "T2.stadium_id", "GROUP", "BY", "T1.stadium_id"], "query_toks_no_value": ["select", "t2", ".", "name", ",", "count", "(", "*", ")", "from", "concert", "as", "t1", "join", "stadium", "as", "t2", "on", "t1", ".", "stadium_id", "=", "t2", ".", "stadium_id", "group", "by", "t1", ".", "stadium_id"], "question": "For each stadium, how many concerts play there?", "question_toks": ["For", "each", "stadium", ",", "how", "many", "concerts", "play", "there", "?"], "guid": 1626}}
{"text": "singer: Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship; song: Song_ID, Title, Singer_ID, Sales, Highest_Position | Show the names of singers and the total sales of their songs.", "sql": "SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name", "example": {"db_id": "singer", "query": "SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name", "query_toks": ["SELECT", "T1.Name", ",", "sum", "(", "T2.Sales", ")", "FROM", "singer", "AS", "T1", "JOIN", "song", "AS", "T2", "ON", "T1.Singer_ID", "=", "T2.Singer_ID", "GROUP", "BY", "T1.Name"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "sum", "(", "t2", ".", "sales", ")", "from", "singer", "as", "t1", "join", "song", "as", "t2", "on", "t1", ".", "singer_id", "=", "t2", ".", "singer_id", "group", "by", "t1", ".", "name"], "question": "Show the names of singers and the total sales of their songs.", "question_toks": ["Show", "the", "names", "of", "singers", "and", "the", "total", "sales", "of", "their", "songs", "."], "guid": 1627}}
{"text": "genre: g_name, rating, most_popular_in; artist: artist_name, country, gender, preferred_genre; files: f_id, artist_name, file_size, duration, formats; song: song_name, artist_name, country, f_id, genre_is, rating, languages, releasedate, resolution | Return the gender and name of artist who produced the song with the lowest resolution.", "sql": "SELECT T1.gender ,  T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name ORDER BY T2.resolution LIMIT 1", "example": {"db_id": "music_1", "query": "SELECT T1.gender ,  T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name ORDER BY T2.resolution LIMIT 1", "query_toks": ["SELECT", "T1.gender", ",", "T1.artist_name", "FROM", "artist", "AS", "T1", "JOIN", "song", "AS", "T2", "ON", "T1.artist_name", "=", "T2.artist_name", "ORDER", "BY", "T2.resolution", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "gender", ",", "t1", ".", "artist_name", "from", "artist", "as", "t1", "join", "song", "as", "t2", "on", "t1", ".", "artist_name", "=", "t2", ".", "artist_name", "order", "by", "t2", ".", "resolution", "limit", "value"], "question": "Return the gender and name of artist who produced the song with the lowest resolution.", "question_toks": ["Return", "the", "gender", "and", "name", "of", "artist", "who", "produced", "the", "song", "with", "the", "lowest", "resolution", "."], "guid": 1628}}
{"text": "musical: Musical_ID, Name, Year, Award, Category, Nominee, Result; actor: Actor_ID, Name, Musical_ID, Character, Duration, age | What are the names of actors who are not 20 years old?", "sql": "SELECT Name FROM actor WHERE Age != 20", "example": {"db_id": "musical", "query": "SELECT Name FROM actor WHERE Age != 20", "query_toks": ["SELECT", "Name", "FROM", "actor", "WHERE", "Age", "!", "=", "20"], "query_toks_no_value": ["select", "name", "from", "actor", "where", "age", "!", "=", "value"], "question": "What are the names of actors who are not 20 years old?", "question_toks": ["What", "are", "the", "names", "of", "actors", "who", "are", "not", "20", "years", "old", "?"], "guid": 1629}}
{"text": "Songs: SongId, Title; Albums: AId, Title, Year, Label, Type; Band: Id, Firstname, Lastname; Instruments: SongId, BandmateId, Instrument; Performance: SongId, Bandmate, StagePosition; Tracklists: AlbumId, Position, SongId; Vocals: SongId, Bandmate, Type | Which vocal type did the musician with first name \"Solveig\" played in the song with title \"A Bar in Amsterdam\"?", "sql": "SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid JOIN band AS T3 ON T1.bandmate  =  T3.id WHERE T3.firstname  =  \"Solveig\" AND T2.title  =  \"A Bar In Amsterdam\"", "example": {"db_id": "music_2", "query": "SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid JOIN band AS T3 ON T1.bandmate  =  T3.id WHERE T3.firstname  =  \"Solveig\" AND T2.title  =  \"A Bar In Amsterdam\"", "query_toks": ["SELECT", "TYPE", "FROM", "vocals", "AS", "T1", "JOIN", "songs", "AS", "T2", "ON", "T1.songid", "=", "T2.songid", "JOIN", "band", "AS", "T3", "ON", "T1.bandmate", "=", "T3.id", "WHERE", "T3.firstname", "=", "``", "Solveig", "''", "AND", "T2.title", "=", "``", "A", "Bar", "In", "Amsterdam", "''"], "query_toks_no_value": ["select", "type", "from", "vocals", "as", "t1", "join", "songs", "as", "t2", "on", "t1", ".", "songid", "=", "t2", ".", "songid", "join", "band", "as", "t3", "on", "t1", ".", "bandmate", "=", "t3", ".", "id", "where", "t3", ".", "firstname", "=", "value", "and", "t2", ".", "title", "=", "value"], "question": "Which vocal type did the musician with first name \"Solveig\" played in the song with title \"A Bar in Amsterdam\"?", "question_toks": ["Which", "vocal", "type", "did", "the", "musician", "with", "first", "name", "``", "Solveig", "''", "played", "in", "the", "song", "with", "title", "``", "A", "Bar", "in", "Amsterdam", "''", "?"], "guid": 1630}}
{"text": "Songs: SongId, Title; Albums: AId, Title, Year, Label, Type; Band: Id, Firstname, Lastname; Instruments: SongId, BandmateId, Instrument; Performance: SongId, Bandmate, StagePosition; Tracklists: AlbumId, Position, SongId; Vocals: SongId, Bandmate, Type | What is the first name of the band mate who perfomed in the most songs?", "sql": "SELECT t2.firstname FROM Performance AS t1 JOIN Band AS t2 ON t1.bandmate  =  t2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId GROUP BY firstname ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "music_2", "query": "SELECT t2.firstname FROM Performance AS t1 JOIN Band AS t2 ON t1.bandmate  =  t2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId GROUP BY firstname ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "t2.firstname", "FROM", "Performance", "AS", "t1", "JOIN", "Band", "AS", "t2", "ON", "t1.bandmate", "=", "t2.id", "JOIN", "Songs", "AS", "T3", "ON", "T3.SongId", "=", "T1.SongId", "GROUP", "BY", "firstname", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "firstname", "from", "performance", "as", "t1", "join", "band", "as", "t2", "on", "t1", ".", "bandmate", "=", "t2", ".", "id", "join", "songs", "as", "t3", "on", "t3", ".", "songid", "=", "t1", ".", "songid", "group", "by", "firstname", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the first name of the band mate who perfomed in the most songs?", "question_toks": ["What", "is", "the", "first", "name", "of", "the", "band", "mate", "who", "perfomed", "in", "the", "most", "songs", "?"], "guid": 1631}}
{"text": "singer: Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship; song: Song_ID, Title, Singer_ID, Sales, Highest_Position | For each singer name, what is the total sales for their songs?", "sql": "SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name", "example": {"db_id": "singer", "query": "SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name", "query_toks": ["SELECT", "T1.Name", ",", "sum", "(", "T2.Sales", ")", "FROM", "singer", "AS", "T1", "JOIN", "song", "AS", "T2", "ON", "T1.Singer_ID", "=", "T2.Singer_ID", "GROUP", "BY", "T1.Name"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "sum", "(", "t2", ".", "sales", ")", "from", "singer", "as", "t1", "join", "song", "as", "t2", "on", "t1", ".", "singer_id", "=", "t2", ".", "singer_id", "group", "by", "t1", ".", "name"], "question": "For each singer name, what is the total sales for their songs?", "question_toks": ["For", "each", "singer", "name", ",", "what", "is", "the", "total", "sales", "for", "their", "songs", "?"], "guid": 1632}}
{"text": "artist: Artist_ID, Artist, Age, Famous_Title, Famous_Release_date; volume: Volume_ID, Volume_Issue, Issue_Date, Weeks_on_Top, Song, Artist_ID; music_festival: ID, Music_Festival, Date_of_ceremony, Category, Volume, Result | How many distinct artists have volumes?", "sql": "SELECT COUNT(DISTINCT Artist_ID) FROM volume", "example": {"db_id": "music_4", "query": "SELECT COUNT(DISTINCT Artist_ID) FROM volume", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "Artist_ID", ")", "FROM", "volume"], "query_toks_no_value": ["select", "count", "(", "distinct", "artist_id", ")", "from", "volume"], "question": "How many distinct artists have volumes?", "question_toks": ["How", "many", "distinct", "artists", "have", "volumes", "?"], "guid": 1633}}
{"text": "genre: g_name, rating, most_popular_in; artist: artist_name, country, gender, preferred_genre; files: f_id, artist_name, file_size, duration, formats; song: song_name, artist_name, country, f_id, genre_is, rating, languages, releasedate, resolution | What are the names of all male British artists?", "sql": "SELECT artist_name FROM artist WHERE country  =  \"UK\" AND gender  =  \"Male\"", "example": {"db_id": "music_1", "query": "SELECT artist_name FROM artist WHERE country  =  \"UK\" AND gender  =  \"Male\"", "query_toks": ["SELECT", "artist_name", "FROM", "artist", "WHERE", "country", "=", "``", "UK", "''", "AND", "gender", "=", "``", "Male", "''"], "query_toks_no_value": ["select", "artist_name", "from", "artist", "where", "country", "=", "value", "and", "gender", "=", "value"], "question": "What are the names of all male British artists?", "question_toks": ["What", "are", "the", "names", "of", "all", "male", "British", "artists", "?"], "guid": 1634}}
{"text": "stadium: Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average; singer: Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male; concert: concert_ID, concert_Name, Theme, Stadium_ID, Year; singer_in_concert: concert_ID, Singer_ID | Which year has most number of concerts?", "sql": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "concert_singer", "query": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "YEAR", "FROM", "concert", "GROUP", "BY", "YEAR", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "year", "from", "concert", "group", "by", "year", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which year has most number of concerts?", "question_toks": ["Which", "year", "has", "most", "number", "of", "concerts", "?"], "guid": 1635}}
{"text": "genre: g_name, rating, most_popular_in; artist: artist_name, country, gender, preferred_genre; files: f_id, artist_name, file_size, duration, formats; song: song_name, artist_name, country, f_id, genre_is, rating, languages, releasedate, resolution | What is the id of the longest song?", "sql": "SELECT f_id FROM files ORDER BY duration DESC LIMIT 1", "example": {"db_id": "music_1", "query": "SELECT f_id FROM files ORDER BY duration DESC LIMIT 1", "query_toks": ["SELECT", "f_id", "FROM", "files", "ORDER", "BY", "duration", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "f_id", "from", "files", "order", "by", "duration", "desc", "limit", "value"], "question": "What is the id of the longest song?", "question_toks": ["What", "is", "the", "id", "of", "the", "longest", "song", "?"], "guid": 1636}}
{"text": "conductor: Conductor_ID, Name, Age, Nationality, Year_of_Work; orchestra: Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format; performance: Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share; show: Show_ID, Performance_ID, If_first_show, Result, Attendance | What are years of founding for orchestras that have had more than a single performance?", "sql": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1", "example": {"db_id": "orchestra", "query": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1", "query_toks": ["SELECT", "Year_of_Founded", "FROM", "orchestra", "AS", "T1", "JOIN", "performance", "AS", "T2", "ON", "T1.Orchestra_ID", "=", "T2.Orchestra_ID", "GROUP", "BY", "T2.Orchestra_ID", "HAVING", "COUNT", "(", "*", ")", ">", "1"], "query_toks_no_value": ["select", "year_of_founded", "from", "orchestra", "as", "t1", "join", "performance", "as", "t2", "on", "t1", ".", "orchestra_id", "=", "t2", ".", "orchestra_id", "group", "by", "t2", ".", "orchestra_id", "having", "count", "(", "*", ")", ">", "value"], "question": "What are years of founding for orchestras that have had more than a single performance?", "question_toks": ["What", "are", "years", "of", "founding", "for", "orchestras", "that", "have", "had", "more", "than", "a", "single", "performance", "?"], "guid": 1637}}
{"text": "Songs: SongId, Title; Albums: AId, Title, Year, Label, Type; Band: Id, Firstname, Lastname; Instruments: SongId, BandmateId, Instrument; Performance: SongId, Bandmate, StagePosition; Tracklists: AlbumId, Position, SongId; Vocals: SongId, Bandmate, Type | What are the vocal types used in song \"Le Pop\"?", "sql": "SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Le Pop\"", "example": {"db_id": "music_2", "query": "SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Le Pop\"", "query_toks": ["SELECT", "TYPE", "FROM", "vocals", "AS", "T1", "JOIN", "songs", "AS", "T2", "ON", "T1.songid", "=", "T2.songid", "WHERE", "title", "=", "``", "Le", "Pop", "''"], "query_toks_no_value": ["select", "type", "from", "vocals", "as", "t1", "join", "songs", "as", "t2", "on", "t1", ".", "songid", "=", "t2", ".", "songid", "where", "title", "=", "value"], "question": "What are the vocal types used in song \"Le Pop\"?", "question_toks": ["What", "are", "the", "vocal", "types", "used", "in", "song", "``", "Le", "Pop", "''", "?"], "guid": 1638}}
{"text": "genre: g_name, rating, most_popular_in; artist: artist_name, country, gender, preferred_genre; files: f_id, artist_name, file_size, duration, formats; song: song_name, artist_name, country, f_id, genre_is, rating, languages, releasedate, resolution | What are the id of all the files in mp3 format?", "sql": "SELECT f_id FROM files WHERE formats  =  \"mp3\"", "example": {"db_id": "music_1", "query": "SELECT f_id FROM files WHERE formats  =  \"mp3\"", "query_toks": ["SELECT", "f_id", "FROM", "files", "WHERE", "formats", "=", "``", "mp3", "''"], "query_toks_no_value": ["select", "f_id", "from", "files", "where", "formats", "=", "value"], "question": "What are the id of all the files in mp3 format?", "question_toks": ["What", "are", "the", "id", "of", "all", "the", "files", "in", "mp3", "format", "?"], "guid": 1639}}
{"text": "stadium: Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average; singer: Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male; concert: concert_ID, concert_Name, Theme, Stadium_ID, Year; singer_in_concert: concert_ID, Singer_ID | What are the names of all stadiums that did not have a concert in 2014?", "sql": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014", "example": {"db_id": "concert_singer", "query": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014", "query_toks": ["SELECT", "name", "FROM", "stadium", "EXCEPT", "SELECT", "T2.name", "FROM", "concert", "AS", "T1", "JOIN", "stadium", "AS", "T2", "ON", "T1.stadium_id", "=", "T2.stadium_id", "WHERE", "T1.year", "=", "2014"], "query_toks_no_value": ["select", "name", "from", "stadium", "except", "select", "t2", ".", "name", "from", "concert", "as", "t1", "join", "stadium", "as", "t2", "on", "t1", ".", "stadium_id", "=", "t2", ".", "stadium_id", "where", "t1", ".", "year", "=", "value"], "question": "What are the names of all stadiums that did not have a concert in 2014?", "question_toks": ["What", "are", "the", "names", "of", "all", "stadiums", "that", "did", "not", "have", "a", "concert", "in", "2014", "?"], "guid": 1640}}
{"text": "Songs: SongId, Title; Albums: AId, Title, Year, Label, Type; Band: Id, Firstname, Lastname; Instruments: SongId, BandmateId, Instrument; Performance: SongId, Bandmate, StagePosition; Tracklists: AlbumId, Position, SongId; Vocals: SongId, Bandmate, Type | What is the vocal type of the band mate whose first name is \"Marianne\" played the most?", "sql": "SELECT TYPE FROM vocals AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id WHERE firstname  =  \"Marianne\" GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "music_2", "query": "SELECT TYPE FROM vocals AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id WHERE firstname  =  \"Marianne\" GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "TYPE", "FROM", "vocals", "AS", "T1", "JOIN", "band", "AS", "T2", "ON", "T1.bandmate", "=", "T2.id", "WHERE", "firstname", "=", "``", "Marianne", "''", "GROUP", "BY", "TYPE", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "type", "from", "vocals", "as", "t1", "join", "band", "as", "t2", "on", "t1", ".", "bandmate", "=", "t2", ".", "id", "where", "firstname", "=", "value", "group", "by", "type", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the vocal type of the band mate whose first name is \"Marianne\" played the most?", "question_toks": ["What", "is", "the", "vocal", "type", "of", "the", "band", "mate", "whose", "first", "name", "is", "``", "Marianne", "''", "played", "the", "most", "?"], "guid": 1641}}
{"text": "singer: Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship; song: Song_ID, Title, Singer_ID, Sales, Highest_Position | Show different citizenships and the maximum net worth of singers of each citizenship.", "sql": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship", "example": {"db_id": "singer", "query": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship", "query_toks": ["SELECT", "Citizenship", ",", "max", "(", "Net_Worth_Millions", ")", "FROM", "singer", "GROUP", "BY", "Citizenship"], "query_toks_no_value": ["select", "citizenship", ",", "max", "(", "net_worth_millions", ")", "from", "singer", "group", "by", "citizenship"], "question": "Show different citizenships and the maximum net worth of singers of each citizenship.", "question_toks": ["Show", "different", "citizenships", "and", "the", "maximum", "net", "worth", "of", "singers", "of", "each", "citizenship", "."], "guid": 1642}}
{"text": "stadium: Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average; singer: Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male; concert: concert_ID, concert_Name, Theme, Stadium_ID, Year; singer_in_concert: concert_ID, Singer_ID | What are the names, countries, and ages for every singer in descending order of age?", "sql": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC", "example": {"db_id": "concert_singer", "query": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC", "query_toks": ["SELECT", "name", ",", "country", ",", "age", "FROM", "singer", "ORDER", "BY", "age", "DESC"], "query_toks_no_value": ["select", "name", ",", "country", ",", "age", "from", "singer", "order", "by", "age", "desc"], "question": "What are the names, countries, and ages for every singer in descending order of age?", "question_toks": ["What", "are", "the", "names", ",", "countries", ",", "and", "ages", "for", "every", "singer", "in", "descending", "order", "of", "age", "?"], "guid": 1643}}
{"text": "stadium: Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average; singer: Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male; concert: concert_ID, concert_Name, Theme, Stadium_ID, Year; singer_in_concert: concert_ID, Singer_ID | What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?", "sql": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'", "example": {"db_id": "concert_singer", "query": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'", "query_toks": ["SELECT", "name", ",", "country", "FROM", "singer", "WHERE", "song_name", "LIKE", "'", "%", "Hey", "%", "'"], "query_toks_no_value": ["select", "name", ",", "country", "from", "singer", "where", "song_name", "like", "value"], "question": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?", "question_toks": ["What", "is", "the", "name", "and", "country", "of", "origin", "of", "every", "singer", "who", "has", "a", "song", "with", "the", "word", "'Hey", "'", "in", "its", "title", "?"], "guid": 1644}}
{"text": "Songs: SongId, Title; Albums: AId, Title, Year, Label, Type; Band: Id, Firstname, Lastname; Instruments: SongId, BandmateId, Instrument; Performance: SongId, Bandmate, StagePosition; Tracklists: AlbumId, Position, SongId; Vocals: SongId, Bandmate, Type | What instruments does the the song \"Le Pop\" use?", "sql": "SELECT instrument FROM instruments AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Le Pop\"", "example": {"db_id": "music_2", "query": "SELECT instrument FROM instruments AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Le Pop\"", "query_toks": ["SELECT", "instrument", "FROM", "instruments", "AS", "T1", "JOIN", "songs", "AS", "T2", "ON", "T1.songid", "=", "T2.songid", "WHERE", "title", "=", "``", "Le", "Pop", "''"], "query_toks_no_value": ["select", "instrument", "from", "instruments", "as", "t1", "join", "songs", "as", "t2", "on", "t1", ".", "songid", "=", "t2", ".", "songid", "where", "title", "=", "value"], "question": "What instruments does the the song \"Le Pop\" use?", "question_toks": ["What", "instruments", "does", "the", "the", "song", "``", "Le", "Pop", "''", "use", "?"], "guid": 1645}}
{"text": "Songs: SongId, Title; Albums: AId, Title, Year, Label, Type; Band: Id, Firstname, Lastname; Instruments: SongId, BandmateId, Instrument; Performance: SongId, Bandmate, StagePosition; Tracklists: AlbumId, Position, SongId; Vocals: SongId, Bandmate, Type | Find all the songs performed by artist with last name \"Heilo\"", "sql": "SELECT T3.Title FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T2.Lastname  =  \"Heilo\"", "example": {"db_id": "music_2", "query": "SELECT T3.Title FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T2.Lastname  =  \"Heilo\"", "query_toks": ["SELECT", "T3.Title", "FROM", "Performance", "AS", "T1", "JOIN", "Band", "AS", "T2", "ON", "T1.bandmate", "=", "T2.id", "JOIN", "Songs", "AS", "T3", "ON", "T3.SongId", "=", "T1.SongId", "WHERE", "T2.Lastname", "=", "``", "Heilo", "''"], "query_toks_no_value": ["select", "t3", ".", "title", "from", "performance", "as", "t1", "join", "band", "as", "t2", "on", "t1", ".", "bandmate", "=", "t2", ".", "id", "join", "songs", "as", "t3", "on", "t3", ".", "songid", "=", "t1", ".", "songid", "where", "t2", ".", "lastname", "=", "value"], "question": "Find all the songs performed by artist with last name \"Heilo\"", "question_toks": ["Find", "all", "the", "songs", "performed", "by", "artist", "with", "last", "name", "``", "Heilo", "''"], "guid": 1646}}
{"text": "genre: g_name, rating, most_popular_in; artist: artist_name, country, gender, preferred_genre; files: f_id, artist_name, file_size, duration, formats; song: song_name, artist_name, country, f_id, genre_is, rating, languages, releasedate, resolution | List the name and gender for all artists who released songs in March.", "sql": "SELECT T1.artist_name ,  T1.gender FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.releasedate LIKE \"%Mar%\"", "example": {"db_id": "music_1", "query": "SELECT T1.artist_name ,  T1.gender FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.releasedate LIKE \"%Mar%\"", "query_toks": ["SELECT", "T1.artist_name", ",", "T1.gender", "FROM", "artist", "AS", "T1", "JOIN", "song", "AS", "T2", "ON", "T1.artist_name", "=", "T2.artist_name", "WHERE", "T2.releasedate", "LIKE", "``", "%", "Mar", "%", "''"], "query_toks_no_value": ["select", "t1", ".", "artist_name", ",", "t1", ".", "gender", "from", "artist", "as", "t1", "join", "song", "as", "t2", "on", "t1", ".", "artist_name", "=", "t2", ".", "artist_name", "where", "t2", ".", "releasedate", "like", "value"], "question": "List the name and gender for all artists who released songs in March.", "question_toks": ["List", "the", "name", "and", "gender", "for", "all", "artists", "who", "released", "songs", "in", "March", "."], "guid": 1647}}
{"text": "genre: g_name, rating, most_popular_in; artist: artist_name, country, gender, preferred_genre; files: f_id, artist_name, file_size, duration, formats; song: song_name, artist_name, country, f_id, genre_is, rating, languages, releasedate, resolution | What is the country of origin of the artist who is female and produced a song in Bangla?", "sql": "SELECT T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T1.gender  =  \"Female\" AND T2.languages  =  \"bangla\"", "example": {"db_id": "music_1", "query": "SELECT T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T1.gender  =  \"Female\" AND T2.languages  =  \"bangla\"", "query_toks": ["SELECT", "T1.country", "FROM", "artist", "AS", "T1", "JOIN", "song", "AS", "T2", "ON", "T1.artist_name", "=", "T2.artist_name", "WHERE", "T1.gender", "=", "``", "Female", "''", "AND", "T2.languages", "=", "``", "bangla", "''"], "query_toks_no_value": ["select", "t1", ".", "country", "from", "artist", "as", "t1", "join", "song", "as", "t2", "on", "t1", ".", "artist_name", "=", "t2", ".", "artist_name", "where", "t1", ".", "gender", "=", "value", "and", "t2", ".", "languages", "=", "value"], "question": "What is the country of origin of the artist who is female and produced a song in Bangla?", "question_toks": ["What", "is", "the", "country", "of", "origin", "of", "the", "artist", "who", "is", "female", "and", "produced", "a", "song", "in", "Bangla", "?"], "guid": 1648}}
{"text": "musical: Musical_ID, Name, Year, Award, Category, Nominee, Result; actor: Actor_ID, Name, Musical_ID, Character, Duration, age | What are the names of musicals who have at 3 or more actors?", "sql": "SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  3", "example": {"db_id": "musical", "query": "SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  3", "query_toks": ["SELECT", "T2.Name", "FROM", "actor", "AS", "T1", "JOIN", "musical", "AS", "T2", "ON", "T1.Musical_ID", "=", "T2.Musical_ID", "GROUP", "BY", "T1.Musical_ID", "HAVING", "COUNT", "(", "*", ")", ">", "=", "3"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "actor", "as", "t1", "join", "musical", "as", "t2", "on", "t1", ".", "musical_id", "=", "t2", ".", "musical_id", "group", "by", "t1", ".", "musical_id", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "What are the names of musicals who have at 3 or more actors?", "question_toks": ["What", "are", "the", "names", "of", "musicals", "who", "have", "at", "3", "or", "more", "actors", "?"], "guid": 1649}}
{"text": "Songs: SongId, Title; Albums: AId, Title, Year, Label, Type; Band: Id, Firstname, Lastname; Instruments: SongId, BandmateId, Instrument; Performance: SongId, Bandmate, StagePosition; Tracklists: AlbumId, Position, SongId; Vocals: SongId, Bandmate, Type | How many different instruments are used in the song \"Le Pop\"?", "sql": "SELECT count(DISTINCT instrument) FROM instruments AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Le Pop\"", "example": {"db_id": "music_2", "query": "SELECT count(DISTINCT instrument) FROM instruments AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Le Pop\"", "query_toks": ["SELECT", "count", "(", "DISTINCT", "instrument", ")", "FROM", "instruments", "AS", "T1", "JOIN", "songs", "AS", "T2", "ON", "T1.songid", "=", "T2.songid", "WHERE", "title", "=", "``", "Le", "Pop", "''"], "query_toks_no_value": ["select", "count", "(", "distinct", "instrument", ")", "from", "instruments", "as", "t1", "join", "songs", "as", "t2", "on", "t1", ".", "songid", "=", "t2", ".", "songid", "where", "title", "=", "value"], "question": "How many different instruments are used in the song \"Le Pop\"?", "question_toks": ["How", "many", "different", "instruments", "are", "used", "in", "the", "song", "``", "Le", "Pop", "''", "?"], "guid": 1650}}
{"text": "genre: g_name, rating, most_popular_in; artist: artist_name, country, gender, preferred_genre; files: f_id, artist_name, file_size, duration, formats; song: song_name, artist_name, country, f_id, genre_is, rating, languages, releasedate, resolution | Find the names of the artists who are from Bangladesh and have never received rating higher than 7.", "sql": "SELECT DISTINCT artist_name FROM artist WHERE country  =  \"Bangladesh\" EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating  >  7", "example": {"db_id": "music_1", "query": "SELECT DISTINCT artist_name FROM artist WHERE country  =  \"Bangladesh\" EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating  >  7", "query_toks": ["SELECT", "DISTINCT", "artist_name", "FROM", "artist", "WHERE", "country", "=", "``", "Bangladesh", "''", "EXCEPT", "SELECT", "DISTINCT", "artist_name", "FROM", "song", "WHERE", "rating", ">", "7"], "query_toks_no_value": ["select", "distinct", "artist_name", "from", "artist", "where", "country", "=", "value", "except", "select", "distinct", "artist_name", "from", "song", "where", "rating", ">", "value"], "question": "Find the names of the artists who are from Bangladesh and have never received rating higher than 7.", "question_toks": ["Find", "the", "names", "of", "the", "artists", "who", "are", "from", "Bangladesh", "and", "have", "never", "received", "rating", "higher", "than", "7", "."], "guid": 1651}}
{"text": "singer: Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship; song: Song_ID, Title, Singer_ID, Sales, Highest_Position | List the name of singers that do not have any song.", "sql": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)", "example": {"db_id": "singer", "query": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)", "query_toks": ["SELECT", "Name", "FROM", "singer", "WHERE", "Singer_ID", "NOT", "IN", "(", "SELECT", "Singer_ID", "FROM", "song", ")"], "query_toks_no_value": ["select", "name", "from", "singer", "where", "singer_id", "not", "in", "(", "select", "singer_id", "from", "song", ")"], "question": "List the name of singers that do not have any song.", "question_toks": ["List", "the", "name", "of", "singers", "that", "do", "not", "have", "any", "song", "."], "guid": 1652}}
{"text": "conductor: Conductor_ID, Name, Age, Nationality, Year_of_Work; orchestra: Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format; performance: Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share; show: Show_ID, Performance_ID, If_first_show, Result, Attendance | Count the number of different nationalities of conductors.", "sql": "SELECT count(DISTINCT Nationality) FROM conductor", "example": {"db_id": "orchestra", "query": "SELECT count(DISTINCT Nationality) FROM conductor", "query_toks": ["SELECT", "count", "(", "DISTINCT", "Nationality", ")", "FROM", "conductor"], "query_toks_no_value": ["select", "count", "(", "distinct", "nationality", ")", "from", "conductor"], "question": "Count the number of different nationalities of conductors.", "question_toks": ["Count", "the", "number", "of", "different", "nationalities", "of", "conductors", "."], "guid": 1653}}
{"text": "artist: Artist_ID, Artist, Age, Famous_Title, Famous_Release_date; volume: Volume_ID, Volume_Issue, Issue_Date, Weeks_on_Top, Song, Artist_ID; music_festival: ID, Music_Festival, Date_of_ceremony, Category, Volume, Result | Please show the results of music festivals and the number of music festivals that have had each, ordered by this count.", "sql": "SELECT RESULT ,  COUNT(*) FROM music_festival GROUP BY RESULT ORDER BY COUNT(*) DESC", "example": {"db_id": "music_4", "query": "SELECT RESULT ,  COUNT(*) FROM music_festival GROUP BY RESULT ORDER BY COUNT(*) DESC", "query_toks": ["SELECT", "RESULT", ",", "COUNT", "(", "*", ")", "FROM", "music_festival", "GROUP", "BY", "RESULT", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC"], "query_toks_no_value": ["select", "result", ",", "count", "(", "*", ")", "from", "music_festival", "group", "by", "result", "order", "by", "count", "(", "*", ")", "desc"], "question": "Please show the results of music festivals and the number of music festivals that have had each, ordered by this count.", "question_toks": ["Please", "show", "the", "results", "of", "music", "festivals", "and", "the", "number", "of", "music", "festivals", "that", "have", "had", "each", ",", "ordered", "by", "this", "count", "."], "guid": 1654}}
{"text": "stadium: Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average; singer: Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male; concert: concert_ID, concert_Name, Theme, Stadium_ID, Year; singer_in_concert: concert_ID, Singer_ID | What is the name and capacity for the stadium with highest average attendance?", "sql": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1", "example": {"db_id": "concert_singer", "query": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1", "query_toks": ["SELECT", "name", ",", "capacity", "FROM", "stadium", "ORDER", "BY", "average", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "name", ",", "capacity", "from", "stadium", "order", "by", "average", "desc", "limit", "value"], "question": "What is the name and capacity for the stadium with highest average attendance?", "question_toks": ["What", "is", "the", "name", "and", "capacity", "for", "the", "stadium", "with", "highest", "average", "attendance", "?"], "guid": 1655}}
{"text": "genre: g_name, rating, most_popular_in; artist: artist_name, country, gender, preferred_genre; files: f_id, artist_name, file_size, duration, formats; song: song_name, artist_name, country, f_id, genre_is, rating, languages, releasedate, resolution | What are the song names for every song whose rating is less than the minimum rating for English songs?", "sql": "SELECT song_name FROM song WHERE rating  <   (SELECT min(rating) FROM song WHERE languages  =  'english')", "example": {"db_id": "music_1", "query": "SELECT song_name FROM song WHERE rating  <   (SELECT min(rating) FROM song WHERE languages  =  'english')", "query_toks": ["SELECT", "song_name", "FROM", "song", "WHERE", "rating", "<", "(", "SELECT", "min", "(", "rating", ")", "FROM", "song", "WHERE", "languages", "=", "'english", "'", ")"], "query_toks_no_value": ["select", "song_name", "from", "song", "where", "rating", "<", "(", "select", "min", "(", "rating", ")", "from", "song", "where", "languages", "=", "value", ")"], "question": "What are the song names for every song whose rating is less than the minimum rating for English songs?", "question_toks": ["What", "are", "the", "song", "names", "for", "every", "song", "whose", "rating", "is", "less", "than", "the", "minimum", "rating", "for", "English", "songs", "?"], "guid": 1656}}
{"text": "Songs: SongId, Title; Albums: AId, Title, Year, Label, Type; Band: Id, Firstname, Lastname; Instruments: SongId, BandmateId, Instrument; Performance: SongId, Bandmate, StagePosition; Tracklists: AlbumId, Position, SongId; Vocals: SongId, Bandmate, Type | What is the last name of the musician that have produced the most number of songs?", "sql": "SELECT T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId GROUP BY lastname ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "music_2", "query": "SELECT T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId GROUP BY lastname ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T2.lastname", "FROM", "Performance", "AS", "T1", "JOIN", "Band", "AS", "T2", "ON", "T1.bandmate", "=", "T2.id", "JOIN", "Songs", "AS", "T3", "ON", "T3.SongId", "=", "T1.SongId", "GROUP", "BY", "lastname", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "lastname", "from", "performance", "as", "t1", "join", "band", "as", "t2", "on", "t1", ".", "bandmate", "=", "t2", ".", "id", "join", "songs", "as", "t3", "on", "t3", ".", "songid", "=", "t1", ".", "songid", "group", "by", "lastname", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the last name of the musician that have produced the most number of songs?", "question_toks": ["What", "is", "the", "last", "name", "of", "the", "musician", "that", "have", "produced", "the", "most", "number", "of", "songs", "?"], "guid": 1657}}
{"text": "stadium: Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average; singer: Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male; concert: concert_ID, concert_Name, Theme, Stadium_ID, Year; singer_in_concert: concert_ID, Singer_ID | What is the name and capacity for the stadium with the highest average attendance?", "sql": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1", "example": {"db_id": "concert_singer", "query": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1", "query_toks": ["SELECT", "name", ",", "capacity", "FROM", "stadium", "ORDER", "BY", "average", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "name", ",", "capacity", "from", "stadium", "order", "by", "average", "desc", "limit", "value"], "question": "What is the name and capacity for the stadium with the highest average attendance?", "question_toks": ["What", "is", "the", "name", "and", "capacity", "for", "the", "stadium", "with", "the", "highest", "average", "attendance", "?"], "guid": 1658}}
{"text": "artist: Artist_ID, Artist, Age, Famous_Title, Famous_Release_date; volume: Volume_ID, Volume_Issue, Issue_Date, Weeks_on_Top, Song, Artist_ID; music_festival: ID, Music_Festival, Date_of_ceremony, Category, Volume, Result | Return names of songs in volumes that are by artists that are at least 32 years old.", "sql": "SELECT T2.Song FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  >=  32", "example": {"db_id": "music_4", "query": "SELECT T2.Song FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  >=  32", "query_toks": ["SELECT", "T2.Song", "FROM", "artist", "AS", "T1", "JOIN", "volume", "AS", "T2", "ON", "T1.Artist_ID", "=", "T2.Artist_ID", "WHERE", "T1.age", ">", "=", "32"], "query_toks_no_value": ["select", "t2", ".", "song", "from", "artist", "as", "t1", "join", "volume", "as", "t2", "on", "t1", ".", "artist_id", "=", "t2", ".", "artist_id", "where", "t1", ".", "age", ">", "=", "value"], "question": "Return names of songs in volumes that are by artists that are at least 32 years old.", "question_toks": ["Return", "names", "of", "songs", "in", "volumes", "that", "are", "by", "artists", "that", "are", "at", "least", "32", "years", "old", "."], "guid": 1659}}
{"text": "artist: Artist_ID, Artist, Age, Famous_Title, Famous_Release_date; volume: Volume_ID, Volume_Issue, Issue_Date, Weeks_on_Top, Song, Artist_ID; music_festival: ID, Music_Festival, Date_of_ceremony, Category, Volume, Result | What are the dates of ceremony at music festivals corresponding to volumes that lasted more than 2 weeks on top?", "sql": "SELECT T1.Date_of_ceremony FROM music_festival AS T1 JOIN volume AS T2 ON T1.Volume  =  T2.Volume_ID WHERE T2.Weeks_on_Top  >  2", "example": {"db_id": "music_4", "query": "SELECT T1.Date_of_ceremony FROM music_festival AS T1 JOIN volume AS T2 ON T1.Volume  =  T2.Volume_ID WHERE T2.Weeks_on_Top  >  2", "query_toks": ["SELECT", "T1.Date_of_ceremony", "FROM", "music_festival", "AS", "T1", "JOIN", "volume", "AS", "T2", "ON", "T1.Volume", "=", "T2.Volume_ID", "WHERE", "T2.Weeks_on_Top", ">", "2"], "query_toks_no_value": ["select", "t1", ".", "date_of_ceremony", "from", "music_festival", "as", "t1", "join", "volume", "as", "t2", "on", "t1", ".", "volume", "=", "t2", ".", "volume_id", "where", "t2", ".", "weeks_on_top", ">", "value"], "question": "What are the dates of ceremony at music festivals corresponding to volumes that lasted more than 2 weeks on top?", "question_toks": ["What", "are", "the", "dates", "of", "ceremony", "at", "music", "festivals", "corresponding", "to", "volumes", "that", "lasted", "more", "than", "2", "weeks", "on", "top", "?"], "guid": 1660}}
{"text": "Songs: SongId, Title; Albums: AId, Title, Year, Label, Type; Band: Id, Firstname, Lastname; Instruments: SongId, BandmateId, Instrument; Performance: SongId, Bandmate, StagePosition; Tracklists: AlbumId, Position, SongId; Vocals: SongId, Bandmate, Type | What is the first and last name of the artist who performed back stage for the song \"Der Kapitan\"?", "sql": "SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  \"Der Kapitan\" AND T1.StagePosition  =  \"back\"", "example": {"db_id": "music_2", "query": "SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  \"Der Kapitan\" AND T1.StagePosition  =  \"back\"", "query_toks": ["SELECT", "T2.firstname", ",", "T2.lastname", "FROM", "Performance", "AS", "T1", "JOIN", "Band", "AS", "T2", "ON", "T1.bandmate", "=", "T2.id", "JOIN", "Songs", "AS", "T3", "ON", "T3.SongId", "=", "T1.SongId", "WHERE", "T3.Title", "=", "``", "Der", "Kapitan", "''", "AND", "T1.StagePosition", "=", "``", "back", "''"], "query_toks_no_value": ["select", "t2", ".", "firstname", ",", "t2", ".", "lastname", "from", "performance", "as", "t1", "join", "band", "as", "t2", "on", "t1", ".", "bandmate", "=", "t2", ".", "id", "join", "songs", "as", "t3", "on", "t3", ".", "songid", "=", "t1", ".", "songid", "where", "t3", ".", "title", "=", "value", "and", "t1", ".", "stageposition", "=", "value"], "question": "What is the first and last name of the artist who performed back stage for the song \"Der Kapitan\"?", "question_toks": ["What", "is", "the", "first", "and", "last", "name", "of", "the", "artist", "who", "performed", "back", "stage", "for", "the", "song", "``", "Der", "Kapitan", "''", "?"], "guid": 1661}}
{"text": "artist: Artist_ID, Artist, Age, Famous_Title, Famous_Release_date; volume: Volume_ID, Volume_Issue, Issue_Date, Weeks_on_Top, Song, Artist_ID; music_festival: ID, Music_Festival, Date_of_ceremony, Category, Volume, Result | Please show the songs that have result \"nominated\" at music festivals.", "sql": "SELECT T2.Song FROM music_festival AS T1 JOIN volume AS T2 ON T1.Volume  =  T2.Volume_ID WHERE T1.Result  =  \"Nominated\"", "example": {"db_id": "music_4", "query": "SELECT T2.Song FROM music_festival AS T1 JOIN volume AS T2 ON T1.Volume  =  T2.Volume_ID WHERE T1.Result  =  \"Nominated\"", "query_toks": ["SELECT", "T2.Song", "FROM", "music_festival", "AS", "T1", "JOIN", "volume", "AS", "T2", "ON", "T1.Volume", "=", "T2.Volume_ID", "WHERE", "T1.Result", "=", "``", "Nominated", "''"], "query_toks_no_value": ["select", "t2", ".", "song", "from", "music_festival", "as", "t1", "join", "volume", "as", "t2", "on", "t1", ".", "volume", "=", "t2", ".", "volume_id", "where", "t1", ".", "result", "=", "value"], "question": "Please show the songs that have result \"nominated\" at music festivals.", "question_toks": ["Please", "show", "the", "songs", "that", "have", "result", "``", "nominated", "''", "at", "music", "festivals", "."], "guid": 1662}}
{"text": "genre: g_name, rating, most_popular_in; artist: artist_name, country, gender, preferred_genre; files: f_id, artist_name, file_size, duration, formats; song: song_name, artist_name, country, f_id, genre_is, rating, languages, releasedate, resolution | What are the names of all songs that are ordered by their resolution numbers?", "sql": "SELECT song_name FROM song ORDER BY resolution", "example": {"db_id": "music_1", "query": "SELECT song_name FROM song ORDER BY resolution", "query_toks": ["SELECT", "song_name", "FROM", "song", "ORDER", "BY", "resolution"], "query_toks_no_value": ["select", "song_name", "from", "song", "order", "by", "resolution"], "question": "What are the names of all songs that are ordered by their resolution numbers?", "question_toks": ["What", "are", "the", "names", "of", "all", "songs", "that", "are", "ordered", "by", "their", "resolution", "numbers", "?"], "guid": 1663}}
{"text": "Songs: SongId, Title; Albums: AId, Title, Year, Label, Type; Band: Id, Firstname, Lastname; Instruments: SongId, BandmateId, Instrument; Performance: SongId, Bandmate, StagePosition; Tracklists: AlbumId, Position, SongId; Vocals: SongId, Bandmate, Type | Find the first name of the band mate that has performed in most songs.", "sql": "SELECT t2.firstname FROM Performance AS t1 JOIN Band AS t2 ON t1.bandmate  =  t2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId GROUP BY firstname ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "music_2", "query": "SELECT t2.firstname FROM Performance AS t1 JOIN Band AS t2 ON t1.bandmate  =  t2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId GROUP BY firstname ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "t2.firstname", "FROM", "Performance", "AS", "t1", "JOIN", "Band", "AS", "t2", "ON", "t1.bandmate", "=", "t2.id", "JOIN", "Songs", "AS", "T3", "ON", "T3.SongId", "=", "T1.SongId", "GROUP", "BY", "firstname", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "firstname", "from", "performance", "as", "t1", "join", "band", "as", "t2", "on", "t1", ".", "bandmate", "=", "t2", ".", "id", "join", "songs", "as", "t3", "on", "t3", ".", "songid", "=", "t1", ".", "songid", "group", "by", "firstname", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Find the first name of the band mate that has performed in most songs.", "question_toks": ["Find", "the", "first", "name", "of", "the", "band", "mate", "that", "has", "performed", "in", "most", "songs", "."], "guid": 1664}}
{"text": "stadium: Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average; singer: Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male; concert: concert_ID, concert_Name, Theme, Stadium_ID, Year; singer_in_concert: concert_ID, Singer_ID | What is the maximum capacity and the average of all stadiums ?", "sql": "select max(capacity), average from stadium", "example": {"db_id": "concert_singer", "query": "select max(capacity), average from stadium", "query_toks": ["select", "max", "(", "capacity", ")", ",", "average", "from", "stadium"], "query_toks_no_value": ["select", "max", "(", "capacity", ")", ",", "average", "from", "stadium"], "question": "What is the maximum capacity and the average of all stadiums ?", "question_toks": ["What", "is", "the", "maximum", "capacity", "and", "the", "average", "of", "all", "stadiums", "?"], "guid": 1665}}
{"text": "Songs: SongId, Title; Albums: AId, Title, Year, Label, Type; Band: Id, Firstname, Lastname; Instruments: SongId, BandmateId, Instrument; Performance: SongId, Bandmate, StagePosition; Tracklists: AlbumId, Position, SongId; Vocals: SongId, Bandmate, Type | Which vocal type did the musician with last name \"Heilo\" played in the song with title \"Der Kapitan\"?", "sql": "SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid JOIN band AS T3 ON T1.bandmate  =  T3.id WHERE T3.lastname  =  \"Heilo\" AND T2.title  =  \"Der Kapitan\"", "example": {"db_id": "music_2", "query": "SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid JOIN band AS T3 ON T1.bandmate  =  T3.id WHERE T3.lastname  =  \"Heilo\" AND T2.title  =  \"Der Kapitan\"", "query_toks": ["SELECT", "TYPE", "FROM", "vocals", "AS", "T1", "JOIN", "songs", "AS", "T2", "ON", "T1.songid", "=", "T2.songid", "JOIN", "band", "AS", "T3", "ON", "T1.bandmate", "=", "T3.id", "WHERE", "T3.lastname", "=", "``", "Heilo", "''", "AND", "T2.title", "=", "``", "Der", "Kapitan", "''"], "query_toks_no_value": ["select", "type", "from", "vocals", "as", "t1", "join", "songs", "as", "t2", "on", "t1", ".", "songid", "=", "t2", ".", "songid", "join", "band", "as", "t3", "on", "t1", ".", "bandmate", "=", "t3", ".", "id", "where", "t3", ".", "lastname", "=", "value", "and", "t2", ".", "title", "=", "value"], "question": "Which vocal type did the musician with last name \"Heilo\" played in the song with title \"Der Kapitan\"?", "question_toks": ["Which", "vocal", "type", "did", "the", "musician", "with", "last", "name", "``", "Heilo", "''", "played", "in", "the", "song", "with", "title", "``", "Der", "Kapitan", "''", "?"], "guid": 1666}}
{"text": "genre: g_name, rating, most_popular_in; artist: artist_name, country, gender, preferred_genre; files: f_id, artist_name, file_size, duration, formats; song: song_name, artist_name, country, f_id, genre_is, rating, languages, releasedate, resolution | List the names of all songs that have 4 minute duration or are in English.", "sql": "SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.duration LIKE \"4:%\" UNION SELECT song_name FROM song WHERE languages  =  \"english\"", "example": {"db_id": "music_1", "query": "SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.duration LIKE \"4:%\" UNION SELECT song_name FROM song WHERE languages  =  \"english\"", "query_toks": ["SELECT", "T2.song_name", "FROM", "files", "AS", "T1", "JOIN", "song", "AS", "T2", "ON", "T1.f_id", "=", "T2.f_id", "WHERE", "T1.duration", "LIKE", "``", "4", ":", "%", "''", "UNION", "SELECT", "song_name", "FROM", "song", "WHERE", "languages", "=", "``", "english", "''"], "query_toks_no_value": ["select", "t2", ".", "song_name", "from", "files", "as", "t1", "join", "song", "as", "t2", "on", "t1", ".", "f_id", "=", "t2", ".", "f_id", "where", "t1", ".", "duration", "like", "value", "union", "select", "song_name", "from", "song", "where", "languages", "=", "value"], "question": "List the names of all songs that have 4 minute duration or are in English.", "question_toks": ["List", "the", "names", "of", "all", "songs", "that", "have", "4", "minute", "duration", "or", "are", "in", "English", "."], "guid": 1667}}
{"text": "genre: g_name, rating, most_popular_in; artist: artist_name, country, gender, preferred_genre; files: f_id, artist_name, file_size, duration, formats; song: song_name, artist_name, country, f_id, genre_is, rating, languages, releasedate, resolution | List the id, genre and artist name of English songs ordered by rating.", "sql": "SELECT f_id ,  genre_is ,  artist_name FROM song WHERE languages  =   \"english\" ORDER BY rating", "example": {"db_id": "music_1", "query": "SELECT f_id ,  genre_is ,  artist_name FROM song WHERE languages  =   \"english\" ORDER BY rating", "query_toks": ["SELECT", "f_id", ",", "genre_is", ",", "artist_name", "FROM", "song", "WHERE", "languages", "=", "``", "english", "''", "ORDER", "BY", "rating"], "query_toks_no_value": ["select", "f_id", ",", "genre_is", ",", "artist_name", "from", "song", "where", "languages", "=", "value", "order", "by", "rating"], "question": "List the id, genre and artist name of English songs ordered by rating.", "question_toks": ["List", "the", "id", ",", "genre", "and", "artist", "name", "of", "English", "songs", "ordered", "by", "rating", "."], "guid": 1668}}
{"text": "artist: Artist_ID, Artist, Age, Famous_Title, Famous_Release_date; volume: Volume_ID, Volume_Issue, Issue_Date, Weeks_on_Top, Song, Artist_ID; music_festival: ID, Music_Festival, Date_of_ceremony, Category, Volume, Result | What are the famous titles and ages of each artist, listed in descending order by age?", "sql": "SELECT Famous_Title ,  Age FROM artist ORDER BY Age DESC", "example": {"db_id": "music_4", "query": "SELECT Famous_Title ,  Age FROM artist ORDER BY Age DESC", "query_toks": ["SELECT", "Famous_Title", ",", "Age", "FROM", "artist", "ORDER", "BY", "Age", "DESC"], "query_toks_no_value": ["select", "famous_title", ",", "age", "from", "artist", "order", "by", "age", "desc"], "question": "What are the famous titles and ages of each artist, listed in descending order by age?", "question_toks": ["What", "are", "the", "famous", "titles", "and", "ages", "of", "each", "artist", ",", "listed", "in", "descending", "order", "by", "age", "?"], "guid": 1669}}
{"text": "artist: Artist_ID, Artist, Age, Famous_Title, Famous_Release_date; volume: Volume_ID, Volume_Issue, Issue_Date, Weeks_on_Top, Song, Artist_ID; music_festival: ID, Music_Festival, Date_of_ceremony, Category, Volume, Result | What are the date of ceremony of music festivals with category \"Best Song\" and result \"Awarded\"?", "sql": "SELECT Date_of_ceremony FROM music_festival WHERE Category  =  \"Best Song\" AND RESULT  =  \"Awarded\"", "example": {"db_id": "music_4", "query": "SELECT Date_of_ceremony FROM music_festival WHERE Category  =  \"Best Song\" AND RESULT  =  \"Awarded\"", "query_toks": ["SELECT", "Date_of_ceremony", "FROM", "music_festival", "WHERE", "Category", "=", "``", "Best", "Song", "''", "AND", "RESULT", "=", "``", "Awarded", "''"], "query_toks_no_value": ["select", "date_of_ceremony", "from", "music_festival", "where", "category", "=", "value", "and", "result", "=", "value"], "question": "What are the date of ceremony of music festivals with category \"Best Song\" and result \"Awarded\"?", "question_toks": ["What", "are", "the", "date", "of", "ceremony", "of", "music", "festivals", "with", "category", "``", "Best", "Song", "''", "and", "result", "``", "Awarded", "''", "?"], "guid": 1670}}
{"text": "genre: g_name, rating, most_popular_in; artist: artist_name, country, gender, preferred_genre; files: f_id, artist_name, file_size, duration, formats; song: song_name, artist_name, country, f_id, genre_is, rating, languages, releasedate, resolution | What country is the artist who made the fewest songs from?", "sql": "SELECT T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name GROUP BY T2.artist_name ORDER BY count(*) LIMIT 1", "example": {"db_id": "music_1", "query": "SELECT T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name GROUP BY T2.artist_name ORDER BY count(*) LIMIT 1", "query_toks": ["SELECT", "T1.country", "FROM", "artist", "AS", "T1", "JOIN", "song", "AS", "T2", "ON", "T1.artist_name", "=", "T2.artist_name", "GROUP", "BY", "T2.artist_name", "ORDER", "BY", "count", "(", "*", ")", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "country", "from", "artist", "as", "t1", "join", "song", "as", "t2", "on", "t1", ".", "artist_name", "=", "t2", ".", "artist_name", "group", "by", "t2", ".", "artist_name", "order", "by", "count", "(", "*", ")", "limit", "value"], "question": "What country is the artist who made the fewest songs from?", "question_toks": ["What", "country", "is", "the", "artist", "who", "made", "the", "fewest", "songs", "from", "?"], "guid": 1671}}
{"text": "musical: Musical_ID, Name, Year, Award, Category, Nominee, Result; actor: Actor_ID, Name, Musical_ID, Character, Duration, age | Return the characters and durations for each actor.", "sql": "SELECT Character ,  Duration FROM actor", "example": {"db_id": "musical", "query": "SELECT Character ,  Duration FROM actor", "query_toks": ["SELECT", "Character", ",", "Duration", "FROM", "actor"], "query_toks_no_value": ["select", "character", ",", "duration", "from", "actor"], "question": "Return the characters and durations for each actor.", "question_toks": ["Return", "the", "characters", "and", "durations", "for", "each", "actor", "."], "guid": 1672}}
{"text": "artist: Artist_ID, Artist, Age, Famous_Title, Famous_Release_date; volume: Volume_ID, Volume_Issue, Issue_Date, Weeks_on_Top, Song, Artist_ID; music_festival: ID, Music_Festival, Date_of_ceremony, Category, Volume, Result | What are the ages of all music artists?", "sql": "SELECT Age FROM artist", "example": {"db_id": "music_4", "query": "SELECT Age FROM artist", "query_toks": ["SELECT", "Age", "FROM", "artist"], "query_toks_no_value": ["select", "age", "from", "artist"], "question": "What are the ages of all music artists?", "question_toks": ["What", "are", "the", "ages", "of", "all", "music", "artists", "?"], "guid": 1673}}
{"text": "Songs: SongId, Title; Albums: AId, Title, Year, Label, Type; Band: Id, Firstname, Lastname; Instruments: SongId, BandmateId, Instrument; Performance: SongId, Bandmate, StagePosition; Tracklists: AlbumId, Position, SongId; Vocals: SongId, Bandmate, Type | Who is performing in the back stage position for the song \"Der Kapitan\"? Show the first name and last name.", "sql": "SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  \"Der Kapitan\" AND T1.StagePosition  =  \"back\"", "example": {"db_id": "music_2", "query": "SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  \"Der Kapitan\" AND T1.StagePosition  =  \"back\"", "query_toks": ["SELECT", "T2.firstname", ",", "T2.lastname", "FROM", "Performance", "AS", "T1", "JOIN", "Band", "AS", "T2", "ON", "T1.bandmate", "=", "T2.id", "JOIN", "Songs", "AS", "T3", "ON", "T3.SongId", "=", "T1.SongId", "WHERE", "T3.Title", "=", "``", "Der", "Kapitan", "''", "AND", "T1.StagePosition", "=", "``", "back", "''"], "query_toks_no_value": ["select", "t2", ".", "firstname", ",", "t2", ".", "lastname", "from", "performance", "as", "t1", "join", "band", "as", "t2", "on", "t1", ".", "bandmate", "=", "t2", ".", "id", "join", "songs", "as", "t3", "on", "t3", ".", "songid", "=", "t1", ".", "songid", "where", "t3", ".", "title", "=", "value", "and", "t1", ".", "stageposition", "=", "value"], "question": "Who is performing in the back stage position for the song \"Der Kapitan\"? Show the first name and last name.", "question_toks": ["Who", "is", "performing", "in", "the", "back", "stage", "position", "for", "the", "song", "``", "Der", "Kapitan", "''", "?", "Show", "the", "first", "name", "and", "last", "name", "."], "guid": 1674}}
{"text": "musical: Musical_ID, Name, Year, Award, Category, Nominee, Result; actor: Actor_ID, Name, Musical_ID, Character, Duration, age | Return the names of musicals who have the nominee Bob Fosse.", "sql": "SELECT Name FROM musical WHERE Nominee  =  \"Bob Fosse\"", "example": {"db_id": "musical", "query": "SELECT Name FROM musical WHERE Nominee  =  \"Bob Fosse\"", "query_toks": ["SELECT", "Name", "FROM", "musical", "WHERE", "Nominee", "=", "``", "Bob", "Fosse", "''"], "query_toks_no_value": ["select", "name", "from", "musical", "where", "nominee", "=", "value"], "question": "Return the names of musicals who have the nominee Bob Fosse.", "question_toks": ["Return", "the", "names", "of", "musicals", "who", "have", "the", "nominee", "Bob", "Fosse", "."], "guid": 1675}}
{"text": "artist: Artist_ID, Artist, Age, Famous_Title, Famous_Release_date; volume: Volume_ID, Volume_Issue, Issue_Date, Weeks_on_Top, Song, Artist_ID; music_festival: ID, Music_Festival, Date_of_ceremony, Category, Volume, Result | Give the maximum and minimum weeks on top across all volumes.", "sql": "SELECT max(Weeks_on_Top) ,  min(Weeks_on_Top) FROM volume", "example": {"db_id": "music_4", "query": "SELECT max(Weeks_on_Top) ,  min(Weeks_on_Top) FROM volume", "query_toks": ["SELECT", "max", "(", "Weeks_on_Top", ")", ",", "min", "(", "Weeks_on_Top", ")", "FROM", "volume"], "query_toks_no_value": ["select", "max", "(", "weeks_on_top", ")", ",", "min", "(", "weeks_on_top", ")", "from", "volume"], "question": "Give the maximum and minimum weeks on top across all volumes.", "question_toks": ["Give", "the", "maximum", "and", "minimum", "weeks", "on", "top", "across", "all", "volumes", "."], "guid": 1676}}
{"text": "artist: Artist_ID, Artist, Age, Famous_Title, Famous_Release_date; volume: Volume_ID, Volume_Issue, Issue_Date, Weeks_on_Top, Song, Artist_ID; music_festival: ID, Music_Festival, Date_of_ceremony, Category, Volume, Result | How many artists are there?", "sql": "SELECT count(*) FROM artist", "example": {"db_id": "music_4", "query": "SELECT count(*) FROM artist", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "artist"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "artist"], "question": "How many artists are there?", "question_toks": ["How", "many", "artists", "are", "there", "?"], "guid": 1677}}
{"text": "musical: Musical_ID, Name, Year, Award, Category, Nominee, Result; actor: Actor_ID, Name, Musical_ID, Character, Duration, age | What are the names of actors, ordered alphabetically?", "sql": "SELECT Name FROM actor ORDER BY Name ASC", "example": {"db_id": "musical", "query": "SELECT Name FROM actor ORDER BY Name ASC", "query_toks": ["SELECT", "Name", "FROM", "actor", "ORDER", "BY", "Name", "ASC"], "query_toks_no_value": ["select", "name", "from", "actor", "order", "by", "name", "asc"], "question": "What are the names of actors, ordered alphabetically?", "question_toks": ["What", "are", "the", "names", "of", "actors", ",", "ordered", "alphabetically", "?"], "guid": 1678}}
{"text": "Songs: SongId, Title; Albums: AId, Title, Year, Label, Type; Band: Id, Firstname, Lastname; Instruments: SongId, BandmateId, Instrument; Performance: SongId, Bandmate, StagePosition; Tracklists: AlbumId, Position, SongId; Vocals: SongId, Bandmate, Type | What is the label that has the most albums?", "sql": "SELECT label FROM albums GROUP BY label ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "music_2", "query": "SELECT label FROM albums GROUP BY label ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "label", "FROM", "albums", "GROUP", "BY", "label", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "label", "from", "albums", "group", "by", "label", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the label that has the most albums?", "question_toks": ["What", "is", "the", "label", "that", "has", "the", "most", "albums", "?"], "guid": 1679}}
{"text": "musical: Musical_ID, Name, Year, Award, Category, Nominee, Result; actor: Actor_ID, Name, Musical_ID, Character, Duration, age | What are the characters of actors in descending order of age?", "sql": "SELECT Character FROM actor ORDER BY age DESC", "example": {"db_id": "musical", "query": "SELECT Character FROM actor ORDER BY age DESC", "query_toks": ["SELECT", "Character", "FROM", "actor", "ORDER", "BY", "age", "DESC"], "query_toks_no_value": ["select", "character", "from", "actor", "order", "by", "age", "desc"], "question": "What are the characters of actors in descending order of age?", "question_toks": ["What", "are", "the", "characters", "of", "actors", "in", "descending", "order", "of", "age", "?"], "guid": 1680}}
{"text": "stadium: Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average; singer: Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male; concert: concert_ID, concert_Name, Theme, Stadium_ID, Year; singer_in_concert: concert_ID, Singer_ID | Show the stadium name and the number of concerts in each stadium.", "sql": "SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id", "example": {"db_id": "concert_singer", "query": "SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id", "query_toks": ["SELECT", "T2.name", ",", "count", "(", "*", ")", "FROM", "concert", "AS", "T1", "JOIN", "stadium", "AS", "T2", "ON", "T1.stadium_id", "=", "T2.stadium_id", "GROUP", "BY", "T1.stadium_id"], "query_toks_no_value": ["select", "t2", ".", "name", ",", "count", "(", "*", ")", "from", "concert", "as", "t1", "join", "stadium", "as", "t2", "on", "t1", ".", "stadium_id", "=", "t2", ".", "stadium_id", "group", "by", "t1", ".", "stadium_id"], "question": "Show the stadium name and the number of concerts in each stadium.", "question_toks": ["Show", "the", "stadium", "name", "and", "the", "number", "of", "concerts", "in", "each", "stadium", "."], "guid": 1681}}
{"text": "Songs: SongId, Title; Albums: AId, Title, Year, Label, Type; Band: Id, Firstname, Lastname; Instruments: SongId, BandmateId, Instrument; Performance: SongId, Bandmate, StagePosition; Tracklists: AlbumId, Position, SongId; Vocals: SongId, Bandmate, Type | Which vocal type has the band mate with last name \"Heilo\" played the most?", "sql": "SELECT TYPE FROM vocals AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id WHERE lastname  =  \"Heilo\" GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "music_2", "query": "SELECT TYPE FROM vocals AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id WHERE lastname  =  \"Heilo\" GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "TYPE", "FROM", "vocals", "AS", "T1", "JOIN", "band", "AS", "T2", "ON", "T1.bandmate", "=", "T2.id", "WHERE", "lastname", "=", "``", "Heilo", "''", "GROUP", "BY", "TYPE", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "type", "from", "vocals", "as", "t1", "join", "band", "as", "t2", "on", "t1", ".", "bandmate", "=", "t2", ".", "id", "where", "lastname", "=", "value", "group", "by", "type", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which vocal type has the band mate with last name \"Heilo\" played the most?", "question_toks": ["Which", "vocal", "type", "has", "the", "band", "mate", "with", "last", "name", "``", "Heilo", "''", "played", "the", "most", "?"], "guid": 1682}}
{"text": "musical: Musical_ID, Name, Year, Award, Category, Nominee, Result; actor: Actor_ID, Name, Musical_ID, Character, Duration, age | Who are the nominees who have been nominated more than two times?", "sql": "SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  2", "example": {"db_id": "musical", "query": "SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  2", "query_toks": ["SELECT", "Nominee", "FROM", "musical", "GROUP", "BY", "Nominee", "HAVING", "COUNT", "(", "*", ")", ">", "2"], "query_toks_no_value": ["select", "nominee", "from", "musical", "group", "by", "nominee", "having", "count", "(", "*", ")", ">", "value"], "question": "Who are the nominees who have been nominated more than two times?", "question_toks": ["Who", "are", "the", "nominees", "who", "have", "been", "nominated", "more", "than", "two", "times", "?"], "guid": 1683}}
{"text": "singer: Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship; song: Song_ID, Title, Singer_ID, Sales, Highest_Position | what are the different names of the singers that have sales more than 300000?", "sql": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000", "example": {"db_id": "singer", "query": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000", "query_toks": ["SELECT", "DISTINCT", "T1.Name", "FROM", "singer", "AS", "T1", "JOIN", "song", "AS", "T2", "ON", "T1.Singer_ID", "=", "T2.Singer_ID", "WHERE", "T2.Sales", ">", "300000"], "query_toks_no_value": ["select", "distinct", "t1", ".", "name", "from", "singer", "as", "t1", "join", "song", "as", "t2", "on", "t1", ".", "singer_id", "=", "t2", ".", "singer_id", "where", "t2", ".", "sales", ">", "value"], "question": "what are the different names of the singers that have sales more than 300000?", "question_toks": ["what", "are", "the", "different", "names", "of", "the", "singers", "that", "have", "sales", "more", "than", "300000", "?"], "guid": 1684}}
{"text": "genre: g_name, rating, most_popular_in; artist: artist_name, country, gender, preferred_genre; files: f_id, artist_name, file_size, duration, formats; song: song_name, artist_name, country, f_id, genre_is, rating, languages, releasedate, resolution | List the name and country of origin for all singers who have produced songs with rating above 9.", "sql": "SELECT DISTINCT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.rating  >  9", "example": {"db_id": "music_1", "query": "SELECT DISTINCT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.rating  >  9", "query_toks": ["SELECT", "DISTINCT", "T1.artist_name", ",", "T1.country", "FROM", "artist", "AS", "T1", "JOIN", "song", "AS", "T2", "ON", "T1.artist_name", "=", "T2.artist_name", "WHERE", "T2.rating", ">", "9"], "query_toks_no_value": ["select", "distinct", "t1", ".", "artist_name", ",", "t1", ".", "country", "from", "artist", "as", "t1", "join", "song", "as", "t2", "on", "t1", ".", "artist_name", "=", "t2", ".", "artist_name", "where", "t2", ".", "rating", ">", "value"], "question": "List the name and country of origin for all singers who have produced songs with rating above 9.", "question_toks": ["List", "the", "name", "and", "country", "of", "origin", "for", "all", "singers", "who", "have", "produced", "songs", "with", "rating", "above", "9", "."], "guid": 1685}}
{"text": "artist: Artist_ID, Artist, Age, Famous_Title, Famous_Release_date; volume: Volume_ID, Volume_Issue, Issue_Date, Weeks_on_Top, Song, Artist_ID; music_festival: ID, Music_Festival, Date_of_ceremony, Category, Volume, Result | What are the issue dates of volumes associated with the artist \"Gorgoroth\"?", "sql": "SELECT T2.Issue_Date FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.Artist  =  \"Gorgoroth\"", "example": {"db_id": "music_4", "query": "SELECT T2.Issue_Date FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.Artist  =  \"Gorgoroth\"", "query_toks": ["SELECT", "T2.Issue_Date", "FROM", "artist", "AS", "T1", "JOIN", "volume", "AS", "T2", "ON", "T1.Artist_ID", "=", "T2.Artist_ID", "WHERE", "T1.Artist", "=", "``", "Gorgoroth", "''"], "query_toks_no_value": ["select", "t2", ".", "issue_date", "from", "artist", "as", "t1", "join", "volume", "as", "t2", "on", "t1", ".", "artist_id", "=", "t2", ".", "artist_id", "where", "t1", ".", "artist", "=", "value"], "question": "What are the issue dates of volumes associated with the artist \"Gorgoroth\"?", "question_toks": ["What", "are", "the", "issue", "dates", "of", "volumes", "associated", "with", "the", "artist", "``", "Gorgoroth", "''", "?"], "guid": 1686}}
{"text": "Songs: SongId, Title; Albums: AId, Title, Year, Label, Type; Band: Id, Firstname, Lastname; Instruments: SongId, BandmateId, Instrument; Performance: SongId, Bandmate, StagePosition; Tracklists: AlbumId, Position, SongId; Vocals: SongId, Bandmate, Type | What are the vocal types used in song \"Badlands\"?", "sql": "SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Badlands\"", "example": {"db_id": "music_2", "query": "SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Badlands\"", "query_toks": ["SELECT", "TYPE", "FROM", "vocals", "AS", "T1", "JOIN", "songs", "AS", "T2", "ON", "T1.songid", "=", "T2.songid", "WHERE", "title", "=", "``", "Badlands", "''"], "query_toks_no_value": ["select", "type", "from", "vocals", "as", "t1", "join", "songs", "as", "t2", "on", "t1", ".", "songid", "=", "t2", ".", "songid", "where", "title", "=", "value"], "question": "What are the vocal types used in song \"Badlands\"?", "question_toks": ["What", "are", "the", "vocal", "types", "used", "in", "song", "``", "Badlands", "''", "?"], "guid": 1687}}
{"text": "genre: g_name, rating, most_popular_in; artist: artist_name, country, gender, preferred_genre; files: f_id, artist_name, file_size, duration, formats; song: song_name, artist_name, country, f_id, genre_is, rating, languages, releasedate, resolution | What are the names of all songs that are approximately 4 minutes long or are in English?", "sql": "SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.duration LIKE \"4:%\" UNION SELECT song_name FROM song WHERE languages  =  \"english\"", "example": {"db_id": "music_1", "query": "SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.duration LIKE \"4:%\" UNION SELECT song_name FROM song WHERE languages  =  \"english\"", "query_toks": ["SELECT", "T2.song_name", "FROM", "files", "AS", "T1", "JOIN", "song", "AS", "T2", "ON", "T1.f_id", "=", "T2.f_id", "WHERE", "T1.duration", "LIKE", "``", "4", ":", "%", "''", "UNION", "SELECT", "song_name", "FROM", "song", "WHERE", "languages", "=", "``", "english", "''"], "query_toks_no_value": ["select", "t2", ".", "song_name", "from", "files", "as", "t1", "join", "song", "as", "t2", "on", "t1", ".", "f_id", "=", "t2", ".", "f_id", "where", "t1", ".", "duration", "like", "value", "union", "select", "song_name", "from", "song", "where", "languages", "=", "value"], "question": "What are the names of all songs that are approximately 4 minutes long or are in English?", "question_toks": ["What", "are", "the", "names", "of", "all", "songs", "that", "are", "approximately", "4", "minutes", "long", "or", "are", "in", "English", "?"], "guid": 1688}}
{"text": "musical: Musical_ID, Name, Year, Award, Category, Nominee, Result; actor: Actor_ID, Name, Musical_ID, Character, Duration, age | Show names of musicals which have at least three actors.", "sql": "SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  3", "example": {"db_id": "musical", "query": "SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  3", "query_toks": ["SELECT", "T2.Name", "FROM", "actor", "AS", "T1", "JOIN", "musical", "AS", "T2", "ON", "T1.Musical_ID", "=", "T2.Musical_ID", "GROUP", "BY", "T1.Musical_ID", "HAVING", "COUNT", "(", "*", ")", ">", "=", "3"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "actor", "as", "t1", "join", "musical", "as", "t2", "on", "t1", ".", "musical_id", "=", "t2", ".", "musical_id", "group", "by", "t1", ".", "musical_id", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "Show names of musicals which have at least three actors.", "question_toks": ["Show", "names", "of", "musicals", "which", "have", "at", "least", "three", "actors", "."], "guid": 1689}}
{"text": "artist: Artist_ID, Artist, Age, Famous_Title, Famous_Release_date; volume: Volume_ID, Volume_Issue, Issue_Date, Weeks_on_Top, Song, Artist_ID; music_festival: ID, Music_Festival, Date_of_ceremony, Category, Volume, Result | Find the famous titles of artists that do not have any volume.", "sql": "SELECT Famous_Title FROM artist WHERE Artist_ID NOT IN(SELECT Artist_ID FROM volume)", "example": {"db_id": "music_4", "query": "SELECT Famous_Title FROM artist WHERE Artist_ID NOT IN(SELECT Artist_ID FROM volume)", "query_toks": ["SELECT", "Famous_Title", "FROM", "artist", "WHERE", "Artist_ID", "NOT", "IN", "(", "SELECT", "Artist_ID", "FROM", "volume", ")"], "query_toks_no_value": ["select", "famous_title", "from", "artist", "where", "artist_id", "not", "in", "(", "select", "artist_id", "from", "volume", ")"], "question": "Find the famous titles of artists that do not have any volume.", "question_toks": ["Find", "the", "famous", "titles", "of", "artists", "that", "do", "not", "have", "any", "volume", "."], "guid": 1690}}
{"text": "genre: g_name, rating, most_popular_in; artist: artist_name, country, gender, preferred_genre; files: f_id, artist_name, file_size, duration, formats; song: song_name, artist_name, country, f_id, genre_is, rating, languages, releasedate, resolution | How many songs were released for each format?", "sql": "SELECT count(*) ,  formats FROM files GROUP BY formats", "example": {"db_id": "music_1", "query": "SELECT count(*) ,  formats FROM files GROUP BY formats", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "formats", "FROM", "files", "GROUP", "BY", "formats"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "formats", "from", "files", "group", "by", "formats"], "question": "How many songs were released for each format?", "question_toks": ["How", "many", "songs", "were", "released", "for", "each", "format", "?"], "guid": 1691}}
{"text": "conductor: Conductor_ID, Name, Age, Nationality, Year_of_Work; orchestra: Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format; performance: Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share; show: Show_ID, Performance_ID, If_first_show, Result, Attendance | Show the years in which orchestras that have given more than one performance are founded.", "sql": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1", "example": {"db_id": "orchestra", "query": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1", "query_toks": ["SELECT", "Year_of_Founded", "FROM", "orchestra", "AS", "T1", "JOIN", "performance", "AS", "T2", "ON", "T1.Orchestra_ID", "=", "T2.Orchestra_ID", "GROUP", "BY", "T2.Orchestra_ID", "HAVING", "COUNT", "(", "*", ")", ">", "1"], "query_toks_no_value": ["select", "year_of_founded", "from", "orchestra", "as", "t1", "join", "performance", "as", "t2", "on", "t1", ".", "orchestra_id", "=", "t2", ".", "orchestra_id", "group", "by", "t2", ".", "orchestra_id", "having", "count", "(", "*", ")", ">", "value"], "question": "Show the years in which orchestras that have given more than one performance are founded.", "question_toks": ["Show", "the", "years", "in", "which", "orchestras", "that", "have", "given", "more", "than", "one", "performance", "are", "founded", "."], "guid": 1692}}
{"text": "artist: Artist_ID, Artist, Age, Famous_Title, Famous_Release_date; volume: Volume_ID, Volume_Issue, Issue_Date, Weeks_on_Top, Song, Artist_ID; music_festival: ID, Music_Festival, Date_of_ceremony, Category, Volume, Result | Please list all songs in volumes in ascending alphabetical order.", "sql": "SELECT Song FROM volume ORDER BY Song", "example": {"db_id": "music_4", "query": "SELECT Song FROM volume ORDER BY Song", "query_toks": ["SELECT", "Song", "FROM", "volume", "ORDER", "BY", "Song"], "query_toks_no_value": ["select", "song", "from", "volume", "order", "by", "song"], "question": "Please list all songs in volumes in ascending alphabetical order.", "question_toks": ["Please", "list", "all", "songs", "in", "volumes", "in", "ascending", "alphabetical", "order", "."], "guid": 1693}}
{"text": "conductor: Conductor_ID, Name, Age, Nationality, Year_of_Work; orchestra: Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format; performance: Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share; show: Show_ID, Performance_ID, If_first_show, Result, Attendance | What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003?", "sql": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003", "example": {"db_id": "orchestra", "query": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003", "query_toks": ["SELECT", "Record_Company", "FROM", "orchestra", "WHERE", "Year_of_Founded", "<", "2003", "INTERSECT", "SELECT", "Record_Company", "FROM", "orchestra", "WHERE", "Year_of_Founded", ">", "2003"], "query_toks_no_value": ["select", "record_company", "from", "orchestra", "where", "year_of_founded", "<", "value", "intersect", "select", "record_company", "from", "orchestra", "where", "year_of_founded", ">", "value"], "question": "What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003?", "question_toks": ["What", "are", "the", "record", "companies", "that", "are", "used", "by", "both", "orchestras", "founded", "before", "2003", "and", "those", "founded", "after", "2003", "?"], "guid": 1694}}
{"text": "stadium: Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average; singer: Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male; concert: concert_ID, concert_Name, Theme, Stadium_ID, Year; singer_in_concert: concert_ID, Singer_ID | List singer names and number of concerts for each singer.", "sql": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id", "example": {"db_id": "concert_singer", "query": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id", "query_toks": ["SELECT", "T2.name", ",", "count", "(", "*", ")", "FROM", "singer_in_concert", "AS", "T1", "JOIN", "singer", "AS", "T2", "ON", "T1.singer_id", "=", "T2.singer_id", "GROUP", "BY", "T2.singer_id"], "query_toks_no_value": ["select", "t2", ".", "name", ",", "count", "(", "*", ")", "from", "singer_in_concert", "as", "t1", "join", "singer", "as", "t2", "on", "t1", ".", "singer_id", "=", "t2", ".", "singer_id", "group", "by", "t2", ".", "singer_id"], "question": "List singer names and number of concerts for each singer.", "question_toks": ["List", "singer", "names", "and", "number", "of", "concerts", "for", "each", "singer", "."], "guid": 1695}}
{"text": "Songs: SongId, Title; Albums: AId, Title, Year, Label, Type; Band: Id, Firstname, Lastname; Instruments: SongId, BandmateId, Instrument; Performance: SongId, Bandmate, StagePosition; Tracklists: AlbumId, Position, SongId; Vocals: SongId, Bandmate, Type | Hom many musicians performed in the song \"Flash\"?", "sql": "SELECT count(*) FROM performance AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id JOIN songs AS T3 ON T3.songid  =  T1.songid WHERE T3.Title  =  \"Flash\"", "example": {"db_id": "music_2", "query": "SELECT count(*) FROM performance AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id JOIN songs AS T3 ON T3.songid  =  T1.songid WHERE T3.Title  =  \"Flash\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "performance", "AS", "T1", "JOIN", "band", "AS", "T2", "ON", "T1.bandmate", "=", "T2.id", "JOIN", "songs", "AS", "T3", "ON", "T3.songid", "=", "T1.songid", "WHERE", "T3.Title", "=", "``", "Flash", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "performance", "as", "t1", "join", "band", "as", "t2", "on", "t1", ".", "bandmate", "=", "t2", ".", "id", "join", "songs", "as", "t3", "on", "t3", ".", "songid", "=", "t1", ".", "songid", "where", "t3", ".", "title", "=", "value"], "question": "Hom many musicians performed in the song \"Flash\"?", "question_toks": ["Hom", "many", "musicians", "performed", "in", "the", "song", "``", "Flash", "''", "?"], "guid": 1696}}
{"text": "musical: Musical_ID, Name, Year, Award, Category, Nominee, Result; actor: Actor_ID, Name, Musical_ID, Character, Duration, age | How many actors are there?", "sql": "SELECT count(*) FROM actor", "example": {"db_id": "musical", "query": "SELECT count(*) FROM actor", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "actor"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "actor"], "question": "How many actors are there?", "question_toks": ["How", "many", "actors", "are", "there", "?"], "guid": 1697}}
{"text": "artist: Artist_ID, Artist, Age, Famous_Title, Famous_Release_date; volume: Volume_ID, Volume_Issue, Issue_Date, Weeks_on_Top, Song, Artist_ID; music_festival: ID, Music_Festival, Date_of_ceremony, Category, Volume, Result | Return the famous release date for the oldest artist.", "sql": "SELECT Famous_Release_date FROM artist ORDER BY Age DESC LIMIT 1", "example": {"db_id": "music_4", "query": "SELECT Famous_Release_date FROM artist ORDER BY Age DESC LIMIT 1", "query_toks": ["SELECT", "Famous_Release_date", "FROM", "artist", "ORDER", "BY", "Age", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "famous_release_date", "from", "artist", "order", "by", "age", "desc", "limit", "value"], "question": "Return the famous release date for the oldest artist.", "question_toks": ["Return", "the", "famous", "release", "date", "for", "the", "oldest", "artist", "."], "guid": 1698}}
{"text": "Songs: SongId, Title; Albums: AId, Title, Year, Label, Type; Band: Id, Firstname, Lastname; Instruments: SongId, BandmateId, Instrument; Performance: SongId, Bandmate, StagePosition; Tracklists: AlbumId, Position, SongId; Vocals: SongId, Bandmate, Type | Find all the songs that do not have a back vocal.", "sql": "SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid WHERE TYPE  =  \"back\"", "example": {"db_id": "music_2", "query": "SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid WHERE TYPE  =  \"back\"", "query_toks": ["SELECT", "DISTINCT", "title", "FROM", "vocals", "AS", "t1", "JOIN", "songs", "AS", "t2", "ON", "t1.songid", "=", "t2.songid", "EXCEPT", "SELECT", "t2.title", "FROM", "vocals", "AS", "t1", "JOIN", "songs", "AS", "t2", "ON", "t1.songid", "=", "t2.songid", "WHERE", "TYPE", "=", "``", "back", "''"], "query_toks_no_value": ["select", "distinct", "title", "from", "vocals", "as", "t1", "join", "songs", "as", "t2", "on", "t1", ".", "songid", "=", "t2", ".", "songid", "except", "select", "t2", ".", "title", "from", "vocals", "as", "t1", "join", "songs", "as", "t2", "on", "t1", ".", "songid", "=", "t2", ".", "songid", "where", "type", "=", "value"], "question": "Find all the songs that do not have a back vocal.", "question_toks": ["Find", "all", "the", "songs", "that", "do", "not", "have", "a", "back", "vocal", "."], "guid": 1699}}
{"text": "genre: g_name, rating, most_popular_in; artist: artist_name, country, gender, preferred_genre; files: f_id, artist_name, file_size, duration, formats; song: song_name, artist_name, country, f_id, genre_is, rating, languages, releasedate, resolution | What are the ids of all songs that have higher resolution of the average resolution in the modern genre?", "sql": "SELECT f_id FROM song WHERE resolution  >  (SELECT avg(resolution) FROM song WHERE genre_is  =  \"modern\")", "example": {"db_id": "music_1", "query": "SELECT f_id FROM song WHERE resolution  >  (SELECT avg(resolution) FROM song WHERE genre_is  =  \"modern\")", "query_toks": ["SELECT", "f_id", "FROM", "song", "WHERE", "resolution", ">", "(", "SELECT", "avg", "(", "resolution", ")", "FROM", "song", "WHERE", "genre_is", "=", "``", "modern", "''", ")"], "query_toks_no_value": ["select", "f_id", "from", "song", "where", "resolution", ">", "(", "select", "avg", "(", "resolution", ")", "from", "song", "where", "genre_is", "=", "value", ")"], "question": "What are the ids of all songs that have higher resolution of the average resolution in the modern genre?", "question_toks": ["What", "are", "the", "ids", "of", "all", "songs", "that", "have", "higher", "resolution", "of", "the", "average", "resolution", "in", "the", "modern", "genre", "?"], "guid": 1700}}
{"text": "Songs: SongId, Title; Albums: AId, Title, Year, Label, Type; Band: Id, Firstname, Lastname; Instruments: SongId, BandmateId, Instrument; Performance: SongId, Bandmate, StagePosition; Tracklists: AlbumId, Position, SongId; Vocals: SongId, Bandmate, Type | What types of vocals are used in the song \"Badlands\"?", "sql": "SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Badlands\"", "example": {"db_id": "music_2", "query": "SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Badlands\"", "query_toks": ["SELECT", "TYPE", "FROM", "vocals", "AS", "T1", "JOIN", "songs", "AS", "T2", "ON", "T1.songid", "=", "T2.songid", "WHERE", "title", "=", "``", "Badlands", "''"], "query_toks_no_value": ["select", "type", "from", "vocals", "as", "t1", "join", "songs", "as", "t2", "on", "t1", ".", "songid", "=", "t2", ".", "songid", "where", "title", "=", "value"], "question": "What types of vocals are used in the song \"Badlands\"?", "question_toks": ["What", "types", "of", "vocals", "are", "used", "in", "the", "song", "``", "Badlands", "''", "?"], "guid": 1701}}
{"text": "Songs: SongId, Title; Albums: AId, Title, Year, Label, Type; Band: Id, Firstname, Lastname; Instruments: SongId, BandmateId, Instrument; Performance: SongId, Bandmate, StagePosition; Tracklists: AlbumId, Position, SongId; Vocals: SongId, Bandmate, Type | What are all the instruments used by the musician with the last name \"Heilo\"?", "sql": "SELECT instrument FROM instruments AS T1 JOIN Band AS T2 ON T1.bandmateid  =  T2.id WHERE T2.lastname  =  \"Heilo\"", "example": {"db_id": "music_2", "query": "SELECT instrument FROM instruments AS T1 JOIN Band AS T2 ON T1.bandmateid  =  T2.id WHERE T2.lastname  =  \"Heilo\"", "query_toks": ["SELECT", "instrument", "FROM", "instruments", "AS", "T1", "JOIN", "Band", "AS", "T2", "ON", "T1.bandmateid", "=", "T2.id", "WHERE", "T2.lastname", "=", "``", "Heilo", "''"], "query_toks_no_value": ["select", "instrument", "from", "instruments", "as", "t1", "join", "band", "as", "t2", "on", "t1", ".", "bandmateid", "=", "t2", ".", "id", "where", "t2", ".", "lastname", "=", "value"], "question": "What are all the instruments used by the musician with the last name \"Heilo\"?", "question_toks": ["What", "are", "all", "the", "instruments", "used", "by", "the", "musician", "with", "the", "last", "name", "``", "Heilo", "''", "?"], "guid": 1702}}
{"text": "genre: g_name, rating, most_popular_in; artist: artist_name, country, gender, preferred_genre; files: f_id, artist_name, file_size, duration, formats; song: song_name, artist_name, country, f_id, genre_is, rating, languages, releasedate, resolution | What is the maximum and minimum resolution of all songs that are approximately 3 minutes long?", "sql": "SELECT max(T2.resolution) ,  min(T2.resolution) FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.duration LIKE \"3:%\"", "example": {"db_id": "music_1", "query": "SELECT max(T2.resolution) ,  min(T2.resolution) FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.duration LIKE \"3:%\"", "query_toks": ["SELECT", "max", "(", "T2.resolution", ")", ",", "min", "(", "T2.resolution", ")", "FROM", "files", "AS", "T1", "JOIN", "song", "AS", "T2", "ON", "T1.f_id", "=", "T2.f_id", "WHERE", "T1.duration", "LIKE", "``", "3", ":", "%", "''"], "query_toks_no_value": ["select", "max", "(", "t2", ".", "resolution", ")", ",", "min", "(", "t2", ".", "resolution", ")", "from", "files", "as", "t1", "join", "song", "as", "t2", "on", "t1", ".", "f_id", "=", "t2", ".", "f_id", "where", "t1", ".", "duration", "like", "value"], "question": "What is the maximum and minimum resolution of all songs that are approximately 3 minutes long?", "question_toks": ["What", "is", "the", "maximum", "and", "minimum", "resolution", "of", "all", "songs", "that", "are", "approximately", "3", "minutes", "long", "?"], "guid": 1703}}
{"text": "Songs: SongId, Title; Albums: AId, Title, Year, Label, Type; Band: Id, Firstname, Lastname; Instruments: SongId, BandmateId, Instrument; Performance: SongId, Bandmate, StagePosition; Tracklists: AlbumId, Position, SongId; Vocals: SongId, Bandmate, Type | What are the unique labels for the albums?", "sql": "SELECT count(DISTINCT label) FROM albums", "example": {"db_id": "music_2", "query": "SELECT count(DISTINCT label) FROM albums", "query_toks": ["SELECT", "count", "(", "DISTINCT", "label", ")", "FROM", "albums"], "query_toks_no_value": ["select", "count", "(", "distinct", "label", ")", "from", "albums"], "question": "What are the unique labels for the albums?", "question_toks": ["What", "are", "the", "unique", "labels", "for", "the", "albums", "?"], "guid": 1704}}
{"text": "Songs: SongId, Title; Albums: AId, Title, Year, Label, Type; Band: Id, Firstname, Lastname; Instruments: SongId, BandmateId, Instrument; Performance: SongId, Bandmate, StagePosition; Tracklists: AlbumId, Position, SongId; Vocals: SongId, Bandmate, Type | What are the names of all the songs whose album is under the label of \"Universal Music Group\"?", "sql": "SELECT T3.title FROM albums AS T1 JOIN tracklists AS T2 ON T1.aid  =  T2.albumid JOIN songs AS T3 ON T2.songid  =  T3.songid WHERE t1.label  =  \"Universal Music Group\"", "example": {"db_id": "music_2", "query": "SELECT T3.title FROM albums AS T1 JOIN tracklists AS T2 ON T1.aid  =  T2.albumid JOIN songs AS T3 ON T2.songid  =  T3.songid WHERE t1.label  =  \"Universal Music Group\"", "query_toks": ["SELECT", "T3.title", "FROM", "albums", "AS", "T1", "JOIN", "tracklists", "AS", "T2", "ON", "T1.aid", "=", "T2.albumid", "JOIN", "songs", "AS", "T3", "ON", "T2.songid", "=", "T3.songid", "WHERE", "t1.label", "=", "``", "Universal", "Music", "Group", "''"], "query_toks_no_value": ["select", "t3", ".", "title", "from", "albums", "as", "t1", "join", "tracklists", "as", "t2", "on", "t1", ".", "aid", "=", "t2", ".", "albumid", "join", "songs", "as", "t3", "on", "t2", ".", "songid", "=", "t3", ".", "songid", "where", "t1", ".", "label", "=", "value"], "question": "What are the names of all the songs whose album is under the label of \"Universal Music Group\"?", "question_toks": ["What", "are", "the", "names", "of", "all", "the", "songs", "whose", "album", "is", "under", "the", "label", "of", "``", "Universal", "Music", "Group", "''", "?"], "guid": 1705}}
{"text": "Songs: SongId, Title; Albums: AId, Title, Year, Label, Type; Band: Id, Firstname, Lastname; Instruments: SongId, BandmateId, Instrument; Performance: SongId, Bandmate, StagePosition; Tracklists: AlbumId, Position, SongId; Vocals: SongId, Bandmate, Type | How many songs use drums as an instrument?", "sql": "SELECT count(*) FROM instruments WHERE instrument  =  \"drums\"", "example": {"db_id": "music_2", "query": "SELECT count(*) FROM instruments WHERE instrument  =  \"drums\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "instruments", "WHERE", "instrument", "=", "``", "drums", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "instruments", "where", "instrument", "=", "value"], "question": "How many songs use drums as an instrument?", "question_toks": ["How", "many", "songs", "use", "drums", "as", "an", "instrument", "?"], "guid": 1706}}
{"text": "Songs: SongId, Title; Albums: AId, Title, Year, Label, Type; Band: Id, Firstname, Lastname; Instruments: SongId, BandmateId, Instrument; Performance: SongId, Bandmate, StagePosition; Tracklists: AlbumId, Position, SongId; Vocals: SongId, Bandmate, Type | What are the instruments are used in the song \"Le Pop\"?", "sql": "SELECT instrument FROM instruments AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Le Pop\"", "example": {"db_id": "music_2", "query": "SELECT instrument FROM instruments AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Le Pop\"", "query_toks": ["SELECT", "instrument", "FROM", "instruments", "AS", "T1", "JOIN", "songs", "AS", "T2", "ON", "T1.songid", "=", "T2.songid", "WHERE", "title", "=", "``", "Le", "Pop", "''"], "query_toks_no_value": ["select", "instrument", "from", "instruments", "as", "t1", "join", "songs", "as", "t2", "on", "t1", ".", "songid", "=", "t2", ".", "songid", "where", "title", "=", "value"], "question": "What are the instruments are used in the song \"Le Pop\"?", "question_toks": ["What", "are", "the", "instruments", "are", "used", "in", "the", "song", "``", "Le", "Pop", "''", "?"], "guid": 1707}}
{"text": "singer: Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship; song: Song_ID, Title, Singer_ID, Sales, Highest_Position | What is the count of singers?", "sql": "SELECT count(*) FROM singer", "example": {"db_id": "singer", "query": "SELECT count(*) FROM singer", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "singer"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "singer"], "question": "What is the count of singers?", "question_toks": ["What", "is", "the", "count", "of", "singers", "?"], "guid": 1708}}
{"text": "stadium: Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average; singer: Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male; concert: concert_ID, concert_Name, Theme, Stadium_ID, Year; singer_in_concert: concert_ID, Singer_ID | what is the name and nation of the singer who have a song having 'Hey' in its name?", "sql": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'", "example": {"db_id": "concert_singer", "query": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'", "query_toks": ["SELECT", "name", ",", "country", "FROM", "singer", "WHERE", "song_name", "LIKE", "'", "%", "Hey", "%", "'"], "query_toks_no_value": ["select", "name", ",", "country", "from", "singer", "where", "song_name", "like", "value"], "question": "what is the name and nation of the singer who have a song having 'Hey' in its name?", "question_toks": ["what", "is", "the", "name", "and", "nation", "of", "the", "singer", "who", "have", "a", "song", "having", "'Hey", "'", "in", "its", "name", "?"], "guid": 1709}}
{"text": "stadium: Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average; singer: Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male; concert: concert_ID, concert_Name, Theme, Stadium_ID, Year; singer_in_concert: concert_ID, Singer_ID | Show name, country, age for all singers ordered by age from the oldest to the youngest.", "sql": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC", "example": {"db_id": "concert_singer", "query": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC", "query_toks": ["SELECT", "name", ",", "country", ",", "age", "FROM", "singer", "ORDER", "BY", "age", "DESC"], "query_toks_no_value": ["select", "name", ",", "country", ",", "age", "from", "singer", "order", "by", "age", "desc"], "question": "Show name, country, age for all singers ordered by age from the oldest to the youngest.", "question_toks": ["Show", "name", ",", "country", ",", "age", "for", "all", "singers", "ordered", "by", "age", "from", "the", "oldest", "to", "the", "youngest", "."], "guid": 1710}}
{"text": "Songs: SongId, Title; Albums: AId, Title, Year, Label, Type; Band: Id, Firstname, Lastname; Instruments: SongId, BandmateId, Instrument; Performance: SongId, Bandmate, StagePosition; Tracklists: AlbumId, Position, SongId; Vocals: SongId, Bandmate, Type | Find the number of vocal types used in song \"Le Pop\"", "sql": "SELECT count(*) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Le Pop\"", "example": {"db_id": "music_2", "query": "SELECT count(*) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Le Pop\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "vocals", "AS", "T1", "JOIN", "songs", "AS", "T2", "ON", "T1.songid", "=", "T2.songid", "WHERE", "title", "=", "``", "Le", "Pop", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "vocals", "as", "t1", "join", "songs", "as", "t2", "on", "t1", ".", "songid", "=", "t2", ".", "songid", "where", "title", "=", "value"], "question": "Find the number of vocal types used in song \"Le Pop\"", "question_toks": ["Find", "the", "number", "of", "vocal", "types", "used", "in", "song", "``", "Le", "Pop", "''"], "guid": 1711}}
{"text": "genre: g_name, rating, most_popular_in; artist: artist_name, country, gender, preferred_genre; files: f_id, artist_name, file_size, duration, formats; song: song_name, artist_name, country, f_id, genre_is, rating, languages, releasedate, resolution | List the duration, file size and format of songs whose genre is pop, ordered by title?", "sql": "SELECT T1.duration ,  T1.file_size ,  T1.formats FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T2.genre_is  =  \"pop\" ORDER BY T2.song_name", "example": {"db_id": "music_1", "query": "SELECT T1.duration ,  T1.file_size ,  T1.formats FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T2.genre_is  =  \"pop\" ORDER BY T2.song_name", "query_toks": ["SELECT", "T1.duration", ",", "T1.file_size", ",", "T1.formats", "FROM", "files", "AS", "T1", "JOIN", "song", "AS", "T2", "ON", "T1.f_id", "=", "T2.f_id", "WHERE", "T2.genre_is", "=", "``", "pop", "''", "ORDER", "BY", "T2.song_name"], "query_toks_no_value": ["select", "t1", ".", "duration", ",", "t1", ".", "file_size", ",", "t1", ".", "formats", "from", "files", "as", "t1", "join", "song", "as", "t2", "on", "t1", ".", "f_id", "=", "t2", ".", "f_id", "where", "t2", ".", "genre_is", "=", "value", "order", "by", "t2", ".", "song_name"], "question": "List the duration, file size and format of songs whose genre is pop, ordered by title?", "question_toks": ["List", "the", "duration", ",", "file", "size", "and", "format", "of", "songs", "whose", "genre", "is", "pop", ",", "ordered", "by", "title", "?"], "guid": 1712}}
{"text": "Songs: SongId, Title; Albums: AId, Title, Year, Label, Type; Band: Id, Firstname, Lastname; Instruments: SongId, BandmateId, Instrument; Performance: SongId, Bandmate, StagePosition; Tracklists: AlbumId, Position, SongId; Vocals: SongId, Bandmate, Type | What is the last name of the musician who was in the most songs?", "sql": "SELECT T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId GROUP BY lastname ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "music_2", "query": "SELECT T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId GROUP BY lastname ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T2.lastname", "FROM", "Performance", "AS", "T1", "JOIN", "Band", "AS", "T2", "ON", "T1.bandmate", "=", "T2.id", "JOIN", "Songs", "AS", "T3", "ON", "T3.SongId", "=", "T1.SongId", "GROUP", "BY", "lastname", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "lastname", "from", "performance", "as", "t1", "join", "band", "as", "t2", "on", "t1", ".", "bandmate", "=", "t2", ".", "id", "join", "songs", "as", "t3", "on", "t3", ".", "songid", "=", "t1", ".", "songid", "group", "by", "lastname", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the last name of the musician who was in the most songs?", "question_toks": ["What", "is", "the", "last", "name", "of", "the", "musician", "who", "was", "in", "the", "most", "songs", "?"], "guid": 1713}}
{"text": "Songs: SongId, Title; Albums: AId, Title, Year, Label, Type; Band: Id, Firstname, Lastname; Instruments: SongId, BandmateId, Instrument; Performance: SongId, Bandmate, StagePosition; Tracklists: AlbumId, Position, SongId; Vocals: SongId, Bandmate, Type | What are the types of vocals that the musician with the first name \"Solveig\" played in the song \"A Bar in Amsterdam\"?", "sql": "SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid JOIN band AS T3 ON T1.bandmate  =  T3.id WHERE T3.firstname  =  \"Solveig\" AND T2.title  =  \"A Bar In Amsterdam\"", "example": {"db_id": "music_2", "query": "SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid JOIN band AS T3 ON T1.bandmate  =  T3.id WHERE T3.firstname  =  \"Solveig\" AND T2.title  =  \"A Bar In Amsterdam\"", "query_toks": ["SELECT", "TYPE", "FROM", "vocals", "AS", "T1", "JOIN", "songs", "AS", "T2", "ON", "T1.songid", "=", "T2.songid", "JOIN", "band", "AS", "T3", "ON", "T1.bandmate", "=", "T3.id", "WHERE", "T3.firstname", "=", "``", "Solveig", "''", "AND", "T2.title", "=", "``", "A", "Bar", "In", "Amsterdam", "''"], "query_toks_no_value": ["select", "type", "from", "vocals", "as", "t1", "join", "songs", "as", "t2", "on", "t1", ".", "songid", "=", "t2", ".", "songid", "join", "band", "as", "t3", "on", "t1", ".", "bandmate", "=", "t3", ".", "id", "where", "t3", ".", "firstname", "=", "value", "and", "t2", ".", "title", "=", "value"], "question": "What are the types of vocals that the musician with the first name \"Solveig\" played in the song \"A Bar in Amsterdam\"?", "question_toks": ["What", "are", "the", "types", "of", "vocals", "that", "the", "musician", "with", "the", "first", "name", "``", "Solveig", "''", "played", "in", "the", "song", "``", "A", "Bar", "in", "Amsterdam", "''", "?"], "guid": 1714}}
{"text": "Songs: SongId, Title; Albums: AId, Title, Year, Label, Type; Band: Id, Firstname, Lastname; Instruments: SongId, BandmateId, Instrument; Performance: SongId, Bandmate, StagePosition; Tracklists: AlbumId, Position, SongId; Vocals: SongId, Bandmate, Type | How many songs have a lead vocal?", "sql": "SELECT count(DISTINCT title) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE TYPE  =  \"lead\"", "example": {"db_id": "music_2", "query": "SELECT count(DISTINCT title) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE TYPE  =  \"lead\"", "query_toks": ["SELECT", "count", "(", "DISTINCT", "title", ")", "FROM", "vocals", "AS", "T1", "JOIN", "songs", "AS", "T2", "ON", "T1.songid", "=", "T2.songid", "WHERE", "TYPE", "=", "``", "lead", "''"], "query_toks_no_value": ["select", "count", "(", "distinct", "title", ")", "from", "vocals", "as", "t1", "join", "songs", "as", "t2", "on", "t1", ".", "songid", "=", "t2", ".", "songid", "where", "type", "=", "value"], "question": "How many songs have a lead vocal?", "question_toks": ["How", "many", "songs", "have", "a", "lead", "vocal", "?"], "guid": 1715}}
{"text": "stadium: Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average; singer: Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male; concert: concert_ID, concert_Name, Theme, Stadium_ID, Year; singer_in_concert: concert_ID, Singer_ID | What is the year that had the most concerts?", "sql": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "concert_singer", "query": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "YEAR", "FROM", "concert", "GROUP", "BY", "YEAR", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "year", "from", "concert", "group", "by", "year", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the year that had the most concerts?", "question_toks": ["What", "is", "the", "year", "that", "had", "the", "most", "concerts", "?"], "guid": 1716}}
{"text": "stadium: Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average; singer: Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male; concert: concert_ID, concert_Name, Theme, Stadium_ID, Year; singer_in_concert: concert_ID, Singer_ID | What are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015?", "sql": "SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015", "example": {"db_id": "concert_singer", "query": "SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015", "query_toks": ["SELECT", "T2.name", ",", "T2.location", "FROM", "concert", "AS", "T1", "JOIN", "stadium", "AS", "T2", "ON", "T1.stadium_id", "=", "T2.stadium_id", "WHERE", "T1.Year", "=", "2014", "INTERSECT", "SELECT", "T2.name", ",", "T2.location", "FROM", "concert", "AS", "T1", "JOIN", "stadium", "AS", "T2", "ON", "T1.stadium_id", "=", "T2.stadium_id", "WHERE", "T1.Year", "=", "2015"], "query_toks_no_value": ["select", "t2", ".", "name", ",", "t2", ".", "location", "from", "concert", "as", "t1", "join", "stadium", "as", "t2", "on", "t1", ".", "stadium_id", "=", "t2", ".", "stadium_id", "where", "t1", ".", "year", "=", "value", "intersect", "select", "t2", ".", "name", ",", "t2", ".", "location", "from", "concert", "as", "t1", "join", "stadium", "as", "t2", "on", "t1", ".", "stadium_id", "=", "t2", ".", "stadium_id", "where", "t1", ".", "year", "=", "value"], "question": "What are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015?", "question_toks": ["What", "are", "the", "names", "and", "locations", "of", "the", "stadiums", "that", "had", "concerts", "that", "occurred", "in", "both", "2014", "and", "2015", "?"], "guid": 1717}}
{"text": "singer: Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship; song: Song_ID, Title, Singer_ID, Sales, Highest_Position | How many singers are there?", "sql": "SELECT count(*) FROM singer", "example": {"db_id": "singer", "query": "SELECT count(*) FROM singer", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "singer"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "singer"], "question": "How many singers are there?", "question_toks": ["How", "many", "singers", "are", "there", "?"], "guid": 1718}}
{"text": "genre: g_name, rating, most_popular_in; artist: artist_name, country, gender, preferred_genre; files: f_id, artist_name, file_size, duration, formats; song: song_name, artist_name, country, f_id, genre_is, rating, languages, releasedate, resolution | Find the names of the artists who are from UK and have produced English songs.", "sql": "SELECT artist_name FROM artist WHERE country  =  \"UK\" INTERSECT SELECT artist_name FROM song WHERE languages  =  \"english\"", "example": {"db_id": "music_1", "query": "SELECT artist_name FROM artist WHERE country  =  \"UK\" INTERSECT SELECT artist_name FROM song WHERE languages  =  \"english\"", "query_toks": ["SELECT", "artist_name", "FROM", "artist", "WHERE", "country", "=", "``", "UK", "''", "INTERSECT", "SELECT", "artist_name", "FROM", "song", "WHERE", "languages", "=", "``", "english", "''"], "query_toks_no_value": ["select", "artist_name", "from", "artist", "where", "country", "=", "value", "intersect", "select", "artist_name", "from", "song", "where", "languages", "=", "value"], "question": "Find the names of the artists who are from UK and have produced English songs.", "question_toks": ["Find", "the", "names", "of", "the", "artists", "who", "are", "from", "UK", "and", "have", "produced", "English", "songs", "."], "guid": 1719}}
{"text": "genre: g_name, rating, most_popular_in; artist: artist_name, country, gender, preferred_genre; files: f_id, artist_name, file_size, duration, formats; song: song_name, artist_name, country, f_id, genre_is, rating, languages, releasedate, resolution | Find the id of songs that are available in mp4 format and have resolution lower than 1000.", "sql": "SELECT f_id FROM files WHERE formats  =  \"mp4\" INTERSECT SELECT f_id FROM song WHERE resolution  <  1000", "example": {"db_id": "music_1", "query": "SELECT f_id FROM files WHERE formats  =  \"mp4\" INTERSECT SELECT f_id FROM song WHERE resolution  <  1000", "query_toks": ["SELECT", "f_id", "FROM", "files", "WHERE", "formats", "=", "``", "mp4", "''", "INTERSECT", "SELECT", "f_id", "FROM", "song", "WHERE", "resolution", "<", "1000"], "query_toks_no_value": ["select", "f_id", "from", "files", "where", "formats", "=", "value", "intersect", "select", "f_id", "from", "song", "where", "resolution", "<", "value"], "question": "Find the id of songs that are available in mp4 format and have resolution lower than 1000.", "question_toks": ["Find", "the", "id", "of", "songs", "that", "are", "available", "in", "mp4", "format", "and", "have", "resolution", "lower", "than", "1000", "."], "guid": 1720}}
{"text": "conductor: Conductor_ID, Name, Age, Nationality, Year_of_Work; orchestra: Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format; performance: Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share; show: Show_ID, Performance_ID, If_first_show, Result, Attendance | What is the name of the conductor who has conducted the most orchestras?", "sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1", "example": {"db_id": "orchestra", "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.Name", "FROM", "conductor", "AS", "T1", "JOIN", "orchestra", "AS", "T2", "ON", "T1.Conductor_ID", "=", "T2.Conductor_ID", "GROUP", "BY", "T2.Conductor_ID", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "conductor", "as", "t1", "join", "orchestra", "as", "t2", "on", "t1", ".", "conductor_id", "=", "t2", ".", "conductor_id", "group", "by", "t2", ".", "conductor_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the name of the conductor who has conducted the most orchestras?", "question_toks": ["What", "is", "the", "name", "of", "the", "conductor", "who", "has", "conducted", "the", "most", "orchestras", "?"], "guid": 1721}}
{"text": "Songs: SongId, Title; Albums: AId, Title, Year, Label, Type; Band: Id, Firstname, Lastname; Instruments: SongId, BandmateId, Instrument; Performance: SongId, Bandmate, StagePosition; Tracklists: AlbumId, Position, SongId; Vocals: SongId, Bandmate, Type | How many songs have a shared vocal?", "sql": "SELECT count(DISTINCT title) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE TYPE  =  \"shared\"", "example": {"db_id": "music_2", "query": "SELECT count(DISTINCT title) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE TYPE  =  \"shared\"", "query_toks": ["SELECT", "count", "(", "DISTINCT", "title", ")", "FROM", "vocals", "AS", "T1", "JOIN", "songs", "AS", "T2", "ON", "T1.songid", "=", "T2.songid", "WHERE", "TYPE", "=", "``", "shared", "''"], "query_toks_no_value": ["select", "count", "(", "distinct", "title", ")", "from", "vocals", "as", "t1", "join", "songs", "as", "t2", "on", "t1", ".", "songid", "=", "t2", ".", "songid", "where", "type", "=", "value"], "question": "How many songs have a shared vocal?", "question_toks": ["How", "many", "songs", "have", "a", "shared", "vocal", "?"], "guid": 1722}}
{"text": "artist: Artist_ID, Artist, Age, Famous_Title, Famous_Release_date; volume: Volume_ID, Volume_Issue, Issue_Date, Weeks_on_Top, Song, Artist_ID; music_festival: ID, Music_Festival, Date_of_ceremony, Category, Volume, Result | What are the famous title of the artists associated with volumes with more than 2 weeks on top?", "sql": "SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T2.Weeks_on_Top  >  2", "example": {"db_id": "music_4", "query": "SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T2.Weeks_on_Top  >  2", "query_toks": ["SELECT", "T1.Famous_Title", "FROM", "artist", "AS", "T1", "JOIN", "volume", "AS", "T2", "ON", "T1.Artist_ID", "=", "T2.Artist_ID", "WHERE", "T2.Weeks_on_Top", ">", "2"], "query_toks_no_value": ["select", "t1", ".", "famous_title", "from", "artist", "as", "t1", "join", "volume", "as", "t2", "on", "t1", ".", "artist_id", "=", "t2", ".", "artist_id", "where", "t2", ".", "weeks_on_top", ">", "value"], "question": "What are the famous title of the artists associated with volumes with more than 2 weeks on top?", "question_toks": ["What", "are", "the", "famous", "title", "of", "the", "artists", "associated", "with", "volumes", "with", "more", "than", "2", "weeks", "on", "top", "?"], "guid": 1723}}
{"text": "stadium: Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average; singer: Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male; concert: concert_ID, concert_Name, Theme, Stadium_ID, Year; singer_in_concert: concert_ID, Singer_ID | Show all countries and the number of singers in each country.", "sql": "SELECT country ,  count(*) FROM singer GROUP BY country", "example": {"db_id": "concert_singer", "query": "SELECT country ,  count(*) FROM singer GROUP BY country", "query_toks": ["SELECT", "country", ",", "count", "(", "*", ")", "FROM", "singer", "GROUP", "BY", "country"], "query_toks_no_value": ["select", "country", ",", "count", "(", "*", ")", "from", "singer", "group", "by", "country"], "question": "Show all countries and the number of singers in each country.", "question_toks": ["Show", "all", "countries", "and", "the", "number", "of", "singers", "in", "each", "country", "."], "guid": 1724}}
{"text": "Songs: SongId, Title; Albums: AId, Title, Year, Label, Type; Band: Id, Firstname, Lastname; Instruments: SongId, BandmateId, Instrument; Performance: SongId, Bandmate, StagePosition; Tracklists: AlbumId, Position, SongId; Vocals: SongId, Bandmate, Type | What are the types of vocals used in the song \"Demon Kitty Rag\"?", "sql": "SELECT count(*) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Demon Kitty Rag\"", "example": {"db_id": "music_2", "query": "SELECT count(*) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Demon Kitty Rag\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "vocals", "AS", "T1", "JOIN", "songs", "AS", "T2", "ON", "T1.songid", "=", "T2.songid", "WHERE", "title", "=", "``", "Demon", "Kitty", "Rag", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "vocals", "as", "t1", "join", "songs", "as", "t2", "on", "t1", ".", "songid", "=", "t2", ".", "songid", "where", "title", "=", "value"], "question": "What are the types of vocals used in the song \"Demon Kitty Rag\"?", "question_toks": ["What", "are", "the", "types", "of", "vocals", "used", "in", "the", "song", "``", "Demon", "Kitty", "Rag", "''", "?"], "guid": 1725}}
{"text": "stadium: Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average; singer: Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male; concert: concert_ID, concert_Name, Theme, Stadium_ID, Year; singer_in_concert: concert_ID, Singer_ID | Show the stadium names without any concert.", "sql": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)", "example": {"db_id": "concert_singer", "query": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)", "query_toks": ["SELECT", "name", "FROM", "stadium", "WHERE", "stadium_id", "NOT", "IN", "(", "SELECT", "stadium_id", "FROM", "concert", ")"], "query_toks_no_value": ["select", "name", "from", "stadium", "where", "stadium_id", "not", "in", "(", "select", "stadium_id", "from", "concert", ")"], "question": "Show the stadium names without any concert.", "question_toks": ["Show", "the", "stadium", "names", "without", "any", "concert", "."], "guid": 1726}}
{"text": "Songs: SongId, Title; Albums: AId, Title, Year, Label, Type; Band: Id, Firstname, Lastname; Instruments: SongId, BandmateId, Instrument; Performance: SongId, Bandmate, StagePosition; Tracklists: AlbumId, Position, SongId; Vocals: SongId, Bandmate, Type | What instruments did the musician with the last name \"Heilo\" play in \"Badlands\"?", "sql": "SELECT T4.instrument FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId JOIN Instruments AS T4 ON T4.songid  =  T3.songid AND T4.bandmateid  =  T2.id WHERE T2.lastname  =  \"Heilo\" AND T3.title  =  \"Badlands\"", "example": {"db_id": "music_2", "query": "SELECT T4.instrument FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId JOIN Instruments AS T4 ON T4.songid  =  T3.songid AND T4.bandmateid  =  T2.id WHERE T2.lastname  =  \"Heilo\" AND T3.title  =  \"Badlands\"", "query_toks": ["SELECT", "T4.instrument", "FROM", "Performance", "AS", "T1", "JOIN", "Band", "AS", "T2", "ON", "T1.bandmate", "=", "T2.id", "JOIN", "Songs", "AS", "T3", "ON", "T3.SongId", "=", "T1.SongId", "JOIN", "Instruments", "AS", "T4", "ON", "T4.songid", "=", "T3.songid", "AND", "T4.bandmateid", "=", "T2.id", "WHERE", "T2.lastname", "=", "``", "Heilo", "''", "AND", "T3.title", "=", "``", "Badlands", "''"], "query_toks_no_value": ["select", "t4", ".", "instrument", "from", "performance", "as", "t1", "join", "band", "as", "t2", "on", "t1", ".", "bandmate", "=", "t2", ".", "id", "join", "songs", "as", "t3", "on", "t3", ".", "songid", "=", "t1", ".", "songid", "join", "instruments", "as", "t4", "on", "t4", ".", "songid", "=", "t3", ".", "songid", "and", "t4", ".", "bandmateid", "=", "t2", ".", "id", "where", "t2", ".", "lastname", "=", "value", "and", "t3", ".", "title", "=", "value"], "question": "What instruments did the musician with the last name \"Heilo\" play in \"Badlands\"?", "question_toks": ["What", "instruments", "did", "the", "musician", "with", "the", "last", "name", "``", "Heilo", "''", "play", "in", "``", "Badlands", "''", "?"], "guid": 1727}}
{"text": "conductor: Conductor_ID, Name, Age, Nationality, Year_of_Work; orchestra: Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format; performance: Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share; show: Show_ID, Performance_ID, If_first_show, Result, Attendance | Show the names of conductors and the orchestras they have conducted.", "sql": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID", "example": {"db_id": "orchestra", "query": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID", "query_toks": ["SELECT", "T1.Name", ",", "T2.Orchestra", "FROM", "conductor", "AS", "T1", "JOIN", "orchestra", "AS", "T2", "ON", "T1.Conductor_ID", "=", "T2.Conductor_ID"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "t2", ".", "orchestra", "from", "conductor", "as", "t1", "join", "orchestra", "as", "t2", "on", "t1", ".", "conductor_id", "=", "t2", ".", "conductor_id"], "question": "Show the names of conductors and the orchestras they have conducted.", "question_toks": ["Show", "the", "names", "of", "conductors", "and", "the", "orchestras", "they", "have", "conducted", "."], "guid": 1728}}
{"text": "artist: Artist_ID, Artist, Age, Famous_Title, Famous_Release_date; volume: Volume_ID, Volume_Issue, Issue_Date, Weeks_on_Top, Song, Artist_ID; music_festival: ID, Music_Festival, Date_of_ceremony, Category, Volume, Result | Count the number of artists.", "sql": "SELECT count(*) FROM artist", "example": {"db_id": "music_4", "query": "SELECT count(*) FROM artist", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "artist"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "artist"], "question": "Count the number of artists.", "question_toks": ["Count", "the", "number", "of", "artists", "."], "guid": 1729}}
{"text": "Songs: SongId, Title; Albums: AId, Title, Year, Label, Type; Band: Id, Firstname, Lastname; Instruments: SongId, BandmateId, Instrument; Performance: SongId, Bandmate, StagePosition; Tracklists: AlbumId, Position, SongId; Vocals: SongId, Bandmate, Type | What instrument is used the most?", "sql": "SELECT instrument FROM instruments GROUP BY instrument ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "music_2", "query": "SELECT instrument FROM instruments GROUP BY instrument ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "instrument", "FROM", "instruments", "GROUP", "BY", "instrument", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "instrument", "from", "instruments", "group", "by", "instrument", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What instrument is used the most?", "question_toks": ["What", "instrument", "is", "used", "the", "most", "?"], "guid": 1730}}
{"text": "singer: Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship; song: Song_ID, Title, Singer_ID, Sales, Highest_Position | What is the name of the singer with the largest net worth?", "sql": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1", "example": {"db_id": "singer", "query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1", "query_toks": ["SELECT", "Name", "FROM", "singer", "ORDER", "BY", "Net_Worth_Millions", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "name", "from", "singer", "order", "by", "net_worth_millions", "desc", "limit", "value"], "question": "What is the name of the singer with the largest net worth?", "question_toks": ["What", "is", "the", "name", "of", "the", "singer", "with", "the", "largest", "net", "worth", "?"], "guid": 1731}}
{"text": "conductor: Conductor_ID, Name, Age, Nationality, Year_of_Work; orchestra: Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format; performance: Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share; show: Show_ID, Performance_ID, If_first_show, Result, Attendance | Return the names of conductors that do not have the nationality \"USA\".", "sql": "SELECT Name FROM conductor WHERE Nationality != 'USA'", "example": {"db_id": "orchestra", "query": "SELECT Name FROM conductor WHERE Nationality != 'USA'", "query_toks": ["SELECT", "Name", "FROM", "conductor", "WHERE", "Nationality", "!", "=", "'USA", "'"], "query_toks_no_value": ["select", "name", "from", "conductor", "where", "nationality", "!", "=", "value"], "question": "Return the names of conductors that do not have the nationality \"USA\".", "question_toks": ["Return", "the", "names", "of", "conductors", "that", "do", "not", "have", "the", "nationality", "``", "USA", "''", "."], "guid": 1732}}
{"text": "artist: Artist_ID, Artist, Age, Famous_Title, Famous_Release_date; volume: Volume_ID, Volume_Issue, Issue_Date, Weeks_on_Top, Song, Artist_ID; music_festival: ID, Music_Festival, Date_of_ceremony, Category, Volume, Result | Return the song in the volume that has spent the most weeks on top?", "sql": "SELECT Song FROM volume ORDER BY Weeks_on_Top DESC LIMIT 1", "example": {"db_id": "music_4", "query": "SELECT Song FROM volume ORDER BY Weeks_on_Top DESC LIMIT 1", "query_toks": ["SELECT", "Song", "FROM", "volume", "ORDER", "BY", "Weeks_on_Top", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "song", "from", "volume", "order", "by", "weeks_on_top", "desc", "limit", "value"], "question": "Return the song in the volume that has spent the most weeks on top?", "question_toks": ["Return", "the", "song", "in", "the", "volume", "that", "has", "spent", "the", "most", "weeks", "on", "top", "?"], "guid": 1733}}
{"text": "genre: g_name, rating, most_popular_in; artist: artist_name, country, gender, preferred_genre; files: f_id, artist_name, file_size, duration, formats; song: song_name, artist_name, country, f_id, genre_is, rating, languages, releasedate, resolution | What are the names of all songs in English?", "sql": "SELECT song_name FROM song WHERE languages  =  \"english\"", "example": {"db_id": "music_1", "query": "SELECT song_name FROM song WHERE languages  =  \"english\"", "query_toks": ["SELECT", "song_name", "FROM", "song", "WHERE", "languages", "=", "``", "english", "''"], "query_toks_no_value": ["select", "song_name", "from", "song", "where", "languages", "=", "value"], "question": "What are the names of all songs in English?", "question_toks": ["What", "are", "the", "names", "of", "all", "songs", "in", "English", "?"], "guid": 1734}}
{"text": "musical: Musical_ID, Name, Year, Award, Category, Nominee, Result; actor: Actor_ID, Name, Musical_ID, Character, Duration, age | What is the duration of the oldest actor?", "sql": "SELECT Duration FROM actor ORDER BY Age DESC LIMIT 1", "example": {"db_id": "musical", "query": "SELECT Duration FROM actor ORDER BY Age DESC LIMIT 1", "query_toks": ["SELECT", "Duration", "FROM", "actor", "ORDER", "BY", "Age", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "duration", "from", "actor", "order", "by", "age", "desc", "limit", "value"], "question": "What is the duration of the oldest actor?", "question_toks": ["What", "is", "the", "duration", "of", "the", "oldest", "actor", "?"], "guid": 1735}}
{"text": "musical: Musical_ID, Name, Year, Award, Category, Nominee, Result; actor: Actor_ID, Name, Musical_ID, Character, Duration, age | What are the names of musicals who have no actors?", "sql": "SELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)", "example": {"db_id": "musical", "query": "SELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)", "query_toks": ["SELECT", "Name", "FROM", "musical", "WHERE", "Musical_ID", "NOT", "IN", "(", "SELECT", "Musical_ID", "FROM", "actor", ")"], "query_toks_no_value": ["select", "name", "from", "musical", "where", "musical_id", "not", "in", "(", "select", "musical_id", "from", "actor", ")"], "question": "What are the names of musicals who have no actors?", "question_toks": ["What", "are", "the", "names", "of", "musicals", "who", "have", "no", "actors", "?"], "guid": 1736}}
{"text": "singer: Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship; song: Song_ID, Title, Singer_ID, Sales, Highest_Position | Show titles of songs and names of singers.", "sql": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID", "example": {"db_id": "singer", "query": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID", "query_toks": ["SELECT", "T2.Title", ",", "T1.Name", "FROM", "singer", "AS", "T1", "JOIN", "song", "AS", "T2", "ON", "T1.Singer_ID", "=", "T2.Singer_ID"], "query_toks_no_value": ["select", "t2", ".", "title", ",", "t1", ".", "name", "from", "singer", "as", "t1", "join", "song", "as", "t2", "on", "t1", ".", "singer_id", "=", "t2", ".", "singer_id"], "question": "Show titles of songs and names of singers.", "question_toks": ["Show", "titles", "of", "songs", "and", "names", "of", "singers", "."], "guid": 1737}}
{"text": "Songs: SongId, Title; Albums: AId, Title, Year, Label, Type; Band: Id, Firstname, Lastname; Instruments: SongId, BandmateId, Instrument; Performance: SongId, Bandmate, StagePosition; Tracklists: AlbumId, Position, SongId; Vocals: SongId, Bandmate, Type | What are the types of vocals that the musician with the last name \"Heilo\" played in \"Der Kapitan\"?", "sql": "SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid JOIN band AS T3 ON T1.bandmate  =  T3.id WHERE T3.lastname  =  \"Heilo\" AND T2.title  =  \"Der Kapitan\"", "example": {"db_id": "music_2", "query": "SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid JOIN band AS T3 ON T1.bandmate  =  T3.id WHERE T3.lastname  =  \"Heilo\" AND T2.title  =  \"Der Kapitan\"", "query_toks": ["SELECT", "TYPE", "FROM", "vocals", "AS", "T1", "JOIN", "songs", "AS", "T2", "ON", "T1.songid", "=", "T2.songid", "JOIN", "band", "AS", "T3", "ON", "T1.bandmate", "=", "T3.id", "WHERE", "T3.lastname", "=", "``", "Heilo", "''", "AND", "T2.title", "=", "``", "Der", "Kapitan", "''"], "query_toks_no_value": ["select", "type", "from", "vocals", "as", "t1", "join", "songs", "as", "t2", "on", "t1", ".", "songid", "=", "t2", ".", "songid", "join", "band", "as", "t3", "on", "t1", ".", "bandmate", "=", "t3", ".", "id", "where", "t3", ".", "lastname", "=", "value", "and", "t2", ".", "title", "=", "value"], "question": "What are the types of vocals that the musician with the last name \"Heilo\" played in \"Der Kapitan\"?", "question_toks": ["What", "are", "the", "types", "of", "vocals", "that", "the", "musician", "with", "the", "last", "name", "``", "Heilo", "''", "played", "in", "``", "Der", "Kapitan", "''", "?"], "guid": 1738}}
{"text": "musical: Musical_ID, Name, Year, Award, Category, Nominee, Result; actor: Actor_ID, Name, Musical_ID, Character, Duration, age | List the nominees that have been nominated more than two musicals.", "sql": "SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  2", "example": {"db_id": "musical", "query": "SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  2", "query_toks": ["SELECT", "Nominee", "FROM", "musical", "GROUP", "BY", "Nominee", "HAVING", "COUNT", "(", "*", ")", ">", "2"], "query_toks_no_value": ["select", "nominee", "from", "musical", "group", "by", "nominee", "having", "count", "(", "*", ")", ">", "value"], "question": "List the nominees that have been nominated more than two musicals.", "question_toks": ["List", "the", "nominees", "that", "have", "been", "nominated", "more", "than", "two", "musicals", "."], "guid": 1739}}
{"text": "artist: Artist_ID, Artist, Age, Famous_Title, Famous_Release_date; volume: Volume_ID, Volume_Issue, Issue_Date, Weeks_on_Top, Song, Artist_ID; music_festival: ID, Music_Festival, Date_of_ceremony, Category, Volume, Result | How many distinct artists do the volumes associate to?", "sql": "SELECT COUNT(DISTINCT Artist_ID) FROM volume", "example": {"db_id": "music_4", "query": "SELECT COUNT(DISTINCT Artist_ID) FROM volume", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "Artist_ID", ")", "FROM", "volume"], "query_toks_no_value": ["select", "count", "(", "distinct", "artist_id", ")", "from", "volume"], "question": "How many distinct artists do the volumes associate to?", "question_toks": ["How", "many", "distinct", "artists", "do", "the", "volumes", "associate", "to", "?"], "guid": 1740}}
{"text": "singer: Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship; song: Song_ID, Title, Singer_ID, Sales, Highest_Position | For each citizenship, how many singers are from that country?", "sql": "SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship", "example": {"db_id": "singer", "query": "SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship", "query_toks": ["SELECT", "Citizenship", ",", "COUNT", "(", "*", ")", "FROM", "singer", "GROUP", "BY", "Citizenship"], "query_toks_no_value": ["select", "citizenship", ",", "count", "(", "*", ")", "from", "singer", "group", "by", "citizenship"], "question": "For each citizenship, how many singers are from that country?", "question_toks": ["For", "each", "citizenship", ",", "how", "many", "singers", "are", "from", "that", "country", "?"], "guid": 1741}}
{"text": "genre: g_name, rating, most_popular_in; artist: artist_name, country, gender, preferred_genre; files: f_id, artist_name, file_size, duration, formats; song: song_name, artist_name, country, f_id, genre_is, rating, languages, releasedate, resolution | Find the id of the song that lasts the longest.", "sql": "SELECT f_id FROM files ORDER BY duration DESC LIMIT 1", "example": {"db_id": "music_1", "query": "SELECT f_id FROM files ORDER BY duration DESC LIMIT 1", "query_toks": ["SELECT", "f_id", "FROM", "files", "ORDER", "BY", "duration", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "f_id", "from", "files", "order", "by", "duration", "desc", "limit", "value"], "question": "Find the id of the song that lasts the longest.", "question_toks": ["Find", "the", "id", "of", "the", "song", "that", "lasts", "the", "longest", "."], "guid": 1742}}
{"text": "artist: Artist_ID, Artist, Age, Famous_Title, Famous_Release_date; volume: Volume_ID, Volume_Issue, Issue_Date, Weeks_on_Top, Song, Artist_ID; music_festival: ID, Music_Festival, Date_of_ceremony, Category, Volume, Result | Return the result that is most frequent at music festivals.", "sql": "SELECT RESULT FROM music_festival GROUP BY RESULT ORDER BY COUNT(*) DESC LIMIT 1", "example": {"db_id": "music_4", "query": "SELECT RESULT FROM music_festival GROUP BY RESULT ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "RESULT", "FROM", "music_festival", "GROUP", "BY", "RESULT", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "result", "from", "music_festival", "group", "by", "result", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Return the result that is most frequent at music festivals.", "question_toks": ["Return", "the", "result", "that", "is", "most", "frequent", "at", "music", "festivals", "."], "guid": 1743}}
{"text": "genre: g_name, rating, most_popular_in; artist: artist_name, country, gender, preferred_genre; files: f_id, artist_name, file_size, duration, formats; song: song_name, artist_name, country, f_id, genre_is, rating, languages, releasedate, resolution | What is the count of the songs that last approximately 4 minutes?", "sql": "SELECT count(*) FROM files WHERE duration LIKE \"4:%\"", "example": {"db_id": "music_1", "query": "SELECT count(*) FROM files WHERE duration LIKE \"4:%\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "files", "WHERE", "duration", "LIKE", "``", "4", ":", "%", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "files", "where", "duration", "like", "value"], "question": "What is the count of the songs that last approximately 4 minutes?", "question_toks": ["What", "is", "the", "count", "of", "the", "songs", "that", "last", "approximately", "4", "minutes", "?"], "guid": 1744}}
{"text": "Songs: SongId, Title; Albums: AId, Title, Year, Label, Type; Band: Id, Firstname, Lastname; Instruments: SongId, BandmateId, Instrument; Performance: SongId, Bandmate, StagePosition; Tracklists: AlbumId, Position, SongId; Vocals: SongId, Bandmate, Type | Which vocal type has the band mate with first name \"Solveig\" played the most?", "sql": "SELECT TYPE FROM vocals AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id WHERE firstname  =  \"Solveig\" GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "music_2", "query": "SELECT TYPE FROM vocals AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id WHERE firstname  =  \"Solveig\" GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "TYPE", "FROM", "vocals", "AS", "T1", "JOIN", "band", "AS", "T2", "ON", "T1.bandmate", "=", "T2.id", "WHERE", "firstname", "=", "``", "Solveig", "''", "GROUP", "BY", "TYPE", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "type", "from", "vocals", "as", "t1", "join", "band", "as", "t2", "on", "t1", ".", "bandmate", "=", "t2", ".", "id", "where", "firstname", "=", "value", "group", "by", "type", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which vocal type has the band mate with first name \"Solveig\" played the most?", "question_toks": ["Which", "vocal", "type", "has", "the", "band", "mate", "with", "first", "name", "``", "Solveig", "''", "played", "the", "most", "?"], "guid": 1745}}
{"text": "conductor: Conductor_ID, Name, Age, Nationality, Year_of_Work; orchestra: Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format; performance: Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share; show: Show_ID, Performance_ID, If_first_show, Result, Attendance | Show the names of conductors that have conducted more than one orchestras.", "sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1", "example": {"db_id": "orchestra", "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1", "query_toks": ["SELECT", "T1.Name", "FROM", "conductor", "AS", "T1", "JOIN", "orchestra", "AS", "T2", "ON", "T1.Conductor_ID", "=", "T2.Conductor_ID", "GROUP", "BY", "T2.Conductor_ID", "HAVING", "COUNT", "(", "*", ")", ">", "1"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "conductor", "as", "t1", "join", "orchestra", "as", "t2", "on", "t1", ".", "conductor_id", "=", "t2", ".", "conductor_id", "group", "by", "t2", ".", "conductor_id", "having", "count", "(", "*", ")", ">", "value"], "question": "Show the names of conductors that have conducted more than one orchestras.", "question_toks": ["Show", "the", "names", "of", "conductors", "that", "have", "conducted", "more", "than", "one", "orchestras", "."], "guid": 1746}}
{"text": "genre: g_name, rating, most_popular_in; artist: artist_name, country, gender, preferred_genre; files: f_id, artist_name, file_size, duration, formats; song: song_name, artist_name, country, f_id, genre_is, rating, languages, releasedate, resolution | What is the name of the song that was released in the most recent year?", "sql": "SELECT song_name ,  releasedate FROM song ORDER BY releasedate DESC LIMIT 1", "example": {"db_id": "music_1", "query": "SELECT song_name ,  releasedate FROM song ORDER BY releasedate DESC LIMIT 1", "query_toks": ["SELECT", "song_name", ",", "releasedate", "FROM", "song", "ORDER", "BY", "releasedate", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "song_name", ",", "releasedate", "from", "song", "order", "by", "releasedate", "desc", "limit", "value"], "question": "What is the name of the song that was released in the most recent year?", "question_toks": ["What", "is", "the", "name", "of", "the", "song", "that", "was", "released", "in", "the", "most", "recent", "year", "?"], "guid": 1747}}
{"text": "artist: Artist_ID, Artist, Age, Famous_Title, Famous_Release_date; volume: Volume_ID, Volume_Issue, Issue_Date, Weeks_on_Top, Song, Artist_ID; music_festival: ID, Music_Festival, Date_of_ceremony, Category, Volume, Result | What are the songs in volumes that have resulted in a nomination at music festivals?", "sql": "SELECT T2.Song FROM music_festival AS T1 JOIN volume AS T2 ON T1.Volume  =  T2.Volume_ID WHERE T1.Result  =  \"Nominated\"", "example": {"db_id": "music_4", "query": "SELECT T2.Song FROM music_festival AS T1 JOIN volume AS T2 ON T1.Volume  =  T2.Volume_ID WHERE T1.Result  =  \"Nominated\"", "query_toks": ["SELECT", "T2.Song", "FROM", "music_festival", "AS", "T1", "JOIN", "volume", "AS", "T2", "ON", "T1.Volume", "=", "T2.Volume_ID", "WHERE", "T1.Result", "=", "``", "Nominated", "''"], "query_toks_no_value": ["select", "t2", ".", "song", "from", "music_festival", "as", "t1", "join", "volume", "as", "t2", "on", "t1", ".", "volume", "=", "t2", ".", "volume_id", "where", "t1", ".", "result", "=", "value"], "question": "What are the songs in volumes that have resulted in a nomination at music festivals?", "question_toks": ["What", "are", "the", "songs", "in", "volumes", "that", "have", "resulted", "in", "a", "nomination", "at", "music", "festivals", "?"], "guid": 1748}}
{"text": "genre: g_name, rating, most_popular_in; artist: artist_name, country, gender, preferred_genre; files: f_id, artist_name, file_size, duration, formats; song: song_name, artist_name, country, f_id, genre_is, rating, languages, releasedate, resolution | What is the name and country of origin for each artist who has released a song with a resolution higher than 900?", "sql": "SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.resolution  >  900 GROUP BY T2.artist_name HAVING count(*)  >=  1", "example": {"db_id": "music_1", "query": "SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.resolution  >  900 GROUP BY T2.artist_name HAVING count(*)  >=  1", "query_toks": ["SELECT", "T1.artist_name", ",", "T1.country", "FROM", "artist", "AS", "T1", "JOIN", "song", "AS", "T2", "ON", "T1.artist_name", "=", "T2.artist_name", "WHERE", "T2.resolution", ">", "900", "GROUP", "BY", "T2.artist_name", "HAVING", "count", "(", "*", ")", ">", "=", "1"], "query_toks_no_value": ["select", "t1", ".", "artist_name", ",", "t1", ".", "country", "from", "artist", "as", "t1", "join", "song", "as", "t2", "on", "t1", ".", "artist_name", "=", "t2", ".", "artist_name", "where", "t2", ".", "resolution", ">", "value", "group", "by", "t2", ".", "artist_name", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "What is the name and country of origin for each artist who has released a song with a resolution higher than 900?", "question_toks": ["What", "is", "the", "name", "and", "country", "of", "origin", "for", "each", "artist", "who", "has", "released", "a", "song", "with", "a", "resolution", "higher", "than", "900", "?"], "guid": 1749}}
{"text": "Songs: SongId, Title; Albums: AId, Title, Year, Label, Type; Band: Id, Firstname, Lastname; Instruments: SongId, BandmateId, Instrument; Performance: SongId, Bandmate, StagePosition; Tracklists: AlbumId, Position, SongId; Vocals: SongId, Bandmate, Type | How many musicians play in the song \"Flash\"?", "sql": "SELECT count(*) FROM performance AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id JOIN songs AS T3 ON T3.songid  =  T1.songid WHERE T3.Title  =  \"Flash\"", "example": {"db_id": "music_2", "query": "SELECT count(*) FROM performance AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id JOIN songs AS T3 ON T3.songid  =  T1.songid WHERE T3.Title  =  \"Flash\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "performance", "AS", "T1", "JOIN", "band", "AS", "T2", "ON", "T1.bandmate", "=", "T2.id", "JOIN", "songs", "AS", "T3", "ON", "T3.songid", "=", "T1.songid", "WHERE", "T3.Title", "=", "``", "Flash", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "performance", "as", "t1", "join", "band", "as", "t2", "on", "t1", ".", "bandmate", "=", "t2", ".", "id", "join", "songs", "as", "t3", "on", "t3", ".", "songid", "=", "t1", ".", "songid", "where", "t3", ".", "title", "=", "value"], "question": "How many musicians play in the song \"Flash\"?", "question_toks": ["How", "many", "musicians", "play", "in", "the", "song", "``", "Flash", "''", "?"], "guid": 1750}}
{"text": "Songs: SongId, Title; Albums: AId, Title, Year, Label, Type; Band: Id, Firstname, Lastname; Instruments: SongId, BandmateId, Instrument; Performance: SongId, Bandmate, StagePosition; Tracklists: AlbumId, Position, SongId; Vocals: SongId, Bandmate, Type | What are the songs in album \"A Kiss Before You Go: Live in Hamburg\"?", "sql": "SELECT T3.title FROM albums AS T1 JOIN tracklists AS T2 ON T1.aid  =  T2.albumid JOIN songs AS T3 ON T2.songid  =  T3.songid WHERE T1.title  =  \"A Kiss Before You Go: Live in Hamburg\"", "example": {"db_id": "music_2", "query": "SELECT T3.title FROM albums AS T1 JOIN tracklists AS T2 ON T1.aid  =  T2.albumid JOIN songs AS T3 ON T2.songid  =  T3.songid WHERE T1.title  =  \"A Kiss Before You Go: Live in Hamburg\"", "query_toks": ["SELECT", "T3.title", "FROM", "albums", "AS", "T1", "JOIN", "tracklists", "AS", "T2", "ON", "T1.aid", "=", "T2.albumid", "JOIN", "songs", "AS", "T3", "ON", "T2.songid", "=", "T3.songid", "WHERE", "T1.title", "=", "``", "A", "Kiss", "Before", "You", "Go", ":", "Live", "in", "Hamburg", "''"], "query_toks_no_value": ["select", "t3", ".", "title", "from", "albums", "as", "t1", "join", "tracklists", "as", "t2", "on", "t1", ".", "aid", "=", "t2", ".", "albumid", "join", "songs", "as", "t3", "on", "t2", ".", "songid", "=", "t3", ".", "songid", "where", "t1", ".", "title", "=", "value"], "question": "What are the songs in album \"A Kiss Before You Go: Live in Hamburg\"?", "question_toks": ["What", "are", "the", "songs", "in", "album", "``", "A", "Kiss", "Before", "You", "Go", ":", "Live", "in", "Hamburg", "''", "?"], "guid": 1751}}
{"text": "genre: g_name, rating, most_popular_in; artist: artist_name, country, gender, preferred_genre; files: f_id, artist_name, file_size, duration, formats; song: song_name, artist_name, country, f_id, genre_is, rating, languages, releasedate, resolution | What are the maximum duration and resolution of all songs, for each language, ordered alphabetically by language?", "sql": "SELECT max(T1.duration) ,  max(T2.resolution) ,  T2.languages FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id GROUP BY T2.languages ORDER BY T2.languages", "example": {"db_id": "music_1", "query": "SELECT max(T1.duration) ,  max(T2.resolution) ,  T2.languages FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id GROUP BY T2.languages ORDER BY T2.languages", "query_toks": ["SELECT", "max", "(", "T1.duration", ")", ",", "max", "(", "T2.resolution", ")", ",", "T2.languages", "FROM", "files", "AS", "T1", "JOIN", "song", "AS", "T2", "ON", "T1.f_id", "=", "T2.f_id", "GROUP", "BY", "T2.languages", "ORDER", "BY", "T2.languages"], "query_toks_no_value": ["select", "max", "(", "t1", ".", "duration", ")", ",", "max", "(", "t2", ".", "resolution", ")", ",", "t2", ".", "languages", "from", "files", "as", "t1", "join", "song", "as", "t2", "on", "t1", ".", "f_id", "=", "t2", ".", "f_id", "group", "by", "t2", ".", "languages", "order", "by", "t2", ".", "languages"], "question": "What are the maximum duration and resolution of all songs, for each language, ordered alphabetically by language?", "question_toks": ["What", "are", "the", "maximum", "duration", "and", "resolution", "of", "all", "songs", ",", "for", "each", "language", ",", "ordered", "alphabetically", "by", "language", "?"], "guid": 1752}}
{"text": "conductor: Conductor_ID, Name, Age, Nationality, Year_of_Work; orchestra: Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format; performance: Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share; show: Show_ID, Performance_ID, If_first_show, Result, Attendance | List names of conductors in descending order of years of work.", "sql": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC", "example": {"db_id": "orchestra", "query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC", "query_toks": ["SELECT", "Name", "FROM", "conductor", "ORDER", "BY", "Year_of_Work", "DESC"], "query_toks_no_value": ["select", "name", "from", "conductor", "order", "by", "year_of_work", "desc"], "question": "List names of conductors in descending order of years of work.", "question_toks": ["List", "names", "of", "conductors", "in", "descending", "order", "of", "years", "of", "work", "."], "guid": 1753}}
{"text": "genre: g_name, rating, most_popular_in; artist: artist_name, country, gender, preferred_genre; files: f_id, artist_name, file_size, duration, formats; song: song_name, artist_name, country, f_id, genre_is, rating, languages, releasedate, resolution | Find the country of origin for the artist who made the least number of songs?", "sql": "SELECT T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name GROUP BY T2.artist_name ORDER BY count(*) LIMIT 1", "example": {"db_id": "music_1", "query": "SELECT T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name GROUP BY T2.artist_name ORDER BY count(*) LIMIT 1", "query_toks": ["SELECT", "T1.country", "FROM", "artist", "AS", "T1", "JOIN", "song", "AS", "T2", "ON", "T1.artist_name", "=", "T2.artist_name", "GROUP", "BY", "T2.artist_name", "ORDER", "BY", "count", "(", "*", ")", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "country", "from", "artist", "as", "t1", "join", "song", "as", "t2", "on", "t1", ".", "artist_name", "=", "t2", ".", "artist_name", "group", "by", "t2", ".", "artist_name", "order", "by", "count", "(", "*", ")", "limit", "value"], "question": "Find the country of origin for the artist who made the least number of songs?", "question_toks": ["Find", "the", "country", "of", "origin", "for", "the", "artist", "who", "made", "the", "least", "number", "of", "songs", "?"], "guid": 1754}}
{"text": "artist: Artist_ID, Artist, Age, Famous_Title, Famous_Release_date; volume: Volume_ID, Volume_Issue, Issue_Date, Weeks_on_Top, Song, Artist_ID; music_festival: ID, Music_Festival, Date_of_ceremony, Category, Volume, Result | What is the average weeks on top of volumes associated with the artist aged 25 or younger?", "sql": "SELECT avg(T2.Weeks_on_Top) FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  <=  25", "example": {"db_id": "music_4", "query": "SELECT avg(T2.Weeks_on_Top) FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  <=  25", "query_toks": ["SELECT", "avg", "(", "T2.Weeks_on_Top", ")", "FROM", "artist", "AS", "T1", "JOIN", "volume", "AS", "T2", "ON", "T1.Artist_ID", "=", "T2.Artist_ID", "WHERE", "T1.age", "<", "=", "25"], "query_toks_no_value": ["select", "avg", "(", "t2", ".", "weeks_on_top", ")", "from", "artist", "as", "t1", "join", "volume", "as", "t2", "on", "t1", ".", "artist_id", "=", "t2", ".", "artist_id", "where", "t1", ".", "age", "<", "=", "value"], "question": "What is the average weeks on top of volumes associated with the artist aged 25 or younger?", "question_toks": ["What", "is", "the", "average", "weeks", "on", "top", "of", "volumes", "associated", "with", "the", "artist", "aged", "25", "or", "younger", "?"], "guid": 1755}}
{"text": "Songs: SongId, Title; Albums: AId, Title, Year, Label, Type; Band: Id, Firstname, Lastname; Instruments: SongId, BandmateId, Instrument; Performance: SongId, Bandmate, StagePosition; Tracklists: AlbumId, Position, SongId; Vocals: SongId, Bandmate, Type | What are the names of the songs whose title has the word \"the\"?", "sql": "SELECT title FROM songs WHERE title LIKE '% the %'", "example": {"db_id": "music_2", "query": "SELECT title FROM songs WHERE title LIKE '% the %'", "query_toks": ["SELECT", "title", "FROM", "songs", "WHERE", "title", "LIKE", "'", "%", "the", "%", "'"], "query_toks_no_value": ["select", "title", "from", "songs", "where", "title", "like", "value"], "question": "What are the names of the songs whose title has the word \"the\"?", "question_toks": ["What", "are", "the", "names", "of", "the", "songs", "whose", "title", "has", "the", "word", "``", "the", "''", "?"], "guid": 1756}}
{"text": "conductor: Conductor_ID, Name, Age, Nationality, Year_of_Work; orchestra: Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format; performance: Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share; show: Show_ID, Performance_ID, If_first_show, Result, Attendance | What are the names of conductors whose nationalities are not \"USA\"?", "sql": "SELECT Name FROM conductor WHERE Nationality != 'USA'", "example": {"db_id": "orchestra", "query": "SELECT Name FROM conductor WHERE Nationality != 'USA'", "query_toks": ["SELECT", "Name", "FROM", "conductor", "WHERE", "Nationality", "!", "=", "'USA", "'"], "query_toks_no_value": ["select", "name", "from", "conductor", "where", "nationality", "!", "=", "value"], "question": "What are the names of conductors whose nationalities are not \"USA\"?", "question_toks": ["What", "are", "the", "names", "of", "conductors", "whose", "nationalities", "are", "not", "``", "USA", "''", "?"], "guid": 1757}}
{"text": "genre: g_name, rating, most_popular_in; artist: artist_name, country, gender, preferred_genre; files: f_id, artist_name, file_size, duration, formats; song: song_name, artist_name, country, f_id, genre_is, rating, languages, releasedate, resolution | List the file size and format for all songs that have resolution lower than 800.", "sql": "SELECT DISTINCT T1.file_size ,  T1.formats FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T2.resolution  <  800", "example": {"db_id": "music_1", "query": "SELECT DISTINCT T1.file_size ,  T1.formats FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T2.resolution  <  800", "query_toks": ["SELECT", "DISTINCT", "T1.file_size", ",", "T1.formats", "FROM", "files", "AS", "T1", "JOIN", "song", "AS", "T2", "ON", "T1.f_id", "=", "T2.f_id", "WHERE", "T2.resolution", "<", "800"], "query_toks_no_value": ["select", "distinct", "t1", ".", "file_size", ",", "t1", ".", "formats", "from", "files", "as", "t1", "join", "song", "as", "t2", "on", "t1", ".", "f_id", "=", "t2", ".", "f_id", "where", "t2", ".", "resolution", "<", "value"], "question": "List the file size and format for all songs that have resolution lower than 800.", "question_toks": ["List", "the", "file", "size", "and", "format", "for", "all", "songs", "that", "have", "resolution", "lower", "than", "800", "."], "guid": 1758}}
{"text": "stadium: Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average; singer: Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male; concert: concert_ID, concert_Name, Theme, Stadium_ID, Year; singer_in_concert: concert_ID, Singer_ID | Show the name and the release year of the song by the youngest singer.", "sql": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1", "example": {"db_id": "concert_singer", "query": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1", "query_toks": ["SELECT", "song_name", ",", "song_release_year", "FROM", "singer", "ORDER", "BY", "age", "LIMIT", "1"], "query_toks_no_value": ["select", "song_name", ",", "song_release_year", "from", "singer", "order", "by", "age", "limit", "value"], "question": "Show the name and the release year of the song by the youngest singer.", "question_toks": ["Show", "the", "name", "and", "the", "release", "year", "of", "the", "song", "by", "the", "youngest", "singer", "."], "guid": 1759}}
{"text": "Songs: SongId, Title; Albums: AId, Title, Year, Label, Type; Band: Id, Firstname, Lastname; Instruments: SongId, BandmateId, Instrument; Performance: SongId, Bandmate, StagePosition; Tracklists: AlbumId, Position, SongId; Vocals: SongId, Bandmate, Type | return all columns of the albums created in the year of 2012.", "sql": "SELECT * FROM Albums WHERE YEAR  =  2012", "example": {"db_id": "music_2", "query": "SELECT * FROM Albums WHERE YEAR  =  2012", "query_toks": ["SELECT", "*", "FROM", "Albums", "WHERE", "YEAR", "=", "2012"], "query_toks_no_value": ["select", "*", "from", "albums", "where", "year", "=", "value"], "question": "return all columns of the albums created in the year of 2012.", "question_toks": ["return", "all", "columns", "of", "the", "albums", "created", "in", "the", "year", "of", "2012", "."], "guid": 1760}}
{"text": "singer: Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship; song: Song_ID, Title, Singer_ID, Sales, Highest_Position | What are the names of the singers whose birth years are either 1948 or 1949?", "sql": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949", "example": {"db_id": "singer", "query": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949", "query_toks": ["SELECT", "Name", "FROM", "singer", "WHERE", "Birth_Year", "=", "1948", "OR", "Birth_Year", "=", "1949"], "query_toks_no_value": ["select", "name", "from", "singer", "where", "birth_year", "=", "value", "or", "birth_year", "=", "value"], "question": "What are the names of the singers whose birth years are either 1948 or 1949?", "question_toks": ["What", "are", "the", "names", "of", "the", "singers", "whose", "birth", "years", "are", "either", "1948", "or", "1949", "?"], "guid": 1761}}
{"text": "singer: Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship; song: Song_ID, Title, Singer_ID, Sales, Highest_Position | What is the name of the singer who is worth the most?", "sql": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1", "example": {"db_id": "singer", "query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1", "query_toks": ["SELECT", "Name", "FROM", "singer", "ORDER", "BY", "Net_Worth_Millions", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "name", "from", "singer", "order", "by", "net_worth_millions", "desc", "limit", "value"], "question": "What is the name of the singer who is worth the most?", "question_toks": ["What", "is", "the", "name", "of", "the", "singer", "who", "is", "worth", "the", "most", "?"], "guid": 1762}}
{"text": "Songs: SongId, Title; Albums: AId, Title, Year, Label, Type; Band: Id, Firstname, Lastname; Instruments: SongId, BandmateId, Instrument; Performance: SongId, Bandmate, StagePosition; Tracklists: AlbumId, Position, SongId; Vocals: SongId, Bandmate, Type | What are the different types of vocals?", "sql": "SELECT DISTINCT TYPE FROM vocals", "example": {"db_id": "music_2", "query": "SELECT DISTINCT TYPE FROM vocals", "query_toks": ["SELECT", "DISTINCT", "TYPE", "FROM", "vocals"], "query_toks_no_value": ["select", "distinct", "type", "from", "vocals"], "question": "What are the different types of vocals?", "question_toks": ["What", "are", "the", "different", "types", "of", "vocals", "?"], "guid": 1763}}
{"text": "musical: Musical_ID, Name, Year, Award, Category, Nominee, Result; actor: Actor_ID, Name, Musical_ID, Character, Duration, age | Return the duration of the actor with the greatest age.", "sql": "SELECT Duration FROM actor ORDER BY Age DESC LIMIT 1", "example": {"db_id": "musical", "query": "SELECT Duration FROM actor ORDER BY Age DESC LIMIT 1", "query_toks": ["SELECT", "Duration", "FROM", "actor", "ORDER", "BY", "Age", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "duration", "from", "actor", "order", "by", "age", "desc", "limit", "value"], "question": "Return the duration of the actor with the greatest age.", "question_toks": ["Return", "the", "duration", "of", "the", "actor", "with", "the", "greatest", "age", "."], "guid": 1764}}
{"text": "singer: Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship; song: Song_ID, Title, Singer_ID, Sales, Highest_Position | What is the sname of every sing that does not have any song?", "sql": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)", "example": {"db_id": "singer", "query": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)", "query_toks": ["SELECT", "Name", "FROM", "singer", "WHERE", "Singer_ID", "NOT", "IN", "(", "SELECT", "Singer_ID", "FROM", "song", ")"], "query_toks_no_value": ["select", "name", "from", "singer", "where", "singer_id", "not", "in", "(", "select", "singer_id", "from", "song", ")"], "question": "What is the sname of every sing that does not have any song?", "question_toks": ["What", "is", "the", "sname", "of", "every", "sing", "that", "does", "not", "have", "any", "song", "?"], "guid": 1765}}
{"text": "stadium: Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average; singer: Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male; concert: concert_ID, concert_Name, Theme, Stadium_ID, Year; singer_in_concert: concert_ID, Singer_ID | How many singers do we have?", "sql": "SELECT count(*) FROM singer", "example": {"db_id": "concert_singer", "query": "SELECT count(*) FROM singer", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "singer"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "singer"], "question": "How many singers do we have?", "question_toks": ["How", "many", "singers", "do", "we", "have", "?"], "guid": 1766}}
{"text": "stadium: Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average; singer: Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male; concert: concert_ID, concert_Name, Theme, Stadium_ID, Year; singer_in_concert: concert_ID, Singer_ID | What are all distinct countries where singers above age 20 are from?", "sql": "SELECT DISTINCT country FROM singer WHERE age  >  20", "example": {"db_id": "concert_singer", "query": "SELECT DISTINCT country FROM singer WHERE age  >  20", "query_toks": ["SELECT", "DISTINCT", "country", "FROM", "singer", "WHERE", "age", ">", "20"], "query_toks_no_value": ["select", "distinct", "country", "from", "singer", "where", "age", ">", "value"], "question": "What are all distinct countries where singers above age 20 are from?", "question_toks": ["What", "are", "all", "distinct", "countries", "where", "singers", "above", "age", "20", "are", "from", "?"], "guid": 1767}}
{"text": "Songs: SongId, Title; Albums: AId, Title, Year, Label, Type; Band: Id, Firstname, Lastname; Instruments: SongId, BandmateId, Instrument; Performance: SongId, Bandmate, StagePosition; Tracklists: AlbumId, Position, SongId; Vocals: SongId, Bandmate, Type | What is the first and last name of artist who performed \"Le Pop\"?", "sql": "SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  \"Le Pop\"", "example": {"db_id": "music_2", "query": "SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  \"Le Pop\"", "query_toks": ["SELECT", "T2.firstname", ",", "T2.lastname", "FROM", "Performance", "AS", "T1", "JOIN", "Band", "AS", "T2", "ON", "T1.bandmate", "=", "T2.id", "JOIN", "Songs", "AS", "T3", "ON", "T3.SongId", "=", "T1.SongId", "WHERE", "T3.Title", "=", "``", "Le", "Pop", "''"], "query_toks_no_value": ["select", "t2", ".", "firstname", ",", "t2", ".", "lastname", "from", "performance", "as", "t1", "join", "band", "as", "t2", "on", "t1", ".", "bandmate", "=", "t2", ".", "id", "join", "songs", "as", "t3", "on", "t3", ".", "songid", "=", "t1", ".", "songid", "where", "t3", ".", "title", "=", "value"], "question": "What is the first and last name of artist who performed \"Le Pop\"?", "question_toks": ["What", "is", "the", "first", "and", "last", "name", "of", "artist", "who", "performed", "``", "Le", "Pop", "''", "?"], "guid": 1768}}
{"text": "genre: g_name, rating, most_popular_in; artist: artist_name, country, gender, preferred_genre; files: f_id, artist_name, file_size, duration, formats; song: song_name, artist_name, country, f_id, genre_is, rating, languages, releasedate, resolution | What is the most popular file format?", "sql": "SELECT formats FROM files GROUP BY formats ORDER BY COUNT (*) DESC LIMIT 1", "example": {"db_id": "music_1", "query": "SELECT formats FROM files GROUP BY formats ORDER BY COUNT (*) DESC LIMIT 1", "query_toks": ["SELECT", "formats", "FROM", "files", "GROUP", "BY", "formats", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "formats", "from", "files", "group", "by", "formats", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the most popular file format?", "question_toks": ["What", "is", "the", "most", "popular", "file", "format", "?"], "guid": 1769}}
{"text": "conductor: Conductor_ID, Name, Age, Nationality, Year_of_Work; orchestra: Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format; performance: Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share; show: Show_ID, Performance_ID, If_first_show, Result, Attendance | Please show the record formats of orchestras in ascending order of count.", "sql": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC", "example": {"db_id": "orchestra", "query": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC", "query_toks": ["SELECT", "Major_Record_Format", "FROM", "orchestra", "GROUP", "BY", "Major_Record_Format", "ORDER", "BY", "COUNT", "(", "*", ")", "ASC"], "query_toks_no_value": ["select", "major_record_format", "from", "orchestra", "group", "by", "major_record_format", "order", "by", "count", "(", "*", ")", "asc"], "question": "Please show the record formats of orchestras in ascending order of count.", "question_toks": ["Please", "show", "the", "record", "formats", "of", "orchestras", "in", "ascending", "order", "of", "count", "."], "guid": 1770}}
{"text": "Songs: SongId, Title; Albums: AId, Title, Year, Label, Type; Band: Id, Firstname, Lastname; Instruments: SongId, BandmateId, Instrument; Performance: SongId, Bandmate, StagePosition; Tracklists: AlbumId, Position, SongId; Vocals: SongId, Bandmate, Type | Find the number of songs in all the studio albums.", "sql": "SELECT count(DISTINCT T3.title) FROM albums AS T1 JOIN tracklists AS T2 ON T1.aid  =  T2.albumid JOIN songs AS T3 ON T2.songid  =  T3.songid WHERE t1.type  =  \"Studio\"", "example": {"db_id": "music_2", "query": "SELECT count(DISTINCT T3.title) FROM albums AS T1 JOIN tracklists AS T2 ON T1.aid  =  T2.albumid JOIN songs AS T3 ON T2.songid  =  T3.songid WHERE t1.type  =  \"Studio\"", "query_toks": ["SELECT", "count", "(", "DISTINCT", "T3.title", ")", "FROM", "albums", "AS", "T1", "JOIN", "tracklists", "AS", "T2", "ON", "T1.aid", "=", "T2.albumid", "JOIN", "songs", "AS", "T3", "ON", "T2.songid", "=", "T3.songid", "WHERE", "t1.type", "=", "``", "Studio", "''"], "query_toks_no_value": ["select", "count", "(", "distinct", "t3", ".", "title", ")", "from", "albums", "as", "t1", "join", "tracklists", "as", "t2", "on", "t1", ".", "aid", "=", "t2", ".", "albumid", "join", "songs", "as", "t3", "on", "t2", ".", "songid", "=", "t3", ".", "songid", "where", "t1", ".", "type", "=", "value"], "question": "Find the number of songs in all the studio albums.", "question_toks": ["Find", "the", "number", "of", "songs", "in", "all", "the", "studio", "albums", "."], "guid": 1771}}
{"text": "genre: g_name, rating, most_popular_in; artist: artist_name, country, gender, preferred_genre; files: f_id, artist_name, file_size, duration, formats; song: song_name, artist_name, country, f_id, genre_is, rating, languages, releasedate, resolution | What are the names of the artists who released a song that has the word love in its title, and where are the artists from?", "sql": "SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.song_name LIKE \"%love%\"", "example": {"db_id": "music_1", "query": "SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.song_name LIKE \"%love%\"", "query_toks": ["SELECT", "T1.artist_name", ",", "T1.country", "FROM", "artist", "AS", "T1", "JOIN", "song", "AS", "T2", "ON", "T1.artist_name", "=", "T2.artist_name", "WHERE", "T2.song_name", "LIKE", "``", "%", "love", "%", "''"], "query_toks_no_value": ["select", "t1", ".", "artist_name", ",", "t1", ".", "country", "from", "artist", "as", "t1", "join", "song", "as", "t2", "on", "t1", ".", "artist_name", "=", "t2", ".", "artist_name", "where", "t2", ".", "song_name", "like", "value"], "question": "What are the names of the artists who released a song that has the word love in its title, and where are the artists from?", "question_toks": ["What", "are", "the", "names", "of", "the", "artists", "who", "released", "a", "song", "that", "has", "the", "word", "love", "in", "its", "title", ",", "and", "where", "are", "the", "artists", "from", "?"], "guid": 1772}}
{"text": "artist: Artist_ID, Artist, Age, Famous_Title, Famous_Release_date; volume: Volume_ID, Volume_Issue, Issue_Date, Weeks_on_Top, Song, Artist_ID; music_festival: ID, Music_Festival, Date_of_ceremony, Category, Volume, Result | Give the distinct famous release dates for all artists.", "sql": "SELECT distinct(Famous_Release_date) FROM artist", "example": {"db_id": "music_4", "query": "SELECT distinct(Famous_Release_date) FROM artist", "query_toks": ["SELECT", "distinct", "(", "Famous_Release_date", ")", "FROM", "artist"], "query_toks_no_value": ["select", "distinct", "(", "famous_release_date", ")", "from", "artist"], "question": "Give the distinct famous release dates for all artists.", "question_toks": ["Give", "the", "distinct", "famous", "release", "dates", "for", "all", "artists", "."], "guid": 1773}}
{"text": "artist: Artist_ID, Artist, Age, Famous_Title, Famous_Release_date; volume: Volume_ID, Volume_Issue, Issue_Date, Weeks_on_Top, Song, Artist_ID; music_festival: ID, Music_Festival, Date_of_ceremony, Category, Volume, Result | Please show the categories of the music festivals and the count.", "sql": "SELECT Category ,  COUNT(*) FROM music_festival GROUP BY Category", "example": {"db_id": "music_4", "query": "SELECT Category ,  COUNT(*) FROM music_festival GROUP BY Category", "query_toks": ["SELECT", "Category", ",", "COUNT", "(", "*", ")", "FROM", "music_festival", "GROUP", "BY", "Category"], "query_toks_no_value": ["select", "category", ",", "count", "(", "*", ")", "from", "music_festival", "group", "by", "category"], "question": "Please show the categories of the music festivals and the count.", "question_toks": ["Please", "show", "the", "categories", "of", "the", "music", "festivals", "and", "the", "count", "."], "guid": 1774}}
{"text": "Songs: SongId, Title; Albums: AId, Title, Year, Label, Type; Band: Id, Firstname, Lastname; Instruments: SongId, BandmateId, Instrument; Performance: SongId, Bandmate, StagePosition; Tracklists: AlbumId, Position, SongId; Vocals: SongId, Bandmate, Type | What is the last name of the musicians who has played back position the most?", "sql": "SELECT T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id WHERE stageposition  =  \"back\" GROUP BY lastname ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "music_2", "query": "SELECT T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id WHERE stageposition  =  \"back\" GROUP BY lastname ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T2.lastname", "FROM", "Performance", "AS", "T1", "JOIN", "Band", "AS", "T2", "ON", "T1.bandmate", "=", "T2.id", "WHERE", "stageposition", "=", "``", "back", "''", "GROUP", "BY", "lastname", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "lastname", "from", "performance", "as", "t1", "join", "band", "as", "t2", "on", "t1", ".", "bandmate", "=", "t2", ".", "id", "where", "stageposition", "=", "value", "group", "by", "lastname", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the last name of the musicians who has played back position the most?", "question_toks": ["What", "is", "the", "last", "name", "of", "the", "musicians", "who", "has", "played", "back", "position", "the", "most", "?"], "guid": 1775}}
{"text": "genre: g_name, rating, most_popular_in; artist: artist_name, country, gender, preferred_genre; files: f_id, artist_name, file_size, duration, formats; song: song_name, artist_name, country, f_id, genre_is, rating, languages, releasedate, resolution | What are the id of songs whose format is mp3.", "sql": "SELECT f_id FROM files WHERE formats  =  \"mp3\"", "example": {"db_id": "music_1", "query": "SELECT f_id FROM files WHERE formats  =  \"mp3\"", "query_toks": ["SELECT", "f_id", "FROM", "files", "WHERE", "formats", "=", "``", "mp3", "''"], "query_toks_no_value": ["select", "f_id", "from", "files", "where", "formats", "=", "value"], "question": "What are the id of songs whose format is mp3.", "question_toks": ["What", "are", "the", "id", "of", "songs", "whose", "format", "is", "mp3", "."], "guid": 1776}}
{"text": "genre: g_name, rating, most_popular_in; artist: artist_name, country, gender, preferred_genre; files: f_id, artist_name, file_size, duration, formats; song: song_name, artist_name, country, f_id, genre_is, rating, languages, releasedate, resolution | How many artists are male and how many are female?", "sql": "SELECT count(*) ,  gender FROM artist GROUP BY gender", "example": {"db_id": "music_1", "query": "SELECT count(*) ,  gender FROM artist GROUP BY gender", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "gender", "FROM", "artist", "GROUP", "BY", "gender"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "gender", "from", "artist", "group", "by", "gender"], "question": "How many artists are male and how many are female?", "question_toks": ["How", "many", "artists", "are", "male", "and", "how", "many", "are", "female", "?"], "guid": 1777}}
{"text": "Songs: SongId, Title; Albums: AId, Title, Year, Label, Type; Band: Id, Firstname, Lastname; Instruments: SongId, BandmateId, Instrument; Performance: SongId, Bandmate, StagePosition; Tracklists: AlbumId, Position, SongId; Vocals: SongId, Bandmate, Type | What are all the instruments used?", "sql": "SELECT DISTINCT instrument FROM Instruments", "example": {"db_id": "music_2", "query": "SELECT DISTINCT instrument FROM Instruments", "query_toks": ["SELECT", "DISTINCT", "instrument", "FROM", "Instruments"], "query_toks_no_value": ["select", "distinct", "instrument", "from", "instruments"], "question": "What are all the instruments used?", "question_toks": ["What", "are", "all", "the", "instruments", "used", "?"], "guid": 1778}}
{"text": "conductor: Conductor_ID, Name, Age, Nationality, Year_of_Work; orchestra: Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format; performance: Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share; show: Show_ID, Performance_ID, If_first_show, Result, Attendance | Please show the different record companies and the corresponding number of orchestras.", "sql": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company", "example": {"db_id": "orchestra", "query": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company", "query_toks": ["SELECT", "Record_Company", ",", "COUNT", "(", "*", ")", "FROM", "orchestra", "GROUP", "BY", "Record_Company"], "query_toks_no_value": ["select", "record_company", ",", "count", "(", "*", ")", "from", "orchestra", "group", "by", "record_company"], "question": "Please show the different record companies and the corresponding number of orchestras.", "question_toks": ["Please", "show", "the", "different", "record", "companies", "and", "the", "corresponding", "number", "of", "orchestras", "."], "guid": 1779}}
{"text": "musical: Musical_ID, Name, Year, Award, Category, Nominee, Result; actor: Actor_ID, Name, Musical_ID, Character, Duration, age | Return the most frequent result across all musicals.", "sql": "SELECT RESULT FROM musical GROUP BY RESULT ORDER BY COUNT(*) DESC LIMIT 1", "example": {"db_id": "musical", "query": "SELECT RESULT FROM musical GROUP BY RESULT ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "RESULT", "FROM", "musical", "GROUP", "BY", "RESULT", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "result", "from", "musical", "group", "by", "result", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Return the most frequent result across all musicals.", "question_toks": ["Return", "the", "most", "frequent", "result", "across", "all", "musicals", "."], "guid": 1780}}
{"text": "artist: Artist_ID, Artist, Age, Famous_Title, Famous_Release_date; volume: Volume_ID, Volume_Issue, Issue_Date, Weeks_on_Top, Song, Artist_ID; music_festival: ID, Music_Festival, Date_of_ceremony, Category, Volume, Result | What is the famous release date of the artist with the oldest age?", "sql": "SELECT Famous_Release_date FROM artist ORDER BY Age DESC LIMIT 1", "example": {"db_id": "music_4", "query": "SELECT Famous_Release_date FROM artist ORDER BY Age DESC LIMIT 1", "query_toks": ["SELECT", "Famous_Release_date", "FROM", "artist", "ORDER", "BY", "Age", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "famous_release_date", "from", "artist", "order", "by", "age", "desc", "limit", "value"], "question": "What is the famous release date of the artist with the oldest age?", "question_toks": ["What", "is", "the", "famous", "release", "date", "of", "the", "artist", "with", "the", "oldest", "age", "?"], "guid": 1781}}
{"text": "artist: Artist_ID, Artist, Age, Famous_Title, Famous_Release_date; volume: Volume_ID, Volume_Issue, Issue_Date, Weeks_on_Top, Song, Artist_ID; music_festival: ID, Music_Festival, Date_of_ceremony, Category, Volume, Result | Return the famous titles of the artist called \"Triumfall\".", "sql": "SELECT Famous_Title FROM artist WHERE Artist  =  \"Triumfall\"", "example": {"db_id": "music_4", "query": "SELECT Famous_Title FROM artist WHERE Artist  =  \"Triumfall\"", "query_toks": ["SELECT", "Famous_Title", "FROM", "artist", "WHERE", "Artist", "=", "``", "Triumfall", "''"], "query_toks_no_value": ["select", "famous_title", "from", "artist", "where", "artist", "=", "value"], "question": "Return the famous titles of the artist called \"Triumfall\".", "question_toks": ["Return", "the", "famous", "titles", "of", "the", "artist", "called", "``", "Triumfall", "''", "."], "guid": 1782}}
{"text": "musical: Musical_ID, Name, Year, Award, Category, Nominee, Result; actor: Actor_ID, Name, Musical_ID, Character, Duration, age | List the most common result of the musicals.", "sql": "SELECT RESULT FROM musical GROUP BY RESULT ORDER BY COUNT(*) DESC LIMIT 1", "example": {"db_id": "musical", "query": "SELECT RESULT FROM musical GROUP BY RESULT ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "RESULT", "FROM", "musical", "GROUP", "BY", "RESULT", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "result", "from", "musical", "group", "by", "result", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "List the most common result of the musicals.", "question_toks": ["List", "the", "most", "common", "result", "of", "the", "musicals", "."], "guid": 1783}}
{"text": "genre: g_name, rating, most_popular_in; artist: artist_name, country, gender, preferred_genre; files: f_id, artist_name, file_size, duration, formats; song: song_name, artist_name, country, f_id, genre_is, rating, languages, releasedate, resolution | Give me a list of the names of all songs ordered by their resolution.", "sql": "SELECT song_name FROM song ORDER BY resolution", "example": {"db_id": "music_1", "query": "SELECT song_name FROM song ORDER BY resolution", "query_toks": ["SELECT", "song_name", "FROM", "song", "ORDER", "BY", "resolution"], "query_toks_no_value": ["select", "song_name", "from", "song", "order", "by", "resolution"], "question": "Give me a list of the names of all songs ordered by their resolution.", "question_toks": ["Give", "me", "a", "list", "of", "the", "names", "of", "all", "songs", "ordered", "by", "their", "resolution", "."], "guid": 1784}}
{"text": "genre: g_name, rating, most_popular_in; artist: artist_name, country, gender, preferred_genre; files: f_id, artist_name, file_size, duration, formats; song: song_name, artist_name, country, f_id, genre_is, rating, languages, releasedate, resolution | For each file format, return the number of artists who released songs in that format.", "sql": "SELECT count(*) ,  formats FROM files GROUP BY formats", "example": {"db_id": "music_1", "query": "SELECT count(*) ,  formats FROM files GROUP BY formats", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "formats", "FROM", "files", "GROUP", "BY", "formats"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "formats", "from", "files", "group", "by", "formats"], "question": "For each file format, return the number of artists who released songs in that format.", "question_toks": ["For", "each", "file", "format", ",", "return", "the", "number", "of", "artists", "who", "released", "songs", "in", "that", "format", "."], "guid": 1785}}
{"text": "artist: Artist_ID, Artist, Age, Famous_Title, Famous_Release_date; volume: Volume_ID, Volume_Issue, Issue_Date, Weeks_on_Top, Song, Artist_ID; music_festival: ID, Music_Festival, Date_of_ceremony, Category, Volume, Result | What are the issue dates of volumes associated with the artist aged 23 or younger?", "sql": "SELECT Issue_Date FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  <=  23", "example": {"db_id": "music_4", "query": "SELECT Issue_Date FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  <=  23", "query_toks": ["SELECT", "Issue_Date", "FROM", "artist", "AS", "T1", "JOIN", "volume", "AS", "T2", "ON", "T1.Artist_ID", "=", "T2.Artist_ID", "WHERE", "T1.age", "<", "=", "23"], "query_toks_no_value": ["select", "issue_date", "from", "artist", "as", "t1", "join", "volume", "as", "t2", "on", "t1", ".", "artist_id", "=", "t2", ".", "artist_id", "where", "t1", ".", "age", "<", "=", "value"], "question": "What are the issue dates of volumes associated with the artist aged 23 or younger?", "question_toks": ["What", "are", "the", "issue", "dates", "of", "volumes", "associated", "with", "the", "artist", "aged", "23", "or", "younger", "?"], "guid": 1786}}
{"text": "musical: Musical_ID, Name, Year, Award, Category, Nominee, Result; actor: Actor_ID, Name, Musical_ID, Character, Duration, age | What are the names of actors who have been in the musical titled The Phantom of the Opera?", "sql": "SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID WHERE T2.Name  =  \"The Phantom of the Opera\"", "example": {"db_id": "musical", "query": "SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID WHERE T2.Name  =  \"The Phantom of the Opera\"", "query_toks": ["SELECT", "T1.Name", "FROM", "actor", "AS", "T1", "JOIN", "musical", "AS", "T2", "ON", "T1.Musical_ID", "=", "T2.Musical_ID", "WHERE", "T2.Name", "=", "``", "The", "Phantom", "of", "the", "Opera", "''"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "actor", "as", "t1", "join", "musical", "as", "t2", "on", "t1", ".", "musical_id", "=", "t2", ".", "musical_id", "where", "t2", ".", "name", "=", "value"], "question": "What are the names of actors who have been in the musical titled The Phantom of the Opera?", "question_toks": ["What", "are", "the", "names", "of", "actors", "who", "have", "been", "in", "the", "musical", "titled", "The", "Phantom", "of", "the", "Opera", "?"], "guid": 1787}}
{"text": "genre: g_name, rating, most_popular_in; artist: artist_name, country, gender, preferred_genre; files: f_id, artist_name, file_size, duration, formats; song: song_name, artist_name, country, f_id, genre_is, rating, languages, releasedate, resolution | What are the names of the different artists from Bangladesh who never received a rating higher than a 7?", "sql": "SELECT DISTINCT artist_name FROM artist WHERE country  =  \"Bangladesh\" EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating  >  7", "example": {"db_id": "music_1", "query": "SELECT DISTINCT artist_name FROM artist WHERE country  =  \"Bangladesh\" EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating  >  7", "query_toks": ["SELECT", "DISTINCT", "artist_name", "FROM", "artist", "WHERE", "country", "=", "``", "Bangladesh", "''", "EXCEPT", "SELECT", "DISTINCT", "artist_name", "FROM", "song", "WHERE", "rating", ">", "7"], "query_toks_no_value": ["select", "distinct", "artist_name", "from", "artist", "where", "country", "=", "value", "except", "select", "distinct", "artist_name", "from", "song", "where", "rating", ">", "value"], "question": "What are the names of the different artists from Bangladesh who never received a rating higher than a 7?", "question_toks": ["What", "are", "the", "names", "of", "the", "different", "artists", "from", "Bangladesh", "who", "never", "received", "a", "rating", "higher", "than", "a", "7", "?"], "guid": 1788}}
{"text": "stadium: Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average; singer: Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male; concert: concert_ID, concert_Name, Theme, Stadium_ID, Year; singer_in_concert: concert_ID, Singer_ID | List all song names by singers above the average age.", "sql": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)", "example": {"db_id": "concert_singer", "query": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)", "query_toks": ["SELECT", "song_name", "FROM", "singer", "WHERE", "age", ">", "(", "SELECT", "avg", "(", "age", ")", "FROM", "singer", ")"], "query_toks_no_value": ["select", "song_name", "from", "singer", "where", "age", ">", "(", "select", "avg", "(", "age", ")", "from", "singer", ")"], "question": "List all song names by singers above the average age.", "question_toks": ["List", "all", "song", "names", "by", "singers", "above", "the", "average", "age", "."], "guid": 1789}}
{"text": "conductor: Conductor_ID, Name, Age, Nationality, Year_of_Work; orchestra: Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format; performance: Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share; show: Show_ID, Performance_ID, If_first_show, Result, Attendance | Show the record companies shared by orchestras founded before 2003 and after 2003.", "sql": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003", "example": {"db_id": "orchestra", "query": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003", "query_toks": ["SELECT", "Record_Company", "FROM", "orchestra", "WHERE", "Year_of_Founded", "<", "2003", "INTERSECT", "SELECT", "Record_Company", "FROM", "orchestra", "WHERE", "Year_of_Founded", ">", "2003"], "query_toks_no_value": ["select", "record_company", "from", "orchestra", "where", "year_of_founded", "<", "value", "intersect", "select", "record_company", "from", "orchestra", "where", "year_of_founded", ">", "value"], "question": "Show the record companies shared by orchestras founded before 2003 and after 2003.", "question_toks": ["Show", "the", "record", "companies", "shared", "by", "orchestras", "founded", "before", "2003", "and", "after", "2003", "."], "guid": 1790}}
{"text": "Songs: SongId, Title; Albums: AId, Title, Year, Label, Type; Band: Id, Firstname, Lastname; Instruments: SongId, BandmateId, Instrument; Performance: SongId, Bandmate, StagePosition; Tracklists: AlbumId, Position, SongId; Vocals: SongId, Bandmate, Type | How many songs appear in studio albums?", "sql": "SELECT count(DISTINCT T3.title) FROM albums AS T1 JOIN tracklists AS T2 ON T1.aid  =  T2.albumid JOIN songs AS T3 ON T2.songid  =  T3.songid WHERE t1.type  =  \"Studio\"", "example": {"db_id": "music_2", "query": "SELECT count(DISTINCT T3.title) FROM albums AS T1 JOIN tracklists AS T2 ON T1.aid  =  T2.albumid JOIN songs AS T3 ON T2.songid  =  T3.songid WHERE t1.type  =  \"Studio\"", "query_toks": ["SELECT", "count", "(", "DISTINCT", "T3.title", ")", "FROM", "albums", "AS", "T1", "JOIN", "tracklists", "AS", "T2", "ON", "T1.aid", "=", "T2.albumid", "JOIN", "songs", "AS", "T3", "ON", "T2.songid", "=", "T3.songid", "WHERE", "t1.type", "=", "``", "Studio", "''"], "query_toks_no_value": ["select", "count", "(", "distinct", "t3", ".", "title", ")", "from", "albums", "as", "t1", "join", "tracklists", "as", "t2", "on", "t1", ".", "aid", "=", "t2", ".", "albumid", "join", "songs", "as", "t3", "on", "t2", ".", "songid", "=", "t3", ".", "songid", "where", "t1", ".", "type", "=", "value"], "question": "How many songs appear in studio albums?", "question_toks": ["How", "many", "songs", "appear", "in", "studio", "albums", "?"], "guid": 1791}}
{"text": "genre: g_name, rating, most_popular_in; artist: artist_name, country, gender, preferred_genre; files: f_id, artist_name, file_size, duration, formats; song: song_name, artist_name, country, f_id, genre_is, rating, languages, releasedate, resolution | What are the names of the artists that are from the UK and sang songs in English?", "sql": "SELECT artist_name FROM artist WHERE country  =  \"UK\" INTERSECT SELECT artist_name FROM song WHERE languages  =  \"english\"", "example": {"db_id": "music_1", "query": "SELECT artist_name FROM artist WHERE country  =  \"UK\" INTERSECT SELECT artist_name FROM song WHERE languages  =  \"english\"", "query_toks": ["SELECT", "artist_name", "FROM", "artist", "WHERE", "country", "=", "``", "UK", "''", "INTERSECT", "SELECT", "artist_name", "FROM", "song", "WHERE", "languages", "=", "``", "english", "''"], "query_toks_no_value": ["select", "artist_name", "from", "artist", "where", "country", "=", "value", "intersect", "select", "artist_name", "from", "song", "where", "languages", "=", "value"], "question": "What are the names of the artists that are from the UK and sang songs in English?", "question_toks": ["What", "are", "the", "names", "of", "the", "artists", "that", "are", "from", "the", "UK", "and", "sang", "songs", "in", "English", "?"], "guid": 1792}}
{"text": "artist: Artist_ID, Artist, Age, Famous_Title, Famous_Release_date; volume: Volume_ID, Volume_Issue, Issue_Date, Weeks_on_Top, Song, Artist_ID; music_festival: ID, Music_Festival, Date_of_ceremony, Category, Volume, Result | Show the famous titles of the artists with both volumes that lasted more than 2 weeks on top and volumes that lasted less than 2 weeks on top.", "sql": "SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T2.Weeks_on_Top  >  2 INTERSECT SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T2.Weeks_on_Top  <  2", "example": {"db_id": "music_4", "query": "SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T2.Weeks_on_Top  >  2 INTERSECT SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T2.Weeks_on_Top  <  2", "query_toks": ["SELECT", "T1.Famous_Title", "FROM", "artist", "AS", "T1", "JOIN", "volume", "AS", "T2", "ON", "T1.Artist_ID", "=", "T2.Artist_ID", "WHERE", "T2.Weeks_on_Top", ">", "2", "INTERSECT", "SELECT", "T1.Famous_Title", "FROM", "artist", "AS", "T1", "JOIN", "volume", "AS", "T2", "ON", "T1.Artist_ID", "=", "T2.Artist_ID", "WHERE", "T2.Weeks_on_Top", "<", "2"], "query_toks_no_value": ["select", "t1", ".", "famous_title", "from", "artist", "as", "t1", "join", "volume", "as", "t2", "on", "t1", ".", "artist_id", "=", "t2", ".", "artist_id", "where", "t2", ".", "weeks_on_top", ">", "value", "intersect", "select", "t1", ".", "famous_title", "from", "artist", "as", "t1", "join", "volume", "as", "t2", "on", "t1", ".", "artist_id", "=", "t2", ".", "artist_id", "where", "t2", ".", "weeks_on_top", "<", "value"], "question": "Show the famous titles of the artists with both volumes that lasted more than 2 weeks on top and volumes that lasted less than 2 weeks on top.", "question_toks": ["Show", "the", "famous", "titles", "of", "the", "artists", "with", "both", "volumes", "that", "lasted", "more", "than", "2", "weeks", "on", "top", "and", "volumes", "that", "lasted", "less", "than", "2", "weeks", "on", "top", "."], "guid": 1793}}
{"text": "conductor: Conductor_ID, Name, Age, Nationality, Year_of_Work; orchestra: Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format; performance: Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share; show: Show_ID, Performance_ID, If_first_show, Result, Attendance | List the names of orchestras that have no performance.", "sql": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)", "example": {"db_id": "orchestra", "query": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)", "query_toks": ["SELECT", "Orchestra", "FROM", "orchestra", "WHERE", "Orchestra_ID", "NOT", "IN", "(", "SELECT", "Orchestra_ID", "FROM", "performance", ")"], "query_toks_no_value": ["select", "orchestra", "from", "orchestra", "where", "orchestra_id", "not", "in", "(", "select", "orchestra_id", "from", "performance", ")"], "question": "List the names of orchestras that have no performance.", "question_toks": ["List", "the", "names", "of", "orchestras", "that", "have", "no", "performance", "."], "guid": 1794}}
{"text": "singer: Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship; song: Song_ID, Title, Singer_ID, Sales, Highest_Position | What are the names of the singers that have more than one songs?", "sql": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1", "example": {"db_id": "singer", "query": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1", "query_toks": ["SELECT", "T1.Name", "FROM", "singer", "AS", "T1", "JOIN", "song", "AS", "T2", "ON", "T1.Singer_ID", "=", "T2.Singer_ID", "GROUP", "BY", "T1.Name", "HAVING", "COUNT", "(", "*", ")", ">", "1"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "singer", "as", "t1", "join", "song", "as", "t2", "on", "t1", ".", "singer_id", "=", "t2", ".", "singer_id", "group", "by", "t1", ".", "name", "having", "count", "(", "*", ")", ">", "value"], "question": "What are the names of the singers that have more than one songs?", "question_toks": ["What", "are", "the", "names", "of", "the", "singers", "that", "have", "more", "than", "one", "songs", "?"], "guid": 1795}}
{"text": "Songs: SongId, Title; Albums: AId, Title, Year, Label, Type; Band: Id, Firstname, Lastname; Instruments: SongId, BandmateId, Instrument; Performance: SongId, Bandmate, StagePosition; Tracklists: AlbumId, Position, SongId; Vocals: SongId, Bandmate, Type | Who is performing in the back stage position for the song \"Badlands\"? Show the first name and the last name.", "sql": "SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  \"Badlands\" AND T1.StagePosition  =  \"back\"", "example": {"db_id": "music_2", "query": "SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  \"Badlands\" AND T1.StagePosition  =  \"back\"", "query_toks": ["SELECT", "T2.firstname", ",", "T2.lastname", "FROM", "Performance", "AS", "T1", "JOIN", "Band", "AS", "T2", "ON", "T1.bandmate", "=", "T2.id", "JOIN", "Songs", "AS", "T3", "ON", "T3.SongId", "=", "T1.SongId", "WHERE", "T3.Title", "=", "``", "Badlands", "''", "AND", "T1.StagePosition", "=", "``", "back", "''"], "query_toks_no_value": ["select", "t2", ".", "firstname", ",", "t2", ".", "lastname", "from", "performance", "as", "t1", "join", "band", "as", "t2", "on", "t1", ".", "bandmate", "=", "t2", ".", "id", "join", "songs", "as", "t3", "on", "t3", ".", "songid", "=", "t1", ".", "songid", "where", "t3", ".", "title", "=", "value", "and", "t1", ".", "stageposition", "=", "value"], "question": "Who is performing in the back stage position for the song \"Badlands\"? Show the first name and the last name.", "question_toks": ["Who", "is", "performing", "in", "the", "back", "stage", "position", "for", "the", "song", "``", "Badlands", "''", "?", "Show", "the", "first", "name", "and", "the", "last", "name", "."], "guid": 1796}}
{"text": "stadium: Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average; singer: Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male; concert: concert_ID, concert_Name, Theme, Stadium_ID, Year; singer_in_concert: concert_ID, Singer_ID | What is the average and maximum capacities for all stadiums ?", "sql": "select avg(capacity) ,  max(capacity) from stadium", "example": {"db_id": "concert_singer", "query": "select avg(capacity) ,  max(capacity) from stadium", "query_toks": ["select", "avg", "(", "capacity", ")", ",", "max", "(", "capacity", ")", "from", "stadium"], "query_toks_no_value": ["select", "avg", "(", "capacity", ")", ",", "max", "(", "capacity", ")", "from", "stadium"], "question": "What is the average and maximum capacities for all stadiums ?", "question_toks": ["What", "is", "the", "average", "and", "maximum", "capacities", "for", "all", "stadiums", "?"], "guid": 1797}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | What are the papers from pldi 2015 ?", "sql": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"pldi\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"pldi\";", "query_toks": ["SELECT", "DISTINCT", "t1.paperid", "FROM", "venue", "AS", "t2", "JOIN", "paper", "AS", "t1", "ON", "t2.venueid", "=", "t1.venueid", "WHERE", "t1.year", "=", "2015", "AND", "t2.venuename", "=", "``", "pldi", "''", ";"], "query_toks_no_value": ["select", "distinct", "t1", ".", "paperid", "from", "venue", "as", "t2", "join", "paper", "as", "t1", "on", "t2", ".", "venueid", "=", "t1", ".", "venueid", "where", "t1", ".", "year", "=", "value", "and", "t2", ".", "venuename", "=", "value"], "question": "What are the papers from pldi 2015 ?", "question_toks": ["What", "are", "the", "papers", "from", "pldi", "2015", "?"], "guid": 3934}}
{"text": "book_club: book_club_id, Year, Author_or_Editor, Book_Title, Publisher, Category, Result; movie: movie_id, Title, Year, Director, Budget_million, Gross_worldwide; culture_company: Company_name, Type, Incorporated_in, Group_Equity_Shareholding, book_club_id, movie_id | How many movie directors are there?", "sql": "SELECT COUNT (DISTINCT director) FROM movie", "example": {"db_id": "culture_company", "query": "SELECT COUNT (DISTINCT director) FROM movie", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "director", ")", "FROM", "movie"], "query_toks_no_value": ["select", "count", "(", "distinct", "director", ")", "from", "movie"], "question": "How many movie directors are there?", "question_toks": ["How", "many", "movie", "directors", "are", "there", "?"], "guid": 3935}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | What conferences does Daniella Coelho publish in ?", "sql": "SELECT DISTINCT t3.venueid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Daniella Coelho\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.venueid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Daniella Coelho\";", "query_toks": ["SELECT", "DISTINCT", "t3.venueid", "FROM", "writes", "AS", "t2", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "JOIN", "paper", "AS", "t3", "ON", "t2.paperid", "=", "t3.paperid", "WHERE", "t1.authorname", "=", "``", "Daniella", "Coelho", "''", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "venueid", "from", "writes", "as", "t2", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "join", "paper", "as", "t3", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "where", "t1", ".", "authorname", "=", "value"], "question": "What conferences does Daniella Coelho publish in ?", "question_toks": ["What", "conferences", "does", "Daniella", "Coelho", "publish", "in", "?"], "guid": 3936}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | How many papers does Samuel Madden publish outside of PVLDB area ?", "sql": "SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Samuel Madden\" AND t4.venuename != \"PVLDB\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Samuel Madden\" AND t4.venuename != \"PVLDB\";", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "DISTINCT", "t3.paperid", ")", "FROM", "venue", "AS", "t4", "JOIN", "paper", "AS", "t3", "ON", "t4.venueid", "=", "t3.venueid", "JOIN", "writes", "AS", "t2", "ON", "t2.paperid", "=", "t3.paperid", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "WHERE", "t1.authorname", "=", "``", "Samuel", "Madden", "''", "AND", "t4.venuename", "!", "=", "``", "PVLDB", "''", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "distinct", "t3", ".", "paperid", ")", "from", "venue", "as", "t4", "join", "paper", "as", "t3", "on", "t4", ".", "venueid", "=", "t3", ".", "venueid", "join", "writes", "as", "t2", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "where", "t1", ".", "authorname", "=", "value", "and", "t4", ".", "venuename", "!", "=", "value"], "question": "How many papers does Samuel Madden publish outside of PVLDB area ?", "question_toks": ["How", "many", "papers", "does", "Samuel", "Madden", "publish", "outside", "of", "PVLDB", "area", "?"], "guid": 3937}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | Where does Peter Mertens publish ?", "sql": "SELECT DISTINCT t3.journalid  ,  t4.venueid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Peter Mertens\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.journalid  ,  t4.venueid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Peter Mertens\";", "query_toks": ["SELECT", "DISTINCT", "t3.journalid", ",", "t4.venueid", "FROM", "venue", "AS", "t4", "JOIN", "paper", "AS", "t3", "ON", "t4.venueid", "=", "t3.venueid", "JOIN", "writes", "AS", "t2", "ON", "t2.paperid", "=", "t3.paperid", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "WHERE", "t1.authorname", "=", "``", "Peter", "Mertens", "''", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "journalid", ",", "t4", ".", "venueid", "from", "venue", "as", "t4", "join", "paper", "as", "t3", "on", "t4", ".", "venueid", "=", "t3", ".", "venueid", "join", "writes", "as", "t2", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "where", "t1", ".", "authorname", "=", "value"], "question": "Where does Peter Mertens publish ?", "question_toks": ["Where", "does", "Peter", "Mertens", "publish", "?"], "guid": 3938}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | Journal Papers by mohammad rastegari", "sql": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"mohammad rastegari\" AND t3.journalid  >=  0;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"mohammad rastegari\" AND t3.journalid  >=  0;", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "writes", "AS", "t2", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "JOIN", "paper", "AS", "t3", "ON", "t2.paperid", "=", "t3.paperid", "WHERE", "t1.authorname", "=", "``", "mohammad", "rastegari", "''", "AND", "t3.journalid", ">", "=", "0", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "writes", "as", "t2", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "join", "paper", "as", "t3", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "where", "t1", ".", "authorname", "=", "value", "and", "t3", ".", "journalid", ">", "=", "value"], "question": "Journal Papers by mohammad rastegari", "question_toks": ["Journal", "Papers", "by", "mohammad", "rastegari"], "guid": 3939}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | how many papers are published in sigir ?", "sql": "SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"sigir\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"sigir\";", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "t1.paperid", ")", "FROM", "venue", "AS", "t2", "JOIN", "paper", "AS", "t1", "ON", "t2.venueid", "=", "t1.venueid", "WHERE", "t2.venuename", "=", "``", "sigir", "''", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "t1", ".", "paperid", ")", "from", "venue", "as", "t2", "join", "paper", "as", "t1", "on", "t2", ".", "venueid", "=", "t1", ".", "venueid", "where", "t2", ".", "venuename", "=", "value"], "question": "how many papers are published in sigir ?", "question_toks": ["how", "many", "papers", "are", "published", "in", "sigir", "?"], "guid": 3940}}
{"text": "journal: Journal_ID, Date, Theme, Sales; editor: Editor_ID, Name, Age; journal_committee: Editor_ID, Journal_ID, Work_Type | Show the names and ages of editors and the theme of journals for which they serve on committees, in ascending alphabetical order of theme.", "sql": "SELECT T2.Name ,  T2.age ,  T3.Theme FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID  =  T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID  =  T3.Journal_ID ORDER BY T3.Theme ASC", "example": {"db_id": "journal_committee", "query": "SELECT T2.Name ,  T2.age ,  T3.Theme FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID  =  T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID  =  T3.Journal_ID ORDER BY T3.Theme ASC", "query_toks": ["SELECT", "T2.Name", ",", "T2.age", ",", "T3.Theme", "FROM", "journal_committee", "AS", "T1", "JOIN", "editor", "AS", "T2", "ON", "T1.Editor_ID", "=", "T2.Editor_ID", "JOIN", "journal", "AS", "T3", "ON", "T1.Journal_ID", "=", "T3.Journal_ID", "ORDER", "BY", "T3.Theme", "ASC"], "query_toks_no_value": ["select", "t2", ".", "name", ",", "t2", ".", "age", ",", "t3", ".", "theme", "from", "journal_committee", "as", "t1", "join", "editor", "as", "t2", "on", "t1", ".", "editor_id", "=", "t2", ".", "editor_id", "join", "journal", "as", "t3", "on", "t1", ".", "journal_id", "=", "t3", ".", "journal_id", "order", "by", "t3", ".", "theme", "asc"], "question": "Show the names and ages of editors and the theme of journals for which they serve on committees, in ascending alphabetical order of theme.", "question_toks": ["Show", "the", "names", "and", "ages", "of", "editors", "and", "the", "theme", "of", "journals", "for", "which", "they", "serve", "on", "committees", ",", "in", "ascending", "alphabetical", "order", "of", "theme", "."], "guid": 3941}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the keywords in VLDB conference .", "sql": "SELECT t1.keyword FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t4.pid JOIN conference AS t2 ON t3.cid  =  t2.cid WHERE t2.name  =  \"VLDB\";", "example": {"db_id": "academic", "query": "SELECT t1.keyword FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t4.pid JOIN conference AS t2 ON t3.cid  =  t2.cid WHERE t2.name  =  \"VLDB\";", "query_toks": ["SELECT", "t1.keyword", "FROM", "publication_keyword", "AS", "t4", "JOIN", "keyword", "AS", "t1", "ON", "t4.kid", "=", "t1.kid", "JOIN", "publication", "AS", "t3", "ON", "t3.pid", "=", "t4.pid", "JOIN", "conference", "AS", "t2", "ON", "t3.cid", "=", "t2.cid", "WHERE", "t2.name", "=", "``", "VLDB", "''", ";"], "query_toks_no_value": ["select", "t1", ".", "keyword", "from", "publication_keyword", "as", "t4", "join", "keyword", "as", "t1", "on", "t4", ".", "kid", "=", "t1", ".", "kid", "join", "publication", "as", "t3", "on", "t3", ".", "pid", "=", "t4", ".", "pid", "join", "conference", "as", "t2", "on", "t3", ".", "cid", "=", "t2", ".", "cid", "where", "t2", ".", "name", "=", "value"], "question": "return me the keywords in VLDB conference .", "question_toks": ["return", "me", "the", "keywords", "in", "VLDB", "conference", "."], "guid": 3942}}
{"text": "workshop: Workshop_ID, Date, Venue, Name; submission: Submission_ID, Scores, Author, College; Acceptance: Submission_ID, Workshop_ID, Result | Show each author and the number of workshops they submitted to.", "sql": "SELECT T2.Author ,  COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID GROUP BY T2.Author", "example": {"db_id": "workshop_paper", "query": "SELECT T2.Author ,  COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID GROUP BY T2.Author", "query_toks": ["SELECT", "T2.Author", ",", "COUNT", "(", "DISTINCT", "T1.workshop_id", ")", "FROM", "acceptance", "AS", "T1", "JOIN", "submission", "AS", "T2", "ON", "T1.Submission_ID", "=", "T2.Submission_ID", "GROUP", "BY", "T2.Author"], "query_toks_no_value": ["select", "t2", ".", "author", ",", "count", "(", "distinct", "t1", ".", "workshop_id", ")", "from", "acceptance", "as", "t1", "join", "submission", "as", "t2", "on", "t1", ".", "submission_id", "=", "t2", ".", "submission_id", "group", "by", "t2", ".", "author"], "question": "Show each author and the number of workshops they submitted to.", "question_toks": ["Show", "each", "author", "and", "the", "number", "of", "workshops", "they", "submitted", "to", "."], "guid": 3943}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | Papers written by Liwen Xiong in 2015", "sql": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Liwen Xiong\" AND t3.year  =  2015;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Liwen Xiong\" AND t3.year  =  2015;", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "writes", "AS", "t2", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "JOIN", "paper", "AS", "t3", "ON", "t2.paperid", "=", "t3.paperid", "WHERE", "t1.authorname", "=", "``", "Liwen", "Xiong", "''", "AND", "t3.year", "=", "2015", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "writes", "as", "t2", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "join", "paper", "as", "t3", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "where", "t1", ".", "authorname", "=", "value", "and", "t3", ".", "year", "=", "value"], "question": "Papers written by Liwen Xiong in 2015", "question_toks": ["Papers", "written", "by", "Liwen", "Xiong", "in", "2015"], "guid": 3944}}
{"text": "book_club: book_club_id, Year, Author_or_Editor, Book_Title, Publisher, Category, Result; movie: movie_id, Title, Year, Director, Budget_million, Gross_worldwide; culture_company: Company_name, Type, Incorporated_in, Group_Equity_Shareholding, book_club_id, movie_id | List categories that have at least two books after year 1989.", "sql": "SELECT category FROM book_club WHERE YEAR  >  1989 GROUP BY category HAVING count(*)  >=  2", "example": {"db_id": "culture_company", "query": "SELECT category FROM book_club WHERE YEAR  >  1989 GROUP BY category HAVING count(*)  >=  2", "query_toks": ["SELECT", "category", "FROM", "book_club", "WHERE", "YEAR", ">", "1989", "GROUP", "BY", "category", "HAVING", "count", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "category", "from", "book_club", "where", "year", ">", "value", "group", "by", "category", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "List categories that have at least two books after year 1989.", "question_toks": ["List", "categories", "that", "have", "at", "least", "two", "books", "after", "year", "1989", "."], "guid": 3945}}
{"text": "Inst: instID, name, country; Authors: authID, lname, fname; Papers: paperID, title; Authorship: authID, instID, paperID, authOrder | Which authors have first name \"Amal\"? List their last names.", "sql": "SELECT lname FROM authors WHERE fname  =  \"Amal\"", "example": {"db_id": "icfp_1", "query": "SELECT lname FROM authors WHERE fname  =  \"Amal\"", "query_toks": ["SELECT", "lname", "FROM", "authors", "WHERE", "fname", "=", "``", "Amal", "''"], "query_toks_no_value": ["select", "lname", "from", "authors", "where", "fname", "=", "value"], "question": "Which authors have first name \"Amal\"? List their last names.", "question_toks": ["Which", "authors", "have", "first", "name", "``", "Amal", "''", "?", "List", "their", "last", "names", "."], "guid": 3946}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | Has mirella lapata written any papers in 2016 ?", "sql": "SELECT DISTINCT COUNT ( t3.paperid )  ,  t2.authorid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"mirella lapata\" AND t3.year  =  2016 GROUP BY t2.authorid;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( t3.paperid )  ,  t2.authorid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"mirella lapata\" AND t3.year  =  2016 GROUP BY t2.authorid;", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "t3.paperid", ")", ",", "t2.authorid", "FROM", "writes", "AS", "t2", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "JOIN", "paper", "AS", "t3", "ON", "t2.paperid", "=", "t3.paperid", "WHERE", "t1.authorname", "=", "``", "mirella", "lapata", "''", "AND", "t3.year", "=", "2016", "GROUP", "BY", "t2.authorid", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "t3", ".", "paperid", ")", ",", "t2", ".", "authorid", "from", "writes", "as", "t2", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "join", "paper", "as", "t3", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "where", "t1", ".", "authorname", "=", "value", "and", "t3", ".", "year", "=", "value", "group", "by", "t2", ".", "authorid"], "question": "Has mirella lapata written any papers in 2016 ?", "question_toks": ["Has", "mirella", "lapata", "written", "any", "papers", "in", "2016", "?"], "guid": 3947}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the paper in VLDB conference with more than 200 citations .", "sql": "SELECT t2.title FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\" AND t2.citation_num  >  200;", "example": {"db_id": "academic", "query": "SELECT t2.title FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\" AND t2.citation_num  >  200;", "query_toks": ["SELECT", "t2.title", "FROM", "publication", "AS", "t2", "JOIN", "conference", "AS", "t1", "ON", "t2.cid", "=", "t1.cid", "WHERE", "t1.name", "=", "``", "VLDB", "''", "AND", "t2.citation_num", ">", "200", ";"], "query_toks_no_value": ["select", "t2", ".", "title", "from", "publication", "as", "t2", "join", "conference", "as", "t1", "on", "t2", ".", "cid", "=", "t1", ".", "cid", "where", "t1", ".", "name", "=", "value", "and", "t2", ".", "citation_num", ">", "value"], "question": "return me the paper in VLDB conference with more than 200 citations .", "question_toks": ["return", "me", "the", "paper", "in", "VLDB", "conference", "with", "more", "than", "200", "citations", "."], "guid": 3948}}
{"text": "book_club: book_club_id, Year, Author_or_Editor, Book_Title, Publisher, Category, Result; movie: movie_id, Title, Year, Director, Budget_million, Gross_worldwide; culture_company: Company_name, Type, Incorporated_in, Group_Equity_Shareholding, book_club_id, movie_id | Show all movie titles, years, and directors, ordered by budget.", "sql": "SELECT title ,  YEAR ,  director FROM movie ORDER BY budget_million", "example": {"db_id": "culture_company", "query": "SELECT title ,  YEAR ,  director FROM movie ORDER BY budget_million", "query_toks": ["SELECT", "title", ",", "YEAR", ",", "director", "FROM", "movie", "ORDER", "BY", "budget_million"], "query_toks_no_value": ["select", "title", ",", "year", ",", "director", "from", "movie", "order", "by", "budget_million"], "question": "Show all movie titles, years, and directors, ordered by budget.", "question_toks": ["Show", "all", "movie", "titles", ",", "years", ",", "and", "directors", ",", "ordered", "by", "budget", "."], "guid": 3949}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the total citations of the papers containing keyword \" Natural Language \"", "sql": "SELECT SUM ( t3.citation_num ) FROM publication_keyword AS t2 JOIN keyword AS t1 ON t2.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t2.pid WHERE t1.keyword  =  \"Natural Language\";", "example": {"db_id": "academic", "query": "SELECT SUM ( t3.citation_num ) FROM publication_keyword AS t2 JOIN keyword AS t1 ON t2.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t2.pid WHERE t1.keyword  =  \"Natural Language\";", "query_toks": ["SELECT", "SUM", "(", "t3.citation_num", ")", "FROM", "publication_keyword", "AS", "t2", "JOIN", "keyword", "AS", "t1", "ON", "t2.kid", "=", "t1.kid", "JOIN", "publication", "AS", "t3", "ON", "t3.pid", "=", "t2.pid", "WHERE", "t1.keyword", "=", "``", "Natural", "Language", "''", ";"], "query_toks_no_value": ["select", "sum", "(", "t3", ".", "citation_num", ")", "from", "publication_keyword", "as", "t2", "join", "keyword", "as", "t1", "on", "t2", ".", "kid", "=", "t1", ".", "kid", "join", "publication", "as", "t3", "on", "t3", ".", "pid", "=", "t2", ".", "pid", "where", "t1", ".", "keyword", "=", "value"], "question": "return me the total citations of the papers containing keyword \" Natural Language \"", "question_toks": ["return", "me", "the", "total", "citations", "of", "the", "papers", "containing", "keyword", "``", "Natural", "Language", "``"], "guid": 3950}}
{"text": "Inst: instID, name, country; Authors: authID, lname, fname; Papers: paperID, title; Authorship: authID, instID, paperID, authOrder | What are the last names of the author of the paper titled \"Binders Unbound\"?", "sql": "SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title  =  \"Binders Unbound\"", "example": {"db_id": "icfp_1", "query": "SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title  =  \"Binders Unbound\"", "query_toks": ["SELECT", "t1.lname", "FROM", "authors", "AS", "t1", "JOIN", "authorship", "AS", "t2", "ON", "t1.authid", "=", "t2.authid", "JOIN", "papers", "AS", "t3", "ON", "t2.paperid", "=", "t3.paperid", "WHERE", "t3.title", "=", "``", "Binders", "Unbound", "''"], "query_toks_no_value": ["select", "t1", ".", "lname", "from", "authors", "as", "t1", "join", "authorship", "as", "t2", "on", "t1", ".", "authid", "=", "t2", ".", "authid", "join", "papers", "as", "t3", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "where", "t3", ".", "title", "=", "value"], "question": "What are the last names of the author of the paper titled \"Binders Unbound\"?", "question_toks": ["What", "are", "the", "last", "names", "of", "the", "author", "of", "the", "paper", "titled", "``", "Binders", "Unbound", "''", "?"], "guid": 3951}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | Question Answering publications", "sql": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "WHERE", "t1.keyphrasename", "=", "``", "Question", "Answering", "''", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "where", "t1", ".", "keyphrasename", "=", "value"], "question": "Question Answering publications", "question_toks": ["Question", "Answering", "publications"], "guid": 3952}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the area of the VLDB conference .", "sql": "SELECT t2.name FROM domain_conference AS t3 JOIN conference AS t1 ON t3.cid  =  t1.cid JOIN DOMAIN AS t2 ON t2.did  =  t3.did WHERE t1.name  =  \"VLDB\";", "example": {"db_id": "academic", "query": "SELECT t2.name FROM domain_conference AS t3 JOIN conference AS t1 ON t3.cid  =  t1.cid JOIN DOMAIN AS t2 ON t2.did  =  t3.did WHERE t1.name  =  \"VLDB\";", "query_toks": ["SELECT", "t2.name", "FROM", "domain_conference", "AS", "t3", "JOIN", "conference", "AS", "t1", "ON", "t3.cid", "=", "t1.cid", "JOIN", "DOMAIN", "AS", "t2", "ON", "t2.did", "=", "t3.did", "WHERE", "t1.name", "=", "``", "VLDB", "''", ";"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "domain_conference", "as", "t3", "join", "conference", "as", "t1", "on", "t3", ".", "cid", "=", "t1", ".", "cid", "join", "domain", "as", "t2", "on", "t2", ".", "did", "=", "t3", ".", "did", "where", "t1", ".", "name", "=", "value"], "question": "return me the area of the VLDB conference .", "question_toks": ["return", "me", "the", "area", "of", "the", "VLDB", "conference", "."], "guid": 3953}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | papers by sharon goldwater ?", "sql": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";", "query_toks": ["SELECT", "DISTINCT", "t2.paperid", "FROM", "writes", "AS", "t2", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "WHERE", "t1.authorname", "=", "``", "sharon", "goldwater", "''", ";"], "query_toks_no_value": ["select", "distinct", "t2", ".", "paperid", "from", "writes", "as", "t2", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "where", "t1", ".", "authorname", "=", "value"], "question": "papers by sharon goldwater ?", "question_toks": ["papers", "by", "sharon", "goldwater", "?"], "guid": 3954}}
{"text": "workshop: Workshop_ID, Date, Venue, Name; submission: Submission_ID, Scores, Author, College; Acceptance: Submission_ID, Workshop_ID, Result | Which colleges have both authors with submission score above 90 and authors with submission score below 80?", "sql": "SELECT College FROM submission WHERE Scores  >  90 INTERSECT SELECT College FROM submission WHERE Scores  <  80", "example": {"db_id": "workshop_paper", "query": "SELECT College FROM submission WHERE Scores  >  90 INTERSECT SELECT College FROM submission WHERE Scores  <  80", "query_toks": ["SELECT", "College", "FROM", "submission", "WHERE", "Scores", ">", "90", "INTERSECT", "SELECT", "College", "FROM", "submission", "WHERE", "Scores", "<", "80"], "query_toks_no_value": ["select", "college", "from", "submission", "where", "scores", ">", "value", "intersect", "select", "college", "from", "submission", "where", "scores", "<", "value"], "question": "Which colleges have both authors with submission score above 90 and authors with submission score below 80?", "question_toks": ["Which", "colleges", "have", "both", "authors", "with", "submission", "score", "above", "90", "and", "authors", "with", "submission", "score", "below", "80", "?"], "guid": 3955}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | Who are Noah A Smith 's co-authors", "sql": "SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Noah A Smith\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Noah A Smith\";", "query_toks": ["SELECT", "DISTINCT", "t1.authorid", "FROM", "writes", "AS", "t3", "JOIN", "author", "AS", "t2", "ON", "t3.authorid", "=", "t2.authorid", "JOIN", "writes", "AS", "t4", "ON", "t4.paperid", "=", "t3.paperid", "JOIN", "author", "AS", "t1", "ON", "t4.authorid", "=", "t1.authorid", "WHERE", "t2.authorname", "=", "``", "Noah", "A", "Smith", "''", ";"], "query_toks_no_value": ["select", "distinct", "t1", ".", "authorid", "from", "writes", "as", "t3", "join", "author", "as", "t2", "on", "t3", ".", "authorid", "=", "t2", ".", "authorid", "join", "writes", "as", "t4", "on", "t4", ".", "paperid", "=", "t3", ".", "paperid", "join", "author", "as", "t1", "on", "t4", ".", "authorid", "=", "t1", ".", "authorid", "where", "t2", ".", "authorname", "=", "value"], "question": "Who are Noah A Smith 's co-authors", "question_toks": ["Who", "are", "Noah", "A", "Smith", "'s", "co-authors"], "guid": 3956}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the papers by \" H. V. Jagadish \" on PVLDB after 2000 .", "sql": "SELECT t4.title FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\" AND t2.name  =  \"PVLDB\" AND t4.year  >  2000;", "example": {"db_id": "academic", "query": "SELECT t4.title FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\" AND t2.name  =  \"PVLDB\" AND t4.year  >  2000;", "query_toks": ["SELECT", "t4.title", "FROM", "publication", "AS", "t4", "JOIN", "journal", "AS", "t2", "ON", "t4.jid", "=", "t2.jid", "JOIN", "writes", "AS", "t3", "ON", "t3.pid", "=", "t4.pid", "JOIN", "author", "AS", "t1", "ON", "t3.aid", "=", "t1.aid", "WHERE", "t1.name", "=", "``", "H.", "V.", "Jagadish", "''", "AND", "t2.name", "=", "``", "PVLDB", "''", "AND", "t4.year", ">", "2000", ";"], "query_toks_no_value": ["select", "t4", ".", "title", "from", "publication", "as", "t4", "join", "journal", "as", "t2", "on", "t4", ".", "jid", "=", "t2", ".", "jid", "join", "writes", "as", "t3", "on", "t3", ".", "pid", "=", "t4", ".", "pid", "join", "author", "as", "t1", "on", "t3", ".", "aid", "=", "t1", ".", "aid", "where", "t1", ".", "name", "=", "value", "and", "t2", ".", "name", "=", "value", "and", "t4", ".", "year", ">", "value"], "question": "return me the papers by \" H. V. Jagadish \" on PVLDB after 2000 .", "question_toks": ["return", "me", "the", "papers", "by", "``", "H.", "V.", "Jagadish", "``", "on", "PVLDB", "after", "2000", "."], "guid": 3957}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the papers on PVLDB .", "sql": "SELECT t2.title FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\";", "example": {"db_id": "academic", "query": "SELECT t2.title FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\";", "query_toks": ["SELECT", "t2.title", "FROM", "publication", "AS", "t2", "JOIN", "journal", "AS", "t1", "ON", "t2.jid", "=", "t1.jid", "WHERE", "t1.name", "=", "``", "PVLDB", "''", ";"], "query_toks_no_value": ["select", "t2", ".", "title", "from", "publication", "as", "t2", "join", "journal", "as", "t1", "on", "t2", ".", "jid", "=", "t1", ".", "jid", "where", "t1", ".", "name", "=", "value"], "question": "return me the papers on PVLDB .", "question_toks": ["return", "me", "the", "papers", "on", "PVLDB", "."], "guid": 3958}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | When was Michael Stonebraker GIS Database published ?", "sql": "SELECT DISTINCT t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"Michael Stonebraker\" AND t5.keyphrasename  =  \"GIS Database\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"Michael Stonebraker\" AND t5.keyphrasename  =  \"GIS Database\";", "query_toks": ["SELECT", "DISTINCT", "t3.year", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t5", "ON", "t2.keyphraseid", "=", "t5.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "JOIN", "writes", "AS", "t4", "ON", "t4.paperid", "=", "t3.paperid", "JOIN", "author", "AS", "t1", "ON", "t4.authorid", "=", "t1.authorid", "WHERE", "t1.authorname", "=", "``", "Michael", "Stonebraker", "''", "AND", "t5.keyphrasename", "=", "``", "GIS", "Database", "''", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "year", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t5", "on", "t2", ".", "keyphraseid", "=", "t5", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "join", "writes", "as", "t4", "on", "t4", ".", "paperid", "=", "t3", ".", "paperid", "join", "author", "as", "t1", "on", "t4", ".", "authorid", "=", "t1", ".", "authorid", "where", "t1", ".", "authorname", "=", "value", "and", "t5", ".", "keyphrasename", "=", "value"], "question": "When was Michael Stonebraker GIS Database published ?", "question_toks": ["When", "was", "Michael", "Stonebraker", "GIS", "Database", "published", "?"], "guid": 3959}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the papers in VLDB conference containing keyword \" Information Retrieval \" .", "sql": "SELECT t4.title FROM publication_keyword AS t3 JOIN keyword AS t1 ON t3.kid  =  t1.kid JOIN publication AS t4 ON t4.pid  =  t3.pid JOIN conference AS t2 ON t4.cid  =  t2.cid WHERE t2.name  =  \"VLDB\" AND t1.keyword  =  \"Information Retrieval\";", "example": {"db_id": "academic", "query": "SELECT t4.title FROM publication_keyword AS t3 JOIN keyword AS t1 ON t3.kid  =  t1.kid JOIN publication AS t4 ON t4.pid  =  t3.pid JOIN conference AS t2 ON t4.cid  =  t2.cid WHERE t2.name  =  \"VLDB\" AND t1.keyword  =  \"Information Retrieval\";", "query_toks": ["SELECT", "t4.title", "FROM", "publication_keyword", "AS", "t3", "JOIN", "keyword", "AS", "t1", "ON", "t3.kid", "=", "t1.kid", "JOIN", "publication", "AS", "t4", "ON", "t4.pid", "=", "t3.pid", "JOIN", "conference", "AS", "t2", "ON", "t4.cid", "=", "t2.cid", "WHERE", "t2.name", "=", "``", "VLDB", "''", "AND", "t1.keyword", "=", "``", "Information", "Retrieval", "''", ";"], "query_toks_no_value": ["select", "t4", ".", "title", "from", "publication_keyword", "as", "t3", "join", "keyword", "as", "t1", "on", "t3", ".", "kid", "=", "t1", ".", "kid", "join", "publication", "as", "t4", "on", "t4", ".", "pid", "=", "t3", ".", "pid", "join", "conference", "as", "t2", "on", "t4", ".", "cid", "=", "t2", ".", "cid", "where", "t2", ".", "name", "=", "value", "and", "t1", ".", "keyword", "=", "value"], "question": "return me the papers in VLDB conference containing keyword \" Information Retrieval \" .", "question_toks": ["return", "me", "the", "papers", "in", "VLDB", "conference", "containing", "keyword", "``", "Information", "Retrieval", "``", "."], "guid": 3960}}
{"text": "item: i_id, title; review: a_id, u_id, i_id, rating, rank; useracct: u_id, name; trust: source_u_id, target_u_id, trust | Find the name of the target user with the lowest trust score.", "sql": "SELECT T1.name FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id  =  T2.target_u_id ORDER BY trust LIMIT 1", "example": {"db_id": "epinions_1", "query": "SELECT T1.name FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id  =  T2.target_u_id ORDER BY trust LIMIT 1", "query_toks": ["SELECT", "T1.name", "FROM", "useracct", "AS", "T1", "JOIN", "trust", "AS", "T2", "ON", "T1.u_id", "=", "T2.target_u_id", "ORDER", "BY", "trust", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "useracct", "as", "t1", "join", "trust", "as", "t2", "on", "t1", ".", "u_id", "=", "t2", ".", "target_u_id", "order", "by", "trust", "limit", "value"], "question": "Find the name of the target user with the lowest trust score.", "question_toks": ["Find", "the", "name", "of", "the", "target", "user", "with", "the", "lowest", "trust", "score", "."], "guid": 3961}}
{"text": "workshop: Workshop_ID, Date, Venue, Name; submission: Submission_ID, Scores, Author, College; Acceptance: Submission_ID, Workshop_ID, Result | What are the authors of submissions and their colleges?", "sql": "SELECT Author ,  College FROM submission", "example": {"db_id": "workshop_paper", "query": "SELECT Author ,  College FROM submission", "query_toks": ["SELECT", "Author", ",", "College", "FROM", "submission"], "query_toks_no_value": ["select", "author", ",", "college", "from", "submission"], "question": "What are the authors of submissions and their colleges?", "question_toks": ["What", "are", "the", "authors", "of", "submissions", "and", "their", "colleges", "?"], "guid": 3962}}
{"text": "Document_Types: document_type_code, document_description; Documents: document_id, document_type_code, grant_id, sent_date, response_received_date, other_details; Grants: grant_id, organisation_id, grant_amount, grant_start_date, grant_end_date, other_details; Organisation_Types: organisation_type, organisation_type_description; Organisations: organisation_id, organisation_type, organisation_details; Project_Outcomes: project_id, outcome_code, outcome_details; Project_Staff: staff_id, project_id, role_code, date_from, date_to, other_details; Projects: project_id, organisation_id, project_details; Research_Outcomes: outcome_code, outcome_description; Research_Staff: staff_id, employer_organisation_id, staff_details | What are the result description of the project whose detail is 'sint'?", "sql": "SELECT T1.outcome_description FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code  =  T2.outcome_code JOIN Projects AS T3 ON T2.project_id  =  T3.project_id WHERE T3.project_details  =  'sint'", "example": {"db_id": "tracking_grants_for_research", "query": "SELECT T1.outcome_description FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code  =  T2.outcome_code JOIN Projects AS T3 ON T2.project_id  =  T3.project_id WHERE T3.project_details  =  'sint'", "query_toks": ["SELECT", "T1.outcome_description", "FROM", "Research_outcomes", "AS", "T1", "JOIN", "Project_outcomes", "AS", "T2", "ON", "T1.outcome_code", "=", "T2.outcome_code", "JOIN", "Projects", "AS", "T3", "ON", "T2.project_id", "=", "T3.project_id", "WHERE", "T3.project_details", "=", "'sint", "'"], "query_toks_no_value": ["select", "t1", ".", "outcome_description", "from", "research_outcomes", "as", "t1", "join", "project_outcomes", "as", "t2", "on", "t1", ".", "outcome_code", "=", "t2", ".", "outcome_code", "join", "projects", "as", "t3", "on", "t2", ".", "project_id", "=", "t3", ".", "project_id", "where", "t3", ".", "project_details", "=", "value"], "question": "What are the result description of the project whose detail is 'sint'?", "question_toks": ["What", "are", "the", "result", "description", "of", "the", "project", "whose", "detail", "is", "'sint", "'", "?"], "guid": 3963}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | How many papers used ImageNet datasets in cvpr ?", "sql": "SELECT DISTINCT COUNT ( t3.paperid ) FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.datasetname  =  \"ImageNet\" AND t4.venuename  =  \"cvpr\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( t3.paperid ) FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.datasetname  =  \"ImageNet\" AND t4.venuename  =  \"cvpr\";", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "t3.paperid", ")", "FROM", "paperdataset", "AS", "t2", "JOIN", "dataset", "AS", "t1", "ON", "t2.datasetid", "=", "t1.datasetid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "JOIN", "venue", "AS", "t4", "ON", "t4.venueid", "=", "t3.venueid", "WHERE", "t1.datasetname", "=", "``", "ImageNet", "''", "AND", "t4.venuename", "=", "``", "cvpr", "''", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "t3", ".", "paperid", ")", "from", "paperdataset", "as", "t2", "join", "dataset", "as", "t1", "on", "t2", ".", "datasetid", "=", "t1", ".", "datasetid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "join", "venue", "as", "t4", "on", "t4", ".", "venueid", "=", "t3", ".", "venueid", "where", "t1", ".", "datasetname", "=", "value", "and", "t4", ".", "venuename", "=", "value"], "question": "How many papers used ImageNet datasets in cvpr ?", "question_toks": ["How", "many", "papers", "used", "ImageNet", "datasets", "in", "cvpr", "?"], "guid": 3964}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the papers written by \" H. V. Jagadish \" and \" Divesh Srivastava \" before 2000 .", "sql": "SELECT t5.title FROM writes AS t3 JOIN author AS t2 ON t3.aid  =  t2.aid JOIN publication AS t5 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t5.pid JOIN author AS t1 ON t4.aid  =  t1.aid WHERE t2.name  =  \"H. V. Jagadish\" AND t1.name  =  \"Divesh Srivastava\" AND t5.year  <  2000;", "example": {"db_id": "academic", "query": "SELECT t5.title FROM writes AS t3 JOIN author AS t2 ON t3.aid  =  t2.aid JOIN publication AS t5 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t5.pid JOIN author AS t1 ON t4.aid  =  t1.aid WHERE t2.name  =  \"H. V. Jagadish\" AND t1.name  =  \"Divesh Srivastava\" AND t5.year  <  2000;", "query_toks": ["SELECT", "t5.title", "FROM", "writes", "AS", "t3", "JOIN", "author", "AS", "t2", "ON", "t3.aid", "=", "t2.aid", "JOIN", "publication", "AS", "t5", "ON", "t3.pid", "=", "t5.pid", "JOIN", "writes", "AS", "t4", "ON", "t4.pid", "=", "t5.pid", "JOIN", "author", "AS", "t1", "ON", "t4.aid", "=", "t1.aid", "WHERE", "t2.name", "=", "``", "H.", "V.", "Jagadish", "''", "AND", "t1.name", "=", "``", "Divesh", "Srivastava", "''", "AND", "t5.year", "<", "2000", ";"], "query_toks_no_value": ["select", "t5", ".", "title", "from", "writes", "as", "t3", "join", "author", "as", "t2", "on", "t3", ".", "aid", "=", "t2", ".", "aid", "join", "publication", "as", "t5", "on", "t3", ".", "pid", "=", "t5", ".", "pid", "join", "writes", "as", "t4", "on", "t4", ".", "pid", "=", "t5", ".", "pid", "join", "author", "as", "t1", "on", "t4", ".", "aid", "=", "t1", ".", "aid", "where", "t2", ".", "name", "=", "value", "and", "t1", ".", "name", "=", "value", "and", "t5", ".", "year", "<", "value"], "question": "return me the papers written by \" H. V. Jagadish \" and \" Divesh Srivastava \" before 2000 .", "question_toks": ["return", "me", "the", "papers", "written", "by", "``", "H.", "V.", "Jagadish", "``", "and", "``", "Divesh", "Srivastava", "``", "before", "2000", "."], "guid": 3965}}
{"text": "Document_Types: document_type_code, document_description; Documents: document_id, document_type_code, grant_id, sent_date, response_received_date, other_details; Grants: grant_id, organisation_id, grant_amount, grant_start_date, grant_end_date, other_details; Organisation_Types: organisation_type, organisation_type_description; Organisations: organisation_id, organisation_type, organisation_details; Project_Outcomes: project_id, outcome_code, outcome_details; Project_Staff: staff_id, project_id, role_code, date_from, date_to, other_details; Projects: project_id, organisation_id, project_details; Research_Outcomes: outcome_code, outcome_description; Research_Staff: staff_id, employer_organisation_id, staff_details | What is the organisation type and id of the organisation which has the most number of research staff?", "sql": "SELECT T1.organisation_type ,  T1.organisation_id FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "tracking_grants_for_research", "query": "SELECT T1.organisation_type ,  T1.organisation_id FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.organisation_type", ",", "T1.organisation_id", "FROM", "Organisations", "AS", "T1", "JOIN", "Research_Staff", "AS", "T2", "ON", "T1.organisation_id", "=", "T2.employer_organisation_id", "GROUP", "BY", "T1.organisation_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "organisation_type", ",", "t1", ".", "organisation_id", "from", "organisations", "as", "t1", "join", "research_staff", "as", "t2", "on", "t1", ".", "organisation_id", "=", "t2", ".", "employer_organisation_id", "group", "by", "t1", ".", "organisation_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the organisation type and id of the organisation which has the most number of research staff?", "question_toks": ["What", "is", "the", "organisation", "type", "and", "id", "of", "the", "organisation", "which", "has", "the", "most", "number", "of", "research", "staff", "?"], "guid": 3966}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | How many citations does Dan Makumbi 's Genetic Identity paper have ?", "sql": "SELECT DISTINCT COUNT ( t5.citingpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t3 ON t2.keyphraseid  =  t3.keyphraseid JOIN writes AS t4 ON t4.paperid  =  t2.paperid JOIN cite AS t5 ON t4.paperid  =  t5.citedpaperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"Dan Makumbi\" AND t3.keyphrasename  =  \"Genetic Identity\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( t5.citingpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t3 ON t2.keyphraseid  =  t3.keyphraseid JOIN writes AS t4 ON t4.paperid  =  t2.paperid JOIN cite AS t5 ON t4.paperid  =  t5.citedpaperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"Dan Makumbi\" AND t3.keyphrasename  =  \"Genetic Identity\";", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "t5.citingpaperid", ")", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t3", "ON", "t2.keyphraseid", "=", "t3.keyphraseid", "JOIN", "writes", "AS", "t4", "ON", "t4.paperid", "=", "t2.paperid", "JOIN", "cite", "AS", "t5", "ON", "t4.paperid", "=", "t5.citedpaperid", "JOIN", "author", "AS", "t1", "ON", "t4.authorid", "=", "t1.authorid", "WHERE", "t1.authorname", "=", "``", "Dan", "Makumbi", "''", "AND", "t3.keyphrasename", "=", "``", "Genetic", "Identity", "''", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "t5", ".", "citingpaperid", ")", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t3", "on", "t2", ".", "keyphraseid", "=", "t3", ".", "keyphraseid", "join", "writes", "as", "t4", "on", "t4", ".", "paperid", "=", "t2", ".", "paperid", "join", "cite", "as", "t5", "on", "t4", ".", "paperid", "=", "t5", ".", "citedpaperid", "join", "author", "as", "t1", "on", "t4", ".", "authorid", "=", "t1", ".", "authorid", "where", "t1", ".", "authorname", "=", "value", "and", "t3", ".", "keyphrasename", "=", "value"], "question": "How many citations does Dan Makumbi 's Genetic Identity paper have ?", "question_toks": ["How", "many", "citations", "does", "Dan", "Makumbi", "'s", "Genetic", "Identity", "paper", "have", "?"], "guid": 3967}}
{"text": "journal: Journal_ID, Date, Theme, Sales; editor: Editor_ID, Name, Age; journal_committee: Editor_ID, Journal_ID, Work_Type | Show the names of editors that are on at least two journal committees.", "sql": "SELECT T1.Name FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID  =  T2.Editor_ID GROUP BY T1.Name HAVING COUNT(*)  >=  2", "example": {"db_id": "journal_committee", "query": "SELECT T1.Name FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID  =  T2.Editor_ID GROUP BY T1.Name HAVING COUNT(*)  >=  2", "query_toks": ["SELECT", "T1.Name", "FROM", "editor", "AS", "T1", "JOIN", "journal_committee", "AS", "T2", "ON", "T1.Editor_ID", "=", "T2.Editor_ID", "GROUP", "BY", "T1.Name", "HAVING", "COUNT", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "editor", "as", "t1", "join", "journal_committee", "as", "t2", "on", "t1", ".", "editor_id", "=", "t2", ".", "editor_id", "group", "by", "t1", ".", "name", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "Show the names of editors that are on at least two journal committees.", "question_toks": ["Show", "the", "names", "of", "editors", "that", "are", "on", "at", "least", "two", "journal", "committees", "."], "guid": 3968}}
{"text": "Inst: instID, name, country; Authors: authID, lname, fname; Papers: paperID, title; Authorship: authID, instID, paperID, authOrder | Who has written a paper that has the word \"Functional\" in its title? Return the first names of the authors.", "sql": "SELECT t1.fname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title LIKE \"%Functional%\"", "example": {"db_id": "icfp_1", "query": "SELECT t1.fname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title LIKE \"%Functional%\"", "query_toks": ["SELECT", "t1.fname", "FROM", "authors", "AS", "t1", "JOIN", "authorship", "AS", "t2", "ON", "t1.authid", "=", "t2.authid", "JOIN", "papers", "AS", "t3", "ON", "t2.paperid", "=", "t3.paperid", "WHERE", "t3.title", "LIKE", "``", "%", "Functional", "%", "''"], "query_toks_no_value": ["select", "t1", ".", "fname", "from", "authors", "as", "t1", "join", "authorship", "as", "t2", "on", "t1", ".", "authid", "=", "t2", ".", "authid", "join", "papers", "as", "t3", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "where", "t3", ".", "title", "like", "value"], "question": "Who has written a paper that has the word \"Functional\" in its title? Return the first names of the authors.", "question_toks": ["Who", "has", "written", "a", "paper", "that", "has", "the", "word", "``", "Functional", "''", "in", "its", "title", "?", "Return", "the", "first", "names", "of", "the", "authors", "."], "guid": 3969}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | authors working on ImageNet", "sql": "SELECT DISTINCT t2.paperid FROM paperdataset AS t3 JOIN dataset AS t1 ON t3.datasetid  =  t1.datasetid JOIN paper AS t4 ON t4.paperid  =  t3.paperid JOIN writes AS t2 ON t2.paperid  =  t4.paperid WHERE t1.datasetname  =  \"ImageNet\" GROUP BY t2.paperid;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t2.paperid FROM paperdataset AS t3 JOIN dataset AS t1 ON t3.datasetid  =  t1.datasetid JOIN paper AS t4 ON t4.paperid  =  t3.paperid JOIN writes AS t2 ON t2.paperid  =  t4.paperid WHERE t1.datasetname  =  \"ImageNet\" GROUP BY t2.paperid;", "query_toks": ["SELECT", "DISTINCT", "t2.paperid", "FROM", "paperdataset", "AS", "t3", "JOIN", "dataset", "AS", "t1", "ON", "t3.datasetid", "=", "t1.datasetid", "JOIN", "paper", "AS", "t4", "ON", "t4.paperid", "=", "t3.paperid", "JOIN", "writes", "AS", "t2", "ON", "t2.paperid", "=", "t4.paperid", "WHERE", "t1.datasetname", "=", "``", "ImageNet", "''", "GROUP", "BY", "t2.paperid", ";"], "query_toks_no_value": ["select", "distinct", "t2", ".", "paperid", "from", "paperdataset", "as", "t3", "join", "dataset", "as", "t1", "on", "t3", ".", "datasetid", "=", "t1", ".", "datasetid", "join", "paper", "as", "t4", "on", "t4", ".", "paperid", "=", "t3", ".", "paperid", "join", "writes", "as", "t2", "on", "t2", ".", "paperid", "=", "t4", ".", "paperid", "where", "t1", ".", "datasetname", "=", "value", "group", "by", "t2", ".", "paperid"], "question": "authors working on ImageNet", "question_toks": ["authors", "working", "on", "ImageNet"], "guid": 3970}}
{"text": "Document_Types: document_type_code, document_description; Documents: document_id, document_type_code, grant_id, sent_date, response_received_date, other_details; Grants: grant_id, organisation_id, grant_amount, grant_start_date, grant_end_date, other_details; Organisation_Types: organisation_type, organisation_type_description; Organisations: organisation_id, organisation_type, organisation_details; Project_Outcomes: project_id, outcome_code, outcome_details; Project_Staff: staff_id, project_id, role_code, date_from, date_to, other_details; Projects: project_id, organisation_id, project_details; Research_Outcomes: outcome_code, outcome_description; Research_Staff: staff_id, employer_organisation_id, staff_details | Which organisation type hires most research staff?", "sql": "SELECT T1.organisation_type FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_type ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "tracking_grants_for_research", "query": "SELECT T1.organisation_type FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_type ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.organisation_type", "FROM", "Organisations", "AS", "T1", "JOIN", "Research_Staff", "AS", "T2", "ON", "T1.organisation_id", "=", "T2.employer_organisation_id", "GROUP", "BY", "T1.organisation_type", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "organisation_type", "from", "organisations", "as", "t1", "join", "research_staff", "as", "t2", "on", "t1", ".", "organisation_id", "=", "t2", ".", "employer_organisation_id", "group", "by", "t1", ".", "organisation_type", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which organisation type hires most research staff?", "question_toks": ["Which", "organisation", "type", "hires", "most", "research", "staff", "?"], "guid": 3971}}
{"text": "item: i_id, title; review: a_id, u_id, i_id, rating, rank; useracct: u_id, name; trust: source_u_id, target_u_id, trust | Find the number of items without any review.", "sql": "SELECT count(*) FROM item WHERE i_id NOT IN (SELECT i_id FROM review)", "example": {"db_id": "epinions_1", "query": "SELECT count(*) FROM item WHERE i_id NOT IN (SELECT i_id FROM review)", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "item", "WHERE", "i_id", "NOT", "IN", "(", "SELECT", "i_id", "FROM", "review", ")"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "item", "where", "i_id", "not", "in", "(", "select", "i_id", "from", "review", ")"], "question": "Find the number of items without any review.", "question_toks": ["Find", "the", "number", "of", "items", "without", "any", "review", "."], "guid": 3972}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the authors who have more than 10 papers in PVLDB .", "sql": "SELECT t1.name FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t2.name  =  \"PVLDB\" GROUP BY t1.name HAVING COUNT ( DISTINCT t4.title )  >  10;", "example": {"db_id": "academic", "query": "SELECT t1.name FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t2.name  =  \"PVLDB\" GROUP BY t1.name HAVING COUNT ( DISTINCT t4.title )  >  10;", "query_toks": ["SELECT", "t1.name", "FROM", "publication", "AS", "t4", "JOIN", "journal", "AS", "t2", "ON", "t4.jid", "=", "t2.jid", "JOIN", "writes", "AS", "t3", "ON", "t3.pid", "=", "t4.pid", "JOIN", "author", "AS", "t1", "ON", "t3.aid", "=", "t1.aid", "WHERE", "t2.name", "=", "``", "PVLDB", "''", "GROUP", "BY", "t1.name", "HAVING", "COUNT", "(", "DISTINCT", "t4.title", ")", ">", "10", ";"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "publication", "as", "t4", "join", "journal", "as", "t2", "on", "t4", ".", "jid", "=", "t2", ".", "jid", "join", "writes", "as", "t3", "on", "t3", ".", "pid", "=", "t4", ".", "pid", "join", "author", "as", "t1", "on", "t3", ".", "aid", "=", "t1", ".", "aid", "where", "t2", ".", "name", "=", "value", "group", "by", "t1", ".", "name", "having", "count", "(", "distinct", "t4", ".", "title", ")", ">", "value"], "question": "return me the authors who have more than 10 papers in PVLDB .", "question_toks": ["return", "me", "the", "authors", "who", "have", "more", "than", "10", "papers", "in", "PVLDB", "."], "guid": 3973}}
{"text": "Inst: instID, name, country; Authors: authID, lname, fname; Papers: paperID, title; Authorship: authID, instID, paperID, authOrder | How many papers are written by authors from the institution \"University of Pennsylvania\"?", "sql": "SELECT count(DISTINCT t1.title) FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"University of Pennsylvania\"", "example": {"db_id": "icfp_1", "query": "SELECT count(DISTINCT t1.title) FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"University of Pennsylvania\"", "query_toks": ["SELECT", "count", "(", "DISTINCT", "t1.title", ")", "FROM", "papers", "AS", "t1", "JOIN", "authorship", "AS", "t2", "ON", "t1.paperid", "=", "t2.paperid", "JOIN", "inst", "AS", "t3", "ON", "t2.instid", "=", "t3.instid", "WHERE", "t3.name", "=", "``", "University", "of", "Pennsylvania", "''"], "query_toks_no_value": ["select", "count", "(", "distinct", "t1", ".", "title", ")", "from", "papers", "as", "t1", "join", "authorship", "as", "t2", "on", "t1", ".", "paperid", "=", "t2", ".", "paperid", "join", "inst", "as", "t3", "on", "t2", ".", "instid", "=", "t3", ".", "instid", "where", "t3", ".", "name", "=", "value"], "question": "How many papers are written by authors from the institution \"University of Pennsylvania\"?", "question_toks": ["How", "many", "papers", "are", "written", "by", "authors", "from", "the", "institution", "``", "University", "of", "Pennsylvania", "''", "?"], "guid": 3974}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | Who has written the most papers at chi ?", "sql": "SELECT DISTINCT COUNT ( DISTINCT t2.paperid )  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  \"chi\" GROUP BY t1.authorid ORDER BY COUNT ( DISTINCT t2.paperid ) DESC;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( DISTINCT t2.paperid )  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  \"chi\" GROUP BY t1.authorid ORDER BY COUNT ( DISTINCT t2.paperid ) DESC;", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "DISTINCT", "t2.paperid", ")", ",", "t1.authorid", "FROM", "venue", "AS", "t3", "JOIN", "paper", "AS", "t2", "ON", "t3.venueid", "=", "t2.venueid", "JOIN", "writes", "AS", "t1", "ON", "t1.paperid", "=", "t2.paperid", "WHERE", "t3.venuename", "=", "``", "chi", "''", "GROUP", "BY", "t1.authorid", "ORDER", "BY", "COUNT", "(", "DISTINCT", "t2.paperid", ")", "DESC", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "distinct", "t2", ".", "paperid", ")", ",", "t1", ".", "authorid", "from", "venue", "as", "t3", "join", "paper", "as", "t2", "on", "t3", ".", "venueid", "=", "t2", ".", "venueid", "join", "writes", "as", "t1", "on", "t1", ".", "paperid", "=", "t2", ".", "paperid", "where", "t3", ".", "venuename", "=", "value", "group", "by", "t1", ".", "authorid", "order", "by", "count", "(", "distinct", "t2", ".", "paperid", ")", "desc"], "question": "Who has written the most papers at chi ?", "question_toks": ["Who", "has", "written", "the", "most", "papers", "at", "chi", "?"], "guid": 3975}}
{"text": "Scientists: SSN, Name; Projects: Code, Name, Hours; AssignedTo: Scientist, Project | What is the total number of hours for all projects?", "sql": "SELECT sum(hours) FROM projects", "example": {"db_id": "scientist_1", "query": "SELECT sum(hours) FROM projects", "query_toks": ["SELECT", "sum", "(", "hours", ")", "FROM", "projects"], "query_toks_no_value": ["select", "sum", "(", "hours", ")", "from", "projects"], "question": "What is the total number of hours for all projects?", "question_toks": ["What", "is", "the", "total", "number", "of", "hours", "for", "all", "projects", "?"], "guid": 3976}}
{"text": "publication: Publication_ID, Book_ID, Publisher, Publication_Date, Price; book: Book_ID, Title, Issues, Writer | List the titles of books that are not published.", "sql": "SELECT Title FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM publication)", "example": {"db_id": "book_2", "query": "SELECT Title FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM publication)", "query_toks": ["SELECT", "Title", "FROM", "book", "WHERE", "Book_ID", "NOT", "IN", "(", "SELECT", "Book_ID", "FROM", "publication", ")"], "query_toks_no_value": ["select", "title", "from", "book", "where", "book_id", "not", "in", "(", "select", "book_id", "from", "publication", ")"], "question": "List the titles of books that are not published.", "question_toks": ["List", "the", "titles", "of", "books", "that", "are", "not", "published", "."], "guid": 3977}}
{"text": "publication: Publication_ID, Book_ID, Publisher, Publication_Date, Price; book: Book_ID, Title, Issues, Writer | List the writers of the books in ascending alphabetical order.", "sql": "SELECT Writer FROM book ORDER BY Writer ASC", "example": {"db_id": "book_2", "query": "SELECT Writer FROM book ORDER BY Writer ASC", "query_toks": ["SELECT", "Writer", "FROM", "book", "ORDER", "BY", "Writer", "ASC"], "query_toks_no_value": ["select", "writer", "from", "book", "order", "by", "writer", "asc"], "question": "List the writers of the books in ascending alphabetical order.", "question_toks": ["List", "the", "writers", "of", "the", "books", "in", "ascending", "alphabetical", "order", "."], "guid": 3978}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | What is the name of Ranjit Jhala 's Liquid Haskell paper ?", "sql": "SELECT DISTINCT t3.title FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN writes AS t4 ON t4.paperid  =  t2.paperid JOIN paper AS t3 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname LIKE \"Ranjit Jhala\" AND t5.keyphrasename  =  \"Liquid Haskell\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.title FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN writes AS t4 ON t4.paperid  =  t2.paperid JOIN paper AS t3 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname LIKE \"Ranjit Jhala\" AND t5.keyphrasename  =  \"Liquid Haskell\";", "query_toks": ["SELECT", "DISTINCT", "t3.title", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t5", "ON", "t2.keyphraseid", "=", "t5.keyphraseid", "JOIN", "writes", "AS", "t4", "ON", "t4.paperid", "=", "t2.paperid", "JOIN", "paper", "AS", "t3", "ON", "t4.paperid", "=", "t3.paperid", "JOIN", "author", "AS", "t1", "ON", "t4.authorid", "=", "t1.authorid", "WHERE", "t1.authorname", "LIKE", "``", "Ranjit", "Jhala", "''", "AND", "t5.keyphrasename", "=", "``", "Liquid", "Haskell", "''", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "title", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t5", "on", "t2", ".", "keyphraseid", "=", "t5", ".", "keyphraseid", "join", "writes", "as", "t4", "on", "t4", ".", "paperid", "=", "t2", ".", "paperid", "join", "paper", "as", "t3", "on", "t4", ".", "paperid", "=", "t3", ".", "paperid", "join", "author", "as", "t1", "on", "t4", ".", "authorid", "=", "t1", ".", "authorid", "where", "t1", ".", "authorname", "like", "value", "and", "t5", ".", "keyphrasename", "=", "value"], "question": "What is the name of Ranjit Jhala 's Liquid Haskell paper ?", "question_toks": ["What", "is", "the", "name", "of", "Ranjit", "Jhala", "'s", "Liquid", "Haskell", "paper", "?"], "guid": 3979}}
{"text": "Inst: instID, name, country; Authors: authID, lname, fname; Papers: paperID, title; Authorship: authID, instID, paperID, authOrder | Which authors belong to the institution \"Google\"? Show the first names and last names.", "sql": "SELECT DISTINCT t1.fname ,  t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Google\"", "example": {"db_id": "icfp_1", "query": "SELECT DISTINCT t1.fname ,  t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Google\"", "query_toks": ["SELECT", "DISTINCT", "t1.fname", ",", "t1.lname", "FROM", "authors", "AS", "t1", "JOIN", "authorship", "AS", "t2", "ON", "t1.authid", "=", "t2.authid", "JOIN", "inst", "AS", "t3", "ON", "t2.instid", "=", "t3.instid", "WHERE", "t3.name", "=", "``", "Google", "''"], "query_toks_no_value": ["select", "distinct", "t1", ".", "fname", ",", "t1", ".", "lname", "from", "authors", "as", "t1", "join", "authorship", "as", "t2", "on", "t1", ".", "authid", "=", "t2", ".", "authid", "join", "inst", "as", "t3", "on", "t2", ".", "instid", "=", "t3", ".", "instid", "where", "t3", ".", "name", "=", "value"], "question": "Which authors belong to the institution \"Google\"? Show the first names and last names.", "question_toks": ["Which", "authors", "belong", "to", "the", "institution", "``", "Google", "''", "?", "Show", "the", "first", "names", "and", "last", "names", "."], "guid": 3980}}
{"text": "item: i_id, title; review: a_id, u_id, i_id, rating, rank; useracct: u_id, name; trust: source_u_id, target_u_id, trust | How many different items were reviewed by some users?", "sql": "SELECT count(DISTINCT i_id) FROM review", "example": {"db_id": "epinions_1", "query": "SELECT count(DISTINCT i_id) FROM review", "query_toks": ["SELECT", "count", "(", "DISTINCT", "i_id", ")", "FROM", "review"], "query_toks_no_value": ["select", "count", "(", "distinct", "i_id", ")", "from", "review"], "question": "How many different items were reviewed by some users?", "question_toks": ["How", "many", "different", "items", "were", "reviewed", "by", "some", "users", "?"], "guid": 3981}}
{"text": "book_club: book_club_id, Year, Author_or_Editor, Book_Title, Publisher, Category, Result; movie: movie_id, Title, Year, Director, Budget_million, Gross_worldwide; culture_company: Company_name, Type, Incorporated_in, Group_Equity_Shareholding, book_club_id, movie_id | What are the titles of movies and books corresponding to companies incorporated in China?", "sql": "SELECT T1.title ,  T3.book_title FROM movie AS T1 JOIN culture_company AS T2 ON T1.movie_id  =  T2.movie_id JOIN book_club AS T3 ON T3.book_club_id  =  T2.book_club_id WHERE T2.incorporated_in  =  'China'", "example": {"db_id": "culture_company", "query": "SELECT T1.title ,  T3.book_title FROM movie AS T1 JOIN culture_company AS T2 ON T1.movie_id  =  T2.movie_id JOIN book_club AS T3 ON T3.book_club_id  =  T2.book_club_id WHERE T2.incorporated_in  =  'China'", "query_toks": ["SELECT", "T1.title", ",", "T3.book_title", "FROM", "movie", "AS", "T1", "JOIN", "culture_company", "AS", "T2", "ON", "T1.movie_id", "=", "T2.movie_id", "JOIN", "book_club", "AS", "T3", "ON", "T3.book_club_id", "=", "T2.book_club_id", "WHERE", "T2.incorporated_in", "=", "'China", "'"], "query_toks_no_value": ["select", "t1", ".", "title", ",", "t3", ".", "book_title", "from", "movie", "as", "t1", "join", "culture_company", "as", "t2", "on", "t1", ".", "movie_id", "=", "t2", ".", "movie_id", "join", "book_club", "as", "t3", "on", "t3", ".", "book_club_id", "=", "t2", ".", "book_club_id", "where", "t2", ".", "incorporated_in", "=", "value"], "question": "What are the titles of movies and books corresponding to companies incorporated in China?", "question_toks": ["What", "are", "the", "titles", "of", "movies", "and", "books", "corresponding", "to", "companies", "incorporated", "in", "China", "?"], "guid": 3982}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | Most cited papers on parsing", "sql": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"parsing\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"parsing\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;", "query_toks": ["SELECT", "DISTINCT", "t4.citedpaperid", ",", "COUNT", "(", "t4.citedpaperid", ")", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "JOIN", "cite", "AS", "t4", "ON", "t3.paperid", "=", "t4.citedpaperid", "WHERE", "t1.keyphrasename", "=", "``", "parsing", "''", "GROUP", "BY", "t4.citedpaperid", "ORDER", "BY", "COUNT", "(", "t4.citedpaperid", ")", "DESC", ";"], "query_toks_no_value": ["select", "distinct", "t4", ".", "citedpaperid", ",", "count", "(", "t4", ".", "citedpaperid", ")", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "join", "cite", "as", "t4", "on", "t3", ".", "paperid", "=", "t4", ".", "citedpaperid", "where", "t1", ".", "keyphrasename", "=", "value", "group", "by", "t4", ".", "citedpaperid", "order", "by", "count", "(", "t4", ".", "citedpaperid", ")", "desc"], "question": "Most cited papers on parsing", "question_toks": ["Most", "cited", "papers", "on", "parsing"], "guid": 3983}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the number of authors who have papers in PVLDB .", "sql": "SELECT COUNT ( DISTINCT t1.name ) FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t2.name  =  \"PVLDB\";", "example": {"db_id": "academic", "query": "SELECT COUNT ( DISTINCT t1.name ) FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t2.name  =  \"PVLDB\";", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "t1.name", ")", "FROM", "publication", "AS", "t4", "JOIN", "journal", "AS", "t2", "ON", "t4.jid", "=", "t2.jid", "JOIN", "writes", "AS", "t3", "ON", "t3.pid", "=", "t4.pid", "JOIN", "author", "AS", "t1", "ON", "t3.aid", "=", "t1.aid", "WHERE", "t2.name", "=", "``", "PVLDB", "''", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "t1", ".", "name", ")", "from", "publication", "as", "t4", "join", "journal", "as", "t2", "on", "t4", ".", "jid", "=", "t2", ".", "jid", "join", "writes", "as", "t3", "on", "t3", ".", "pid", "=", "t4", ".", "pid", "join", "author", "as", "t1", "on", "t3", ".", "aid", "=", "t1", ".", "aid", "where", "t2", ".", "name", "=", "value"], "question": "return me the number of authors who have papers in PVLDB .", "question_toks": ["return", "me", "the", "number", "of", "authors", "who", "have", "papers", "in", "PVLDB", "."], "guid": 3984}}
{"text": "Inst: instID, name, country; Authors: authID, lname, fname; Papers: paperID, title; Authorship: authID, instID, paperID, authOrder | Find all the papers published by \"Aaron Turon\".", "sql": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  \"Aaron\" AND t1.lname  =  \"Turon\"", "example": {"db_id": "icfp_1", "query": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  \"Aaron\" AND t1.lname  =  \"Turon\"", "query_toks": ["SELECT", "t3.title", "FROM", "authors", "AS", "t1", "JOIN", "authorship", "AS", "t2", "ON", "t1.authid", "=", "t2.authid", "JOIN", "papers", "AS", "t3", "ON", "t2.paperid", "=", "t3.paperid", "WHERE", "t1.fname", "=", "``", "Aaron", "''", "AND", "t1.lname", "=", "``", "Turon", "''"], "query_toks_no_value": ["select", "t3", ".", "title", "from", "authors", "as", "t1", "join", "authorship", "as", "t2", "on", "t1", ".", "authid", "=", "t2", ".", "authid", "join", "papers", "as", "t3", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "where", "t1", ".", "fname", "=", "value", "and", "t1", ".", "lname", "=", "value"], "question": "Find all the papers published by \"Aaron Turon\".", "question_toks": ["Find", "all", "the", "papers", "published", "by", "``", "Aaron", "Turon", "''", "."], "guid": 3985}}
{"text": "Inst: instID, name, country; Authors: authID, lname, fname; Papers: paperID, title; Authorship: authID, instID, paperID, authOrder | What are the papers published under the institution \"Indiana University\"?", "sql": "SELECT DISTINCT t1.title FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Indiana University\"", "example": {"db_id": "icfp_1", "query": "SELECT DISTINCT t1.title FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Indiana University\"", "query_toks": ["SELECT", "DISTINCT", "t1.title", "FROM", "papers", "AS", "t1", "JOIN", "authorship", "AS", "t2", "ON", "t1.paperid", "=", "t2.paperid", "JOIN", "inst", "AS", "t3", "ON", "t2.instid", "=", "t3.instid", "WHERE", "t3.name", "=", "``", "Indiana", "University", "''"], "query_toks_no_value": ["select", "distinct", "t1", ".", "title", "from", "papers", "as", "t1", "join", "authorship", "as", "t2", "on", "t1", ".", "paperid", "=", "t2", ".", "paperid", "join", "inst", "as", "t3", "on", "t2", ".", "instid", "=", "t3", ".", "instid", "where", "t3", ".", "name", "=", "value"], "question": "What are the papers published under the institution \"Indiana University\"?", "question_toks": ["What", "are", "the", "papers", "published", "under", "the", "institution", "``", "Indiana", "University", "''", "?"], "guid": 3986}}
{"text": "workshop: Workshop_ID, Date, Venue, Name; submission: Submission_ID, Scores, Author, College; Acceptance: Submission_ID, Workshop_ID, Result | Show different colleges along with the number of authors of submission from each college.", "sql": "SELECT College ,  COUNT(*) FROM submission GROUP BY College", "example": {"db_id": "workshop_paper", "query": "SELECT College ,  COUNT(*) FROM submission GROUP BY College", "query_toks": ["SELECT", "College", ",", "COUNT", "(", "*", ")", "FROM", "submission", "GROUP", "BY", "College"], "query_toks_no_value": ["select", "college", ",", "count", "(", "*", ")", "from", "submission", "group", "by", "college"], "question": "Show different colleges along with the number of authors of submission from each college.", "question_toks": ["Show", "different", "colleges", "along", "with", "the", "number", "of", "authors", "of", "submission", "from", "each", "college", "."], "guid": 3987}}
{"text": "book_club: book_club_id, Year, Author_or_Editor, Book_Title, Publisher, Category, Result; movie: movie_id, Title, Year, Director, Budget_million, Gross_worldwide; culture_company: Company_name, Type, Incorporated_in, Group_Equity_Shareholding, book_club_id, movie_id | Show all distinct publishers for books.", "sql": "SELECT DISTINCT publisher FROM book_club", "example": {"db_id": "culture_company", "query": "SELECT DISTINCT publisher FROM book_club", "query_toks": ["SELECT", "DISTINCT", "publisher", "FROM", "book_club"], "query_toks_no_value": ["select", "distinct", "publisher", "from", "book_club"], "question": "Show all distinct publishers for books.", "question_toks": ["Show", "all", "distinct", "publishers", "for", "books", "."], "guid": 3988}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | who publishes papers about sensor fusion", "sql": "SELECT DISTINCT t1.authorname FROM paperkeyphrase AS t2 JOIN keyphrase AS t4 ON t2.keyphraseid  =  t4.keyphraseid JOIN writes AS t3 ON t3.paperid  =  t2.paperid JOIN author AS t1 ON t3.authorid  =  t1.authorid WHERE t4.keyphrasename LIKE \"sensor fusion\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t1.authorname FROM paperkeyphrase AS t2 JOIN keyphrase AS t4 ON t2.keyphraseid  =  t4.keyphraseid JOIN writes AS t3 ON t3.paperid  =  t2.paperid JOIN author AS t1 ON t3.authorid  =  t1.authorid WHERE t4.keyphrasename LIKE \"sensor fusion\";", "query_toks": ["SELECT", "DISTINCT", "t1.authorname", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t4", "ON", "t2.keyphraseid", "=", "t4.keyphraseid", "JOIN", "writes", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "JOIN", "author", "AS", "t1", "ON", "t3.authorid", "=", "t1.authorid", "WHERE", "t4.keyphrasename", "LIKE", "``", "sensor", "fusion", "''", ";"], "query_toks_no_value": ["select", "distinct", "t1", ".", "authorname", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t4", "on", "t2", ".", "keyphraseid", "=", "t4", ".", "keyphraseid", "join", "writes", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "join", "author", "as", "t1", "on", "t3", ".", "authorid", "=", "t1", ".", "authorid", "where", "t4", ".", "keyphrasename", "like", "value"], "question": "who publishes papers about sensor fusion", "question_toks": ["who", "publishes", "papers", "about", "sensor", "fusion"], "guid": 3989}}
{"text": "journal: Journal_ID, Date, Theme, Sales; editor: Editor_ID, Name, Age; journal_committee: Editor_ID, Journal_ID, Work_Type | Please show the most common age of editors.", "sql": "SELECT Age FROM editor GROUP BY Age ORDER BY COUNT(*) DESC LIMIT 1", "example": {"db_id": "journal_committee", "query": "SELECT Age FROM editor GROUP BY Age ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "Age", "FROM", "editor", "GROUP", "BY", "Age", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "age", "from", "editor", "group", "by", "age", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Please show the most common age of editors.", "question_toks": ["Please", "show", "the", "most", "common", "age", "of", "editors", "."], "guid": 3990}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | who had papers at acl 2016 ?", "sql": "SELECT DISTINCT t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2016 AND t3.venuename  =  \"acl\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2016 AND t3.venuename  =  \"acl\";", "query_toks": ["SELECT", "DISTINCT", "t1.authorid", "FROM", "venue", "AS", "t3", "JOIN", "paper", "AS", "t2", "ON", "t3.venueid", "=", "t2.venueid", "JOIN", "writes", "AS", "t1", "ON", "t1.paperid", "=", "t2.paperid", "WHERE", "t2.year", "=", "2016", "AND", "t3.venuename", "=", "``", "acl", "''", ";"], "query_toks_no_value": ["select", "distinct", "t1", ".", "authorid", "from", "venue", "as", "t3", "join", "paper", "as", "t2", "on", "t3", ".", "venueid", "=", "t2", ".", "venueid", "join", "writes", "as", "t1", "on", "t1", ".", "paperid", "=", "t2", ".", "paperid", "where", "t2", ".", "year", "=", "value", "and", "t3", ".", "venuename", "=", "value"], "question": "who had papers at acl 2016 ?", "question_toks": ["who", "had", "papers", "at", "acl", "2016", "?"], "guid": 3991}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the number of papers after 2000 in \" University of Michigan \" .", "sql": "SELECT COUNT ( DISTINCT t4.title ) FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid JOIN writes AS t3 ON t3.aid  =  t1.aid JOIN publication AS t4 ON t3.pid  =  t4.pid WHERE t2.name  =  \"University of Michigan\" AND t4.year  >  2000;", "example": {"db_id": "academic", "query": "SELECT COUNT ( DISTINCT t4.title ) FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid JOIN writes AS t3 ON t3.aid  =  t1.aid JOIN publication AS t4 ON t3.pid  =  t4.pid WHERE t2.name  =  \"University of Michigan\" AND t4.year  >  2000;", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "t4.title", ")", "FROM", "organization", "AS", "t2", "JOIN", "author", "AS", "t1", "ON", "t2.oid", "=", "t1.oid", "JOIN", "writes", "AS", "t3", "ON", "t3.aid", "=", "t1.aid", "JOIN", "publication", "AS", "t4", "ON", "t3.pid", "=", "t4.pid", "WHERE", "t2.name", "=", "``", "University", "of", "Michigan", "''", "AND", "t4.year", ">", "2000", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "t4", ".", "title", ")", "from", "organization", "as", "t2", "join", "author", "as", "t1", "on", "t2", ".", "oid", "=", "t1", ".", "oid", "join", "writes", "as", "t3", "on", "t3", ".", "aid", "=", "t1", ".", "aid", "join", "publication", "as", "t4", "on", "t3", ".", "pid", "=", "t4", ".", "pid", "where", "t2", ".", "name", "=", "value", "and", "t4", ".", "year", ">", "value"], "question": "return me the number of papers after 2000 in \" University of Michigan \" .", "question_toks": ["return", "me", "the", "number", "of", "papers", "after", "2000", "in", "``", "University", "of", "Michigan", "``", "."], "guid": 3992}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | how many papers has Christopher D. Manning published ?", "sql": "SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christopher D. Manning\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christopher D. Manning\";", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "DISTINCT", "t2.paperid", ")", "FROM", "writes", "AS", "t2", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "WHERE", "t1.authorname", "=", "``", "Christopher", "D.", "Manning", "''", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "distinct", "t2", ".", "paperid", ")", "from", "writes", "as", "t2", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "where", "t1", ".", "authorname", "=", "value"], "question": "how many papers has Christopher D. Manning published ?", "question_toks": ["how", "many", "papers", "has", "Christopher", "D.", "Manning", "published", "?"], "guid": 3993}}
{"text": "workshop: Workshop_ID, Date, Venue, Name; submission: Submission_ID, Scores, Author, College; Acceptance: Submission_ID, Workshop_ID, Result | Sort the each workshop in alphabetical order of the venue. Return the date and venue of each workshop.", "sql": "SELECT Date ,  Venue FROM workshop ORDER BY Venue", "example": {"db_id": "workshop_paper", "query": "SELECT Date ,  Venue FROM workshop ORDER BY Venue", "query_toks": ["SELECT", "Date", ",", "Venue", "FROM", "workshop", "ORDER", "BY", "Venue"], "query_toks_no_value": ["select", "date", ",", "venue", "from", "workshop", "order", "by", "venue"], "question": "Sort the each workshop in alphabetical order of the venue. Return the date and venue of each workshop.", "question_toks": ["Sort", "the", "each", "workshop", "in", "alphabetical", "order", "of", "the", "venue", ".", "Return", "the", "date", "and", "venue", "of", "each", "workshop", "."], "guid": 3994}}
{"text": "Document_Types: document_type_code, document_description; Documents: document_id, document_type_code, grant_id, sent_date, response_received_date, other_details; Grants: grant_id, organisation_id, grant_amount, grant_start_date, grant_end_date, other_details; Organisation_Types: organisation_type, organisation_type_description; Organisations: organisation_id, organisation_type, organisation_details; Project_Outcomes: project_id, outcome_code, outcome_details; Project_Staff: staff_id, project_id, role_code, date_from, date_to, other_details; Projects: project_id, organisation_id, project_details; Research_Outcomes: outcome_code, outcome_description; Research_Staff: staff_id, employer_organisation_id, staff_details | List the project details of the project both producing patent and paper as outcomes.", "sql": "SELECT T1.project_details FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id WHERE T2.outcome_code  =  'Paper' INTERSECT SELECT T1.project_details FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id WHERE T2.outcome_code  =  'Patent'", "example": {"db_id": "tracking_grants_for_research", "query": "SELECT T1.project_details FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id WHERE T2.outcome_code  =  'Paper' INTERSECT SELECT T1.project_details FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id WHERE T2.outcome_code  =  'Patent'", "query_toks": ["SELECT", "T1.project_details", "FROM", "Projects", "AS", "T1", "JOIN", "Project_outcomes", "AS", "T2", "ON", "T1.project_id", "=", "T2.project_id", "WHERE", "T2.outcome_code", "=", "'Paper", "'", "INTERSECT", "SELECT", "T1.project_details", "FROM", "Projects", "AS", "T1", "JOIN", "Project_outcomes", "AS", "T2", "ON", "T1.project_id", "=", "T2.project_id", "WHERE", "T2.outcome_code", "=", "'Patent", "'"], "query_toks_no_value": ["select", "t1", ".", "project_details", "from", "projects", "as", "t1", "join", "project_outcomes", "as", "t2", "on", "t1", ".", "project_id", "=", "t2", ".", "project_id", "where", "t2", ".", "outcome_code", "=", "value", "intersect", "select", "t1", ".", "project_details", "from", "projects", "as", "t1", "join", "project_outcomes", "as", "t2", "on", "t1", ".", "project_id", "=", "t2", ".", "project_id", "where", "t2", ".", "outcome_code", "=", "value"], "question": "List the project details of the project both producing patent and paper as outcomes.", "question_toks": ["List", "the", "project", "details", "of", "the", "project", "both", "producing", "patent", "and", "paper", "as", "outcomes", "."], "guid": 3995}}
{"text": "Document_Types: document_type_code, document_description; Documents: document_id, document_type_code, grant_id, sent_date, response_received_date, other_details; Grants: grant_id, organisation_id, grant_amount, grant_start_date, grant_end_date, other_details; Organisation_Types: organisation_type, organisation_type_description; Organisations: organisation_id, organisation_type, organisation_details; Project_Outcomes: project_id, outcome_code, outcome_details; Project_Staff: staff_id, project_id, role_code, date_from, date_to, other_details; Projects: project_id, organisation_id, project_details; Research_Outcomes: outcome_code, outcome_description; Research_Staff: staff_id, employer_organisation_id, staff_details | For grants that have descriptions of Regular and Initial Applications, what are their start dates?", "sql": "SELECT T1.grant_start_date FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id  =  T2.grant_id JOIN Document_Types AS T3 ON T2.document_type_code  =  T3.document_type_code WHERE T3.document_description  =  'Regular' INTERSECT SELECT T1.grant_start_date FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id  =  T2.grant_id JOIN Document_Types AS T3 ON T2.document_type_code  =  T3.document_type_code WHERE T3.document_description  =  'Initial Application'", "example": {"db_id": "tracking_grants_for_research", "query": "SELECT T1.grant_start_date FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id  =  T2.grant_id JOIN Document_Types AS T3 ON T2.document_type_code  =  T3.document_type_code WHERE T3.document_description  =  'Regular' INTERSECT SELECT T1.grant_start_date FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id  =  T2.grant_id JOIN Document_Types AS T3 ON T2.document_type_code  =  T3.document_type_code WHERE T3.document_description  =  'Initial Application'", "query_toks": ["SELECT", "T1.grant_start_date", "FROM", "Grants", "AS", "T1", "JOIN", "Documents", "AS", "T2", "ON", "T1.grant_id", "=", "T2.grant_id", "JOIN", "Document_Types", "AS", "T3", "ON", "T2.document_type_code", "=", "T3.document_type_code", "WHERE", "T3.document_description", "=", "'Regular", "'", "INTERSECT", "SELECT", "T1.grant_start_date", "FROM", "Grants", "AS", "T1", "JOIN", "Documents", "AS", "T2", "ON", "T1.grant_id", "=", "T2.grant_id", "JOIN", "Document_Types", "AS", "T3", "ON", "T2.document_type_code", "=", "T3.document_type_code", "WHERE", "T3.document_description", "=", "'Initial", "Application", "'"], "query_toks_no_value": ["select", "t1", ".", "grant_start_date", "from", "grants", "as", "t1", "join", "documents", "as", "t2", "on", "t1", ".", "grant_id", "=", "t2", ".", "grant_id", "join", "document_types", "as", "t3", "on", "t2", ".", "document_type_code", "=", "t3", ".", "document_type_code", "where", "t3", ".", "document_description", "=", "value", "intersect", "select", "t1", ".", "grant_start_date", "from", "grants", "as", "t1", "join", "documents", "as", "t2", "on", "t1", ".", "grant_id", "=", "t2", ".", "grant_id", "join", "document_types", "as", "t3", "on", "t2", ".", "document_type_code", "=", "t3", ".", "document_type_code", "where", "t3", ".", "document_description", "=", "value"], "question": "For grants that have descriptions of Regular and Initial Applications, what are their start dates?", "question_toks": ["For", "grants", "that", "have", "descriptions", "of", "Regular", "and", "Initial", "Applications", ",", "what", "are", "their", "start", "dates", "?"], "guid": 3996}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the paper after 2000 in Databases area with more than 200 citations .", "sql": "SELECT t3.title FROM DOMAIN AS t2 JOIN domain_publication AS t1 ON t2.did  =  t1.did JOIN publication AS t3 ON t3.pid  =  t1.pid WHERE t2.name  =  \"Databases\" AND t3.citation_num  >  200 AND t3.year  >  2000;", "example": {"db_id": "academic", "query": "SELECT t3.title FROM DOMAIN AS t2 JOIN domain_publication AS t1 ON t2.did  =  t1.did JOIN publication AS t3 ON t3.pid  =  t1.pid WHERE t2.name  =  \"Databases\" AND t3.citation_num  >  200 AND t3.year  >  2000;", "query_toks": ["SELECT", "t3.title", "FROM", "DOMAIN", "AS", "t2", "JOIN", "domain_publication", "AS", "t1", "ON", "t2.did", "=", "t1.did", "JOIN", "publication", "AS", "t3", "ON", "t3.pid", "=", "t1.pid", "WHERE", "t2.name", "=", "``", "Databases", "''", "AND", "t3.citation_num", ">", "200", "AND", "t3.year", ">", "2000", ";"], "query_toks_no_value": ["select", "t3", ".", "title", "from", "domain", "as", "t2", "join", "domain_publication", "as", "t1", "on", "t2", ".", "did", "=", "t1", ".", "did", "join", "publication", "as", "t3", "on", "t3", ".", "pid", "=", "t1", ".", "pid", "where", "t2", ".", "name", "=", "value", "and", "t3", ".", "citation_num", ">", "value", "and", "t3", ".", "year", ">", "value"], "question": "return me the paper after 2000 in Databases area with more than 200 citations .", "question_toks": ["return", "me", "the", "paper", "after", "2000", "in", "Databases", "area", "with", "more", "than", "200", "citations", "."], "guid": 3997}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | in what venues does Peter Mertens publish ?", "sql": "SELECT DISTINCT t3.journalid  ,  t4.venueid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Peter Mertens\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.journalid  ,  t4.venueid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Peter Mertens\";", "query_toks": ["SELECT", "DISTINCT", "t3.journalid", ",", "t4.venueid", "FROM", "venue", "AS", "t4", "JOIN", "paper", "AS", "t3", "ON", "t4.venueid", "=", "t3.venueid", "JOIN", "writes", "AS", "t2", "ON", "t2.paperid", "=", "t3.paperid", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "WHERE", "t1.authorname", "=", "``", "Peter", "Mertens", "''", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "journalid", ",", "t4", ".", "venueid", "from", "venue", "as", "t4", "join", "paper", "as", "t3", "on", "t4", ".", "venueid", "=", "t3", ".", "venueid", "join", "writes", "as", "t2", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "where", "t1", ".", "authorname", "=", "value"], "question": "in what venues does Peter Mertens publish ?", "question_toks": ["in", "what", "venues", "does", "Peter", "Mertens", "publish", "?"], "guid": 3998}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the citations of each paper in PVLDB .", "sql": "SELECT t2.citation_num FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\";", "example": {"db_id": "academic", "query": "SELECT t2.citation_num FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\";", "query_toks": ["SELECT", "t2.citation_num", "FROM", "publication", "AS", "t2", "JOIN", "journal", "AS", "t1", "ON", "t2.jid", "=", "t1.jid", "WHERE", "t1.name", "=", "``", "PVLDB", "''", ";"], "query_toks_no_value": ["select", "t2", ".", "citation_num", "from", "publication", "as", "t2", "join", "journal", "as", "t1", "on", "t2", ".", "jid", "=", "t1", ".", "jid", "where", "t1", ".", "name", "=", "value"], "question": "return me the citations of each paper in PVLDB .", "question_toks": ["return", "me", "the", "citations", "of", "each", "paper", "in", "PVLDB", "."], "guid": 3999}}
{"text": "Document_Types: document_type_code, document_description; Documents: document_id, document_type_code, grant_id, sent_date, response_received_date, other_details; Grants: grant_id, organisation_id, grant_amount, grant_start_date, grant_end_date, other_details; Organisation_Types: organisation_type, organisation_type_description; Organisations: organisation_id, organisation_type, organisation_details; Project_Outcomes: project_id, outcome_code, outcome_details; Project_Staff: staff_id, project_id, role_code, date_from, date_to, other_details; Projects: project_id, organisation_id, project_details; Research_Outcomes: outcome_code, outcome_description; Research_Staff: staff_id, employer_organisation_id, staff_details | When do all the researcher role staff start to work, and when do they stop working?", "sql": "SELECT date_from ,  date_to FROM Project_Staff WHERE role_code  =  'researcher'", "example": {"db_id": "tracking_grants_for_research", "query": "SELECT date_from ,  date_to FROM Project_Staff WHERE role_code  =  'researcher'", "query_toks": ["SELECT", "date_from", ",", "date_to", "FROM", "Project_Staff", "WHERE", "role_code", "=", "'researcher", "'"], "query_toks_no_value": ["select", "date_from", ",", "date_to", "from", "project_staff", "where", "role_code", "=", "value"], "question": "When do all the researcher role staff start to work, and when do they stop working?", "question_toks": ["When", "do", "all", "the", "researcher", "role", "staff", "start", "to", "work", ",", "and", "when", "do", "they", "stop", "working", "?"], "guid": 4000}}
{"text": "Scientists: SSN, Name; Projects: Code, Name, Hours; AssignedTo: Scientist, Project | What are the names of projects that have not been assigned?", "sql": "SELECT Name FROM Projects WHERE Code NOT IN (SELECT Project FROM AssignedTo)", "example": {"db_id": "scientist_1", "query": "SELECT Name FROM Projects WHERE Code NOT IN (SELECT Project FROM AssignedTo)", "query_toks": ["SELECT", "Name", "FROM", "Projects", "WHERE", "Code", "NOT", "IN", "(", "SELECT", "Project", "FROM", "AssignedTo", ")"], "query_toks_no_value": ["select", "name", "from", "projects", "where", "code", "not", "in", "(", "select", "project", "from", "assignedto", ")"], "question": "What are the names of projects that have not been assigned?", "question_toks": ["What", "are", "the", "names", "of", "projects", "that", "have", "not", "been", "assigned", "?"], "guid": 4001}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the papers on VLDB conference .", "sql": "SELECT t2.title FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\";", "example": {"db_id": "academic", "query": "SELECT t2.title FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\";", "query_toks": ["SELECT", "t2.title", "FROM", "publication", "AS", "t2", "JOIN", "conference", "AS", "t1", "ON", "t2.cid", "=", "t1.cid", "WHERE", "t1.name", "=", "``", "VLDB", "''", ";"], "query_toks_no_value": ["select", "t2", ".", "title", "from", "publication", "as", "t2", "join", "conference", "as", "t1", "on", "t2", ".", "cid", "=", "t1", ".", "cid", "where", "t1", ".", "name", "=", "value"], "question": "return me the papers on VLDB conference .", "question_toks": ["return", "me", "the", "papers", "on", "VLDB", "conference", "."], "guid": 4002}}
{"text": "Scientists: SSN, Name; Projects: Code, Name, Hours; AssignedTo: Scientist, Project | What is the name of the project with the most hours?", "sql": "SELECT name FROM projects ORDER BY hours DESC LIMIT 1", "example": {"db_id": "scientist_1", "query": "SELECT name FROM projects ORDER BY hours DESC LIMIT 1", "query_toks": ["SELECT", "name", "FROM", "projects", "ORDER", "BY", "hours", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "name", "from", "projects", "order", "by", "hours", "desc", "limit", "value"], "question": "What is the name of the project with the most hours?", "question_toks": ["What", "is", "the", "name", "of", "the", "project", "with", "the", "most", "hours", "?"], "guid": 4003}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | In what year did Ye Cao publish the most papers", "sql": "SELECT DISTINCT COUNT ( DISTINCT t3.paperid )  ,  t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname LIKE \"Ye Cao\" GROUP BY t3.year ORDER BY COUNT ( DISTINCT t3.paperid ) DESC;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( DISTINCT t3.paperid )  ,  t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname LIKE \"Ye Cao\" GROUP BY t3.year ORDER BY COUNT ( DISTINCT t3.paperid ) DESC;", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "DISTINCT", "t3.paperid", ")", ",", "t3.year", "FROM", "writes", "AS", "t2", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "JOIN", "paper", "AS", "t3", "ON", "t2.paperid", "=", "t3.paperid", "WHERE", "t1.authorname", "LIKE", "``", "Ye", "Cao", "''", "GROUP", "BY", "t3.year", "ORDER", "BY", "COUNT", "(", "DISTINCT", "t3.paperid", ")", "DESC", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "distinct", "t3", ".", "paperid", ")", ",", "t3", ".", "year", "from", "writes", "as", "t2", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "join", "paper", "as", "t3", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "where", "t1", ".", "authorname", "like", "value", "group", "by", "t3", ".", "year", "order", "by", "count", "(", "distinct", "t3", ".", "paperid", ")", "desc"], "question": "In what year did Ye Cao publish the most papers", "question_toks": ["In", "what", "year", "did", "Ye", "Cao", "publish", "the", "most", "papers"], "guid": 4004}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the total citations of papers in the VLDB conference before 2005 .", "sql": "SELECT SUM ( t2.citation_num ) FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\" AND t2.year  <  2005;", "example": {"db_id": "academic", "query": "SELECT SUM ( t2.citation_num ) FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\" AND t2.year  <  2005;", "query_toks": ["SELECT", "SUM", "(", "t2.citation_num", ")", "FROM", "publication", "AS", "t2", "JOIN", "conference", "AS", "t1", "ON", "t2.cid", "=", "t1.cid", "WHERE", "t1.name", "=", "``", "VLDB", "''", "AND", "t2.year", "<", "2005", ";"], "query_toks_no_value": ["select", "sum", "(", "t2", ".", "citation_num", ")", "from", "publication", "as", "t2", "join", "conference", "as", "t1", "on", "t2", ".", "cid", "=", "t1", ".", "cid", "where", "t1", ".", "name", "=", "value", "and", "t2", ".", "year", "<", "value"], "question": "return me the total citations of papers in the VLDB conference before 2005 .", "question_toks": ["return", "me", "the", "total", "citations", "of", "papers", "in", "the", "VLDB", "conference", "before", "2005", "."], "guid": 4005}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the number of papers written by \" H. V. Jagadish \" , \" Yunyao Li \" , and \" Cong Yu \" .", "sql": "SELECT COUNT ( DISTINCT t7.title ) FROM writes AS t4 JOIN author AS t2 ON t4.aid  =  t2.aid JOIN publication AS t7 ON t4.pid  =  t7.pid JOIN writes AS t5 ON t5.pid  =  t7.pid JOIN writes AS t6 ON t6.pid  =  t7.pid JOIN author AS t1 ON t5.aid  =  t1.aid JOIN author AS t3 ON t6.aid  =  t3.aid WHERE t2.name  =  \"Cong Yu\" AND t1.name  =  \"H. V. Jagadish\" AND t3.name  =  \"Yunyao Li\";", "example": {"db_id": "academic", "query": "SELECT COUNT ( DISTINCT t7.title ) FROM writes AS t4 JOIN author AS t2 ON t4.aid  =  t2.aid JOIN publication AS t7 ON t4.pid  =  t7.pid JOIN writes AS t5 ON t5.pid  =  t7.pid JOIN writes AS t6 ON t6.pid  =  t7.pid JOIN author AS t1 ON t5.aid  =  t1.aid JOIN author AS t3 ON t6.aid  =  t3.aid WHERE t2.name  =  \"Cong Yu\" AND t1.name  =  \"H. V. Jagadish\" AND t3.name  =  \"Yunyao Li\";", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "t7.title", ")", "FROM", "writes", "AS", "t4", "JOIN", "author", "AS", "t2", "ON", "t4.aid", "=", "t2.aid", "JOIN", "publication", "AS", "t7", "ON", "t4.pid", "=", "t7.pid", "JOIN", "writes", "AS", "t5", "ON", "t5.pid", "=", "t7.pid", "JOIN", "writes", "AS", "t6", "ON", "t6.pid", "=", "t7.pid", "JOIN", "author", "AS", "t1", "ON", "t5.aid", "=", "t1.aid", "JOIN", "author", "AS", "t3", "ON", "t6.aid", "=", "t3.aid", "WHERE", "t2.name", "=", "``", "Cong", "Yu", "''", "AND", "t1.name", "=", "``", "H.", "V.", "Jagadish", "''", "AND", "t3.name", "=", "``", "Yunyao", "Li", "''", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "t7", ".", "title", ")", "from", "writes", "as", "t4", "join", "author", "as", "t2", "on", "t4", ".", "aid", "=", "t2", ".", "aid", "join", "publication", "as", "t7", "on", "t4", ".", "pid", "=", "t7", ".", "pid", "join", "writes", "as", "t5", "on", "t5", ".", "pid", "=", "t7", ".", "pid", "join", "writes", "as", "t6", "on", "t6", ".", "pid", "=", "t7", ".", "pid", "join", "author", "as", "t1", "on", "t5", ".", "aid", "=", "t1", ".", "aid", "join", "author", "as", "t3", "on", "t6", ".", "aid", "=", "t3", ".", "aid", "where", "t2", ".", "name", "=", "value", "and", "t1", ".", "name", "=", "value", "and", "t3", ".", "name", "=", "value"], "question": "return me the number of papers written by \" H. V. Jagadish \" , \" Yunyao Li \" , and \" Cong Yu \" .", "question_toks": ["return", "me", "the", "number", "of", "papers", "written", "by", "``", "H.", "V.", "Jagadish", "``", ",", "``", "Yunyao", "Li", "``", ",", "and", "``", "Cong", "Yu", "``", "."], "guid": 4006}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me all the organizations in Databases area located in \" North America \" .", "sql": "SELECT t2.name FROM domain_author AS t4 JOIN author AS t1 ON t4.aid  =  t1.aid JOIN DOMAIN AS t3 ON t3.did  =  t4.did JOIN organization AS t2 ON t2.oid  =  t1.oid WHERE t3.name  =  \"Databases\" AND t2.continent  =  \"North America\";", "example": {"db_id": "academic", "query": "SELECT t2.name FROM domain_author AS t4 JOIN author AS t1 ON t4.aid  =  t1.aid JOIN DOMAIN AS t3 ON t3.did  =  t4.did JOIN organization AS t2 ON t2.oid  =  t1.oid WHERE t3.name  =  \"Databases\" AND t2.continent  =  \"North America\";", "query_toks": ["SELECT", "t2.name", "FROM", "domain_author", "AS", "t4", "JOIN", "author", "AS", "t1", "ON", "t4.aid", "=", "t1.aid", "JOIN", "DOMAIN", "AS", "t3", "ON", "t3.did", "=", "t4.did", "JOIN", "organization", "AS", "t2", "ON", "t2.oid", "=", "t1.oid", "WHERE", "t3.name", "=", "``", "Databases", "''", "AND", "t2.continent", "=", "``", "North", "America", "''", ";"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "domain_author", "as", "t4", "join", "author", "as", "t1", "on", "t4", ".", "aid", "=", "t1", ".", "aid", "join", "domain", "as", "t3", "on", "t3", ".", "did", "=", "t4", ".", "did", "join", "organization", "as", "t2", "on", "t2", ".", "oid", "=", "t1", ".", "oid", "where", "t3", ".", "name", "=", "value", "and", "t2", ".", "continent", "=", "value"], "question": "return me all the organizations in Databases area located in \" North America \" .", "question_toks": ["return", "me", "all", "the", "organizations", "in", "Databases", "area", "located", "in", "``", "North", "America", "``", "."], "guid": 4007}}
{"text": "Scientists: SSN, Name; Projects: Code, Name, Hours; AssignedTo: Scientist, Project | Find the average hours of all projects.", "sql": "SELECT avg(hours) FROM projects", "example": {"db_id": "scientist_1", "query": "SELECT avg(hours) FROM projects", "query_toks": ["SELECT", "avg", "(", "hours", ")", "FROM", "projects"], "query_toks_no_value": ["select", "avg", "(", "hours", ")", "from", "projects"], "question": "Find the average hours of all projects.", "question_toks": ["Find", "the", "average", "hours", "of", "all", "projects", "."], "guid": 4008}}
{"text": "Document_Types: document_type_code, document_description; Documents: document_id, document_type_code, grant_id, sent_date, response_received_date, other_details; Grants: grant_id, organisation_id, grant_amount, grant_start_date, grant_end_date, other_details; Organisation_Types: organisation_type, organisation_type_description; Organisations: organisation_id, organisation_type, organisation_details; Project_Outcomes: project_id, outcome_code, outcome_details; Project_Staff: staff_id, project_id, role_code, date_from, date_to, other_details; Projects: project_id, organisation_id, project_details; Research_Outcomes: outcome_code, outcome_description; Research_Staff: staff_id, employer_organisation_id, staff_details | Show the role description and the id of the project staff involved in most number of project outcomes?", "sql": "SELECT T1.role_description ,  T2.staff_id FROM Staff_Roles AS T1 JOIN Project_Staff AS T2 ON T1.role_code  =  T2.role_code JOIN Project_outcomes AS T3 ON T2.project_id  =  T3.project_id GROUP BY T2.staff_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "tracking_grants_for_research", "query": "SELECT T1.role_description ,  T2.staff_id FROM Staff_Roles AS T1 JOIN Project_Staff AS T2 ON T1.role_code  =  T2.role_code JOIN Project_outcomes AS T3 ON T2.project_id  =  T3.project_id GROUP BY T2.staff_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.role_description", ",", "T2.staff_id", "FROM", "Staff_Roles", "AS", "T1", "JOIN", "Project_Staff", "AS", "T2", "ON", "T1.role_code", "=", "T2.role_code", "JOIN", "Project_outcomes", "AS", "T3", "ON", "T2.project_id", "=", "T3.project_id", "GROUP", "BY", "T2.staff_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "role_description", ",", "t2", ".", "staff_id", "from", "staff_roles", "as", "t1", "join", "project_staff", "as", "t2", "on", "t1", ".", "role_code", "=", "t2", ".", "role_code", "join", "project_outcomes", "as", "t3", "on", "t2", ".", "project_id", "=", "t3", ".", "project_id", "group", "by", "t2", ".", "staff_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Show the role description and the id of the project staff involved in most number of project outcomes?", "question_toks": ["Show", "the", "role", "description", "and", "the", "id", "of", "the", "project", "staff", "involved", "in", "most", "number", "of", "project", "outcomes", "?"], "guid": 4009}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | What are the papers of Liwen Xiong in 2015", "sql": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Liwen Xiong\" AND t3.year  =  2015;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Liwen Xiong\" AND t3.year  =  2015;", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "writes", "AS", "t2", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "JOIN", "paper", "AS", "t3", "ON", "t2.paperid", "=", "t3.paperid", "WHERE", "t1.authorname", "=", "``", "Liwen", "Xiong", "''", "AND", "t3.year", "=", "2015", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "writes", "as", "t2", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "join", "paper", "as", "t3", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "where", "t1", ".", "authorname", "=", "value", "and", "t3", ".", "year", "=", "value"], "question": "What are the papers of Liwen Xiong in 2015", "question_toks": ["What", "are", "the", "papers", "of", "Liwen", "Xiong", "in", "2015"], "guid": 4010}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | How many papers was published in nature communications in 2015", "sql": "SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"nature communications\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"nature communications\";", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "t1.paperid", ")", "FROM", "venue", "AS", "t2", "JOIN", "paper", "AS", "t1", "ON", "t2.venueid", "=", "t1.venueid", "WHERE", "t1.year", "=", "2015", "AND", "t2.venuename", "=", "``", "nature", "communications", "''", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "t1", ".", "paperid", ")", "from", "venue", "as", "t2", "join", "paper", "as", "t1", "on", "t2", ".", "venueid", "=", "t1", ".", "venueid", "where", "t1", ".", "year", "=", "value", "and", "t2", ".", "venuename", "=", "value"], "question": "How many papers was published in nature communications in 2015", "question_toks": ["How", "many", "papers", "was", "published", "in", "nature", "communications", "in", "2015"], "guid": 4011}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | number of ACL papers by author", "sql": "SELECT DISTINCT COUNT ( t2.paperid )  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  \"ACL\" GROUP BY t1.authorid;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( t2.paperid )  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  \"ACL\" GROUP BY t1.authorid;", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "t2.paperid", ")", ",", "t1.authorid", "FROM", "venue", "AS", "t3", "JOIN", "paper", "AS", "t2", "ON", "t3.venueid", "=", "t2.venueid", "JOIN", "writes", "AS", "t1", "ON", "t1.paperid", "=", "t2.paperid", "WHERE", "t3.venuename", "=", "``", "ACL", "''", "GROUP", "BY", "t1.authorid", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "t2", ".", "paperid", ")", ",", "t1", ".", "authorid", "from", "venue", "as", "t3", "join", "paper", "as", "t2", "on", "t3", ".", "venueid", "=", "t2", ".", "venueid", "join", "writes", "as", "t1", "on", "t1", ".", "paperid", "=", "t2", ".", "paperid", "where", "t3", ".", "venuename", "=", "value", "group", "by", "t1", ".", "authorid"], "question": "number of ACL papers by author", "question_toks": ["number", "of", "ACL", "papers", "by", "author"], "guid": 4012}}
{"text": "Scientists: SSN, Name; Projects: Code, Name, Hours; AssignedTo: Scientist, Project | Find the SSN and name of scientists who are assigned to the project with the longest hours.", "sql": "SELECT T3.ssn ,  T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.hours  =  (SELECT max(hours) FROM projects)", "example": {"db_id": "scientist_1", "query": "SELECT T3.ssn ,  T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.hours  =  (SELECT max(hours) FROM projects)", "query_toks": ["SELECT", "T3.ssn", ",", "T3.name", "FROM", "assignedto", "AS", "T1", "JOIN", "projects", "AS", "T2", "ON", "T1.project", "=", "T2.code", "JOIN", "scientists", "AS", "T3", "ON", "T1.scientist", "=", "T3.SSN", "WHERE", "T2.hours", "=", "(", "SELECT", "max", "(", "hours", ")", "FROM", "projects", ")"], "query_toks_no_value": ["select", "t3", ".", "ssn", ",", "t3", ".", "name", "from", "assignedto", "as", "t1", "join", "projects", "as", "t2", "on", "t1", ".", "project", "=", "t2", ".", "code", "join", "scientists", "as", "t3", "on", "t1", ".", "scientist", "=", "t3", ".", "ssn", "where", "t2", ".", "hours", "=", "(", "select", "max", "(", "hours", ")", "from", "projects", ")"], "question": "Find the SSN and name of scientists who are assigned to the project with the longest hours.", "question_toks": ["Find", "the", "SSN", "and", "name", "of", "scientists", "who", "are", "assigned", "to", "the", "project", "with", "the", "longest", "hours", "."], "guid": 4013}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the keywords in PVLDB .", "sql": "SELECT t1.keyword FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t2 ON t2.pid  =  t4.pid JOIN journal AS t3 ON t2.jid  =  t3.jid WHERE t3.name  =  \"PVLDB\";", "example": {"db_id": "academic", "query": "SELECT t1.keyword FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t2 ON t2.pid  =  t4.pid JOIN journal AS t3 ON t2.jid  =  t3.jid WHERE t3.name  =  \"PVLDB\";", "query_toks": ["SELECT", "t1.keyword", "FROM", "publication_keyword", "AS", "t4", "JOIN", "keyword", "AS", "t1", "ON", "t4.kid", "=", "t1.kid", "JOIN", "publication", "AS", "t2", "ON", "t2.pid", "=", "t4.pid", "JOIN", "journal", "AS", "t3", "ON", "t2.jid", "=", "t3.jid", "WHERE", "t3.name", "=", "``", "PVLDB", "''", ";"], "query_toks_no_value": ["select", "t1", ".", "keyword", "from", "publication_keyword", "as", "t4", "join", "keyword", "as", "t1", "on", "t4", ".", "kid", "=", "t1", ".", "kid", "join", "publication", "as", "t2", "on", "t2", ".", "pid", "=", "t4", ".", "pid", "join", "journal", "as", "t3", "on", "t2", ".", "jid", "=", "t3", ".", "jid", "where", "t3", ".", "name", "=", "value"], "question": "return me the keywords in PVLDB .", "question_toks": ["return", "me", "the", "keywords", "in", "PVLDB", "."], "guid": 4014}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | citation count of zachary tatlock 's papers", "sql": "SELECT DISTINCT t3.paperid  ,  t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"zachary tatlock\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid  ,  t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"zachary tatlock\";", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", ",", "t3.year", "FROM", "writes", "AS", "t2", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "JOIN", "paper", "AS", "t3", "ON", "t2.paperid", "=", "t3.paperid", "WHERE", "t1.authorname", "=", "``", "zachary", "tatlock", "''", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", ",", "t3", ".", "year", "from", "writes", "as", "t2", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "join", "paper", "as", "t3", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "where", "t1", ".", "authorname", "=", "value"], "question": "citation count of zachary tatlock 's papers", "question_toks": ["citation", "count", "of", "zachary", "tatlock", "'s", "papers"], "guid": 4015}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | topics used by Luke Zettlemoyer", "sql": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";", "query_toks": ["SELECT", "DISTINCT", "t1.keyphraseid", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "JOIN", "writes", "AS", "t4", "ON", "t4.paperid", "=", "t3.paperid", "JOIN", "author", "AS", "t5", "ON", "t4.authorid", "=", "t5.authorid", "WHERE", "t5.authorname", "=", "``", "Luke", "Zettlemoyer", "''", ";"], "query_toks_no_value": ["select", "distinct", "t1", ".", "keyphraseid", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "join", "writes", "as", "t4", "on", "t4", ".", "paperid", "=", "t3", ".", "paperid", "join", "author", "as", "t5", "on", "t4", ".", "authorid", "=", "t5", ".", "authorid", "where", "t5", ".", "authorname", "=", "value"], "question": "topics used by Luke Zettlemoyer", "question_toks": ["topics", "used", "by", "Luke", "Zettlemoyer"], "guid": 4016}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the paper in Databases area with the most citations .", "sql": "SELECT t3.title FROM DOMAIN AS t2 JOIN domain_publication AS t1 ON t2.did  =  t1.did JOIN publication AS t3 ON t3.pid  =  t1.pid WHERE t2.name  =  \"Databases\" ORDER BY t3.citation_num DESC LIMIT 1;", "example": {"db_id": "academic", "query": "SELECT t3.title FROM DOMAIN AS t2 JOIN domain_publication AS t1 ON t2.did  =  t1.did JOIN publication AS t3 ON t3.pid  =  t1.pid WHERE t2.name  =  \"Databases\" ORDER BY t3.citation_num DESC LIMIT 1;", "query_toks": ["SELECT", "t3.title", "FROM", "DOMAIN", "AS", "t2", "JOIN", "domain_publication", "AS", "t1", "ON", "t2.did", "=", "t1.did", "JOIN", "publication", "AS", "t3", "ON", "t3.pid", "=", "t1.pid", "WHERE", "t2.name", "=", "``", "Databases", "''", "ORDER", "BY", "t3.citation_num", "DESC", "LIMIT", "1", ";"], "query_toks_no_value": ["select", "t3", ".", "title", "from", "domain", "as", "t2", "join", "domain_publication", "as", "t1", "on", "t2", ".", "did", "=", "t1", ".", "did", "join", "publication", "as", "t3", "on", "t3", ".", "pid", "=", "t1", ".", "pid", "where", "t2", ".", "name", "=", "value", "order", "by", "t3", ".", "citation_num", "desc", "limit", "value"], "question": "return me the paper in Databases area with the most citations .", "question_toks": ["return", "me", "the", "paper", "in", "Databases", "area", "with", "the", "most", "citations", "."], "guid": 4017}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | when was the first deep learning paper published ?", "sql": "SELECT DISTINCT t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\" GROUP BY t3.year ORDER BY t3.year ASC;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\" GROUP BY t3.year ORDER BY t3.year ASC;", "query_toks": ["SELECT", "DISTINCT", "t3.year", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "WHERE", "t1.keyphrasename", "=", "``", "deep", "learning", "''", "GROUP", "BY", "t3.year", "ORDER", "BY", "t3.year", "ASC", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "year", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "where", "t1", ".", "keyphrasename", "=", "value", "group", "by", "t3", ".", "year", "order", "by", "t3", ".", "year", "asc"], "question": "when was the first deep learning paper published ?", "question_toks": ["when", "was", "the", "first", "deep", "learning", "paper", "published", "?"], "guid": 4018}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | Which paper did Richard Ladner present at chi ?", "sql": "SELECT DISTINCT t3.paperid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Richard Ladner\" AND t4.venuename  =  \"chi\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Richard Ladner\" AND t4.venuename  =  \"chi\";", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "venue", "AS", "t4", "JOIN", "paper", "AS", "t3", "ON", "t4.venueid", "=", "t3.venueid", "JOIN", "writes", "AS", "t2", "ON", "t2.paperid", "=", "t3.paperid", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "WHERE", "t1.authorname", "=", "``", "Richard", "Ladner", "''", "AND", "t4.venuename", "=", "``", "chi", "''", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "venue", "as", "t4", "join", "paper", "as", "t3", "on", "t4", ".", "venueid", "=", "t3", ".", "venueid", "join", "writes", "as", "t2", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "where", "t1", ".", "authorname", "=", "value", "and", "t4", ".", "venuename", "=", "value"], "question": "Which paper did Richard Ladner present at chi ?", "question_toks": ["Which", "paper", "did", "Richard", "Ladner", "present", "at", "chi", "?"], "guid": 4019}}
{"text": "item: i_id, title; review: a_id, u_id, i_id, rating, rank; useracct: u_id, name; trust: source_u_id, target_u_id, trust | For each user, find their name and the number of reviews written by them.", "sql": "SELECT T1.name ,  count(*) FROM useracct AS T1 JOIN review AS T2 ON T1.u_id  =  T2.u_id GROUP BY T2.u_id", "example": {"db_id": "epinions_1", "query": "SELECT T1.name ,  count(*) FROM useracct AS T1 JOIN review AS T2 ON T1.u_id  =  T2.u_id GROUP BY T2.u_id", "query_toks": ["SELECT", "T1.name", ",", "count", "(", "*", ")", "FROM", "useracct", "AS", "T1", "JOIN", "review", "AS", "T2", "ON", "T1.u_id", "=", "T2.u_id", "GROUP", "BY", "T2.u_id"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "count", "(", "*", ")", "from", "useracct", "as", "t1", "join", "review", "as", "t2", "on", "t1", ".", "u_id", "=", "t2", ".", "u_id", "group", "by", "t2", ".", "u_id"], "question": "For each user, find their name and the number of reviews written by them.", "question_toks": ["For", "each", "user", ",", "find", "their", "name", "and", "the", "number", "of", "reviews", "written", "by", "them", "."], "guid": 4020}}
{"text": "journal: Journal_ID, Date, Theme, Sales; editor: Editor_ID, Name, Age; journal_committee: Editor_ID, Journal_ID, Work_Type | What is the average sales of the journals that have an editor whose work type is 'Photo'?", "sql": "SELECT avg(T1.sales) FROM journal AS T1 JOIN journal_committee AS T2 ON T1.journal_ID  =  T2.journal_ID WHERE T2.work_type  =  'Photo'", "example": {"db_id": "journal_committee", "query": "SELECT avg(T1.sales) FROM journal AS T1 JOIN journal_committee AS T2 ON T1.journal_ID  =  T2.journal_ID WHERE T2.work_type  =  'Photo'", "query_toks": ["SELECT", "avg", "(", "T1.sales", ")", "FROM", "journal", "AS", "T1", "JOIN", "journal_committee", "AS", "T2", "ON", "T1.journal_ID", "=", "T2.journal_ID", "WHERE", "T2.work_type", "=", "'Photo", "'"], "query_toks_no_value": ["select", "avg", "(", "t1", ".", "sales", ")", "from", "journal", "as", "t1", "join", "journal_committee", "as", "t2", "on", "t1", ".", "journal_id", "=", "t2", ".", "journal_id", "where", "t2", ".", "work_type", "=", "value"], "question": "What is the average sales of the journals that have an editor whose work type is 'Photo'?", "question_toks": ["What", "is", "the", "average", "sales", "of", "the", "journals", "that", "have", "an", "editor", "whose", "work", "type", "is", "'Photo", "'", "?"], "guid": 4021}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | What paper did Michael Armstrong wrote in the 90s ?", "sql": "SELECT DISTINCT t3.year  ,  t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname LIKE \"Michael Armstrong\" AND t3.year LIKE \"199\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.year  ,  t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname LIKE \"Michael Armstrong\" AND t3.year LIKE \"199\";", "query_toks": ["SELECT", "DISTINCT", "t3.year", ",", "t2.paperid", "FROM", "writes", "AS", "t2", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "JOIN", "paper", "AS", "t3", "ON", "t2.paperid", "=", "t3.paperid", "WHERE", "t1.authorname", "LIKE", "``", "Michael", "Armstrong", "''", "AND", "t3.year", "LIKE", "``", "199", "''", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "year", ",", "t2", ".", "paperid", "from", "writes", "as", "t2", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "join", "paper", "as", "t3", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "where", "t1", ".", "authorname", "like", "value", "and", "t3", ".", "year", "like", "value"], "question": "What paper did Michael Armstrong wrote in the 90s ?", "question_toks": ["What", "paper", "did", "Michael", "Armstrong", "wrote", "in", "the", "90s", "?"], "guid": 4022}}
{"text": "Inst: instID, name, country; Authors: authID, lname, fname; Papers: paperID, title; Authorship: authID, instID, paperID, authOrder | How many authors are there?", "sql": "SELECT count(*) FROM authors", "example": {"db_id": "icfp_1", "query": "SELECT count(*) FROM authors", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "authors"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "authors"], "question": "How many authors are there?", "question_toks": ["How", "many", "authors", "are", "there", "?"], "guid": 4023}}
{"text": "Document_Types: document_type_code, document_description; Documents: document_id, document_type_code, grant_id, sent_date, response_received_date, other_details; Grants: grant_id, organisation_id, grant_amount, grant_start_date, grant_end_date, other_details; Organisation_Types: organisation_type, organisation_type_description; Organisations: organisation_id, organisation_type, organisation_details; Project_Outcomes: project_id, outcome_code, outcome_details; Project_Staff: staff_id, project_id, role_code, date_from, date_to, other_details; Projects: project_id, organisation_id, project_details; Research_Outcomes: outcome_code, outcome_description; Research_Staff: staff_id, employer_organisation_id, staff_details | How many different roles are there on the project staff?", "sql": "SELECT count(DISTINCT role_code) FROM Project_Staff", "example": {"db_id": "tracking_grants_for_research", "query": "SELECT count(DISTINCT role_code) FROM Project_Staff", "query_toks": ["SELECT", "count", "(", "DISTINCT", "role_code", ")", "FROM", "Project_Staff"], "query_toks_no_value": ["select", "count", "(", "distinct", "role_code", ")", "from", "project_staff"], "question": "How many different roles are there on the project staff?", "question_toks": ["How", "many", "different", "roles", "are", "there", "on", "the", "project", "staff", "?"], "guid": 4024}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | papers that mention Question Answering", "sql": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "WHERE", "t1.keyphrasename", "=", "``", "Question", "Answering", "''", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "where", "t1", ".", "keyphrasename", "=", "value"], "question": "papers that mention Question Answering", "question_toks": ["papers", "that", "mention", "Question", "Answering"], "guid": 4025}}
{"text": "workshop: Workshop_ID, Date, Venue, Name; submission: Submission_ID, Scores, Author, College; Acceptance: Submission_ID, Workshop_ID, Result | Show the authors who have submissions to more than one workshop.", "sql": "SELECT T2.Author FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID GROUP BY T2.Author HAVING COUNT(DISTINCT T1.workshop_id)  >  1", "example": {"db_id": "workshop_paper", "query": "SELECT T2.Author FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID GROUP BY T2.Author HAVING COUNT(DISTINCT T1.workshop_id)  >  1", "query_toks": ["SELECT", "T2.Author", "FROM", "acceptance", "AS", "T1", "JOIN", "submission", "AS", "T2", "ON", "T1.Submission_ID", "=", "T2.Submission_ID", "GROUP", "BY", "T2.Author", "HAVING", "COUNT", "(", "DISTINCT", "T1.workshop_id", ")", ">", "1"], "query_toks_no_value": ["select", "t2", ".", "author", "from", "acceptance", "as", "t1", "join", "submission", "as", "t2", "on", "t1", ".", "submission_id", "=", "t2", ".", "submission_id", "group", "by", "t2", ".", "author", "having", "count", "(", "distinct", "t1", ".", "workshop_id", ")", ">", "value"], "question": "Show the authors who have submissions to more than one workshop.", "question_toks": ["Show", "the", "authors", "who", "have", "submissions", "to", "more", "than", "one", "workshop", "."], "guid": 4026}}
{"text": "workshop: Workshop_ID, Date, Venue, Name; submission: Submission_ID, Scores, Author, College; Acceptance: Submission_ID, Workshop_ID, Result | Which submission received the highest score in acceptance result. Show me the result.", "sql": "SELECT T1.Result FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID ORDER BY T2.Scores DESC LIMIT 1", "example": {"db_id": "workshop_paper", "query": "SELECT T1.Result FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID ORDER BY T2.Scores DESC LIMIT 1", "query_toks": ["SELECT", "T1.Result", "FROM", "acceptance", "AS", "T1", "JOIN", "submission", "AS", "T2", "ON", "T1.Submission_ID", "=", "T2.Submission_ID", "ORDER", "BY", "T2.Scores", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "result", "from", "acceptance", "as", "t1", "join", "submission", "as", "t2", "on", "t1", ".", "submission_id", "=", "t2", ".", "submission_id", "order", "by", "t2", ".", "scores", "desc", "limit", "value"], "question": "Which submission received the highest score in acceptance result. Show me the result.", "question_toks": ["Which", "submission", "received", "the", "highest", "score", "in", "acceptance", "result", ".", "Show", "me", "the", "result", "."], "guid": 4027}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the authors who have more than 10 papers containing keyword \" Relational Database \" .", "sql": "SELECT t2.name FROM publication_keyword AS t5 JOIN keyword AS t1 ON t5.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t3.pid JOIN author AS t2 ON t4.aid  =  t2.aid WHERE t1.keyword  =  \"Relational Database\" GROUP BY t2.name HAVING COUNT ( DISTINCT t3.title )  >  10;", "example": {"db_id": "academic", "query": "SELECT t2.name FROM publication_keyword AS t5 JOIN keyword AS t1 ON t5.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t3.pid JOIN author AS t2 ON t4.aid  =  t2.aid WHERE t1.keyword  =  \"Relational Database\" GROUP BY t2.name HAVING COUNT ( DISTINCT t3.title )  >  10;", "query_toks": ["SELECT", "t2.name", "FROM", "publication_keyword", "AS", "t5", "JOIN", "keyword", "AS", "t1", "ON", "t5.kid", "=", "t1.kid", "JOIN", "publication", "AS", "t3", "ON", "t3.pid", "=", "t5.pid", "JOIN", "writes", "AS", "t4", "ON", "t4.pid", "=", "t3.pid", "JOIN", "author", "AS", "t2", "ON", "t4.aid", "=", "t2.aid", "WHERE", "t1.keyword", "=", "``", "Relational", "Database", "''", "GROUP", "BY", "t2.name", "HAVING", "COUNT", "(", "DISTINCT", "t3.title", ")", ">", "10", ";"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "publication_keyword", "as", "t5", "join", "keyword", "as", "t1", "on", "t5", ".", "kid", "=", "t1", ".", "kid", "join", "publication", "as", "t3", "on", "t3", ".", "pid", "=", "t5", ".", "pid", "join", "writes", "as", "t4", "on", "t4", ".", "pid", "=", "t3", ".", "pid", "join", "author", "as", "t2", "on", "t4", ".", "aid", "=", "t2", ".", "aid", "where", "t1", ".", "keyword", "=", "value", "group", "by", "t2", ".", "name", "having", "count", "(", "distinct", "t3", ".", "title", ")", ">", "value"], "question": "return me the authors who have more than 10 papers containing keyword \" Relational Database \" .", "question_toks": ["return", "me", "the", "authors", "who", "have", "more", "than", "10", "papers", "containing", "keyword", "``", "Relational", "Database", "``", "."], "guid": 4028}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the number of conferences which have papers by \" H. V. Jagadish \" .", "sql": "SELECT COUNT ( DISTINCT t2.name ) FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\";", "example": {"db_id": "academic", "query": "SELECT COUNT ( DISTINCT t2.name ) FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\";", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "t2.name", ")", "FROM", "publication", "AS", "t4", "JOIN", "conference", "AS", "t2", "ON", "t4.cid", "=", "t2.cid", "JOIN", "writes", "AS", "t3", "ON", "t3.pid", "=", "t4.pid", "JOIN", "author", "AS", "t1", "ON", "t3.aid", "=", "t1.aid", "WHERE", "t1.name", "=", "``", "H.", "V.", "Jagadish", "''", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "t2", ".", "name", ")", "from", "publication", "as", "t4", "join", "conference", "as", "t2", "on", "t4", ".", "cid", "=", "t2", ".", "cid", "join", "writes", "as", "t3", "on", "t3", ".", "pid", "=", "t4", ".", "pid", "join", "author", "as", "t1", "on", "t3", ".", "aid", "=", "t1", ".", "aid", "where", "t1", ".", "name", "=", "value"], "question": "return me the number of conferences which have papers by \" H. V. Jagadish \" .", "question_toks": ["return", "me", "the", "number", "of", "conferences", "which", "have", "papers", "by", "``", "H.", "V.", "Jagadish", "``", "."], "guid": 4029}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | Number of ACL papers with more than 2 citations", "sql": "SELECT DISTINCT COUNT ( t3.citingpaperid ) FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"ACL\" GROUP BY t3.citingpaperid HAVING COUNT ( DISTINCT t3.citedpaperid )  >  2;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( t3.citingpaperid ) FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"ACL\" GROUP BY t3.citingpaperid HAVING COUNT ( DISTINCT t3.citedpaperid )  >  2;", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "t3.citingpaperid", ")", "FROM", "paper", "AS", "t1", "JOIN", "cite", "AS", "t3", "ON", "t1.paperid", "=", "t3.citedpaperid", "JOIN", "venue", "AS", "t2", "ON", "t2.venueid", "=", "t1.venueid", "WHERE", "t2.venuename", "=", "``", "ACL", "''", "GROUP", "BY", "t3.citingpaperid", "HAVING", "COUNT", "(", "DISTINCT", "t3.citedpaperid", ")", ">", "2", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "t3", ".", "citingpaperid", ")", "from", "paper", "as", "t1", "join", "cite", "as", "t3", "on", "t1", ".", "paperid", "=", "t3", ".", "citedpaperid", "join", "venue", "as", "t2", "on", "t2", ".", "venueid", "=", "t1", ".", "venueid", "where", "t2", ".", "venuename", "=", "value", "group", "by", "t3", ".", "citingpaperid", "having", "count", "(", "distinct", "t3", ".", "citedpaperid", ")", ">", "value"], "question": "Number of ACL papers with more than 2 citations", "question_toks": ["Number", "of", "ACL", "papers", "with", "more", "than", "2", "citations"], "guid": 4030}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | number of papers published in ACL 2015", "sql": "SELECT DISTINCT COUNT ( DISTINCT t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"ACL\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( DISTINCT t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"ACL\";", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "DISTINCT", "t1.paperid", ")", "FROM", "venue", "AS", "t2", "JOIN", "paper", "AS", "t1", "ON", "t2.venueid", "=", "t1.venueid", "WHERE", "t1.year", "=", "2015", "AND", "t2.venuename", "=", "``", "ACL", "''", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "distinct", "t1", ".", "paperid", ")", "from", "venue", "as", "t2", "join", "paper", "as", "t1", "on", "t2", ".", "venueid", "=", "t1", ".", "venueid", "where", "t1", ".", "year", "=", "value", "and", "t2", ".", "venuename", "=", "value"], "question": "number of papers published in ACL 2015", "question_toks": ["number", "of", "papers", "published", "in", "ACL", "2015"], "guid": 4031}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the number of the keywords related to \" H. V. Jagadish \" .", "sql": "SELECT COUNT ( DISTINCT t1.keyword ) FROM publication_keyword AS t5 JOIN keyword AS t1 ON t5.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t3.pid JOIN author AS t2 ON t4.aid  =  t2.aid WHERE t2.name  =  \"H. V. Jagadish\";", "example": {"db_id": "academic", "query": "SELECT COUNT ( DISTINCT t1.keyword ) FROM publication_keyword AS t5 JOIN keyword AS t1 ON t5.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t3.pid JOIN author AS t2 ON t4.aid  =  t2.aid WHERE t2.name  =  \"H. V. Jagadish\";", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "t1.keyword", ")", "FROM", "publication_keyword", "AS", "t5", "JOIN", "keyword", "AS", "t1", "ON", "t5.kid", "=", "t1.kid", "JOIN", "publication", "AS", "t3", "ON", "t3.pid", "=", "t5.pid", "JOIN", "writes", "AS", "t4", "ON", "t4.pid", "=", "t3.pid", "JOIN", "author", "AS", "t2", "ON", "t4.aid", "=", "t2.aid", "WHERE", "t2.name", "=", "``", "H.", "V.", "Jagadish", "''", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "t1", ".", "keyword", ")", "from", "publication_keyword", "as", "t5", "join", "keyword", "as", "t1", "on", "t5", ".", "kid", "=", "t1", ".", "kid", "join", "publication", "as", "t3", "on", "t3", ".", "pid", "=", "t5", ".", "pid", "join", "writes", "as", "t4", "on", "t4", ".", "pid", "=", "t3", ".", "pid", "join", "author", "as", "t2", "on", "t4", ".", "aid", "=", "t2", ".", "aid", "where", "t2", ".", "name", "=", "value"], "question": "return me the number of the keywords related to \" H. V. Jagadish \" .", "question_toks": ["return", "me", "the", "number", "of", "the", "keywords", "related", "to", "``", "H.", "V.", "Jagadish", "``", "."], "guid": 4032}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | papers on Question Answering experiments", "sql": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "WHERE", "t1.keyphrasename", "=", "``", "Question", "Answering", "''", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "where", "t1", ".", "keyphrasename", "=", "value"], "question": "papers on Question Answering experiments", "question_toks": ["papers", "on", "Question", "Answering", "experiments"], "guid": 4033}}
{"text": "publication: Publication_ID, Book_ID, Publisher, Publication_Date, Price; book: Book_ID, Title, Issues, Writer | What are the title and issues of the books?", "sql": "SELECT Title ,  Issues FROM book", "example": {"db_id": "book_2", "query": "SELECT Title ,  Issues FROM book", "query_toks": ["SELECT", "Title", ",", "Issues", "FROM", "book"], "query_toks_no_value": ["select", "title", ",", "issues", "from", "book"], "question": "What are the title and issues of the books?", "question_toks": ["What", "are", "the", "title", "and", "issues", "of", "the", "books", "?"], "guid": 4034}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the abstract of \" Making database systems usable \" .", "sql": "SELECT abstract FROM publication WHERE title  =  \"Making database systems usable\";", "example": {"db_id": "academic", "query": "SELECT abstract FROM publication WHERE title  =  \"Making database systems usable\";", "query_toks": ["SELECT", "abstract", "FROM", "publication", "WHERE", "title", "=", "``", "Making", "database", "systems", "usable", "''", ";"], "query_toks_no_value": ["select", "abstract", "from", "publication", "where", "title", "=", "value"], "question": "return me the abstract of \" Making database systems usable \" .", "question_toks": ["return", "me", "the", "abstract", "of", "``", "Making", "database", "systems", "usable", "``", "."], "guid": 4035}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | character recognition papers from before 2010", "sql": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"character recognition\" AND t3.year  <  2010;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"character recognition\" AND t3.year  <  2010;", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "WHERE", "t1.keyphrasename", "=", "``", "character", "recognition", "''", "AND", "t3.year", "<", "2010", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "where", "t1", ".", "keyphrasename", "=", "value", "and", "t3", ".", "year", "<", "value"], "question": "character recognition papers from before 2010", "question_toks": ["character", "recognition", "papers", "from", "before", "2010"], "guid": 4036}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | who wrote the most papers on syntactic parsing ?", "sql": "SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  \"syntactic parsing\" GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  \"syntactic parsing\" GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "t4.paperid", ")", ",", "t3.authorid", "FROM", "paperkeyphrase", "AS", "t1", "JOIN", "keyphrase", "AS", "t2", "ON", "t1.keyphraseid", "=", "t2.keyphraseid", "JOIN", "paper", "AS", "t4", "ON", "t4.paperid", "=", "t1.paperid", "JOIN", "writes", "AS", "t3", "ON", "t3.paperid", "=", "t4.paperid", "WHERE", "t2.keyphrasename", "=", "``", "syntactic", "parsing", "''", "GROUP", "BY", "t3.authorid", "ORDER", "BY", "COUNT", "(", "t4.paperid", ")", "DESC", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "t4", ".", "paperid", ")", ",", "t3", ".", "authorid", "from", "paperkeyphrase", "as", "t1", "join", "keyphrase", "as", "t2", "on", "t1", ".", "keyphraseid", "=", "t2", ".", "keyphraseid", "join", "paper", "as", "t4", "on", "t4", ".", "paperid", "=", "t1", ".", "paperid", "join", "writes", "as", "t3", "on", "t3", ".", "paperid", "=", "t4", ".", "paperid", "where", "t2", ".", "keyphrasename", "=", "value", "group", "by", "t3", ".", "authorid", "order", "by", "count", "(", "t4", ".", "paperid", ")", "desc"], "question": "who wrote the most papers on syntactic parsing ?", "question_toks": ["who", "wrote", "the", "most", "papers", "on", "syntactic", "parsing", "?"], "guid": 4037}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | What conferences did li dong submit to in 2016 ?", "sql": "SELECT DISTINCT t3.venueid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"li dong\" AND t3.year  =  2016;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.venueid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"li dong\" AND t3.year  =  2016;", "query_toks": ["SELECT", "DISTINCT", "t3.venueid", "FROM", "writes", "AS", "t2", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "JOIN", "paper", "AS", "t3", "ON", "t2.paperid", "=", "t3.paperid", "WHERE", "t1.authorname", "=", "``", "li", "dong", "''", "AND", "t3.year", "=", "2016", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "venueid", "from", "writes", "as", "t2", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "join", "paper", "as", "t3", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "where", "t1", ".", "authorname", "=", "value", "and", "t3", ".", "year", "=", "value"], "question": "What conferences did li dong submit to in 2016 ?", "question_toks": ["What", "conferences", "did", "li", "dong", "submit", "to", "in", "2016", "?"], "guid": 4038}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | how many ACL 2012 papers have more than 7 citations ?", "sql": "SELECT DISTINCT ( t1.paperid )  ,  COUNT ( t3.citingpaperid ) FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2012 AND t2.venuename  =  \"ACL\" GROUP BY t1.paperid HAVING COUNT ( t3.citingpaperid )  >  7;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT ( t1.paperid )  ,  COUNT ( t3.citingpaperid ) FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2012 AND t2.venuename  =  \"ACL\" GROUP BY t1.paperid HAVING COUNT ( t3.citingpaperid )  >  7;", "query_toks": ["SELECT", "DISTINCT", "(", "t1.paperid", ")", ",", "COUNT", "(", "t3.citingpaperid", ")", "FROM", "paper", "AS", "t1", "JOIN", "cite", "AS", "t3", "ON", "t1.paperid", "=", "t3.citedpaperid", "JOIN", "venue", "AS", "t2", "ON", "t2.venueid", "=", "t1.venueid", "WHERE", "t1.year", "=", "2012", "AND", "t2.venuename", "=", "``", "ACL", "''", "GROUP", "BY", "t1.paperid", "HAVING", "COUNT", "(", "t3.citingpaperid", ")", ">", "7", ";"], "query_toks_no_value": ["select", "distinct", "(", "t1", ".", "paperid", ")", ",", "count", "(", "t3", ".", "citingpaperid", ")", "from", "paper", "as", "t1", "join", "cite", "as", "t3", "on", "t1", ".", "paperid", "=", "t3", ".", "citedpaperid", "join", "venue", "as", "t2", "on", "t2", ".", "venueid", "=", "t1", ".", "venueid", "where", "t1", ".", "year", "=", "value", "and", "t2", ".", "venuename", "=", "value", "group", "by", "t1", ".", "paperid", "having", "count", "(", "t3", ".", "citingpaperid", ")", ">", "value"], "question": "how many ACL 2012 papers have more than 7 citations ?", "question_toks": ["how", "many", "ACL", "2012", "papers", "have", "more", "than", "7", "citations", "?"], "guid": 4039}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the citations of \" Making database systems usable \" .", "sql": "SELECT citation_num FROM publication WHERE title  =  \"Making database systems usable\";", "example": {"db_id": "academic", "query": "SELECT citation_num FROM publication WHERE title  =  \"Making database systems usable\";", "query_toks": ["SELECT", "citation_num", "FROM", "publication", "WHERE", "title", "=", "``", "Making", "database", "systems", "usable", "''", ";"], "query_toks_no_value": ["select", "citation_num", "from", "publication", "where", "title", "=", "value"], "question": "return me the citations of \" Making database systems usable \" .", "question_toks": ["return", "me", "the", "citations", "of", "``", "Making", "database", "systems", "usable", "``", "."], "guid": 4040}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the number of references of \" Making database systems usable \" .", "sql": "SELECT reference_num FROM publication WHERE title  =  \"Making database systems usable\";", "example": {"db_id": "academic", "query": "SELECT reference_num FROM publication WHERE title  =  \"Making database systems usable\";", "query_toks": ["SELECT", "reference_num", "FROM", "publication", "WHERE", "title", "=", "``", "Making", "database", "systems", "usable", "''", ";"], "query_toks_no_value": ["select", "reference_num", "from", "publication", "where", "title", "=", "value"], "question": "return me the number of references of \" Making database systems usable \" .", "question_toks": ["return", "me", "the", "number", "of", "references", "of", "``", "Making", "database", "systems", "usable", "``", "."], "guid": 4041}}
{"text": "Document_Types: document_type_code, document_description; Documents: document_id, document_type_code, grant_id, sent_date, response_received_date, other_details; Grants: grant_id, organisation_id, grant_amount, grant_start_date, grant_end_date, other_details; Organisation_Types: organisation_type, organisation_type_description; Organisations: organisation_id, organisation_type, organisation_details; Project_Outcomes: project_id, outcome_code, outcome_details; Project_Staff: staff_id, project_id, role_code, date_from, date_to, other_details; Projects: project_id, organisation_id, project_details; Research_Outcomes: outcome_code, outcome_description; Research_Staff: staff_id, employer_organisation_id, staff_details | What details are there on the research staff? List the result in ascending alphabetical order.", "sql": "SELECT staff_details FROM Research_Staff ORDER BY staff_details ASC", "example": {"db_id": "tracking_grants_for_research", "query": "SELECT staff_details FROM Research_Staff ORDER BY staff_details ASC", "query_toks": ["SELECT", "staff_details", "FROM", "Research_Staff", "ORDER", "BY", "staff_details", "ASC"], "query_toks_no_value": ["select", "staff_details", "from", "research_staff", "order", "by", "staff_details", "asc"], "question": "What details are there on the research staff? List the result in ascending alphabetical order.", "question_toks": ["What", "details", "are", "there", "on", "the", "research", "staff", "?", "List", "the", "result", "in", "ascending", "alphabetical", "order", "."], "guid": 4042}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | number of papers written by Christopher D. Manning", "sql": "SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christopher D. Manning\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christopher D. Manning\";", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "DISTINCT", "t2.paperid", ")", "FROM", "writes", "AS", "t2", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "WHERE", "t1.authorname", "=", "``", "Christopher", "D.", "Manning", "''", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "distinct", "t2", ".", "paperid", ")", "from", "writes", "as", "t2", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "where", "t1", ".", "authorname", "=", "value"], "question": "number of papers written by Christopher D. Manning", "question_toks": ["number", "of", "papers", "written", "by", "Christopher", "D.", "Manning"], "guid": 4043}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | who are all the co-authors of Noah A Smith ?", "sql": "SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Noah A Smith\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Noah A Smith\";", "query_toks": ["SELECT", "DISTINCT", "t1.authorid", "FROM", "writes", "AS", "t3", "JOIN", "author", "AS", "t2", "ON", "t3.authorid", "=", "t2.authorid", "JOIN", "writes", "AS", "t4", "ON", "t4.paperid", "=", "t3.paperid", "JOIN", "author", "AS", "t1", "ON", "t4.authorid", "=", "t1.authorid", "WHERE", "t2.authorname", "=", "``", "Noah", "A", "Smith", "''", ";"], "query_toks_no_value": ["select", "distinct", "t1", ".", "authorid", "from", "writes", "as", "t3", "join", "author", "as", "t2", "on", "t3", ".", "authorid", "=", "t2", ".", "authorid", "join", "writes", "as", "t4", "on", "t4", ".", "paperid", "=", "t3", ".", "paperid", "join", "author", "as", "t1", "on", "t4", ".", "authorid", "=", "t1", ".", "authorid", "where", "t2", ".", "authorname", "=", "value"], "question": "who are all the co-authors of Noah A Smith ?", "question_toks": ["who", "are", "all", "the", "co-authors", "of", "Noah", "A", "Smith", "?"], "guid": 4044}}
{"text": "Inst: instID, name, country; Authors: authID, lname, fname; Papers: paperID, title; Authorship: authID, instID, paperID, authOrder | Find the titles of the papers that contain the word \"ML\".", "sql": "SELECT title FROM papers WHERE title LIKE \"%ML%\"", "example": {"db_id": "icfp_1", "query": "SELECT title FROM papers WHERE title LIKE \"%ML%\"", "query_toks": ["SELECT", "title", "FROM", "papers", "WHERE", "title", "LIKE", "``", "%", "ML", "%", "''"], "query_toks_no_value": ["select", "title", "from", "papers", "where", "title", "like", "value"], "question": "Find the titles of the papers that contain the word \"ML\".", "question_toks": ["Find", "the", "titles", "of", "the", "papers", "that", "contain", "the", "word", "``", "ML", "''", "."], "guid": 4045}}
{"text": "book_club: book_club_id, Year, Author_or_Editor, Book_Title, Publisher, Category, Result; movie: movie_id, Title, Year, Director, Budget_million, Gross_worldwide; culture_company: Company_name, Type, Incorporated_in, Group_Equity_Shareholding, book_club_id, movie_id | What categories have two or more corresponding books that were made after 1989?", "sql": "SELECT category FROM book_club WHERE YEAR  >  1989 GROUP BY category HAVING count(*)  >=  2", "example": {"db_id": "culture_company", "query": "SELECT category FROM book_club WHERE YEAR  >  1989 GROUP BY category HAVING count(*)  >=  2", "query_toks": ["SELECT", "category", "FROM", "book_club", "WHERE", "YEAR", ">", "1989", "GROUP", "BY", "category", "HAVING", "count", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "category", "from", "book_club", "where", "year", ">", "value", "group", "by", "category", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "What categories have two or more corresponding books that were made after 1989?", "question_toks": ["What", "categories", "have", "two", "or", "more", "corresponding", "books", "that", "were", "made", "after", "1989", "?"], "guid": 4046}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | keyphrases used by dan klein in his emnlp papers", "sql": "SELECT DISTINCT t2.keyphraseid FROM paper AS t3 JOIN paperkeyphrase AS t2 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid JOIN writes AS t5 ON t5.paperid  =  t3.paperid JOIN author AS t1 ON t5.authorid  =  t1.authorid WHERE t1.authorname  =  \"dan klein\" AND t4.venuename  =  \"emnlp\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t2.keyphraseid FROM paper AS t3 JOIN paperkeyphrase AS t2 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid JOIN writes AS t5 ON t5.paperid  =  t3.paperid JOIN author AS t1 ON t5.authorid  =  t1.authorid WHERE t1.authorname  =  \"dan klein\" AND t4.venuename  =  \"emnlp\";", "query_toks": ["SELECT", "DISTINCT", "t2.keyphraseid", "FROM", "paper", "AS", "t3", "JOIN", "paperkeyphrase", "AS", "t2", "ON", "t3.paperid", "=", "t2.paperid", "JOIN", "venue", "AS", "t4", "ON", "t4.venueid", "=", "t3.venueid", "JOIN", "writes", "AS", "t5", "ON", "t5.paperid", "=", "t3.paperid", "JOIN", "author", "AS", "t1", "ON", "t5.authorid", "=", "t1.authorid", "WHERE", "t1.authorname", "=", "``", "dan", "klein", "''", "AND", "t4.venuename", "=", "``", "emnlp", "''", ";"], "query_toks_no_value": ["select", "distinct", "t2", ".", "keyphraseid", "from", "paper", "as", "t3", "join", "paperkeyphrase", "as", "t2", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "join", "venue", "as", "t4", "on", "t4", ".", "venueid", "=", "t3", ".", "venueid", "join", "writes", "as", "t5", "on", "t5", ".", "paperid", "=", "t3", ".", "paperid", "join", "author", "as", "t1", "on", "t5", ".", "authorid", "=", "t1", ".", "authorid", "where", "t1", ".", "authorname", "=", "value", "and", "t4", ".", "venuename", "=", "value"], "question": "keyphrases used by dan klein in his emnlp papers", "question_toks": ["keyphrases", "used", "by", "dan", "klein", "in", "his", "emnlp", "papers"], "guid": 4047}}
{"text": "Inst: instID, name, country; Authors: authID, lname, fname; Papers: paperID, title; Authorship: authID, instID, paperID, authOrder | Find the titles of the papers the author \"Stephanie Weirich\" wrote.", "sql": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t1.fname  =  \"Stephanie\" AND t1.lname  =  \"Weirich\"", "example": {"db_id": "icfp_1", "query": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t1.fname  =  \"Stephanie\" AND t1.lname  =  \"Weirich\"", "query_toks": ["SELECT", "t3.title", "FROM", "authors", "AS", "t1", "JOIN", "authorship", "AS", "t2", "ON", "t1.authid", "=", "t2.authid", "JOIN", "papers", "AS", "t3", "ON", "t2.paperid", "=", "t3.paperid", "WHERE", "t1.fname", "=", "``", "Stephanie", "''", "AND", "t1.lname", "=", "``", "Weirich", "''"], "query_toks_no_value": ["select", "t3", ".", "title", "from", "authors", "as", "t1", "join", "authorship", "as", "t2", "on", "t1", ".", "authid", "=", "t2", ".", "authid", "join", "papers", "as", "t3", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "where", "t1", ".", "fname", "=", "value", "and", "t1", ".", "lname", "=", "value"], "question": "Find the titles of the papers the author \"Stephanie Weirich\" wrote.", "question_toks": ["Find", "the", "titles", "of", "the", "papers", "the", "author", "``", "Stephanie", "Weirich", "''", "wrote", "."], "guid": 4048}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | parsing top papers", "sql": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"parsing\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"parsing\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;", "query_toks": ["SELECT", "DISTINCT", "t4.citedpaperid", ",", "COUNT", "(", "t4.citedpaperid", ")", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "JOIN", "cite", "AS", "t4", "ON", "t3.paperid", "=", "t4.citedpaperid", "WHERE", "t1.keyphrasename", "=", "``", "parsing", "''", "GROUP", "BY", "t4.citedpaperid", "ORDER", "BY", "COUNT", "(", "t4.citedpaperid", ")", "DESC", ";"], "query_toks_no_value": ["select", "distinct", "t4", ".", "citedpaperid", ",", "count", "(", "t4", ".", "citedpaperid", ")", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "join", "cite", "as", "t4", "on", "t3", ".", "paperid", "=", "t4", ".", "citedpaperid", "where", "t1", ".", "keyphrasename", "=", "value", "group", "by", "t4", ".", "citedpaperid", "order", "by", "count", "(", "t4", ".", "citedpaperid", ")", "desc"], "question": "parsing top papers", "question_toks": ["parsing", "top", "papers"], "guid": 4049}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | highly cited parsing papers", "sql": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"parsing\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"parsing\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;", "query_toks": ["SELECT", "DISTINCT", "t4.citedpaperid", ",", "COUNT", "(", "t4.citedpaperid", ")", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "JOIN", "cite", "AS", "t4", "ON", "t3.paperid", "=", "t4.citedpaperid", "WHERE", "t1.keyphrasename", "=", "``", "parsing", "''", "GROUP", "BY", "t4.citedpaperid", "ORDER", "BY", "COUNT", "(", "t4.citedpaperid", ")", "DESC", ";"], "query_toks_no_value": ["select", "distinct", "t4", ".", "citedpaperid", ",", "count", "(", "t4", ".", "citedpaperid", ")", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "join", "cite", "as", "t4", "on", "t3", ".", "paperid", "=", "t4", ".", "citedpaperid", "where", "t1", ".", "keyphrasename", "=", "value", "group", "by", "t4", ".", "citedpaperid", "order", "by", "count", "(", "t4", ".", "citedpaperid", ")", "desc"], "question": "highly cited parsing papers", "question_toks": ["highly", "cited", "parsing", "papers"], "guid": 4050}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the papers by \" H. V. Jagadish \" on VLDB conference after 2000 .", "sql": "SELECT t4.title FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\" AND t2.name  =  \"VLDB\" AND t4.year  >  2000;", "example": {"db_id": "academic", "query": "SELECT t4.title FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\" AND t2.name  =  \"VLDB\" AND t4.year  >  2000;", "query_toks": ["SELECT", "t4.title", "FROM", "publication", "AS", "t4", "JOIN", "conference", "AS", "t2", "ON", "t4.cid", "=", "t2.cid", "JOIN", "writes", "AS", "t3", "ON", "t3.pid", "=", "t4.pid", "JOIN", "author", "AS", "t1", "ON", "t3.aid", "=", "t1.aid", "WHERE", "t1.name", "=", "``", "H.", "V.", "Jagadish", "''", "AND", "t2.name", "=", "``", "VLDB", "''", "AND", "t4.year", ">", "2000", ";"], "query_toks_no_value": ["select", "t4", ".", "title", "from", "publication", "as", "t4", "join", "conference", "as", "t2", "on", "t4", ".", "cid", "=", "t2", ".", "cid", "join", "writes", "as", "t3", "on", "t3", ".", "pid", "=", "t4", ".", "pid", "join", "author", "as", "t1", "on", "t3", ".", "aid", "=", "t1", ".", "aid", "where", "t1", ".", "name", "=", "value", "and", "t2", ".", "name", "=", "value", "and", "t4", ".", "year", ">", "value"], "question": "return me the papers by \" H. V. Jagadish \" on VLDB conference after 2000 .", "question_toks": ["return", "me", "the", "papers", "by", "``", "H.", "V.", "Jagadish", "``", "on", "VLDB", "conference", "after", "2000", "."], "guid": 4051}}
{"text": "Inst: instID, name, country; Authors: authID, lname, fname; Papers: paperID, title; Authorship: authID, instID, paperID, authOrder | How many papers are published by the institution \"Tokohu University\"?", "sql": "SELECT count(DISTINCT t1.title) FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Tokohu University\"", "example": {"db_id": "icfp_1", "query": "SELECT count(DISTINCT t1.title) FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Tokohu University\"", "query_toks": ["SELECT", "count", "(", "DISTINCT", "t1.title", ")", "FROM", "papers", "AS", "t1", "JOIN", "authorship", "AS", "t2", "ON", "t1.paperid", "=", "t2.paperid", "JOIN", "inst", "AS", "t3", "ON", "t2.instid", "=", "t3.instid", "WHERE", "t3.name", "=", "``", "Tokohu", "University", "''"], "query_toks_no_value": ["select", "count", "(", "distinct", "t1", ".", "title", ")", "from", "papers", "as", "t1", "join", "authorship", "as", "t2", "on", "t1", ".", "paperid", "=", "t2", ".", "paperid", "join", "inst", "as", "t3", "on", "t2", ".", "instid", "=", "t3", ".", "instid", "where", "t3", ".", "name", "=", "value"], "question": "How many papers are published by the institution \"Tokohu University\"?", "question_toks": ["How", "many", "papers", "are", "published", "by", "the", "institution", "``", "Tokohu", "University", "''", "?"], "guid": 4052}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | authors of acl 2016 papers", "sql": "SELECT DISTINCT t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2016 AND t3.venuename  =  \"acl\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2016 AND t3.venuename  =  \"acl\";", "query_toks": ["SELECT", "DISTINCT", "t1.authorid", "FROM", "venue", "AS", "t3", "JOIN", "paper", "AS", "t2", "ON", "t3.venueid", "=", "t2.venueid", "JOIN", "writes", "AS", "t1", "ON", "t1.paperid", "=", "t2.paperid", "WHERE", "t2.year", "=", "2016", "AND", "t3.venuename", "=", "``", "acl", "''", ";"], "query_toks_no_value": ["select", "distinct", "t1", ".", "authorid", "from", "venue", "as", "t3", "join", "paper", "as", "t2", "on", "t3", ".", "venueid", "=", "t2", ".", "venueid", "join", "writes", "as", "t1", "on", "t1", ".", "paperid", "=", "t2", ".", "paperid", "where", "t2", ".", "year", "=", "value", "and", "t3", ".", "venuename", "=", "value"], "question": "authors of acl 2016 papers", "question_toks": ["authors", "of", "acl", "2016", "papers"], "guid": 4053}}
{"text": "journal: Journal_ID, Date, Theme, Sales; editor: Editor_ID, Name, Age; journal_committee: Editor_ID, Journal_ID, Work_Type | What is the name of the youngest editor?", "sql": "SELECT Name FROM editor ORDER BY Age ASC LIMIT 1", "example": {"db_id": "journal_committee", "query": "SELECT Name FROM editor ORDER BY Age ASC LIMIT 1", "query_toks": ["SELECT", "Name", "FROM", "editor", "ORDER", "BY", "Age", "ASC", "LIMIT", "1"], "query_toks_no_value": ["select", "name", "from", "editor", "order", "by", "age", "asc", "limit", "value"], "question": "What is the name of the youngest editor?", "question_toks": ["What", "is", "the", "name", "of", "the", "youngest", "editor", "?"], "guid": 4054}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | semantic parsing dataset", "sql": "SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  \"semantic parsing\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  \"semantic parsing\";", "query_toks": ["SELECT", "DISTINCT", "t2.datasetid", "FROM", "paperdataset", "AS", "t3", "JOIN", "dataset", "AS", "t2", "ON", "t3.datasetid", "=", "t2.datasetid", "JOIN", "paperkeyphrase", "AS", "t1", "ON", "t1.paperid", "=", "t3.paperid", "JOIN", "keyphrase", "AS", "t4", "ON", "t1.keyphraseid", "=", "t4.keyphraseid", "WHERE", "t4.keyphrasename", "=", "``", "semantic", "parsing", "''", ";"], "query_toks_no_value": ["select", "distinct", "t2", ".", "datasetid", "from", "paperdataset", "as", "t3", "join", "dataset", "as", "t2", "on", "t3", ".", "datasetid", "=", "t2", ".", "datasetid", "join", "paperkeyphrase", "as", "t1", "on", "t1", ".", "paperid", "=", "t3", ".", "paperid", "join", "keyphrase", "as", "t4", "on", "t1", ".", "keyphraseid", "=", "t4", ".", "keyphraseid", "where", "t4", ".", "keyphrasename", "=", "value"], "question": "semantic parsing dataset", "question_toks": ["semantic", "parsing", "dataset"], "guid": 4055}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | how many papers does David M. Blei have at AISTATS", "sql": "SELECT DISTINCT COUNT ( t3.paperid ) FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"David M. Blei\" AND t4.venuename  =  \"AISTATS\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( t3.paperid ) FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"David M. Blei\" AND t4.venuename  =  \"AISTATS\";", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "t3.paperid", ")", "FROM", "venue", "AS", "t4", "JOIN", "paper", "AS", "t3", "ON", "t4.venueid", "=", "t3.venueid", "JOIN", "writes", "AS", "t2", "ON", "t2.paperid", "=", "t3.paperid", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "WHERE", "t1.authorname", "=", "``", "David", "M.", "Blei", "''", "AND", "t4.venuename", "=", "``", "AISTATS", "''", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "t3", ".", "paperid", ")", "from", "venue", "as", "t4", "join", "paper", "as", "t3", "on", "t4", ".", "venueid", "=", "t3", ".", "venueid", "join", "writes", "as", "t2", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "where", "t1", ".", "authorname", "=", "value", "and", "t4", ".", "venuename", "=", "value"], "question": "how many papers does David M. Blei have at AISTATS", "question_toks": ["how", "many", "papers", "does", "David", "M.", "Blei", "have", "at", "AISTATS"], "guid": 4056}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the journals, which have more than 10 papers by \" H. V. Jagadish \" .", "sql": "SELECT t2.name FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\" GROUP BY t2.name HAVING COUNT ( DISTINCT t4.title )  >  10;", "example": {"db_id": "academic", "query": "SELECT t2.name FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\" GROUP BY t2.name HAVING COUNT ( DISTINCT t4.title )  >  10;", "query_toks": ["SELECT", "t2.name", "FROM", "publication", "AS", "t4", "JOIN", "journal", "AS", "t2", "ON", "t4.jid", "=", "t2.jid", "JOIN", "writes", "AS", "t3", "ON", "t3.pid", "=", "t4.pid", "JOIN", "author", "AS", "t1", "ON", "t3.aid", "=", "t1.aid", "WHERE", "t1.name", "=", "``", "H.", "V.", "Jagadish", "''", "GROUP", "BY", "t2.name", "HAVING", "COUNT", "(", "DISTINCT", "t4.title", ")", ">", "10", ";"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "publication", "as", "t4", "join", "journal", "as", "t2", "on", "t4", ".", "jid", "=", "t2", ".", "jid", "join", "writes", "as", "t3", "on", "t3", ".", "pid", "=", "t4", ".", "pid", "join", "author", "as", "t1", "on", "t3", ".", "aid", "=", "t1", ".", "aid", "where", "t1", ".", "name", "=", "value", "group", "by", "t2", ".", "name", "having", "count", "(", "distinct", "t4", ".", "title", ")", ">", "value"], "question": "return me the journals, which have more than 10 papers by \" H. V. Jagadish \" .", "question_toks": ["return", "me", "the", "journals", ",", "which", "have", "more", "than", "10", "papers", "by", "``", "H.", "V.", "Jagadish", "``", "."], "guid": 4057}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | What papers has written by sharon goldwater ?", "sql": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";", "query_toks": ["SELECT", "DISTINCT", "t2.paperid", "FROM", "writes", "AS", "t2", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "WHERE", "t1.authorname", "=", "``", "sharon", "goldwater", "''", ";"], "query_toks_no_value": ["select", "distinct", "t2", ".", "paperid", "from", "writes", "as", "t2", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "where", "t1", ".", "authorname", "=", "value"], "question": "What papers has written by sharon goldwater ?", "question_toks": ["What", "papers", "has", "written", "by", "sharon", "goldwater", "?"], "guid": 4058}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | papers on Question Answering", "sql": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "WHERE", "t1.keyphrasename", "=", "``", "Question", "Answering", "''", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "where", "t1", ".", "keyphrasename", "=", "value"], "question": "papers on Question Answering", "question_toks": ["papers", "on", "Question", "Answering"], "guid": 4059}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | How many co-authors has Mark Steedman had ?", "sql": "SELECT DISTINCT COUNT ( DISTINCT t1.authorid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname != \"Mark Steedman\" AND t2.paperid IN ( SELECT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Mark Steedman\" );", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( DISTINCT t1.authorid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname != \"Mark Steedman\" AND t2.paperid IN ( SELECT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Mark Steedman\" );", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "DISTINCT", "t1.authorid", ")", "FROM", "writes", "AS", "t2", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "WHERE", "t1.authorname", "!", "=", "``", "Mark", "Steedman", "''", "AND", "t2.paperid", "IN", "(", "SELECT", "t2.paperid", "FROM", "writes", "AS", "t2", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "WHERE", "t1.authorname", "=", "``", "Mark", "Steedman", "''", ")", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "distinct", "t1", ".", "authorid", ")", "from", "writes", "as", "t2", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "where", "t1", ".", "authorname", "!", "=", "value", "and", "t2", ".", "paperid", "in", "(", "select", "t2", ".", "paperid", "from", "writes", "as", "t2", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "where", "t1", ".", "authorname", "=", "value", ")"], "question": "How many co-authors has Mark Steedman had ?", "question_toks": ["How", "many", "co-authors", "has", "Mark", "Steedman", "had", "?"], "guid": 4060}}
{"text": "Scientists: SSN, Name; Projects: Code, Name, Hours; AssignedTo: Scientist, Project | Find the name and hours of project that has the most number of scientists.", "sql": "SELECT T1.name ,  T1.hours FROM projects AS T1 JOIN assignedto AS T2 ON T1.code  =  T2.project GROUP BY T2.project ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "scientist_1", "query": "SELECT T1.name ,  T1.hours FROM projects AS T1 JOIN assignedto AS T2 ON T1.code  =  T2.project GROUP BY T2.project ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.name", ",", "T1.hours", "FROM", "projects", "AS", "T1", "JOIN", "assignedto", "AS", "T2", "ON", "T1.code", "=", "T2.project", "GROUP", "BY", "T2.project", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "t1", ".", "hours", "from", "projects", "as", "t1", "join", "assignedto", "as", "t2", "on", "t1", ".", "code", "=", "t2", ".", "project", "group", "by", "t2", ".", "project", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Find the name and hours of project that has the most number of scientists.", "question_toks": ["Find", "the", "name", "and", "hours", "of", "project", "that", "has", "the", "most", "number", "of", "scientists", "."], "guid": 4061}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | what papers have fewer than 5 citations by ACL papers ?", "sql": "SELECT DISTINCT t3.citingpaperid FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"ACL\" GROUP BY t3.citingpaperid HAVING COUNT ( DISTINCT t3.citedpaperid )  <  5;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.citingpaperid FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"ACL\" GROUP BY t3.citingpaperid HAVING COUNT ( DISTINCT t3.citedpaperid )  <  5;", "query_toks": ["SELECT", "DISTINCT", "t3.citingpaperid", "FROM", "paper", "AS", "t1", "JOIN", "cite", "AS", "t3", "ON", "t1.paperid", "=", "t3.citedpaperid", "JOIN", "venue", "AS", "t2", "ON", "t2.venueid", "=", "t1.venueid", "WHERE", "t2.venuename", "=", "``", "ACL", "''", "GROUP", "BY", "t3.citingpaperid", "HAVING", "COUNT", "(", "DISTINCT", "t3.citedpaperid", ")", "<", "5", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "citingpaperid", "from", "paper", "as", "t1", "join", "cite", "as", "t3", "on", "t1", ".", "paperid", "=", "t3", ".", "citedpaperid", "join", "venue", "as", "t2", "on", "t2", ".", "venueid", "=", "t1", ".", "venueid", "where", "t2", ".", "venuename", "=", "value", "group", "by", "t3", ".", "citingpaperid", "having", "count", "(", "distinct", "t3", ".", "citedpaperid", ")", "<", "value"], "question": "what papers have fewer than 5 citations by ACL papers ?", "question_toks": ["what", "papers", "have", "fewer", "than", "5", "citations", "by", "ACL", "papers", "?"], "guid": 4062}}
{"text": "book_club: book_club_id, Year, Author_or_Editor, Book_Title, Publisher, Category, Result; movie: movie_id, Title, Year, Director, Budget_million, Gross_worldwide; culture_company: Company_name, Type, Incorporated_in, Group_Equity_Shareholding, book_club_id, movie_id | Show publishers with a book published in 1989 and a book in 1990.", "sql": "SELECT publisher FROM book_club WHERE YEAR  =  1989 INTERSECT SELECT publisher FROM book_club WHERE YEAR  =  1990", "example": {"db_id": "culture_company", "query": "SELECT publisher FROM book_club WHERE YEAR  =  1989 INTERSECT SELECT publisher FROM book_club WHERE YEAR  =  1990", "query_toks": ["SELECT", "publisher", "FROM", "book_club", "WHERE", "YEAR", "=", "1989", "INTERSECT", "SELECT", "publisher", "FROM", "book_club", "WHERE", "YEAR", "=", "1990"], "query_toks_no_value": ["select", "publisher", "from", "book_club", "where", "year", "=", "value", "intersect", "select", "publisher", "from", "book_club", "where", "year", "=", "value"], "question": "Show publishers with a book published in 1989 and a book in 1990.", "question_toks": ["Show", "publishers", "with", "a", "book", "published", "in", "1989", "and", "a", "book", "in", "1990", "."], "guid": 4063}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | How many papers are in deep learning ?", "sql": "SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\";", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "DISTINCT", "t3.paperid", ")", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "WHERE", "t1.keyphrasename", "=", "``", "deep", "learning", "''", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "distinct", "t3", ".", "paperid", ")", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "where", "t1", ".", "keyphrasename", "=", "value"], "question": "How many papers are in deep learning ?", "question_toks": ["How", "many", "papers", "are", "in", "deep", "learning", "?"], "guid": 4064}}
{"text": "Inst: instID, name, country; Authors: authID, lname, fname; Papers: paperID, title; Authorship: authID, instID, paperID, authOrder | Find the titles of all the papers written by \"Aaron Turon\".", "sql": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  \"Aaron\" AND t1.lname  =  \"Turon\"", "example": {"db_id": "icfp_1", "query": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  \"Aaron\" AND t1.lname  =  \"Turon\"", "query_toks": ["SELECT", "t3.title", "FROM", "authors", "AS", "t1", "JOIN", "authorship", "AS", "t2", "ON", "t1.authid", "=", "t2.authid", "JOIN", "papers", "AS", "t3", "ON", "t2.paperid", "=", "t3.paperid", "WHERE", "t1.fname", "=", "``", "Aaron", "''", "AND", "t1.lname", "=", "``", "Turon", "''"], "query_toks_no_value": ["select", "t3", ".", "title", "from", "authors", "as", "t1", "join", "authorship", "as", "t2", "on", "t1", ".", "authid", "=", "t2", ".", "authid", "join", "papers", "as", "t3", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "where", "t1", ".", "fname", "=", "value", "and", "t1", ".", "lname", "=", "value"], "question": "Find the titles of all the papers written by \"Aaron Turon\".", "question_toks": ["Find", "the", "titles", "of", "all", "the", "papers", "written", "by", "``", "Aaron", "Turon", "''", "."], "guid": 4065}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | keyphrases by Luke Zettlemoyer", "sql": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";", "query_toks": ["SELECT", "DISTINCT", "t1.keyphraseid", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "JOIN", "writes", "AS", "t4", "ON", "t4.paperid", "=", "t3.paperid", "JOIN", "author", "AS", "t5", "ON", "t4.authorid", "=", "t5.authorid", "WHERE", "t5.authorname", "=", "``", "Luke", "Zettlemoyer", "''", ";"], "query_toks_no_value": ["select", "distinct", "t1", ".", "keyphraseid", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "join", "writes", "as", "t4", "on", "t4", ".", "paperid", "=", "t3", ".", "paperid", "join", "author", "as", "t5", "on", "t4", ".", "authorid", "=", "t5", ".", "authorid", "where", "t5", ".", "authorname", "=", "value"], "question": "keyphrases by Luke Zettlemoyer", "question_toks": ["keyphrases", "by", "Luke", "Zettlemoyer"], "guid": 4066}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | How many papers does Christopher D. Manning have ?", "sql": "SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christopher D. Manning\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christopher D. Manning\";", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "DISTINCT", "t2.paperid", ")", "FROM", "writes", "AS", "t2", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "WHERE", "t1.authorname", "=", "``", "Christopher", "D.", "Manning", "''", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "distinct", "t2", ".", "paperid", ")", "from", "writes", "as", "t2", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "where", "t1", ".", "authorname", "=", "value"], "question": "How many papers does Christopher D. Manning have ?", "question_toks": ["How", "many", "papers", "does", "Christopher", "D.", "Manning", "have", "?"], "guid": 4067}}
{"text": "Inst: instID, name, country; Authors: authID, lname, fname; Papers: paperID, title; Authorship: authID, instID, paperID, authOrder | Retrieve all the last names of authors in alphabetical order.", "sql": "SELECT lname FROM authors ORDER BY lname", "example": {"db_id": "icfp_1", "query": "SELECT lname FROM authors ORDER BY lname", "query_toks": ["SELECT", "lname", "FROM", "authors", "ORDER", "BY", "lname"], "query_toks_no_value": ["select", "lname", "from", "authors", "order", "by", "lname"], "question": "Retrieve all the last names of authors in alphabetical order.", "question_toks": ["Retrieve", "all", "the", "last", "names", "of", "authors", "in", "alphabetical", "order", "."], "guid": 4068}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | papers that are coauthored by Peter Mertens and Dina Barbian", "sql": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "writes", "AS", "t3", "JOIN", "author", "AS", "t2", "ON", "t3.authorid", "=", "t2.authorid", "JOIN", "writes", "AS", "t4", "ON", "t4.paperid", "=", "t3.paperid", "JOIN", "author", "AS", "t1", "ON", "t4.authorid", "=", "t1.authorid", "WHERE", "t2.authorname", "=", "``", "Peter", "Mertens", "''", "AND", "t1.authorname", "=", "``", "Dina", "Barbian", "''", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "writes", "as", "t3", "join", "author", "as", "t2", "on", "t3", ".", "authorid", "=", "t2", ".", "authorid", "join", "writes", "as", "t4", "on", "t4", ".", "paperid", "=", "t3", ".", "paperid", "join", "author", "as", "t1", "on", "t4", ".", "authorid", "=", "t1", ".", "authorid", "where", "t2", ".", "authorname", "=", "value", "and", "t1", ".", "authorname", "=", "value"], "question": "papers that are coauthored by Peter Mertens and Dina Barbian", "question_toks": ["papers", "that", "are", "coauthored", "by", "Peter", "Mertens", "and", "Dina", "Barbian"], "guid": 4069}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | When did Luke S Zettlemoyer publish ?", "sql": "SELECT DISTINCT t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Luke S Zettlemoyer\" ORDER BY t3.year;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Luke S Zettlemoyer\" ORDER BY t3.year;", "query_toks": ["SELECT", "DISTINCT", "t3.year", "FROM", "writes", "AS", "t2", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "JOIN", "paper", "AS", "t3", "ON", "t2.paperid", "=", "t3.paperid", "WHERE", "t1.authorname", "=", "``", "Luke", "S", "Zettlemoyer", "''", "ORDER", "BY", "t3.year", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "year", "from", "writes", "as", "t2", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "join", "paper", "as", "t3", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "where", "t1", ".", "authorname", "=", "value", "order", "by", "t3", ".", "year"], "question": "When did Luke S Zettlemoyer publish ?", "question_toks": ["When", "did", "Luke", "S", "Zettlemoyer", "publish", "?"], "guid": 4070}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | Most recent deep learning conference ?", "sql": "SELECT DISTINCT t3.paperid  ,  t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\" ORDER BY t3.year DESC;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid  ,  t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\" ORDER BY t3.year DESC;", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", ",", "t3.year", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "WHERE", "t1.keyphrasename", "=", "``", "deep", "learning", "''", "ORDER", "BY", "t3.year", "DESC", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", ",", "t3", ".", "year", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "where", "t1", ".", "keyphrasename", "=", "value", "order", "by", "t3", ".", "year", "desc"], "question": "Most recent deep learning conference ?", "question_toks": ["Most", "recent", "deep", "learning", "conference", "?"], "guid": 4071}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | How many papers related to deep reinforcement learning in nips ?", "sql": "SELECT DISTINCT COUNT ( t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"deep reinforcement learning\" AND t4.venuename  =  \"nips\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"deep reinforcement learning\" AND t4.venuename  =  \"nips\";", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "t3.paperid", ")", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "JOIN", "venue", "AS", "t4", "ON", "t4.venueid", "=", "t3.venueid", "WHERE", "t1.keyphrasename", "=", "``", "deep", "reinforcement", "learning", "''", "AND", "t4.venuename", "=", "``", "nips", "''", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "t3", ".", "paperid", ")", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "join", "venue", "as", "t4", "on", "t4", ".", "venueid", "=", "t3", ".", "venueid", "where", "t1", ".", "keyphrasename", "=", "value", "and", "t4", ".", "venuename", "=", "value"], "question": "How many papers related to deep reinforcement learning in nips ?", "question_toks": ["How", "many", "papers", "related", "to", "deep", "reinforcement", "learning", "in", "nips", "?"], "guid": 4072}}
{"text": "Inst: instID, name, country; Authors: authID, lname, fname; Papers: paperID, title; Authorship: authID, instID, paperID, authOrder | Sort the first names of all the authors in alphabetical order.", "sql": "SELECT fname FROM authors ORDER BY fname", "example": {"db_id": "icfp_1", "query": "SELECT fname FROM authors ORDER BY fname", "query_toks": ["SELECT", "fname", "FROM", "authors", "ORDER", "BY", "fname"], "query_toks_no_value": ["select", "fname", "from", "authors", "order", "by", "fname"], "question": "Sort the first names of all the authors in alphabetical order.", "question_toks": ["Sort", "the", "first", "names", "of", "all", "the", "authors", "in", "alphabetical", "order", "."], "guid": 4073}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | In what scholarly journals does Takashi Matsumoto publish ?", "sql": "SELECT DISTINCT t3.journalid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Takashi Matsumoto\" GROUP BY t3.journalid;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.journalid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Takashi Matsumoto\" GROUP BY t3.journalid;", "query_toks": ["SELECT", "DISTINCT", "t3.journalid", "FROM", "writes", "AS", "t2", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "JOIN", "paper", "AS", "t3", "ON", "t2.paperid", "=", "t3.paperid", "WHERE", "t1.authorname", "=", "``", "Takashi", "Matsumoto", "''", "GROUP", "BY", "t3.journalid", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "journalid", "from", "writes", "as", "t2", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "join", "paper", "as", "t3", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "where", "t1", ".", "authorname", "=", "value", "group", "by", "t3", ".", "journalid"], "question": "In what scholarly journals does Takashi Matsumoto publish ?", "question_toks": ["In", "what", "scholarly", "journals", "does", "Takashi", "Matsumoto", "publish", "?"], "guid": 4074}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | Which authors published papers in 2015 ?", "sql": "SELECT DISTINCT t1.authorid FROM writes AS t1 JOIN paper AS t2 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2015;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t1.authorid FROM writes AS t1 JOIN paper AS t2 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2015;", "query_toks": ["SELECT", "DISTINCT", "t1.authorid", "FROM", "writes", "AS", "t1", "JOIN", "paper", "AS", "t2", "ON", "t1.paperid", "=", "t2.paperid", "WHERE", "t2.year", "=", "2015", ";"], "query_toks_no_value": ["select", "distinct", "t1", ".", "authorid", "from", "writes", "as", "t1", "join", "paper", "as", "t2", "on", "t1", ".", "paperid", "=", "t2", ".", "paperid", "where", "t2", ".", "year", "=", "value"], "question": "Which authors published papers in 2015 ?", "question_toks": ["Which", "authors", "published", "papers", "in", "2015", "?"], "guid": 4075}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | What papers were published at acl in 2012 were about Parsing ?", "sql": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Parsing\" AND t3.year  =  2012 AND t4.venuename  =  \"acl\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Parsing\" AND t3.year  =  2012 AND t4.venuename  =  \"acl\";", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "JOIN", "venue", "AS", "t4", "ON", "t4.venueid", "=", "t3.venueid", "WHERE", "t1.keyphrasename", "=", "``", "Parsing", "''", "AND", "t3.year", "=", "2012", "AND", "t4.venuename", "=", "``", "acl", "''", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "join", "venue", "as", "t4", "on", "t4", ".", "venueid", "=", "t3", ".", "venueid", "where", "t1", ".", "keyphrasename", "=", "value", "and", "t3", ".", "year", "=", "value", "and", "t4", ".", "venuename", "=", "value"], "question": "What papers were published at acl in 2012 were about Parsing ?", "question_toks": ["What", "papers", "were", "published", "at", "acl", "in", "2012", "were", "about", "Parsing", "?"], "guid": 4076}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me all the organizations .", "sql": "SELECT name FROM organization;", "example": {"db_id": "academic", "query": "SELECT name FROM organization;", "query_toks": ["SELECT", "name", "FROM", "organization", ";"], "query_toks_no_value": ["select", "name", "from", "organization"], "question": "return me all the organizations .", "question_toks": ["return", "me", "all", "the", "organizations", "."], "guid": 4077}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | papers by authors Peter Mertens and Dina Barbian", "sql": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "writes", "AS", "t3", "JOIN", "author", "AS", "t2", "ON", "t3.authorid", "=", "t2.authorid", "JOIN", "writes", "AS", "t4", "ON", "t4.paperid", "=", "t3.paperid", "JOIN", "author", "AS", "t1", "ON", "t4.authorid", "=", "t1.authorid", "WHERE", "t2.authorname", "=", "``", "Peter", "Mertens", "''", "AND", "t1.authorname", "=", "``", "Dina", "Barbian", "''", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "writes", "as", "t3", "join", "author", "as", "t2", "on", "t3", ".", "authorid", "=", "t2", ".", "authorid", "join", "writes", "as", "t4", "on", "t4", ".", "paperid", "=", "t3", ".", "paperid", "join", "author", "as", "t1", "on", "t4", ".", "authorid", "=", "t1", ".", "authorid", "where", "t2", ".", "authorname", "=", "value", "and", "t1", ".", "authorname", "=", "value"], "question": "papers by authors Peter Mertens and Dina Barbian", "question_toks": ["papers", "by", "authors", "Peter", "Mertens", "and", "Dina", "Barbian"], "guid": 4078}}
{"text": "Scientists: SSN, Name; Projects: Code, Name, Hours; AssignedTo: Scientist, Project | What are the names of the scientists, and how many projects are each of them working on?", "sql": "SELECT count(*) ,  T1.name FROM scientists AS T1 JOIN assignedto AS T2 ON T1.ssn  =  T2.scientist GROUP BY T1.name", "example": {"db_id": "scientist_1", "query": "SELECT count(*) ,  T1.name FROM scientists AS T1 JOIN assignedto AS T2 ON T1.ssn  =  T2.scientist GROUP BY T1.name", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "T1.name", "FROM", "scientists", "AS", "T1", "JOIN", "assignedto", "AS", "T2", "ON", "T1.ssn", "=", "T2.scientist", "GROUP", "BY", "T1.name"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "t1", ".", "name", "from", "scientists", "as", "t1", "join", "assignedto", "as", "t2", "on", "t1", ".", "ssn", "=", "t2", ".", "scientist", "group", "by", "t1", ".", "name"], "question": "What are the names of the scientists, and how many projects are each of them working on?", "question_toks": ["What", "are", "the", "names", "of", "the", "scientists", ",", "and", "how", "many", "projects", "are", "each", "of", "them", "working", "on", "?"], "guid": 4079}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the citations of each paper in the VLDB conference .", "sql": "SELECT t2.citation_num FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\";", "example": {"db_id": "academic", "query": "SELECT t2.citation_num FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\";", "query_toks": ["SELECT", "t2.citation_num", "FROM", "publication", "AS", "t2", "JOIN", "conference", "AS", "t1", "ON", "t2.cid", "=", "t1.cid", "WHERE", "t1.name", "=", "``", "VLDB", "''", ";"], "query_toks_no_value": ["select", "t2", ".", "citation_num", "from", "publication", "as", "t2", "join", "conference", "as", "t1", "on", "t2", ".", "cid", "=", "t1", ".", "cid", "where", "t1", ".", "name", "=", "value"], "question": "return me the citations of each paper in the VLDB conference .", "question_toks": ["return", "me", "the", "citations", "of", "each", "paper", "in", "the", "VLDB", "conference", "."], "guid": 4080}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | how many papers are based on ImageNet", "sql": "SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname LIKE \"ImageNet\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname LIKE \"ImageNet\";", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "DISTINCT", "t3.paperid", ")", "FROM", "paperdataset", "AS", "t2", "JOIN", "dataset", "AS", "t1", "ON", "t2.datasetid", "=", "t1.datasetid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "WHERE", "t1.datasetname", "LIKE", "``", "ImageNet", "''", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "distinct", "t3", ".", "paperid", ")", "from", "paperdataset", "as", "t2", "join", "dataset", "as", "t1", "on", "t2", ".", "datasetid", "=", "t1", ".", "datasetid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "where", "t1", ".", "datasetname", "like", "value"], "question": "how many papers are based on ImageNet", "question_toks": ["how", "many", "papers", "are", "based", "on", "ImageNet"], "guid": 4081}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | Who has coauthored with Noah A Smith ?", "sql": "SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Noah A Smith\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Noah A Smith\";", "query_toks": ["SELECT", "DISTINCT", "t1.authorid", "FROM", "writes", "AS", "t3", "JOIN", "author", "AS", "t2", "ON", "t3.authorid", "=", "t2.authorid", "JOIN", "writes", "AS", "t4", "ON", "t4.paperid", "=", "t3.paperid", "JOIN", "author", "AS", "t1", "ON", "t4.authorid", "=", "t1.authorid", "WHERE", "t2.authorname", "=", "``", "Noah", "A", "Smith", "''", ";"], "query_toks_no_value": ["select", "distinct", "t1", ".", "authorid", "from", "writes", "as", "t3", "join", "author", "as", "t2", "on", "t3", ".", "authorid", "=", "t2", ".", "authorid", "join", "writes", "as", "t4", "on", "t4", ".", "paperid", "=", "t3", ".", "paperid", "join", "author", "as", "t1", "on", "t4", ".", "authorid", "=", "t1", ".", "authorid", "where", "t2", ".", "authorname", "=", "value"], "question": "Who has coauthored with Noah A Smith ?", "question_toks": ["Who", "has", "coauthored", "with", "Noah", "A", "Smith", "?"], "guid": 4082}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the number of papers in PVLDB after 2000 in \" University of Michigan \" .", "sql": "SELECT COUNT ( DISTINCT t5.title ) FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid JOIN writes AS t4 ON t4.aid  =  t1.aid JOIN publication AS t5 ON t4.pid  =  t5.pid JOIN journal AS t3 ON t5.jid  =  t3.jid WHERE t3.name  =  \"PVLDB\" AND t2.name  =  \"University of Michigan\" AND t5.year  >  2000;", "example": {"db_id": "academic", "query": "SELECT COUNT ( DISTINCT t5.title ) FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid JOIN writes AS t4 ON t4.aid  =  t1.aid JOIN publication AS t5 ON t4.pid  =  t5.pid JOIN journal AS t3 ON t5.jid  =  t3.jid WHERE t3.name  =  \"PVLDB\" AND t2.name  =  \"University of Michigan\" AND t5.year  >  2000;", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "t5.title", ")", "FROM", "organization", "AS", "t2", "JOIN", "author", "AS", "t1", "ON", "t2.oid", "=", "t1.oid", "JOIN", "writes", "AS", "t4", "ON", "t4.aid", "=", "t1.aid", "JOIN", "publication", "AS", "t5", "ON", "t4.pid", "=", "t5.pid", "JOIN", "journal", "AS", "t3", "ON", "t5.jid", "=", "t3.jid", "WHERE", "t3.name", "=", "``", "PVLDB", "''", "AND", "t2.name", "=", "``", "University", "of", "Michigan", "''", "AND", "t5.year", ">", "2000", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "t5", ".", "title", ")", "from", "organization", "as", "t2", "join", "author", "as", "t1", "on", "t2", ".", "oid", "=", "t1", ".", "oid", "join", "writes", "as", "t4", "on", "t4", ".", "aid", "=", "t1", ".", "aid", "join", "publication", "as", "t5", "on", "t4", ".", "pid", "=", "t5", ".", "pid", "join", "journal", "as", "t3", "on", "t5", ".", "jid", "=", "t3", ".", "jid", "where", "t3", ".", "name", "=", "value", "and", "t2", ".", "name", "=", "value", "and", "t5", ".", "year", ">", "value"], "question": "return me the number of papers in PVLDB after 2000 in \" University of Michigan \" .", "question_toks": ["return", "me", "the", "number", "of", "papers", "in", "PVLDB", "after", "2000", "in", "``", "University", "of", "Michigan", "``", "."], "guid": 4083}}
{"text": "Document_Types: document_type_code, document_description; Documents: document_id, document_type_code, grant_id, sent_date, response_received_date, other_details; Grants: grant_id, organisation_id, grant_amount, grant_start_date, grant_end_date, other_details; Organisation_Types: organisation_type, organisation_type_description; Organisations: organisation_id, organisation_type, organisation_details; Project_Outcomes: project_id, outcome_code, outcome_details; Project_Staff: staff_id, project_id, role_code, date_from, date_to, other_details; Projects: project_id, organisation_id, project_details; Research_Outcomes: outcome_code, outcome_description; Research_Staff: staff_id, employer_organisation_id, staff_details | What is the id of the organization with the maximum number of outcomes and how many outcomes are there?", "sql": "SELECT T1.organisation_id ,  count(*) FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "tracking_grants_for_research", "query": "SELECT T1.organisation_id ,  count(*) FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.organisation_id", ",", "count", "(", "*", ")", "FROM", "Projects", "AS", "T1", "JOIN", "Project_outcomes", "AS", "T2", "ON", "T1.project_id", "=", "T2.project_id", "GROUP", "BY", "T1.organisation_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "organisation_id", ",", "count", "(", "*", ")", "from", "projects", "as", "t1", "join", "project_outcomes", "as", "t2", "on", "t1", ".", "project_id", "=", "t2", ".", "project_id", "group", "by", "t1", ".", "organisation_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the id of the organization with the maximum number of outcomes and how many outcomes are there?", "question_toks": ["What", "is", "the", "id", "of", "the", "organization", "with", "the", "maximum", "number", "of", "outcomes", "and", "how", "many", "outcomes", "are", "there", "?"], "guid": 4084}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the authors who have more than 10 papers in the VLDB conference .", "sql": "SELECT t1.name FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t2.name  =  \"VLDB\" GROUP BY t1.name HAVING COUNT ( DISTINCT t4.title )  >  10;", "example": {"db_id": "academic", "query": "SELECT t1.name FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t2.name  =  \"VLDB\" GROUP BY t1.name HAVING COUNT ( DISTINCT t4.title )  >  10;", "query_toks": ["SELECT", "t1.name", "FROM", "publication", "AS", "t4", "JOIN", "conference", "AS", "t2", "ON", "t4.cid", "=", "t2.cid", "JOIN", "writes", "AS", "t3", "ON", "t3.pid", "=", "t4.pid", "JOIN", "author", "AS", "t1", "ON", "t3.aid", "=", "t1.aid", "WHERE", "t2.name", "=", "``", "VLDB", "''", "GROUP", "BY", "t1.name", "HAVING", "COUNT", "(", "DISTINCT", "t4.title", ")", ">", "10", ";"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "publication", "as", "t4", "join", "conference", "as", "t2", "on", "t4", ".", "cid", "=", "t2", ".", "cid", "join", "writes", "as", "t3", "on", "t3", ".", "pid", "=", "t4", ".", "pid", "join", "author", "as", "t1", "on", "t3", ".", "aid", "=", "t1", ".", "aid", "where", "t2", ".", "name", "=", "value", "group", "by", "t1", ".", "name", "having", "count", "(", "distinct", "t4", ".", "title", ")", ">", "value"], "question": "return me the authors who have more than 10 papers in the VLDB conference .", "question_toks": ["return", "me", "the", "authors", "who", "have", "more", "than", "10", "papers", "in", "the", "VLDB", "conference", "."], "guid": 4085}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the authors who have cited the papers by \" H. V. Jagadish \" .", "sql": "SELECT t2.name FROM publication AS t7 JOIN cite AS t5 ON t7.pid  =  t5.citing JOIN publication AS t6 ON t6.pid  =  t5.cited JOIN writes AS t3 ON t3.pid  =  t7.pid JOIN writes AS t4 ON t4.pid  =  t6.pid JOIN author AS t2 ON t3.aid  =  t2.aid JOIN author AS t1 ON t4.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\";", "example": {"db_id": "academic", "query": "SELECT t2.name FROM publication AS t7 JOIN cite AS t5 ON t7.pid  =  t5.citing JOIN publication AS t6 ON t6.pid  =  t5.cited JOIN writes AS t3 ON t3.pid  =  t7.pid JOIN writes AS t4 ON t4.pid  =  t6.pid JOIN author AS t2 ON t3.aid  =  t2.aid JOIN author AS t1 ON t4.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\";", "query_toks": ["SELECT", "t2.name", "FROM", "publication", "AS", "t7", "JOIN", "cite", "AS", "t5", "ON", "t7.pid", "=", "t5.citing", "JOIN", "publication", "AS", "t6", "ON", "t6.pid", "=", "t5.cited", "JOIN", "writes", "AS", "t3", "ON", "t3.pid", "=", "t7.pid", "JOIN", "writes", "AS", "t4", "ON", "t4.pid", "=", "t6.pid", "JOIN", "author", "AS", "t2", "ON", "t3.aid", "=", "t2.aid", "JOIN", "author", "AS", "t1", "ON", "t4.aid", "=", "t1.aid", "WHERE", "t1.name", "=", "``", "H.", "V.", "Jagadish", "''", ";"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "publication", "as", "t7", "join", "cite", "as", "t5", "on", "t7", ".", "pid", "=", "t5", ".", "citing", "join", "publication", "as", "t6", "on", "t6", ".", "pid", "=", "t5", ".", "cited", "join", "writes", "as", "t3", "on", "t3", ".", "pid", "=", "t7", ".", "pid", "join", "writes", "as", "t4", "on", "t4", ".", "pid", "=", "t6", ".", "pid", "join", "author", "as", "t2", "on", "t3", ".", "aid", "=", "t2", ".", "aid", "join", "author", "as", "t1", "on", "t4", ".", "aid", "=", "t1", ".", "aid", "where", "t1", ".", "name", "=", "value"], "question": "return me the authors who have cited the papers by \" H. V. Jagadish \" .", "question_toks": ["return", "me", "the", "authors", "who", "have", "cited", "the", "papers", "by", "``", "H.", "V.", "Jagadish", "``", "."], "guid": 4086}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | How many papers on nature communications in 2015 ?", "sql": "SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"nature communications\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"nature communications\";", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "t1.paperid", ")", "FROM", "venue", "AS", "t2", "JOIN", "paper", "AS", "t1", "ON", "t2.venueid", "=", "t1.venueid", "WHERE", "t1.year", "=", "2015", "AND", "t2.venuename", "=", "``", "nature", "communications", "''", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "t1", ".", "paperid", ")", "from", "venue", "as", "t2", "join", "paper", "as", "t1", "on", "t2", ".", "venueid", "=", "t1", ".", "venueid", "where", "t1", ".", "year", "=", "value", "and", "t2", ".", "venuename", "=", "value"], "question": "How many papers on nature communications in 2015 ?", "question_toks": ["How", "many", "papers", "on", "nature", "communications", "in", "2015", "?"], "guid": 4087}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | How many papers were published on convolutional neural networks in 2016 ?", "sql": "SELECT DISTINCT COUNT ( t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"convolutional neural networks\" AND t3.year  =  2016;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"convolutional neural networks\" AND t3.year  =  2016;", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "t3.paperid", ")", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "WHERE", "t1.keyphrasename", "=", "``", "convolutional", "neural", "networks", "''", "AND", "t3.year", "=", "2016", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "t3", ".", "paperid", ")", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "where", "t1", ".", "keyphrasename", "=", "value", "and", "t3", ".", "year", "=", "value"], "question": "How many papers were published on convolutional neural networks in 2016 ?", "question_toks": ["How", "many", "papers", "were", "published", "on", "convolutional", "neural", "networks", "in", "2016", "?"], "guid": 4088}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | What was the topic of best paper in 2012 EMNLP-CoNLL ?", "sql": "SELECT DISTINCT COUNT ( DISTINCT t4.citingpaperid )  ,  t1.keyphraseid  ,  t2.paperid FROM paper AS t2 JOIN cite AS t4 ON t2.paperid  =  t4.citedpaperid JOIN paperkeyphrase AS t1 ON t2.paperid  =  t1.paperid JOIN venue AS t3 ON t3.venueid  =  t2.venueid WHERE t2.year  =  2012 AND t3.venuename  =  \"EMNLP-CoNLL\" GROUP BY t2.paperid  ,  t1.keyphraseid ORDER BY COUNT ( DISTINCT t4.citingpaperid ) DESC;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( DISTINCT t4.citingpaperid )  ,  t1.keyphraseid  ,  t2.paperid FROM paper AS t2 JOIN cite AS t4 ON t2.paperid  =  t4.citedpaperid JOIN paperkeyphrase AS t1 ON t2.paperid  =  t1.paperid JOIN venue AS t3 ON t3.venueid  =  t2.venueid WHERE t2.year  =  2012 AND t3.venuename  =  \"EMNLP-CoNLL\" GROUP BY t2.paperid  ,  t1.keyphraseid ORDER BY COUNT ( DISTINCT t4.citingpaperid ) DESC;", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "DISTINCT", "t4.citingpaperid", ")", ",", "t1.keyphraseid", ",", "t2.paperid", "FROM", "paper", "AS", "t2", "JOIN", "cite", "AS", "t4", "ON", "t2.paperid", "=", "t4.citedpaperid", "JOIN", "paperkeyphrase", "AS", "t1", "ON", "t2.paperid", "=", "t1.paperid", "JOIN", "venue", "AS", "t3", "ON", "t3.venueid", "=", "t2.venueid", "WHERE", "t2.year", "=", "2012", "AND", "t3.venuename", "=", "``", "EMNLP-CoNLL", "''", "GROUP", "BY", "t2.paperid", ",", "t1.keyphraseid", "ORDER", "BY", "COUNT", "(", "DISTINCT", "t4.citingpaperid", ")", "DESC", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "distinct", "t4", ".", "citingpaperid", ")", ",", "t1", ".", "keyphraseid", ",", "t2", ".", "paperid", "from", "paper", "as", "t2", "join", "cite", "as", "t4", "on", "t2", ".", "paperid", "=", "t4", ".", "citedpaperid", "join", "paperkeyphrase", "as", "t1", "on", "t2", ".", "paperid", "=", "t1", ".", "paperid", "join", "venue", "as", "t3", "on", "t3", ".", "venueid", "=", "t2", ".", "venueid", "where", "t2", ".", "year", "=", "value", "and", "t3", ".", "venuename", "=", "value", "group", "by", "t2", ".", "paperid", ",", "t1", ".", "keyphraseid", "order", "by", "count", "(", "distinct", "t4", ".", "citingpaperid", ")", "desc"], "question": "What was the topic of best paper in 2012 EMNLP-CoNLL ?", "question_toks": ["What", "was", "the", "topic", "of", "best", "paper", "in", "2012", "EMNLP-CoNLL", "?"], "guid": 4089}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | Question Answering experiments", "sql": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "WHERE", "t1.keyphrasename", "=", "``", "Question", "Answering", "''", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "where", "t1", ".", "keyphrasename", "=", "value"], "question": "Question Answering experiments", "question_toks": ["Question", "Answering", "experiments"], "guid": 4090}}
{"text": "event: Event_ID, Date, Venue, Name, Event_Attendance; journalist: journalist_ID, Name, Nationality, Age, Years_working; news_report: journalist_ID, Event_ID, Work_Type | Show the names of journalists and the number of events they reported.", "sql": "SELECT T3.Name ,  COUNT(*) FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID  =  T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID  =  T3.journalist_ID GROUP BY T3.Name", "example": {"db_id": "news_report", "query": "SELECT T3.Name ,  COUNT(*) FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID  =  T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID  =  T3.journalist_ID GROUP BY T3.Name", "query_toks": ["SELECT", "T3.Name", ",", "COUNT", "(", "*", ")", "FROM", "news_report", "AS", "T1", "JOIN", "event", "AS", "T2", "ON", "T1.Event_ID", "=", "T2.Event_ID", "JOIN", "journalist", "AS", "T3", "ON", "T1.journalist_ID", "=", "T3.journalist_ID", "GROUP", "BY", "T3.Name"], "query_toks_no_value": ["select", "t3", ".", "name", ",", "count", "(", "*", ")", "from", "news_report", "as", "t1", "join", "event", "as", "t2", "on", "t1", ".", "event_id", "=", "t2", ".", "event_id", "join", "journalist", "as", "t3", "on", "t1", ".", "journalist_id", "=", "t3", ".", "journalist_id", "group", "by", "t3", ".", "name"], "question": "Show the names of journalists and the number of events they reported.", "question_toks": ["Show", "the", "names", "of", "journalists", "and", "the", "number", "of", "events", "they", "reported", "."], "guid": 4091}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | Does brian curless do convolution ?", "sql": "SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";", "query_toks": ["SELECT", "DISTINCT", "t1.authorid", ",", "t3.paperid", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t5", "ON", "t2.keyphraseid", "=", "t5.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "JOIN", "writes", "AS", "t4", "ON", "t4.paperid", "=", "t3.paperid", "JOIN", "author", "AS", "t1", "ON", "t4.authorid", "=", "t1.authorid", "WHERE", "t1.authorname", "=", "``", "brian", "curless", "''", "AND", "t5.keyphrasename", "=", "``", "convolution", "''", ";"], "query_toks_no_value": ["select", "distinct", "t1", ".", "authorid", ",", "t3", ".", "paperid", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t5", "on", "t2", ".", "keyphraseid", "=", "t5", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "join", "writes", "as", "t4", "on", "t4", ".", "paperid", "=", "t3", ".", "paperid", "join", "author", "as", "t1", "on", "t4", ".", "authorid", "=", "t1", ".", "authorid", "where", "t1", ".", "authorname", "=", "value", "and", "t5", ".", "keyphrasename", "=", "value"], "question": "Does brian curless do convolution ?", "question_toks": ["Does", "brian", "curless", "do", "convolution", "?"], "guid": 4092}}
{"text": "Document_Types: document_type_code, document_description; Documents: document_id, document_type_code, grant_id, sent_date, response_received_date, other_details; Grants: grant_id, organisation_id, grant_amount, grant_start_date, grant_end_date, other_details; Organisation_Types: organisation_type, organisation_type_description; Organisations: organisation_id, organisation_type, organisation_details; Project_Outcomes: project_id, outcome_code, outcome_details; Project_Staff: staff_id, project_id, role_code, date_from, date_to, other_details; Projects: project_id, organisation_id, project_details; Research_Outcomes: outcome_code, outcome_description; Research_Staff: staff_id, employer_organisation_id, staff_details | When did the first staff member start working?", "sql": "SELECT date_from FROM Project_Staff ORDER BY date_from ASC LIMIT 1", "example": {"db_id": "tracking_grants_for_research", "query": "SELECT date_from FROM Project_Staff ORDER BY date_from ASC LIMIT 1", "query_toks": ["SELECT", "date_from", "FROM", "Project_Staff", "ORDER", "BY", "date_from", "ASC", "LIMIT", "1"], "query_toks_no_value": ["select", "date_from", "from", "project_staff", "order", "by", "date_from", "asc", "limit", "value"], "question": "When did the first staff member start working?", "question_toks": ["When", "did", "the", "first", "staff", "member", "start", "working", "?"], "guid": 4093}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the number of authors who have papers in the VLDB conference .", "sql": "SELECT COUNT ( DISTINCT t1.name ) FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t2.name  =  \"VLDB\";", "example": {"db_id": "academic", "query": "SELECT COUNT ( DISTINCT t1.name ) FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t2.name  =  \"VLDB\";", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "t1.name", ")", "FROM", "publication", "AS", "t4", "JOIN", "conference", "AS", "t2", "ON", "t4.cid", "=", "t2.cid", "JOIN", "writes", "AS", "t3", "ON", "t3.pid", "=", "t4.pid", "JOIN", "author", "AS", "t1", "ON", "t3.aid", "=", "t1.aid", "WHERE", "t2.name", "=", "``", "VLDB", "''", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "t1", ".", "name", ")", "from", "publication", "as", "t4", "join", "conference", "as", "t2", "on", "t4", ".", "cid", "=", "t2", ".", "cid", "join", "writes", "as", "t3", "on", "t3", ".", "pid", "=", "t4", ".", "pid", "join", "author", "as", "t1", "on", "t3", ".", "aid", "=", "t1", ".", "aid", "where", "t2", ".", "name", "=", "value"], "question": "return me the number of authors who have papers in the VLDB conference .", "question_toks": ["return", "me", "the", "number", "of", "authors", "who", "have", "papers", "in", "the", "VLDB", "conference", "."], "guid": 4094}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | List today 's journals", "sql": "SELECT DISTINCT journalid FROM paper WHERE YEAR  =  2011 GROUP BY journalid;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT journalid FROM paper WHERE YEAR  =  2011 GROUP BY journalid;", "query_toks": ["SELECT", "DISTINCT", "journalid", "FROM", "paper", "WHERE", "YEAR", "=", "2011", "GROUP", "BY", "journalid", ";"], "query_toks_no_value": ["select", "distinct", "journalid", "from", "paper", "where", "year", "=", "value", "group", "by", "journalid"], "question": "List today 's journals", "question_toks": ["List", "today", "'s", "journals"], "guid": 4095}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | Who cites Daniel A Reed the most", "sql": "SELECT DISTINCT COUNT ( t4.citingpaperid )  ,  t3.authorid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN cite AS t4 ON t2.paperid  =  t4.citedpaperid JOIN writes AS t3 ON t3.paperid  =  t4.citingpaperid WHERE t1.authorname  =  \"Daniel A Reed\" GROUP BY t3.authorid ORDER BY COUNT ( t4.citingpaperid ) DESC;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( t4.citingpaperid )  ,  t3.authorid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN cite AS t4 ON t2.paperid  =  t4.citedpaperid JOIN writes AS t3 ON t3.paperid  =  t4.citingpaperid WHERE t1.authorname  =  \"Daniel A Reed\" GROUP BY t3.authorid ORDER BY COUNT ( t4.citingpaperid ) DESC;", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "t4.citingpaperid", ")", ",", "t3.authorid", "FROM", "writes", "AS", "t2", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "JOIN", "cite", "AS", "t4", "ON", "t2.paperid", "=", "t4.citedpaperid", "JOIN", "writes", "AS", "t3", "ON", "t3.paperid", "=", "t4.citingpaperid", "WHERE", "t1.authorname", "=", "``", "Daniel", "A", "Reed", "''", "GROUP", "BY", "t3.authorid", "ORDER", "BY", "COUNT", "(", "t4.citingpaperid", ")", "DESC", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "t4", ".", "citingpaperid", ")", ",", "t3", ".", "authorid", "from", "writes", "as", "t2", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "join", "cite", "as", "t4", "on", "t2", ".", "paperid", "=", "t4", ".", "citedpaperid", "join", "writes", "as", "t3", "on", "t3", ".", "paperid", "=", "t4", ".", "citingpaperid", "where", "t1", ".", "authorname", "=", "value", "group", "by", "t3", ".", "authorid", "order", "by", "count", "(", "t4", ".", "citingpaperid", ")", "desc"], "question": "Who cites Daniel A Reed the most", "question_toks": ["Who", "cites", "Daniel", "A", "Reed", "the", "most"], "guid": 4096}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | How many papers were published in nature communications in 2015 ?", "sql": "SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"nature communications\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"nature communications\";", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "t1.paperid", ")", "FROM", "venue", "AS", "t2", "JOIN", "paper", "AS", "t1", "ON", "t2.venueid", "=", "t1.venueid", "WHERE", "t1.year", "=", "2015", "AND", "t2.venuename", "=", "``", "nature", "communications", "''", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "t1", ".", "paperid", ")", "from", "venue", "as", "t2", "join", "paper", "as", "t1", "on", "t2", ".", "venueid", "=", "t1", ".", "venueid", "where", "t1", ".", "year", "=", "value", "and", "t2", ".", "venuename", "=", "value"], "question": "How many papers were published in nature communications in 2015 ?", "question_toks": ["How", "many", "papers", "were", "published", "in", "nature", "communications", "in", "2015", "?"], "guid": 4097}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the number of authors of \" Making database systems usable \" .", "sql": "SELECT COUNT ( DISTINCT t1.name ) FROM writes AS t2 JOIN author AS t1 ON t2.aid  =  t1.aid JOIN publication AS t3 ON t2.pid  =  t3.pid WHERE t3.title  =  \"Making database systems usable\";", "example": {"db_id": "academic", "query": "SELECT COUNT ( DISTINCT t1.name ) FROM writes AS t2 JOIN author AS t1 ON t2.aid  =  t1.aid JOIN publication AS t3 ON t2.pid  =  t3.pid WHERE t3.title  =  \"Making database systems usable\";", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "t1.name", ")", "FROM", "writes", "AS", "t2", "JOIN", "author", "AS", "t1", "ON", "t2.aid", "=", "t1.aid", "JOIN", "publication", "AS", "t3", "ON", "t2.pid", "=", "t3.pid", "WHERE", "t3.title", "=", "``", "Making", "database", "systems", "usable", "''", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "t1", ".", "name", ")", "from", "writes", "as", "t2", "join", "author", "as", "t1", "on", "t2", ".", "aid", "=", "t1", ".", "aid", "join", "publication", "as", "t3", "on", "t2", ".", "pid", "=", "t3", ".", "pid", "where", "t3", ".", "title", "=", "value"], "question": "return me the number of authors of \" Making database systems usable \" .", "question_toks": ["return", "me", "the", "number", "of", "authors", "of", "``", "Making", "database", "systems", "usable", "``", "."], "guid": 4098}}
{"text": "Document_Types: document_type_code, document_description; Documents: document_id, document_type_code, grant_id, sent_date, response_received_date, other_details; Grants: grant_id, organisation_id, grant_amount, grant_start_date, grant_end_date, other_details; Organisation_Types: organisation_type, organisation_type_description; Organisations: organisation_id, organisation_type, organisation_details; Project_Outcomes: project_id, outcome_code, outcome_details; Project_Staff: staff_id, project_id, role_code, date_from, date_to, other_details; Projects: project_id, organisation_id, project_details; Research_Outcomes: outcome_code, outcome_description; Research_Staff: staff_id, employer_organisation_id, staff_details | Find the organisation ids and details of the organisations which are involved in", "sql": "SELECT T2.organisation_id ,  T2.organisation_details FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id  =  T2.organisation_id GROUP BY T2.organisation_id HAVING sum(T1.grant_amount)  >  6000", "example": {"db_id": "tracking_grants_for_research", "query": "SELECT T2.organisation_id ,  T2.organisation_details FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id  =  T2.organisation_id GROUP BY T2.organisation_id HAVING sum(T1.grant_amount)  >  6000", "query_toks": ["SELECT", "T2.organisation_id", ",", "T2.organisation_details", "FROM", "Grants", "AS", "T1", "JOIN", "Organisations", "AS", "T2", "ON", "T1.organisation_id", "=", "T2.organisation_id", "GROUP", "BY", "T2.organisation_id", "HAVING", "sum", "(", "T1.grant_amount", ")", ">", "6000"], "query_toks_no_value": ["select", "t2", ".", "organisation_id", ",", "t2", ".", "organisation_details", "from", "grants", "as", "t1", "join", "organisations", "as", "t2", "on", "t1", ".", "organisation_id", "=", "t2", ".", "organisation_id", "group", "by", "t2", ".", "organisation_id", "having", "sum", "(", "t1", ".", "grant_amount", ")", ">", "value"], "question": "Find the organisation ids and details of the organisations which are involved in", "question_toks": ["Find", "the", "organisation", "ids", "and", "details", "of", "the", "organisations", "which", "are", "involved", "in"], "guid": 4099}}
{"text": "Scientists: SSN, Name; Projects: Code, Name, Hours; AssignedTo: Scientist, Project | How many different projects are there?", "sql": "SELECT count(DISTINCT name) FROM projects", "example": {"db_id": "scientist_1", "query": "SELECT count(DISTINCT name) FROM projects", "query_toks": ["SELECT", "count", "(", "DISTINCT", "name", ")", "FROM", "projects"], "query_toks_no_value": ["select", "count", "(", "distinct", "name", ")", "from", "projects"], "question": "How many different projects are there?", "question_toks": ["How", "many", "different", "projects", "are", "there", "?"], "guid": 4100}}
{"text": "Document_Types: document_type_code, document_description; Documents: document_id, document_type_code, grant_id, sent_date, response_received_date, other_details; Grants: grant_id, organisation_id, grant_amount, grant_start_date, grant_end_date, other_details; Organisation_Types: organisation_type, organisation_type_description; Organisations: organisation_id, organisation_type, organisation_details; Project_Outcomes: project_id, outcome_code, outcome_details; Project_Staff: staff_id, project_id, role_code, date_from, date_to, other_details; Projects: project_id, organisation_id, project_details; Research_Outcomes: outcome_code, outcome_description; Research_Staff: staff_id, employer_organisation_id, staff_details | What are all the details of the organisations described as 'Sponsor'? Sort the result in an ascending order.", "sql": "SELECT organisation_details FROM Organisations AS T1 JOIN organisation_Types AS T2 ON T1.organisation_type  =  T2.organisation_type WHERE T2.organisation_type_description  =  'Sponsor' ORDER BY organisation_details", "example": {"db_id": "tracking_grants_for_research", "query": "SELECT organisation_details FROM Organisations AS T1 JOIN organisation_Types AS T2 ON T1.organisation_type  =  T2.organisation_type WHERE T2.organisation_type_description  =  'Sponsor' ORDER BY organisation_details", "query_toks": ["SELECT", "organisation_details", "FROM", "Organisations", "AS", "T1", "JOIN", "organisation_Types", "AS", "T2", "ON", "T1.organisation_type", "=", "T2.organisation_type", "WHERE", "T2.organisation_type_description", "=", "'Sponsor", "'", "ORDER", "BY", "organisation_details"], "query_toks_no_value": ["select", "organisation_details", "from", "organisations", "as", "t1", "join", "organisation_types", "as", "t2", "on", "t1", ".", "organisation_type", "=", "t2", ".", "organisation_type", "where", "t2", ".", "organisation_type_description", "=", "value", "order", "by", "organisation_details"], "question": "What are all the details of the organisations described as 'Sponsor'? Sort the result in an ascending order.", "question_toks": ["What", "are", "all", "the", "details", "of", "the", "organisations", "described", "as", "'Sponsor", "'", "?", "Sort", "the", "result", "in", "an", "ascending", "order", "."], "guid": 4101}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | what paper did Peter Mertens and Dina Barbian write together ?", "sql": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "writes", "AS", "t3", "JOIN", "author", "AS", "t2", "ON", "t3.authorid", "=", "t2.authorid", "JOIN", "writes", "AS", "t4", "ON", "t4.paperid", "=", "t3.paperid", "JOIN", "author", "AS", "t1", "ON", "t4.authorid", "=", "t1.authorid", "WHERE", "t2.authorname", "=", "``", "Peter", "Mertens", "''", "AND", "t1.authorname", "=", "``", "Dina", "Barbian", "''", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "writes", "as", "t3", "join", "author", "as", "t2", "on", "t3", ".", "authorid", "=", "t2", ".", "authorid", "join", "writes", "as", "t4", "on", "t4", ".", "paperid", "=", "t3", ".", "paperid", "join", "author", "as", "t1", "on", "t4", ".", "authorid", "=", "t1", ".", "authorid", "where", "t2", ".", "authorname", "=", "value", "and", "t1", ".", "authorname", "=", "value"], "question": "what paper did Peter Mertens and Dina Barbian write together ?", "question_toks": ["what", "paper", "did", "Peter", "Mertens", "and", "Dina", "Barbian", "write", "together", "?"], "guid": 4102}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | What did Liwen Xiong published in 2015 ?", "sql": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Liwen Xiong\" AND t3.year  =  2015;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Liwen Xiong\" AND t3.year  =  2015;", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "writes", "AS", "t2", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "JOIN", "paper", "AS", "t3", "ON", "t2.paperid", "=", "t3.paperid", "WHERE", "t1.authorname", "=", "``", "Liwen", "Xiong", "''", "AND", "t3.year", "=", "2015", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "writes", "as", "t2", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "join", "paper", "as", "t3", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "where", "t1", ".", "authorname", "=", "value", "and", "t3", ".", "year", "=", "value"], "question": "What did Liwen Xiong published in 2015 ?", "question_toks": ["What", "did", "Liwen", "Xiong", "published", "in", "2015", "?"], "guid": 4103}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | people working on sensor fusion", "sql": "SELECT DISTINCT t1.authorname FROM paperkeyphrase AS t2 JOIN keyphrase AS t4 ON t2.keyphraseid  =  t4.keyphraseid JOIN writes AS t3 ON t3.paperid  =  t2.paperid JOIN author AS t1 ON t3.authorid  =  t1.authorid WHERE t4.keyphrasename LIKE \"sensor fusion\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t1.authorname FROM paperkeyphrase AS t2 JOIN keyphrase AS t4 ON t2.keyphraseid  =  t4.keyphraseid JOIN writes AS t3 ON t3.paperid  =  t2.paperid JOIN author AS t1 ON t3.authorid  =  t1.authorid WHERE t4.keyphrasename LIKE \"sensor fusion\";", "query_toks": ["SELECT", "DISTINCT", "t1.authorname", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t4", "ON", "t2.keyphraseid", "=", "t4.keyphraseid", "JOIN", "writes", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "JOIN", "author", "AS", "t1", "ON", "t3.authorid", "=", "t1.authorid", "WHERE", "t4.keyphrasename", "LIKE", "``", "sensor", "fusion", "''", ";"], "query_toks_no_value": ["select", "distinct", "t1", ".", "authorname", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t4", "on", "t2", ".", "keyphraseid", "=", "t4", ".", "keyphraseid", "join", "writes", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "join", "author", "as", "t1", "on", "t3", ".", "authorid", "=", "t1", ".", "authorid", "where", "t4", ".", "keyphrasename", "like", "value"], "question": "people working on sensor fusion", "question_toks": ["people", "working", "on", "sensor", "fusion"], "guid": 4104}}
{"text": "Document_Types: document_type_code, document_description; Documents: document_id, document_type_code, grant_id, sent_date, response_received_date, other_details; Grants: grant_id, organisation_id, grant_amount, grant_start_date, grant_end_date, other_details; Organisation_Types: organisation_type, organisation_type_description; Organisations: organisation_id, organisation_type, organisation_details; Project_Outcomes: project_id, outcome_code, outcome_details; Project_Staff: staff_id, project_id, role_code, date_from, date_to, other_details; Projects: project_id, organisation_id, project_details; Research_Outcomes: outcome_code, outcome_description; Research_Staff: staff_id, employer_organisation_id, staff_details | Find out the send dates of the documents with the grant amount of more than 5000 were granted by organisation type described", "sql": "SELECT T1.sent_date FROM documents AS T1 JOIN Grants AS T2 ON T1.grant_id  =  T2.grant_id JOIN Organisations AS T3 ON T2.organisation_id  =  T3.organisation_id JOIN organisation_Types AS T4 ON T3.organisation_type  =  T4.organisation_type WHERE T2.grant_amount  >  5000 AND T4.organisation_type_description  =  'Research'", "example": {"db_id": "tracking_grants_for_research", "query": "SELECT T1.sent_date FROM documents AS T1 JOIN Grants AS T2 ON T1.grant_id  =  T2.grant_id JOIN Organisations AS T3 ON T2.organisation_id  =  T3.organisation_id JOIN organisation_Types AS T4 ON T3.organisation_type  =  T4.organisation_type WHERE T2.grant_amount  >  5000 AND T4.organisation_type_description  =  'Research'", "query_toks": ["SELECT", "T1.sent_date", "FROM", "documents", "AS", "T1", "JOIN", "Grants", "AS", "T2", "ON", "T1.grant_id", "=", "T2.grant_id", "JOIN", "Organisations", "AS", "T3", "ON", "T2.organisation_id", "=", "T3.organisation_id", "JOIN", "organisation_Types", "AS", "T4", "ON", "T3.organisation_type", "=", "T4.organisation_type", "WHERE", "T2.grant_amount", ">", "5000", "AND", "T4.organisation_type_description", "=", "'Research", "'"], "query_toks_no_value": ["select", "t1", ".", "sent_date", "from", "documents", "as", "t1", "join", "grants", "as", "t2", "on", "t1", ".", "grant_id", "=", "t2", ".", "grant_id", "join", "organisations", "as", "t3", "on", "t2", ".", "organisation_id", "=", "t3", ".", "organisation_id", "join", "organisation_types", "as", "t4", "on", "t3", ".", "organisation_type", "=", "t4", ".", "organisation_type", "where", "t2", ".", "grant_amount", ">", "value", "and", "t4", ".", "organisation_type_description", "=", "value"], "question": "Find out the send dates of the documents with the grant amount of more than 5000 were granted by organisation type described", "question_toks": ["Find", "out", "the", "send", "dates", "of", "the", "documents", "with", "the", "grant", "amount", "of", "more", "than", "5000", "were", "granted", "by", "organisation", "type", "described"], "guid": 4105}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | Eric C. Kerrigan 's Liquid Automatica paper", "sql": "SELECT DISTINCT t2.paperid FROM paperkeyphrase AS t5 JOIN keyphrase AS t3 ON t5.keyphraseid  =  t3.keyphraseid JOIN writes AS t4 ON t4.paperid  =  t5.paperid JOIN paper AS t2 ON t4.paperid  =  t2.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid JOIN venue AS t6 ON t6.venueid  =  t2.venueid WHERE t1.authorname  =  \"Eric C. Kerrigan\" AND t3.keyphrasename  =  \"Liquid\" AND t6.venuename  =  \"Automatica\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t2.paperid FROM paperkeyphrase AS t5 JOIN keyphrase AS t3 ON t5.keyphraseid  =  t3.keyphraseid JOIN writes AS t4 ON t4.paperid  =  t5.paperid JOIN paper AS t2 ON t4.paperid  =  t2.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid JOIN venue AS t6 ON t6.venueid  =  t2.venueid WHERE t1.authorname  =  \"Eric C. Kerrigan\" AND t3.keyphrasename  =  \"Liquid\" AND t6.venuename  =  \"Automatica\";", "query_toks": ["SELECT", "DISTINCT", "t2.paperid", "FROM", "paperkeyphrase", "AS", "t5", "JOIN", "keyphrase", "AS", "t3", "ON", "t5.keyphraseid", "=", "t3.keyphraseid", "JOIN", "writes", "AS", "t4", "ON", "t4.paperid", "=", "t5.paperid", "JOIN", "paper", "AS", "t2", "ON", "t4.paperid", "=", "t2.paperid", "JOIN", "author", "AS", "t1", "ON", "t4.authorid", "=", "t1.authorid", "JOIN", "venue", "AS", "t6", "ON", "t6.venueid", "=", "t2.venueid", "WHERE", "t1.authorname", "=", "``", "Eric", "C.", "Kerrigan", "''", "AND", "t3.keyphrasename", "=", "``", "Liquid", "''", "AND", "t6.venuename", "=", "``", "Automatica", "''", ";"], "query_toks_no_value": ["select", "distinct", "t2", ".", "paperid", "from", "paperkeyphrase", "as", "t5", "join", "keyphrase", "as", "t3", "on", "t5", ".", "keyphraseid", "=", "t3", ".", "keyphraseid", "join", "writes", "as", "t4", "on", "t4", ".", "paperid", "=", "t5", ".", "paperid", "join", "paper", "as", "t2", "on", "t4", ".", "paperid", "=", "t2", ".", "paperid", "join", "author", "as", "t1", "on", "t4", ".", "authorid", "=", "t1", ".", "authorid", "join", "venue", "as", "t6", "on", "t6", ".", "venueid", "=", "t2", ".", "venueid", "where", "t1", ".", "authorname", "=", "value", "and", "t3", ".", "keyphrasename", "=", "value", "and", "t6", ".", "venuename", "=", "value"], "question": "Eric C. Kerrigan 's Liquid Automatica paper", "question_toks": ["Eric", "C.", "Kerrigan", "'s", "Liquid", "Automatica", "paper"], "guid": 4106}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | When did ameet soni publish ?", "sql": "SELECT DISTINCT COUNT ( t3.paperid )  ,  t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"ameet soni\" GROUP BY t3.year ORDER BY t3.year;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( t3.paperid )  ,  t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"ameet soni\" GROUP BY t3.year ORDER BY t3.year;", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "t3.paperid", ")", ",", "t3.year", "FROM", "writes", "AS", "t2", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "JOIN", "paper", "AS", "t3", "ON", "t2.paperid", "=", "t3.paperid", "WHERE", "t1.authorname", "=", "``", "ameet", "soni", "''", "GROUP", "BY", "t3.year", "ORDER", "BY", "t3.year", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "t3", ".", "paperid", ")", ",", "t3", ".", "year", "from", "writes", "as", "t2", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "join", "paper", "as", "t3", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "where", "t1", ".", "authorname", "=", "value", "group", "by", "t3", ".", "year", "order", "by", "t3", ".", "year"], "question": "When did ameet soni publish ?", "question_toks": ["When", "did", "ameet", "soni", "publish", "?"], "guid": 4107}}
{"text": "Document_Types: document_type_code, document_description; Documents: document_id, document_type_code, grant_id, sent_date, response_received_date, other_details; Grants: grant_id, organisation_id, grant_amount, grant_start_date, grant_end_date, other_details; Organisation_Types: organisation_type, organisation_type_description; Organisations: organisation_id, organisation_type, organisation_details; Project_Outcomes: project_id, outcome_code, outcome_details; Project_Staff: staff_id, project_id, role_code, date_from, date_to, other_details; Projects: project_id, organisation_id, project_details; Research_Outcomes: outcome_code, outcome_description; Research_Staff: staff_id, employer_organisation_id, staff_details | What is the complete description of the researcher role.", "sql": "SELECT role_description FROM Staff_Roles WHERE role_code  =  'researcher'", "example": {"db_id": "tracking_grants_for_research", "query": "SELECT role_description FROM Staff_Roles WHERE role_code  =  'researcher'", "query_toks": ["SELECT", "role_description", "FROM", "Staff_Roles", "WHERE", "role_code", "=", "'researcher", "'"], "query_toks_no_value": ["select", "role_description", "from", "staff_roles", "where", "role_code", "=", "value"], "question": "What is the complete description of the researcher role.", "question_toks": ["What", "is", "the", "complete", "description", "of", "the", "researcher", "role", "."], "guid": 4108}}
{"text": "workshop: Workshop_ID, Date, Venue, Name; submission: Submission_ID, Scores, Author, College; Acceptance: Submission_ID, Workshop_ID, Result | For each college, return the college name and the count of authors with submissions from that college.", "sql": "SELECT College ,  COUNT(*) FROM submission GROUP BY College", "example": {"db_id": "workshop_paper", "query": "SELECT College ,  COUNT(*) FROM submission GROUP BY College", "query_toks": ["SELECT", "College", ",", "COUNT", "(", "*", ")", "FROM", "submission", "GROUP", "BY", "College"], "query_toks_no_value": ["select", "college", ",", "count", "(", "*", ")", "from", "submission", "group", "by", "college"], "question": "For each college, return the college name and the count of authors with submissions from that college.", "question_toks": ["For", "each", "college", ",", "return", "the", "college", "name", "and", "the", "count", "of", "authors", "with", "submissions", "from", "that", "college", "."], "guid": 4109}}
{"text": "journal: Journal_ID, Date, Theme, Sales; editor: Editor_ID, Name, Age; journal_committee: Editor_ID, Journal_ID, Work_Type | For each journal_committee, find the editor name and the journal theme.", "sql": "SELECT T2.Name ,  T3.Theme FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID  =  T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID  =  T3.Journal_ID", "example": {"db_id": "journal_committee", "query": "SELECT T2.Name ,  T3.Theme FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID  =  T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID  =  T3.Journal_ID", "query_toks": ["SELECT", "T2.Name", ",", "T3.Theme", "FROM", "journal_committee", "AS", "T1", "JOIN", "editor", "AS", "T2", "ON", "T1.Editor_ID", "=", "T2.Editor_ID", "JOIN", "journal", "AS", "T3", "ON", "T1.Journal_ID", "=", "T3.Journal_ID"], "query_toks_no_value": ["select", "t2", ".", "name", ",", "t3", ".", "theme", "from", "journal_committee", "as", "t1", "join", "editor", "as", "t2", "on", "t1", ".", "editor_id", "=", "t2", ".", "editor_id", "join", "journal", "as", "t3", "on", "t1", ".", "journal_id", "=", "t3", ".", "journal_id"], "question": "For each journal_committee, find the editor name and the journal theme.", "question_toks": ["For", "each", "journal_committee", ",", "find", "the", "editor", "name", "and", "the", "journal", "theme", "."], "guid": 4110}}
{"text": "item: i_id, title; review: a_id, u_id, i_id, rating, rank; useracct: u_id, name; trust: source_u_id, target_u_id, trust | Find the names of goods that receive a rating of 10.", "sql": "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id WHERE T2.rating  =  10", "example": {"db_id": "epinions_1", "query": "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id WHERE T2.rating  =  10", "query_toks": ["SELECT", "T1.title", "FROM", "item", "AS", "T1", "JOIN", "review", "AS", "T2", "ON", "T1.i_id", "=", "T2.i_id", "WHERE", "T2.rating", "=", "10"], "query_toks_no_value": ["select", "t1", ".", "title", "from", "item", "as", "t1", "join", "review", "as", "t2", "on", "t1", ".", "i_id", "=", "t2", ".", "i_id", "where", "t2", ".", "rating", "=", "value"], "question": "Find the names of goods that receive a rating of 10.", "question_toks": ["Find", "the", "names", "of", "goods", "that", "receive", "a", "rating", "of", "10", "."], "guid": 4111}}
{"text": "publication: Publication_ID, Book_ID, Publisher, Publication_Date, Price; book: Book_ID, Title, Issues, Writer | Show publishers that have more than one publication.", "sql": "SELECT Publisher FROM publication GROUP BY Publisher HAVING COUNT(*)  >  1", "example": {"db_id": "book_2", "query": "SELECT Publisher FROM publication GROUP BY Publisher HAVING COUNT(*)  >  1", "query_toks": ["SELECT", "Publisher", "FROM", "publication", "GROUP", "BY", "Publisher", "HAVING", "COUNT", "(", "*", ")", ">", "1"], "query_toks_no_value": ["select", "publisher", "from", "publication", "group", "by", "publisher", "having", "count", "(", "*", ")", ">", "value"], "question": "Show publishers that have more than one publication.", "question_toks": ["Show", "publishers", "that", "have", "more", "than", "one", "publication", "."], "guid": 4112}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the organization \" H. V. Jagadish \" is in .", "sql": "SELECT t2.name FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid WHERE t1.name  =  \"H. V. Jagadish\";", "example": {"db_id": "academic", "query": "SELECT t2.name FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid WHERE t1.name  =  \"H. V. Jagadish\";", "query_toks": ["SELECT", "t2.name", "FROM", "organization", "AS", "t2", "JOIN", "author", "AS", "t1", "ON", "t2.oid", "=", "t1.oid", "WHERE", "t1.name", "=", "``", "H.", "V.", "Jagadish", "''", ";"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "organization", "as", "t2", "join", "author", "as", "t1", "on", "t2", ".", "oid", "=", "t1", ".", "oid", "where", "t1", ".", "name", "=", "value"], "question": "return me the organization \" H. V. Jagadish \" is in .", "question_toks": ["return", "me", "the", "organization", "``", "H.", "V.", "Jagadish", "``", "is", "in", "."], "guid": 4113}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | Papers written by sharon goldwater", "sql": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";", "query_toks": ["SELECT", "DISTINCT", "t2.paperid", "FROM", "writes", "AS", "t2", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "WHERE", "t1.authorname", "=", "``", "sharon", "goldwater", "''", ";"], "query_toks_no_value": ["select", "distinct", "t2", ".", "paperid", "from", "writes", "as", "t2", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "where", "t1", ".", "authorname", "=", "value"], "question": "Papers written by sharon goldwater", "question_toks": ["Papers", "written", "by", "sharon", "goldwater"], "guid": 4114}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | What is the year of publication of \" A Switching Architecture For ISDN \" ?", "sql": "SELECT DISTINCT title  ,  YEAR FROM paper WHERE title  =  \"A Switching Architecture For ISDN\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT title  ,  YEAR FROM paper WHERE title  =  \"A Switching Architecture For ISDN\";", "query_toks": ["SELECT", "DISTINCT", "title", ",", "YEAR", "FROM", "paper", "WHERE", "title", "=", "``", "A", "Switching", "Architecture", "For", "ISDN", "''", ";"], "query_toks_no_value": ["select", "distinct", "title", ",", "year", "from", "paper", "where", "title", "=", "value"], "question": "What is the year of publication of \" A Switching Architecture For ISDN \" ?", "question_toks": ["What", "is", "the", "year", "of", "publication", "of", "``", "A", "Switching", "Architecture", "For", "ISDN", "``", "?"], "guid": 4115}}
{"text": "Inst: instID, name, country; Authors: authID, lname, fname; Papers: paperID, title; Authorship: authID, instID, paperID, authOrder | What are the titles of papers published by \"Jeremy Gibbons\"?", "sql": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  \"Jeremy\" AND t1.lname  =  \"Gibbons\"", "example": {"db_id": "icfp_1", "query": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  \"Jeremy\" AND t1.lname  =  \"Gibbons\"", "query_toks": ["SELECT", "t3.title", "FROM", "authors", "AS", "t1", "JOIN", "authorship", "AS", "t2", "ON", "t1.authid", "=", "t2.authid", "JOIN", "papers", "AS", "t3", "ON", "t2.paperid", "=", "t3.paperid", "WHERE", "t1.fname", "=", "``", "Jeremy", "''", "AND", "t1.lname", "=", "``", "Gibbons", "''"], "query_toks_no_value": ["select", "t3", ".", "title", "from", "authors", "as", "t1", "join", "authorship", "as", "t2", "on", "t1", ".", "authid", "=", "t2", ".", "authid", "join", "papers", "as", "t3", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "where", "t1", ".", "fname", "=", "value", "and", "t1", ".", "lname", "=", "value"], "question": "What are the titles of papers published by \"Jeremy Gibbons\"?", "question_toks": ["What", "are", "the", "titles", "of", "papers", "published", "by", "``", "Jeremy", "Gibbons", "''", "?"], "guid": 4116}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | papers that use WebKB", "sql": "SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname  =  \"WebKB\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname  =  \"WebKB\";", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "paperdataset", "AS", "t2", "JOIN", "dataset", "AS", "t1", "ON", "t2.datasetid", "=", "t1.datasetid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "WHERE", "t1.datasetname", "=", "``", "WebKB", "''", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "paperdataset", "as", "t2", "join", "dataset", "as", "t1", "on", "t2", ".", "datasetid", "=", "t1", ".", "datasetid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "where", "t1", ".", "datasetname", "=", "value"], "question": "papers that use WebKB", "question_toks": ["papers", "that", "use", "WebKB"], "guid": 4117}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | papers in chi", "sql": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"chi\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"chi\";", "query_toks": ["SELECT", "DISTINCT", "t1.paperid", "FROM", "venue", "AS", "t2", "JOIN", "paper", "AS", "t1", "ON", "t2.venueid", "=", "t1.venueid", "WHERE", "t2.venuename", "=", "``", "chi", "''", ";"], "query_toks_no_value": ["select", "distinct", "t1", ".", "paperid", "from", "venue", "as", "t2", "join", "paper", "as", "t1", "on", "t2", ".", "venueid", "=", "t1", ".", "venueid", "where", "t2", ".", "venuename", "=", "value"], "question": "papers in chi", "question_toks": ["papers", "in", "chi"], "guid": 4118}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the number of papers by \" H. V. Jagadish \" .", "sql": "SELECT COUNT ( DISTINCT t3.title ) FROM writes AS t2 JOIN author AS t1 ON t2.aid  =  t1.aid JOIN publication AS t3 ON t2.pid  =  t3.pid WHERE t1.name  =  \"H. V. Jagadish\";", "example": {"db_id": "academic", "query": "SELECT COUNT ( DISTINCT t3.title ) FROM writes AS t2 JOIN author AS t1 ON t2.aid  =  t1.aid JOIN publication AS t3 ON t2.pid  =  t3.pid WHERE t1.name  =  \"H. V. Jagadish\";", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "t3.title", ")", "FROM", "writes", "AS", "t2", "JOIN", "author", "AS", "t1", "ON", "t2.aid", "=", "t1.aid", "JOIN", "publication", "AS", "t3", "ON", "t2.pid", "=", "t3.pid", "WHERE", "t1.name", "=", "``", "H.", "V.", "Jagadish", "''", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "t3", ".", "title", ")", "from", "writes", "as", "t2", "join", "author", "as", "t1", "on", "t2", ".", "aid", "=", "t1", ".", "aid", "join", "publication", "as", "t3", "on", "t2", ".", "pid", "=", "t3", ".", "pid", "where", "t1", ".", "name", "=", "value"], "question": "return me the number of papers by \" H. V. Jagadish \" .", "question_toks": ["return", "me", "the", "number", "of", "papers", "by", "``", "H.", "V.", "Jagadish", "``", "."], "guid": 4119}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the number of papers which contain the keyword \" Natural Language \" .", "sql": "SELECT COUNT ( DISTINCT t3.title ) FROM publication_keyword AS t2 JOIN keyword AS t1 ON t2.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t2.pid WHERE t1.keyword  =  \"Natural Language\";", "example": {"db_id": "academic", "query": "SELECT COUNT ( DISTINCT t3.title ) FROM publication_keyword AS t2 JOIN keyword AS t1 ON t2.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t2.pid WHERE t1.keyword  =  \"Natural Language\";", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "t3.title", ")", "FROM", "publication_keyword", "AS", "t2", "JOIN", "keyword", "AS", "t1", "ON", "t2.kid", "=", "t1.kid", "JOIN", "publication", "AS", "t3", "ON", "t3.pid", "=", "t2.pid", "WHERE", "t1.keyword", "=", "``", "Natural", "Language", "''", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "t3", ".", "title", ")", "from", "publication_keyword", "as", "t2", "join", "keyword", "as", "t1", "on", "t2", ".", "kid", "=", "t1", ".", "kid", "join", "publication", "as", "t3", "on", "t3", ".", "pid", "=", "t2", ".", "pid", "where", "t1", ".", "keyword", "=", "value"], "question": "return me the number of papers which contain the keyword \" Natural Language \" .", "question_toks": ["return", "me", "the", "number", "of", "papers", "which", "contain", "the", "keyword", "``", "Natural", "Language", "``", "."], "guid": 4120}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the author in the \" University of Michigan \" whose papers have more than 5000 total citations .", "sql": "SELECT t1.name FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid JOIN writes AS t3 ON t3.aid  =  t1.aid JOIN publication AS t4 ON t3.pid  =  t4.pid WHERE t2.name  =  \"University of Michigan\" GROUP BY t1.name HAVING SUM ( t4.citation_num )  >  5000;", "example": {"db_id": "academic", "query": "SELECT t1.name FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid JOIN writes AS t3 ON t3.aid  =  t1.aid JOIN publication AS t4 ON t3.pid  =  t4.pid WHERE t2.name  =  \"University of Michigan\" GROUP BY t1.name HAVING SUM ( t4.citation_num )  >  5000;", "query_toks": ["SELECT", "t1.name", "FROM", "organization", "AS", "t2", "JOIN", "author", "AS", "t1", "ON", "t2.oid", "=", "t1.oid", "JOIN", "writes", "AS", "t3", "ON", "t3.aid", "=", "t1.aid", "JOIN", "publication", "AS", "t4", "ON", "t3.pid", "=", "t4.pid", "WHERE", "t2.name", "=", "``", "University", "of", "Michigan", "''", "GROUP", "BY", "t1.name", "HAVING", "SUM", "(", "t4.citation_num", ")", ">", "5000", ";"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "organization", "as", "t2", "join", "author", "as", "t1", "on", "t2", ".", "oid", "=", "t1", ".", "oid", "join", "writes", "as", "t3", "on", "t3", ".", "aid", "=", "t1", ".", "aid", "join", "publication", "as", "t4", "on", "t3", ".", "pid", "=", "t4", ".", "pid", "where", "t2", ".", "name", "=", "value", "group", "by", "t1", ".", "name", "having", "sum", "(", "t4", ".", "citation_num", ")", ">", "value"], "question": "return me the author in the \" University of Michigan \" whose papers have more than 5000 total citations .", "question_toks": ["return", "me", "the", "author", "in", "the", "``", "University", "of", "Michigan", "``", "whose", "papers", "have", "more", "than", "5000", "total", "citations", "."], "guid": 4121}}
{"text": "event: Event_ID, Date, Venue, Name, Event_Attendance; journalist: journalist_ID, Name, Nationality, Age, Years_working; news_report: journalist_ID, Event_ID, Work_Type | Show the names of journalists that have reported more than one event.", "sql": "SELECT T3.Name FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID  =  T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID  =  T3.journalist_ID GROUP BY T3.Name HAVING COUNT(*)  >  1", "example": {"db_id": "news_report", "query": "SELECT T3.Name FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID  =  T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID  =  T3.journalist_ID GROUP BY T3.Name HAVING COUNT(*)  >  1", "query_toks": ["SELECT", "T3.Name", "FROM", "news_report", "AS", "T1", "JOIN", "event", "AS", "T2", "ON", "T1.Event_ID", "=", "T2.Event_ID", "JOIN", "journalist", "AS", "T3", "ON", "T1.journalist_ID", "=", "T3.journalist_ID", "GROUP", "BY", "T3.Name", "HAVING", "COUNT", "(", "*", ")", ">", "1"], "query_toks_no_value": ["select", "t3", ".", "name", "from", "news_report", "as", "t1", "join", "event", "as", "t2", "on", "t1", ".", "event_id", "=", "t2", ".", "event_id", "join", "journalist", "as", "t3", "on", "t1", ".", "journalist_id", "=", "t3", ".", "journalist_id", "group", "by", "t3", ".", "name", "having", "count", "(", "*", ")", ">", "value"], "question": "Show the names of journalists that have reported more than one event.", "question_toks": ["Show", "the", "names", "of", "journalists", "that", "have", "reported", "more", "than", "one", "event", "."], "guid": 4122}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | What years did Pedro Domingos publish papers in ?", "sql": "SELECT DISTINCT t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Pedro Domingos\" GROUP BY t3.year;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Pedro Domingos\" GROUP BY t3.year;", "query_toks": ["SELECT", "DISTINCT", "t3.year", "FROM", "writes", "AS", "t2", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "JOIN", "paper", "AS", "t3", "ON", "t2.paperid", "=", "t3.paperid", "WHERE", "t1.authorname", "=", "``", "Pedro", "Domingos", "''", "GROUP", "BY", "t3.year", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "year", "from", "writes", "as", "t2", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "join", "paper", "as", "t3", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "where", "t1", ".", "authorname", "=", "value", "group", "by", "t3", ".", "year"], "question": "What years did Pedro Domingos publish papers in ?", "question_toks": ["What", "years", "did", "Pedro", "Domingos", "publish", "papers", "in", "?"], "guid": 4123}}
{"text": "event: Event_ID, Date, Venue, Name, Event_Attendance; journalist: journalist_ID, Name, Nationality, Age, Years_working; news_report: journalist_ID, Event_ID, Work_Type | Show the names of journalists from \"England\" or \"Wales\".", "sql": "SELECT Name FROM journalist WHERE Nationality  =  \"England\" OR Nationality  =  \"Wales\"", "example": {"db_id": "news_report", "query": "SELECT Name FROM journalist WHERE Nationality  =  \"England\" OR Nationality  =  \"Wales\"", "query_toks": ["SELECT", "Name", "FROM", "journalist", "WHERE", "Nationality", "=", "``", "England", "''", "OR", "Nationality", "=", "``", "Wales", "''"], "query_toks_no_value": ["select", "name", "from", "journalist", "where", "nationality", "=", "value", "or", "nationality", "=", "value"], "question": "Show the names of journalists from \"England\" or \"Wales\".", "question_toks": ["Show", "the", "names", "of", "journalists", "from", "``", "England", "''", "or", "``", "Wales", "''", "."], "guid": 4124}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | papers of ali farhadi in eccv 2016", "sql": "SELECT DISTINCT t3.paperid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"ali farhadi\" AND t3.year  =  2016 AND t4.venuename  =  \"eccv\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"ali farhadi\" AND t3.year  =  2016 AND t4.venuename  =  \"eccv\";", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "venue", "AS", "t4", "JOIN", "paper", "AS", "t3", "ON", "t4.venueid", "=", "t3.venueid", "JOIN", "writes", "AS", "t2", "ON", "t2.paperid", "=", "t3.paperid", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "WHERE", "t1.authorname", "=", "``", "ali", "farhadi", "''", "AND", "t3.year", "=", "2016", "AND", "t4.venuename", "=", "``", "eccv", "''", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "venue", "as", "t4", "join", "paper", "as", "t3", "on", "t4", ".", "venueid", "=", "t3", ".", "venueid", "join", "writes", "as", "t2", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "where", "t1", ".", "authorname", "=", "value", "and", "t3", ".", "year", "=", "value", "and", "t4", ".", "venuename", "=", "value"], "question": "papers of ali farhadi in eccv 2016", "question_toks": ["papers", "of", "ali", "farhadi", "in", "eccv", "2016"], "guid": 4125}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | how many papers does Mirella Lapata cite", "sql": "SELECT DISTINCT COUNT ( t3.citedpaperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN cite AS t3 ON t2.paperid  =  t3.citingpaperid WHERE t1.authorname  =  \"Mirella Lapata\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( t3.citedpaperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN cite AS t3 ON t2.paperid  =  t3.citingpaperid WHERE t1.authorname  =  \"Mirella Lapata\";", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "t3.citedpaperid", ")", "FROM", "writes", "AS", "t2", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "JOIN", "cite", "AS", "t3", "ON", "t2.paperid", "=", "t3.citingpaperid", "WHERE", "t1.authorname", "=", "``", "Mirella", "Lapata", "''", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "t3", ".", "citedpaperid", ")", "from", "writes", "as", "t2", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "join", "cite", "as", "t3", "on", "t2", ".", "paperid", "=", "t3", ".", "citingpaperid", "where", "t1", ".", "authorname", "=", "value"], "question": "how many papers does Mirella Lapata cite", "question_toks": ["how", "many", "papers", "does", "Mirella", "Lapata", "cite"], "guid": 4126}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | How many citations does luke zettlemoyer have per year", "sql": "SELECT DISTINCT COUNT ( t4.citedpaperid )  ,  t3.year FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"luke zettlemoyer\" GROUP BY t3.year;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( t4.citedpaperid )  ,  t3.year FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"luke zettlemoyer\" GROUP BY t3.year;", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "t4.citedpaperid", ")", ",", "t3.year", "FROM", "paper", "AS", "t3", "JOIN", "cite", "AS", "t4", "ON", "t3.paperid", "=", "t4.citedpaperid", "JOIN", "writes", "AS", "t2", "ON", "t2.paperid", "=", "t3.paperid", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "WHERE", "t1.authorname", "=", "``", "luke", "zettlemoyer", "''", "GROUP", "BY", "t3.year", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "t4", ".", "citedpaperid", ")", ",", "t3", ".", "year", "from", "paper", "as", "t3", "join", "cite", "as", "t4", "on", "t3", ".", "paperid", "=", "t4", ".", "citedpaperid", "join", "writes", "as", "t2", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "where", "t1", ".", "authorname", "=", "value", "group", "by", "t3", ".", "year"], "question": "How many citations does luke zettlemoyer have per year", "question_toks": ["How", "many", "citations", "does", "luke", "zettlemoyer", "have", "per", "year"], "guid": 4127}}
{"text": "Inst: instID, name, country; Authors: authID, lname, fname; Papers: paperID, title; Authorship: authID, instID, paperID, authOrder | Which papers' first author is affiliated with an institution in the country \"Japan\" and has last name \"Ohori\"? Give me the titles of the papers.", "sql": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid JOIN inst AS t4 ON t2.instid  =  t4.instid WHERE t4.country  =  \"Japan\" AND t2.authorder  =  1 AND t1.lname  =  \"Ohori\"", "example": {"db_id": "icfp_1", "query": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid JOIN inst AS t4 ON t2.instid  =  t4.instid WHERE t4.country  =  \"Japan\" AND t2.authorder  =  1 AND t1.lname  =  \"Ohori\"", "query_toks": ["SELECT", "t3.title", "FROM", "authors", "AS", "t1", "JOIN", "authorship", "AS", "t2", "ON", "t1.authid", "=", "t2.authid", "JOIN", "papers", "AS", "t3", "ON", "t2.paperid", "=", "t3.paperid", "JOIN", "inst", "AS", "t4", "ON", "t2.instid", "=", "t4.instid", "WHERE", "t4.country", "=", "``", "Japan", "''", "AND", "t2.authorder", "=", "1", "AND", "t1.lname", "=", "``", "Ohori", "''"], "query_toks_no_value": ["select", "t3", ".", "title", "from", "authors", "as", "t1", "join", "authorship", "as", "t2", "on", "t1", ".", "authid", "=", "t2", ".", "authid", "join", "papers", "as", "t3", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "join", "inst", "as", "t4", "on", "t2", ".", "instid", "=", "t4", ".", "instid", "where", "t4", ".", "country", "=", "value", "and", "t2", ".", "authorder", "=", "value", "and", "t1", ".", "lname", "=", "value"], "question": "Which papers' first author is affiliated with an institution in the country \"Japan\" and has last name \"Ohori\"? Give me the titles of the papers.", "question_toks": ["Which", "papers", "'", "first", "author", "is", "affiliated", "with", "an", "institution", "in", "the", "country", "``", "Japan", "''", "and", "has", "last", "name", "``", "Ohori", "''", "?", "Give", "me", "the", "titles", "of", "the", "papers", "."], "guid": 4128}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the authors who have papers in VLDB conference in 2002 .", "sql": "SELECT t1.name FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t2.name  =  \"VLDB\" AND t4.year  =  2002;", "example": {"db_id": "academic", "query": "SELECT t1.name FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t2.name  =  \"VLDB\" AND t4.year  =  2002;", "query_toks": ["SELECT", "t1.name", "FROM", "publication", "AS", "t4", "JOIN", "conference", "AS", "t2", "ON", "t4.cid", "=", "t2.cid", "JOIN", "writes", "AS", "t3", "ON", "t3.pid", "=", "t4.pid", "JOIN", "author", "AS", "t1", "ON", "t3.aid", "=", "t1.aid", "WHERE", "t2.name", "=", "``", "VLDB", "''", "AND", "t4.year", "=", "2002", ";"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "publication", "as", "t4", "join", "conference", "as", "t2", "on", "t4", ".", "cid", "=", "t2", ".", "cid", "join", "writes", "as", "t3", "on", "t3", ".", "pid", "=", "t4", ".", "pid", "join", "author", "as", "t1", "on", "t3", ".", "aid", "=", "t1", ".", "aid", "where", "t2", ".", "name", "=", "value", "and", "t4", ".", "year", "=", "value"], "question": "return me the authors who have papers in VLDB conference in 2002 .", "question_toks": ["return", "me", "the", "authors", "who", "have", "papers", "in", "VLDB", "conference", "in", "2002", "."], "guid": 4129}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | papers about Parsing in acl 2012", "sql": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Parsing\" AND t3.year  =  2012 AND t4.venuename  =  \"acl\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Parsing\" AND t3.year  =  2012 AND t4.venuename  =  \"acl\";", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "JOIN", "venue", "AS", "t4", "ON", "t4.venueid", "=", "t3.venueid", "WHERE", "t1.keyphrasename", "=", "``", "Parsing", "''", "AND", "t3.year", "=", "2012", "AND", "t4.venuename", "=", "``", "acl", "''", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "join", "venue", "as", "t4", "on", "t4", ".", "venueid", "=", "t3", ".", "venueid", "where", "t1", ".", "keyphrasename", "=", "value", "and", "t3", ".", "year", "=", "value", "and", "t4", ".", "venuename", "=", "value"], "question": "papers about Parsing in acl 2012", "question_toks": ["papers", "about", "Parsing", "in", "acl", "2012"], "guid": 4130}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | What conferences did li dong publish in in 2016 ?", "sql": "SELECT DISTINCT t3.venueid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"li dong\" AND t3.year  =  2016;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.venueid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"li dong\" AND t3.year  =  2016;", "query_toks": ["SELECT", "DISTINCT", "t3.venueid", "FROM", "writes", "AS", "t2", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "JOIN", "paper", "AS", "t3", "ON", "t2.paperid", "=", "t3.paperid", "WHERE", "t1.authorname", "=", "``", "li", "dong", "''", "AND", "t3.year", "=", "2016", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "venueid", "from", "writes", "as", "t2", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "join", "paper", "as", "t3", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "where", "t1", ".", "authorname", "=", "value", "and", "t3", ".", "year", "=", "value"], "question": "What conferences did li dong publish in in 2016 ?", "question_toks": ["What", "conferences", "did", "li", "dong", "publish", "in", "in", "2016", "?"], "guid": 4131}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me all the organizations in Databases area .", "sql": "SELECT t2.name FROM domain_author AS t4 JOIN author AS t1 ON t4.aid  =  t1.aid JOIN DOMAIN AS t3 ON t3.did  =  t4.did JOIN organization AS t2 ON t2.oid  =  t1.oid WHERE t3.name  =  \"Databases\";", "example": {"db_id": "academic", "query": "SELECT t2.name FROM domain_author AS t4 JOIN author AS t1 ON t4.aid  =  t1.aid JOIN DOMAIN AS t3 ON t3.did  =  t4.did JOIN organization AS t2 ON t2.oid  =  t1.oid WHERE t3.name  =  \"Databases\";", "query_toks": ["SELECT", "t2.name", "FROM", "domain_author", "AS", "t4", "JOIN", "author", "AS", "t1", "ON", "t4.aid", "=", "t1.aid", "JOIN", "DOMAIN", "AS", "t3", "ON", "t3.did", "=", "t4.did", "JOIN", "organization", "AS", "t2", "ON", "t2.oid", "=", "t1.oid", "WHERE", "t3.name", "=", "``", "Databases", "''", ";"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "domain_author", "as", "t4", "join", "author", "as", "t1", "on", "t4", ".", "aid", "=", "t1", ".", "aid", "join", "domain", "as", "t3", "on", "t3", ".", "did", "=", "t4", ".", "did", "join", "organization", "as", "t2", "on", "t2", ".", "oid", "=", "t1", ".", "oid", "where", "t3", ".", "name", "=", "value"], "question": "return me all the organizations in Databases area .", "question_toks": ["return", "me", "all", "the", "organizations", "in", "Databases", "area", "."], "guid": 4132}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | what is ohad shamir 's most cited paper ?", "sql": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"ohad shamir\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"ohad shamir\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;", "query_toks": ["SELECT", "DISTINCT", "t4.citedpaperid", ",", "COUNT", "(", "t4.citedpaperid", ")", "FROM", "paper", "AS", "t3", "JOIN", "cite", "AS", "t4", "ON", "t3.paperid", "=", "t4.citedpaperid", "JOIN", "writes", "AS", "t2", "ON", "t2.paperid", "=", "t3.paperid", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "WHERE", "t1.authorname", "=", "``", "ohad", "shamir", "''", "GROUP", "BY", "t4.citedpaperid", "ORDER", "BY", "COUNT", "(", "t4.citedpaperid", ")", "DESC", ";"], "query_toks_no_value": ["select", "distinct", "t4", ".", "citedpaperid", ",", "count", "(", "t4", ".", "citedpaperid", ")", "from", "paper", "as", "t3", "join", "cite", "as", "t4", "on", "t3", ".", "paperid", "=", "t4", ".", "citedpaperid", "join", "writes", "as", "t2", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "where", "t1", ".", "authorname", "=", "value", "group", "by", "t4", ".", "citedpaperid", "order", "by", "count", "(", "t4", ".", "citedpaperid", ")", "desc"], "question": "what is ohad shamir 's most cited paper ?", "question_toks": ["what", "is", "ohad", "shamir", "'s", "most", "cited", "paper", "?"], "guid": 4133}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | How many papers run experiments on ImageNet ?", "sql": "SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname LIKE \"ImageNet\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname LIKE \"ImageNet\";", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "DISTINCT", "t3.paperid", ")", "FROM", "paperdataset", "AS", "t2", "JOIN", "dataset", "AS", "t1", "ON", "t2.datasetid", "=", "t1.datasetid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "WHERE", "t1.datasetname", "LIKE", "``", "ImageNet", "''", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "distinct", "t3", ".", "paperid", ")", "from", "paperdataset", "as", "t2", "join", "dataset", "as", "t1", "on", "t2", ".", "datasetid", "=", "t1", ".", "datasetid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "where", "t1", ".", "datasetname", "like", "value"], "question": "How many papers run experiments on ImageNet ?", "question_toks": ["How", "many", "papers", "run", "experiments", "on", "ImageNet", "?"], "guid": 4134}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | how many papers does David M. Blei have in AISTATS ?", "sql": "SELECT DISTINCT COUNT ( t3.paperid ) FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"David M. Blei\" AND t4.venuename  =  \"AISTATS\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( t3.paperid ) FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"David M. Blei\" AND t4.venuename  =  \"AISTATS\";", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "t3.paperid", ")", "FROM", "venue", "AS", "t4", "JOIN", "paper", "AS", "t3", "ON", "t4.venueid", "=", "t3.venueid", "JOIN", "writes", "AS", "t2", "ON", "t2.paperid", "=", "t3.paperid", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "WHERE", "t1.authorname", "=", "``", "David", "M.", "Blei", "''", "AND", "t4.venuename", "=", "``", "AISTATS", "''", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "t3", ".", "paperid", ")", "from", "venue", "as", "t4", "join", "paper", "as", "t3", "on", "t4", ".", "venueid", "=", "t3", ".", "venueid", "join", "writes", "as", "t2", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "where", "t1", ".", "authorname", "=", "value", "and", "t4", ".", "venuename", "=", "value"], "question": "how many papers does David M. Blei have in AISTATS ?", "question_toks": ["how", "many", "papers", "does", "David", "M.", "Blei", "have", "in", "AISTATS", "?"], "guid": 4135}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | topics popular at NIPS 2015", "sql": "SELECT DISTINCT COUNT ( t3.paperid )  ,  t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t3.year  =  2015 AND t4.venuename  =  \"NIPS\" GROUP BY t1.keyphraseid ORDER BY COUNT ( t3.paperid ) DESC;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( t3.paperid )  ,  t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t3.year  =  2015 AND t4.venuename  =  \"NIPS\" GROUP BY t1.keyphraseid ORDER BY COUNT ( t3.paperid ) DESC;", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "t3.paperid", ")", ",", "t1.keyphraseid", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "JOIN", "venue", "AS", "t4", "ON", "t4.venueid", "=", "t3.venueid", "WHERE", "t3.year", "=", "2015", "AND", "t4.venuename", "=", "``", "NIPS", "''", "GROUP", "BY", "t1.keyphraseid", "ORDER", "BY", "COUNT", "(", "t3.paperid", ")", "DESC", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "t3", ".", "paperid", ")", ",", "t1", ".", "keyphraseid", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "join", "venue", "as", "t4", "on", "t4", ".", "venueid", "=", "t3", ".", "venueid", "where", "t3", ".", "year", "=", "value", "and", "t4", ".", "venuename", "=", "value", "group", "by", "t1", ".", "keyphraseid", "order", "by", "count", "(", "t3", ".", "paperid", ")", "desc"], "question": "topics popular at NIPS 2015", "question_toks": ["topics", "popular", "at", "NIPS", "2015"], "guid": 4136}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | How many papers has Noah Smith co-authored since 2009 ?", "sql": "SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname != \"Noah Smith\" AND t3.year  >  2009 AND t2.paperid IN ( SELECT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname LIKE \"Noah Smith\" );", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname != \"Noah Smith\" AND t3.year  >  2009 AND t2.paperid IN ( SELECT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname LIKE \"Noah Smith\" );", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "DISTINCT", "t2.paperid", ")", "FROM", "writes", "AS", "t2", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "JOIN", "paper", "AS", "t3", "ON", "t2.paperid", "=", "t3.paperid", "WHERE", "t1.authorname", "!", "=", "``", "Noah", "Smith", "''", "AND", "t3.year", ">", "2009", "AND", "t2.paperid", "IN", "(", "SELECT", "t2.paperid", "FROM", "writes", "AS", "t2", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "WHERE", "t1.authorname", "LIKE", "``", "Noah", "Smith", "''", ")", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "distinct", "t2", ".", "paperid", ")", "from", "writes", "as", "t2", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "join", "paper", "as", "t3", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "where", "t1", ".", "authorname", "!", "=", "value", "and", "t3", ".", "year", ">", "value", "and", "t2", ".", "paperid", "in", "(", "select", "t2", ".", "paperid", "from", "writes", "as", "t2", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "where", "t1", ".", "authorname", "like", "value", ")"], "question": "How many papers has Noah Smith co-authored since 2009 ?", "question_toks": ["How", "many", "papers", "has", "Noah", "Smith", "co-authored", "since", "2009", "?"], "guid": 4137}}
{"text": "workshop: Workshop_ID, Date, Venue, Name; submission: Submission_ID, Scores, Author, College; Acceptance: Submission_ID, Workshop_ID, Result | Count the number of submissions.", "sql": "SELECT count(*) FROM submission", "example": {"db_id": "workshop_paper", "query": "SELECT count(*) FROM submission", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "submission"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "submission"], "question": "Count the number of submissions.", "question_toks": ["Count", "the", "number", "of", "submissions", "."], "guid": 4138}}
{"text": "Inst: instID, name, country; Authors: authID, lname, fname; Papers: paperID, title; Authorship: authID, instID, paperID, authOrder | Find the country that the most papers are affiliated with.", "sql": "SELECT t1.country FROM inst AS t1 JOIN authorship AS t2 ON t1.instid  =  t2.instid JOIN papers AS t3 ON t2.paperid  =  t3.paperid GROUP BY t1.country ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "icfp_1", "query": "SELECT t1.country FROM inst AS t1 JOIN authorship AS t2 ON t1.instid  =  t2.instid JOIN papers AS t3 ON t2.paperid  =  t3.paperid GROUP BY t1.country ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "t1.country", "FROM", "inst", "AS", "t1", "JOIN", "authorship", "AS", "t2", "ON", "t1.instid", "=", "t2.instid", "JOIN", "papers", "AS", "t3", "ON", "t2.paperid", "=", "t3.paperid", "GROUP", "BY", "t1.country", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "country", "from", "inst", "as", "t1", "join", "authorship", "as", "t2", "on", "t1", ".", "instid", "=", "t2", ".", "instid", "join", "papers", "as", "t3", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "group", "by", "t1", ".", "country", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Find the country that the most papers are affiliated with.", "question_toks": ["Find", "the", "country", "that", "the", "most", "papers", "are", "affiliated", "with", "."], "guid": 4139}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | recent research interests of sanjeev arora", "sql": "SELECT DISTINCT t1.keyphrasename  ,  t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"sanjeev arora\" ORDER BY t3.year DESC;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t1.keyphrasename  ,  t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"sanjeev arora\" ORDER BY t3.year DESC;", "query_toks": ["SELECT", "DISTINCT", "t1.keyphrasename", ",", "t3.year", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "JOIN", "writes", "AS", "t4", "ON", "t4.paperid", "=", "t3.paperid", "JOIN", "author", "AS", "t5", "ON", "t4.authorid", "=", "t5.authorid", "WHERE", "t5.authorname", "=", "``", "sanjeev", "arora", "''", "ORDER", "BY", "t3.year", "DESC", ";"], "query_toks_no_value": ["select", "distinct", "t1", ".", "keyphrasename", ",", "t3", ".", "year", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "join", "writes", "as", "t4", "on", "t4", ".", "paperid", "=", "t3", ".", "paperid", "join", "author", "as", "t5", "on", "t4", ".", "authorid", "=", "t5", ".", "authorid", "where", "t5", ".", "authorname", "=", "value", "order", "by", "t3", ".", "year", "desc"], "question": "recent research interests of sanjeev arora", "question_toks": ["recent", "research", "interests", "of", "sanjeev", "arora"], "guid": 4140}}
{"text": "item: i_id, title; review: a_id, u_id, i_id, rating, rank; useracct: u_id, name; trust: source_u_id, target_u_id, trust | Find the number of users who did not write any review.", "sql": "SELECT count(*) FROM useracct WHERE u_id NOT IN (SELECT u_id FROM review)", "example": {"db_id": "epinions_1", "query": "SELECT count(*) FROM useracct WHERE u_id NOT IN (SELECT u_id FROM review)", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "useracct", "WHERE", "u_id", "NOT", "IN", "(", "SELECT", "u_id", "FROM", "review", ")"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "useracct", "where", "u_id", "not", "in", "(", "select", "u_id", "from", "review", ")"], "question": "Find the number of users who did not write any review.", "question_toks": ["Find", "the", "number", "of", "users", "who", "did", "not", "write", "any", "review", "."], "guid": 4141}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | papers published in 2015 by Liwen Xiong", "sql": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Liwen Xiong\" AND t3.year  =  2015;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Liwen Xiong\" AND t3.year  =  2015;", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "writes", "AS", "t2", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "JOIN", "paper", "AS", "t3", "ON", "t2.paperid", "=", "t3.paperid", "WHERE", "t1.authorname", "=", "``", "Liwen", "Xiong", "''", "AND", "t3.year", "=", "2015", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "writes", "as", "t2", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "join", "paper", "as", "t3", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "where", "t1", ".", "authorname", "=", "value", "and", "t3", ".", "year", "=", "value"], "question": "papers published in 2015 by Liwen Xiong", "question_toks": ["papers", "published", "in", "2015", "by", "Liwen", "Xiong"], "guid": 4142}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | List of authors in acl 2016", "sql": "SELECT DISTINCT t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2016 AND t3.venuename  =  \"acl\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2016 AND t3.venuename  =  \"acl\";", "query_toks": ["SELECT", "DISTINCT", "t1.authorid", "FROM", "venue", "AS", "t3", "JOIN", "paper", "AS", "t2", "ON", "t3.venueid", "=", "t2.venueid", "JOIN", "writes", "AS", "t1", "ON", "t1.paperid", "=", "t2.paperid", "WHERE", "t2.year", "=", "2016", "AND", "t3.venuename", "=", "``", "acl", "''", ";"], "query_toks_no_value": ["select", "distinct", "t1", ".", "authorid", "from", "venue", "as", "t3", "join", "paper", "as", "t2", "on", "t3", ".", "venueid", "=", "t2", ".", "venueid", "join", "writes", "as", "t1", "on", "t1", ".", "paperid", "=", "t2", ".", "paperid", "where", "t2", ".", "year", "=", "value", "and", "t3", ".", "venuename", "=", "value"], "question": "List of authors in acl 2016", "question_toks": ["List", "of", "authors", "in", "acl", "2016"], "guid": 4143}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | Which journals did linda shapiro submit papers to ?", "sql": "SELECT DISTINCT t2.journalid FROM paper AS t3 JOIN journal AS t2 ON t3.journalid  =  t2.journalid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"linda shapiro\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t2.journalid FROM paper AS t3 JOIN journal AS t2 ON t3.journalid  =  t2.journalid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"linda shapiro\";", "query_toks": ["SELECT", "DISTINCT", "t2.journalid", "FROM", "paper", "AS", "t3", "JOIN", "journal", "AS", "t2", "ON", "t3.journalid", "=", "t2.journalid", "JOIN", "writes", "AS", "t4", "ON", "t4.paperid", "=", "t3.paperid", "JOIN", "author", "AS", "t1", "ON", "t4.authorid", "=", "t1.authorid", "WHERE", "t1.authorname", "=", "``", "linda", "shapiro", "''", ";"], "query_toks_no_value": ["select", "distinct", "t2", ".", "journalid", "from", "paper", "as", "t3", "join", "journal", "as", "t2", "on", "t3", ".", "journalid", "=", "t2", ".", "journalid", "join", "writes", "as", "t4", "on", "t4", ".", "paperid", "=", "t3", ".", "paperid", "join", "author", "as", "t1", "on", "t4", ".", "authorid", "=", "t1", ".", "authorid", "where", "t1", ".", "authorname", "=", "value"], "question": "Which journals did linda shapiro submit papers to ?", "question_toks": ["Which", "journals", "did", "linda", "shapiro", "submit", "papers", "to", "?"], "guid": 4144}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | How many papers are there ?", "sql": "SELECT DISTINCT COUNT ( DISTINCT paperid ) FROM paper;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( DISTINCT paperid ) FROM paper;", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "DISTINCT", "paperid", ")", "FROM", "paper", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "distinct", "paperid", ")", "from", "paper"], "question": "How many papers are there ?", "question_toks": ["How", "many", "papers", "are", "there", "?"], "guid": 4145}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | papers about character recognition from before 2010", "sql": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"character recognition\" AND t3.year  <  2010;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"character recognition\" AND t3.year  <  2010;", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "WHERE", "t1.keyphrasename", "=", "``", "character", "recognition", "''", "AND", "t3.year", "<", "2010", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "where", "t1", ".", "keyphrasename", "=", "value", "and", "t3", ".", "year", "<", "value"], "question": "papers about character recognition from before 2010", "question_toks": ["papers", "about", "character", "recognition", "from", "before", "2010"], "guid": 4146}}
{"text": "Document_Types: document_type_code, document_description; Documents: document_id, document_type_code, grant_id, sent_date, response_received_date, other_details; Grants: grant_id, organisation_id, grant_amount, grant_start_date, grant_end_date, other_details; Organisation_Types: organisation_type, organisation_type_description; Organisations: organisation_id, organisation_type, organisation_details; Project_Outcomes: project_id, outcome_code, outcome_details; Project_Staff: staff_id, project_id, role_code, date_from, date_to, other_details; Projects: project_id, organisation_id, project_details; Research_Outcomes: outcome_code, outcome_description; Research_Staff: staff_id, employer_organisation_id, staff_details | What is the complete description of the job of a researcher?", "sql": "SELECT role_description FROM Staff_Roles WHERE role_code  =  'researcher'", "example": {"db_id": "tracking_grants_for_research", "query": "SELECT role_description FROM Staff_Roles WHERE role_code  =  'researcher'", "query_toks": ["SELECT", "role_description", "FROM", "Staff_Roles", "WHERE", "role_code", "=", "'researcher", "'"], "query_toks_no_value": ["select", "role_description", "from", "staff_roles", "where", "role_code", "=", "value"], "question": "What is the complete description of the job of a researcher?", "question_toks": ["What", "is", "the", "complete", "description", "of", "the", "job", "of", "a", "researcher", "?"], "guid": 4147}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | In 2010 what journal published an article about Trophic Cascade ?", "sql": "SELECT DISTINCT t3.journalid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Trophic Cascade\" AND t3.year  =  2010 GROUP BY t3.journalid;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.journalid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Trophic Cascade\" AND t3.year  =  2010 GROUP BY t3.journalid;", "query_toks": ["SELECT", "DISTINCT", "t3.journalid", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "WHERE", "t1.keyphrasename", "=", "``", "Trophic", "Cascade", "''", "AND", "t3.year", "=", "2010", "GROUP", "BY", "t3.journalid", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "journalid", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "where", "t1", ".", "keyphrasename", "=", "value", "and", "t3", ".", "year", "=", "value", "group", "by", "t3", ".", "journalid"], "question": "In 2010 what journal published an article about Trophic Cascade ?", "question_toks": ["In", "2010", "what", "journal", "published", "an", "article", "about", "Trophic", "Cascade", "?"], "guid": 4148}}
{"text": "Document_Types: document_type_code, document_description; Documents: document_id, document_type_code, grant_id, sent_date, response_received_date, other_details; Grants: grant_id, organisation_id, grant_amount, grant_start_date, grant_end_date, other_details; Organisation_Types: organisation_type, organisation_type_description; Organisations: organisation_id, organisation_type, organisation_details; Project_Outcomes: project_id, outcome_code, outcome_details; Project_Staff: staff_id, project_id, role_code, date_from, date_to, other_details; Projects: project_id, organisation_id, project_details; Research_Outcomes: outcome_code, outcome_description; Research_Staff: staff_id, employer_organisation_id, staff_details | What are the ids and details for all organizations that have grants of more than 6000 dollars?", "sql": "SELECT T2.organisation_id ,  T2.organisation_details FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id  =  T2.organisation_id GROUP BY T2.organisation_id HAVING sum(T1.grant_amount)  >  6000", "example": {"db_id": "tracking_grants_for_research", "query": "SELECT T2.organisation_id ,  T2.organisation_details FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id  =  T2.organisation_id GROUP BY T2.organisation_id HAVING sum(T1.grant_amount)  >  6000", "query_toks": ["SELECT", "T2.organisation_id", ",", "T2.organisation_details", "FROM", "Grants", "AS", "T1", "JOIN", "Organisations", "AS", "T2", "ON", "T1.organisation_id", "=", "T2.organisation_id", "GROUP", "BY", "T2.organisation_id", "HAVING", "sum", "(", "T1.grant_amount", ")", ">", "6000"], "query_toks_no_value": ["select", "t2", ".", "organisation_id", ",", "t2", ".", "organisation_details", "from", "grants", "as", "t1", "join", "organisations", "as", "t2", "on", "t1", ".", "organisation_id", "=", "t2", ".", "organisation_id", "group", "by", "t2", ".", "organisation_id", "having", "sum", "(", "t1", ".", "grant_amount", ")", ">", "value"], "question": "What are the ids and details for all organizations that have grants of more than 6000 dollars?", "question_toks": ["What", "are", "the", "ids", "and", "details", "for", "all", "organizations", "that", "have", "grants", "of", "more", "than", "6000", "dollars", "?"], "guid": 4149}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | character recognition papers earlier than 2010", "sql": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"character recognition\" AND t3.year  <  2010;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"character recognition\" AND t3.year  <  2010;", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "WHERE", "t1.keyphrasename", "=", "``", "character", "recognition", "''", "AND", "t3.year", "<", "2010", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "where", "t1", ".", "keyphrasename", "=", "value", "and", "t3", ".", "year", "<", "value"], "question": "character recognition papers earlier than 2010", "question_toks": ["character", "recognition", "papers", "earlier", "than", "2010"], "guid": 4150}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | papers about WebKB", "sql": "SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname  =  \"WebKB\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname  =  \"WebKB\";", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "paperdataset", "AS", "t2", "JOIN", "dataset", "AS", "t1", "ON", "t2.datasetid", "=", "t1.datasetid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "WHERE", "t1.datasetname", "=", "``", "WebKB", "''", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "paperdataset", "as", "t2", "join", "dataset", "as", "t1", "on", "t2", ".", "datasetid", "=", "t1", ".", "datasetid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "where", "t1", ".", "datasetname", "=", "value"], "question": "papers about WebKB", "question_toks": ["papers", "about", "WebKB"], "guid": 4151}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | chi", "sql": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"chi\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"chi\";", "query_toks": ["SELECT", "DISTINCT", "t1.paperid", "FROM", "venue", "AS", "t2", "JOIN", "paper", "AS", "t1", "ON", "t2.venueid", "=", "t1.venueid", "WHERE", "t2.venuename", "=", "``", "chi", "''", ";"], "query_toks_no_value": ["select", "distinct", "t1", ".", "paperid", "from", "venue", "as", "t2", "join", "paper", "as", "t1", "on", "t2", ".", "venueid", "=", "t1", ".", "venueid", "where", "t2", ".", "venuename", "=", "value"], "question": "chi", "question_toks": ["chi"], "guid": 4152}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | Papers published in 2015 by Liwen Xiong", "sql": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Liwen Xiong\" AND t3.year  =  2015;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Liwen Xiong\" AND t3.year  =  2015;", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "writes", "AS", "t2", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "JOIN", "paper", "AS", "t3", "ON", "t2.paperid", "=", "t3.paperid", "WHERE", "t1.authorname", "=", "``", "Liwen", "Xiong", "''", "AND", "t3.year", "=", "2015", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "writes", "as", "t2", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "join", "paper", "as", "t3", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "where", "t1", ".", "authorname", "=", "value", "and", "t3", ".", "year", "=", "value"], "question": "Papers published in 2015 by Liwen Xiong", "question_toks": ["Papers", "published", "in", "2015", "by", "Liwen", "Xiong"], "guid": 4153}}
{"text": "Document_Types: document_type_code, document_description; Documents: document_id, document_type_code, grant_id, sent_date, response_received_date, other_details; Grants: grant_id, organisation_id, grant_amount, grant_start_date, grant_end_date, other_details; Organisation_Types: organisation_type, organisation_type_description; Organisations: organisation_id, organisation_type, organisation_details; Project_Outcomes: project_id, outcome_code, outcome_details; Project_Staff: staff_id, project_id, role_code, date_from, date_to, other_details; Projects: project_id, organisation_id, project_details; Research_Outcomes: outcome_code, outcome_description; Research_Staff: staff_id, employer_organisation_id, staff_details | What are the details of the project with no outcomes?", "sql": "SELECT project_details FROM Projects WHERE project_id NOT IN ( SELECT project_id FROM Project_outcomes )", "example": {"db_id": "tracking_grants_for_research", "query": "SELECT project_details FROM Projects WHERE project_id NOT IN ( SELECT project_id FROM Project_outcomes )", "query_toks": ["SELECT", "project_details", "FROM", "Projects", "WHERE", "project_id", "NOT", "IN", "(", "SELECT", "project_id", "FROM", "Project_outcomes", ")"], "query_toks_no_value": ["select", "project_details", "from", "projects", "where", "project_id", "not", "in", "(", "select", "project_id", "from", "project_outcomes", ")"], "question": "What are the details of the project with no outcomes?", "question_toks": ["What", "are", "the", "details", "of", "the", "project", "with", "no", "outcomes", "?"], "guid": 4154}}
{"text": "item: i_id, title; review: a_id, u_id, i_id, rating, rank; useracct: u_id, name; trust: source_u_id, target_u_id, trust | Find the name of the user who gives the most reviews.", "sql": "SELECT T1.name FROM useracct AS T1 JOIN review AS T2 ON T1.u_id  =  T2.u_id GROUP BY T2.u_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "epinions_1", "query": "SELECT T1.name FROM useracct AS T1 JOIN review AS T2 ON T1.u_id  =  T2.u_id GROUP BY T2.u_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.name", "FROM", "useracct", "AS", "T1", "JOIN", "review", "AS", "T2", "ON", "T1.u_id", "=", "T2.u_id", "GROUP", "BY", "T2.u_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "useracct", "as", "t1", "join", "review", "as", "t2", "on", "t1", ".", "u_id", "=", "t2", ".", "u_id", "group", "by", "t2", ".", "u_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Find the name of the user who gives the most reviews.", "question_toks": ["Find", "the", "name", "of", "the", "user", "who", "gives", "the", "most", "reviews", "."], "guid": 4155}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | How many papers are presented in nature communications 2015 ?", "sql": "SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"nature communications\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"nature communications\";", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "t1.paperid", ")", "FROM", "venue", "AS", "t2", "JOIN", "paper", "AS", "t1", "ON", "t2.venueid", "=", "t1.venueid", "WHERE", "t1.year", "=", "2015", "AND", "t2.venuename", "=", "``", "nature", "communications", "''", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "t1", ".", "paperid", ")", "from", "venue", "as", "t2", "join", "paper", "as", "t1", "on", "t2", ".", "venueid", "=", "t1", ".", "venueid", "where", "t1", ".", "year", "=", "value", "and", "t2", ".", "venuename", "=", "value"], "question": "How many papers are presented in nature communications 2015 ?", "question_toks": ["How", "many", "papers", "are", "presented", "in", "nature", "communications", "2015", "?"], "guid": 4156}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | Papers on chi", "sql": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"chi\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"chi\";", "query_toks": ["SELECT", "DISTINCT", "t1.paperid", "FROM", "venue", "AS", "t2", "JOIN", "paper", "AS", "t1", "ON", "t2.venueid", "=", "t1.venueid", "WHERE", "t2.venuename", "=", "``", "chi", "''", ";"], "query_toks_no_value": ["select", "distinct", "t1", ".", "paperid", "from", "venue", "as", "t2", "join", "paper", "as", "t1", "on", "t2", ".", "venueid", "=", "t1", ".", "venueid", "where", "t2", ".", "venuename", "=", "value"], "question": "Papers on chi", "question_toks": ["Papers", "on", "chi"], "guid": 4157}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | who publishes in NIPS ?", "sql": "SELECT DISTINCT t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  \"NIPS\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  \"NIPS\";", "query_toks": ["SELECT", "DISTINCT", "t1.authorid", "FROM", "venue", "AS", "t3", "JOIN", "paper", "AS", "t2", "ON", "t3.venueid", "=", "t2.venueid", "JOIN", "writes", "AS", "t1", "ON", "t1.paperid", "=", "t2.paperid", "WHERE", "t3.venuename", "=", "``", "NIPS", "''", ";"], "query_toks_no_value": ["select", "distinct", "t1", ".", "authorid", "from", "venue", "as", "t3", "join", "paper", "as", "t2", "on", "t3", ".", "venueid", "=", "t2", ".", "venueid", "join", "writes", "as", "t1", "on", "t1", ".", "paperid", "=", "t2", ".", "paperid", "where", "t3", ".", "venuename", "=", "value"], "question": "who publishes in NIPS ?", "question_toks": ["who", "publishes", "in", "NIPS", "?"], "guid": 4158}}
{"text": "publication: Publication_ID, Book_ID, Publisher, Publication_Date, Price; book: Book_ID, Title, Issues, Writer | What are the distinct publishers of publications with price higher than 5000000?", "sql": "SELECT DISTINCT Publisher FROM publication WHERE Price  >  5000000", "example": {"db_id": "book_2", "query": "SELECT DISTINCT Publisher FROM publication WHERE Price  >  5000000", "query_toks": ["SELECT", "DISTINCT", "Publisher", "FROM", "publication", "WHERE", "Price", ">", "5000000"], "query_toks_no_value": ["select", "distinct", "publisher", "from", "publication", "where", "price", ">", "value"], "question": "What are the distinct publishers of publications with price higher than 5000000?", "question_toks": ["What", "are", "the", "distinct", "publishers", "of", "publications", "with", "price", "higher", "than", "5000000", "?"], "guid": 4159}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | monte carlo simulation papers later than 2011", "sql": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"monte carlo simulation\" AND t3.year  >  2011;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"monte carlo simulation\" AND t3.year  >  2011;", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "WHERE", "t1.keyphrasename", "=", "``", "monte", "carlo", "simulation", "''", "AND", "t3.year", ">", "2011", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "where", "t1", ".", "keyphrasename", "=", "value", "and", "t3", ".", "year", ">", "value"], "question": "monte carlo simulation papers later than 2011", "question_toks": ["monte", "carlo", "simulation", "papers", "later", "than", "2011"], "guid": 4160}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | what are the collaborations of Peter Mertens and Dina Barbian ?", "sql": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "writes", "AS", "t3", "JOIN", "author", "AS", "t2", "ON", "t3.authorid", "=", "t2.authorid", "JOIN", "writes", "AS", "t4", "ON", "t4.paperid", "=", "t3.paperid", "JOIN", "author", "AS", "t1", "ON", "t4.authorid", "=", "t1.authorid", "WHERE", "t2.authorname", "=", "``", "Peter", "Mertens", "''", "AND", "t1.authorname", "=", "``", "Dina", "Barbian", "''", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "writes", "as", "t3", "join", "author", "as", "t2", "on", "t3", ".", "authorid", "=", "t2", ".", "authorid", "join", "writes", "as", "t4", "on", "t4", ".", "paperid", "=", "t3", ".", "paperid", "join", "author", "as", "t1", "on", "t4", ".", "authorid", "=", "t1", ".", "authorid", "where", "t2", ".", "authorname", "=", "value", "and", "t1", ".", "authorname", "=", "value"], "question": "what are the collaborations of Peter Mertens and Dina Barbian ?", "question_toks": ["what", "are", "the", "collaborations", "of", "Peter", "Mertens", "and", "Dina", "Barbian", "?"], "guid": 4161}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the number of researchers in \" University of Michigan \" .", "sql": "SELECT COUNT ( DISTINCT t1.name ) FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid WHERE t2.name  =  \"University of Michigan\";", "example": {"db_id": "academic", "query": "SELECT COUNT ( DISTINCT t1.name ) FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid WHERE t2.name  =  \"University of Michigan\";", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "t1.name", ")", "FROM", "organization", "AS", "t2", "JOIN", "author", "AS", "t1", "ON", "t2.oid", "=", "t1.oid", "WHERE", "t2.name", "=", "``", "University", "of", "Michigan", "''", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "t1", ".", "name", ")", "from", "organization", "as", "t2", "join", "author", "as", "t1", "on", "t2", ".", "oid", "=", "t1", ".", "oid", "where", "t2", ".", "name", "=", "value"], "question": "return me the number of researchers in \" University of Michigan \" .", "question_toks": ["return", "me", "the", "number", "of", "researchers", "in", "``", "University", "of", "Michigan", "``", "."], "guid": 4162}}
{"text": "Scientists: SSN, Name; Projects: Code, Name, Hours; AssignedTo: Scientist, Project | What are the names of scientists who are assigned to any project?", "sql": "SELECT T2.name FROM assignedto AS T1 JOIN scientists AS T2 ON T1.scientist  =  T2.ssn", "example": {"db_id": "scientist_1", "query": "SELECT T2.name FROM assignedto AS T1 JOIN scientists AS T2 ON T1.scientist  =  T2.ssn", "query_toks": ["SELECT", "T2.name", "FROM", "assignedto", "AS", "T1", "JOIN", "scientists", "AS", "T2", "ON", "T1.scientist", "=", "T2.ssn"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "assignedto", "as", "t1", "join", "scientists", "as", "t2", "on", "t1", ".", "scientist", "=", "t2", ".", "ssn"], "question": "What are the names of scientists who are assigned to any project?", "question_toks": ["What", "are", "the", "names", "of", "scientists", "who", "are", "assigned", "to", "any", "project", "?"], "guid": 4163}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | what are syntactic parsing papers not written by chris dyer", "sql": "SELECT DISTINCT t1.authorname  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname != \"chris dyer\" AND t5.keyphrasename  =  \"syntactic parsing\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t1.authorname  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname != \"chris dyer\" AND t5.keyphrasename  =  \"syntactic parsing\";", "query_toks": ["SELECT", "DISTINCT", "t1.authorname", ",", "t3.paperid", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t5", "ON", "t2.keyphraseid", "=", "t5.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "JOIN", "writes", "AS", "t4", "ON", "t4.paperid", "=", "t3.paperid", "JOIN", "author", "AS", "t1", "ON", "t4.authorid", "=", "t1.authorid", "WHERE", "t1.authorname", "!", "=", "``", "chris", "dyer", "''", "AND", "t5.keyphrasename", "=", "``", "syntactic", "parsing", "''", ";"], "query_toks_no_value": ["select", "distinct", "t1", ".", "authorname", ",", "t3", ".", "paperid", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t5", "on", "t2", ".", "keyphraseid", "=", "t5", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "join", "writes", "as", "t4", "on", "t4", ".", "paperid", "=", "t3", ".", "paperid", "join", "author", "as", "t1", "on", "t4", ".", "authorid", "=", "t1", ".", "authorid", "where", "t1", ".", "authorname", "!", "=", "value", "and", "t5", ".", "keyphrasename", "=", "value"], "question": "what are syntactic parsing papers not written by chris dyer", "question_toks": ["what", "are", "syntactic", "parsing", "papers", "not", "written", "by", "chris", "dyer"], "guid": 4164}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | what keyphrases get most citations ?", "sql": "SELECT DISTINCT COUNT ( t3.citingpaperid )  ,  t1.keyphrasename FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN cite AS t3 ON t2.paperid  =  t3.citedpaperid GROUP BY t1.keyphrasename ORDER BY COUNT ( t3.citingpaperid ) DESC;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( t3.citingpaperid )  ,  t1.keyphrasename FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN cite AS t3 ON t2.paperid  =  t3.citedpaperid GROUP BY t1.keyphrasename ORDER BY COUNT ( t3.citingpaperid ) DESC;", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "t3.citingpaperid", ")", ",", "t1.keyphrasename", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "cite", "AS", "t3", "ON", "t2.paperid", "=", "t3.citedpaperid", "GROUP", "BY", "t1.keyphrasename", "ORDER", "BY", "COUNT", "(", "t3.citingpaperid", ")", "DESC", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "t3", ".", "citingpaperid", ")", ",", "t1", ".", "keyphrasename", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "cite", "as", "t3", "on", "t2", ".", "paperid", "=", "t3", ".", "citedpaperid", "group", "by", "t1", ".", "keyphrasename", "order", "by", "count", "(", "t3", ".", "citingpaperid", ")", "desc"], "question": "what keyphrases get most citations ?", "question_toks": ["what", "keyphrases", "get", "most", "citations", "?"], "guid": 4165}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the year of \" Making database systems usable \"", "sql": "SELECT YEAR FROM publication WHERE title  =  \"Making database systems usable\";", "example": {"db_id": "academic", "query": "SELECT YEAR FROM publication WHERE title  =  \"Making database systems usable\";", "query_toks": ["SELECT", "YEAR", "FROM", "publication", "WHERE", "title", "=", "``", "Making", "database", "systems", "usable", "''", ";"], "query_toks_no_value": ["select", "year", "from", "publication", "where", "title", "=", "value"], "question": "return me the year of \" Making database systems usable \"", "question_toks": ["return", "me", "the", "year", "of", "``", "Making", "database", "systems", "usable", "``"], "guid": 4166}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | List papers that has keyword Question Answering", "sql": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "WHERE", "t1.keyphrasename", "=", "``", "Question", "Answering", "''", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "where", "t1", ".", "keyphrasename", "=", "value"], "question": "List papers that has keyword Question Answering", "question_toks": ["List", "papers", "that", "has", "keyword", "Question", "Answering"], "guid": 4167}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | papers about Question Answering", "sql": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "WHERE", "t1.keyphrasename", "=", "``", "Question", "Answering", "''", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "where", "t1", ".", "keyphrasename", "=", "value"], "question": "papers about Question Answering", "question_toks": ["papers", "about", "Question", "Answering"], "guid": 4168}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | papers by brian curless in convolution topic", "sql": "SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";", "query_toks": ["SELECT", "DISTINCT", "t1.authorid", ",", "t3.paperid", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t5", "ON", "t2.keyphraseid", "=", "t5.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "JOIN", "writes", "AS", "t4", "ON", "t4.paperid", "=", "t3.paperid", "JOIN", "author", "AS", "t1", "ON", "t4.authorid", "=", "t1.authorid", "WHERE", "t1.authorname", "=", "``", "brian", "curless", "''", "AND", "t5.keyphrasename", "=", "``", "convolution", "''", ";"], "query_toks_no_value": ["select", "distinct", "t1", ".", "authorid", ",", "t3", ".", "paperid", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t5", "on", "t2", ".", "keyphraseid", "=", "t5", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "join", "writes", "as", "t4", "on", "t4", ".", "paperid", "=", "t3", ".", "paperid", "join", "author", "as", "t1", "on", "t4", ".", "authorid", "=", "t1", ".", "authorid", "where", "t1", ".", "authorname", "=", "value", "and", "t5", ".", "keyphrasename", "=", "value"], "question": "papers by brian curless in convolution topic", "question_toks": ["papers", "by", "brian", "curless", "in", "convolution", "topic"], "guid": 4169}}
{"text": "Inst: instID, name, country; Authors: authID, lname, fname; Papers: paperID, title; Authorship: authID, instID, paperID, authOrder | Count the number of authors.", "sql": "SELECT count(*) FROM authors", "example": {"db_id": "icfp_1", "query": "SELECT count(*) FROM authors", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "authors"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "authors"], "question": "Count the number of authors.", "question_toks": ["Count", "the", "number", "of", "authors", "."], "guid": 4170}}
{"text": "Scientists: SSN, Name; Projects: Code, Name, Hours; AssignedTo: Scientist, Project | List all the scientists' names, their projects' names, and the hours worked by that scientist on each project, in alphabetical order of project name, and then scientist name.", "sql": "SELECT T1.Name ,  T3.Name ,  T3.Hours FROM Scientists AS T1 JOIN AssignedTo AS T2 ON T1.SSN = T2.Scientist JOIN Projects AS T3 ON T2.Project = T3.Code ORDER BY T3.Name ,  T1.Name", "example": {"db_id": "scientist_1", "query": "SELECT T1.Name ,  T3.Name ,  T3.Hours FROM Scientists AS T1 JOIN AssignedTo AS T2 ON T1.SSN = T2.Scientist JOIN Projects AS T3 ON T2.Project = T3.Code ORDER BY T3.Name ,  T1.Name", "query_toks": ["SELECT", "T1.Name", ",", "T3.Name", ",", "T3.Hours", "FROM", "Scientists", "AS", "T1", "JOIN", "AssignedTo", "AS", "T2", "ON", "T1.SSN", "=", "T2.Scientist", "JOIN", "Projects", "AS", "T3", "ON", "T2.Project", "=", "T3.Code", "ORDER", "BY", "T3.Name", ",", "T1.Name"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "t3", ".", "name", ",", "t3", ".", "hours", "from", "scientists", "as", "t1", "join", "assignedto", "as", "t2", "on", "t1", ".", "ssn", "=", "t2", ".", "scientist", "join", "projects", "as", "t3", "on", "t2", ".", "project", "=", "t3", ".", "code", "order", "by", "t3", ".", "name", ",", "t1", ".", "name"], "question": "List all the scientists' names, their projects' names, and the hours worked by that scientist on each project, in alphabetical order of project name, and then scientist name.", "question_toks": ["List", "all", "the", "scientists", "'", "names", ",", "their", "projects", "'", "names", ",", "and", "the", "hours", "worked", "by", "that", "scientist", "on", "each", "project", ",", "in", "alphabetical", "order", "of", "project", "name", ",", "and", "then", "scientist", "name", "."], "guid": 4171}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | pldi 2015 list of papers", "sql": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"pldi\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"pldi\";", "query_toks": ["SELECT", "DISTINCT", "t1.paperid", "FROM", "venue", "AS", "t2", "JOIN", "paper", "AS", "t1", "ON", "t2.venueid", "=", "t1.venueid", "WHERE", "t1.year", "=", "2015", "AND", "t2.venuename", "=", "``", "pldi", "''", ";"], "query_toks_no_value": ["select", "distinct", "t1", ".", "paperid", "from", "venue", "as", "t2", "join", "paper", "as", "t1", "on", "t2", ".", "venueid", "=", "t1", ".", "venueid", "where", "t1", ".", "year", "=", "value", "and", "t2", ".", "venuename", "=", "value"], "question": "pldi 2015 list of papers", "question_toks": ["pldi", "2015", "list", "of", "papers"], "guid": 4172}}
{"text": "publication: Publication_ID, Book_ID, Publisher, Publication_Date, Price; book: Book_ID, Title, Issues, Writer | Show the titles of books in descending order of publication price.", "sql": "SELECT T1.Title FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID ORDER BY T2.Price DESC", "example": {"db_id": "book_2", "query": "SELECT T1.Title FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID ORDER BY T2.Price DESC", "query_toks": ["SELECT", "T1.Title", "FROM", "book", "AS", "T1", "JOIN", "publication", "AS", "T2", "ON", "T1.Book_ID", "=", "T2.Book_ID", "ORDER", "BY", "T2.Price", "DESC"], "query_toks_no_value": ["select", "t1", ".", "title", "from", "book", "as", "t1", "join", "publication", "as", "t2", "on", "t1", ".", "book_id", "=", "t2", ".", "book_id", "order", "by", "t2", ".", "price", "desc"], "question": "Show the titles of books in descending order of publication price.", "question_toks": ["Show", "the", "titles", "of", "books", "in", "descending", "order", "of", "publication", "price", "."], "guid": 4173}}
{"text": "Document_Types: document_type_code, document_description; Documents: document_id, document_type_code, grant_id, sent_date, response_received_date, other_details; Grants: grant_id, organisation_id, grant_amount, grant_start_date, grant_end_date, other_details; Organisation_Types: organisation_type, organisation_type_description; Organisations: organisation_id, organisation_type, organisation_details; Project_Outcomes: project_id, outcome_code, outcome_details; Project_Staff: staff_id, project_id, role_code, date_from, date_to, other_details; Projects: project_id, organisation_id, project_details; Research_Outcomes: outcome_code, outcome_description; Research_Staff: staff_id, employer_organisation_id, staff_details | List the project details of the projects launched by the organisation", "sql": "SELECT project_details FROM Projects WHERE organisation_id IN ( SELECT organisation_id FROM Projects GROUP BY organisation_id ORDER BY count(*) DESC LIMIT 1 )", "example": {"db_id": "tracking_grants_for_research", "query": "SELECT project_details FROM Projects WHERE organisation_id IN ( SELECT organisation_id FROM Projects GROUP BY organisation_id ORDER BY count(*) DESC LIMIT 1 )", "query_toks": ["SELECT", "project_details", "FROM", "Projects", "WHERE", "organisation_id", "IN", "(", "SELECT", "organisation_id", "FROM", "Projects", "GROUP", "BY", "organisation_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1", ")"], "query_toks_no_value": ["select", "project_details", "from", "projects", "where", "organisation_id", "in", "(", "select", "organisation_id", "from", "projects", "group", "by", "organisation_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value", ")"], "question": "List the project details of the projects launched by the organisation", "question_toks": ["List", "the", "project", "details", "of", "the", "projects", "launched", "by", "the", "organisation"], "guid": 4174}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the number of the organizations in \" North America \" .", "sql": "SELECT COUNT ( DISTINCT name ) FROM organization WHERE continent  =  \"North America\";", "example": {"db_id": "academic", "query": "SELECT COUNT ( DISTINCT name ) FROM organization WHERE continent  =  \"North America\";", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "name", ")", "FROM", "organization", "WHERE", "continent", "=", "``", "North", "America", "''", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "name", ")", "from", "organization", "where", "continent", "=", "value"], "question": "return me the number of the organizations in \" North America \" .", "question_toks": ["return", "me", "the", "number", "of", "the", "organizations", "in", "``", "North", "America", "``", "."], "guid": 4175}}
{"text": "Document_Types: document_type_code, document_description; Documents: document_id, document_type_code, grant_id, sent_date, response_received_date, other_details; Grants: grant_id, organisation_id, grant_amount, grant_start_date, grant_end_date, other_details; Organisation_Types: organisation_type, organisation_type_description; Organisations: organisation_id, organisation_type, organisation_details; Project_Outcomes: project_id, outcome_code, outcome_details; Project_Staff: staff_id, project_id, role_code, date_from, date_to, other_details; Projects: project_id, organisation_id, project_details; Research_Outcomes: outcome_code, outcome_description; Research_Staff: staff_id, employer_organisation_id, staff_details | List the research staff details, and order in ascending order.", "sql": "SELECT staff_details FROM Research_Staff ORDER BY staff_details ASC", "example": {"db_id": "tracking_grants_for_research", "query": "SELECT staff_details FROM Research_Staff ORDER BY staff_details ASC", "query_toks": ["SELECT", "staff_details", "FROM", "Research_Staff", "ORDER", "BY", "staff_details", "ASC"], "query_toks_no_value": ["select", "staff_details", "from", "research_staff", "order", "by", "staff_details", "asc"], "question": "List the research staff details, and order in ascending order.", "question_toks": ["List", "the", "research", "staff", "details", ",", "and", "order", "in", "ascending", "order", "."], "guid": 4176}}
{"text": "book_club: book_club_id, Year, Author_or_Editor, Book_Title, Publisher, Category, Result; movie: movie_id, Title, Year, Director, Budget_million, Gross_worldwide; culture_company: Company_name, Type, Incorporated_in, Group_Equity_Shareholding, book_club_id, movie_id | Show all company names with a movie directed in year 1999.", "sql": "SELECT T2.company_name FROM movie AS T1 JOIN culture_company AS T2 ON T1.movie_id  =  T2.movie_id WHERE T1.year  =  1999", "example": {"db_id": "culture_company", "query": "SELECT T2.company_name FROM movie AS T1 JOIN culture_company AS T2 ON T1.movie_id  =  T2.movie_id WHERE T1.year  =  1999", "query_toks": ["SELECT", "T2.company_name", "FROM", "movie", "AS", "T1", "JOIN", "culture_company", "AS", "T2", "ON", "T1.movie_id", "=", "T2.movie_id", "WHERE", "T1.year", "=", "1999"], "query_toks_no_value": ["select", "t2", ".", "company_name", "from", "movie", "as", "t1", "join", "culture_company", "as", "t2", "on", "t1", ".", "movie_id", "=", "t2", ".", "movie_id", "where", "t1", ".", "year", "=", "value"], "question": "Show all company names with a movie directed in year 1999.", "question_toks": ["Show", "all", "company", "names", "with", "a", "movie", "directed", "in", "year", "1999", "."], "guid": 4177}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me all the keywords in Databases area .", "sql": "SELECT t1.keyword FROM DOMAIN AS t3 JOIN domain_keyword AS t2 ON t3.did  =  t2.did JOIN keyword AS t1 ON t1.kid  =  t2.kid WHERE t3.name  =  \"Databases\";", "example": {"db_id": "academic", "query": "SELECT t1.keyword FROM DOMAIN AS t3 JOIN domain_keyword AS t2 ON t3.did  =  t2.did JOIN keyword AS t1 ON t1.kid  =  t2.kid WHERE t3.name  =  \"Databases\";", "query_toks": ["SELECT", "t1.keyword", "FROM", "DOMAIN", "AS", "t3", "JOIN", "domain_keyword", "AS", "t2", "ON", "t3.did", "=", "t2.did", "JOIN", "keyword", "AS", "t1", "ON", "t1.kid", "=", "t2.kid", "WHERE", "t3.name", "=", "``", "Databases", "''", ";"], "query_toks_no_value": ["select", "t1", ".", "keyword", "from", "domain", "as", "t3", "join", "domain_keyword", "as", "t2", "on", "t3", ".", "did", "=", "t2", ".", "did", "join", "keyword", "as", "t1", "on", "t1", ".", "kid", "=", "t2", ".", "kid", "where", "t3", ".", "name", "=", "value"], "question": "return me all the keywords in Databases area .", "question_toks": ["return", "me", "all", "the", "keywords", "in", "Databases", "area", "."], "guid": 4178}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | How many papers has Christopher D. Manning ?", "sql": "SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christopher D. Manning\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christopher D. Manning\";", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "DISTINCT", "t2.paperid", ")", "FROM", "writes", "AS", "t2", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "WHERE", "t1.authorname", "=", "``", "Christopher", "D.", "Manning", "''", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "distinct", "t2", ".", "paperid", ")", "from", "writes", "as", "t2", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "where", "t1", ".", "authorname", "=", "value"], "question": "How many papers has Christopher D. Manning ?", "question_toks": ["How", "many", "papers", "has", "Christopher", "D.", "Manning", "?"], "guid": 4179}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | papers on Parsing appeared at acl in 2012", "sql": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Parsing\" AND t3.year  =  2012 AND t4.venuename  =  \"acl\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Parsing\" AND t3.year  =  2012 AND t4.venuename  =  \"acl\";", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "JOIN", "venue", "AS", "t4", "ON", "t4.venueid", "=", "t3.venueid", "WHERE", "t1.keyphrasename", "=", "``", "Parsing", "''", "AND", "t3.year", "=", "2012", "AND", "t4.venuename", "=", "``", "acl", "''", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "join", "venue", "as", "t4", "on", "t4", ".", "venueid", "=", "t3", ".", "venueid", "where", "t1", ".", "keyphrasename", "=", "value", "and", "t3", ".", "year", "=", "value", "and", "t4", ".", "venuename", "=", "value"], "question": "papers on Parsing appeared at acl in 2012", "question_toks": ["papers", "on", "Parsing", "appeared", "at", "acl", "in", "2012"], "guid": 4180}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | What venues are for Neuroscience ?", "sql": "SELECT DISTINCT venueid FROM venue WHERE venuename  =  \"Neuroscience\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT venueid FROM venue WHERE venuename  =  \"Neuroscience\";", "query_toks": ["SELECT", "DISTINCT", "venueid", "FROM", "venue", "WHERE", "venuename", "=", "``", "Neuroscience", "''", ";"], "query_toks_no_value": ["select", "distinct", "venueid", "from", "venue", "where", "venuename", "=", "value"], "question": "What venues are for Neuroscience ?", "question_toks": ["What", "venues", "are", "for", "Neuroscience", "?"], "guid": 4181}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | who has written the most syntactic parsing papers ?", "sql": "SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  \"syntactic parsing\" GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  \"syntactic parsing\" GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "t4.paperid", ")", ",", "t3.authorid", "FROM", "paperkeyphrase", "AS", "t1", "JOIN", "keyphrase", "AS", "t2", "ON", "t1.keyphraseid", "=", "t2.keyphraseid", "JOIN", "paper", "AS", "t4", "ON", "t4.paperid", "=", "t1.paperid", "JOIN", "writes", "AS", "t3", "ON", "t3.paperid", "=", "t4.paperid", "WHERE", "t2.keyphrasename", "=", "``", "syntactic", "parsing", "''", "GROUP", "BY", "t3.authorid", "ORDER", "BY", "COUNT", "(", "t4.paperid", ")", "DESC", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "t4", ".", "paperid", ")", ",", "t3", ".", "authorid", "from", "paperkeyphrase", "as", "t1", "join", "keyphrase", "as", "t2", "on", "t1", ".", "keyphraseid", "=", "t2", ".", "keyphraseid", "join", "paper", "as", "t4", "on", "t4", ".", "paperid", "=", "t1", ".", "paperid", "join", "writes", "as", "t3", "on", "t3", ".", "paperid", "=", "t4", ".", "paperid", "where", "t2", ".", "keyphrasename", "=", "value", "group", "by", "t3", ".", "authorid", "order", "by", "count", "(", "t4", ".", "paperid", ")", "desc"], "question": "who has written the most syntactic parsing papers ?", "question_toks": ["who", "has", "written", "the", "most", "syntactic", "parsing", "papers", "?"], "guid": 4182}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me all the researchers in Databases area in \" University of Michigan \" .", "sql": "SELECT t1.name FROM domain_author AS t4 JOIN author AS t1 ON t4.aid  =  t1.aid JOIN DOMAIN AS t3 ON t3.did  =  t4.did JOIN organization AS t2 ON t2.oid  =  t1.oid WHERE t3.name  =  \"Databases\" AND t2.name  =  \"University of Michigan\";", "example": {"db_id": "academic", "query": "SELECT t1.name FROM domain_author AS t4 JOIN author AS t1 ON t4.aid  =  t1.aid JOIN DOMAIN AS t3 ON t3.did  =  t4.did JOIN organization AS t2 ON t2.oid  =  t1.oid WHERE t3.name  =  \"Databases\" AND t2.name  =  \"University of Michigan\";", "query_toks": ["SELECT", "t1.name", "FROM", "domain_author", "AS", "t4", "JOIN", "author", "AS", "t1", "ON", "t4.aid", "=", "t1.aid", "JOIN", "DOMAIN", "AS", "t3", "ON", "t3.did", "=", "t4.did", "JOIN", "organization", "AS", "t2", "ON", "t2.oid", "=", "t1.oid", "WHERE", "t3.name", "=", "``", "Databases", "''", "AND", "t2.name", "=", "``", "University", "of", "Michigan", "''", ";"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "domain_author", "as", "t4", "join", "author", "as", "t1", "on", "t4", ".", "aid", "=", "t1", ".", "aid", "join", "domain", "as", "t3", "on", "t3", ".", "did", "=", "t4", ".", "did", "join", "organization", "as", "t2", "on", "t2", ".", "oid", "=", "t1", ".", "oid", "where", "t3", ".", "name", "=", "value", "and", "t2", ".", "name", "=", "value"], "question": "return me all the researchers in Databases area in \" University of Michigan \" .", "question_toks": ["return", "me", "all", "the", "researchers", "in", "Databases", "area", "in", "``", "University", "of", "Michigan", "``", "."], "guid": 4183}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | who has written the most papers on semantic parsing since 2005 ?", "sql": "SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  \"semantic parsing\" AND t4.year  >  2005 GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  \"semantic parsing\" AND t4.year  >  2005 GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "t4.paperid", ")", ",", "t3.authorid", "FROM", "paperkeyphrase", "AS", "t1", "JOIN", "keyphrase", "AS", "t2", "ON", "t1.keyphraseid", "=", "t2.keyphraseid", "JOIN", "paper", "AS", "t4", "ON", "t4.paperid", "=", "t1.paperid", "JOIN", "writes", "AS", "t3", "ON", "t3.paperid", "=", "t4.paperid", "WHERE", "t2.keyphrasename", "=", "``", "semantic", "parsing", "''", "AND", "t4.year", ">", "2005", "GROUP", "BY", "t3.authorid", "ORDER", "BY", "COUNT", "(", "t4.paperid", ")", "DESC", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "t4", ".", "paperid", ")", ",", "t3", ".", "authorid", "from", "paperkeyphrase", "as", "t1", "join", "keyphrase", "as", "t2", "on", "t1", ".", "keyphraseid", "=", "t2", ".", "keyphraseid", "join", "paper", "as", "t4", "on", "t4", ".", "paperid", "=", "t1", ".", "paperid", "join", "writes", "as", "t3", "on", "t3", ".", "paperid", "=", "t4", ".", "paperid", "where", "t2", ".", "keyphrasename", "=", "value", "and", "t4", ".", "year", ">", "value", "group", "by", "t3", ".", "authorid", "order", "by", "count", "(", "t4", ".", "paperid", ")", "desc"], "question": "who has written the most papers on semantic parsing since 2005 ?", "question_toks": ["who", "has", "written", "the", "most", "papers", "on", "semantic", "parsing", "since", "2005", "?"], "guid": 4184}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | Give me the papers written by Su-In Lee before 2012 .", "sql": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Su-In Lee\" AND t3.year  <  2012;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Su-In Lee\" AND t3.year  <  2012;", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "writes", "AS", "t2", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "JOIN", "paper", "AS", "t3", "ON", "t2.paperid", "=", "t3.paperid", "WHERE", "t1.authorname", "=", "``", "Su-In", "Lee", "''", "AND", "t3.year", "<", "2012", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "writes", "as", "t2", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "join", "paper", "as", "t3", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "where", "t1", ".", "authorname", "=", "value", "and", "t3", ".", "year", "<", "value"], "question": "Give me the papers written by Su-In Lee before 2012 .", "question_toks": ["Give", "me", "the", "papers", "written", "by", "Su-In", "Lee", "before", "2012", "."], "guid": 4185}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | how many papers has Christopher D. Manning written ?", "sql": "SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christopher D. Manning\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christopher D. Manning\";", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "DISTINCT", "t2.paperid", ")", "FROM", "writes", "AS", "t2", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "WHERE", "t1.authorname", "=", "``", "Christopher", "D.", "Manning", "''", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "distinct", "t2", ".", "paperid", ")", "from", "writes", "as", "t2", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "where", "t1", ".", "authorname", "=", "value"], "question": "how many papers has Christopher D. Manning written ?", "question_toks": ["how", "many", "papers", "has", "Christopher", "D.", "Manning", "written", "?"], "guid": 4186}}
{"text": "book_club: book_club_id, Year, Author_or_Editor, Book_Title, Publisher, Category, Result; movie: movie_id, Title, Year, Director, Budget_million, Gross_worldwide; culture_company: Company_name, Type, Incorporated_in, Group_Equity_Shareholding, book_club_id, movie_id | How many books are there for each publisher?", "sql": "SELECT publisher ,  count(*) FROM book_club GROUP BY publisher", "example": {"db_id": "culture_company", "query": "SELECT publisher ,  count(*) FROM book_club GROUP BY publisher", "query_toks": ["SELECT", "publisher", ",", "count", "(", "*", ")", "FROM", "book_club", "GROUP", "BY", "publisher"], "query_toks_no_value": ["select", "publisher", ",", "count", "(", "*", ")", "from", "book_club", "group", "by", "publisher"], "question": "How many books are there for each publisher?", "question_toks": ["How", "many", "books", "are", "there", "for", "each", "publisher", "?"], "guid": 4187}}
{"text": "Inst: instID, name, country; Authors: authID, lname, fname; Papers: paperID, title; Authorship: authID, instID, paperID, authOrder | Which papers were written by authors from the institution \"Google\"?", "sql": "SELECT DISTINCT t1.title FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Google\"", "example": {"db_id": "icfp_1", "query": "SELECT DISTINCT t1.title FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Google\"", "query_toks": ["SELECT", "DISTINCT", "t1.title", "FROM", "papers", "AS", "t1", "JOIN", "authorship", "AS", "t2", "ON", "t1.paperid", "=", "t2.paperid", "JOIN", "inst", "AS", "t3", "ON", "t2.instid", "=", "t3.instid", "WHERE", "t3.name", "=", "``", "Google", "''"], "query_toks_no_value": ["select", "distinct", "t1", ".", "title", "from", "papers", "as", "t1", "join", "authorship", "as", "t2", "on", "t1", ".", "paperid", "=", "t2", ".", "paperid", "join", "inst", "as", "t3", "on", "t2", ".", "instid", "=", "t3", ".", "instid", "where", "t3", ".", "name", "=", "value"], "question": "Which papers were written by authors from the institution \"Google\"?", "question_toks": ["Which", "papers", "were", "written", "by", "authors", "from", "the", "institution", "``", "Google", "''", "?"], "guid": 4188}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | keyphrases used by Luke S Zettlemoyer for each year", "sql": "SELECT DISTINCT t2.keyphraseid  ,  t3.year FROM paper AS t3 JOIN paperkeyphrase AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"Luke S Zettlemoyer\" ORDER BY t3.year  ,  t2.keyphraseid;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t2.keyphraseid  ,  t3.year FROM paper AS t3 JOIN paperkeyphrase AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"Luke S Zettlemoyer\" ORDER BY t3.year  ,  t2.keyphraseid;", "query_toks": ["SELECT", "DISTINCT", "t2.keyphraseid", ",", "t3.year", "FROM", "paper", "AS", "t3", "JOIN", "paperkeyphrase", "AS", "t2", "ON", "t3.paperid", "=", "t2.paperid", "JOIN", "writes", "AS", "t4", "ON", "t4.paperid", "=", "t3.paperid", "JOIN", "author", "AS", "t1", "ON", "t4.authorid", "=", "t1.authorid", "WHERE", "t1.authorname", "=", "``", "Luke", "S", "Zettlemoyer", "''", "ORDER", "BY", "t3.year", ",", "t2.keyphraseid", ";"], "query_toks_no_value": ["select", "distinct", "t2", ".", "keyphraseid", ",", "t3", ".", "year", "from", "paper", "as", "t3", "join", "paperkeyphrase", "as", "t2", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "join", "writes", "as", "t4", "on", "t4", ".", "paperid", "=", "t3", ".", "paperid", "join", "author", "as", "t1", "on", "t4", ".", "authorid", "=", "t1", ".", "authorid", "where", "t1", ".", "authorname", "=", "value", "order", "by", "t3", ".", "year", ",", "t2", ".", "keyphraseid"], "question": "keyphrases used by Luke S Zettlemoyer for each year", "question_toks": ["keyphrases", "used", "by", "Luke", "S", "Zettlemoyer", "for", "each", "year"], "guid": 4189}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | ACL papers by author", "sql": "SELECT DISTINCT t2.paperid  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  \"ACL\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t2.paperid  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  \"ACL\";", "query_toks": ["SELECT", "DISTINCT", "t2.paperid", ",", "t1.authorid", "FROM", "venue", "AS", "t3", "JOIN", "paper", "AS", "t2", "ON", "t3.venueid", "=", "t2.venueid", "JOIN", "writes", "AS", "t1", "ON", "t1.paperid", "=", "t2.paperid", "WHERE", "t3.venuename", "=", "``", "ACL", "''", ";"], "query_toks_no_value": ["select", "distinct", "t2", ".", "paperid", ",", "t1", ".", "authorid", "from", "venue", "as", "t3", "join", "paper", "as", "t2", "on", "t3", ".", "venueid", "=", "t2", ".", "venueid", "join", "writes", "as", "t1", "on", "t1", ".", "paperid", "=", "t2", ".", "paperid", "where", "t3", ".", "venuename", "=", "value"], "question": "ACL papers by author", "question_toks": ["ACL", "papers", "by", "author"], "guid": 4190}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | Does Richard Ladner publish in chi ?", "sql": "SELECT DISTINCT t3.paperid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Richard Ladner\" AND t4.venuename  =  \"chi\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Richard Ladner\" AND t4.venuename  =  \"chi\";", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "venue", "AS", "t4", "JOIN", "paper", "AS", "t3", "ON", "t4.venueid", "=", "t3.venueid", "JOIN", "writes", "AS", "t2", "ON", "t2.paperid", "=", "t3.paperid", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "WHERE", "t1.authorname", "=", "``", "Richard", "Ladner", "''", "AND", "t4.venuename", "=", "``", "chi", "''", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "venue", "as", "t4", "join", "paper", "as", "t3", "on", "t4", ".", "venueid", "=", "t3", ".", "venueid", "join", "writes", "as", "t2", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "where", "t1", ".", "authorname", "=", "value", "and", "t4", ".", "venuename", "=", "value"], "question": "Does Richard Ladner publish in chi ?", "question_toks": ["Does", "Richard", "Ladner", "publish", "in", "chi", "?"], "guid": 4191}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | List the journals related to Temporal Data", "sql": "SELECT DISTINCT t3.journalid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Temporal Data\" GROUP BY t3.journalid;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.journalid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Temporal Data\" GROUP BY t3.journalid;", "query_toks": ["SELECT", "DISTINCT", "t3.journalid", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "WHERE", "t1.keyphrasename", "=", "``", "Temporal", "Data", "''", "GROUP", "BY", "t3.journalid", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "journalid", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "where", "t1", ".", "keyphrasename", "=", "value", "group", "by", "t3", ".", "journalid"], "question": "List the journals related to Temporal Data", "question_toks": ["List", "the", "journals", "related", "to", "Temporal", "Data"], "guid": 4192}}
{"text": "book_club: book_club_id, Year, Author_or_Editor, Book_Title, Publisher, Category, Result; movie: movie_id, Title, Year, Director, Budget_million, Gross_worldwide; culture_company: Company_name, Type, Incorporated_in, Group_Equity_Shareholding, book_club_id, movie_id | Return the average, maximum, and minimum budgets in millions for movies made before the year 2000.", "sql": "SELECT avg(budget_million) ,  max(budget_million) ,  min(budget_million) FROM movie WHERE YEAR  <  2000", "example": {"db_id": "culture_company", "query": "SELECT avg(budget_million) ,  max(budget_million) ,  min(budget_million) FROM movie WHERE YEAR  <  2000", "query_toks": ["SELECT", "avg", "(", "budget_million", ")", ",", "max", "(", "budget_million", ")", ",", "min", "(", "budget_million", ")", "FROM", "movie", "WHERE", "YEAR", "<", "2000"], "query_toks_no_value": ["select", "avg", "(", "budget_million", ")", ",", "max", "(", "budget_million", ")", ",", "min", "(", "budget_million", ")", "from", "movie", "where", "year", "<", "value"], "question": "Return the average, maximum, and minimum budgets in millions for movies made before the year 2000.", "question_toks": ["Return", "the", "average", ",", "maximum", ",", "and", "minimum", "budgets", "in", "millions", "for", "movies", "made", "before", "the", "year", "2000", "."], "guid": 4193}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | Papers authored by Liwen Xiong in 2015", "sql": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Liwen Xiong\" AND t3.year  =  2015;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Liwen Xiong\" AND t3.year  =  2015;", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "writes", "AS", "t2", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "JOIN", "paper", "AS", "t3", "ON", "t2.paperid", "=", "t3.paperid", "WHERE", "t1.authorname", "=", "``", "Liwen", "Xiong", "''", "AND", "t3.year", "=", "2015", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "writes", "as", "t2", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "join", "paper", "as", "t3", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "where", "t1", ".", "authorname", "=", "value", "and", "t3", ".", "year", "=", "value"], "question": "Papers authored by Liwen Xiong in 2015", "question_toks": ["Papers", "authored", "by", "Liwen", "Xiong", "in", "2015"], "guid": 4194}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | Papers that use the WebKB dataset", "sql": "SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname  =  \"WebKB\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname  =  \"WebKB\";", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "paperdataset", "AS", "t2", "JOIN", "dataset", "AS", "t1", "ON", "t2.datasetid", "=", "t1.datasetid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "WHERE", "t1.datasetname", "=", "``", "WebKB", "''", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "paperdataset", "as", "t2", "join", "dataset", "as", "t1", "on", "t2", ".", "datasetid", "=", "t1", ".", "datasetid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "where", "t1", ".", "datasetname", "=", "value"], "question": "Papers that use the WebKB dataset", "question_toks": ["Papers", "that", "use", "the", "WebKB", "dataset"], "guid": 4195}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | List top papers for parsing", "sql": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"parsing\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"parsing\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;", "query_toks": ["SELECT", "DISTINCT", "t4.citedpaperid", ",", "COUNT", "(", "t4.citedpaperid", ")", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "JOIN", "cite", "AS", "t4", "ON", "t3.paperid", "=", "t4.citedpaperid", "WHERE", "t1.keyphrasename", "=", "``", "parsing", "''", "GROUP", "BY", "t4.citedpaperid", "ORDER", "BY", "COUNT", "(", "t4.citedpaperid", ")", "DESC", ";"], "query_toks_no_value": ["select", "distinct", "t4", ".", "citedpaperid", ",", "count", "(", "t4", ".", "citedpaperid", ")", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "join", "cite", "as", "t4", "on", "t3", ".", "paperid", "=", "t4", ".", "citedpaperid", "where", "t1", ".", "keyphrasename", "=", "value", "group", "by", "t4", ".", "citedpaperid", "order", "by", "count", "(", "t4", ".", "citedpaperid", ")", "desc"], "question": "List top papers for parsing", "question_toks": ["List", "top", "papers", "for", "parsing"], "guid": 4196}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the keywords, which have been contained by more than 100 papers in PVLDB .", "sql": "SELECT t1.keyword FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t2 ON t2.pid  =  t4.pid JOIN journal AS t3 ON t2.jid  =  t3.jid WHERE t3.name  =  \"PVLDB\" GROUP BY t1.keyword HAVING COUNT ( DISTINCT t2.title )  >  100;", "example": {"db_id": "academic", "query": "SELECT t1.keyword FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t2 ON t2.pid  =  t4.pid JOIN journal AS t3 ON t2.jid  =  t3.jid WHERE t3.name  =  \"PVLDB\" GROUP BY t1.keyword HAVING COUNT ( DISTINCT t2.title )  >  100;", "query_toks": ["SELECT", "t1.keyword", "FROM", "publication_keyword", "AS", "t4", "JOIN", "keyword", "AS", "t1", "ON", "t4.kid", "=", "t1.kid", "JOIN", "publication", "AS", "t2", "ON", "t2.pid", "=", "t4.pid", "JOIN", "journal", "AS", "t3", "ON", "t2.jid", "=", "t3.jid", "WHERE", "t3.name", "=", "``", "PVLDB", "''", "GROUP", "BY", "t1.keyword", "HAVING", "COUNT", "(", "DISTINCT", "t2.title", ")", ">", "100", ";"], "query_toks_no_value": ["select", "t1", ".", "keyword", "from", "publication_keyword", "as", "t4", "join", "keyword", "as", "t1", "on", "t4", ".", "kid", "=", "t1", ".", "kid", "join", "publication", "as", "t2", "on", "t2", ".", "pid", "=", "t4", ".", "pid", "join", "journal", "as", "t3", "on", "t2", ".", "jid", "=", "t3", ".", "jid", "where", "t3", ".", "name", "=", "value", "group", "by", "t1", ".", "keyword", "having", "count", "(", "distinct", "t2", ".", "title", ")", ">", "value"], "question": "return me the keywords, which have been contained by more than 100 papers in PVLDB .", "question_toks": ["return", "me", "the", "keywords", ",", "which", "have", "been", "contained", "by", "more", "than", "100", "papers", "in", "PVLDB", "."], "guid": 4197}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | What papers did Liwen Xiong publish last year ?", "sql": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Liwen Xiong\" AND t3.year  =  2015;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Liwen Xiong\" AND t3.year  =  2015;", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "writes", "AS", "t2", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "JOIN", "paper", "AS", "t3", "ON", "t2.paperid", "=", "t3.paperid", "WHERE", "t1.authorname", "=", "``", "Liwen", "Xiong", "''", "AND", "t3.year", "=", "2015", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "writes", "as", "t2", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "join", "paper", "as", "t3", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "where", "t1", ".", "authorname", "=", "value", "and", "t3", ".", "year", "=", "value"], "question": "What papers did Liwen Xiong publish last year ?", "question_toks": ["What", "papers", "did", "Liwen", "Xiong", "publish", "last", "year", "?"], "guid": 4198}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | How many papers were published in nature communications 2015 conference ?", "sql": "SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"nature communications\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"nature communications\";", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "t1.paperid", ")", "FROM", "venue", "AS", "t2", "JOIN", "paper", "AS", "t1", "ON", "t2.venueid", "=", "t1.venueid", "WHERE", "t1.year", "=", "2015", "AND", "t2.venuename", "=", "``", "nature", "communications", "''", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "t1", ".", "paperid", ")", "from", "venue", "as", "t2", "join", "paper", "as", "t1", "on", "t2", ".", "venueid", "=", "t1", ".", "venueid", "where", "t1", ".", "year", "=", "value", "and", "t2", ".", "venuename", "=", "value"], "question": "How many papers were published in nature communications 2015 conference ?", "question_toks": ["How", "many", "papers", "were", "published", "in", "nature", "communications", "2015", "conference", "?"], "guid": 4199}}
{"text": "journal: Journal_ID, Date, Theme, Sales; editor: Editor_ID, Name, Age; journal_committee: Editor_ID, Journal_ID, Work_Type | Show the names of editors that are on the committee of journals with sales bigger than 3000.", "sql": "SELECT T2.Name FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID  =  T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID  =  T3.Journal_ID WHERE T3.Sales  >  3000", "example": {"db_id": "journal_committee", "query": "SELECT T2.Name FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID  =  T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID  =  T3.Journal_ID WHERE T3.Sales  >  3000", "query_toks": ["SELECT", "T2.Name", "FROM", "journal_committee", "AS", "T1", "JOIN", "editor", "AS", "T2", "ON", "T1.Editor_ID", "=", "T2.Editor_ID", "JOIN", "journal", "AS", "T3", "ON", "T1.Journal_ID", "=", "T3.Journal_ID", "WHERE", "T3.Sales", ">", "3000"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "journal_committee", "as", "t1", "join", "editor", "as", "t2", "on", "t1", ".", "editor_id", "=", "t2", ".", "editor_id", "join", "journal", "as", "t3", "on", "t1", ".", "journal_id", "=", "t3", ".", "journal_id", "where", "t3", ".", "sales", ">", "value"], "question": "Show the names of editors that are on the committee of journals with sales bigger than 3000.", "question_toks": ["Show", "the", "names", "of", "editors", "that", "are", "on", "the", "committee", "of", "journals", "with", "sales", "bigger", "than", "3000", "."], "guid": 4200}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the paper after 2000 with the most citations .", "sql": "SELECT title FROM publication WHERE YEAR  >  2000 ORDER BY citation_num DESC LIMIT 1;", "example": {"db_id": "academic", "query": "SELECT title FROM publication WHERE YEAR  >  2000 ORDER BY citation_num DESC LIMIT 1;", "query_toks": ["SELECT", "title", "FROM", "publication", "WHERE", "YEAR", ">", "2000", "ORDER", "BY", "citation_num", "DESC", "LIMIT", "1", ";"], "query_toks_no_value": ["select", "title", "from", "publication", "where", "year", ">", "value", "order", "by", "citation_num", "desc", "limit", "value"], "question": "return me the paper after 2000 with the most citations .", "question_toks": ["return", "me", "the", "paper", "after", "2000", "with", "the", "most", "citations", "."], "guid": 4201}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | how many of dan klein 's papers cite michael i. jordan", "sql": "SELECT DISTINCT COUNT ( t5.citingpaperid ) FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN cite AS t5 ON t3.paperid  =  t5.citedpaperid JOIN writes AS t4 ON t4.paperid  =  t5.citingpaperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"michael i. jordan\" AND t1.authorname  =  \"dan klein\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( t5.citingpaperid ) FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN cite AS t5 ON t3.paperid  =  t5.citedpaperid JOIN writes AS t4 ON t4.paperid  =  t5.citingpaperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"michael i. jordan\" AND t1.authorname  =  \"dan klein\";", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "t5.citingpaperid", ")", "FROM", "writes", "AS", "t3", "JOIN", "author", "AS", "t2", "ON", "t3.authorid", "=", "t2.authorid", "JOIN", "cite", "AS", "t5", "ON", "t3.paperid", "=", "t5.citedpaperid", "JOIN", "writes", "AS", "t4", "ON", "t4.paperid", "=", "t5.citingpaperid", "JOIN", "author", "AS", "t1", "ON", "t4.authorid", "=", "t1.authorid", "WHERE", "t2.authorname", "=", "``", "michael", "i.", "jordan", "''", "AND", "t1.authorname", "=", "``", "dan", "klein", "''", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "t5", ".", "citingpaperid", ")", "from", "writes", "as", "t3", "join", "author", "as", "t2", "on", "t3", ".", "authorid", "=", "t2", ".", "authorid", "join", "cite", "as", "t5", "on", "t3", ".", "paperid", "=", "t5", ".", "citedpaperid", "join", "writes", "as", "t4", "on", "t4", ".", "paperid", "=", "t5", ".", "citingpaperid", "join", "author", "as", "t1", "on", "t4", ".", "authorid", "=", "t1", ".", "authorid", "where", "t2", ".", "authorname", "=", "value", "and", "t1", ".", "authorname", "=", "value"], "question": "how many of dan klein 's papers cite michael i. jordan", "question_toks": ["how", "many", "of", "dan", "klein", "'s", "papers", "cite", "michael", "i.", "jordan"], "guid": 4202}}
{"text": "event: Event_ID, Date, Venue, Name, Event_Attendance; journalist: journalist_ID, Name, Nationality, Age, Years_working; news_report: journalist_ID, Event_ID, Work_Type | What is the nationality of the journalist with the largest number of years working?", "sql": "SELECT Nationality FROM journalist ORDER BY Years_working DESC LIMIT 1", "example": {"db_id": "news_report", "query": "SELECT Nationality FROM journalist ORDER BY Years_working DESC LIMIT 1", "query_toks": ["SELECT", "Nationality", "FROM", "journalist", "ORDER", "BY", "Years_working", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "nationality", "from", "journalist", "order", "by", "years_working", "desc", "limit", "value"], "question": "What is the nationality of the journalist with the largest number of years working?", "question_toks": ["What", "is", "the", "nationality", "of", "the", "journalist", "with", "the", "largest", "number", "of", "years", "working", "?"], "guid": 4203}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the homepage of \" H. V. Jagadish \" .", "sql": "SELECT homepage FROM author WHERE name  =  \"H. V. Jagadish\";", "example": {"db_id": "academic", "query": "SELECT homepage FROM author WHERE name  =  \"H. V. Jagadish\";", "query_toks": ["SELECT", "homepage", "FROM", "author", "WHERE", "name", "=", "``", "H.", "V.", "Jagadish", "''", ";"], "query_toks_no_value": ["select", "homepage", "from", "author", "where", "name", "=", "value"], "question": "return me the homepage of \" H. V. Jagadish \" .", "question_toks": ["return", "me", "the", "homepage", "of", "``", "H.", "V.", "Jagadish", "``", "."], "guid": 4204}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | what conferences are related to Trophic Cascade", "sql": "SELECT DISTINCT t3.venueid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Trophic Cascade\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.venueid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Trophic Cascade\";", "query_toks": ["SELECT", "DISTINCT", "t3.venueid", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "WHERE", "t1.keyphrasename", "=", "``", "Trophic", "Cascade", "''", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "venueid", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "where", "t1", ".", "keyphrasename", "=", "value"], "question": "what conferences are related to Trophic Cascade", "question_toks": ["what", "conferences", "are", "related", "to", "Trophic", "Cascade"], "guid": 4205}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | how many parsing papers appeared in the proceeeding of ACL 2014 ?", "sql": "SELECT DISTINCT COUNT ( t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"parsing\" AND t3.year  =  2014 AND t4.venuename  =  \"ACL\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"parsing\" AND t3.year  =  2014 AND t4.venuename  =  \"ACL\";", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "t3.paperid", ")", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "JOIN", "venue", "AS", "t4", "ON", "t4.venueid", "=", "t3.venueid", "WHERE", "t1.keyphrasename", "=", "``", "parsing", "''", "AND", "t3.year", "=", "2014", "AND", "t4.venuename", "=", "``", "ACL", "''", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "t3", ".", "paperid", ")", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "join", "venue", "as", "t4", "on", "t4", ".", "venueid", "=", "t3", ".", "venueid", "where", "t1", ".", "keyphrasename", "=", "value", "and", "t3", ".", "year", "=", "value", "and", "t4", ".", "venuename", "=", "value"], "question": "how many parsing papers appeared in the proceeeding of ACL 2014 ?", "question_toks": ["how", "many", "parsing", "papers", "appeared", "in", "the", "proceeeding", "of", "ACL", "2014", "?"], "guid": 4206}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | which papers has sharon goldwater written ?", "sql": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";", "query_toks": ["SELECT", "DISTINCT", "t2.paperid", "FROM", "writes", "AS", "t2", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "WHERE", "t1.authorname", "=", "``", "sharon", "goldwater", "''", ";"], "query_toks_no_value": ["select", "distinct", "t2", ".", "paperid", "from", "writes", "as", "t2", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "where", "t1", ".", "authorname", "=", "value"], "question": "which papers has sharon goldwater written ?", "question_toks": ["which", "papers", "has", "sharon", "goldwater", "written", "?"], "guid": 4207}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the authors who have the most number of papers in PVLDB .", "sql": "SELECT t1.name FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t2.name  =  \"PVLDB\" GROUP BY t1.name ORDER BY COUNT ( DISTINCT t4.title ) DESC LIMIT 1;", "example": {"db_id": "academic", "query": "SELECT t1.name FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t2.name  =  \"PVLDB\" GROUP BY t1.name ORDER BY COUNT ( DISTINCT t4.title ) DESC LIMIT 1;", "query_toks": ["SELECT", "t1.name", "FROM", "publication", "AS", "t4", "JOIN", "journal", "AS", "t2", "ON", "t4.jid", "=", "t2.jid", "JOIN", "writes", "AS", "t3", "ON", "t3.pid", "=", "t4.pid", "JOIN", "author", "AS", "t1", "ON", "t3.aid", "=", "t1.aid", "WHERE", "t2.name", "=", "``", "PVLDB", "''", "GROUP", "BY", "t1.name", "ORDER", "BY", "COUNT", "(", "DISTINCT", "t4.title", ")", "DESC", "LIMIT", "1", ";"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "publication", "as", "t4", "join", "journal", "as", "t2", "on", "t4", ".", "jid", "=", "t2", ".", "jid", "join", "writes", "as", "t3", "on", "t3", ".", "pid", "=", "t4", ".", "pid", "join", "author", "as", "t1", "on", "t3", ".", "aid", "=", "t1", ".", "aid", "where", "t2", ".", "name", "=", "value", "group", "by", "t1", ".", "name", "order", "by", "count", "(", "distinct", "t4", ".", "title", ")", "desc", "limit", "value"], "question": "return me the authors who have the most number of papers in PVLDB .", "question_toks": ["return", "me", "the", "authors", "who", "have", "the", "most", "number", "of", "papers", "in", "PVLDB", "."], "guid": 4208}}
{"text": "Scientists: SSN, Name; Projects: Code, Name, Hours; AssignedTo: Scientist, Project | What are the names of scientists who have not been assigned a project?", "sql": "SELECT Name FROM scientists WHERE ssn NOT IN (SELECT scientist FROM AssignedTo)", "example": {"db_id": "scientist_1", "query": "SELECT Name FROM scientists WHERE ssn NOT IN (SELECT scientist FROM AssignedTo)", "query_toks": ["SELECT", "Name", "FROM", "scientists", "WHERE", "ssn", "NOT", "IN", "(", "SELECT", "scientist", "FROM", "AssignedTo", ")"], "query_toks_no_value": ["select", "name", "from", "scientists", "where", "ssn", "not", "in", "(", "select", "scientist", "from", "assignedto", ")"], "question": "What are the names of scientists who have not been assigned a project?", "question_toks": ["What", "are", "the", "names", "of", "scientists", "who", "have", "not", "been", "assigned", "a", "project", "?"], "guid": 4209}}
{"text": "item: i_id, title; review: a_id, u_id, i_id, rating, rank; useracct: u_id, name; trust: source_u_id, target_u_id, trust | For each user, return the name and the average rating of reviews given by them.", "sql": "SELECT T1.name ,  avg(T2.rating) FROM useracct AS T1 JOIN review AS T2 ON T1.u_id  =  T2.u_id GROUP BY T2.u_id", "example": {"db_id": "epinions_1", "query": "SELECT T1.name ,  avg(T2.rating) FROM useracct AS T1 JOIN review AS T2 ON T1.u_id  =  T2.u_id GROUP BY T2.u_id", "query_toks": ["SELECT", "T1.name", ",", "avg", "(", "T2.rating", ")", "FROM", "useracct", "AS", "T1", "JOIN", "review", "AS", "T2", "ON", "T1.u_id", "=", "T2.u_id", "GROUP", "BY", "T2.u_id"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "avg", "(", "t2", ".", "rating", ")", "from", "useracct", "as", "t1", "join", "review", "as", "t2", "on", "t1", ".", "u_id", "=", "t2", ".", "u_id", "group", "by", "t2", ".", "u_id"], "question": "For each user, return the name and the average rating of reviews given by them.", "question_toks": ["For", "each", "user", ",", "return", "the", "name", "and", "the", "average", "rating", "of", "reviews", "given", "by", "them", "."], "guid": 4210}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the number of papers written by \" H. V. Jagadish \" in each year .", "sql": "SELECT COUNT ( DISTINCT t3.title )  ,  t3.year FROM writes AS t2 JOIN author AS t1 ON t2.aid  =  t1.aid JOIN publication AS t3 ON t2.pid  =  t3.pid WHERE t1.name  =  \"H. V. Jagadish\" GROUP BY t3.year;", "example": {"db_id": "academic", "query": "SELECT COUNT ( DISTINCT t3.title )  ,  t3.year FROM writes AS t2 JOIN author AS t1 ON t2.aid  =  t1.aid JOIN publication AS t3 ON t2.pid  =  t3.pid WHERE t1.name  =  \"H. V. Jagadish\" GROUP BY t3.year;", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "t3.title", ")", ",", "t3.year", "FROM", "writes", "AS", "t2", "JOIN", "author", "AS", "t1", "ON", "t2.aid", "=", "t1.aid", "JOIN", "publication", "AS", "t3", "ON", "t2.pid", "=", "t3.pid", "WHERE", "t1.name", "=", "``", "H.", "V.", "Jagadish", "''", "GROUP", "BY", "t3.year", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "t3", ".", "title", ")", ",", "t3", ".", "year", "from", "writes", "as", "t2", "join", "author", "as", "t1", "on", "t2", ".", "aid", "=", "t1", ".", "aid", "join", "publication", "as", "t3", "on", "t2", ".", "pid", "=", "t3", ".", "pid", "where", "t1", ".", "name", "=", "value", "group", "by", "t3", ".", "year"], "question": "return me the number of papers written by \" H. V. Jagadish \" in each year .", "question_toks": ["return", "me", "the", "number", "of", "papers", "written", "by", "``", "H.", "V.", "Jagadish", "``", "in", "each", "year", "."], "guid": 4211}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | Who wrote on the topic of Bacterial Wilt in 2016 ?", "sql": "SELECT DISTINCT t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid JOIN author AS t5 ON t3.authorid  =  t5.authorid WHERE t2.keyphrasename  =  \"Bacterial Wilt\" AND t4.year  =  2016;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid JOIN author AS t5 ON t3.authorid  =  t5.authorid WHERE t2.keyphrasename  =  \"Bacterial Wilt\" AND t4.year  =  2016;", "query_toks": ["SELECT", "DISTINCT", "t3.authorid", "FROM", "paperkeyphrase", "AS", "t1", "JOIN", "keyphrase", "AS", "t2", "ON", "t1.keyphraseid", "=", "t2.keyphraseid", "JOIN", "paper", "AS", "t4", "ON", "t4.paperid", "=", "t1.paperid", "JOIN", "writes", "AS", "t3", "ON", "t3.paperid", "=", "t4.paperid", "JOIN", "author", "AS", "t5", "ON", "t3.authorid", "=", "t5.authorid", "WHERE", "t2.keyphrasename", "=", "``", "Bacterial", "Wilt", "''", "AND", "t4.year", "=", "2016", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "authorid", "from", "paperkeyphrase", "as", "t1", "join", "keyphrase", "as", "t2", "on", "t1", ".", "keyphraseid", "=", "t2", ".", "keyphraseid", "join", "paper", "as", "t4", "on", "t4", ".", "paperid", "=", "t1", ".", "paperid", "join", "writes", "as", "t3", "on", "t3", ".", "paperid", "=", "t4", ".", "paperid", "join", "author", "as", "t5", "on", "t3", ".", "authorid", "=", "t5", ".", "authorid", "where", "t2", ".", "keyphrasename", "=", "value", "and", "t4", ".", "year", "=", "value"], "question": "Who wrote on the topic of Bacterial Wilt in 2016 ?", "question_toks": ["Who", "wrote", "on", "the", "topic", "of", "Bacterial", "Wilt", "in", "2016", "?"], "guid": 4212}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | Paper on parsing with most citations", "sql": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"parsing\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"parsing\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;", "query_toks": ["SELECT", "DISTINCT", "t4.citedpaperid", ",", "COUNT", "(", "t4.citedpaperid", ")", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "JOIN", "cite", "AS", "t4", "ON", "t3.paperid", "=", "t4.citedpaperid", "WHERE", "t1.keyphrasename", "=", "``", "parsing", "''", "GROUP", "BY", "t4.citedpaperid", "ORDER", "BY", "COUNT", "(", "t4.citedpaperid", ")", "DESC", ";"], "query_toks_no_value": ["select", "distinct", "t4", ".", "citedpaperid", ",", "count", "(", "t4", ".", "citedpaperid", ")", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "join", "cite", "as", "t4", "on", "t3", ".", "paperid", "=", "t4", ".", "citedpaperid", "where", "t1", ".", "keyphrasename", "=", "value", "group", "by", "t4", ".", "citedpaperid", "order", "by", "count", "(", "t4", ".", "citedpaperid", ")", "desc"], "question": "Paper on parsing with most citations", "question_toks": ["Paper", "on", "parsing", "with", "most", "citations"], "guid": 4213}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | who does Noah A Smith work with ?", "sql": "SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Noah A Smith\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Noah A Smith\";", "query_toks": ["SELECT", "DISTINCT", "t1.authorid", "FROM", "writes", "AS", "t3", "JOIN", "author", "AS", "t2", "ON", "t3.authorid", "=", "t2.authorid", "JOIN", "writes", "AS", "t4", "ON", "t4.paperid", "=", "t3.paperid", "JOIN", "author", "AS", "t1", "ON", "t4.authorid", "=", "t1.authorid", "WHERE", "t2.authorname", "=", "``", "Noah", "A", "Smith", "''", ";"], "query_toks_no_value": ["select", "distinct", "t1", ".", "authorid", "from", "writes", "as", "t3", "join", "author", "as", "t2", "on", "t3", ".", "authorid", "=", "t2", ".", "authorid", "join", "writes", "as", "t4", "on", "t4", ".", "paperid", "=", "t3", ".", "paperid", "join", "author", "as", "t1", "on", "t4", ".", "authorid", "=", "t1", ".", "authorid", "where", "t2", ".", "authorname", "=", "value"], "question": "who does Noah A Smith work with ?", "question_toks": ["who", "does", "Noah", "A", "Smith", "work", "with", "?"], "guid": 4214}}
{"text": "event: Event_ID, Date, Venue, Name, Event_Attendance; journalist: journalist_ID, Name, Nationality, Age, Years_working; news_report: journalist_ID, Event_ID, Work_Type | Find the average age and experience working length of journalists working on different role type.", "sql": "SELECT avg(t1.age) ,  avg(Years_working) ,  t2.work_type FROM journalist AS t1 JOIN news_report AS t2 ON t1.journalist_id  =  t2.journalist_id GROUP BY t2.work_type", "example": {"db_id": "news_report", "query": "SELECT avg(t1.age) ,  avg(Years_working) ,  t2.work_type FROM journalist AS t1 JOIN news_report AS t2 ON t1.journalist_id  =  t2.journalist_id GROUP BY t2.work_type", "query_toks": ["SELECT", "avg", "(", "t1.age", ")", ",", "avg", "(", "Years_working", ")", ",", "t2.work_type", "FROM", "journalist", "AS", "t1", "JOIN", "news_report", "AS", "t2", "ON", "t1.journalist_id", "=", "t2.journalist_id", "GROUP", "BY", "t2.work_type"], "query_toks_no_value": ["select", "avg", "(", "t1", ".", "age", ")", ",", "avg", "(", "years_working", ")", ",", "t2", ".", "work_type", "from", "journalist", "as", "t1", "join", "news_report", "as", "t2", "on", "t1", ".", "journalist_id", "=", "t2", ".", "journalist_id", "group", "by", "t2", ".", "work_type"], "question": "Find the average age and experience working length of journalists working on different role type.", "question_toks": ["Find", "the", "average", "age", "and", "experience", "working", "length", "of", "journalists", "working", "on", "different", "role", "type", "."], "guid": 4215}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | TAIL papers in NIPS", "sql": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"TAIL\" AND t4.venuename  =  \"NIPS\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"TAIL\" AND t4.venuename  =  \"NIPS\";", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "JOIN", "venue", "AS", "t4", "ON", "t4.venueid", "=", "t3.venueid", "WHERE", "t1.keyphrasename", "=", "``", "TAIL", "''", "AND", "t4.venuename", "=", "``", "NIPS", "''", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "join", "venue", "as", "t4", "on", "t4", ".", "venueid", "=", "t3", ".", "venueid", "where", "t1", ".", "keyphrasename", "=", "value", "and", "t4", ".", "venuename", "=", "value"], "question": "TAIL papers in NIPS", "question_toks": ["TAIL", "papers", "in", "NIPS"], "guid": 4216}}
{"text": "Inst: instID, name, country; Authors: authID, lname, fname; Papers: paperID, title; Authorship: authID, instID, paperID, authOrder | Sort the list of all the first and last names of authors in alphabetical order of the last names.", "sql": "SELECT fname ,  lname FROM authors ORDER BY lname", "example": {"db_id": "icfp_1", "query": "SELECT fname ,  lname FROM authors ORDER BY lname", "query_toks": ["SELECT", "fname", ",", "lname", "FROM", "authors", "ORDER", "BY", "lname"], "query_toks_no_value": ["select", "fname", ",", "lname", "from", "authors", "order", "by", "lname"], "question": "Sort the list of all the first and last names of authors in alphabetical order of the last names.", "question_toks": ["Sort", "the", "list", "of", "all", "the", "first", "and", "last", "names", "of", "authors", "in", "alphabetical", "order", "of", "the", "last", "names", "."], "guid": 4217}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | How many Semantic Parsing papers has Ed Desmond written ?", "sql": "SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperkeyphrase AS t1 JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid JOIN writes AS t3 ON t3.paperid  =  t1.paperid JOIN author AS t2 ON t3.authorid  =  t2.authorid WHERE t2.authorname  =  \"Ed Desmond\" AND t4.keyphrasename  =  \"Semantic Parsing\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperkeyphrase AS t1 JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid JOIN writes AS t3 ON t3.paperid  =  t1.paperid JOIN author AS t2 ON t3.authorid  =  t2.authorid WHERE t2.authorname  =  \"Ed Desmond\" AND t4.keyphrasename  =  \"Semantic Parsing\";", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "DISTINCT", "t3.paperid", ")", "FROM", "paperkeyphrase", "AS", "t1", "JOIN", "keyphrase", "AS", "t4", "ON", "t1.keyphraseid", "=", "t4.keyphraseid", "JOIN", "writes", "AS", "t3", "ON", "t3.paperid", "=", "t1.paperid", "JOIN", "author", "AS", "t2", "ON", "t3.authorid", "=", "t2.authorid", "WHERE", "t2.authorname", "=", "``", "Ed", "Desmond", "''", "AND", "t4.keyphrasename", "=", "``", "Semantic", "Parsing", "''", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "distinct", "t3", ".", "paperid", ")", "from", "paperkeyphrase", "as", "t1", "join", "keyphrase", "as", "t4", "on", "t1", ".", "keyphraseid", "=", "t4", ".", "keyphraseid", "join", "writes", "as", "t3", "on", "t3", ".", "paperid", "=", "t1", ".", "paperid", "join", "author", "as", "t2", "on", "t3", ".", "authorid", "=", "t2", ".", "authorid", "where", "t2", ".", "authorname", "=", "value", "and", "t4", ".", "keyphrasename", "=", "value"], "question": "How many Semantic Parsing papers has Ed Desmond written ?", "question_toks": ["How", "many", "Semantic", "Parsing", "papers", "has", "Ed", "Desmond", "written", "?"], "guid": 4218}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | Who are Noah A Smith 's coauthors", "sql": "SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Noah A Smith\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Noah A Smith\";", "query_toks": ["SELECT", "DISTINCT", "t1.authorid", "FROM", "writes", "AS", "t3", "JOIN", "author", "AS", "t2", "ON", "t3.authorid", "=", "t2.authorid", "JOIN", "writes", "AS", "t4", "ON", "t4.paperid", "=", "t3.paperid", "JOIN", "author", "AS", "t1", "ON", "t4.authorid", "=", "t1.authorid", "WHERE", "t2.authorname", "=", "``", "Noah", "A", "Smith", "''", ";"], "query_toks_no_value": ["select", "distinct", "t1", ".", "authorid", "from", "writes", "as", "t3", "join", "author", "as", "t2", "on", "t3", ".", "authorid", "=", "t2", ".", "authorid", "join", "writes", "as", "t4", "on", "t4", ".", "paperid", "=", "t3", ".", "paperid", "join", "author", "as", "t1", "on", "t4", ".", "authorid", "=", "t1", ".", "authorid", "where", "t2", ".", "authorname", "=", "value"], "question": "Who are Noah A Smith 's coauthors", "question_toks": ["Who", "are", "Noah", "A", "Smith", "'s", "coauthors"], "guid": 4219}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | what keywords are used by Luke Zettlemoyer", "sql": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";", "query_toks": ["SELECT", "DISTINCT", "t1.keyphraseid", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "JOIN", "writes", "AS", "t4", "ON", "t4.paperid", "=", "t3.paperid", "JOIN", "author", "AS", "t5", "ON", "t4.authorid", "=", "t5.authorid", "WHERE", "t5.authorname", "=", "``", "Luke", "Zettlemoyer", "''", ";"], "query_toks_no_value": ["select", "distinct", "t1", ".", "keyphraseid", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "join", "writes", "as", "t4", "on", "t4", ".", "paperid", "=", "t3", ".", "paperid", "join", "author", "as", "t5", "on", "t4", ".", "authorid", "=", "t5", ".", "authorid", "where", "t5", ".", "authorname", "=", "value"], "question": "what keywords are used by Luke Zettlemoyer", "question_toks": ["what", "keywords", "are", "used", "by", "Luke", "Zettlemoyer"], "guid": 4220}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | what author is most cited ?", "sql": "SELECT DISTINCT t1.authorname  ,  COUNT ( t3.citingpaperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN cite AS t3 ON t2.paperid  =  t3.citedpaperid GROUP BY t1.authorname ORDER BY COUNT ( t3.citingpaperid ) DESC;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t1.authorname  ,  COUNT ( t3.citingpaperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN cite AS t3 ON t2.paperid  =  t3.citedpaperid GROUP BY t1.authorname ORDER BY COUNT ( t3.citingpaperid ) DESC;", "query_toks": ["SELECT", "DISTINCT", "t1.authorname", ",", "COUNT", "(", "t3.citingpaperid", ")", "FROM", "writes", "AS", "t2", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "JOIN", "cite", "AS", "t3", "ON", "t2.paperid", "=", "t3.citedpaperid", "GROUP", "BY", "t1.authorname", "ORDER", "BY", "COUNT", "(", "t3.citingpaperid", ")", "DESC", ";"], "query_toks_no_value": ["select", "distinct", "t1", ".", "authorname", ",", "count", "(", "t3", ".", "citingpaperid", ")", "from", "writes", "as", "t2", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "join", "cite", "as", "t3", "on", "t2", ".", "paperid", "=", "t3", ".", "citedpaperid", "group", "by", "t1", ".", "authorname", "order", "by", "count", "(", "t3", ".", "citingpaperid", ")", "desc"], "question": "what author is most cited ?", "question_toks": ["what", "author", "is", "most", "cited", "?"], "guid": 4221}}
{"text": "Document_Types: document_type_code, document_description; Documents: document_id, document_type_code, grant_id, sent_date, response_received_date, other_details; Grants: grant_id, organisation_id, grant_amount, grant_start_date, grant_end_date, other_details; Organisation_Types: organisation_type, organisation_type_description; Organisations: organisation_id, organisation_type, organisation_details; Project_Outcomes: project_id, outcome_code, outcome_details; Project_Staff: staff_id, project_id, role_code, date_from, date_to, other_details; Projects: project_id, organisation_id, project_details; Research_Outcomes: outcome_code, outcome_description; Research_Staff: staff_id, employer_organisation_id, staff_details | What is the total amount of grant money for research?", "sql": "SELECT sum(grant_amount) FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id  =  T2.organisation_id JOIN organisation_Types AS T3 ON T2.organisation_type  =  T3.organisation_type WHERE T3.organisation_type_description  =  'Research'", "example": {"db_id": "tracking_grants_for_research", "query": "SELECT sum(grant_amount) FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id  =  T2.organisation_id JOIN organisation_Types AS T3 ON T2.organisation_type  =  T3.organisation_type WHERE T3.organisation_type_description  =  'Research'", "query_toks": ["SELECT", "sum", "(", "grant_amount", ")", "FROM", "Grants", "AS", "T1", "JOIN", "Organisations", "AS", "T2", "ON", "T1.organisation_id", "=", "T2.organisation_id", "JOIN", "organisation_Types", "AS", "T3", "ON", "T2.organisation_type", "=", "T3.organisation_type", "WHERE", "T3.organisation_type_description", "=", "'Research", "'"], "query_toks_no_value": ["select", "sum", "(", "grant_amount", ")", "from", "grants", "as", "t1", "join", "organisations", "as", "t2", "on", "t1", ".", "organisation_id", "=", "t2", ".", "organisation_id", "join", "organisation_types", "as", "t3", "on", "t2", ".", "organisation_type", "=", "t3", ".", "organisation_type", "where", "t3", ".", "organisation_type_description", "=", "value"], "question": "What is the total amount of grant money for research?", "question_toks": ["What", "is", "the", "total", "amount", "of", "grant", "money", "for", "research", "?"], "guid": 4222}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | papers from pldi 2015", "sql": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"pldi\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"pldi\";", "query_toks": ["SELECT", "DISTINCT", "t1.paperid", "FROM", "venue", "AS", "t2", "JOIN", "paper", "AS", "t1", "ON", "t2.venueid", "=", "t1.venueid", "WHERE", "t1.year", "=", "2015", "AND", "t2.venuename", "=", "``", "pldi", "''", ";"], "query_toks_no_value": ["select", "distinct", "t1", ".", "paperid", "from", "venue", "as", "t2", "join", "paper", "as", "t1", "on", "t2", ".", "venueid", "=", "t1", ".", "venueid", "where", "t1", ".", "year", "=", "value", "and", "t2", ".", "venuename", "=", "value"], "question": "papers from pldi 2015", "question_toks": ["papers", "from", "pldi", "2015"], "guid": 4223}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | what year was the first deep learning paper published ?", "sql": "SELECT DISTINCT t2.datasetid  ,  t4.year FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN paper AS t4 ON t4.paperid  =  t3.paperid JOIN keyphrase AS t5 ON t1.keyphraseid  =  t5.keyphraseid WHERE t5.keyphrasename  =  \"deep learning\" ORDER BY t4.year ASC;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t2.datasetid  ,  t4.year FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN paper AS t4 ON t4.paperid  =  t3.paperid JOIN keyphrase AS t5 ON t1.keyphraseid  =  t5.keyphraseid WHERE t5.keyphrasename  =  \"deep learning\" ORDER BY t4.year ASC;", "query_toks": ["SELECT", "DISTINCT", "t2.datasetid", ",", "t4.year", "FROM", "paperdataset", "AS", "t3", "JOIN", "dataset", "AS", "t2", "ON", "t3.datasetid", "=", "t2.datasetid", "JOIN", "paperkeyphrase", "AS", "t1", "ON", "t1.paperid", "=", "t3.paperid", "JOIN", "paper", "AS", "t4", "ON", "t4.paperid", "=", "t3.paperid", "JOIN", "keyphrase", "AS", "t5", "ON", "t1.keyphraseid", "=", "t5.keyphraseid", "WHERE", "t5.keyphrasename", "=", "``", "deep", "learning", "''", "ORDER", "BY", "t4.year", "ASC", ";"], "query_toks_no_value": ["select", "distinct", "t2", ".", "datasetid", ",", "t4", ".", "year", "from", "paperdataset", "as", "t3", "join", "dataset", "as", "t2", "on", "t3", ".", "datasetid", "=", "t2", ".", "datasetid", "join", "paperkeyphrase", "as", "t1", "on", "t1", ".", "paperid", "=", "t3", ".", "paperid", "join", "paper", "as", "t4", "on", "t4", ".", "paperid", "=", "t3", ".", "paperid", "join", "keyphrase", "as", "t5", "on", "t1", ".", "keyphraseid", "=", "t5", ".", "keyphraseid", "where", "t5", ".", "keyphrasename", "=", "value", "order", "by", "t4", ".", "year", "asc"], "question": "what year was the first deep learning paper published ?", "question_toks": ["what", "year", "was", "the", "first", "deep", "learning", "paper", "published", "?"], "guid": 4224}}
{"text": "event: Event_ID, Date, Venue, Name, Event_Attendance; journalist: journalist_ID, Name, Nationality, Age, Years_working; news_report: journalist_ID, Event_ID, Work_Type | what are the average and maximum attendances of all events?", "sql": "SELECT avg(Event_Attendance) ,  max(Event_Attendance) FROM event", "example": {"db_id": "news_report", "query": "SELECT avg(Event_Attendance) ,  max(Event_Attendance) FROM event", "query_toks": ["SELECT", "avg", "(", "Event_Attendance", ")", ",", "max", "(", "Event_Attendance", ")", "FROM", "event"], "query_toks_no_value": ["select", "avg", "(", "event_attendance", ")", ",", "max", "(", "event_attendance", ")", "from", "event"], "question": "what are the average and maximum attendances of all events?", "question_toks": ["what", "are", "the", "average", "and", "maximum", "attendances", "of", "all", "events", "?"], "guid": 4225}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | how many papers does sigir have ?", "sql": "SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"sigir\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"sigir\";", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "t1.paperid", ")", "FROM", "venue", "AS", "t2", "JOIN", "paper", "AS", "t1", "ON", "t2.venueid", "=", "t1.venueid", "WHERE", "t2.venuename", "=", "``", "sigir", "''", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "t1", ".", "paperid", ")", "from", "venue", "as", "t2", "join", "paper", "as", "t1", "on", "t2", ".", "venueid", "=", "t1", ".", "venueid", "where", "t2", ".", "venuename", "=", "value"], "question": "how many papers does sigir have ?", "question_toks": ["how", "many", "papers", "does", "sigir", "have", "?"], "guid": 4226}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | Datasets by jitendra malik", "sql": "SELECT DISTINCT t2.datasetid FROM paper AS t3 JOIN paperdataset AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"jitendra malik\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t2.datasetid FROM paper AS t3 JOIN paperdataset AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"jitendra malik\";", "query_toks": ["SELECT", "DISTINCT", "t2.datasetid", "FROM", "paper", "AS", "t3", "JOIN", "paperdataset", "AS", "t2", "ON", "t3.paperid", "=", "t2.paperid", "JOIN", "writes", "AS", "t4", "ON", "t4.paperid", "=", "t3.paperid", "JOIN", "author", "AS", "t1", "ON", "t4.authorid", "=", "t1.authorid", "WHERE", "t1.authorname", "=", "``", "jitendra", "malik", "''", ";"], "query_toks_no_value": ["select", "distinct", "t2", ".", "datasetid", "from", "paper", "as", "t3", "join", "paperdataset", "as", "t2", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "join", "writes", "as", "t4", "on", "t4", ".", "paperid", "=", "t3", ".", "paperid", "join", "author", "as", "t1", "on", "t4", ".", "authorid", "=", "t1", ".", "authorid", "where", "t1", ".", "authorname", "=", "value"], "question": "Datasets by jitendra malik", "question_toks": ["Datasets", "by", "jitendra", "malik"], "guid": 4227}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the number of papers in PVLDB containing keyword \" Keyword search \" .", "sql": "SELECT COUNT ( DISTINCT t4.title ) FROM publication_keyword AS t2 JOIN keyword AS t1 ON t2.kid  =  t1.kid JOIN publication AS t4 ON t4.pid  =  t2.pid JOIN journal AS t3 ON t4.jid  =  t3.jid WHERE t3.name  =  \"PVLDB\" AND t1.keyword  =  \"Keyword search\";", "example": {"db_id": "academic", "query": "SELECT COUNT ( DISTINCT t4.title ) FROM publication_keyword AS t2 JOIN keyword AS t1 ON t2.kid  =  t1.kid JOIN publication AS t4 ON t4.pid  =  t2.pid JOIN journal AS t3 ON t4.jid  =  t3.jid WHERE t3.name  =  \"PVLDB\" AND t1.keyword  =  \"Keyword search\";", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "t4.title", ")", "FROM", "publication_keyword", "AS", "t2", "JOIN", "keyword", "AS", "t1", "ON", "t2.kid", "=", "t1.kid", "JOIN", "publication", "AS", "t4", "ON", "t4.pid", "=", "t2.pid", "JOIN", "journal", "AS", "t3", "ON", "t4.jid", "=", "t3.jid", "WHERE", "t3.name", "=", "``", "PVLDB", "''", "AND", "t1.keyword", "=", "``", "Keyword", "search", "''", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "t4", ".", "title", ")", "from", "publication_keyword", "as", "t2", "join", "keyword", "as", "t1", "on", "t2", ".", "kid", "=", "t1", ".", "kid", "join", "publication", "as", "t4", "on", "t4", ".", "pid", "=", "t2", ".", "pid", "join", "journal", "as", "t3", "on", "t4", ".", "jid", "=", "t3", ".", "jid", "where", "t3", ".", "name", "=", "value", "and", "t1", ".", "keyword", "=", "value"], "question": "return me the number of papers in PVLDB containing keyword \" Keyword search \" .", "question_toks": ["return", "me", "the", "number", "of", "papers", "in", "PVLDB", "containing", "keyword", "``", "Keyword", "search", "``", "."], "guid": 4228}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | How many citation noah a smith has ?", "sql": "SELECT DISTINCT COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"noah a smith\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"noah a smith\";", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "t4.citedpaperid", ")", "FROM", "paper", "AS", "t3", "JOIN", "cite", "AS", "t4", "ON", "t3.paperid", "=", "t4.citedpaperid", "JOIN", "writes", "AS", "t2", "ON", "t2.paperid", "=", "t3.paperid", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "WHERE", "t1.authorname", "=", "``", "noah", "a", "smith", "''", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "t4", ".", "citedpaperid", ")", "from", "paper", "as", "t3", "join", "cite", "as", "t4", "on", "t3", ".", "paperid", "=", "t4", ".", "citedpaperid", "join", "writes", "as", "t2", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "where", "t1", ".", "authorname", "=", "value"], "question": "How many citation noah a smith has ?", "question_toks": ["How", "many", "citation", "noah", "a", "smith", "has", "?"], "guid": 4229}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the year of \" Making database systems usable \" .", "sql": "SELECT YEAR FROM publication WHERE title  =  \"Making database systems usable\";", "example": {"db_id": "academic", "query": "SELECT YEAR FROM publication WHERE title  =  \"Making database systems usable\";", "query_toks": ["SELECT", "YEAR", "FROM", "publication", "WHERE", "title", "=", "``", "Making", "database", "systems", "usable", "''", ";"], "query_toks_no_value": ["select", "year", "from", "publication", "where", "title", "=", "value"], "question": "return me the year of \" Making database systems usable \" .", "question_toks": ["return", "me", "the", "year", "of", "``", "Making", "database", "systems", "usable", "``", "."], "guid": 4230}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | in what conferences does Daniella Coelho publish ?", "sql": "SELECT DISTINCT t3.venueid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Daniella Coelho\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.venueid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Daniella Coelho\";", "query_toks": ["SELECT", "DISTINCT", "t3.venueid", "FROM", "writes", "AS", "t2", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "JOIN", "paper", "AS", "t3", "ON", "t2.paperid", "=", "t3.paperid", "WHERE", "t1.authorname", "=", "``", "Daniella", "Coelho", "''", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "venueid", "from", "writes", "as", "t2", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "join", "paper", "as", "t3", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "where", "t1", ".", "authorname", "=", "value"], "question": "in what conferences does Daniella Coelho publish ?", "question_toks": ["in", "what", "conferences", "does", "Daniella", "Coelho", "publish", "?"], "guid": 4231}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me all the papers in PVLDB after 2000 in \" University of Michigan \" .", "sql": "SELECT t5.title FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid JOIN writes AS t4 ON t4.aid  =  t1.aid JOIN publication AS t5 ON t4.pid  =  t5.pid JOIN journal AS t3 ON t5.jid  =  t3.jid WHERE t3.name  =  \"PVLDB\" AND t2.name  =  \"University of Michigan\" AND t5.year  >  2000;", "example": {"db_id": "academic", "query": "SELECT t5.title FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid JOIN writes AS t4 ON t4.aid  =  t1.aid JOIN publication AS t5 ON t4.pid  =  t5.pid JOIN journal AS t3 ON t5.jid  =  t3.jid WHERE t3.name  =  \"PVLDB\" AND t2.name  =  \"University of Michigan\" AND t5.year  >  2000;", "query_toks": ["SELECT", "t5.title", "FROM", "organization", "AS", "t2", "JOIN", "author", "AS", "t1", "ON", "t2.oid", "=", "t1.oid", "JOIN", "writes", "AS", "t4", "ON", "t4.aid", "=", "t1.aid", "JOIN", "publication", "AS", "t5", "ON", "t4.pid", "=", "t5.pid", "JOIN", "journal", "AS", "t3", "ON", "t5.jid", "=", "t3.jid", "WHERE", "t3.name", "=", "``", "PVLDB", "''", "AND", "t2.name", "=", "``", "University", "of", "Michigan", "''", "AND", "t5.year", ">", "2000", ";"], "query_toks_no_value": ["select", "t5", ".", "title", "from", "organization", "as", "t2", "join", "author", "as", "t1", "on", "t2", ".", "oid", "=", "t1", ".", "oid", "join", "writes", "as", "t4", "on", "t4", ".", "aid", "=", "t1", ".", "aid", "join", "publication", "as", "t5", "on", "t4", ".", "pid", "=", "t5", ".", "pid", "join", "journal", "as", "t3", "on", "t5", ".", "jid", "=", "t3", ".", "jid", "where", "t3", ".", "name", "=", "value", "and", "t2", ".", "name", "=", "value", "and", "t5", ".", "year", ">", "value"], "question": "return me all the papers in PVLDB after 2000 in \" University of Michigan \" .", "question_toks": ["return", "me", "all", "the", "papers", "in", "PVLDB", "after", "2000", "in", "``", "University", "of", "Michigan", "``", "."], "guid": 4232}}
{"text": "Document_Types: document_type_code, document_description; Documents: document_id, document_type_code, grant_id, sent_date, response_received_date, other_details; Grants: grant_id, organisation_id, grant_amount, grant_start_date, grant_end_date, other_details; Organisation_Types: organisation_type, organisation_type_description; Organisations: organisation_id, organisation_type, organisation_details; Project_Outcomes: project_id, outcome_code, outcome_details; Project_Staff: staff_id, project_id, role_code, date_from, date_to, other_details; Projects: project_id, organisation_id, project_details; Research_Outcomes: outcome_code, outcome_description; Research_Staff: staff_id, employer_organisation_id, staff_details | What are the descriptions of all the project outcomes?", "sql": "SELECT T1.outcome_description FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code  =  T2.outcome_code", "example": {"db_id": "tracking_grants_for_research", "query": "SELECT T1.outcome_description FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code  =  T2.outcome_code", "query_toks": ["SELECT", "T1.outcome_description", "FROM", "Research_outcomes", "AS", "T1", "JOIN", "Project_outcomes", "AS", "T2", "ON", "T1.outcome_code", "=", "T2.outcome_code"], "query_toks_no_value": ["select", "t1", ".", "outcome_description", "from", "research_outcomes", "as", "t1", "join", "project_outcomes", "as", "t2", "on", "t1", ".", "outcome_code", "=", "t2", ".", "outcome_code"], "question": "What are the descriptions of all the project outcomes?", "question_toks": ["What", "are", "the", "descriptions", "of", "all", "the", "project", "outcomes", "?"], "guid": 4233}}
{"text": "book_club: book_club_id, Year, Author_or_Editor, Book_Title, Publisher, Category, Result; movie: movie_id, Title, Year, Director, Budget_million, Gross_worldwide; culture_company: Company_name, Type, Incorporated_in, Group_Equity_Shareholding, book_club_id, movie_id | Show all book categories and the number of books in each category.", "sql": "SELECT category ,  count(*) FROM book_club GROUP BY category", "example": {"db_id": "culture_company", "query": "SELECT category ,  count(*) FROM book_club GROUP BY category", "query_toks": ["SELECT", "category", ",", "count", "(", "*", ")", "FROM", "book_club", "GROUP", "BY", "category"], "query_toks_no_value": ["select", "category", ",", "count", "(", "*", ")", "from", "book_club", "group", "by", "category"], "question": "Show all book categories and the number of books in each category.", "question_toks": ["Show", "all", "book", "categories", "and", "the", "number", "of", "books", "in", "each", "category", "."], "guid": 4234}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | List the papers on TAIL that were published in NIPS", "sql": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"TAIL\" AND t4.venuename  =  \"NIPS\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"TAIL\" AND t4.venuename  =  \"NIPS\";", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "JOIN", "venue", "AS", "t4", "ON", "t4.venueid", "=", "t3.venueid", "WHERE", "t1.keyphrasename", "=", "``", "TAIL", "''", "AND", "t4.venuename", "=", "``", "NIPS", "''", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "join", "venue", "as", "t4", "on", "t4", ".", "venueid", "=", "t3", ".", "venueid", "where", "t1", ".", "keyphrasename", "=", "value", "and", "t4", ".", "venuename", "=", "value"], "question": "List the papers on TAIL that were published in NIPS", "question_toks": ["List", "the", "papers", "on", "TAIL", "that", "were", "published", "in", "NIPS"], "guid": 4235}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | How many papers does michael i. jordan have in 2016 ?", "sql": "SELECT DISTINCT COUNT ( t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"michael i. jordan\" AND t3.year  =  2016;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"michael i. jordan\" AND t3.year  =  2016;", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "t2.paperid", ")", "FROM", "writes", "AS", "t2", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "JOIN", "paper", "AS", "t3", "ON", "t2.paperid", "=", "t3.paperid", "WHERE", "t1.authorname", "=", "``", "michael", "i.", "jordan", "''", "AND", "t3.year", "=", "2016", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "t2", ".", "paperid", ")", "from", "writes", "as", "t2", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "join", "paper", "as", "t3", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "where", "t1", ".", "authorname", "=", "value", "and", "t3", ".", "year", "=", "value"], "question": "How many papers does michael i. jordan have in 2016 ?", "question_toks": ["How", "many", "papers", "does", "michael", "i.", "jordan", "have", "in", "2016", "?"], "guid": 4236}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | how many papers are in sigir ?", "sql": "SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"sigir\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"sigir\";", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "t1.paperid", ")", "FROM", "venue", "AS", "t2", "JOIN", "paper", "AS", "t1", "ON", "t2.venueid", "=", "t1.venueid", "WHERE", "t2.venuename", "=", "``", "sigir", "''", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "t1", ".", "paperid", ")", "from", "venue", "as", "t2", "join", "paper", "as", "t1", "on", "t2", ".", "venueid", "=", "t1", ".", "venueid", "where", "t2", ".", "venuename", "=", "value"], "question": "how many papers are in sigir ?", "question_toks": ["how", "many", "papers", "are", "in", "sigir", "?"], "guid": 4237}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | How many citations does noah a smith have", "sql": "SELECT DISTINCT COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"noah a smith\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"noah a smith\";", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "t4.citedpaperid", ")", "FROM", "paper", "AS", "t3", "JOIN", "cite", "AS", "t4", "ON", "t3.paperid", "=", "t4.citedpaperid", "JOIN", "writes", "AS", "t2", "ON", "t2.paperid", "=", "t3.paperid", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "WHERE", "t1.authorname", "=", "``", "noah", "a", "smith", "''", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "t4", ".", "citedpaperid", ")", "from", "paper", "as", "t3", "join", "cite", "as", "t4", "on", "t3", ".", "paperid", "=", "t4", ".", "citedpaperid", "join", "writes", "as", "t2", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "where", "t1", ".", "authorname", "=", "value"], "question": "How many citations does noah a smith have", "question_toks": ["How", "many", "citations", "does", "noah", "a", "smith", "have"], "guid": 4238}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | papers where sharon goldwater is an author", "sql": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";", "query_toks": ["SELECT", "DISTINCT", "t2.paperid", "FROM", "writes", "AS", "t2", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "WHERE", "t1.authorname", "=", "``", "sharon", "goldwater", "''", ";"], "query_toks_no_value": ["select", "distinct", "t2", ".", "paperid", "from", "writes", "as", "t2", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "where", "t1", ".", "authorname", "=", "value"], "question": "papers where sharon goldwater is an author", "question_toks": ["papers", "where", "sharon", "goldwater", "is", "an", "author"], "guid": 4239}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | What papers cite Daniel Jurafsky ?", "sql": "SELECT DISTINCT t3.paperid FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citingpaperid JOIN writes AS t2 ON t2.paperid  =  t4.citedpaperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Daniel Jurafsky\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citingpaperid JOIN writes AS t2 ON t2.paperid  =  t4.citedpaperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Daniel Jurafsky\";", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "paper", "AS", "t3", "JOIN", "cite", "AS", "t4", "ON", "t3.paperid", "=", "t4.citingpaperid", "JOIN", "writes", "AS", "t2", "ON", "t2.paperid", "=", "t4.citedpaperid", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "WHERE", "t1.authorname", "=", "``", "Daniel", "Jurafsky", "''", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "paper", "as", "t3", "join", "cite", "as", "t4", "on", "t3", ".", "paperid", "=", "t4", ".", "citingpaperid", "join", "writes", "as", "t2", "on", "t2", ".", "paperid", "=", "t4", ".", "citedpaperid", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "where", "t1", ".", "authorname", "=", "value"], "question": "What papers cite Daniel Jurafsky ?", "question_toks": ["What", "papers", "cite", "Daniel", "Jurafsky", "?"], "guid": 4240}}
{"text": "Inst: instID, name, country; Authors: authID, lname, fname; Papers: paperID, title; Authorship: authID, instID, paperID, authOrder | Find the titles of papers whose first author is affiliated with an institution in the country \"Japan\" and has last name \"Ohori\"?", "sql": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid JOIN inst AS t4 ON t2.instid  =  t4.instid WHERE t4.country  =  \"Japan\" AND t2.authorder  =  1 AND t1.lname  =  \"Ohori\"", "example": {"db_id": "icfp_1", "query": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid JOIN inst AS t4 ON t2.instid  =  t4.instid WHERE t4.country  =  \"Japan\" AND t2.authorder  =  1 AND t1.lname  =  \"Ohori\"", "query_toks": ["SELECT", "t3.title", "FROM", "authors", "AS", "t1", "JOIN", "authorship", "AS", "t2", "ON", "t1.authid", "=", "t2.authid", "JOIN", "papers", "AS", "t3", "ON", "t2.paperid", "=", "t3.paperid", "JOIN", "inst", "AS", "t4", "ON", "t2.instid", "=", "t4.instid", "WHERE", "t4.country", "=", "``", "Japan", "''", "AND", "t2.authorder", "=", "1", "AND", "t1.lname", "=", "``", "Ohori", "''"], "query_toks_no_value": ["select", "t3", ".", "title", "from", "authors", "as", "t1", "join", "authorship", "as", "t2", "on", "t1", ".", "authid", "=", "t2", ".", "authid", "join", "papers", "as", "t3", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "join", "inst", "as", "t4", "on", "t2", ".", "instid", "=", "t4", ".", "instid", "where", "t4", ".", "country", "=", "value", "and", "t2", ".", "authorder", "=", "value", "and", "t1", ".", "lname", "=", "value"], "question": "Find the titles of papers whose first author is affiliated with an institution in the country \"Japan\" and has last name \"Ohori\"?", "question_toks": ["Find", "the", "titles", "of", "papers", "whose", "first", "author", "is", "affiliated", "with", "an", "institution", "in", "the", "country", "``", "Japan", "''", "and", "has", "last", "name", "``", "Ohori", "''", "?"], "guid": 4241}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the paper in PVLDB with the most citations .", "sql": "SELECT t2.title FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\" ORDER BY t2.citation_num DESC LIMIT 1;", "example": {"db_id": "academic", "query": "SELECT t2.title FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\" ORDER BY t2.citation_num DESC LIMIT 1;", "query_toks": ["SELECT", "t2.title", "FROM", "publication", "AS", "t2", "JOIN", "journal", "AS", "t1", "ON", "t2.jid", "=", "t1.jid", "WHERE", "t1.name", "=", "``", "PVLDB", "''", "ORDER", "BY", "t2.citation_num", "DESC", "LIMIT", "1", ";"], "query_toks_no_value": ["select", "t2", ".", "title", "from", "publication", "as", "t2", "join", "journal", "as", "t1", "on", "t2", ".", "jid", "=", "t1", ".", "jid", "where", "t1", ".", "name", "=", "value", "order", "by", "t2", ".", "citation_num", "desc", "limit", "value"], "question": "return me the paper in PVLDB with the most citations .", "question_toks": ["return", "me", "the", "paper", "in", "PVLDB", "with", "the", "most", "citations", "."], "guid": 4242}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | machine networks for one shot learning", "sql": "SELECT DISTINCT paperid FROM paper WHERE title  =  \"machine networks for one shot learning\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT paperid FROM paper WHERE title  =  \"machine networks for one shot learning\";", "query_toks": ["SELECT", "DISTINCT", "paperid", "FROM", "paper", "WHERE", "title", "=", "``", "machine", "networks", "for", "one", "shot", "learning", "''", ";"], "query_toks_no_value": ["select", "distinct", "paperid", "from", "paper", "where", "title", "=", "value"], "question": "machine networks for one shot learning", "question_toks": ["machine", "networks", "for", "one", "shot", "learning"], "guid": 4243}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | brian curless convolution paper", "sql": "SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";", "query_toks": ["SELECT", "DISTINCT", "t1.authorid", ",", "t3.paperid", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t5", "ON", "t2.keyphraseid", "=", "t5.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "JOIN", "writes", "AS", "t4", "ON", "t4.paperid", "=", "t3.paperid", "JOIN", "author", "AS", "t1", "ON", "t4.authorid", "=", "t1.authorid", "WHERE", "t1.authorname", "=", "``", "brian", "curless", "''", "AND", "t5.keyphrasename", "=", "``", "convolution", "''", ";"], "query_toks_no_value": ["select", "distinct", "t1", ".", "authorid", ",", "t3", ".", "paperid", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t5", "on", "t2", ".", "keyphraseid", "=", "t5", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "join", "writes", "as", "t4", "on", "t4", ".", "paperid", "=", "t3", ".", "paperid", "join", "author", "as", "t1", "on", "t4", ".", "authorid", "=", "t1", ".", "authorid", "where", "t1", ".", "authorname", "=", "value", "and", "t5", ".", "keyphrasename", "=", "value"], "question": "brian curless convolution paper", "question_toks": ["brian", "curless", "convolution", "paper"], "guid": 4244}}
{"text": "book_club: book_club_id, Year, Author_or_Editor, Book_Title, Publisher, Category, Result; movie: movie_id, Title, Year, Director, Budget_million, Gross_worldwide; culture_company: Company_name, Type, Incorporated_in, Group_Equity_Shareholding, book_club_id, movie_id | Which publishers did not publish a book in 1989?", "sql": "SELECT publisher FROM book_club EXCEPT SELECT publisher FROM book_club WHERE YEAR  =  1989", "example": {"db_id": "culture_company", "query": "SELECT publisher FROM book_club EXCEPT SELECT publisher FROM book_club WHERE YEAR  =  1989", "query_toks": ["SELECT", "publisher", "FROM", "book_club", "EXCEPT", "SELECT", "publisher", "FROM", "book_club", "WHERE", "YEAR", "=", "1989"], "query_toks_no_value": ["select", "publisher", "from", "book_club", "except", "select", "publisher", "from", "book_club", "where", "year", "=", "value"], "question": "Which publishers did not publish a book in 1989?", "question_toks": ["Which", "publishers", "did", "not", "publish", "a", "book", "in", "1989", "?"], "guid": 4245}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | how many citations does noah a smith have ?", "sql": "SELECT DISTINCT COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"noah a smith\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"noah a smith\";", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "t4.citedpaperid", ")", "FROM", "paper", "AS", "t3", "JOIN", "cite", "AS", "t4", "ON", "t3.paperid", "=", "t4.citedpaperid", "JOIN", "writes", "AS", "t2", "ON", "t2.paperid", "=", "t3.paperid", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "WHERE", "t1.authorname", "=", "``", "noah", "a", "smith", "''", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "t4", ".", "citedpaperid", ")", "from", "paper", "as", "t3", "join", "cite", "as", "t4", "on", "t3", ".", "paperid", "=", "t4", ".", "citedpaperid", "join", "writes", "as", "t2", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "where", "t1", ".", "authorname", "=", "value"], "question": "how many citations does noah a smith have ?", "question_toks": ["how", "many", "citations", "does", "noah", "a", "smith", "have", "?"], "guid": 4246}}
{"text": "event: Event_ID, Date, Venue, Name, Event_Attendance; journalist: journalist_ID, Name, Nationality, Age, Years_working; news_report: journalist_ID, Event_ID, Work_Type | How many journalists are there?", "sql": "SELECT count(*) FROM journalist", "example": {"db_id": "news_report", "query": "SELECT count(*) FROM journalist", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "journalist"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "journalist"], "question": "How many journalists are there?", "question_toks": ["How", "many", "journalists", "are", "there", "?"], "guid": 4247}}
{"text": "Scientists: SSN, Name; Projects: Code, Name, Hours; AssignedTo: Scientist, Project | Find the total hours of the projects that scientists named Michael Rogers or Carol Smith are assigned to.", "sql": "SELECT sum(T2.hours) FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T3.name  =  'Michael Rogers' OR T3.name  =  'Carol Smith'", "example": {"db_id": "scientist_1", "query": "SELECT sum(T2.hours) FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T3.name  =  'Michael Rogers' OR T3.name  =  'Carol Smith'", "query_toks": ["SELECT", "sum", "(", "T2.hours", ")", "FROM", "assignedto", "AS", "T1", "JOIN", "projects", "AS", "T2", "ON", "T1.project", "=", "T2.code", "JOIN", "scientists", "AS", "T3", "ON", "T1.scientist", "=", "T3.SSN", "WHERE", "T3.name", "=", "'Michael", "Rogers", "'", "OR", "T3.name", "=", "'Carol", "Smith", "'"], "query_toks_no_value": ["select", "sum", "(", "t2", ".", "hours", ")", "from", "assignedto", "as", "t1", "join", "projects", "as", "t2", "on", "t1", ".", "project", "=", "t2", ".", "code", "join", "scientists", "as", "t3", "on", "t1", ".", "scientist", "=", "t3", ".", "ssn", "where", "t3", ".", "name", "=", "value", "or", "t3", ".", "name", "=", "value"], "question": "Find the total hours of the projects that scientists named Michael Rogers or Carol Smith are assigned to.", "question_toks": ["Find", "the", "total", "hours", "of", "the", "projects", "that", "scientists", "named", "Michael", "Rogers", "or", "Carol", "Smith", "are", "assigned", "to", "."], "guid": 4248}}
{"text": "workshop: Workshop_ID, Date, Venue, Name; submission: Submission_ID, Scores, Author, College; Acceptance: Submission_ID, Workshop_ID, Result | How many submissions are there?", "sql": "SELECT count(*) FROM submission", "example": {"db_id": "workshop_paper", "query": "SELECT count(*) FROM submission", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "submission"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "submission"], "question": "How many submissions are there?", "question_toks": ["How", "many", "submissions", "are", "there", "?"], "guid": 4249}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the number of papers on VLDB conference .", "sql": "SELECT COUNT ( DISTINCT t2.title ) FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\";", "example": {"db_id": "academic", "query": "SELECT COUNT ( DISTINCT t2.title ) FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\";", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "t2.title", ")", "FROM", "publication", "AS", "t2", "JOIN", "conference", "AS", "t1", "ON", "t2.cid", "=", "t1.cid", "WHERE", "t1.name", "=", "``", "VLDB", "''", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "t2", ".", "title", ")", "from", "publication", "as", "t2", "join", "conference", "as", "t1", "on", "t2", ".", "cid", "=", "t1", ".", "cid", "where", "t1", ".", "name", "=", "value"], "question": "return me the number of papers on VLDB conference .", "question_toks": ["return", "me", "the", "number", "of", "papers", "on", "VLDB", "conference", "."], "guid": 4250}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the number of authors who have cooperated with \" H. V. Jagadish \" .", "sql": "SELECT COUNT ( DISTINCT t2.name ) FROM writes AS t3 JOIN author AS t2 ON t3.aid  =  t2.aid JOIN publication AS t5 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t5.pid JOIN author AS t1 ON t4.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\";", "example": {"db_id": "academic", "query": "SELECT COUNT ( DISTINCT t2.name ) FROM writes AS t3 JOIN author AS t2 ON t3.aid  =  t2.aid JOIN publication AS t5 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t5.pid JOIN author AS t1 ON t4.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\";", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "t2.name", ")", "FROM", "writes", "AS", "t3", "JOIN", "author", "AS", "t2", "ON", "t3.aid", "=", "t2.aid", "JOIN", "publication", "AS", "t5", "ON", "t3.pid", "=", "t5.pid", "JOIN", "writes", "AS", "t4", "ON", "t4.pid", "=", "t5.pid", "JOIN", "author", "AS", "t1", "ON", "t4.aid", "=", "t1.aid", "WHERE", "t1.name", "=", "``", "H.", "V.", "Jagadish", "''", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "t2", ".", "name", ")", "from", "writes", "as", "t3", "join", "author", "as", "t2", "on", "t3", ".", "aid", "=", "t2", ".", "aid", "join", "publication", "as", "t5", "on", "t3", ".", "pid", "=", "t5", ".", "pid", "join", "writes", "as", "t4", "on", "t4", ".", "pid", "=", "t5", ".", "pid", "join", "author", "as", "t1", "on", "t4", ".", "aid", "=", "t1", ".", "aid", "where", "t1", ".", "name", "=", "value"], "question": "return me the number of authors who have cooperated with \" H. V. Jagadish \" .", "question_toks": ["return", "me", "the", "number", "of", "authors", "who", "have", "cooperated", "with", "``", "H.", "V.", "Jagadish", "``", "."], "guid": 4251}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | List all academic papers on machine networks for one shot learning", "sql": "SELECT DISTINCT paperid FROM paper WHERE title  =  \"machine networks for one shot learning\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT paperid FROM paper WHERE title  =  \"machine networks for one shot learning\";", "query_toks": ["SELECT", "DISTINCT", "paperid", "FROM", "paper", "WHERE", "title", "=", "``", "machine", "networks", "for", "one", "shot", "learning", "''", ";"], "query_toks_no_value": ["select", "distinct", "paperid", "from", "paper", "where", "title", "=", "value"], "question": "List all academic papers on machine networks for one shot learning", "question_toks": ["List", "all", "academic", "papers", "on", "machine", "networks", "for", "one", "shot", "learning"], "guid": 4252}}
{"text": "Scientists: SSN, Name; Projects: Code, Name, Hours; AssignedTo: Scientist, Project | Find the number of scientists involved for the projects that require more than 300 hours.", "sql": "SELECT count(*) ,  T1.name FROM projects AS T1 JOIN assignedto AS T2 ON T1.code  =  T2.project WHERE T1.hours  >  300 GROUP BY T1.name", "example": {"db_id": "scientist_1", "query": "SELECT count(*) ,  T1.name FROM projects AS T1 JOIN assignedto AS T2 ON T1.code  =  T2.project WHERE T1.hours  >  300 GROUP BY T1.name", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "T1.name", "FROM", "projects", "AS", "T1", "JOIN", "assignedto", "AS", "T2", "ON", "T1.code", "=", "T2.project", "WHERE", "T1.hours", ">", "300", "GROUP", "BY", "T1.name"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "t1", ".", "name", "from", "projects", "as", "t1", "join", "assignedto", "as", "t2", "on", "t1", ".", "code", "=", "t2", ".", "project", "where", "t1", ".", "hours", ">", "value", "group", "by", "t1", ".", "name"], "question": "Find the number of scientists involved for the projects that require more than 300 hours.", "question_toks": ["Find", "the", "number", "of", "scientists", "involved", "for", "the", "projects", "that", "require", "more", "than", "300", "hours", "."], "guid": 4253}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the number of the organizations .", "sql": "SELECT COUNT ( DISTINCT name ) FROM organization;", "example": {"db_id": "academic", "query": "SELECT COUNT ( DISTINCT name ) FROM organization;", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "name", ")", "FROM", "organization", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "name", ")", "from", "organization"], "question": "return me the number of the organizations .", "question_toks": ["return", "me", "the", "number", "of", "the", "organizations", "."], "guid": 4254}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | how is the most prolific author in chi ?", "sql": "SELECT DISTINCT COUNT ( DISTINCT t2.paperid )  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  \"chi\" GROUP BY t1.authorid ORDER BY COUNT ( DISTINCT t2.paperid ) DESC;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( DISTINCT t2.paperid )  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  \"chi\" GROUP BY t1.authorid ORDER BY COUNT ( DISTINCT t2.paperid ) DESC;", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "DISTINCT", "t2.paperid", ")", ",", "t1.authorid", "FROM", "venue", "AS", "t3", "JOIN", "paper", "AS", "t2", "ON", "t3.venueid", "=", "t2.venueid", "JOIN", "writes", "AS", "t1", "ON", "t1.paperid", "=", "t2.paperid", "WHERE", "t3.venuename", "=", "``", "chi", "''", "GROUP", "BY", "t1.authorid", "ORDER", "BY", "COUNT", "(", "DISTINCT", "t2.paperid", ")", "DESC", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "distinct", "t2", ".", "paperid", ")", ",", "t1", ".", "authorid", "from", "venue", "as", "t3", "join", "paper", "as", "t2", "on", "t3", ".", "venueid", "=", "t2", ".", "venueid", "join", "writes", "as", "t1", "on", "t1", ".", "paperid", "=", "t2", ".", "paperid", "where", "t3", ".", "venuename", "=", "value", "group", "by", "t1", ".", "authorid", "order", "by", "count", "(", "distinct", "t2", ".", "paperid", ")", "desc"], "question": "how is the most prolific author in chi ?", "question_toks": ["how", "is", "the", "most", "prolific", "author", "in", "chi", "?"], "guid": 4255}}
{"text": "item: i_id, title; review: a_id, u_id, i_id, rating, rank; useracct: u_id, name; trust: source_u_id, target_u_id, trust | How many users are there?", "sql": "SELECT count(*) FROM useracct", "example": {"db_id": "epinions_1", "query": "SELECT count(*) FROM useracct", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "useracct"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "useracct"], "question": "How many users are there?", "question_toks": ["How", "many", "users", "are", "there", "?"], "guid": 4256}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | What year did Ye Cao publish the most papers", "sql": "SELECT DISTINCT COUNT ( DISTINCT t3.paperid )  ,  t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname LIKE \"Ye Cao\" GROUP BY t3.year ORDER BY COUNT ( DISTINCT t3.paperid ) DESC;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( DISTINCT t3.paperid )  ,  t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname LIKE \"Ye Cao\" GROUP BY t3.year ORDER BY COUNT ( DISTINCT t3.paperid ) DESC;", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "DISTINCT", "t3.paperid", ")", ",", "t3.year", "FROM", "writes", "AS", "t2", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "JOIN", "paper", "AS", "t3", "ON", "t2.paperid", "=", "t3.paperid", "WHERE", "t1.authorname", "LIKE", "``", "Ye", "Cao", "''", "GROUP", "BY", "t3.year", "ORDER", "BY", "COUNT", "(", "DISTINCT", "t3.paperid", ")", "DESC", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "distinct", "t3", ".", "paperid", ")", ",", "t3", ".", "year", "from", "writes", "as", "t2", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "join", "paper", "as", "t3", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "where", "t1", ".", "authorname", "like", "value", "group", "by", "t3", ".", "year", "order", "by", "count", "(", "distinct", "t3", ".", "paperid", ")", "desc"], "question": "What year did Ye Cao publish the most papers", "question_toks": ["What", "year", "did", "Ye", "Cao", "publish", "the", "most", "papers"], "guid": 4257}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the number of keywords in Databases area .", "sql": "SELECT COUNT ( DISTINCT t1.keyword ) FROM DOMAIN AS t3 JOIN domain_keyword AS t2 ON t3.did  =  t2.did JOIN keyword AS t1 ON t1.kid  =  t2.kid WHERE t3.name  =  \"Databases\";", "example": {"db_id": "academic", "query": "SELECT COUNT ( DISTINCT t1.keyword ) FROM DOMAIN AS t3 JOIN domain_keyword AS t2 ON t3.did  =  t2.did JOIN keyword AS t1 ON t1.kid  =  t2.kid WHERE t3.name  =  \"Databases\";", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "t1.keyword", ")", "FROM", "DOMAIN", "AS", "t3", "JOIN", "domain_keyword", "AS", "t2", "ON", "t3.did", "=", "t2.did", "JOIN", "keyword", "AS", "t1", "ON", "t1.kid", "=", "t2.kid", "WHERE", "t3.name", "=", "``", "Databases", "''", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "t1", ".", "keyword", ")", "from", "domain", "as", "t3", "join", "domain_keyword", "as", "t2", "on", "t3", ".", "did", "=", "t2", ".", "did", "join", "keyword", "as", "t1", "on", "t1", ".", "kid", "=", "t2", ".", "kid", "where", "t3", ".", "name", "=", "value"], "question": "return me the number of keywords in Databases area .", "question_toks": ["return", "me", "the", "number", "of", "keywords", "in", "Databases", "area", "."], "guid": 4258}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | in what journals does linda shapiro publish ?", "sql": "SELECT DISTINCT t2.journalid FROM paper AS t3 JOIN journal AS t2 ON t3.journalid  =  t2.journalid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"linda shapiro\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t2.journalid FROM paper AS t3 JOIN journal AS t2 ON t3.journalid  =  t2.journalid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"linda shapiro\";", "query_toks": ["SELECT", "DISTINCT", "t2.journalid", "FROM", "paper", "AS", "t3", "JOIN", "journal", "AS", "t2", "ON", "t3.journalid", "=", "t2.journalid", "JOIN", "writes", "AS", "t4", "ON", "t4.paperid", "=", "t3.paperid", "JOIN", "author", "AS", "t1", "ON", "t4.authorid", "=", "t1.authorid", "WHERE", "t1.authorname", "=", "``", "linda", "shapiro", "''", ";"], "query_toks_no_value": ["select", "distinct", "t2", ".", "journalid", "from", "paper", "as", "t3", "join", "journal", "as", "t2", "on", "t3", ".", "journalid", "=", "t2", ".", "journalid", "join", "writes", "as", "t4", "on", "t4", ".", "paperid", "=", "t3", ".", "paperid", "join", "author", "as", "t1", "on", "t4", ".", "authorid", "=", "t1", ".", "authorid", "where", "t1", ".", "authorname", "=", "value"], "question": "in what journals does linda shapiro publish ?", "question_toks": ["in", "what", "journals", "does", "linda", "shapiro", "publish", "?"], "guid": 4259}}
{"text": "publication: Publication_ID, Book_ID, Publisher, Publication_Date, Price; book: Book_ID, Title, Issues, Writer | How many distinct publication dates are there in our record?", "sql": "SELECT COUNT (DISTINCT Publication_Date) FROM publication", "example": {"db_id": "book_2", "query": "SELECT COUNT (DISTINCT Publication_Date) FROM publication", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "Publication_Date", ")", "FROM", "publication"], "query_toks_no_value": ["select", "count", "(", "distinct", "publication_date", ")", "from", "publication"], "question": "How many distinct publication dates are there in our record?", "question_toks": ["How", "many", "distinct", "publication", "dates", "are", "there", "in", "our", "record", "?"], "guid": 4260}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | How many citations does noah a smith have ?", "sql": "SELECT DISTINCT COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"noah a smith\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"noah a smith\";", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "t4.citedpaperid", ")", "FROM", "paper", "AS", "t3", "JOIN", "cite", "AS", "t4", "ON", "t3.paperid", "=", "t4.citedpaperid", "JOIN", "writes", "AS", "t2", "ON", "t2.paperid", "=", "t3.paperid", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "WHERE", "t1.authorname", "=", "``", "noah", "a", "smith", "''", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "t4", ".", "citedpaperid", ")", "from", "paper", "as", "t3", "join", "cite", "as", "t4", "on", "t3", ".", "paperid", "=", "t4", ".", "citedpaperid", "join", "writes", "as", "t2", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "where", "t1", ".", "authorname", "=", "value"], "question": "How many citations does noah a smith have ?", "question_toks": ["How", "many", "citations", "does", "noah", "a", "smith", "have", "?"], "guid": 4261}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | How many papers were written on Multiuser Receiver in the Decision Feedback this year ?", "sql": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Multiuser Receiver in the Decision Feedback\" AND t3.year  =  2016 GROUP BY t3.paperid HAVING COUNT ( DISTINCT t1.keyphrasename )  >  1;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Multiuser Receiver in the Decision Feedback\" AND t3.year  =  2016 GROUP BY t3.paperid HAVING COUNT ( DISTINCT t1.keyphrasename )  >  1;", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "WHERE", "t1.keyphrasename", "=", "``", "Multiuser", "Receiver", "in", "the", "Decision", "Feedback", "''", "AND", "t3.year", "=", "2016", "GROUP", "BY", "t3.paperid", "HAVING", "COUNT", "(", "DISTINCT", "t1.keyphrasename", ")", ">", "1", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "where", "t1", ".", "keyphrasename", "=", "value", "and", "t3", ".", "year", "=", "value", "group", "by", "t3", ".", "paperid", "having", "count", "(", "distinct", "t1", ".", "keyphrasename", ")", ">", "value"], "question": "How many papers were written on Multiuser Receiver in the Decision Feedback this year ?", "question_toks": ["How", "many", "papers", "were", "written", "on", "Multiuser", "Receiver", "in", "the", "Decision", "Feedback", "this", "year", "?"], "guid": 4262}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | how many papers use ImageNet ?", "sql": "SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname LIKE \"ImageNet\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname LIKE \"ImageNet\";", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "DISTINCT", "t3.paperid", ")", "FROM", "paperdataset", "AS", "t2", "JOIN", "dataset", "AS", "t1", "ON", "t2.datasetid", "=", "t1.datasetid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "WHERE", "t1.datasetname", "LIKE", "``", "ImageNet", "''", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "distinct", "t3", ".", "paperid", ")", "from", "paperdataset", "as", "t2", "join", "dataset", "as", "t1", "on", "t2", ".", "datasetid", "=", "t1", ".", "datasetid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "where", "t1", ".", "datasetname", "like", "value"], "question": "how many papers use ImageNet ?", "question_toks": ["how", "many", "papers", "use", "ImageNet", "?"], "guid": 4263}}
{"text": "item: i_id, title; review: a_id, u_id, i_id, rating, rank; useracct: u_id, name; trust: source_u_id, target_u_id, trust | Find the name of the user who gave the highest rating.", "sql": "SELECT T1.name FROM useracct AS T1 JOIN review AS T2 ON T1.u_id  =  T2.u_id ORDER BY T2.rating DESC LIMIT 1", "example": {"db_id": "epinions_1", "query": "SELECT T1.name FROM useracct AS T1 JOIN review AS T2 ON T1.u_id  =  T2.u_id ORDER BY T2.rating DESC LIMIT 1", "query_toks": ["SELECT", "T1.name", "FROM", "useracct", "AS", "T1", "JOIN", "review", "AS", "T2", "ON", "T1.u_id", "=", "T2.u_id", "ORDER", "BY", "T2.rating", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "useracct", "as", "t1", "join", "review", "as", "t2", "on", "t1", ".", "u_id", "=", "t2", ".", "u_id", "order", "by", "t2", ".", "rating", "desc", "limit", "value"], "question": "Find the name of the user who gave the highest rating.", "question_toks": ["Find", "the", "name", "of", "the", "user", "who", "gave", "the", "highest", "rating", "."], "guid": 4264}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | papers written by sharon goldwater", "sql": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";", "query_toks": ["SELECT", "DISTINCT", "t2.paperid", "FROM", "writes", "AS", "t2", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "WHERE", "t1.authorname", "=", "``", "sharon", "goldwater", "''", ";"], "query_toks_no_value": ["select", "distinct", "t2", ".", "paperid", "from", "writes", "as", "t2", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "where", "t1", ".", "authorname", "=", "value"], "question": "papers written by sharon goldwater", "question_toks": ["papers", "written", "by", "sharon", "goldwater"], "guid": 4265}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | number of papers in sigir conference", "sql": "SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"sigir\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"sigir\";", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "t1.paperid", ")", "FROM", "venue", "AS", "t2", "JOIN", "paper", "AS", "t1", "ON", "t2.venueid", "=", "t1.venueid", "WHERE", "t2.venuename", "=", "``", "sigir", "''", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "t1", ".", "paperid", ")", "from", "venue", "as", "t2", "join", "paper", "as", "t1", "on", "t2", ".", "venueid", "=", "t1", ".", "venueid", "where", "t2", ".", "venuename", "=", "value"], "question": "number of papers in sigir conference", "question_toks": ["number", "of", "papers", "in", "sigir", "conference"], "guid": 4266}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | papers related to Question Answering", "sql": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "WHERE", "t1.keyphrasename", "=", "``", "Question", "Answering", "''", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "where", "t1", ".", "keyphrasename", "=", "value"], "question": "papers related to Question Answering", "question_toks": ["papers", "related", "to", "Question", "Answering"], "guid": 4267}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | Papers by sharon goldwater", "sql": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";", "query_toks": ["SELECT", "DISTINCT", "t2.paperid", "FROM", "writes", "AS", "t2", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "WHERE", "t1.authorname", "=", "``", "sharon", "goldwater", "''", ";"], "query_toks_no_value": ["select", "distinct", "t2", ".", "paperid", "from", "writes", "as", "t2", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "where", "t1", ".", "authorname", "=", "value"], "question": "Papers by sharon goldwater", "question_toks": ["Papers", "by", "sharon", "goldwater"], "guid": 4268}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | What journals has Takashi Matsumoto published in ?", "sql": "SELECT DISTINCT t3.journalid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Takashi Matsumoto\" GROUP BY t3.journalid;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.journalid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Takashi Matsumoto\" GROUP BY t3.journalid;", "query_toks": ["SELECT", "DISTINCT", "t3.journalid", "FROM", "writes", "AS", "t2", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "JOIN", "paper", "AS", "t3", "ON", "t2.paperid", "=", "t3.paperid", "WHERE", "t1.authorname", "=", "``", "Takashi", "Matsumoto", "''", "GROUP", "BY", "t3.journalid", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "journalid", "from", "writes", "as", "t2", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "join", "paper", "as", "t3", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "where", "t1", ".", "authorname", "=", "value", "group", "by", "t3", ".", "journalid"], "question": "What journals has Takashi Matsumoto published in ?", "question_toks": ["What", "journals", "has", "Takashi", "Matsumoto", "published", "in", "?"], "guid": 4269}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | who published the most in semantic parsing after 2005 ?", "sql": "SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  \"semantic parsing\" AND t4.year  >  2005 GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  \"semantic parsing\" AND t4.year  >  2005 GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "t4.paperid", ")", ",", "t3.authorid", "FROM", "paperkeyphrase", "AS", "t1", "JOIN", "keyphrase", "AS", "t2", "ON", "t1.keyphraseid", "=", "t2.keyphraseid", "JOIN", "paper", "AS", "t4", "ON", "t4.paperid", "=", "t1.paperid", "JOIN", "writes", "AS", "t3", "ON", "t3.paperid", "=", "t4.paperid", "WHERE", "t2.keyphrasename", "=", "``", "semantic", "parsing", "''", "AND", "t4.year", ">", "2005", "GROUP", "BY", "t3.authorid", "ORDER", "BY", "COUNT", "(", "t4.paperid", ")", "DESC", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "t4", ".", "paperid", ")", ",", "t3", ".", "authorid", "from", "paperkeyphrase", "as", "t1", "join", "keyphrase", "as", "t2", "on", "t1", ".", "keyphraseid", "=", "t2", ".", "keyphraseid", "join", "paper", "as", "t4", "on", "t4", ".", "paperid", "=", "t1", ".", "paperid", "join", "writes", "as", "t3", "on", "t3", ".", "paperid", "=", "t4", ".", "paperid", "where", "t2", ".", "keyphrasename", "=", "value", "and", "t4", ".", "year", ">", "value", "group", "by", "t3", ".", "authorid", "order", "by", "count", "(", "t4", ".", "paperid", ")", "desc"], "question": "who published the most in semantic parsing after 2005 ?", "question_toks": ["who", "published", "the", "most", "in", "semantic", "parsing", "after", "2005", "?"], "guid": 4270}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | when were most NIPS papers published ?", "sql": "SELECT DISTINCT COUNT ( t1.paperid )  ,  t1.year FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"NIPS\" GROUP BY t1.year ORDER BY COUNT ( t1.paperid ) DESC;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( t1.paperid )  ,  t1.year FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"NIPS\" GROUP BY t1.year ORDER BY COUNT ( t1.paperid ) DESC;", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "t1.paperid", ")", ",", "t1.year", "FROM", "venue", "AS", "t2", "JOIN", "paper", "AS", "t1", "ON", "t2.venueid", "=", "t1.venueid", "WHERE", "t2.venuename", "=", "``", "NIPS", "''", "GROUP", "BY", "t1.year", "ORDER", "BY", "COUNT", "(", "t1.paperid", ")", "DESC", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "t1", ".", "paperid", ")", ",", "t1", ".", "year", "from", "venue", "as", "t2", "join", "paper", "as", "t1", "on", "t2", ".", "venueid", "=", "t1", ".", "venueid", "where", "t2", ".", "venuename", "=", "value", "group", "by", "t1", ".", "year", "order", "by", "count", "(", "t1", ".", "paperid", ")", "desc"], "question": "when were most NIPS papers published ?", "question_toks": ["when", "were", "most", "NIPS", "papers", "published", "?"], "guid": 4271}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | How many papers did David M. Blei publish at AISTATS ?", "sql": "SELECT DISTINCT COUNT ( t3.paperid ) FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"David M. Blei\" AND t4.venuename  =  \"AISTATS\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( t3.paperid ) FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"David M. Blei\" AND t4.venuename  =  \"AISTATS\";", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "t3.paperid", ")", "FROM", "venue", "AS", "t4", "JOIN", "paper", "AS", "t3", "ON", "t4.venueid", "=", "t3.venueid", "JOIN", "writes", "AS", "t2", "ON", "t2.paperid", "=", "t3.paperid", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "WHERE", "t1.authorname", "=", "``", "David", "M.", "Blei", "''", "AND", "t4.venuename", "=", "``", "AISTATS", "''", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "t3", ".", "paperid", ")", "from", "venue", "as", "t4", "join", "paper", "as", "t3", "on", "t4", ".", "venueid", "=", "t3", ".", "venueid", "join", "writes", "as", "t2", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "where", "t1", ".", "authorname", "=", "value", "and", "t4", ".", "venuename", "=", "value"], "question": "How many papers did David M. Blei publish at AISTATS ?", "question_toks": ["How", "many", "papers", "did", "David", "M.", "Blei", "publish", "at", "AISTATS", "?"], "guid": 4272}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | conferences that Daniella Coelho has published in", "sql": "SELECT DISTINCT t3.venueid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Daniella Coelho\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.venueid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Daniella Coelho\";", "query_toks": ["SELECT", "DISTINCT", "t3.venueid", "FROM", "writes", "AS", "t2", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "JOIN", "paper", "AS", "t3", "ON", "t2.paperid", "=", "t3.paperid", "WHERE", "t1.authorname", "=", "``", "Daniella", "Coelho", "''", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "venueid", "from", "writes", "as", "t2", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "join", "paper", "as", "t3", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "where", "t1", ".", "authorname", "=", "value"], "question": "conferences that Daniella Coelho has published in", "question_toks": ["conferences", "that", "Daniella", "Coelho", "has", "published", "in"], "guid": 4273}}
{"text": "Inst: instID, name, country; Authors: authID, lname, fname; Papers: paperID, title; Authorship: authID, instID, paperID, authOrder | How many papers have \"Atsushi Ohori\" published?", "sql": "SELECT count(*) FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  \"Atsushi\" AND t1.lname  =  \"Ohori\"", "example": {"db_id": "icfp_1", "query": "SELECT count(*) FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  \"Atsushi\" AND t1.lname  =  \"Ohori\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "authors", "AS", "t1", "JOIN", "authorship", "AS", "t2", "ON", "t1.authid", "=", "t2.authid", "JOIN", "papers", "AS", "t3", "ON", "t2.paperid", "=", "t3.paperid", "WHERE", "t1.fname", "=", "``", "Atsushi", "''", "AND", "t1.lname", "=", "``", "Ohori", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "authors", "as", "t1", "join", "authorship", "as", "t2", "on", "t1", ".", "authid", "=", "t2", ".", "authid", "join", "papers", "as", "t3", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "where", "t1", ".", "fname", "=", "value", "and", "t1", ".", "lname", "=", "value"], "question": "How many papers have \"Atsushi Ohori\" published?", "question_toks": ["How", "many", "papers", "have", "``", "Atsushi", "Ohori", "''", "published", "?"], "guid": 4274}}
{"text": "journal: Journal_ID, Date, Theme, Sales; editor: Editor_ID, Name, Age; journal_committee: Editor_ID, Journal_ID, Work_Type | List the names of editors in ascending order of age.", "sql": "SELECT Name FROM editor ORDER BY Age ASC", "example": {"db_id": "journal_committee", "query": "SELECT Name FROM editor ORDER BY Age ASC", "query_toks": ["SELECT", "Name", "FROM", "editor", "ORDER", "BY", "Age", "ASC"], "query_toks_no_value": ["select", "name", "from", "editor", "order", "by", "age", "asc"], "question": "List the names of editors in ascending order of age.", "question_toks": ["List", "the", "names", "of", "editors", "in", "ascending", "order", "of", "age", "."], "guid": 4275}}
{"text": "Document_Types: document_type_code, document_description; Documents: document_id, document_type_code, grant_id, sent_date, response_received_date, other_details; Grants: grant_id, organisation_id, grant_amount, grant_start_date, grant_end_date, other_details; Organisation_Types: organisation_type, organisation_type_description; Organisations: organisation_id, organisation_type, organisation_details; Project_Outcomes: project_id, outcome_code, outcome_details; Project_Staff: staff_id, project_id, role_code, date_from, date_to, other_details; Projects: project_id, organisation_id, project_details; Research_Outcomes: outcome_code, outcome_description; Research_Staff: staff_id, employer_organisation_id, staff_details | What is the type and id of the organization that has the most research staff?", "sql": "SELECT T1.organisation_type ,  T1.organisation_id FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "tracking_grants_for_research", "query": "SELECT T1.organisation_type ,  T1.organisation_id FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.organisation_type", ",", "T1.organisation_id", "FROM", "Organisations", "AS", "T1", "JOIN", "Research_Staff", "AS", "T2", "ON", "T1.organisation_id", "=", "T2.employer_organisation_id", "GROUP", "BY", "T1.organisation_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "organisation_type", ",", "t1", ".", "organisation_id", "from", "organisations", "as", "t1", "join", "research_staff", "as", "t2", "on", "t1", ".", "organisation_id", "=", "t2", ".", "employer_organisation_id", "group", "by", "t1", ".", "organisation_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the type and id of the organization that has the most research staff?", "question_toks": ["What", "is", "the", "type", "and", "id", "of", "the", "organization", "that", "has", "the", "most", "research", "staff", "?"], "guid": 4276}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | pldi 2015 conference", "sql": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"pldi\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"pldi\";", "query_toks": ["SELECT", "DISTINCT", "t1.paperid", "FROM", "venue", "AS", "t2", "JOIN", "paper", "AS", "t1", "ON", "t2.venueid", "=", "t1.venueid", "WHERE", "t1.year", "=", "2015", "AND", "t2.venuename", "=", "``", "pldi", "''", ";"], "query_toks_no_value": ["select", "distinct", "t1", ".", "paperid", "from", "venue", "as", "t2", "join", "paper", "as", "t1", "on", "t2", ".", "venueid", "=", "t1", ".", "venueid", "where", "t1", ".", "year", "=", "value", "and", "t2", ".", "venuename", "=", "value"], "question": "pldi 2015 conference", "question_toks": ["pldi", "2015", "conference"], "guid": 4277}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | How many papers were at nature communications 2015 ?", "sql": "SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"nature communications\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"nature communications\";", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "t1.paperid", ")", "FROM", "venue", "AS", "t2", "JOIN", "paper", "AS", "t1", "ON", "t2.venueid", "=", "t1.venueid", "WHERE", "t1.year", "=", "2015", "AND", "t2.venuename", "=", "``", "nature", "communications", "''", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "t1", ".", "paperid", ")", "from", "venue", "as", "t2", "join", "paper", "as", "t1", "on", "t2", ".", "venueid", "=", "t1", ".", "venueid", "where", "t1", ".", "year", "=", "value", "and", "t2", ".", "venuename", "=", "value"], "question": "How many papers were at nature communications 2015 ?", "question_toks": ["How", "many", "papers", "were", "at", "nature", "communications", "2015", "?"], "guid": 4278}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | What TAIL paper published in NIPS ?", "sql": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"TAIL\" AND t4.venuename  =  \"NIPS\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"TAIL\" AND t4.venuename  =  \"NIPS\";", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "JOIN", "venue", "AS", "t4", "ON", "t4.venueid", "=", "t3.venueid", "WHERE", "t1.keyphrasename", "=", "``", "TAIL", "''", "AND", "t4.venuename", "=", "``", "NIPS", "''", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "join", "venue", "as", "t4", "on", "t4", ".", "venueid", "=", "t3", ".", "venueid", "where", "t1", ".", "keyphrasename", "=", "value", "and", "t4", ".", "venuename", "=", "value"], "question": "What TAIL paper published in NIPS ?", "question_toks": ["What", "TAIL", "paper", "published", "in", "NIPS", "?"], "guid": 4279}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | What papers does Richard Ladner have in chi ?", "sql": "SELECT DISTINCT t3.paperid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Richard Ladner\" AND t4.venuename  =  \"chi\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Richard Ladner\" AND t4.venuename  =  \"chi\";", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "venue", "AS", "t4", "JOIN", "paper", "AS", "t3", "ON", "t4.venueid", "=", "t3.venueid", "JOIN", "writes", "AS", "t2", "ON", "t2.paperid", "=", "t3.paperid", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "WHERE", "t1.authorname", "=", "``", "Richard", "Ladner", "''", "AND", "t4.venuename", "=", "``", "chi", "''", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "venue", "as", "t4", "join", "paper", "as", "t3", "on", "t4", ".", "venueid", "=", "t3", ".", "venueid", "join", "writes", "as", "t2", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "where", "t1", ".", "authorname", "=", "value", "and", "t4", ".", "venuename", "=", "value"], "question": "What papers does Richard Ladner have in chi ?", "question_toks": ["What", "papers", "does", "Richard", "Ladner", "have", "in", "chi", "?"], "guid": 4280}}
{"text": "Inst: instID, name, country; Authors: authID, lname, fname; Papers: paperID, title; Authorship: authID, instID, paperID, authOrder | How many institutions are there?", "sql": "SELECT count(*) FROM inst", "example": {"db_id": "icfp_1", "query": "SELECT count(*) FROM inst", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "inst"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "inst"], "question": "How many institutions are there?", "question_toks": ["How", "many", "institutions", "are", "there", "?"], "guid": 4281}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | monte carlo simulation papers since 2011", "sql": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"monte carlo simulation\" AND t3.year  >  2011;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"monte carlo simulation\" AND t3.year  >  2011;", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "WHERE", "t1.keyphrasename", "=", "``", "monte", "carlo", "simulation", "''", "AND", "t3.year", ">", "2011", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "where", "t1", ".", "keyphrasename", "=", "value", "and", "t3", ".", "year", ">", "value"], "question": "monte carlo simulation papers since 2011", "question_toks": ["monte", "carlo", "simulation", "papers", "since", "2011"], "guid": 4282}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | List prominent scholars in syntactic parsing ?", "sql": "SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  \"syntactic parsing\" GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  \"syntactic parsing\" GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "t4.paperid", ")", ",", "t3.authorid", "FROM", "paperkeyphrase", "AS", "t1", "JOIN", "keyphrase", "AS", "t2", "ON", "t1.keyphraseid", "=", "t2.keyphraseid", "JOIN", "paper", "AS", "t4", "ON", "t4.paperid", "=", "t1.paperid", "JOIN", "writes", "AS", "t3", "ON", "t3.paperid", "=", "t4.paperid", "WHERE", "t2.keyphrasename", "=", "``", "syntactic", "parsing", "''", "GROUP", "BY", "t3.authorid", "ORDER", "BY", "COUNT", "(", "t4.paperid", ")", "DESC", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "t4", ".", "paperid", ")", ",", "t3", ".", "authorid", "from", "paperkeyphrase", "as", "t1", "join", "keyphrase", "as", "t2", "on", "t1", ".", "keyphraseid", "=", "t2", ".", "keyphraseid", "join", "paper", "as", "t4", "on", "t4", ".", "paperid", "=", "t1", ".", "paperid", "join", "writes", "as", "t3", "on", "t3", ".", "paperid", "=", "t4", ".", "paperid", "where", "t2", ".", "keyphrasename", "=", "value", "group", "by", "t3", ".", "authorid", "order", "by", "count", "(", "t4", ".", "paperid", ")", "desc"], "question": "List prominent scholars in syntactic parsing ?", "question_toks": ["List", "prominent", "scholars", "in", "syntactic", "parsing", "?"], "guid": 4283}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | list papers by subhasis chaudhuri", "sql": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"subhasis chaudhuri\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"subhasis chaudhuri\";", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "writes", "AS", "t2", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "JOIN", "paper", "AS", "t3", "ON", "t2.paperid", "=", "t3.paperid", "WHERE", "t1.authorname", "=", "``", "subhasis", "chaudhuri", "''", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "writes", "as", "t2", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "join", "paper", "as", "t3", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "where", "t1", ".", "authorname", "=", "value"], "question": "list papers by subhasis chaudhuri", "question_toks": ["list", "papers", "by", "subhasis", "chaudhuri"], "guid": 4284}}
{"text": "Scientists: SSN, Name; Projects: Code, Name, Hours; AssignedTo: Scientist, Project | Find the name of the project for which a scientist whose name contains \u2018Smith\u2019 is assigned to.", "sql": "SELECT T2.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T3.name LIKE '%Smith%'", "example": {"db_id": "scientist_1", "query": "SELECT T2.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T3.name LIKE '%Smith%'", "query_toks": ["SELECT", "T2.name", "FROM", "assignedto", "AS", "T1", "JOIN", "projects", "AS", "T2", "ON", "T1.project", "=", "T2.code", "JOIN", "scientists", "AS", "T3", "ON", "T1.scientist", "=", "T3.SSN", "WHERE", "T3.name", "LIKE", "'", "%", "Smith", "%", "'"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "assignedto", "as", "t1", "join", "projects", "as", "t2", "on", "t1", ".", "project", "=", "t2", ".", "code", "join", "scientists", "as", "t3", "on", "t1", ".", "scientist", "=", "t3", ".", "ssn", "where", "t3", ".", "name", "like", "value"], "question": "Find the name of the project for which a scientist whose name contains \u2018Smith\u2019 is assigned to.", "question_toks": ["Find", "the", "name", "of", "the", "project", "for", "which", "a", "scientist", "whose", "name", "contains", "\u2018Smith\u2019", "is", "assigned", "to", "."], "guid": 4285}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | Parsing papers using Jeopardy! Questions published at ACL 2014", "sql": "SELECT DISTINCT t2.paperid FROM paperdataset AS t3 JOIN dataset AS t5 ON t3.datasetid  =  t5.datasetid JOIN paperkeyphrase AS t4 ON t4.paperid  =  t3.paperid JOIN paper AS t2 ON t2.paperid  =  t3.paperid JOIN venue AS t6 ON t6.venueid  =  t2.venueid JOIN keyphrase AS t1 ON t4.keyphraseid  =  t1.keyphraseid WHERE t5.datasetname  =  \"Jeopardy! Questions\" AND t1.keyphrasename  =  \"Parsing\" AND t2.year  =  2014 AND t6.venuename  =  \"ACL\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t2.paperid FROM paperdataset AS t3 JOIN dataset AS t5 ON t3.datasetid  =  t5.datasetid JOIN paperkeyphrase AS t4 ON t4.paperid  =  t3.paperid JOIN paper AS t2 ON t2.paperid  =  t3.paperid JOIN venue AS t6 ON t6.venueid  =  t2.venueid JOIN keyphrase AS t1 ON t4.keyphraseid  =  t1.keyphraseid WHERE t5.datasetname  =  \"Jeopardy! Questions\" AND t1.keyphrasename  =  \"Parsing\" AND t2.year  =  2014 AND t6.venuename  =  \"ACL\";", "query_toks": ["SELECT", "DISTINCT", "t2.paperid", "FROM", "paperdataset", "AS", "t3", "JOIN", "dataset", "AS", "t5", "ON", "t3.datasetid", "=", "t5.datasetid", "JOIN", "paperkeyphrase", "AS", "t4", "ON", "t4.paperid", "=", "t3.paperid", "JOIN", "paper", "AS", "t2", "ON", "t2.paperid", "=", "t3.paperid", "JOIN", "venue", "AS", "t6", "ON", "t6.venueid", "=", "t2.venueid", "JOIN", "keyphrase", "AS", "t1", "ON", "t4.keyphraseid", "=", "t1.keyphraseid", "WHERE", "t5.datasetname", "=", "``", "Jeopardy", "!", "Questions", "''", "AND", "t1.keyphrasename", "=", "``", "Parsing", "''", "AND", "t2.year", "=", "2014", "AND", "t6.venuename", "=", "``", "ACL", "''", ";"], "query_toks_no_value": ["select", "distinct", "t2", ".", "paperid", "from", "paperdataset", "as", "t3", "join", "dataset", "as", "t5", "on", "t3", ".", "datasetid", "=", "t5", ".", "datasetid", "join", "paperkeyphrase", "as", "t4", "on", "t4", ".", "paperid", "=", "t3", ".", "paperid", "join", "paper", "as", "t2", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "join", "venue", "as", "t6", "on", "t6", ".", "venueid", "=", "t2", ".", "venueid", "join", "keyphrase", "as", "t1", "on", "t4", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "where", "t5", ".", "datasetname", "=", "value", "and", "t1", ".", "keyphrasename", "=", "value", "and", "t2", ".", "year", "=", "value", "and", "t6", ".", "venuename", "=", "value"], "question": "Parsing papers using Jeopardy! Questions published at ACL 2014", "question_toks": ["Parsing", "papers", "using", "Jeopardy", "!", "Questions", "published", "at", "ACL", "2014"], "guid": 4286}}
{"text": "item: i_id, title; review: a_id, u_id, i_id, rating, rank; useracct: u_id, name; trust: source_u_id, target_u_id, trust | Find the names of users who did not leave any review.", "sql": "SELECT name FROM useracct WHERE u_id NOT IN (SELECT u_id FROM review)", "example": {"db_id": "epinions_1", "query": "SELECT name FROM useracct WHERE u_id NOT IN (SELECT u_id FROM review)", "query_toks": ["SELECT", "name", "FROM", "useracct", "WHERE", "u_id", "NOT", "IN", "(", "SELECT", "u_id", "FROM", "review", ")"], "query_toks_no_value": ["select", "name", "from", "useracct", "where", "u_id", "not", "in", "(", "select", "u_id", "from", "review", ")"], "question": "Find the names of users who did not leave any review.", "question_toks": ["Find", "the", "names", "of", "users", "who", "did", "not", "leave", "any", "review", "."], "guid": 4287}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | In what years did Pedro Domingos publish a paper ?", "sql": "SELECT DISTINCT t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Pedro Domingos\" GROUP BY t3.year;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Pedro Domingos\" GROUP BY t3.year;", "query_toks": ["SELECT", "DISTINCT", "t3.year", "FROM", "writes", "AS", "t2", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "JOIN", "paper", "AS", "t3", "ON", "t2.paperid", "=", "t3.paperid", "WHERE", "t1.authorname", "=", "``", "Pedro", "Domingos", "''", "GROUP", "BY", "t3.year", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "year", "from", "writes", "as", "t2", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "join", "paper", "as", "t3", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "where", "t1", ".", "authorname", "=", "value", "group", "by", "t3", ".", "year"], "question": "In what years did Pedro Domingos publish a paper ?", "question_toks": ["In", "what", "years", "did", "Pedro", "Domingos", "publish", "a", "paper", "?"], "guid": 4288}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | what papers are published by Liwen Xiong in 2015", "sql": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Liwen Xiong\" AND t3.year  =  2015;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Liwen Xiong\" AND t3.year  =  2015;", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "writes", "AS", "t2", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "JOIN", "paper", "AS", "t3", "ON", "t2.paperid", "=", "t3.paperid", "WHERE", "t1.authorname", "=", "``", "Liwen", "Xiong", "''", "AND", "t3.year", "=", "2015", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "writes", "as", "t2", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "join", "paper", "as", "t3", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "where", "t1", ".", "authorname", "=", "value", "and", "t3", ".", "year", "=", "value"], "question": "what papers are published by Liwen Xiong in 2015", "question_toks": ["what", "papers", "are", "published", "by", "Liwen", "Xiong", "in", "2015"], "guid": 4289}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | What is the name of Eric C. Kerrigan 's Liquid Automatica paper ?", "sql": "SELECT DISTINCT t2.title FROM paperkeyphrase AS t5 JOIN keyphrase AS t3 ON t5.keyphraseid  =  t3.keyphraseid JOIN writes AS t4 ON t4.paperid  =  t5.paperid JOIN paper AS t2 ON t4.paperid  =  t2.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid JOIN venue AS t6 ON t6.venueid  =  t2.venueid WHERE t1.authorname LIKE \"Eric C. Kerrigan\" AND t3.keyphrasename  =  \"Liquid\" AND t6.venuename  =  \"Automatica\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t2.title FROM paperkeyphrase AS t5 JOIN keyphrase AS t3 ON t5.keyphraseid  =  t3.keyphraseid JOIN writes AS t4 ON t4.paperid  =  t5.paperid JOIN paper AS t2 ON t4.paperid  =  t2.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid JOIN venue AS t6 ON t6.venueid  =  t2.venueid WHERE t1.authorname LIKE \"Eric C. Kerrigan\" AND t3.keyphrasename  =  \"Liquid\" AND t6.venuename  =  \"Automatica\";", "query_toks": ["SELECT", "DISTINCT", "t2.title", "FROM", "paperkeyphrase", "AS", "t5", "JOIN", "keyphrase", "AS", "t3", "ON", "t5.keyphraseid", "=", "t3.keyphraseid", "JOIN", "writes", "AS", "t4", "ON", "t4.paperid", "=", "t5.paperid", "JOIN", "paper", "AS", "t2", "ON", "t4.paperid", "=", "t2.paperid", "JOIN", "author", "AS", "t1", "ON", "t4.authorid", "=", "t1.authorid", "JOIN", "venue", "AS", "t6", "ON", "t6.venueid", "=", "t2.venueid", "WHERE", "t1.authorname", "LIKE", "``", "Eric", "C.", "Kerrigan", "''", "AND", "t3.keyphrasename", "=", "``", "Liquid", "''", "AND", "t6.venuename", "=", "``", "Automatica", "''", ";"], "query_toks_no_value": ["select", "distinct", "t2", ".", "title", "from", "paperkeyphrase", "as", "t5", "join", "keyphrase", "as", "t3", "on", "t5", ".", "keyphraseid", "=", "t3", ".", "keyphraseid", "join", "writes", "as", "t4", "on", "t4", ".", "paperid", "=", "t5", ".", "paperid", "join", "paper", "as", "t2", "on", "t4", ".", "paperid", "=", "t2", ".", "paperid", "join", "author", "as", "t1", "on", "t4", ".", "authorid", "=", "t1", ".", "authorid", "join", "venue", "as", "t6", "on", "t6", ".", "venueid", "=", "t2", ".", "venueid", "where", "t1", ".", "authorname", "like", "value", "and", "t3", ".", "keyphrasename", "=", "value", "and", "t6", ".", "venuename", "=", "value"], "question": "What is the name of Eric C. Kerrigan 's Liquid Automatica paper ?", "question_toks": ["What", "is", "the", "name", "of", "Eric", "C.", "Kerrigan", "'s", "Liquid", "Automatica", "paper", "?"], "guid": 4290}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | how many papers has Mirella Lapata cited ?", "sql": "SELECT DISTINCT COUNT ( t3.citedpaperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN cite AS t3 ON t2.paperid  =  t3.citingpaperid WHERE t1.authorname  =  \"Mirella Lapata\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( t3.citedpaperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN cite AS t3 ON t2.paperid  =  t3.citingpaperid WHERE t1.authorname  =  \"Mirella Lapata\";", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "t3.citedpaperid", ")", "FROM", "writes", "AS", "t2", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "JOIN", "cite", "AS", "t3", "ON", "t2.paperid", "=", "t3.citingpaperid", "WHERE", "t1.authorname", "=", "``", "Mirella", "Lapata", "''", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "t3", ".", "citedpaperid", ")", "from", "writes", "as", "t2", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "join", "cite", "as", "t3", "on", "t2", ".", "paperid", "=", "t3", ".", "citingpaperid", "where", "t1", ".", "authorname", "=", "value"], "question": "how many papers has Mirella Lapata cited ?", "question_toks": ["how", "many", "papers", "has", "Mirella", "Lapata", "cited", "?"], "guid": 4291}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | What is the most recent paper of deep learning ?", "sql": "SELECT DISTINCT t3.paperid  ,  t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\" ORDER BY t3.year DESC;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid  ,  t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\" ORDER BY t3.year DESC;", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", ",", "t3.year", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "WHERE", "t1.keyphrasename", "=", "``", "deep", "learning", "''", "ORDER", "BY", "t3.year", "DESC", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", ",", "t3", ".", "year", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "where", "t1", ".", "keyphrasename", "=", "value", "order", "by", "t3", ".", "year", "desc"], "question": "What is the most recent paper of deep learning ?", "question_toks": ["What", "is", "the", "most", "recent", "paper", "of", "deep", "learning", "?"], "guid": 4292}}
{"text": "Inst: instID, name, country; Authors: authID, lname, fname; Papers: paperID, title; Authorship: authID, instID, paperID, authOrder | Which author has written the most papers? Find his or her last name.", "sql": "SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid GROUP BY t1.fname ,  t1.lname ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "icfp_1", "query": "SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid GROUP BY t1.fname ,  t1.lname ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "t1.lname", "FROM", "authors", "AS", "t1", "JOIN", "authorship", "AS", "t2", "ON", "t1.authid", "=", "t2.authid", "JOIN", "papers", "AS", "t3", "ON", "t2.paperid", "=", "t3.paperid", "GROUP", "BY", "t1.fname", ",", "t1.lname", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "lname", "from", "authors", "as", "t1", "join", "authorship", "as", "t2", "on", "t1", ".", "authid", "=", "t2", ".", "authid", "join", "papers", "as", "t3", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "group", "by", "t1", ".", "fname", ",", "t1", ".", "lname", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which author has written the most papers? Find his or her last name.", "question_toks": ["Which", "author", "has", "written", "the", "most", "papers", "?", "Find", "his", "or", "her", "last", "name", "."], "guid": 4293}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the area of PVLDB .", "sql": "SELECT t3.name FROM DOMAIN AS t3 JOIN domain_journal AS t1 ON t3.did  =  t1.did JOIN journal AS t2 ON t2.jid  =  t1.jid WHERE t2.name  =  \"PVLDB\";", "example": {"db_id": "academic", "query": "SELECT t3.name FROM DOMAIN AS t3 JOIN domain_journal AS t1 ON t3.did  =  t1.did JOIN journal AS t2 ON t2.jid  =  t1.jid WHERE t2.name  =  \"PVLDB\";", "query_toks": ["SELECT", "t3.name", "FROM", "DOMAIN", "AS", "t3", "JOIN", "domain_journal", "AS", "t1", "ON", "t3.did", "=", "t1.did", "JOIN", "journal", "AS", "t2", "ON", "t2.jid", "=", "t1.jid", "WHERE", "t2.name", "=", "``", "PVLDB", "''", ";"], "query_toks_no_value": ["select", "t3", ".", "name", "from", "domain", "as", "t3", "join", "domain_journal", "as", "t1", "on", "t3", ".", "did", "=", "t1", ".", "did", "join", "journal", "as", "t2", "on", "t2", ".", "jid", "=", "t1", ".", "jid", "where", "t2", ".", "name", "=", "value"], "question": "return me the area of PVLDB .", "question_toks": ["return", "me", "the", "area", "of", "PVLDB", "."], "guid": 4294}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the keyword, which have been contained by the most number of papers in PVLDB .", "sql": "SELECT t1.keyword FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t2 ON t2.pid  =  t4.pid JOIN journal AS t3 ON t2.jid  =  t3.jid WHERE t3.name  =  \"PVLDB\" GROUP BY t1.keyword ORDER BY COUNT ( DISTINCT t2.title ) DESC LIMIT 1;", "example": {"db_id": "academic", "query": "SELECT t1.keyword FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t2 ON t2.pid  =  t4.pid JOIN journal AS t3 ON t2.jid  =  t3.jid WHERE t3.name  =  \"PVLDB\" GROUP BY t1.keyword ORDER BY COUNT ( DISTINCT t2.title ) DESC LIMIT 1;", "query_toks": ["SELECT", "t1.keyword", "FROM", "publication_keyword", "AS", "t4", "JOIN", "keyword", "AS", "t1", "ON", "t4.kid", "=", "t1.kid", "JOIN", "publication", "AS", "t2", "ON", "t2.pid", "=", "t4.pid", "JOIN", "journal", "AS", "t3", "ON", "t2.jid", "=", "t3.jid", "WHERE", "t3.name", "=", "``", "PVLDB", "''", "GROUP", "BY", "t1.keyword", "ORDER", "BY", "COUNT", "(", "DISTINCT", "t2.title", ")", "DESC", "LIMIT", "1", ";"], "query_toks_no_value": ["select", "t1", ".", "keyword", "from", "publication_keyword", "as", "t4", "join", "keyword", "as", "t1", "on", "t4", ".", "kid", "=", "t1", ".", "kid", "join", "publication", "as", "t2", "on", "t2", ".", "pid", "=", "t4", ".", "pid", "join", "journal", "as", "t3", "on", "t2", ".", "jid", "=", "t3", ".", "jid", "where", "t3", ".", "name", "=", "value", "group", "by", "t1", ".", "keyword", "order", "by", "count", "(", "distinct", "t2", ".", "title", ")", "desc", "limit", "value"], "question": "return me the keyword, which have been contained by the most number of papers in PVLDB .", "question_toks": ["return", "me", "the", "keyword", ",", "which", "have", "been", "contained", "by", "the", "most", "number", "of", "papers", "in", "PVLDB", "."], "guid": 4295}}
{"text": "workshop: Workshop_ID, Date, Venue, Name; submission: Submission_ID, Scores, Author, College; Acceptance: Submission_ID, Workshop_ID, Result | Show the most common college of authors of submissions.", "sql": "SELECT College FROM submission GROUP BY College ORDER BY COUNT(*) DESC LIMIT 1", "example": {"db_id": "workshop_paper", "query": "SELECT College FROM submission GROUP BY College ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "College", "FROM", "submission", "GROUP", "BY", "College", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "college", "from", "submission", "group", "by", "college", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Show the most common college of authors of submissions.", "question_toks": ["Show", "the", "most", "common", "college", "of", "authors", "of", "submissions", "."], "guid": 4296}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | List of papers by subhasis chaudhuri", "sql": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"subhasis chaudhuri\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"subhasis chaudhuri\";", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "writes", "AS", "t2", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "JOIN", "paper", "AS", "t3", "ON", "t2.paperid", "=", "t3.paperid", "WHERE", "t1.authorname", "=", "``", "subhasis", "chaudhuri", "''", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "writes", "as", "t2", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "join", "paper", "as", "t3", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "where", "t1", ".", "authorname", "=", "value"], "question": "List of papers by subhasis chaudhuri", "question_toks": ["List", "of", "papers", "by", "subhasis", "chaudhuri"], "guid": 4297}}
{"text": "journal: Journal_ID, Date, Theme, Sales; editor: Editor_ID, Name, Age; journal_committee: Editor_ID, Journal_ID, Work_Type | What are the names and ages of editors?", "sql": "SELECT Name ,  Age FROM editor", "example": {"db_id": "journal_committee", "query": "SELECT Name ,  Age FROM editor", "query_toks": ["SELECT", "Name", ",", "Age", "FROM", "editor"], "query_toks_no_value": ["select", "name", ",", "age", "from", "editor"], "question": "What are the names and ages of editors?", "question_toks": ["What", "are", "the", "names", "and", "ages", "of", "editors", "?"], "guid": 4298}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | semantic parsing datasets", "sql": "SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  \"semantic parsing\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  \"semantic parsing\";", "query_toks": ["SELECT", "DISTINCT", "t2.datasetid", "FROM", "paperdataset", "AS", "t3", "JOIN", "dataset", "AS", "t2", "ON", "t3.datasetid", "=", "t2.datasetid", "JOIN", "paperkeyphrase", "AS", "t1", "ON", "t1.paperid", "=", "t3.paperid", "JOIN", "keyphrase", "AS", "t4", "ON", "t1.keyphraseid", "=", "t4.keyphraseid", "WHERE", "t4.keyphrasename", "=", "``", "semantic", "parsing", "''", ";"], "query_toks_no_value": ["select", "distinct", "t2", ".", "datasetid", "from", "paperdataset", "as", "t3", "join", "dataset", "as", "t2", "on", "t3", ".", "datasetid", "=", "t2", ".", "datasetid", "join", "paperkeyphrase", "as", "t1", "on", "t1", ".", "paperid", "=", "t3", ".", "paperid", "join", "keyphrase", "as", "t4", "on", "t1", ".", "keyphraseid", "=", "t4", ".", "keyphraseid", "where", "t4", ".", "keyphrasename", "=", "value"], "question": "semantic parsing datasets", "question_toks": ["semantic", "parsing", "datasets"], "guid": 4299}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | Does sharon goldwater have any papers published ?", "sql": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";", "query_toks": ["SELECT", "DISTINCT", "t2.paperid", "FROM", "writes", "AS", "t2", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "WHERE", "t1.authorname", "=", "``", "sharon", "goldwater", "''", ";"], "query_toks_no_value": ["select", "distinct", "t2", ".", "paperid", "from", "writes", "as", "t2", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "where", "t1", ".", "authorname", "=", "value"], "question": "Does sharon goldwater have any papers published ?", "question_toks": ["Does", "sharon", "goldwater", "have", "any", "papers", "published", "?"], "guid": 4300}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | number of citations of noah a smith", "sql": "SELECT DISTINCT COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"noah a smith\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"noah a smith\";", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "t4.citedpaperid", ")", "FROM", "paper", "AS", "t3", "JOIN", "cite", "AS", "t4", "ON", "t3.paperid", "=", "t4.citedpaperid", "JOIN", "writes", "AS", "t2", "ON", "t2.paperid", "=", "t3.paperid", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "WHERE", "t1.authorname", "=", "``", "noah", "a", "smith", "''", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "t4", ".", "citedpaperid", ")", "from", "paper", "as", "t3", "join", "cite", "as", "t4", "on", "t3", ".", "paperid", "=", "t4", ".", "citedpaperid", "join", "writes", "as", "t2", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "where", "t1", ".", "authorname", "=", "value"], "question": "number of citations of noah a smith", "question_toks": ["number", "of", "citations", "of", "noah", "a", "smith"], "guid": 4301}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | who authored papers at NIPS ?", "sql": "SELECT DISTINCT t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  \"NIPS\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  \"NIPS\";", "query_toks": ["SELECT", "DISTINCT", "t1.authorid", "FROM", "venue", "AS", "t3", "JOIN", "paper", "AS", "t2", "ON", "t3.venueid", "=", "t2.venueid", "JOIN", "writes", "AS", "t1", "ON", "t1.paperid", "=", "t2.paperid", "WHERE", "t3.venuename", "=", "``", "NIPS", "''", ";"], "query_toks_no_value": ["select", "distinct", "t1", ".", "authorid", "from", "venue", "as", "t3", "join", "paper", "as", "t2", "on", "t3", ".", "venueid", "=", "t2", ".", "venueid", "join", "writes", "as", "t1", "on", "t1", ".", "paperid", "=", "t2", ".", "paperid", "where", "t3", ".", "venuename", "=", "value"], "question": "who authored papers at NIPS ?", "question_toks": ["who", "authored", "papers", "at", "NIPS", "?"], "guid": 4302}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | large-scale datasets used in semantic parsing", "sql": "SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  \"semantic parsing\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  \"semantic parsing\";", "query_toks": ["SELECT", "DISTINCT", "t2.datasetid", "FROM", "paperdataset", "AS", "t3", "JOIN", "dataset", "AS", "t2", "ON", "t3.datasetid", "=", "t2.datasetid", "JOIN", "paperkeyphrase", "AS", "t1", "ON", "t1.paperid", "=", "t3.paperid", "JOIN", "keyphrase", "AS", "t4", "ON", "t1.keyphraseid", "=", "t4.keyphraseid", "WHERE", "t4.keyphrasename", "=", "``", "semantic", "parsing", "''", ";"], "query_toks_no_value": ["select", "distinct", "t2", ".", "datasetid", "from", "paperdataset", "as", "t3", "join", "dataset", "as", "t2", "on", "t3", ".", "datasetid", "=", "t2", ".", "datasetid", "join", "paperkeyphrase", "as", "t1", "on", "t1", ".", "paperid", "=", "t3", ".", "paperid", "join", "keyphrase", "as", "t4", "on", "t1", ".", "keyphraseid", "=", "t4", ".", "keyphraseid", "where", "t4", ".", "keyphrasename", "=", "value"], "question": "large-scale datasets used in semantic parsing", "question_toks": ["large-scale", "datasets", "used", "in", "semantic", "parsing"], "guid": 4303}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | pldi papers in 2015", "sql": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"pldi\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"pldi\";", "query_toks": ["SELECT", "DISTINCT", "t1.paperid", "FROM", "venue", "AS", "t2", "JOIN", "paper", "AS", "t1", "ON", "t2.venueid", "=", "t1.venueid", "WHERE", "t1.year", "=", "2015", "AND", "t2.venuename", "=", "``", "pldi", "''", ";"], "query_toks_no_value": ["select", "distinct", "t1", ".", "paperid", "from", "venue", "as", "t2", "join", "paper", "as", "t1", "on", "t2", ".", "venueid", "=", "t1", ".", "venueid", "where", "t1", ".", "year", "=", "value", "and", "t2", ".", "venuename", "=", "value"], "question": "pldi papers in 2015", "question_toks": ["pldi", "papers", "in", "2015"], "guid": 4304}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | How many papers were written on the convolutional neural networks this year ?", "sql": "SELECT DISTINCT COUNT ( t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"convolutional neural networks\" AND t3.year  =  2016;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"convolutional neural networks\" AND t3.year  =  2016;", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "t3.paperid", ")", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "WHERE", "t1.keyphrasename", "=", "``", "convolutional", "neural", "networks", "''", "AND", "t3.year", "=", "2016", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "t3", ".", "paperid", ")", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "where", "t1", ".", "keyphrasename", "=", "value", "and", "t3", ".", "year", "=", "value"], "question": "How many papers were written on the convolutional neural networks this year ?", "question_toks": ["How", "many", "papers", "were", "written", "on", "the", "convolutional", "neural", "networks", "this", "year", "?"], "guid": 4305}}
{"text": "book_club: book_club_id, Year, Author_or_Editor, Book_Title, Publisher, Category, Result; movie: movie_id, Title, Year, Director, Budget_million, Gross_worldwide; culture_company: Company_name, Type, Incorporated_in, Group_Equity_Shareholding, book_club_id, movie_id | Show all publishers and the number of books for each publisher.", "sql": "SELECT publisher ,  count(*) FROM book_club GROUP BY publisher", "example": {"db_id": "culture_company", "query": "SELECT publisher ,  count(*) FROM book_club GROUP BY publisher", "query_toks": ["SELECT", "publisher", ",", "count", "(", "*", ")", "FROM", "book_club", "GROUP", "BY", "publisher"], "query_toks_no_value": ["select", "publisher", ",", "count", "(", "*", ")", "from", "book_club", "group", "by", "publisher"], "question": "Show all publishers and the number of books for each publisher.", "question_toks": ["Show", "all", "publishers", "and", "the", "number", "of", "books", "for", "each", "publisher", "."], "guid": 4306}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | most published author at CVPR 2007", "sql": "SELECT DISTINCT COUNT ( t2.paperid )  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2007 AND t3.venuename  =  \"CVPR\" GROUP BY t1.authorid ORDER BY COUNT ( t2.paperid ) DESC;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( t2.paperid )  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2007 AND t3.venuename  =  \"CVPR\" GROUP BY t1.authorid ORDER BY COUNT ( t2.paperid ) DESC;", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "t2.paperid", ")", ",", "t1.authorid", "FROM", "venue", "AS", "t3", "JOIN", "paper", "AS", "t2", "ON", "t3.venueid", "=", "t2.venueid", "JOIN", "writes", "AS", "t1", "ON", "t1.paperid", "=", "t2.paperid", "WHERE", "t2.year", "=", "2007", "AND", "t3.venuename", "=", "``", "CVPR", "''", "GROUP", "BY", "t1.authorid", "ORDER", "BY", "COUNT", "(", "t2.paperid", ")", "DESC", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "t2", ".", "paperid", ")", ",", "t1", ".", "authorid", "from", "venue", "as", "t3", "join", "paper", "as", "t2", "on", "t3", ".", "venueid", "=", "t2", ".", "venueid", "join", "writes", "as", "t1", "on", "t1", ".", "paperid", "=", "t2", ".", "paperid", "where", "t2", ".", "year", "=", "value", "and", "t3", ".", "venuename", "=", "value", "group", "by", "t1", ".", "authorid", "order", "by", "count", "(", "t2", ".", "paperid", ")", "desc"], "question": "most published author at CVPR 2007", "question_toks": ["most", "published", "author", "at", "CVPR", "2007"], "guid": 4307}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | What is oren etzioni 's latest paper ?", "sql": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"oren etzioni\" ORDER BY t3.year DESC;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"oren etzioni\" ORDER BY t3.year DESC;", "query_toks": ["SELECT", "DISTINCT", "t2.paperid", "FROM", "writes", "AS", "t2", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "JOIN", "paper", "AS", "t3", "ON", "t2.paperid", "=", "t3.paperid", "WHERE", "t1.authorname", "=", "``", "oren", "etzioni", "''", "ORDER", "BY", "t3.year", "DESC", ";"], "query_toks_no_value": ["select", "distinct", "t2", ".", "paperid", "from", "writes", "as", "t2", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "join", "paper", "as", "t3", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "where", "t1", ".", "authorname", "=", "value", "order", "by", "t3", ".", "year", "desc"], "question": "What is oren etzioni 's latest paper ?", "question_toks": ["What", "is", "oren", "etzioni", "'s", "latest", "paper", "?"], "guid": 4308}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | When was benjamin mako hill 's first paper written ?", "sql": "SELECT DISTINCT COUNT ( t3.paperid )  ,  t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"benjamin mako hill\" GROUP BY t3.year ORDER BY t3.year;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( t3.paperid )  ,  t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"benjamin mako hill\" GROUP BY t3.year ORDER BY t3.year;", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "t3.paperid", ")", ",", "t3.year", "FROM", "writes", "AS", "t2", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "JOIN", "paper", "AS", "t3", "ON", "t2.paperid", "=", "t3.paperid", "WHERE", "t1.authorname", "=", "``", "benjamin", "mako", "hill", "''", "GROUP", "BY", "t3.year", "ORDER", "BY", "t3.year", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "t3", ".", "paperid", ")", ",", "t3", ".", "year", "from", "writes", "as", "t2", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "join", "paper", "as", "t3", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "where", "t1", ".", "authorname", "=", "value", "group", "by", "t3", ".", "year", "order", "by", "t3", ".", "year"], "question": "When was benjamin mako hill 's first paper written ?", "question_toks": ["When", "was", "benjamin", "mako", "hill", "'s", "first", "paper", "written", "?"], "guid": 4309}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the authors who have papers in PVLDB .", "sql": "SELECT t1.name FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t2.name  =  \"PVLDB\";", "example": {"db_id": "academic", "query": "SELECT t1.name FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t2.name  =  \"PVLDB\";", "query_toks": ["SELECT", "t1.name", "FROM", "publication", "AS", "t4", "JOIN", "journal", "AS", "t2", "ON", "t4.jid", "=", "t2.jid", "JOIN", "writes", "AS", "t3", "ON", "t3.pid", "=", "t4.pid", "JOIN", "author", "AS", "t1", "ON", "t3.aid", "=", "t1.aid", "WHERE", "t2.name", "=", "``", "PVLDB", "''", ";"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "publication", "as", "t4", "join", "journal", "as", "t2", "on", "t4", ".", "jid", "=", "t2", ".", "jid", "join", "writes", "as", "t3", "on", "t3", ".", "pid", "=", "t4", ".", "pid", "join", "author", "as", "t1", "on", "t3", ".", "aid", "=", "t1", ".", "aid", "where", "t2", ".", "name", "=", "value"], "question": "return me the authors who have papers in PVLDB .", "question_toks": ["return", "me", "the", "authors", "who", "have", "papers", "in", "PVLDB", "."], "guid": 4310}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | What conferences does Daniella Coelho submit to ?", "sql": "SELECT DISTINCT t3.venueid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Daniella Coelho\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.venueid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Daniella Coelho\";", "query_toks": ["SELECT", "DISTINCT", "t3.venueid", "FROM", "writes", "AS", "t2", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "JOIN", "paper", "AS", "t3", "ON", "t2.paperid", "=", "t3.paperid", "WHERE", "t1.authorname", "=", "``", "Daniella", "Coelho", "''", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "venueid", "from", "writes", "as", "t2", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "join", "paper", "as", "t3", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "where", "t1", ".", "authorname", "=", "value"], "question": "What conferences does Daniella Coelho submit to ?", "question_toks": ["What", "conferences", "does", "Daniella", "Coelho", "submit", "to", "?"], "guid": 4311}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | who published Parsing papers at acl 2012", "sql": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Parsing\" AND t3.year  =  2012 AND t4.venuename  =  \"acl\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Parsing\" AND t3.year  =  2012 AND t4.venuename  =  \"acl\";", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "JOIN", "venue", "AS", "t4", "ON", "t4.venueid", "=", "t3.venueid", "WHERE", "t1.keyphrasename", "=", "``", "Parsing", "''", "AND", "t3.year", "=", "2012", "AND", "t4.venuename", "=", "``", "acl", "''", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "join", "venue", "as", "t4", "on", "t4", ".", "venueid", "=", "t3", ".", "venueid", "where", "t1", ".", "keyphrasename", "=", "value", "and", "t3", ".", "year", "=", "value", "and", "t4", ".", "venuename", "=", "value"], "question": "who published Parsing papers at acl 2012", "question_toks": ["who", "published", "Parsing", "papers", "at", "acl", "2012"], "guid": 4312}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | most popular topics at NIPS 2015", "sql": "SELECT DISTINCT COUNT ( t3.paperid )  ,  t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t3.year  =  2015 AND t4.venuename  =  \"NIPS\" GROUP BY t1.keyphraseid ORDER BY COUNT ( t3.paperid ) DESC;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( t3.paperid )  ,  t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t3.year  =  2015 AND t4.venuename  =  \"NIPS\" GROUP BY t1.keyphraseid ORDER BY COUNT ( t3.paperid ) DESC;", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "t3.paperid", ")", ",", "t1.keyphraseid", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "JOIN", "venue", "AS", "t4", "ON", "t4.venueid", "=", "t3.venueid", "WHERE", "t3.year", "=", "2015", "AND", "t4.venuename", "=", "``", "NIPS", "''", "GROUP", "BY", "t1.keyphraseid", "ORDER", "BY", "COUNT", "(", "t3.paperid", ")", "DESC", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "t3", ".", "paperid", ")", ",", "t1", ".", "keyphraseid", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "join", "venue", "as", "t4", "on", "t4", ".", "venueid", "=", "t3", ".", "venueid", "where", "t3", ".", "year", "=", "value", "and", "t4", ".", "venuename", "=", "value", "group", "by", "t1", ".", "keyphraseid", "order", "by", "count", "(", "t3", ".", "paperid", ")", "desc"], "question": "most popular topics at NIPS 2015", "question_toks": ["most", "popular", "topics", "at", "NIPS", "2015"], "guid": 4313}}
{"text": "Inst: instID, name, country; Authors: authID, lname, fname; Papers: paperID, title; Authorship: authID, instID, paperID, authOrder | Which authors have written a paper with title containing the word \"Monadic\"? Return their last names.", "sql": "SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title LIKE \"%Monadic%\"", "example": {"db_id": "icfp_1", "query": "SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title LIKE \"%Monadic%\"", "query_toks": ["SELECT", "t1.lname", "FROM", "authors", "AS", "t1", "JOIN", "authorship", "AS", "t2", "ON", "t1.authid", "=", "t2.authid", "JOIN", "papers", "AS", "t3", "ON", "t2.paperid", "=", "t3.paperid", "WHERE", "t3.title", "LIKE", "``", "%", "Monadic", "%", "''"], "query_toks_no_value": ["select", "t1", ".", "lname", "from", "authors", "as", "t1", "join", "authorship", "as", "t2", "on", "t1", ".", "authid", "=", "t2", ".", "authid", "join", "papers", "as", "t3", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "where", "t3", ".", "title", "like", "value"], "question": "Which authors have written a paper with title containing the word \"Monadic\"? Return their last names.", "question_toks": ["Which", "authors", "have", "written", "a", "paper", "with", "title", "containing", "the", "word", "``", "Monadic", "''", "?", "Return", "their", "last", "names", "."], "guid": 4314}}
{"text": "Scientists: SSN, Name; Projects: Code, Name, Hours; AssignedTo: Scientist, Project | Find the number of scientists who are not assigned to any project.", "sql": "SELECT count(*) FROM scientists WHERE ssn NOT IN (SELECT scientist FROM AssignedTo)", "example": {"db_id": "scientist_1", "query": "SELECT count(*) FROM scientists WHERE ssn NOT IN (SELECT scientist FROM AssignedTo)", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "scientists", "WHERE", "ssn", "NOT", "IN", "(", "SELECT", "scientist", "FROM", "AssignedTo", ")"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "scientists", "where", "ssn", "not", "in", "(", "select", "scientist", "from", "assignedto", ")"], "question": "Find the number of scientists who are not assigned to any project.", "question_toks": ["Find", "the", "number", "of", "scientists", "who", "are", "not", "assigned", "to", "any", "project", "."], "guid": 4315}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | what paper has Richard Ladner published in chi journal ?", "sql": "SELECT DISTINCT t3.paperid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Richard Ladner\" AND t4.venuename  =  \"chi\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Richard Ladner\" AND t4.venuename  =  \"chi\";", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "venue", "AS", "t4", "JOIN", "paper", "AS", "t3", "ON", "t4.venueid", "=", "t3.venueid", "JOIN", "writes", "AS", "t2", "ON", "t2.paperid", "=", "t3.paperid", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "WHERE", "t1.authorname", "=", "``", "Richard", "Ladner", "''", "AND", "t4.venuename", "=", "``", "chi", "''", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "venue", "as", "t4", "join", "paper", "as", "t3", "on", "t4", ".", "venueid", "=", "t3", ".", "venueid", "join", "writes", "as", "t2", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "where", "t1", ".", "authorname", "=", "value", "and", "t4", ".", "venuename", "=", "value"], "question": "what paper has Richard Ladner published in chi journal ?", "question_toks": ["what", "paper", "has", "Richard", "Ladner", "published", "in", "chi", "journal", "?"], "guid": 4316}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | pldi best paper award 2015", "sql": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"pldi\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"pldi\";", "query_toks": ["SELECT", "DISTINCT", "t1.paperid", "FROM", "venue", "AS", "t2", "JOIN", "paper", "AS", "t1", "ON", "t2.venueid", "=", "t1.venueid", "WHERE", "t1.year", "=", "2015", "AND", "t2.venuename", "=", "``", "pldi", "''", ";"], "query_toks_no_value": ["select", "distinct", "t1", ".", "paperid", "from", "venue", "as", "t2", "join", "paper", "as", "t1", "on", "t2", ".", "venueid", "=", "t1", ".", "venueid", "where", "t1", ".", "year", "=", "value", "and", "t2", ".", "venuename", "=", "value"], "question": "pldi best paper award 2015", "question_toks": ["pldi", "best", "paper", "award", "2015"], "guid": 4317}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | conferences in 2013", "sql": "SELECT DISTINCT venueid FROM paper WHERE YEAR  =  2013;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT venueid FROM paper WHERE YEAR  =  2013;", "query_toks": ["SELECT", "DISTINCT", "venueid", "FROM", "paper", "WHERE", "YEAR", "=", "2013", ";"], "query_toks_no_value": ["select", "distinct", "venueid", "from", "paper", "where", "year", "=", "value"], "question": "conferences in 2013", "question_toks": ["conferences", "in", "2013"], "guid": 4318}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | How many papers were written on convolutional neural networks in 2016 ?", "sql": "SELECT DISTINCT COUNT ( t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"convolutional neural networks\" AND t3.year  =  2016;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"convolutional neural networks\" AND t3.year  =  2016;", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "t3.paperid", ")", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "WHERE", "t1.keyphrasename", "=", "``", "convolutional", "neural", "networks", "''", "AND", "t3.year", "=", "2016", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "t3", ".", "paperid", ")", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "where", "t1", ".", "keyphrasename", "=", "value", "and", "t3", ".", "year", "=", "value"], "question": "How many papers were written on convolutional neural networks in 2016 ?", "question_toks": ["How", "many", "papers", "were", "written", "on", "convolutional", "neural", "networks", "in", "2016", "?"], "guid": 4319}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | papers about Parsing that used Jeopardy! Questions and were published at ACL 2014", "sql": "SELECT DISTINCT t2.paperid FROM paperdataset AS t3 JOIN dataset AS t5 ON t3.datasetid  =  t5.datasetid JOIN paperkeyphrase AS t4 ON t4.paperid  =  t3.paperid JOIN paper AS t2 ON t2.paperid  =  t3.paperid JOIN venue AS t6 ON t6.venueid  =  t2.venueid JOIN keyphrase AS t1 ON t4.keyphraseid  =  t1.keyphraseid WHERE t5.datasetname  =  \"Jeopardy! Questions\" AND t1.keyphrasename  =  \"Parsing\" AND t2.year  =  2014 AND t6.venuename  =  \"ACL\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t2.paperid FROM paperdataset AS t3 JOIN dataset AS t5 ON t3.datasetid  =  t5.datasetid JOIN paperkeyphrase AS t4 ON t4.paperid  =  t3.paperid JOIN paper AS t2 ON t2.paperid  =  t3.paperid JOIN venue AS t6 ON t6.venueid  =  t2.venueid JOIN keyphrase AS t1 ON t4.keyphraseid  =  t1.keyphraseid WHERE t5.datasetname  =  \"Jeopardy! Questions\" AND t1.keyphrasename  =  \"Parsing\" AND t2.year  =  2014 AND t6.venuename  =  \"ACL\";", "query_toks": ["SELECT", "DISTINCT", "t2.paperid", "FROM", "paperdataset", "AS", "t3", "JOIN", "dataset", "AS", "t5", "ON", "t3.datasetid", "=", "t5.datasetid", "JOIN", "paperkeyphrase", "AS", "t4", "ON", "t4.paperid", "=", "t3.paperid", "JOIN", "paper", "AS", "t2", "ON", "t2.paperid", "=", "t3.paperid", "JOIN", "venue", "AS", "t6", "ON", "t6.venueid", "=", "t2.venueid", "JOIN", "keyphrase", "AS", "t1", "ON", "t4.keyphraseid", "=", "t1.keyphraseid", "WHERE", "t5.datasetname", "=", "``", "Jeopardy", "!", "Questions", "''", "AND", "t1.keyphrasename", "=", "``", "Parsing", "''", "AND", "t2.year", "=", "2014", "AND", "t6.venuename", "=", "``", "ACL", "''", ";"], "query_toks_no_value": ["select", "distinct", "t2", ".", "paperid", "from", "paperdataset", "as", "t3", "join", "dataset", "as", "t5", "on", "t3", ".", "datasetid", "=", "t5", ".", "datasetid", "join", "paperkeyphrase", "as", "t4", "on", "t4", ".", "paperid", "=", "t3", ".", "paperid", "join", "paper", "as", "t2", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "join", "venue", "as", "t6", "on", "t6", ".", "venueid", "=", "t2", ".", "venueid", "join", "keyphrase", "as", "t1", "on", "t4", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "where", "t5", ".", "datasetname", "=", "value", "and", "t1", ".", "keyphrasename", "=", "value", "and", "t2", ".", "year", "=", "value", "and", "t6", ".", "venuename", "=", "value"], "question": "papers about Parsing that used Jeopardy! Questions and were published at ACL 2014", "question_toks": ["papers", "about", "Parsing", "that", "used", "Jeopardy", "!", "Questions", "and", "were", "published", "at", "ACL", "2014"], "guid": 4320}}
{"text": "Document_Types: document_type_code, document_description; Documents: document_id, document_type_code, grant_id, sent_date, response_received_date, other_details; Grants: grant_id, organisation_id, grant_amount, grant_start_date, grant_end_date, other_details; Organisation_Types: organisation_type, organisation_type_description; Organisations: organisation_id, organisation_type, organisation_details; Project_Outcomes: project_id, outcome_code, outcome_details; Project_Staff: staff_id, project_id, role_code, date_from, date_to, other_details; Projects: project_id, organisation_id, project_details; Research_Outcomes: outcome_code, outcome_description; Research_Staff: staff_id, employer_organisation_id, staff_details | How many documents can one grant have at most? List the grant id and number.", "sql": "SELECT grant_id ,  count(*) FROM Documents GROUP BY grant_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "tracking_grants_for_research", "query": "SELECT grant_id ,  count(*) FROM Documents GROUP BY grant_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "grant_id", ",", "count", "(", "*", ")", "FROM", "Documents", "GROUP", "BY", "grant_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "grant_id", ",", "count", "(", "*", ")", "from", "documents", "group", "by", "grant_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "How many documents can one grant have at most? List the grant id and number.", "question_toks": ["How", "many", "documents", "can", "one", "grant", "have", "at", "most", "?", "List", "the", "grant", "id", "and", "number", "."], "guid": 4321}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | Which papers were accepted in pldi 2015 ?", "sql": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"pldi\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"pldi\";", "query_toks": ["SELECT", "DISTINCT", "t1.paperid", "FROM", "venue", "AS", "t2", "JOIN", "paper", "AS", "t1", "ON", "t2.venueid", "=", "t1.venueid", "WHERE", "t1.year", "=", "2015", "AND", "t2.venuename", "=", "``", "pldi", "''", ";"], "query_toks_no_value": ["select", "distinct", "t1", ".", "paperid", "from", "venue", "as", "t2", "join", "paper", "as", "t1", "on", "t2", ".", "venueid", "=", "t1", ".", "venueid", "where", "t1", ".", "year", "=", "value", "and", "t2", ".", "venuename", "=", "value"], "question": "Which papers were accepted in pldi 2015 ?", "question_toks": ["Which", "papers", "were", "accepted", "in", "pldi", "2015", "?"], "guid": 4322}}
{"text": "publication: Publication_ID, Book_ID, Publisher, Publication_Date, Price; book: Book_ID, Title, Issues, Writer | List the publication dates of publications with 3 lowest prices.", "sql": "SELECT Publication_Date FROM publication ORDER BY Price ASC LIMIT 3", "example": {"db_id": "book_2", "query": "SELECT Publication_Date FROM publication ORDER BY Price ASC LIMIT 3", "query_toks": ["SELECT", "Publication_Date", "FROM", "publication", "ORDER", "BY", "Price", "ASC", "LIMIT", "3"], "query_toks_no_value": ["select", "publication_date", "from", "publication", "order", "by", "price", "asc", "limit", "value"], "question": "List the publication dates of publications with 3 lowest prices.", "question_toks": ["List", "the", "publication", "dates", "of", "publications", "with", "3", "lowest", "prices", "."], "guid": 4323}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | Who are Noah A Smith 's coauthors ?", "sql": "SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Noah A Smith\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Noah A Smith\";", "query_toks": ["SELECT", "DISTINCT", "t1.authorid", "FROM", "writes", "AS", "t3", "JOIN", "author", "AS", "t2", "ON", "t3.authorid", "=", "t2.authorid", "JOIN", "writes", "AS", "t4", "ON", "t4.paperid", "=", "t3.paperid", "JOIN", "author", "AS", "t1", "ON", "t4.authorid", "=", "t1.authorid", "WHERE", "t2.authorname", "=", "``", "Noah", "A", "Smith", "''", ";"], "query_toks_no_value": ["select", "distinct", "t1", ".", "authorid", "from", "writes", "as", "t3", "join", "author", "as", "t2", "on", "t3", ".", "authorid", "=", "t2", ".", "authorid", "join", "writes", "as", "t4", "on", "t4", ".", "paperid", "=", "t3", ".", "paperid", "join", "author", "as", "t1", "on", "t4", ".", "authorid", "=", "t1", ".", "authorid", "where", "t2", ".", "authorname", "=", "value"], "question": "Who are Noah A Smith 's coauthors ?", "question_toks": ["Who", "are", "Noah", "A", "Smith", "'s", "coauthors", "?"], "guid": 4324}}
{"text": "event: Event_ID, Date, Venue, Name, Event_Attendance; journalist: journalist_ID, Name, Nationality, Age, Years_working; news_report: journalist_ID, Event_ID, Work_Type | List the names of journalists who have not reported any event.", "sql": "SELECT Name FROM journalist WHERE journalist_ID NOT IN (SELECT journalist_ID FROM news_report)", "example": {"db_id": "news_report", "query": "SELECT Name FROM journalist WHERE journalist_ID NOT IN (SELECT journalist_ID FROM news_report)", "query_toks": ["SELECT", "Name", "FROM", "journalist", "WHERE", "journalist_ID", "NOT", "IN", "(", "SELECT", "journalist_ID", "FROM", "news_report", ")"], "query_toks_no_value": ["select", "name", "from", "journalist", "where", "journalist_id", "not", "in", "(", "select", "journalist_id", "from", "news_report", ")"], "question": "List the names of journalists who have not reported any event.", "question_toks": ["List", "the", "names", "of", "journalists", "who", "have", "not", "reported", "any", "event", "."], "guid": 4325}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | What has Richard Ladner published at chi ?", "sql": "SELECT DISTINCT t3.paperid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Richard Ladner\" AND t4.venuename  =  \"chi\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Richard Ladner\" AND t4.venuename  =  \"chi\";", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "venue", "AS", "t4", "JOIN", "paper", "AS", "t3", "ON", "t4.venueid", "=", "t3.venueid", "JOIN", "writes", "AS", "t2", "ON", "t2.paperid", "=", "t3.paperid", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "WHERE", "t1.authorname", "=", "``", "Richard", "Ladner", "''", "AND", "t4.venuename", "=", "``", "chi", "''", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "venue", "as", "t4", "join", "paper", "as", "t3", "on", "t4", ".", "venueid", "=", "t3", ".", "venueid", "join", "writes", "as", "t2", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "where", "t1", ".", "authorname", "=", "value", "and", "t4", ".", "venuename", "=", "value"], "question": "What has Richard Ladner published at chi ?", "question_toks": ["What", "has", "Richard", "Ladner", "published", "at", "chi", "?"], "guid": 4326}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | Who publishes in sensor fusion ?", "sql": "SELECT DISTINCT t1.authorname FROM paperkeyphrase AS t2 JOIN keyphrase AS t4 ON t2.keyphraseid  =  t4.keyphraseid JOIN writes AS t3 ON t3.paperid  =  t2.paperid JOIN author AS t1 ON t3.authorid  =  t1.authorid WHERE t4.keyphrasename LIKE \"sensor fusion\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t1.authorname FROM paperkeyphrase AS t2 JOIN keyphrase AS t4 ON t2.keyphraseid  =  t4.keyphraseid JOIN writes AS t3 ON t3.paperid  =  t2.paperid JOIN author AS t1 ON t3.authorid  =  t1.authorid WHERE t4.keyphrasename LIKE \"sensor fusion\";", "query_toks": ["SELECT", "DISTINCT", "t1.authorname", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t4", "ON", "t2.keyphraseid", "=", "t4.keyphraseid", "JOIN", "writes", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "JOIN", "author", "AS", "t1", "ON", "t3.authorid", "=", "t1.authorid", "WHERE", "t4.keyphrasename", "LIKE", "``", "sensor", "fusion", "''", ";"], "query_toks_no_value": ["select", "distinct", "t1", ".", "authorname", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t4", "on", "t2", ".", "keyphraseid", "=", "t4", ".", "keyphraseid", "join", "writes", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "join", "author", "as", "t1", "on", "t3", ".", "authorid", "=", "t1", ".", "authorid", "where", "t4", ".", "keyphrasename", "like", "value"], "question": "Who publishes in sensor fusion ?", "question_toks": ["Who", "publishes", "in", "sensor", "fusion", "?"], "guid": 4327}}
{"text": "Document_Types: document_type_code, document_description; Documents: document_id, document_type_code, grant_id, sent_date, response_received_date, other_details; Grants: grant_id, organisation_id, grant_amount, grant_start_date, grant_end_date, other_details; Organisation_Types: organisation_type, organisation_type_description; Organisations: organisation_id, organisation_type, organisation_details; Project_Outcomes: project_id, outcome_code, outcome_details; Project_Staff: staff_id, project_id, role_code, date_from, date_to, other_details; Projects: project_id, organisation_id, project_details; Research_Outcomes: outcome_code, outcome_description; Research_Staff: staff_id, employer_organisation_id, staff_details | What are the details of the project that is producing both patents and papers as outcomes?", "sql": "SELECT T1.project_details FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id WHERE T2.outcome_code  =  'Paper' INTERSECT SELECT T1.project_details FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id WHERE T2.outcome_code  =  'Patent'", "example": {"db_id": "tracking_grants_for_research", "query": "SELECT T1.project_details FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id WHERE T2.outcome_code  =  'Paper' INTERSECT SELECT T1.project_details FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id WHERE T2.outcome_code  =  'Patent'", "query_toks": ["SELECT", "T1.project_details", "FROM", "Projects", "AS", "T1", "JOIN", "Project_outcomes", "AS", "T2", "ON", "T1.project_id", "=", "T2.project_id", "WHERE", "T2.outcome_code", "=", "'Paper", "'", "INTERSECT", "SELECT", "T1.project_details", "FROM", "Projects", "AS", "T1", "JOIN", "Project_outcomes", "AS", "T2", "ON", "T1.project_id", "=", "T2.project_id", "WHERE", "T2.outcome_code", "=", "'Patent", "'"], "query_toks_no_value": ["select", "t1", ".", "project_details", "from", "projects", "as", "t1", "join", "project_outcomes", "as", "t2", "on", "t1", ".", "project_id", "=", "t2", ".", "project_id", "where", "t2", ".", "outcome_code", "=", "value", "intersect", "select", "t1", ".", "project_details", "from", "projects", "as", "t1", "join", "project_outcomes", "as", "t2", "on", "t1", ".", "project_id", "=", "t2", ".", "project_id", "where", "t2", ".", "outcome_code", "=", "value"], "question": "What are the details of the project that is producing both patents and papers as outcomes?", "question_toks": ["What", "are", "the", "details", "of", "the", "project", "that", "is", "producing", "both", "patents", "and", "papers", "as", "outcomes", "?"], "guid": 4328}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the journal, which have the most number of papers by \" H. V. Jagadish \" .", "sql": "SELECT t2.name FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\" GROUP BY t2.name ORDER BY COUNT ( DISTINCT t4.title ) DESC LIMIT 1;", "example": {"db_id": "academic", "query": "SELECT t2.name FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\" GROUP BY t2.name ORDER BY COUNT ( DISTINCT t4.title ) DESC LIMIT 1;", "query_toks": ["SELECT", "t2.name", "FROM", "publication", "AS", "t4", "JOIN", "journal", "AS", "t2", "ON", "t4.jid", "=", "t2.jid", "JOIN", "writes", "AS", "t3", "ON", "t3.pid", "=", "t4.pid", "JOIN", "author", "AS", "t1", "ON", "t3.aid", "=", "t1.aid", "WHERE", "t1.name", "=", "``", "H.", "V.", "Jagadish", "''", "GROUP", "BY", "t2.name", "ORDER", "BY", "COUNT", "(", "DISTINCT", "t4.title", ")", "DESC", "LIMIT", "1", ";"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "publication", "as", "t4", "join", "journal", "as", "t2", "on", "t4", ".", "jid", "=", "t2", ".", "jid", "join", "writes", "as", "t3", "on", "t3", ".", "pid", "=", "t4", ".", "pid", "join", "author", "as", "t1", "on", "t3", ".", "aid", "=", "t1", ".", "aid", "where", "t1", ".", "name", "=", "value", "group", "by", "t2", ".", "name", "order", "by", "count", "(", "distinct", "t4", ".", "title", ")", "desc", "limit", "value"], "question": "return me the journal, which have the most number of papers by \" H. V. Jagadish \" .", "question_toks": ["return", "me", "the", "journal", ",", "which", "have", "the", "most", "number", "of", "papers", "by", "``", "H.", "V.", "Jagadish", "``", "."], "guid": 4329}}
{"text": "Scientists: SSN, Name; Projects: Code, Name, Hours; AssignedTo: Scientist, Project | How many scientists are there?", "sql": "SELECT count(*) FROM scientists", "example": {"db_id": "scientist_1", "query": "SELECT count(*) FROM scientists", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "scientists"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "scientists"], "question": "How many scientists are there?", "question_toks": ["How", "many", "scientists", "are", "there", "?"], "guid": 4330}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | most cited papers on parsing", "sql": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"parsing\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"parsing\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;", "query_toks": ["SELECT", "DISTINCT", "t4.citedpaperid", ",", "COUNT", "(", "t4.citedpaperid", ")", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "JOIN", "cite", "AS", "t4", "ON", "t3.paperid", "=", "t4.citedpaperid", "WHERE", "t1.keyphrasename", "=", "``", "parsing", "''", "GROUP", "BY", "t4.citedpaperid", "ORDER", "BY", "COUNT", "(", "t4.citedpaperid", ")", "DESC", ";"], "query_toks_no_value": ["select", "distinct", "t4", ".", "citedpaperid", ",", "count", "(", "t4", ".", "citedpaperid", ")", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "join", "cite", "as", "t4", "on", "t3", ".", "paperid", "=", "t4", ".", "citedpaperid", "where", "t1", ".", "keyphrasename", "=", "value", "group", "by", "t4", ".", "citedpaperid", "order", "by", "count", "(", "t4", ".", "citedpaperid", ")", "desc"], "question": "most cited papers on parsing", "question_toks": ["most", "cited", "papers", "on", "parsing"], "guid": 4331}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | What keywords are in papers by Luke Zettlemoyer ?", "sql": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";", "query_toks": ["SELECT", "DISTINCT", "t1.keyphraseid", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "JOIN", "writes", "AS", "t4", "ON", "t4.paperid", "=", "t3.paperid", "JOIN", "author", "AS", "t5", "ON", "t4.authorid", "=", "t5.authorid", "WHERE", "t5.authorname", "=", "``", "Luke", "Zettlemoyer", "''", ";"], "query_toks_no_value": ["select", "distinct", "t1", ".", "keyphraseid", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "join", "writes", "as", "t4", "on", "t4", ".", "paperid", "=", "t3", ".", "paperid", "join", "author", "as", "t5", "on", "t4", ".", "authorid", "=", "t5", ".", "authorid", "where", "t5", ".", "authorname", "=", "value"], "question": "What keywords are in papers by Luke Zettlemoyer ?", "question_toks": ["What", "keywords", "are", "in", "papers", "by", "Luke", "Zettlemoyer", "?"], "guid": 4332}}
{"text": "workshop: Workshop_ID, Date, Venue, Name; submission: Submission_ID, Scores, Author, College; Acceptance: Submission_ID, Workshop_ID, Result | Which college has the most authors with submissions?", "sql": "SELECT College FROM submission GROUP BY College ORDER BY COUNT(*) DESC LIMIT 1", "example": {"db_id": "workshop_paper", "query": "SELECT College FROM submission GROUP BY College ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "College", "FROM", "submission", "GROUP", "BY", "College", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "college", "from", "submission", "group", "by", "college", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which college has the most authors with submissions?", "question_toks": ["Which", "college", "has", "the", "most", "authors", "with", "submissions", "?"], "guid": 4333}}
{"text": "book_club: book_club_id, Year, Author_or_Editor, Book_Title, Publisher, Category, Result; movie: movie_id, Title, Year, Director, Budget_million, Gross_worldwide; culture_company: Company_name, Type, Incorporated_in, Group_Equity_Shareholding, book_club_id, movie_id | What are all the different book publishers?", "sql": "SELECT DISTINCT publisher FROM book_club", "example": {"db_id": "culture_company", "query": "SELECT DISTINCT publisher FROM book_club", "query_toks": ["SELECT", "DISTINCT", "publisher", "FROM", "book_club"], "query_toks_no_value": ["select", "distinct", "publisher", "from", "book_club"], "question": "What are all the different book publishers?", "question_toks": ["What", "are", "all", "the", "different", "book", "publishers", "?"], "guid": 4334}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | who else was on the paper with Ameet Soni and Ras Bodik ?", "sql": "SELECT DISTINCT t5.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN writes AS t5 ON t5.paperid  =  t4.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Ameet Soni\" AND t1.authorname  =  \"Ras Bodik\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t5.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN writes AS t5 ON t5.paperid  =  t4.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Ameet Soni\" AND t1.authorname  =  \"Ras Bodik\";", "query_toks": ["SELECT", "DISTINCT", "t5.authorid", "FROM", "writes", "AS", "t3", "JOIN", "author", "AS", "t2", "ON", "t3.authorid", "=", "t2.authorid", "JOIN", "writes", "AS", "t4", "ON", "t4.paperid", "=", "t3.paperid", "JOIN", "writes", "AS", "t5", "ON", "t5.paperid", "=", "t4.paperid", "JOIN", "author", "AS", "t1", "ON", "t4.authorid", "=", "t1.authorid", "WHERE", "t2.authorname", "=", "``", "Ameet", "Soni", "''", "AND", "t1.authorname", "=", "``", "Ras", "Bodik", "''", ";"], "query_toks_no_value": ["select", "distinct", "t5", ".", "authorid", "from", "writes", "as", "t3", "join", "author", "as", "t2", "on", "t3", ".", "authorid", "=", "t2", ".", "authorid", "join", "writes", "as", "t4", "on", "t4", ".", "paperid", "=", "t3", ".", "paperid", "join", "writes", "as", "t5", "on", "t5", ".", "paperid", "=", "t4", ".", "paperid", "join", "author", "as", "t1", "on", "t4", ".", "authorid", "=", "t1", ".", "authorid", "where", "t2", ".", "authorname", "=", "value", "and", "t1", ".", "authorname", "=", "value"], "question": "who else was on the paper with Ameet Soni and Ras Bodik ?", "question_toks": ["who", "else", "was", "on", "the", "paper", "with", "Ameet", "Soni", "and", "Ras", "Bodik", "?"], "guid": 4335}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | What is the highest cited paper by ohad shamir ?", "sql": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"ohad shamir\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"ohad shamir\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;", "query_toks": ["SELECT", "DISTINCT", "t4.citedpaperid", ",", "COUNT", "(", "t4.citedpaperid", ")", "FROM", "paper", "AS", "t3", "JOIN", "cite", "AS", "t4", "ON", "t3.paperid", "=", "t4.citedpaperid", "JOIN", "writes", "AS", "t2", "ON", "t2.paperid", "=", "t3.paperid", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "WHERE", "t1.authorname", "=", "``", "ohad", "shamir", "''", "GROUP", "BY", "t4.citedpaperid", "ORDER", "BY", "COUNT", "(", "t4.citedpaperid", ")", "DESC", ";"], "query_toks_no_value": ["select", "distinct", "t4", ".", "citedpaperid", ",", "count", "(", "t4", ".", "citedpaperid", ")", "from", "paper", "as", "t3", "join", "cite", "as", "t4", "on", "t3", ".", "paperid", "=", "t4", ".", "citedpaperid", "join", "writes", "as", "t2", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "where", "t1", ".", "authorname", "=", "value", "group", "by", "t4", ".", "citedpaperid", "order", "by", "count", "(", "t4", ".", "citedpaperid", ")", "desc"], "question": "What is the highest cited paper by ohad shamir ?", "question_toks": ["What", "is", "the", "highest", "cited", "paper", "by", "ohad", "shamir", "?"], "guid": 4336}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | Peter Mertens and Dina Barbian as co-authors", "sql": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "writes", "AS", "t3", "JOIN", "author", "AS", "t2", "ON", "t3.authorid", "=", "t2.authorid", "JOIN", "writes", "AS", "t4", "ON", "t4.paperid", "=", "t3.paperid", "JOIN", "author", "AS", "t1", "ON", "t4.authorid", "=", "t1.authorid", "WHERE", "t2.authorname", "=", "``", "Peter", "Mertens", "''", "AND", "t1.authorname", "=", "``", "Dina", "Barbian", "''", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "writes", "as", "t3", "join", "author", "as", "t2", "on", "t3", ".", "authorid", "=", "t2", ".", "authorid", "join", "writes", "as", "t4", "on", "t4", ".", "paperid", "=", "t3", ".", "paperid", "join", "author", "as", "t1", "on", "t4", ".", "authorid", "=", "t1", ".", "authorid", "where", "t2", ".", "authorname", "=", "value", "and", "t1", ".", "authorname", "=", "value"], "question": "Peter Mertens and Dina Barbian as co-authors", "question_toks": ["Peter", "Mertens", "and", "Dina", "Barbian", "as", "co-authors"], "guid": 4337}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | What were the papers published at pldi 2015 ?", "sql": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"pldi\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"pldi\";", "query_toks": ["SELECT", "DISTINCT", "t1.paperid", "FROM", "venue", "AS", "t2", "JOIN", "paper", "AS", "t1", "ON", "t2.venueid", "=", "t1.venueid", "WHERE", "t1.year", "=", "2015", "AND", "t2.venuename", "=", "``", "pldi", "''", ";"], "query_toks_no_value": ["select", "distinct", "t1", ".", "paperid", "from", "venue", "as", "t2", "join", "paper", "as", "t1", "on", "t2", ".", "venueid", "=", "t1", ".", "venueid", "where", "t1", ".", "year", "=", "value", "and", "t2", ".", "venuename", "=", "value"], "question": "What were the papers published at pldi 2015 ?", "question_toks": ["What", "were", "the", "papers", "published", "at", "pldi", "2015", "?"], "guid": 4338}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the number of organizations in Databases area .", "sql": "SELECT COUNT ( DISTINCT t2.name ) FROM domain_author AS t4 JOIN author AS t1 ON t4.aid  =  t1.aid JOIN DOMAIN AS t3 ON t3.did  =  t4.did JOIN organization AS t2 ON t2.oid  =  t1.oid WHERE t3.name  =  \"Databases\";", "example": {"db_id": "academic", "query": "SELECT COUNT ( DISTINCT t2.name ) FROM domain_author AS t4 JOIN author AS t1 ON t4.aid  =  t1.aid JOIN DOMAIN AS t3 ON t3.did  =  t4.did JOIN organization AS t2 ON t2.oid  =  t1.oid WHERE t3.name  =  \"Databases\";", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "t2.name", ")", "FROM", "domain_author", "AS", "t4", "JOIN", "author", "AS", "t1", "ON", "t4.aid", "=", "t1.aid", "JOIN", "DOMAIN", "AS", "t3", "ON", "t3.did", "=", "t4.did", "JOIN", "organization", "AS", "t2", "ON", "t2.oid", "=", "t1.oid", "WHERE", "t3.name", "=", "``", "Databases", "''", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "t2", ".", "name", ")", "from", "domain_author", "as", "t4", "join", "author", "as", "t1", "on", "t4", ".", "aid", "=", "t1", ".", "aid", "join", "domain", "as", "t3", "on", "t3", ".", "did", "=", "t4", ".", "did", "join", "organization", "as", "t2", "on", "t2", ".", "oid", "=", "t1", ".", "oid", "where", "t3", ".", "name", "=", "value"], "question": "return me the number of organizations in Databases area .", "question_toks": ["return", "me", "the", "number", "of", "organizations", "in", "Databases", "area", "."], "guid": 4339}}
{"text": "Scientists: SSN, Name; Projects: Code, Name, Hours; AssignedTo: Scientist, Project | What are the names of projects that have taken longer than the average number of hours for all projects?", "sql": "SELECT name FROM projects WHERE hours  >  (SELECT avg(hours) FROM projects)", "example": {"db_id": "scientist_1", "query": "SELECT name FROM projects WHERE hours  >  (SELECT avg(hours) FROM projects)", "query_toks": ["SELECT", "name", "FROM", "projects", "WHERE", "hours", ">", "(", "SELECT", "avg", "(", "hours", ")", "FROM", "projects", ")"], "query_toks_no_value": ["select", "name", "from", "projects", "where", "hours", ">", "(", "select", "avg", "(", "hours", ")", "from", "projects", ")"], "question": "What are the names of projects that have taken longer than the average number of hours for all projects?", "question_toks": ["What", "are", "the", "names", "of", "projects", "that", "have", "taken", "longer", "than", "the", "average", "number", "of", "hours", "for", "all", "projects", "?"], "guid": 4340}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | what datasets did jitendra malik use in his papers ?", "sql": "SELECT DISTINCT t2.datasetid FROM paper AS t3 JOIN paperdataset AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"jitendra malik\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t2.datasetid FROM paper AS t3 JOIN paperdataset AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"jitendra malik\";", "query_toks": ["SELECT", "DISTINCT", "t2.datasetid", "FROM", "paper", "AS", "t3", "JOIN", "paperdataset", "AS", "t2", "ON", "t3.paperid", "=", "t2.paperid", "JOIN", "writes", "AS", "t4", "ON", "t4.paperid", "=", "t3.paperid", "JOIN", "author", "AS", "t1", "ON", "t4.authorid", "=", "t1.authorid", "WHERE", "t1.authorname", "=", "``", "jitendra", "malik", "''", ";"], "query_toks_no_value": ["select", "distinct", "t2", ".", "datasetid", "from", "paper", "as", "t3", "join", "paperdataset", "as", "t2", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "join", "writes", "as", "t4", "on", "t4", ".", "paperid", "=", "t3", ".", "paperid", "join", "author", "as", "t1", "on", "t4", ".", "authorid", "=", "t1", ".", "authorid", "where", "t1", ".", "authorname", "=", "value"], "question": "what datasets did jitendra malik use in his papers ?", "question_toks": ["what", "datasets", "did", "jitendra", "malik", "use", "in", "his", "papers", "?"], "guid": 4341}}
{"text": "workshop: Workshop_ID, Date, Venue, Name; submission: Submission_ID, Scores, Author, College; Acceptance: Submission_ID, Workshop_ID, Result | Which authors have submitted to more than one workshop?", "sql": "SELECT T2.Author FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID GROUP BY T2.Author HAVING COUNT(DISTINCT T1.workshop_id)  >  1", "example": {"db_id": "workshop_paper", "query": "SELECT T2.Author FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID GROUP BY T2.Author HAVING COUNT(DISTINCT T1.workshop_id)  >  1", "query_toks": ["SELECT", "T2.Author", "FROM", "acceptance", "AS", "T1", "JOIN", "submission", "AS", "T2", "ON", "T1.Submission_ID", "=", "T2.Submission_ID", "GROUP", "BY", "T2.Author", "HAVING", "COUNT", "(", "DISTINCT", "T1.workshop_id", ")", ">", "1"], "query_toks_no_value": ["select", "t2", ".", "author", "from", "acceptance", "as", "t1", "join", "submission", "as", "t2", "on", "t1", ".", "submission_id", "=", "t2", ".", "submission_id", "group", "by", "t2", ".", "author", "having", "count", "(", "distinct", "t1", ".", "workshop_id", ")", ">", "value"], "question": "Which authors have submitted to more than one workshop?", "question_toks": ["Which", "authors", "have", "submitted", "to", "more", "than", "one", "workshop", "?"], "guid": 4342}}
{"text": "book_club: book_club_id, Year, Author_or_Editor, Book_Title, Publisher, Category, Result; movie: movie_id, Title, Year, Director, Budget_million, Gross_worldwide; culture_company: Company_name, Type, Incorporated_in, Group_Equity_Shareholding, book_club_id, movie_id | Show all publishers which do not have a book in 1989.", "sql": "SELECT publisher FROM book_club EXCEPT SELECT publisher FROM book_club WHERE YEAR  =  1989", "example": {"db_id": "culture_company", "query": "SELECT publisher FROM book_club EXCEPT SELECT publisher FROM book_club WHERE YEAR  =  1989", "query_toks": ["SELECT", "publisher", "FROM", "book_club", "EXCEPT", "SELECT", "publisher", "FROM", "book_club", "WHERE", "YEAR", "=", "1989"], "query_toks_no_value": ["select", "publisher", "from", "book_club", "except", "select", "publisher", "from", "book_club", "where", "year", "=", "value"], "question": "Show all publishers which do not have a book in 1989.", "question_toks": ["Show", "all", "publishers", "which", "do", "not", "have", "a", "book", "in", "1989", "."], "guid": 4343}}
{"text": "Document_Types: document_type_code, document_description; Documents: document_id, document_type_code, grant_id, sent_date, response_received_date, other_details; Grants: grant_id, organisation_id, grant_amount, grant_start_date, grant_end_date, other_details; Organisation_Types: organisation_type, organisation_type_description; Organisations: organisation_id, organisation_type, organisation_details; Project_Outcomes: project_id, outcome_code, outcome_details; Project_Staff: staff_id, project_id, role_code, date_from, date_to, other_details; Projects: project_id, organisation_id, project_details; Research_Outcomes: outcome_code, outcome_description; Research_Staff: staff_id, employer_organisation_id, staff_details | What are the send dates for all documents that have a grant amount of more than 5000 and are involved in research?", "sql": "SELECT T1.sent_date FROM documents AS T1 JOIN Grants AS T2 ON T1.grant_id  =  T2.grant_id JOIN Organisations AS T3 ON T2.organisation_id  =  T3.organisation_id JOIN organisation_Types AS T4 ON T3.organisation_type  =  T4.organisation_type WHERE T2.grant_amount  >  5000 AND T4.organisation_type_description  =  'Research'", "example": {"db_id": "tracking_grants_for_research", "query": "SELECT T1.sent_date FROM documents AS T1 JOIN Grants AS T2 ON T1.grant_id  =  T2.grant_id JOIN Organisations AS T3 ON T2.organisation_id  =  T3.organisation_id JOIN organisation_Types AS T4 ON T3.organisation_type  =  T4.organisation_type WHERE T2.grant_amount  >  5000 AND T4.organisation_type_description  =  'Research'", "query_toks": ["SELECT", "T1.sent_date", "FROM", "documents", "AS", "T1", "JOIN", "Grants", "AS", "T2", "ON", "T1.grant_id", "=", "T2.grant_id", "JOIN", "Organisations", "AS", "T3", "ON", "T2.organisation_id", "=", "T3.organisation_id", "JOIN", "organisation_Types", "AS", "T4", "ON", "T3.organisation_type", "=", "T4.organisation_type", "WHERE", "T2.grant_amount", ">", "5000", "AND", "T4.organisation_type_description", "=", "'Research", "'"], "query_toks_no_value": ["select", "t1", ".", "sent_date", "from", "documents", "as", "t1", "join", "grants", "as", "t2", "on", "t1", ".", "grant_id", "=", "t2", ".", "grant_id", "join", "organisations", "as", "t3", "on", "t2", ".", "organisation_id", "=", "t3", ".", "organisation_id", "join", "organisation_types", "as", "t4", "on", "t3", ".", "organisation_type", "=", "t4", ".", "organisation_type", "where", "t2", ".", "grant_amount", ">", "value", "and", "t4", ".", "organisation_type_description", "=", "value"], "question": "What are the send dates for all documents that have a grant amount of more than 5000 and are involved in research?", "question_toks": ["What", "are", "the", "send", "dates", "for", "all", "documents", "that", "have", "a", "grant", "amount", "of", "more", "than", "5000", "and", "are", "involved", "in", "research", "?"], "guid": 4344}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | the papers at eccv in 2014 using ImageNet dataset", "sql": "SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.datasetname  =  \"ImageNet\" AND t3.year  =  2014 AND t4.venuename  =  \"eccv\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.datasetname  =  \"ImageNet\" AND t3.year  =  2014 AND t4.venuename  =  \"eccv\";", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "paperdataset", "AS", "t2", "JOIN", "dataset", "AS", "t1", "ON", "t2.datasetid", "=", "t1.datasetid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "JOIN", "venue", "AS", "t4", "ON", "t4.venueid", "=", "t3.venueid", "WHERE", "t1.datasetname", "=", "``", "ImageNet", "''", "AND", "t3.year", "=", "2014", "AND", "t4.venuename", "=", "``", "eccv", "''", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "paperdataset", "as", "t2", "join", "dataset", "as", "t1", "on", "t2", ".", "datasetid", "=", "t1", ".", "datasetid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "join", "venue", "as", "t4", "on", "t4", ".", "venueid", "=", "t3", ".", "venueid", "where", "t1", ".", "datasetname", "=", "value", "and", "t3", ".", "year", "=", "value", "and", "t4", ".", "venuename", "=", "value"], "question": "the papers at eccv in 2014 using ImageNet dataset", "question_toks": ["the", "papers", "at", "eccv", "in", "2014", "using", "ImageNet", "dataset"], "guid": 4345}}
{"text": "Document_Types: document_type_code, document_description; Documents: document_id, document_type_code, grant_id, sent_date, response_received_date, other_details; Grants: grant_id, organisation_id, grant_amount, grant_start_date, grant_end_date, other_details; Organisation_Types: organisation_type, organisation_type_description; Organisations: organisation_id, organisation_type, organisation_details; Project_Outcomes: project_id, outcome_code, outcome_details; Project_Staff: staff_id, project_id, role_code, date_from, date_to, other_details; Projects: project_id, organisation_id, project_details; Research_Outcomes: outcome_code, outcome_description; Research_Staff: staff_id, employer_organisation_id, staff_details | What is the response received date for the document described as Regular that was granted more than 100 dollars?", "sql": "SELECT T1.response_received_date FROM Documents AS T1 JOIN Document_Types AS T2 ON T1.document_type_code  =  T2.document_type_code JOIN Grants AS T3 ON T1.grant_id  =  T3.grant_id WHERE T2.document_description  =  'Regular' OR T3.grant_amount  >  100", "example": {"db_id": "tracking_grants_for_research", "query": "SELECT T1.response_received_date FROM Documents AS T1 JOIN Document_Types AS T2 ON T1.document_type_code  =  T2.document_type_code JOIN Grants AS T3 ON T1.grant_id  =  T3.grant_id WHERE T2.document_description  =  'Regular' OR T3.grant_amount  >  100", "query_toks": ["SELECT", "T1.response_received_date", "FROM", "Documents", "AS", "T1", "JOIN", "Document_Types", "AS", "T2", "ON", "T1.document_type_code", "=", "T2.document_type_code", "JOIN", "Grants", "AS", "T3", "ON", "T1.grant_id", "=", "T3.grant_id", "WHERE", "T2.document_description", "=", "'Regular", "'", "OR", "T3.grant_amount", ">", "100"], "query_toks_no_value": ["select", "t1", ".", "response_received_date", "from", "documents", "as", "t1", "join", "document_types", "as", "t2", "on", "t1", ".", "document_type_code", "=", "t2", ".", "document_type_code", "join", "grants", "as", "t3", "on", "t1", ".", "grant_id", "=", "t3", ".", "grant_id", "where", "t2", ".", "document_description", "=", "value", "or", "t3", ".", "grant_amount", ">", "value"], "question": "What is the response received date for the document described as Regular that was granted more than 100 dollars?", "question_toks": ["What", "is", "the", "response", "received", "date", "for", "the", "document", "described", "as", "Regular", "that", "was", "granted", "more", "than", "100", "dollars", "?"], "guid": 4346}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | parsing papers that have the most citations", "sql": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"parsing\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"parsing\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;", "query_toks": ["SELECT", "DISTINCT", "t4.citedpaperid", ",", "COUNT", "(", "t4.citedpaperid", ")", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "JOIN", "cite", "AS", "t4", "ON", "t3.paperid", "=", "t4.citedpaperid", "WHERE", "t1.keyphrasename", "=", "``", "parsing", "''", "GROUP", "BY", "t4.citedpaperid", "ORDER", "BY", "COUNT", "(", "t4.citedpaperid", ")", "DESC", ";"], "query_toks_no_value": ["select", "distinct", "t4", ".", "citedpaperid", ",", "count", "(", "t4", ".", "citedpaperid", ")", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "join", "cite", "as", "t4", "on", "t3", ".", "paperid", "=", "t4", ".", "citedpaperid", "where", "t1", ".", "keyphrasename", "=", "value", "group", "by", "t4", ".", "citedpaperid", "order", "by", "count", "(", "t4", ".", "citedpaperid", ")", "desc"], "question": "parsing papers that have the most citations", "question_toks": ["parsing", "papers", "that", "have", "the", "most", "citations"], "guid": 4347}}
{"text": "Scientists: SSN, Name; Projects: Code, Name, Hours; AssignedTo: Scientist, Project | Find the name of scientists who are not assigned to any project.", "sql": "SELECT Name FROM scientists WHERE ssn NOT IN (SELECT scientist FROM AssignedTo)", "example": {"db_id": "scientist_1", "query": "SELECT Name FROM scientists WHERE ssn NOT IN (SELECT scientist FROM AssignedTo)", "query_toks": ["SELECT", "Name", "FROM", "scientists", "WHERE", "ssn", "NOT", "IN", "(", "SELECT", "scientist", "FROM", "AssignedTo", ")"], "query_toks_no_value": ["select", "name", "from", "scientists", "where", "ssn", "not", "in", "(", "select", "scientist", "from", "assignedto", ")"], "question": "Find the name of scientists who are not assigned to any project.", "question_toks": ["Find", "the", "name", "of", "scientists", "who", "are", "not", "assigned", "to", "any", "project", "."], "guid": 4348}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | what ACL papers have less than 5 citations ?", "sql": "SELECT DISTINCT t3.citingpaperid FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"ACL\" GROUP BY t3.citingpaperid HAVING COUNT ( DISTINCT t3.citedpaperid )  <  5;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.citingpaperid FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"ACL\" GROUP BY t3.citingpaperid HAVING COUNT ( DISTINCT t3.citedpaperid )  <  5;", "query_toks": ["SELECT", "DISTINCT", "t3.citingpaperid", "FROM", "paper", "AS", "t1", "JOIN", "cite", "AS", "t3", "ON", "t1.paperid", "=", "t3.citedpaperid", "JOIN", "venue", "AS", "t2", "ON", "t2.venueid", "=", "t1.venueid", "WHERE", "t2.venuename", "=", "``", "ACL", "''", "GROUP", "BY", "t3.citingpaperid", "HAVING", "COUNT", "(", "DISTINCT", "t3.citedpaperid", ")", "<", "5", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "citingpaperid", "from", "paper", "as", "t1", "join", "cite", "as", "t3", "on", "t1", ".", "paperid", "=", "t3", ".", "citedpaperid", "join", "venue", "as", "t2", "on", "t2", ".", "venueid", "=", "t1", ".", "venueid", "where", "t2", ".", "venuename", "=", "value", "group", "by", "t3", ".", "citingpaperid", "having", "count", "(", "distinct", "t3", ".", "citedpaperid", ")", "<", "value"], "question": "what ACL papers have less than 5 citations ?", "question_toks": ["what", "ACL", "papers", "have", "less", "than", "5", "citations", "?"], "guid": 4349}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | WebKB papers", "sql": "SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname  =  \"WebKB\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname  =  \"WebKB\";", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "paperdataset", "AS", "t2", "JOIN", "dataset", "AS", "t1", "ON", "t2.datasetid", "=", "t1.datasetid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "WHERE", "t1.datasetname", "=", "``", "WebKB", "''", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "paperdataset", "as", "t2", "join", "dataset", "as", "t1", "on", "t2", ".", "datasetid", "=", "t1", ".", "datasetid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "where", "t1", ".", "datasetname", "=", "value"], "question": "WebKB papers", "question_toks": ["WebKB", "papers"], "guid": 4350}}
{"text": "item: i_id, title; review: a_id, u_id, i_id, rating, rank; useracct: u_id, name; trust: source_u_id, target_u_id, trust | Find the name and id of the good with the highest average rank.", "sql": "SELECT T1.title ,  T1.i_id FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id GROUP BY T2.i_id ORDER BY avg(T2.rank) DESC LIMIT 1", "example": {"db_id": "epinions_1", "query": "SELECT T1.title ,  T1.i_id FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id GROUP BY T2.i_id ORDER BY avg(T2.rank) DESC LIMIT 1", "query_toks": ["SELECT", "T1.title", ",", "T1.i_id", "FROM", "item", "AS", "T1", "JOIN", "review", "AS", "T2", "ON", "T1.i_id", "=", "T2.i_id", "GROUP", "BY", "T2.i_id", "ORDER", "BY", "avg", "(", "T2.rank", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "title", ",", "t1", ".", "i_id", "from", "item", "as", "t1", "join", "review", "as", "t2", "on", "t1", ".", "i_id", "=", "t2", ".", "i_id", "group", "by", "t2", ".", "i_id", "order", "by", "avg", "(", "t2", ".", "rank", ")", "desc", "limit", "value"], "question": "Find the name and id of the good with the highest average rank.", "question_toks": ["Find", "the", "name", "and", "id", "of", "the", "good", "with", "the", "highest", "average", "rank", "."], "guid": 4351}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | how many parsing papers were published at ACL 2014 ?", "sql": "SELECT DISTINCT COUNT ( t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"parsing\" AND t3.year  =  2014 AND t4.venuename  =  \"ACL\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"parsing\" AND t3.year  =  2014 AND t4.venuename  =  \"ACL\";", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "t3.paperid", ")", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "JOIN", "venue", "AS", "t4", "ON", "t4.venueid", "=", "t3.venueid", "WHERE", "t1.keyphrasename", "=", "``", "parsing", "''", "AND", "t3.year", "=", "2014", "AND", "t4.venuename", "=", "``", "ACL", "''", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "t3", ".", "paperid", ")", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "join", "venue", "as", "t4", "on", "t4", ".", "venueid", "=", "t3", ".", "venueid", "where", "t1", ".", "keyphrasename", "=", "value", "and", "t3", ".", "year", "=", "value", "and", "t4", ".", "venuename", "=", "value"], "question": "how many parsing papers were published at ACL 2014 ?", "question_toks": ["how", "many", "parsing", "papers", "were", "published", "at", "ACL", "2014", "?"], "guid": 4352}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | character recognition papers before 2010", "sql": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"character recognition\" AND t3.year  <  2010;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"character recognition\" AND t3.year  <  2010;", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "WHERE", "t1.keyphrasename", "=", "``", "character", "recognition", "''", "AND", "t3.year", "<", "2010", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "where", "t1", ".", "keyphrasename", "=", "value", "and", "t3", ".", "year", "<", "value"], "question": "character recognition papers before 2010", "question_toks": ["character", "recognition", "papers", "before", "2010"], "guid": 4353}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the authors who have papers in the VLDB conference .", "sql": "SELECT t1.name FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t2.name  =  \"VLDB\";", "example": {"db_id": "academic", "query": "SELECT t1.name FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t2.name  =  \"VLDB\";", "query_toks": ["SELECT", "t1.name", "FROM", "publication", "AS", "t4", "JOIN", "conference", "AS", "t2", "ON", "t4.cid", "=", "t2.cid", "JOIN", "writes", "AS", "t3", "ON", "t3.pid", "=", "t4.pid", "JOIN", "author", "AS", "t1", "ON", "t3.aid", "=", "t1.aid", "WHERE", "t2.name", "=", "``", "VLDB", "''", ";"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "publication", "as", "t4", "join", "conference", "as", "t2", "on", "t4", ".", "cid", "=", "t2", ".", "cid", "join", "writes", "as", "t3", "on", "t3", ".", "pid", "=", "t4", ".", "pid", "join", "author", "as", "t1", "on", "t3", ".", "aid", "=", "t1", ".", "aid", "where", "t2", ".", "name", "=", "value"], "question": "return me the authors who have papers in the VLDB conference .", "question_toks": ["return", "me", "the", "authors", "who", "have", "papers", "in", "the", "VLDB", "conference", "."], "guid": 4354}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | Liwen Xiong publication 2015", "sql": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Liwen Xiong\" AND t3.year  =  2015;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Liwen Xiong\" AND t3.year  =  2015;", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "writes", "AS", "t2", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "JOIN", "paper", "AS", "t3", "ON", "t2.paperid", "=", "t3.paperid", "WHERE", "t1.authorname", "=", "``", "Liwen", "Xiong", "''", "AND", "t3.year", "=", "2015", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "writes", "as", "t2", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "join", "paper", "as", "t3", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "where", "t1", ".", "authorname", "=", "value", "and", "t3", ".", "year", "=", "value"], "question": "Liwen Xiong publication 2015", "question_toks": ["Liwen", "Xiong", "publication", "2015"], "guid": 4355}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | What papers have been written by Peter Mertens and Dina Barbian .", "sql": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "writes", "AS", "t3", "JOIN", "author", "AS", "t2", "ON", "t3.authorid", "=", "t2.authorid", "JOIN", "writes", "AS", "t4", "ON", "t4.paperid", "=", "t3.paperid", "JOIN", "author", "AS", "t1", "ON", "t4.authorid", "=", "t1.authorid", "WHERE", "t2.authorname", "=", "``", "Peter", "Mertens", "''", "AND", "t1.authorname", "=", "``", "Dina", "Barbian", "''", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "writes", "as", "t3", "join", "author", "as", "t2", "on", "t3", ".", "authorid", "=", "t2", ".", "authorid", "join", "writes", "as", "t4", "on", "t4", ".", "paperid", "=", "t3", ".", "paperid", "join", "author", "as", "t1", "on", "t4", ".", "authorid", "=", "t1", ".", "authorid", "where", "t2", ".", "authorname", "=", "value", "and", "t1", ".", "authorname", "=", "value"], "question": "What papers have been written by Peter Mertens and Dina Barbian .", "question_toks": ["What", "papers", "have", "been", "written", "by", "Peter", "Mertens", "and", "Dina", "Barbian", "."], "guid": 4356}}
{"text": "book_club: book_club_id, Year, Author_or_Editor, Book_Title, Publisher, Category, Result; movie: movie_id, Title, Year, Director, Budget_million, Gross_worldwide; culture_company: Company_name, Type, Incorporated_in, Group_Equity_Shareholding, book_club_id, movie_id | How many book clubs are there?", "sql": "SELECT count(*) FROM book_club", "example": {"db_id": "culture_company", "query": "SELECT count(*) FROM book_club", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "book_club"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "book_club"], "question": "How many book clubs are there?", "question_toks": ["How", "many", "book", "clubs", "are", "there", "?"], "guid": 4357}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | data sets for semantic parsing", "sql": "SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  \"semantic parsing\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  \"semantic parsing\";", "query_toks": ["SELECT", "DISTINCT", "t2.datasetid", "FROM", "paperdataset", "AS", "t3", "JOIN", "dataset", "AS", "t2", "ON", "t3.datasetid", "=", "t2.datasetid", "JOIN", "paperkeyphrase", "AS", "t1", "ON", "t1.paperid", "=", "t3.paperid", "JOIN", "keyphrase", "AS", "t4", "ON", "t1.keyphraseid", "=", "t4.keyphraseid", "WHERE", "t4.keyphrasename", "=", "``", "semantic", "parsing", "''", ";"], "query_toks_no_value": ["select", "distinct", "t2", ".", "datasetid", "from", "paperdataset", "as", "t3", "join", "dataset", "as", "t2", "on", "t3", ".", "datasetid", "=", "t2", ".", "datasetid", "join", "paperkeyphrase", "as", "t1", "on", "t1", ".", "paperid", "=", "t3", ".", "paperid", "join", "keyphrase", "as", "t4", "on", "t1", ".", "keyphraseid", "=", "t4", ".", "keyphraseid", "where", "t4", ".", "keyphrasename", "=", "value"], "question": "data sets for semantic parsing", "question_toks": ["data", "sets", "for", "semantic", "parsing"], "guid": 4358}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the papers by \" H. V. Jagadish \" on PVLDB .", "sql": "SELECT t4.title FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\" AND t2.name  =  \"PVLDB\";", "example": {"db_id": "academic", "query": "SELECT t4.title FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\" AND t2.name  =  \"PVLDB\";", "query_toks": ["SELECT", "t4.title", "FROM", "publication", "AS", "t4", "JOIN", "journal", "AS", "t2", "ON", "t4.jid", "=", "t2.jid", "JOIN", "writes", "AS", "t3", "ON", "t3.pid", "=", "t4.pid", "JOIN", "author", "AS", "t1", "ON", "t3.aid", "=", "t1.aid", "WHERE", "t1.name", "=", "``", "H.", "V.", "Jagadish", "''", "AND", "t2.name", "=", "``", "PVLDB", "''", ";"], "query_toks_no_value": ["select", "t4", ".", "title", "from", "publication", "as", "t4", "join", "journal", "as", "t2", "on", "t4", ".", "jid", "=", "t2", ".", "jid", "join", "writes", "as", "t3", "on", "t3", ".", "pid", "=", "t4", ".", "pid", "join", "author", "as", "t1", "on", "t3", ".", "aid", "=", "t1", ".", "aid", "where", "t1", ".", "name", "=", "value", "and", "t2", ".", "name", "=", "value"], "question": "return me the papers by \" H. V. Jagadish \" on PVLDB .", "question_toks": ["return", "me", "the", "papers", "by", "``", "H.", "V.", "Jagadish", "``", "on", "PVLDB", "."], "guid": 4359}}
{"text": "event: Event_ID, Date, Venue, Name, Event_Attendance; journalist: journalist_ID, Name, Nationality, Age, Years_working; news_report: journalist_ID, Event_ID, Work_Type | List the event venues and names that have the top 2 most number of people attended.", "sql": "SELECT venue ,  name FROM event ORDER BY Event_Attendance DESC LIMIT 2", "example": {"db_id": "news_report", "query": "SELECT venue ,  name FROM event ORDER BY Event_Attendance DESC LIMIT 2", "query_toks": ["SELECT", "venue", ",", "name", "FROM", "event", "ORDER", "BY", "Event_Attendance", "DESC", "LIMIT", "2"], "query_toks_no_value": ["select", "venue", ",", "name", "from", "event", "order", "by", "event_attendance", "desc", "limit", "value"], "question": "List the event venues and names that have the top 2 most number of people attended.", "question_toks": ["List", "the", "event", "venues", "and", "names", "that", "have", "the", "top", "2", "most", "number", "of", "people", "attended", "."], "guid": 4360}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | how is the most cited author in CVPR ?", "sql": "SELECT DISTINCT COUNT ( DISTINCT t4.citingpaperid )  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid JOIN cite AS t4 ON t1.paperid  =  t4.citedpaperid WHERE t3.venuename  =  \"CVPR\" GROUP BY t1.authorid ORDER BY COUNT ( DISTINCT t4.citingpaperid ) DESC;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( DISTINCT t4.citingpaperid )  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid JOIN cite AS t4 ON t1.paperid  =  t4.citedpaperid WHERE t3.venuename  =  \"CVPR\" GROUP BY t1.authorid ORDER BY COUNT ( DISTINCT t4.citingpaperid ) DESC;", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "DISTINCT", "t4.citingpaperid", ")", ",", "t1.authorid", "FROM", "venue", "AS", "t3", "JOIN", "paper", "AS", "t2", "ON", "t3.venueid", "=", "t2.venueid", "JOIN", "writes", "AS", "t1", "ON", "t1.paperid", "=", "t2.paperid", "JOIN", "cite", "AS", "t4", "ON", "t1.paperid", "=", "t4.citedpaperid", "WHERE", "t3.venuename", "=", "``", "CVPR", "''", "GROUP", "BY", "t1.authorid", "ORDER", "BY", "COUNT", "(", "DISTINCT", "t4.citingpaperid", ")", "DESC", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "distinct", "t4", ".", "citingpaperid", ")", ",", "t1", ".", "authorid", "from", "venue", "as", "t3", "join", "paper", "as", "t2", "on", "t3", ".", "venueid", "=", "t2", ".", "venueid", "join", "writes", "as", "t1", "on", "t1", ".", "paperid", "=", "t2", ".", "paperid", "join", "cite", "as", "t4", "on", "t1", ".", "paperid", "=", "t4", ".", "citedpaperid", "where", "t3", ".", "venuename", "=", "value", "group", "by", "t1", ".", "authorid", "order", "by", "count", "(", "distinct", "t4", ".", "citingpaperid", ")", "desc"], "question": "how is the most cited author in CVPR ?", "question_toks": ["how", "is", "the", "most", "cited", "author", "in", "CVPR", "?"], "guid": 4361}}
{"text": "item: i_id, title; review: a_id, u_id, i_id, rating, rank; useracct: u_id, name; trust: source_u_id, target_u_id, trust | Find the names of items whose rank is higher than 3 and whose average rating is above 5.", "sql": "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id WHERE T2.rank  >  3 INTERSECT SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id GROUP BY T2.i_id HAVING avg(T2.rating)  >  5", "example": {"db_id": "epinions_1", "query": "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id WHERE T2.rank  >  3 INTERSECT SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id GROUP BY T2.i_id HAVING avg(T2.rating)  >  5", "query_toks": ["SELECT", "T1.title", "FROM", "item", "AS", "T1", "JOIN", "review", "AS", "T2", "ON", "T1.i_id", "=", "T2.i_id", "WHERE", "T2.rank", ">", "3", "INTERSECT", "SELECT", "T1.title", "FROM", "item", "AS", "T1", "JOIN", "review", "AS", "T2", "ON", "T1.i_id", "=", "T2.i_id", "GROUP", "BY", "T2.i_id", "HAVING", "avg", "(", "T2.rating", ")", ">", "5"], "query_toks_no_value": ["select", "t1", ".", "title", "from", "item", "as", "t1", "join", "review", "as", "t2", "on", "t1", ".", "i_id", "=", "t2", ".", "i_id", "where", "t2", ".", "rank", ">", "value", "intersect", "select", "t1", ".", "title", "from", "item", "as", "t1", "join", "review", "as", "t2", "on", "t1", ".", "i_id", "=", "t2", ".", "i_id", "group", "by", "t2", ".", "i_id", "having", "avg", "(", "t2", ".", "rating", ")", ">", "value"], "question": "Find the names of items whose rank is higher than 3 and whose average rating is above 5.", "question_toks": ["Find", "the", "names", "of", "items", "whose", "rank", "is", "higher", "than", "3", "and", "whose", "average", "rating", "is", "above", "5", "."], "guid": 4362}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | papers written by authors Peter Mertens and Dina Barbian", "sql": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "writes", "AS", "t3", "JOIN", "author", "AS", "t2", "ON", "t3.authorid", "=", "t2.authorid", "JOIN", "writes", "AS", "t4", "ON", "t4.paperid", "=", "t3.paperid", "JOIN", "author", "AS", "t1", "ON", "t4.authorid", "=", "t1.authorid", "WHERE", "t2.authorname", "=", "``", "Peter", "Mertens", "''", "AND", "t1.authorname", "=", "``", "Dina", "Barbian", "''", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "writes", "as", "t3", "join", "author", "as", "t2", "on", "t3", ".", "authorid", "=", "t2", ".", "authorid", "join", "writes", "as", "t4", "on", "t4", ".", "paperid", "=", "t3", ".", "paperid", "join", "author", "as", "t1", "on", "t4", ".", "authorid", "=", "t1", ".", "authorid", "where", "t2", ".", "authorname", "=", "value", "and", "t1", ".", "authorname", "=", "value"], "question": "papers written by authors Peter Mertens and Dina Barbian", "question_toks": ["papers", "written", "by", "authors", "Peter", "Mertens", "and", "Dina", "Barbian"], "guid": 4363}}
{"text": "workshop: Workshop_ID, Date, Venue, Name; submission: Submission_ID, Scores, Author, College; Acceptance: Submission_ID, Workshop_ID, Result | Show the authors of submissions and the acceptance results of their submissions.", "sql": "SELECT T2.Author ,  T1.Result FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID", "example": {"db_id": "workshop_paper", "query": "SELECT T2.Author ,  T1.Result FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID", "query_toks": ["SELECT", "T2.Author", ",", "T1.Result", "FROM", "acceptance", "AS", "T1", "JOIN", "submission", "AS", "T2", "ON", "T1.Submission_ID", "=", "T2.Submission_ID"], "query_toks_no_value": ["select", "t2", ".", "author", ",", "t1", ".", "result", "from", "acceptance", "as", "t1", "join", "submission", "as", "t2", "on", "t1", ".", "submission_id", "=", "t2", ".", "submission_id"], "question": "Show the authors of submissions and the acceptance results of their submissions.", "question_toks": ["Show", "the", "authors", "of", "submissions", "and", "the", "acceptance", "results", "of", "their", "submissions", "."], "guid": 4364}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | What are some recent papers written in deep learning ?", "sql": "SELECT DISTINCT t3.paperid  ,  t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\" ORDER BY t3.year DESC;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid  ,  t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\" ORDER BY t3.year DESC;", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", ",", "t3.year", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "WHERE", "t1.keyphrasename", "=", "``", "deep", "learning", "''", "ORDER", "BY", "t3.year", "DESC", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", ",", "t3", ".", "year", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "where", "t1", ".", "keyphrasename", "=", "value", "order", "by", "t3", ".", "year", "desc"], "question": "What are some recent papers written in deep learning ?", "question_toks": ["What", "are", "some", "recent", "papers", "written", "in", "deep", "learning", "?"], "guid": 4365}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | what papers does oren etzioni cite", "sql": "SELECT DISTINCT t3.paperid FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citingpaperid JOIN writes AS t2 ON t2.paperid  =  t4.citedpaperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"oren etzioni\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citingpaperid JOIN writes AS t2 ON t2.paperid  =  t4.citedpaperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"oren etzioni\";", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "paper", "AS", "t3", "JOIN", "cite", "AS", "t4", "ON", "t3.paperid", "=", "t4.citingpaperid", "JOIN", "writes", "AS", "t2", "ON", "t2.paperid", "=", "t4.citedpaperid", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "WHERE", "t1.authorname", "=", "``", "oren", "etzioni", "''", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "paper", "as", "t3", "join", "cite", "as", "t4", "on", "t3", ".", "paperid", "=", "t4", ".", "citingpaperid", "join", "writes", "as", "t2", "on", "t2", ".", "paperid", "=", "t4", ".", "citedpaperid", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "where", "t1", ".", "authorname", "=", "value"], "question": "what papers does oren etzioni cite", "question_toks": ["what", "papers", "does", "oren", "etzioni", "cite"], "guid": 4366}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | who published at acl 2016 ?", "sql": "SELECT DISTINCT t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2016 AND t3.venuename  =  \"acl\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2016 AND t3.venuename  =  \"acl\";", "query_toks": ["SELECT", "DISTINCT", "t1.authorid", "FROM", "venue", "AS", "t3", "JOIN", "paper", "AS", "t2", "ON", "t3.venueid", "=", "t2.venueid", "JOIN", "writes", "AS", "t1", "ON", "t1.paperid", "=", "t2.paperid", "WHERE", "t2.year", "=", "2016", "AND", "t3.venuename", "=", "``", "acl", "''", ";"], "query_toks_no_value": ["select", "distinct", "t1", ".", "authorid", "from", "venue", "as", "t3", "join", "paper", "as", "t2", "on", "t3", ".", "venueid", "=", "t2", ".", "venueid", "join", "writes", "as", "t1", "on", "t1", ".", "paperid", "=", "t2", ".", "paperid", "where", "t2", ".", "year", "=", "value", "and", "t3", ".", "venuename", "=", "value"], "question": "who published at acl 2016 ?", "question_toks": ["who", "published", "at", "acl", "2016", "?"], "guid": 4367}}
{"text": "workshop: Workshop_ID, Date, Venue, Name; submission: Submission_ID, Scores, Author, College; Acceptance: Submission_ID, Workshop_ID, Result | How many workshops did each author submit to? Return the author name and the number of workshops.", "sql": "SELECT T2.Author ,  COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID GROUP BY T2.Author", "example": {"db_id": "workshop_paper", "query": "SELECT T2.Author ,  COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID GROUP BY T2.Author", "query_toks": ["SELECT", "T2.Author", ",", "COUNT", "(", "DISTINCT", "T1.workshop_id", ")", "FROM", "acceptance", "AS", "T1", "JOIN", "submission", "AS", "T2", "ON", "T1.Submission_ID", "=", "T2.Submission_ID", "GROUP", "BY", "T2.Author"], "query_toks_no_value": ["select", "t2", ".", "author", ",", "count", "(", "distinct", "t1", ".", "workshop_id", ")", "from", "acceptance", "as", "t1", "join", "submission", "as", "t2", "on", "t1", ".", "submission_id", "=", "t2", ".", "submission_id", "group", "by", "t2", ".", "author"], "question": "How many workshops did each author submit to? Return the author name and the number of workshops.", "question_toks": ["How", "many", "workshops", "did", "each", "author", "submit", "to", "?", "Return", "the", "author", "name", "and", "the", "number", "of", "workshops", "."], "guid": 4368}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the number of papers on VLDB conference after 2000 .", "sql": "SELECT COUNT ( DISTINCT t2.title ) FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\" AND t2.year  >  2000;", "example": {"db_id": "academic", "query": "SELECT COUNT ( DISTINCT t2.title ) FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\" AND t2.year  >  2000;", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "t2.title", ")", "FROM", "publication", "AS", "t2", "JOIN", "conference", "AS", "t1", "ON", "t2.cid", "=", "t1.cid", "WHERE", "t1.name", "=", "``", "VLDB", "''", "AND", "t2.year", ">", "2000", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "t2", ".", "title", ")", "from", "publication", "as", "t2", "join", "conference", "as", "t1", "on", "t2", ".", "cid", "=", "t1", ".", "cid", "where", "t1", ".", "name", "=", "value", "and", "t2", ".", "year", ">", "value"], "question": "return me the number of papers on VLDB conference after 2000 .", "question_toks": ["return", "me", "the", "number", "of", "papers", "on", "VLDB", "conference", "after", "2000", "."], "guid": 4369}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | Keyphrases used by Luke Zettlemoyer", "sql": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";", "query_toks": ["SELECT", "DISTINCT", "t1.keyphraseid", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "JOIN", "writes", "AS", "t4", "ON", "t4.paperid", "=", "t3.paperid", "JOIN", "author", "AS", "t5", "ON", "t4.authorid", "=", "t5.authorid", "WHERE", "t5.authorname", "=", "``", "Luke", "Zettlemoyer", "''", ";"], "query_toks_no_value": ["select", "distinct", "t1", ".", "keyphraseid", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "join", "writes", "as", "t4", "on", "t4", ".", "paperid", "=", "t3", ".", "paperid", "join", "author", "as", "t5", "on", "t4", ".", "authorid", "=", "t5", ".", "authorid", "where", "t5", ".", "authorname", "=", "value"], "question": "Keyphrases used by Luke Zettlemoyer", "question_toks": ["Keyphrases", "used", "by", "Luke", "Zettlemoyer"], "guid": 4370}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | what datasets were used by jitendra malik ?", "sql": "SELECT DISTINCT t2.datasetid FROM paper AS t3 JOIN paperdataset AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"jitendra malik\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t2.datasetid FROM paper AS t3 JOIN paperdataset AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"jitendra malik\";", "query_toks": ["SELECT", "DISTINCT", "t2.datasetid", "FROM", "paper", "AS", "t3", "JOIN", "paperdataset", "AS", "t2", "ON", "t3.paperid", "=", "t2.paperid", "JOIN", "writes", "AS", "t4", "ON", "t4.paperid", "=", "t3.paperid", "JOIN", "author", "AS", "t1", "ON", "t4.authorid", "=", "t1.authorid", "WHERE", "t1.authorname", "=", "``", "jitendra", "malik", "''", ";"], "query_toks_no_value": ["select", "distinct", "t2", ".", "datasetid", "from", "paper", "as", "t3", "join", "paperdataset", "as", "t2", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "join", "writes", "as", "t4", "on", "t4", ".", "paperid", "=", "t3", ".", "paperid", "join", "author", "as", "t1", "on", "t4", ".", "authorid", "=", "t1", ".", "authorid", "where", "t1", ".", "authorname", "=", "value"], "question": "what datasets were used by jitendra malik ?", "question_toks": ["what", "datasets", "were", "used", "by", "jitendra", "malik", "?"], "guid": 4371}}
{"text": "item: i_id, title; review: a_id, u_id, i_id, rating, rank; useracct: u_id, name; trust: source_u_id, target_u_id, trust | Find the average and maximum rating of all reviews.", "sql": "SELECT avg(rating) ,  max(rating) FROM review", "example": {"db_id": "epinions_1", "query": "SELECT avg(rating) ,  max(rating) FROM review", "query_toks": ["SELECT", "avg", "(", "rating", ")", ",", "max", "(", "rating", ")", "FROM", "review"], "query_toks_no_value": ["select", "avg", "(", "rating", ")", ",", "max", "(", "rating", ")", "from", "review"], "question": "Find the average and maximum rating of all reviews.", "question_toks": ["Find", "the", "average", "and", "maximum", "rating", "of", "all", "reviews", "."], "guid": 4372}}
{"text": "Document_Types: document_type_code, document_description; Documents: document_id, document_type_code, grant_id, sent_date, response_received_date, other_details; Grants: grant_id, organisation_id, grant_amount, grant_start_date, grant_end_date, other_details; Organisation_Types: organisation_type, organisation_type_description; Organisations: organisation_id, organisation_type, organisation_details; Project_Outcomes: project_id, outcome_code, outcome_details; Project_Staff: staff_id, project_id, role_code, date_from, date_to, other_details; Projects: project_id, organisation_id, project_details; Research_Outcomes: outcome_code, outcome_description; Research_Staff: staff_id, employer_organisation_id, staff_details | What is the total amount of grants given by each organisations? Also list the organisation id.", "sql": "SELECT sum(grant_amount) ,  organisation_id FROM Grants GROUP BY organisation_id", "example": {"db_id": "tracking_grants_for_research", "query": "SELECT sum(grant_amount) ,  organisation_id FROM Grants GROUP BY organisation_id", "query_toks": ["SELECT", "sum", "(", "grant_amount", ")", ",", "organisation_id", "FROM", "Grants", "GROUP", "BY", "organisation_id"], "query_toks_no_value": ["select", "sum", "(", "grant_amount", ")", ",", "organisation_id", "from", "grants", "group", "by", "organisation_id"], "question": "What is the total amount of grants given by each organisations? Also list the organisation id.", "question_toks": ["What", "is", "the", "total", "amount", "of", "grants", "given", "by", "each", "organisations", "?", "Also", "list", "the", "organisation", "id", "."], "guid": 4373}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | papers with at least 5 citations", "sql": "SELECT DISTINCT t2.citingpaperid FROM paper AS t1 JOIN cite AS t2 ON t1.paperid  =  t2.citedpaperid GROUP BY t2.citingpaperid HAVING COUNT ( DISTINCT t2.citedpaperid )  >=  5;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t2.citingpaperid FROM paper AS t1 JOIN cite AS t2 ON t1.paperid  =  t2.citedpaperid GROUP BY t2.citingpaperid HAVING COUNT ( DISTINCT t2.citedpaperid )  >=  5;", "query_toks": ["SELECT", "DISTINCT", "t2.citingpaperid", "FROM", "paper", "AS", "t1", "JOIN", "cite", "AS", "t2", "ON", "t1.paperid", "=", "t2.citedpaperid", "GROUP", "BY", "t2.citingpaperid", "HAVING", "COUNT", "(", "DISTINCT", "t2.citedpaperid", ")", ">", "=", "5", ";"], "query_toks_no_value": ["select", "distinct", "t2", ".", "citingpaperid", "from", "paper", "as", "t1", "join", "cite", "as", "t2", "on", "t1", ".", "paperid", "=", "t2", ".", "citedpaperid", "group", "by", "t2", ".", "citingpaperid", "having", "count", "(", "distinct", "t2", ".", "citedpaperid", ")", ">", "=", "value"], "question": "papers with at least 5 citations", "question_toks": ["papers", "with", "at", "least", "5", "citations"], "guid": 4374}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the papers by \" H. V. Jagadish \" after 2000 .", "sql": "SELECT t3.title FROM writes AS t2 JOIN author AS t1 ON t2.aid  =  t1.aid JOIN publication AS t3 ON t2.pid  =  t3.pid WHERE t1.name  =  \"H. V. Jagadish\" AND t3.year  >  2000;", "example": {"db_id": "academic", "query": "SELECT t3.title FROM writes AS t2 JOIN author AS t1 ON t2.aid  =  t1.aid JOIN publication AS t3 ON t2.pid  =  t3.pid WHERE t1.name  =  \"H. V. Jagadish\" AND t3.year  >  2000;", "query_toks": ["SELECT", "t3.title", "FROM", "writes", "AS", "t2", "JOIN", "author", "AS", "t1", "ON", "t2.aid", "=", "t1.aid", "JOIN", "publication", "AS", "t3", "ON", "t2.pid", "=", "t3.pid", "WHERE", "t1.name", "=", "``", "H.", "V.", "Jagadish", "''", "AND", "t3.year", ">", "2000", ";"], "query_toks_no_value": ["select", "t3", ".", "title", "from", "writes", "as", "t2", "join", "author", "as", "t1", "on", "t2", ".", "aid", "=", "t1", ".", "aid", "join", "publication", "as", "t3", "on", "t2", ".", "pid", "=", "t3", ".", "pid", "where", "t1", ".", "name", "=", "value", "and", "t3", ".", "year", ">", "value"], "question": "return me the papers by \" H. V. Jagadish \" after 2000 .", "question_toks": ["return", "me", "the", "papers", "by", "``", "H.", "V.", "Jagadish", "``", "after", "2000", "."], "guid": 4375}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the papers written by \" H. V. Jagadish \" and \" Divesh Srivastava \" with the most number of citations .", "sql": "SELECT t5.title FROM writes AS t3 JOIN author AS t2 ON t3.aid  =  t2.aid JOIN publication AS t5 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t5.pid JOIN author AS t1 ON t4.aid  =  t1.aid WHERE t2.name  =  \"Divesh Srivastava\" AND t1.name  =  \"H. V. Jagadish\" ORDER BY t5.citation_num DESC LIMIT 1;", "example": {"db_id": "academic", "query": "SELECT t5.title FROM writes AS t3 JOIN author AS t2 ON t3.aid  =  t2.aid JOIN publication AS t5 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t5.pid JOIN author AS t1 ON t4.aid  =  t1.aid WHERE t2.name  =  \"Divesh Srivastava\" AND t1.name  =  \"H. V. Jagadish\" ORDER BY t5.citation_num DESC LIMIT 1;", "query_toks": ["SELECT", "t5.title", "FROM", "writes", "AS", "t3", "JOIN", "author", "AS", "t2", "ON", "t3.aid", "=", "t2.aid", "JOIN", "publication", "AS", "t5", "ON", "t3.pid", "=", "t5.pid", "JOIN", "writes", "AS", "t4", "ON", "t4.pid", "=", "t5.pid", "JOIN", "author", "AS", "t1", "ON", "t4.aid", "=", "t1.aid", "WHERE", "t2.name", "=", "``", "Divesh", "Srivastava", "''", "AND", "t1.name", "=", "``", "H.", "V.", "Jagadish", "''", "ORDER", "BY", "t5.citation_num", "DESC", "LIMIT", "1", ";"], "query_toks_no_value": ["select", "t5", ".", "title", "from", "writes", "as", "t3", "join", "author", "as", "t2", "on", "t3", ".", "aid", "=", "t2", ".", "aid", "join", "publication", "as", "t5", "on", "t3", ".", "pid", "=", "t5", ".", "pid", "join", "writes", "as", "t4", "on", "t4", ".", "pid", "=", "t5", ".", "pid", "join", "author", "as", "t1", "on", "t4", ".", "aid", "=", "t1", ".", "aid", "where", "t2", ".", "name", "=", "value", "and", "t1", ".", "name", "=", "value", "order", "by", "t5", ".", "citation_num", "desc", "limit", "value"], "question": "return me the papers written by \" H. V. Jagadish \" and \" Divesh Srivastava \" with the most number of citations .", "question_toks": ["return", "me", "the", "papers", "written", "by", "``", "H.", "V.", "Jagadish", "``", "and", "``", "Divesh", "Srivastava", "``", "with", "the", "most", "number", "of", "citations", "."], "guid": 4376}}
{"text": "item: i_id, title; review: a_id, u_id, i_id, rating, rank; useracct: u_id, name; trust: source_u_id, target_u_id, trust | Find the number of items that did not receive any review.", "sql": "SELECT count(*) FROM item WHERE i_id NOT IN (SELECT i_id FROM review)", "example": {"db_id": "epinions_1", "query": "SELECT count(*) FROM item WHERE i_id NOT IN (SELECT i_id FROM review)", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "item", "WHERE", "i_id", "NOT", "IN", "(", "SELECT", "i_id", "FROM", "review", ")"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "item", "where", "i_id", "not", "in", "(", "select", "i_id", "from", "review", ")"], "question": "Find the number of items that did not receive any review.", "question_toks": ["Find", "the", "number", "of", "items", "that", "did", "not", "receive", "any", "review", "."], "guid": 4377}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | Which papers have Peter Mertens and Dina Barbian as co-authors ?", "sql": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "writes", "AS", "t3", "JOIN", "author", "AS", "t2", "ON", "t3.authorid", "=", "t2.authorid", "JOIN", "writes", "AS", "t4", "ON", "t4.paperid", "=", "t3.paperid", "JOIN", "author", "AS", "t1", "ON", "t4.authorid", "=", "t1.authorid", "WHERE", "t2.authorname", "=", "``", "Peter", "Mertens", "''", "AND", "t1.authorname", "=", "``", "Dina", "Barbian", "''", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "writes", "as", "t3", "join", "author", "as", "t2", "on", "t3", ".", "authorid", "=", "t2", ".", "authorid", "join", "writes", "as", "t4", "on", "t4", ".", "paperid", "=", "t3", ".", "paperid", "join", "author", "as", "t1", "on", "t4", ".", "authorid", "=", "t1", ".", "authorid", "where", "t2", ".", "authorname", "=", "value", "and", "t1", ".", "authorname", "=", "value"], "question": "Which papers have Peter Mertens and Dina Barbian as co-authors ?", "question_toks": ["Which", "papers", "have", "Peter", "Mertens", "and", "Dina", "Barbian", "as", "co-authors", "?"], "guid": 4378}}
{"text": "Inst: instID, name, country; Authors: authID, lname, fname; Papers: paperID, title; Authorship: authID, instID, paperID, authOrder | Who is the author of the paper titled \"Binders Unbound\"? Give me the last name.", "sql": "SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title  =  \"Binders Unbound\"", "example": {"db_id": "icfp_1", "query": "SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title  =  \"Binders Unbound\"", "query_toks": ["SELECT", "t1.lname", "FROM", "authors", "AS", "t1", "JOIN", "authorship", "AS", "t2", "ON", "t1.authid", "=", "t2.authid", "JOIN", "papers", "AS", "t3", "ON", "t2.paperid", "=", "t3.paperid", "WHERE", "t3.title", "=", "``", "Binders", "Unbound", "''"], "query_toks_no_value": ["select", "t1", ".", "lname", "from", "authors", "as", "t1", "join", "authorship", "as", "t2", "on", "t1", ".", "authid", "=", "t2", ".", "authid", "join", "papers", "as", "t3", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "where", "t3", ".", "title", "=", "value"], "question": "Who is the author of the paper titled \"Binders Unbound\"? Give me the last name.", "question_toks": ["Who", "is", "the", "author", "of", "the", "paper", "titled", "``", "Binders", "Unbound", "''", "?", "Give", "me", "the", "last", "name", "."], "guid": 4379}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | Where did li dong publish in 2016", "sql": "SELECT DISTINCT t3.venueid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"li dong\" AND t3.year  =  2016;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.venueid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"li dong\" AND t3.year  =  2016;", "query_toks": ["SELECT", "DISTINCT", "t3.venueid", "FROM", "writes", "AS", "t2", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "JOIN", "paper", "AS", "t3", "ON", "t2.paperid", "=", "t3.paperid", "WHERE", "t1.authorname", "=", "``", "li", "dong", "''", "AND", "t3.year", "=", "2016", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "venueid", "from", "writes", "as", "t2", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "join", "paper", "as", "t3", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "where", "t1", ".", "authorname", "=", "value", "and", "t3", ".", "year", "=", "value"], "question": "Where did li dong publish in 2016", "question_toks": ["Where", "did", "li", "dong", "publish", "in", "2016"], "guid": 4380}}
{"text": "Scientists: SSN, Name; Projects: Code, Name, Hours; AssignedTo: Scientist, Project | Find the name of the scientist who worked on both a project named 'Matter of Time' and a project named 'A Puzzling Parallax'.", "sql": "SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.name  =  'Matter of Time' INTERSECT SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.name  =  'A Puzzling Parallax'", "example": {"db_id": "scientist_1", "query": "SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.name  =  'Matter of Time' INTERSECT SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.name  =  'A Puzzling Parallax'", "query_toks": ["SELECT", "T3.name", "FROM", "assignedto", "AS", "T1", "JOIN", "projects", "AS", "T2", "ON", "T1.project", "=", "T2.code", "JOIN", "scientists", "AS", "T3", "ON", "T1.scientist", "=", "T3.SSN", "WHERE", "T2.name", "=", "'Matter", "of", "Time", "'", "INTERSECT", "SELECT", "T3.name", "FROM", "assignedto", "AS", "T1", "JOIN", "projects", "AS", "T2", "ON", "T1.project", "=", "T2.code", "JOIN", "scientists", "AS", "T3", "ON", "T1.scientist", "=", "T3.SSN", "WHERE", "T2.name", "=", "'A", "Puzzling", "Parallax", "'"], "query_toks_no_value": ["select", "t3", ".", "name", "from", "assignedto", "as", "t1", "join", "projects", "as", "t2", "on", "t1", ".", "project", "=", "t2", ".", "code", "join", "scientists", "as", "t3", "on", "t1", ".", "scientist", "=", "t3", ".", "ssn", "where", "t2", ".", "name", "=", "value", "intersect", "select", "t3", ".", "name", "from", "assignedto", "as", "t1", "join", "projects", "as", "t2", "on", "t1", ".", "project", "=", "t2", ".", "code", "join", "scientists", "as", "t3", "on", "t1", ".", "scientist", "=", "t3", ".", "ssn", "where", "t2", ".", "name", "=", "value"], "question": "Find the name of the scientist who worked on both a project named 'Matter of Time' and a project named 'A Puzzling Parallax'.", "question_toks": ["Find", "the", "name", "of", "the", "scientist", "who", "worked", "on", "both", "a", "project", "named", "'Matter", "of", "Time", "'", "and", "a", "project", "named", "'A", "Puzzling", "Parallax", "'", "."], "guid": 4381}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the number of papers by \" H. V. Jagadish \" on PVLDB after 2000 .", "sql": "SELECT COUNT ( DISTINCT t4.title ) FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\" AND t2.name  =  \"PVLDB\" AND t4.year  >  2000;", "example": {"db_id": "academic", "query": "SELECT COUNT ( DISTINCT t4.title ) FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\" AND t2.name  =  \"PVLDB\" AND t4.year  >  2000;", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "t4.title", ")", "FROM", "publication", "AS", "t4", "JOIN", "journal", "AS", "t2", "ON", "t4.jid", "=", "t2.jid", "JOIN", "writes", "AS", "t3", "ON", "t3.pid", "=", "t4.pid", "JOIN", "author", "AS", "t1", "ON", "t3.aid", "=", "t1.aid", "WHERE", "t1.name", "=", "``", "H.", "V.", "Jagadish", "''", "AND", "t2.name", "=", "``", "PVLDB", "''", "AND", "t4.year", ">", "2000", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "t4", ".", "title", ")", "from", "publication", "as", "t4", "join", "journal", "as", "t2", "on", "t4", ".", "jid", "=", "t2", ".", "jid", "join", "writes", "as", "t3", "on", "t3", ".", "pid", "=", "t4", ".", "pid", "join", "author", "as", "t1", "on", "t3", ".", "aid", "=", "t1", ".", "aid", "where", "t1", ".", "name", "=", "value", "and", "t2", ".", "name", "=", "value", "and", "t4", ".", "year", ">", "value"], "question": "return me the number of papers by \" H. V. Jagadish \" on PVLDB after 2000 .", "question_toks": ["return", "me", "the", "number", "of", "papers", "by", "``", "H.", "V.", "Jagadish", "``", "on", "PVLDB", "after", "2000", "."], "guid": 4382}}
{"text": "Document_Types: document_type_code, document_description; Documents: document_id, document_type_code, grant_id, sent_date, response_received_date, other_details; Grants: grant_id, organisation_id, grant_amount, grant_start_date, grant_end_date, other_details; Organisation_Types: organisation_type, organisation_type_description; Organisations: organisation_id, organisation_type, organisation_details; Project_Outcomes: project_id, outcome_code, outcome_details; Project_Staff: staff_id, project_id, role_code, date_from, date_to, other_details; Projects: project_id, organisation_id, project_details; Research_Outcomes: outcome_code, outcome_description; Research_Staff: staff_id, employer_organisation_id, staff_details | When did the first staff for the projects started working?", "sql": "SELECT date_from FROM Project_Staff ORDER BY date_from ASC LIMIT 1", "example": {"db_id": "tracking_grants_for_research", "query": "SELECT date_from FROM Project_Staff ORDER BY date_from ASC LIMIT 1", "query_toks": ["SELECT", "date_from", "FROM", "Project_Staff", "ORDER", "BY", "date_from", "ASC", "LIMIT", "1"], "query_toks_no_value": ["select", "date_from", "from", "project_staff", "order", "by", "date_from", "asc", "limit", "value"], "question": "When did the first staff for the projects started working?", "question_toks": ["When", "did", "the", "first", "staff", "for", "the", "projects", "started", "working", "?"], "guid": 4383}}
{"text": "Document_Types: document_type_code, document_description; Documents: document_id, document_type_code, grant_id, sent_date, response_received_date, other_details; Grants: grant_id, organisation_id, grant_amount, grant_start_date, grant_end_date, other_details; Organisation_Types: organisation_type, organisation_type_description; Organisations: organisation_id, organisation_type, organisation_details; Project_Outcomes: project_id, outcome_code, outcome_details; Project_Staff: staff_id, project_id, role_code, date_from, date_to, other_details; Projects: project_id, organisation_id, project_details; Research_Outcomes: outcome_code, outcome_description; Research_Staff: staff_id, employer_organisation_id, staff_details | How many staff does each project has? List the project id and the number in an ascending order.", "sql": "SELECT T1.project_id ,  count(*) FROM Project_Staff AS T1 JOIN Projects AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id ORDER BY count(*) ASC", "example": {"db_id": "tracking_grants_for_research", "query": "SELECT T1.project_id ,  count(*) FROM Project_Staff AS T1 JOIN Projects AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id ORDER BY count(*) ASC", "query_toks": ["SELECT", "T1.project_id", ",", "count", "(", "*", ")", "FROM", "Project_Staff", "AS", "T1", "JOIN", "Projects", "AS", "T2", "ON", "T1.project_id", "=", "T2.project_id", "GROUP", "BY", "T1.project_id", "ORDER", "BY", "count", "(", "*", ")", "ASC"], "query_toks_no_value": ["select", "t1", ".", "project_id", ",", "count", "(", "*", ")", "from", "project_staff", "as", "t1", "join", "projects", "as", "t2", "on", "t1", ".", "project_id", "=", "t2", ".", "project_id", "group", "by", "t1", ".", "project_id", "order", "by", "count", "(", "*", ")", "asc"], "question": "How many staff does each project has? List the project id and the number in an ascending order.", "question_toks": ["How", "many", "staff", "does", "each", "project", "has", "?", "List", "the", "project", "id", "and", "the", "number", "in", "an", "ascending", "order", "."], "guid": 4384}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | How many papers were written on question answering in 2011 through 2016 ?", "sql": "SELECT DISTINCT COUNT ( t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"question answering\" AND t3.year  >=  2011;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"question answering\" AND t3.year  >=  2011;", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "t3.paperid", ")", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "WHERE", "t1.keyphrasename", "=", "``", "question", "answering", "''", "AND", "t3.year", ">", "=", "2011", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "t3", ".", "paperid", ")", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "where", "t1", ".", "keyphrasename", "=", "value", "and", "t3", ".", "year", ">", "=", "value"], "question": "How many papers were written on question answering in 2011 through 2016 ?", "question_toks": ["How", "many", "papers", "were", "written", "on", "question", "answering", "in", "2011", "through", "2016", "?"], "guid": 4385}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the total citations of papers in PVLDB in 2005 .", "sql": "SELECT SUM ( t2.citation_num ) FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\" AND t2.year  =  2005;", "example": {"db_id": "academic", "query": "SELECT SUM ( t2.citation_num ) FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\" AND t2.year  =  2005;", "query_toks": ["SELECT", "SUM", "(", "t2.citation_num", ")", "FROM", "publication", "AS", "t2", "JOIN", "journal", "AS", "t1", "ON", "t2.jid", "=", "t1.jid", "WHERE", "t1.name", "=", "``", "PVLDB", "''", "AND", "t2.year", "=", "2005", ";"], "query_toks_no_value": ["select", "sum", "(", "t2", ".", "citation_num", ")", "from", "publication", "as", "t2", "join", "journal", "as", "t1", "on", "t2", ".", "jid", "=", "t1", ".", "jid", "where", "t1", ".", "name", "=", "value", "and", "t2", ".", "year", "=", "value"], "question": "return me the total citations of papers in PVLDB in 2005 .", "question_toks": ["return", "me", "the", "total", "citations", "of", "papers", "in", "PVLDB", "in", "2005", "."], "guid": 4386}}
{"text": "Document_Types: document_type_code, document_description; Documents: document_id, document_type_code, grant_id, sent_date, response_received_date, other_details; Grants: grant_id, organisation_id, grant_amount, grant_start_date, grant_end_date, other_details; Organisation_Types: organisation_type, organisation_type_description; Organisations: organisation_id, organisation_type, organisation_details; Project_Outcomes: project_id, outcome_code, outcome_details; Project_Staff: staff_id, project_id, role_code, date_from, date_to, other_details; Projects: project_id, organisation_id, project_details; Research_Outcomes: outcome_code, outcome_description; Research_Staff: staff_id, employer_organisation_id, staff_details | Which projects have no outcome? List the project details.", "sql": "SELECT project_details FROM Projects WHERE project_id NOT IN ( SELECT project_id FROM Project_outcomes )", "example": {"db_id": "tracking_grants_for_research", "query": "SELECT project_details FROM Projects WHERE project_id NOT IN ( SELECT project_id FROM Project_outcomes )", "query_toks": ["SELECT", "project_details", "FROM", "Projects", "WHERE", "project_id", "NOT", "IN", "(", "SELECT", "project_id", "FROM", "Project_outcomes", ")"], "query_toks_no_value": ["select", "project_details", "from", "projects", "where", "project_id", "not", "in", "(", "select", "project_id", "from", "project_outcomes", ")"], "question": "Which projects have no outcome? List the project details.", "question_toks": ["Which", "projects", "have", "no", "outcome", "?", "List", "the", "project", "details", "."], "guid": 4387}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the authors who have cooperated with \" H. V. Jagadish \" .", "sql": "SELECT t2.name FROM writes AS t3 JOIN author AS t2 ON t3.aid  =  t2.aid JOIN publication AS t5 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t5.pid JOIN author AS t1 ON t4.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\";", "example": {"db_id": "academic", "query": "SELECT t2.name FROM writes AS t3 JOIN author AS t2 ON t3.aid  =  t2.aid JOIN publication AS t5 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t5.pid JOIN author AS t1 ON t4.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\";", "query_toks": ["SELECT", "t2.name", "FROM", "writes", "AS", "t3", "JOIN", "author", "AS", "t2", "ON", "t3.aid", "=", "t2.aid", "JOIN", "publication", "AS", "t5", "ON", "t3.pid", "=", "t5.pid", "JOIN", "writes", "AS", "t4", "ON", "t4.pid", "=", "t5.pid", "JOIN", "author", "AS", "t1", "ON", "t4.aid", "=", "t1.aid", "WHERE", "t1.name", "=", "``", "H.", "V.", "Jagadish", "''", ";"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "writes", "as", "t3", "join", "author", "as", "t2", "on", "t3", ".", "aid", "=", "t2", ".", "aid", "join", "publication", "as", "t5", "on", "t3", ".", "pid", "=", "t5", ".", "pid", "join", "writes", "as", "t4", "on", "t4", ".", "pid", "=", "t5", ".", "pid", "join", "author", "as", "t1", "on", "t4", ".", "aid", "=", "t1", ".", "aid", "where", "t1", ".", "name", "=", "value"], "question": "return me the authors who have cooperated with \" H. V. Jagadish \" .", "question_toks": ["return", "me", "the", "authors", "who", "have", "cooperated", "with", "``", "H.", "V.", "Jagadish", "``", "."], "guid": 4388}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | papers by Liwen Xiong from 2015", "sql": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Liwen Xiong\" AND t3.year  =  2015;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Liwen Xiong\" AND t3.year  =  2015;", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "writes", "AS", "t2", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "JOIN", "paper", "AS", "t3", "ON", "t2.paperid", "=", "t3.paperid", "WHERE", "t1.authorname", "=", "``", "Liwen", "Xiong", "''", "AND", "t3.year", "=", "2015", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "writes", "as", "t2", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "join", "paper", "as", "t3", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "where", "t1", ".", "authorname", "=", "value", "and", "t3", ".", "year", "=", "value"], "question": "papers by Liwen Xiong from 2015", "question_toks": ["papers", "by", "Liwen", "Xiong", "from", "2015"], "guid": 4389}}
{"text": "Inst: instID, name, country; Authors: authID, lname, fname; Papers: paperID, title; Authorship: authID, instID, paperID, authOrder | Count the number of total papers.", "sql": "SELECT count(*) FROM papers", "example": {"db_id": "icfp_1", "query": "SELECT count(*) FROM papers", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "papers"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "papers"], "question": "Count the number of total papers.", "question_toks": ["Count", "the", "number", "of", "total", "papers", "."], "guid": 4390}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the number of keywords in VLDB conference .", "sql": "SELECT COUNT ( DISTINCT t1.keyword ) FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t4.pid JOIN conference AS t2 ON t3.cid  =  t2.cid WHERE t2.name  =  \"VLDB\";", "example": {"db_id": "academic", "query": "SELECT COUNT ( DISTINCT t1.keyword ) FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t4.pid JOIN conference AS t2 ON t3.cid  =  t2.cid WHERE t2.name  =  \"VLDB\";", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "t1.keyword", ")", "FROM", "publication_keyword", "AS", "t4", "JOIN", "keyword", "AS", "t1", "ON", "t4.kid", "=", "t1.kid", "JOIN", "publication", "AS", "t3", "ON", "t3.pid", "=", "t4.pid", "JOIN", "conference", "AS", "t2", "ON", "t3.cid", "=", "t2.cid", "WHERE", "t2.name", "=", "``", "VLDB", "''", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "t1", ".", "keyword", ")", "from", "publication_keyword", "as", "t4", "join", "keyword", "as", "t1", "on", "t4", ".", "kid", "=", "t1", ".", "kid", "join", "publication", "as", "t3", "on", "t3", ".", "pid", "=", "t4", ".", "pid", "join", "conference", "as", "t2", "on", "t3", ".", "cid", "=", "t2", ".", "cid", "where", "t2", ".", "name", "=", "value"], "question": "return me the number of keywords in VLDB conference .", "question_toks": ["return", "me", "the", "number", "of", "keywords", "in", "VLDB", "conference", "."], "guid": 4391}}
{"text": "Scientists: SSN, Name; Projects: Code, Name, Hours; AssignedTo: Scientist, Project | What is the name of the project that requires the fewest number of hours, and the names of the scientists assigned to it?", "sql": "SELECT T2.name ,  T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.hours  =  (SELECT min(hours) FROM projects)", "example": {"db_id": "scientist_1", "query": "SELECT T2.name ,  T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.hours  =  (SELECT min(hours) FROM projects)", "query_toks": ["SELECT", "T2.name", ",", "T3.name", "FROM", "assignedto", "AS", "T1", "JOIN", "projects", "AS", "T2", "ON", "T1.project", "=", "T2.code", "JOIN", "scientists", "AS", "T3", "ON", "T1.scientist", "=", "T3.SSN", "WHERE", "T2.hours", "=", "(", "SELECT", "min", "(", "hours", ")", "FROM", "projects", ")"], "query_toks_no_value": ["select", "t2", ".", "name", ",", "t3", ".", "name", "from", "assignedto", "as", "t1", "join", "projects", "as", "t2", "on", "t1", ".", "project", "=", "t2", ".", "code", "join", "scientists", "as", "t3", "on", "t1", ".", "scientist", "=", "t3", ".", "ssn", "where", "t2", ".", "hours", "=", "(", "select", "min", "(", "hours", ")", "from", "projects", ")"], "question": "What is the name of the project that requires the fewest number of hours, and the names of the scientists assigned to it?", "question_toks": ["What", "is", "the", "name", "of", "the", "project", "that", "requires", "the", "fewest", "number", "of", "hours", ",", "and", "the", "names", "of", "the", "scientists", "assigned", "to", "it", "?"], "guid": 4392}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | acl papers in 2012 about Parsing", "sql": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Parsing\" AND t3.year  =  2012 AND t4.venuename  =  \"acl\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Parsing\" AND t3.year  =  2012 AND t4.venuename  =  \"acl\";", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "JOIN", "venue", "AS", "t4", "ON", "t4.venueid", "=", "t3.venueid", "WHERE", "t1.keyphrasename", "=", "``", "Parsing", "''", "AND", "t3.year", "=", "2012", "AND", "t4.venuename", "=", "``", "acl", "''", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "join", "venue", "as", "t4", "on", "t4", ".", "venueid", "=", "t3", ".", "venueid", "where", "t1", ".", "keyphrasename", "=", "value", "and", "t3", ".", "year", "=", "value", "and", "t4", ".", "venuename", "=", "value"], "question": "acl papers in 2012 about Parsing", "question_toks": ["acl", "papers", "in", "2012", "about", "Parsing"], "guid": 4393}}
{"text": "Scientists: SSN, Name; Projects: Code, Name, Hours; AssignedTo: Scientist, Project | Select the project names which are not assigned yet.", "sql": "SELECT Name FROM Projects WHERE Code NOT IN (SELECT Project FROM AssignedTo)", "example": {"db_id": "scientist_1", "query": "SELECT Name FROM Projects WHERE Code NOT IN (SELECT Project FROM AssignedTo)", "query_toks": ["SELECT", "Name", "FROM", "Projects", "WHERE", "Code", "NOT", "IN", "(", "SELECT", "Project", "FROM", "AssignedTo", ")"], "query_toks_no_value": ["select", "name", "from", "projects", "where", "code", "not", "in", "(", "select", "project", "from", "assignedto", ")"], "question": "Select the project names which are not assigned yet.", "question_toks": ["Select", "the", "project", "names", "which", "are", "not", "assigned", "yet", "."], "guid": 4394}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | who published the most at chi", "sql": "SELECT DISTINCT COUNT ( DISTINCT t2.paperid )  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  \"chi\" GROUP BY t1.authorid ORDER BY COUNT ( DISTINCT t2.paperid ) DESC;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( DISTINCT t2.paperid )  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  \"chi\" GROUP BY t1.authorid ORDER BY COUNT ( DISTINCT t2.paperid ) DESC;", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "DISTINCT", "t2.paperid", ")", ",", "t1.authorid", "FROM", "venue", "AS", "t3", "JOIN", "paper", "AS", "t2", "ON", "t3.venueid", "=", "t2.venueid", "JOIN", "writes", "AS", "t1", "ON", "t1.paperid", "=", "t2.paperid", "WHERE", "t3.venuename", "=", "``", "chi", "''", "GROUP", "BY", "t1.authorid", "ORDER", "BY", "COUNT", "(", "DISTINCT", "t2.paperid", ")", "DESC", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "distinct", "t2", ".", "paperid", ")", ",", "t1", ".", "authorid", "from", "venue", "as", "t3", "join", "paper", "as", "t2", "on", "t3", ".", "venueid", "=", "t2", ".", "venueid", "join", "writes", "as", "t1", "on", "t1", ".", "paperid", "=", "t2", ".", "paperid", "where", "t3", ".", "venuename", "=", "value", "group", "by", "t1", ".", "authorid", "order", "by", "count", "(", "distinct", "t2", ".", "paperid", ")", "desc"], "question": "who published the most at chi", "question_toks": ["who", "published", "the", "most", "at", "chi"], "guid": 4395}}
{"text": "Inst: instID, name, country; Authors: authID, lname, fname; Papers: paperID, title; Authorship: authID, instID, paperID, authOrder | Which paper's title contains the word \"Database\"?", "sql": "SELECT title FROM papers WHERE title LIKE \"%Database%\"", "example": {"db_id": "icfp_1", "query": "SELECT title FROM papers WHERE title LIKE \"%Database%\"", "query_toks": ["SELECT", "title", "FROM", "papers", "WHERE", "title", "LIKE", "``", "%", "Database", "%", "''"], "query_toks_no_value": ["select", "title", "from", "papers", "where", "title", "like", "value"], "question": "Which paper's title contains the word \"Database\"?", "question_toks": ["Which", "paper", "'s", "title", "contains", "the", "word", "``", "Database", "''", "?"], "guid": 4396}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | When does Michael Stonebraker publish the GIS Database paper ?", "sql": "SELECT DISTINCT t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"Michael Stonebraker\" AND t5.keyphrasename  =  \"GIS Database\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"Michael Stonebraker\" AND t5.keyphrasename  =  \"GIS Database\";", "query_toks": ["SELECT", "DISTINCT", "t3.year", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t5", "ON", "t2.keyphraseid", "=", "t5.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "JOIN", "writes", "AS", "t4", "ON", "t4.paperid", "=", "t3.paperid", "JOIN", "author", "AS", "t1", "ON", "t4.authorid", "=", "t1.authorid", "WHERE", "t1.authorname", "=", "``", "Michael", "Stonebraker", "''", "AND", "t5.keyphrasename", "=", "``", "GIS", "Database", "''", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "year", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t5", "on", "t2", ".", "keyphraseid", "=", "t5", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "join", "writes", "as", "t4", "on", "t4", ".", "paperid", "=", "t3", ".", "paperid", "join", "author", "as", "t1", "on", "t4", ".", "authorid", "=", "t1", ".", "authorid", "where", "t1", ".", "authorname", "=", "value", "and", "t5", ".", "keyphrasename", "=", "value"], "question": "When does Michael Stonebraker publish the GIS Database paper ?", "question_toks": ["When", "does", "Michael", "Stonebraker", "publish", "the", "GIS", "Database", "paper", "?"], "guid": 4397}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | monte carlo simulation later than 2011", "sql": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"monte carlo simulation\" AND t3.year  >  2011;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"monte carlo simulation\" AND t3.year  >  2011;", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "WHERE", "t1.keyphrasename", "=", "``", "monte", "carlo", "simulation", "''", "AND", "t3.year", ">", "2011", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "where", "t1", ".", "keyphrasename", "=", "value", "and", "t3", ".", "year", ">", "value"], "question": "monte carlo simulation later than 2011", "question_toks": ["monte", "carlo", "simulation", "later", "than", "2011"], "guid": 4398}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | Papers on WebKB", "sql": "SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname  =  \"WebKB\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname  =  \"WebKB\";", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "paperdataset", "AS", "t2", "JOIN", "dataset", "AS", "t1", "ON", "t2.datasetid", "=", "t1.datasetid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "WHERE", "t1.datasetname", "=", "``", "WebKB", "''", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "paperdataset", "as", "t2", "join", "dataset", "as", "t1", "on", "t2", ".", "datasetid", "=", "t1", ".", "datasetid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "where", "t1", ".", "datasetname", "=", "value"], "question": "Papers on WebKB", "question_toks": ["Papers", "on", "WebKB"], "guid": 4399}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | Question Answering papers", "sql": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "WHERE", "t1.keyphrasename", "=", "``", "Question", "Answering", "''", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "where", "t1", ".", "keyphrasename", "=", "value"], "question": "Question Answering papers", "question_toks": ["Question", "Answering", "papers"], "guid": 4400}}
{"text": "Scientists: SSN, Name; Projects: Code, Name, Hours; AssignedTo: Scientist, Project | What are the SSN and names of scientists working on the project with the most hours?", "sql": "SELECT T3.ssn ,  T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.hours  =  (SELECT max(hours) FROM projects)", "example": {"db_id": "scientist_1", "query": "SELECT T3.ssn ,  T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.hours  =  (SELECT max(hours) FROM projects)", "query_toks": ["SELECT", "T3.ssn", ",", "T3.name", "FROM", "assignedto", "AS", "T1", "JOIN", "projects", "AS", "T2", "ON", "T1.project", "=", "T2.code", "JOIN", "scientists", "AS", "T3", "ON", "T1.scientist", "=", "T3.SSN", "WHERE", "T2.hours", "=", "(", "SELECT", "max", "(", "hours", ")", "FROM", "projects", ")"], "query_toks_no_value": ["select", "t3", ".", "ssn", ",", "t3", ".", "name", "from", "assignedto", "as", "t1", "join", "projects", "as", "t2", "on", "t1", ".", "project", "=", "t2", ".", "code", "join", "scientists", "as", "t3", "on", "t1", ".", "scientist", "=", "t3", ".", "ssn", "where", "t2", ".", "hours", "=", "(", "select", "max", "(", "hours", ")", "from", "projects", ")"], "question": "What are the SSN and names of scientists working on the project with the most hours?", "question_toks": ["What", "are", "the", "SSN", "and", "names", "of", "scientists", "working", "on", "the", "project", "with", "the", "most", "hours", "?"], "guid": 4401}}
{"text": "Document_Types: document_type_code, document_description; Documents: document_id, document_type_code, grant_id, sent_date, response_received_date, other_details; Grants: grant_id, organisation_id, grant_amount, grant_start_date, grant_end_date, other_details; Organisation_Types: organisation_type, organisation_type_description; Organisations: organisation_id, organisation_type, organisation_details; Project_Outcomes: project_id, outcome_code, outcome_details; Project_Staff: staff_id, project_id, role_code, date_from, date_to, other_details; Projects: project_id, organisation_id, project_details; Research_Outcomes: outcome_code, outcome_description; Research_Staff: staff_id, employer_organisation_id, staff_details | List the project details of the projects with the research outcome described with the substring 'Published'.", "sql": "SELECT T1.project_details FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id JOIN Research_outcomes AS T3 ON T2.outcome_code  =  T3.outcome_code WHERE T3.outcome_description LIKE '%Published%'", "example": {"db_id": "tracking_grants_for_research", "query": "SELECT T1.project_details FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id JOIN Research_outcomes AS T3 ON T2.outcome_code  =  T3.outcome_code WHERE T3.outcome_description LIKE '%Published%'", "query_toks": ["SELECT", "T1.project_details", "FROM", "Projects", "AS", "T1", "JOIN", "Project_outcomes", "AS", "T2", "ON", "T1.project_id", "=", "T2.project_id", "JOIN", "Research_outcomes", "AS", "T3", "ON", "T2.outcome_code", "=", "T3.outcome_code", "WHERE", "T3.outcome_description", "LIKE", "'", "%", "Published", "%", "'"], "query_toks_no_value": ["select", "t1", ".", "project_details", "from", "projects", "as", "t1", "join", "project_outcomes", "as", "t2", "on", "t1", ".", "project_id", "=", "t2", ".", "project_id", "join", "research_outcomes", "as", "t3", "on", "t2", ".", "outcome_code", "=", "t3", ".", "outcome_code", "where", "t3", ".", "outcome_description", "like", "value"], "question": "List the project details of the projects with the research outcome described with the substring 'Published'.", "question_toks": ["List", "the", "project", "details", "of", "the", "projects", "with", "the", "research", "outcome", "described", "with", "the", "substring", "'Published", "'", "."], "guid": 4402}}
{"text": "Document_Types: document_type_code, document_description; Documents: document_id, document_type_code, grant_id, sent_date, response_received_date, other_details; Grants: grant_id, organisation_id, grant_amount, grant_start_date, grant_end_date, other_details; Organisation_Types: organisation_type, organisation_type_description; Organisations: organisation_id, organisation_type, organisation_details; Project_Outcomes: project_id, outcome_code, outcome_details; Project_Staff: staff_id, project_id, role_code, date_from, date_to, other_details; Projects: project_id, organisation_id, project_details; Research_Outcomes: outcome_code, outcome_description; Research_Staff: staff_id, employer_organisation_id, staff_details | For each staff id, what is the description of the role that is involved with the most number of projects?", "sql": "SELECT T1.role_description ,  T2.staff_id FROM Staff_Roles AS T1 JOIN Project_Staff AS T2 ON T1.role_code  =  T2.role_code JOIN Project_outcomes AS T3 ON T2.project_id  =  T3.project_id GROUP BY T2.staff_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "tracking_grants_for_research", "query": "SELECT T1.role_description ,  T2.staff_id FROM Staff_Roles AS T1 JOIN Project_Staff AS T2 ON T1.role_code  =  T2.role_code JOIN Project_outcomes AS T3 ON T2.project_id  =  T3.project_id GROUP BY T2.staff_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.role_description", ",", "T2.staff_id", "FROM", "Staff_Roles", "AS", "T1", "JOIN", "Project_Staff", "AS", "T2", "ON", "T1.role_code", "=", "T2.role_code", "JOIN", "Project_outcomes", "AS", "T3", "ON", "T2.project_id", "=", "T3.project_id", "GROUP", "BY", "T2.staff_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "role_description", ",", "t2", ".", "staff_id", "from", "staff_roles", "as", "t1", "join", "project_staff", "as", "t2", "on", "t1", ".", "role_code", "=", "t2", ".", "role_code", "join", "project_outcomes", "as", "t3", "on", "t2", ".", "project_id", "=", "t3", ".", "project_id", "group", "by", "t2", ".", "staff_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "For each staff id, what is the description of the role that is involved with the most number of projects?", "question_toks": ["For", "each", "staff", "id", ",", "what", "is", "the", "description", "of", "the", "role", "that", "is", "involved", "with", "the", "most", "number", "of", "projects", "?"], "guid": 4403}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | convolution paper by brian curless", "sql": "SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";", "query_toks": ["SELECT", "DISTINCT", "t1.authorid", ",", "t3.paperid", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t5", "ON", "t2.keyphraseid", "=", "t5.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "JOIN", "writes", "AS", "t4", "ON", "t4.paperid", "=", "t3.paperid", "JOIN", "author", "AS", "t1", "ON", "t4.authorid", "=", "t1.authorid", "WHERE", "t1.authorname", "=", "``", "brian", "curless", "''", "AND", "t5.keyphrasename", "=", "``", "convolution", "''", ";"], "query_toks_no_value": ["select", "distinct", "t1", ".", "authorid", ",", "t3", ".", "paperid", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t5", "on", "t2", ".", "keyphraseid", "=", "t5", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "join", "writes", "as", "t4", "on", "t4", ".", "paperid", "=", "t3", ".", "paperid", "join", "author", "as", "t1", "on", "t4", ".", "authorid", "=", "t1", ".", "authorid", "where", "t1", ".", "authorname", "=", "value", "and", "t5", ".", "keyphrasename", "=", "value"], "question": "convolution paper by brian curless", "question_toks": ["convolution", "paper", "by", "brian", "curless"], "guid": 4404}}
{"text": "book_club: book_club_id, Year, Author_or_Editor, Book_Title, Publisher, Category, Result; movie: movie_id, Title, Year, Director, Budget_million, Gross_worldwide; culture_company: Company_name, Type, Incorporated_in, Group_Equity_Shareholding, book_club_id, movie_id | Count the number of different directors.", "sql": "SELECT COUNT (DISTINCT director) FROM movie", "example": {"db_id": "culture_company", "query": "SELECT COUNT (DISTINCT director) FROM movie", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "director", ")", "FROM", "movie"], "query_toks_no_value": ["select", "count", "(", "distinct", "director", ")", "from", "movie"], "question": "Count the number of different directors.", "question_toks": ["Count", "the", "number", "of", "different", "directors", "."], "guid": 4405}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | does ras bodik publish a lot ?", "sql": "SELECT COUNT ( t3.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"ras bodik\";", "example": {"db_id": "scholar", "query": "SELECT COUNT ( t3.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"ras bodik\";", "query_toks": ["SELECT", "COUNT", "(", "t3.paperid", ")", "FROM", "writes", "AS", "t2", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "JOIN", "paper", "AS", "t3", "ON", "t2.paperid", "=", "t3.paperid", "WHERE", "t1.authorname", "=", "``", "ras", "bodik", "''", ";"], "query_toks_no_value": ["select", "count", "(", "t3", ".", "paperid", ")", "from", "writes", "as", "t2", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "join", "paper", "as", "t3", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "where", "t1", ".", "authorname", "=", "value"], "question": "does ras bodik publish a lot ?", "question_toks": ["does", "ras", "bodik", "publish", "a", "lot", "?"], "guid": 4406}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the total citations of papers in the VLDB conference in 2005 .", "sql": "SELECT SUM ( t2.citation_num ) FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\" AND t2.year  =  2005;", "example": {"db_id": "academic", "query": "SELECT SUM ( t2.citation_num ) FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\" AND t2.year  =  2005;", "query_toks": ["SELECT", "SUM", "(", "t2.citation_num", ")", "FROM", "publication", "AS", "t2", "JOIN", "conference", "AS", "t1", "ON", "t2.cid", "=", "t1.cid", "WHERE", "t1.name", "=", "``", "VLDB", "''", "AND", "t2.year", "=", "2005", ";"], "query_toks_no_value": ["select", "sum", "(", "t2", ".", "citation_num", ")", "from", "publication", "as", "t2", "join", "conference", "as", "t1", "on", "t2", ".", "cid", "=", "t1", ".", "cid", "where", "t1", ".", "name", "=", "value", "and", "t2", ".", "year", "=", "value"], "question": "return me the total citations of papers in the VLDB conference in 2005 .", "question_toks": ["return", "me", "the", "total", "citations", "of", "papers", "in", "the", "VLDB", "conference", "in", "2005", "."], "guid": 4407}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | At which conferences does Daniella Coelho publish ?", "sql": "SELECT DISTINCT t3.venueid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Daniella Coelho\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.venueid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Daniella Coelho\";", "query_toks": ["SELECT", "DISTINCT", "t3.venueid", "FROM", "writes", "AS", "t2", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "JOIN", "paper", "AS", "t3", "ON", "t2.paperid", "=", "t3.paperid", "WHERE", "t1.authorname", "=", "``", "Daniella", "Coelho", "''", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "venueid", "from", "writes", "as", "t2", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "join", "paper", "as", "t3", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "where", "t1", ".", "authorname", "=", "value"], "question": "At which conferences does Daniella Coelho publish ?", "question_toks": ["At", "which", "conferences", "does", "Daniella", "Coelho", "publish", "?"], "guid": 4408}}
{"text": "Inst: instID, name, country; Authors: authID, lname, fname; Papers: paperID, title; Authorship: authID, instID, paperID, authOrder | Which papers have \"Stephanie Weirich\" as an author?", "sql": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t1.fname  =  \"Stephanie\" AND t1.lname  =  \"Weirich\"", "example": {"db_id": "icfp_1", "query": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t1.fname  =  \"Stephanie\" AND t1.lname  =  \"Weirich\"", "query_toks": ["SELECT", "t3.title", "FROM", "authors", "AS", "t1", "JOIN", "authorship", "AS", "t2", "ON", "t1.authid", "=", "t2.authid", "JOIN", "papers", "AS", "t3", "ON", "t2.paperid", "=", "t3.paperid", "WHERE", "t1.fname", "=", "``", "Stephanie", "''", "AND", "t1.lname", "=", "``", "Weirich", "''"], "query_toks_no_value": ["select", "t3", ".", "title", "from", "authors", "as", "t1", "join", "authorship", "as", "t2", "on", "t1", ".", "authid", "=", "t2", ".", "authid", "join", "papers", "as", "t3", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "where", "t1", ".", "fname", "=", "value", "and", "t1", ".", "lname", "=", "value"], "question": "Which papers have \"Stephanie Weirich\" as an author?", "question_toks": ["Which", "papers", "have", "``", "Stephanie", "Weirich", "''", "as", "an", "author", "?"], "guid": 4409}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | what are some syntactic parsing papers that chris dyer did not write ?", "sql": "SELECT DISTINCT t1.authorname  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname != \"chris dyer\" AND t5.keyphrasename  =  \"syntactic parsing\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t1.authorname  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname != \"chris dyer\" AND t5.keyphrasename  =  \"syntactic parsing\";", "query_toks": ["SELECT", "DISTINCT", "t1.authorname", ",", "t3.paperid", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t5", "ON", "t2.keyphraseid", "=", "t5.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "JOIN", "writes", "AS", "t4", "ON", "t4.paperid", "=", "t3.paperid", "JOIN", "author", "AS", "t1", "ON", "t4.authorid", "=", "t1.authorid", "WHERE", "t1.authorname", "!", "=", "``", "chris", "dyer", "''", "AND", "t5.keyphrasename", "=", "``", "syntactic", "parsing", "''", ";"], "query_toks_no_value": ["select", "distinct", "t1", ".", "authorname", ",", "t3", ".", "paperid", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t5", "on", "t2", ".", "keyphraseid", "=", "t5", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "join", "writes", "as", "t4", "on", "t4", ".", "paperid", "=", "t3", ".", "paperid", "join", "author", "as", "t1", "on", "t4", ".", "authorid", "=", "t1", ".", "authorid", "where", "t1", ".", "authorname", "!", "=", "value", "and", "t5", ".", "keyphrasename", "=", "value"], "question": "what are some syntactic parsing papers that chris dyer did not write ?", "question_toks": ["what", "are", "some", "syntactic", "parsing", "papers", "that", "chris", "dyer", "did", "not", "write", "?"], "guid": 4410}}
{"text": "journal: Journal_ID, Date, Theme, Sales; editor: Editor_ID, Name, Age; journal_committee: Editor_ID, Journal_ID, Work_Type | Show the names of editors and the theme of journals for which they serve on committees.", "sql": "SELECT T2.Name ,  T3.Theme FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID  =  T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID  =  T3.Journal_ID", "example": {"db_id": "journal_committee", "query": "SELECT T2.Name ,  T3.Theme FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID  =  T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID  =  T3.Journal_ID", "query_toks": ["SELECT", "T2.Name", ",", "T3.Theme", "FROM", "journal_committee", "AS", "T1", "JOIN", "editor", "AS", "T2", "ON", "T1.Editor_ID", "=", "T2.Editor_ID", "JOIN", "journal", "AS", "T3", "ON", "T1.Journal_ID", "=", "T3.Journal_ID"], "query_toks_no_value": ["select", "t2", ".", "name", ",", "t3", ".", "theme", "from", "journal_committee", "as", "t1", "join", "editor", "as", "t2", "on", "t1", ".", "editor_id", "=", "t2", ".", "editor_id", "join", "journal", "as", "t3", "on", "t1", ".", "journal_id", "=", "t3", ".", "journal_id"], "question": "Show the names of editors and the theme of journals for which they serve on committees.", "question_toks": ["Show", "the", "names", "of", "editors", "and", "the", "theme", "of", "journals", "for", "which", "they", "serve", "on", "committees", "."], "guid": 4411}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | papers by brian curless about convolution", "sql": "SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";", "query_toks": ["SELECT", "DISTINCT", "t1.authorid", ",", "t3.paperid", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t5", "ON", "t2.keyphraseid", "=", "t5.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "JOIN", "writes", "AS", "t4", "ON", "t4.paperid", "=", "t3.paperid", "JOIN", "author", "AS", "t1", "ON", "t4.authorid", "=", "t1.authorid", "WHERE", "t1.authorname", "=", "``", "brian", "curless", "''", "AND", "t5.keyphrasename", "=", "``", "convolution", "''", ";"], "query_toks_no_value": ["select", "distinct", "t1", ".", "authorid", ",", "t3", ".", "paperid", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t5", "on", "t2", ".", "keyphraseid", "=", "t5", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "join", "writes", "as", "t4", "on", "t4", ".", "paperid", "=", "t3", ".", "paperid", "join", "author", "as", "t1", "on", "t4", ".", "authorid", "=", "t1", ".", "authorid", "where", "t1", ".", "authorname", "=", "value", "and", "t5", ".", "keyphrasename", "=", "value"], "question": "papers by brian curless about convolution", "question_toks": ["papers", "by", "brian", "curless", "about", "convolution"], "guid": 4412}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me all the papers after 2000 in \" University of Michigan \" .", "sql": "SELECT t4.title FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid JOIN writes AS t3 ON t3.aid  =  t1.aid JOIN publication AS t4 ON t3.pid  =  t4.pid WHERE t2.name  =  \"University of Michigan\" AND t4.year  >  2000;", "example": {"db_id": "academic", "query": "SELECT t4.title FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid JOIN writes AS t3 ON t3.aid  =  t1.aid JOIN publication AS t4 ON t3.pid  =  t4.pid WHERE t2.name  =  \"University of Michigan\" AND t4.year  >  2000;", "query_toks": ["SELECT", "t4.title", "FROM", "organization", "AS", "t2", "JOIN", "author", "AS", "t1", "ON", "t2.oid", "=", "t1.oid", "JOIN", "writes", "AS", "t3", "ON", "t3.aid", "=", "t1.aid", "JOIN", "publication", "AS", "t4", "ON", "t3.pid", "=", "t4.pid", "WHERE", "t2.name", "=", "``", "University", "of", "Michigan", "''", "AND", "t4.year", ">", "2000", ";"], "query_toks_no_value": ["select", "t4", ".", "title", "from", "organization", "as", "t2", "join", "author", "as", "t1", "on", "t2", ".", "oid", "=", "t1", ".", "oid", "join", "writes", "as", "t3", "on", "t3", ".", "aid", "=", "t1", ".", "aid", "join", "publication", "as", "t4", "on", "t3", ".", "pid", "=", "t4", ".", "pid", "where", "t2", ".", "name", "=", "value", "and", "t4", ".", "year", ">", "value"], "question": "return me all the papers after 2000 in \" University of Michigan \" .", "question_toks": ["return", "me", "all", "the", "papers", "after", "2000", "in", "``", "University", "of", "Michigan", "``", "."], "guid": 4413}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the number of papers in VLDB conference containing keyword \" Information Retrieval \" .", "sql": "SELECT COUNT ( DISTINCT t4.title ) FROM publication_keyword AS t3 JOIN keyword AS t1 ON t3.kid  =  t1.kid JOIN publication AS t4 ON t4.pid  =  t3.pid JOIN conference AS t2 ON t4.cid  =  t2.cid WHERE t2.name  =  \"VLDB\" AND t1.keyword  =  \"Information Retrieval\";", "example": {"db_id": "academic", "query": "SELECT COUNT ( DISTINCT t4.title ) FROM publication_keyword AS t3 JOIN keyword AS t1 ON t3.kid  =  t1.kid JOIN publication AS t4 ON t4.pid  =  t3.pid JOIN conference AS t2 ON t4.cid  =  t2.cid WHERE t2.name  =  \"VLDB\" AND t1.keyword  =  \"Information Retrieval\";", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "t4.title", ")", "FROM", "publication_keyword", "AS", "t3", "JOIN", "keyword", "AS", "t1", "ON", "t3.kid", "=", "t1.kid", "JOIN", "publication", "AS", "t4", "ON", "t4.pid", "=", "t3.pid", "JOIN", "conference", "AS", "t2", "ON", "t4.cid", "=", "t2.cid", "WHERE", "t2.name", "=", "``", "VLDB", "''", "AND", "t1.keyword", "=", "``", "Information", "Retrieval", "''", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "t4", ".", "title", ")", "from", "publication_keyword", "as", "t3", "join", "keyword", "as", "t1", "on", "t3", ".", "kid", "=", "t1", ".", "kid", "join", "publication", "as", "t4", "on", "t4", ".", "pid", "=", "t3", ".", "pid", "join", "conference", "as", "t2", "on", "t4", ".", "cid", "=", "t2", ".", "cid", "where", "t2", ".", "name", "=", "value", "and", "t1", ".", "keyword", "=", "value"], "question": "return me the number of papers in VLDB conference containing keyword \" Information Retrieval \" .", "question_toks": ["return", "me", "the", "number", "of", "papers", "in", "VLDB", "conference", "containing", "keyword", "``", "Information", "Retrieval", "``", "."], "guid": 4414}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me all the researchers in \" University of Michigan \" .", "sql": "SELECT t1.name FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid WHERE t2.name  =  \"University of Michigan\";", "example": {"db_id": "academic", "query": "SELECT t1.name FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid WHERE t2.name  =  \"University of Michigan\";", "query_toks": ["SELECT", "t1.name", "FROM", "organization", "AS", "t2", "JOIN", "author", "AS", "t1", "ON", "t2.oid", "=", "t1.oid", "WHERE", "t2.name", "=", "``", "University", "of", "Michigan", "''", ";"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "organization", "as", "t2", "join", "author", "as", "t1", "on", "t2", ".", "oid", "=", "t1", ".", "oid", "where", "t2", ".", "name", "=", "value"], "question": "return me all the researchers in \" University of Michigan \" .", "question_toks": ["return", "me", "all", "the", "researchers", "in", "``", "University", "of", "Michigan", "``", "."], "guid": 4415}}
{"text": "workshop: Workshop_ID, Date, Venue, Name; submission: Submission_ID, Scores, Author, College; Acceptance: Submission_ID, Workshop_ID, Result | List the authors of submissions in ascending order of scores.", "sql": "SELECT Author FROM submission ORDER BY Scores ASC", "example": {"db_id": "workshop_paper", "query": "SELECT Author FROM submission ORDER BY Scores ASC", "query_toks": ["SELECT", "Author", "FROM", "submission", "ORDER", "BY", "Scores", "ASC"], "query_toks_no_value": ["select", "author", "from", "submission", "order", "by", "scores", "asc"], "question": "List the authors of submissions in ascending order of scores.", "question_toks": ["List", "the", "authors", "of", "submissions", "in", "ascending", "order", "of", "scores", "."], "guid": 4416}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | venue for Trophic Cascade", "sql": "SELECT DISTINCT t3.venueid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Trophic Cascade\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.venueid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Trophic Cascade\";", "query_toks": ["SELECT", "DISTINCT", "t3.venueid", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "WHERE", "t1.keyphrasename", "=", "``", "Trophic", "Cascade", "''", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "venueid", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "where", "t1", ".", "keyphrasename", "=", "value"], "question": "venue for Trophic Cascade", "question_toks": ["venue", "for", "Trophic", "Cascade"], "guid": 4417}}
{"text": "workshop: Workshop_ID, Date, Venue, Name; submission: Submission_ID, Scores, Author, College; Acceptance: Submission_ID, Workshop_ID, Result | Show the names of authors from college \"Florida\" or \"Temple\"", "sql": "SELECT Author FROM submission WHERE College  =  \"Florida\" OR College  =  \"Temple\"", "example": {"db_id": "workshop_paper", "query": "SELECT Author FROM submission WHERE College  =  \"Florida\" OR College  =  \"Temple\"", "query_toks": ["SELECT", "Author", "FROM", "submission", "WHERE", "College", "=", "``", "Florida", "''", "OR", "College", "=", "``", "Temple", "''"], "query_toks_no_value": ["select", "author", "from", "submission", "where", "college", "=", "value", "or", "college", "=", "value"], "question": "Show the names of authors from college \"Florida\" or \"Temple\"", "question_toks": ["Show", "the", "names", "of", "authors", "from", "college", "``", "Florida", "''", "or", "``", "Temple", "''"], "guid": 4418}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the authors who have papers in VLDB conference before 2002 .", "sql": "SELECT t1.name FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t2.name  =  \"VLDB\" AND t4.year  <  2002;", "example": {"db_id": "academic", "query": "SELECT t1.name FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t2.name  =  \"VLDB\" AND t4.year  <  2002;", "query_toks": ["SELECT", "t1.name", "FROM", "publication", "AS", "t4", "JOIN", "conference", "AS", "t2", "ON", "t4.cid", "=", "t2.cid", "JOIN", "writes", "AS", "t3", "ON", "t3.pid", "=", "t4.pid", "JOIN", "author", "AS", "t1", "ON", "t3.aid", "=", "t1.aid", "WHERE", "t2.name", "=", "``", "VLDB", "''", "AND", "t4.year", "<", "2002", ";"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "publication", "as", "t4", "join", "conference", "as", "t2", "on", "t4", ".", "cid", "=", "t2", ".", "cid", "join", "writes", "as", "t3", "on", "t3", ".", "pid", "=", "t4", ".", "pid", "join", "author", "as", "t1", "on", "t3", ".", "aid", "=", "t1", ".", "aid", "where", "t2", ".", "name", "=", "value", "and", "t4", ".", "year", "<", "value"], "question": "return me the authors who have papers in VLDB conference before 2002 .", "question_toks": ["return", "me", "the", "authors", "who", "have", "papers", "in", "VLDB", "conference", "before", "2002", "."], "guid": 4419}}
{"text": "item: i_id, title; review: a_id, u_id, i_id, rating, rank; useracct: u_id, name; trust: source_u_id, target_u_id, trust | How many different users wrote some reviews?", "sql": "SELECT count(DISTINCT u_id) FROM review", "example": {"db_id": "epinions_1", "query": "SELECT count(DISTINCT u_id) FROM review", "query_toks": ["SELECT", "count", "(", "DISTINCT", "u_id", ")", "FROM", "review"], "query_toks_no_value": ["select", "count", "(", "distinct", "u_id", ")", "from", "review"], "question": "How many different users wrote some reviews?", "question_toks": ["How", "many", "different", "users", "wrote", "some", "reviews", "?"], "guid": 4420}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the number of papers in \" University of Michigan \" .", "sql": "SELECT COUNT ( DISTINCT t4.title ) FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid JOIN writes AS t3 ON t3.aid  =  t1.aid JOIN publication AS t4 ON t3.pid  =  t4.pid WHERE t2.name  =  \"University of Michigan\";", "example": {"db_id": "academic", "query": "SELECT COUNT ( DISTINCT t4.title ) FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid JOIN writes AS t3 ON t3.aid  =  t1.aid JOIN publication AS t4 ON t3.pid  =  t4.pid WHERE t2.name  =  \"University of Michigan\";", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "t4.title", ")", "FROM", "organization", "AS", "t2", "JOIN", "author", "AS", "t1", "ON", "t2.oid", "=", "t1.oid", "JOIN", "writes", "AS", "t3", "ON", "t3.aid", "=", "t1.aid", "JOIN", "publication", "AS", "t4", "ON", "t3.pid", "=", "t4.pid", "WHERE", "t2.name", "=", "``", "University", "of", "Michigan", "''", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "t4", ".", "title", ")", "from", "organization", "as", "t2", "join", "author", "as", "t1", "on", "t2", ".", "oid", "=", "t1", ".", "oid", "join", "writes", "as", "t3", "on", "t3", ".", "aid", "=", "t1", ".", "aid", "join", "publication", "as", "t4", "on", "t3", ".", "pid", "=", "t4", ".", "pid", "where", "t2", ".", "name", "=", "value"], "question": "return me the number of papers in \" University of Michigan \" .", "question_toks": ["return", "me", "the", "number", "of", "papers", "in", "``", "University", "of", "Michigan", "``", "."], "guid": 4421}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | authors who collaborated with Noah A Smith", "sql": "SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Noah A Smith\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Noah A Smith\";", "query_toks": ["SELECT", "DISTINCT", "t1.authorid", "FROM", "writes", "AS", "t3", "JOIN", "author", "AS", "t2", "ON", "t3.authorid", "=", "t2.authorid", "JOIN", "writes", "AS", "t4", "ON", "t4.paperid", "=", "t3.paperid", "JOIN", "author", "AS", "t1", "ON", "t4.authorid", "=", "t1.authorid", "WHERE", "t2.authorname", "=", "``", "Noah", "A", "Smith", "''", ";"], "query_toks_no_value": ["select", "distinct", "t1", ".", "authorid", "from", "writes", "as", "t3", "join", "author", "as", "t2", "on", "t3", ".", "authorid", "=", "t2", ".", "authorid", "join", "writes", "as", "t4", "on", "t4", ".", "paperid", "=", "t3", ".", "paperid", "join", "author", "as", "t1", "on", "t4", ".", "authorid", "=", "t1", ".", "authorid", "where", "t2", ".", "authorname", "=", "value"], "question": "authors who collaborated with Noah A Smith", "question_toks": ["authors", "who", "collaborated", "with", "Noah", "A", "Smith"], "guid": 4422}}
{"text": "workshop: Workshop_ID, Date, Venue, Name; submission: Submission_ID, Scores, Author, College; Acceptance: Submission_ID, Workshop_ID, Result | Show the date and venue of each workshop in ascending alphabetical order of the venue.", "sql": "SELECT Date ,  Venue FROM workshop ORDER BY Venue", "example": {"db_id": "workshop_paper", "query": "SELECT Date ,  Venue FROM workshop ORDER BY Venue", "query_toks": ["SELECT", "Date", ",", "Venue", "FROM", "workshop", "ORDER", "BY", "Venue"], "query_toks_no_value": ["select", "date", ",", "venue", "from", "workshop", "order", "by", "venue"], "question": "Show the date and venue of each workshop in ascending alphabetical order of the venue.", "question_toks": ["Show", "the", "date", "and", "venue", "of", "each", "workshop", "in", "ascending", "alphabetical", "order", "of", "the", "venue", "."], "guid": 4423}}
{"text": "journal: Journal_ID, Date, Theme, Sales; editor: Editor_ID, Name, Age; journal_committee: Editor_ID, Journal_ID, Work_Type | How many editors are there?", "sql": "SELECT count(*) FROM editor", "example": {"db_id": "journal_committee", "query": "SELECT count(*) FROM editor", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "editor"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "editor"], "question": "How many editors are there?", "question_toks": ["How", "many", "editors", "are", "there", "?"], "guid": 4424}}
{"text": "Document_Types: document_type_code, document_description; Documents: document_id, document_type_code, grant_id, sent_date, response_received_date, other_details; Grants: grant_id, organisation_id, grant_amount, grant_start_date, grant_end_date, other_details; Organisation_Types: organisation_type, organisation_type_description; Organisations: organisation_id, organisation_type, organisation_details; Project_Outcomes: project_id, outcome_code, outcome_details; Project_Staff: staff_id, project_id, role_code, date_from, date_to, other_details; Projects: project_id, organisation_id, project_details; Research_Outcomes: outcome_code, outcome_description; Research_Staff: staff_id, employer_organisation_id, staff_details | Which organisation hired the most number of research staff? List the organisation id, type and detail.", "sql": "SELECT T1.organisation_id ,  T1.organisation_type ,  T1.organisation_details FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "tracking_grants_for_research", "query": "SELECT T1.organisation_id ,  T1.organisation_type ,  T1.organisation_details FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.organisation_id", ",", "T1.organisation_type", ",", "T1.organisation_details", "FROM", "Organisations", "AS", "T1", "JOIN", "Research_Staff", "AS", "T2", "ON", "T1.organisation_id", "=", "T2.employer_organisation_id", "GROUP", "BY", "T1.organisation_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "organisation_id", ",", "t1", ".", "organisation_type", ",", "t1", ".", "organisation_details", "from", "organisations", "as", "t1", "join", "research_staff", "as", "t2", "on", "t1", ".", "organisation_id", "=", "t2", ".", "employer_organisation_id", "group", "by", "t1", ".", "organisation_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which organisation hired the most number of research staff? List the organisation id, type and detail.", "question_toks": ["Which", "organisation", "hired", "the", "most", "number", "of", "research", "staff", "?", "List", "the", "organisation", "id", ",", "type", "and", "detail", "."], "guid": 4425}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | count of ACL papers by author", "sql": "SELECT DISTINCT COUNT ( t2.paperid )  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  \"ACL\" GROUP BY t1.authorid;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( t2.paperid )  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  \"ACL\" GROUP BY t1.authorid;", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "t2.paperid", ")", ",", "t1.authorid", "FROM", "venue", "AS", "t3", "JOIN", "paper", "AS", "t2", "ON", "t3.venueid", "=", "t2.venueid", "JOIN", "writes", "AS", "t1", "ON", "t1.paperid", "=", "t2.paperid", "WHERE", "t3.venuename", "=", "``", "ACL", "''", "GROUP", "BY", "t1.authorid", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "t2", ".", "paperid", ")", ",", "t1", ".", "authorid", "from", "venue", "as", "t3", "join", "paper", "as", "t2", "on", "t3", ".", "venueid", "=", "t2", ".", "venueid", "join", "writes", "as", "t1", "on", "t1", ".", "paperid", "=", "t2", ".", "paperid", "where", "t3", ".", "venuename", "=", "value", "group", "by", "t1", ".", "authorid"], "question": "count of ACL papers by author", "question_toks": ["count", "of", "ACL", "papers", "by", "author"], "guid": 4426}}
{"text": "Scientists: SSN, Name; Projects: Code, Name, Hours; AssignedTo: Scientist, Project | What are the names of scientists who are not working on the project with the most hours?", "sql": "SELECT name FROM scientists EXCEPT SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.hours  =  (SELECT max(hours) FROM projects)", "example": {"db_id": "scientist_1", "query": "SELECT name FROM scientists EXCEPT SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.hours  =  (SELECT max(hours) FROM projects)", "query_toks": ["SELECT", "name", "FROM", "scientists", "EXCEPT", "SELECT", "T3.name", "FROM", "assignedto", "AS", "T1", "JOIN", "projects", "AS", "T2", "ON", "T1.project", "=", "T2.code", "JOIN", "scientists", "AS", "T3", "ON", "T1.scientist", "=", "T3.SSN", "WHERE", "T2.hours", "=", "(", "SELECT", "max", "(", "hours", ")", "FROM", "projects", ")"], "query_toks_no_value": ["select", "name", "from", "scientists", "except", "select", "t3", ".", "name", "from", "assignedto", "as", "t1", "join", "projects", "as", "t2", "on", "t1", ".", "project", "=", "t2", ".", "code", "join", "scientists", "as", "t3", "on", "t1", ".", "scientist", "=", "t3", ".", "ssn", "where", "t2", ".", "hours", "=", "(", "select", "max", "(", "hours", ")", "from", "projects", ")"], "question": "What are the names of scientists who are not working on the project with the most hours?", "question_toks": ["What", "are", "the", "names", "of", "scientists", "who", "are", "not", "working", "on", "the", "project", "with", "the", "most", "hours", "?"], "guid": 4427}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | most common topics at NIPS 2015", "sql": "SELECT DISTINCT COUNT ( t3.paperid )  ,  t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t3.year  =  2015 AND t4.venuename  =  \"NIPS\" GROUP BY t1.keyphraseid ORDER BY COUNT ( t3.paperid ) DESC;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( t3.paperid )  ,  t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t3.year  =  2015 AND t4.venuename  =  \"NIPS\" GROUP BY t1.keyphraseid ORDER BY COUNT ( t3.paperid ) DESC;", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "t3.paperid", ")", ",", "t1.keyphraseid", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "JOIN", "venue", "AS", "t4", "ON", "t4.venueid", "=", "t3.venueid", "WHERE", "t3.year", "=", "2015", "AND", "t4.venuename", "=", "``", "NIPS", "''", "GROUP", "BY", "t1.keyphraseid", "ORDER", "BY", "COUNT", "(", "t3.paperid", ")", "DESC", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "t3", ".", "paperid", ")", ",", "t1", ".", "keyphraseid", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "join", "venue", "as", "t4", "on", "t4", ".", "venueid", "=", "t3", ".", "venueid", "where", "t3", ".", "year", "=", "value", "and", "t4", ".", "venuename", "=", "value", "group", "by", "t1", ".", "keyphraseid", "order", "by", "count", "(", "t3", ".", "paperid", ")", "desc"], "question": "most common topics at NIPS 2015", "question_toks": ["most", "common", "topics", "at", "NIPS", "2015"], "guid": 4428}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the number of keywords in the papers of \" University of Michigan \" .", "sql": "SELECT COUNT ( DISTINCT t1.keyword ) FROM organization AS t6 JOIN author AS t2 ON t6.oid  =  t2.oid JOIN writes AS t4 ON t4.aid  =  t2.aid JOIN publication AS t5 ON t4.pid  =  t5.pid JOIN publication_keyword AS t3 ON t5.pid  =  t3.pid JOIN keyword AS t1 ON t3.kid  =  t1.kid WHERE t6.name  =  \"University of Michigan\";", "example": {"db_id": "academic", "query": "SELECT COUNT ( DISTINCT t1.keyword ) FROM organization AS t6 JOIN author AS t2 ON t6.oid  =  t2.oid JOIN writes AS t4 ON t4.aid  =  t2.aid JOIN publication AS t5 ON t4.pid  =  t5.pid JOIN publication_keyword AS t3 ON t5.pid  =  t3.pid JOIN keyword AS t1 ON t3.kid  =  t1.kid WHERE t6.name  =  \"University of Michigan\";", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "t1.keyword", ")", "FROM", "organization", "AS", "t6", "JOIN", "author", "AS", "t2", "ON", "t6.oid", "=", "t2.oid", "JOIN", "writes", "AS", "t4", "ON", "t4.aid", "=", "t2.aid", "JOIN", "publication", "AS", "t5", "ON", "t4.pid", "=", "t5.pid", "JOIN", "publication_keyword", "AS", "t3", "ON", "t5.pid", "=", "t3.pid", "JOIN", "keyword", "AS", "t1", "ON", "t3.kid", "=", "t1.kid", "WHERE", "t6.name", "=", "``", "University", "of", "Michigan", "''", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "t1", ".", "keyword", ")", "from", "organization", "as", "t6", "join", "author", "as", "t2", "on", "t6", ".", "oid", "=", "t2", ".", "oid", "join", "writes", "as", "t4", "on", "t4", ".", "aid", "=", "t2", ".", "aid", "join", "publication", "as", "t5", "on", "t4", ".", "pid", "=", "t5", ".", "pid", "join", "publication_keyword", "as", "t3", "on", "t5", ".", "pid", "=", "t3", ".", "pid", "join", "keyword", "as", "t1", "on", "t3", ".", "kid", "=", "t1", ".", "kid", "where", "t6", ".", "name", "=", "value"], "question": "return me the number of keywords in the papers of \" University of Michigan \" .", "question_toks": ["return", "me", "the", "number", "of", "keywords", "in", "the", "papers", "of", "``", "University", "of", "Michigan", "``", "."], "guid": 4429}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | What topic does Luke Zettlemoyer write about ?", "sql": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";", "query_toks": ["SELECT", "DISTINCT", "t1.keyphraseid", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "JOIN", "writes", "AS", "t4", "ON", "t4.paperid", "=", "t3.paperid", "JOIN", "author", "AS", "t5", "ON", "t4.authorid", "=", "t5.authorid", "WHERE", "t5.authorname", "=", "``", "Luke", "Zettlemoyer", "''", ";"], "query_toks_no_value": ["select", "distinct", "t1", ".", "keyphraseid", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "join", "writes", "as", "t4", "on", "t4", ".", "paperid", "=", "t3", ".", "paperid", "join", "author", "as", "t5", "on", "t4", ".", "authorid", "=", "t5", ".", "authorid", "where", "t5", ".", "authorname", "=", "value"], "question": "What topic does Luke Zettlemoyer write about ?", "question_toks": ["What", "topic", "does", "Luke", "Zettlemoyer", "write", "about", "?"], "guid": 4430}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | what datasets did jitendra malik use ?", "sql": "SELECT DISTINCT t2.datasetid FROM paper AS t3 JOIN paperdataset AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"jitendra malik\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t2.datasetid FROM paper AS t3 JOIN paperdataset AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"jitendra malik\";", "query_toks": ["SELECT", "DISTINCT", "t2.datasetid", "FROM", "paper", "AS", "t3", "JOIN", "paperdataset", "AS", "t2", "ON", "t3.paperid", "=", "t2.paperid", "JOIN", "writes", "AS", "t4", "ON", "t4.paperid", "=", "t3.paperid", "JOIN", "author", "AS", "t1", "ON", "t4.authorid", "=", "t1.authorid", "WHERE", "t1.authorname", "=", "``", "jitendra", "malik", "''", ";"], "query_toks_no_value": ["select", "distinct", "t2", ".", "datasetid", "from", "paper", "as", "t3", "join", "paperdataset", "as", "t2", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "join", "writes", "as", "t4", "on", "t4", ".", "paperid", "=", "t3", ".", "paperid", "join", "author", "as", "t1", "on", "t4", ".", "authorid", "=", "t1", ".", "authorid", "where", "t1", ".", "authorname", "=", "value"], "question": "what datasets did jitendra malik use ?", "question_toks": ["what", "datasets", "did", "jitendra", "malik", "use", "?"], "guid": 4431}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | who published the most in syntactic parsing ?", "sql": "SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  \"syntactic parsing\" GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  \"syntactic parsing\" GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "t4.paperid", ")", ",", "t3.authorid", "FROM", "paperkeyphrase", "AS", "t1", "JOIN", "keyphrase", "AS", "t2", "ON", "t1.keyphraseid", "=", "t2.keyphraseid", "JOIN", "paper", "AS", "t4", "ON", "t4.paperid", "=", "t1.paperid", "JOIN", "writes", "AS", "t3", "ON", "t3.paperid", "=", "t4.paperid", "WHERE", "t2.keyphrasename", "=", "``", "syntactic", "parsing", "''", "GROUP", "BY", "t3.authorid", "ORDER", "BY", "COUNT", "(", "t4.paperid", ")", "DESC", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "t4", ".", "paperid", ")", ",", "t3", ".", "authorid", "from", "paperkeyphrase", "as", "t1", "join", "keyphrase", "as", "t2", "on", "t1", ".", "keyphraseid", "=", "t2", ".", "keyphraseid", "join", "paper", "as", "t4", "on", "t4", ".", "paperid", "=", "t1", ".", "paperid", "join", "writes", "as", "t3", "on", "t3", ".", "paperid", "=", "t4", ".", "paperid", "where", "t2", ".", "keyphrasename", "=", "value", "group", "by", "t3", ".", "authorid", "order", "by", "count", "(", "t4", ".", "paperid", ")", "desc"], "question": "who published the most in syntactic parsing ?", "question_toks": ["who", "published", "the", "most", "in", "syntactic", "parsing", "?"], "guid": 4432}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me all the organizations in \" North America \" .", "sql": "SELECT name FROM organization WHERE continent  =  \"North America\";", "example": {"db_id": "academic", "query": "SELECT name FROM organization WHERE continent  =  \"North America\";", "query_toks": ["SELECT", "name", "FROM", "organization", "WHERE", "continent", "=", "``", "North", "America", "''", ";"], "query_toks_no_value": ["select", "name", "from", "organization", "where", "continent", "=", "value"], "question": "return me all the organizations in \" North America \" .", "question_toks": ["return", "me", "all", "the", "organizations", "in", "``", "North", "America", "``", "."], "guid": 4433}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | Current research on deep learning", "sql": "SELECT DISTINCT t3.paperid  ,  t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\" ORDER BY t3.year DESC;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid  ,  t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\" ORDER BY t3.year DESC;", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", ",", "t3.year", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "WHERE", "t1.keyphrasename", "=", "``", "deep", "learning", "''", "ORDER", "BY", "t3.year", "DESC", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", ",", "t3", ".", "year", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "where", "t1", ".", "keyphrasename", "=", "value", "order", "by", "t3", ".", "year", "desc"], "question": "Current research on deep learning", "question_toks": ["Current", "research", "on", "deep", "learning"], "guid": 4434}}
{"text": "journal: Journal_ID, Date, Theme, Sales; editor: Editor_ID, Name, Age; journal_committee: Editor_ID, Journal_ID, Work_Type | List the date, theme and sales of the journal which did not have any of the listed editors serving on committee.", "sql": "SELECT date ,  theme ,  sales FROM journal EXCEPT SELECT T1.date ,  T1.theme ,  T1.sales FROM journal AS T1 JOIN journal_committee AS T2 ON T1.journal_ID  =  T2.journal_ID", "example": {"db_id": "journal_committee", "query": "SELECT date ,  theme ,  sales FROM journal EXCEPT SELECT T1.date ,  T1.theme ,  T1.sales FROM journal AS T1 JOIN journal_committee AS T2 ON T1.journal_ID  =  T2.journal_ID", "query_toks": ["SELECT", "date", ",", "theme", ",", "sales", "FROM", "journal", "EXCEPT", "SELECT", "T1.date", ",", "T1.theme", ",", "T1.sales", "FROM", "journal", "AS", "T1", "JOIN", "journal_committee", "AS", "T2", "ON", "T1.journal_ID", "=", "T2.journal_ID"], "query_toks_no_value": ["select", "date", ",", "theme", ",", "sales", "from", "journal", "except", "select", "t1", ".", "date", ",", "t1", ".", "theme", ",", "t1", ".", "sales", "from", "journal", "as", "t1", "join", "journal_committee", "as", "t2", "on", "t1", ".", "journal_id", "=", "t2", ".", "journal_id"], "question": "List the date, theme and sales of the journal which did not have any of the listed editors serving on committee.", "question_toks": ["List", "the", "date", ",", "theme", "and", "sales", "of", "the", "journal", "which", "did", "not", "have", "any", "of", "the", "listed", "editors", "serving", "on", "committee", "."], "guid": 4435}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | How many paper has Ed Desmond written about Semantic Parsing ?", "sql": "SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperkeyphrase AS t1 JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid JOIN writes AS t3 ON t3.paperid  =  t1.paperid JOIN author AS t2 ON t3.authorid  =  t2.authorid WHERE t2.authorname  =  \"Ed Desmond\" AND t4.keyphrasename  =  \"Semantic Parsing\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperkeyphrase AS t1 JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid JOIN writes AS t3 ON t3.paperid  =  t1.paperid JOIN author AS t2 ON t3.authorid  =  t2.authorid WHERE t2.authorname  =  \"Ed Desmond\" AND t4.keyphrasename  =  \"Semantic Parsing\";", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "DISTINCT", "t3.paperid", ")", "FROM", "paperkeyphrase", "AS", "t1", "JOIN", "keyphrase", "AS", "t4", "ON", "t1.keyphraseid", "=", "t4.keyphraseid", "JOIN", "writes", "AS", "t3", "ON", "t3.paperid", "=", "t1.paperid", "JOIN", "author", "AS", "t2", "ON", "t3.authorid", "=", "t2.authorid", "WHERE", "t2.authorname", "=", "``", "Ed", "Desmond", "''", "AND", "t4.keyphrasename", "=", "``", "Semantic", "Parsing", "''", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "distinct", "t3", ".", "paperid", ")", "from", "paperkeyphrase", "as", "t1", "join", "keyphrase", "as", "t4", "on", "t1", ".", "keyphraseid", "=", "t4", ".", "keyphraseid", "join", "writes", "as", "t3", "on", "t3", ".", "paperid", "=", "t1", ".", "paperid", "join", "author", "as", "t2", "on", "t3", ".", "authorid", "=", "t2", ".", "authorid", "where", "t2", ".", "authorname", "=", "value", "and", "t4", ".", "keyphrasename", "=", "value"], "question": "How many paper has Ed Desmond written about Semantic Parsing ?", "question_toks": ["How", "many", "paper", "has", "Ed", "Desmond", "written", "about", "Semantic", "Parsing", "?"], "guid": 4436}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the number of papers published in the VLDB conference in each year .", "sql": "SELECT COUNT ( DISTINCT t2.title )  ,  t2.year FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\" GROUP BY t2.year;", "example": {"db_id": "academic", "query": "SELECT COUNT ( DISTINCT t2.title )  ,  t2.year FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\" GROUP BY t2.year;", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "t2.title", ")", ",", "t2.year", "FROM", "publication", "AS", "t2", "JOIN", "conference", "AS", "t1", "ON", "t2.cid", "=", "t1.cid", "WHERE", "t1.name", "=", "``", "VLDB", "''", "GROUP", "BY", "t2.year", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "t2", ".", "title", ")", ",", "t2", ".", "year", "from", "publication", "as", "t2", "join", "conference", "as", "t1", "on", "t2", ".", "cid", "=", "t1", ".", "cid", "where", "t1", ".", "name", "=", "value", "group", "by", "t2", ".", "year"], "question": "return me the number of papers published in the VLDB conference in each year .", "question_toks": ["return", "me", "the", "number", "of", "papers", "published", "in", "the", "VLDB", "conference", "in", "each", "year", "."], "guid": 4437}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | What authors wrote papers about Bacterial Wilt in 2016 ?", "sql": "SELECT DISTINCT t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid JOIN author AS t5 ON t3.authorid  =  t5.authorid WHERE t2.keyphrasename  =  \"Bacterial Wilt\" AND t4.year  =  2016;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid JOIN author AS t5 ON t3.authorid  =  t5.authorid WHERE t2.keyphrasename  =  \"Bacterial Wilt\" AND t4.year  =  2016;", "query_toks": ["SELECT", "DISTINCT", "t3.authorid", "FROM", "paperkeyphrase", "AS", "t1", "JOIN", "keyphrase", "AS", "t2", "ON", "t1.keyphraseid", "=", "t2.keyphraseid", "JOIN", "paper", "AS", "t4", "ON", "t4.paperid", "=", "t1.paperid", "JOIN", "writes", "AS", "t3", "ON", "t3.paperid", "=", "t4.paperid", "JOIN", "author", "AS", "t5", "ON", "t3.authorid", "=", "t5.authorid", "WHERE", "t2.keyphrasename", "=", "``", "Bacterial", "Wilt", "''", "AND", "t4.year", "=", "2016", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "authorid", "from", "paperkeyphrase", "as", "t1", "join", "keyphrase", "as", "t2", "on", "t1", ".", "keyphraseid", "=", "t2", ".", "keyphraseid", "join", "paper", "as", "t4", "on", "t4", ".", "paperid", "=", "t1", ".", "paperid", "join", "writes", "as", "t3", "on", "t3", ".", "paperid", "=", "t4", ".", "paperid", "join", "author", "as", "t5", "on", "t3", ".", "authorid", "=", "t5", ".", "authorid", "where", "t2", ".", "keyphrasename", "=", "value", "and", "t4", ".", "year", "=", "value"], "question": "What authors wrote papers about Bacterial Wilt in 2016 ?", "question_toks": ["What", "authors", "wrote", "papers", "about", "Bacterial", "Wilt", "in", "2016", "?"], "guid": 4438}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | In which conferences does Daniella Coelho typically publish ?", "sql": "SELECT DISTINCT t3.venueid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Daniella Coelho\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.venueid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Daniella Coelho\";", "query_toks": ["SELECT", "DISTINCT", "t3.venueid", "FROM", "writes", "AS", "t2", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "JOIN", "paper", "AS", "t3", "ON", "t2.paperid", "=", "t3.paperid", "WHERE", "t1.authorname", "=", "``", "Daniella", "Coelho", "''", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "venueid", "from", "writes", "as", "t2", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "join", "paper", "as", "t3", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "where", "t1", ".", "authorname", "=", "value"], "question": "In which conferences does Daniella Coelho typically publish ?", "question_toks": ["In", "which", "conferences", "does", "Daniella", "Coelho", "typically", "publish", "?"], "guid": 4439}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | what keyphrase does Brian DeRenzi write about that gets most citations ?", "sql": "SELECT DISTINCT t1.keyphrasename  ,  SUM ( t3.numcitedby ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Brian DeRenzi\" GROUP BY t1.keyphrasename ORDER BY SUM ( t3.numcitedby ) DESC;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t1.keyphrasename  ,  SUM ( t3.numcitedby ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Brian DeRenzi\" GROUP BY t1.keyphrasename ORDER BY SUM ( t3.numcitedby ) DESC;", "query_toks": ["SELECT", "DISTINCT", "t1.keyphrasename", ",", "SUM", "(", "t3.numcitedby", ")", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "JOIN", "writes", "AS", "t4", "ON", "t4.paperid", "=", "t3.paperid", "JOIN", "author", "AS", "t5", "ON", "t4.authorid", "=", "t5.authorid", "WHERE", "t5.authorname", "=", "``", "Brian", "DeRenzi", "''", "GROUP", "BY", "t1.keyphrasename", "ORDER", "BY", "SUM", "(", "t3.numcitedby", ")", "DESC", ";"], "query_toks_no_value": ["select", "distinct", "t1", ".", "keyphrasename", ",", "sum", "(", "t3", ".", "numcitedby", ")", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "join", "writes", "as", "t4", "on", "t4", ".", "paperid", "=", "t3", ".", "paperid", "join", "author", "as", "t5", "on", "t4", ".", "authorid", "=", "t5", ".", "authorid", "where", "t5", ".", "authorname", "=", "value", "group", "by", "t1", ".", "keyphrasename", "order", "by", "sum", "(", "t3", ".", "numcitedby", ")", "desc"], "question": "what keyphrase does Brian DeRenzi write about that gets most citations ?", "question_toks": ["what", "keyphrase", "does", "Brian", "DeRenzi", "write", "about", "that", "gets", "most", "citations", "?"], "guid": 4440}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | How many papers David M. Blei has in AISTATS ?", "sql": "SELECT DISTINCT COUNT ( t3.paperid ) FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"David M. Blei\" AND t4.venuename  =  \"AISTATS\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( t3.paperid ) FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"David M. Blei\" AND t4.venuename  =  \"AISTATS\";", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "t3.paperid", ")", "FROM", "venue", "AS", "t4", "JOIN", "paper", "AS", "t3", "ON", "t4.venueid", "=", "t3.venueid", "JOIN", "writes", "AS", "t2", "ON", "t2.paperid", "=", "t3.paperid", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "WHERE", "t1.authorname", "=", "``", "David", "M.", "Blei", "''", "AND", "t4.venuename", "=", "``", "AISTATS", "''", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "t3", ".", "paperid", ")", "from", "venue", "as", "t4", "join", "paper", "as", "t3", "on", "t4", ".", "venueid", "=", "t3", ".", "venueid", "join", "writes", "as", "t2", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "where", "t1", ".", "authorname", "=", "value", "and", "t4", ".", "venuename", "=", "value"], "question": "How many papers David M. Blei has in AISTATS ?", "question_toks": ["How", "many", "papers", "David", "M.", "Blei", "has", "in", "AISTATS", "?"], "guid": 4441}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | Show me some recent papers on deep learning ?", "sql": "SELECT DISTINCT t3.paperid  ,  t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\" ORDER BY t3.year DESC;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid  ,  t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\" ORDER BY t3.year DESC;", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", ",", "t3.year", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "WHERE", "t1.keyphrasename", "=", "``", "deep", "learning", "''", "ORDER", "BY", "t3.year", "DESC", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", ",", "t3", ".", "year", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "where", "t1", ".", "keyphrasename", "=", "value", "order", "by", "t3", ".", "year", "desc"], "question": "Show me some recent papers on deep learning ?", "question_toks": ["Show", "me", "some", "recent", "papers", "on", "deep", "learning", "?"], "guid": 4442}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | who does Noah A Smith author with ?", "sql": "SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Noah A Smith\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Noah A Smith\";", "query_toks": ["SELECT", "DISTINCT", "t1.authorid", "FROM", "writes", "AS", "t3", "JOIN", "author", "AS", "t2", "ON", "t3.authorid", "=", "t2.authorid", "JOIN", "writes", "AS", "t4", "ON", "t4.paperid", "=", "t3.paperid", "JOIN", "author", "AS", "t1", "ON", "t4.authorid", "=", "t1.authorid", "WHERE", "t2.authorname", "=", "``", "Noah", "A", "Smith", "''", ";"], "query_toks_no_value": ["select", "distinct", "t1", ".", "authorid", "from", "writes", "as", "t3", "join", "author", "as", "t2", "on", "t3", ".", "authorid", "=", "t2", ".", "authorid", "join", "writes", "as", "t4", "on", "t4", ".", "paperid", "=", "t3", ".", "paperid", "join", "author", "as", "t1", "on", "t4", ".", "authorid", "=", "t1", ".", "authorid", "where", "t2", ".", "authorname", "=", "value"], "question": "who does Noah A Smith author with ?", "question_toks": ["who", "does", "Noah", "A", "Smith", "author", "with", "?"], "guid": 4443}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | acl papers in 2012 in Parsing", "sql": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Parsing\" AND t3.year  =  2012 AND t4.venuename  =  \"acl\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Parsing\" AND t3.year  =  2012 AND t4.venuename  =  \"acl\";", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "JOIN", "venue", "AS", "t4", "ON", "t4.venueid", "=", "t3.venueid", "WHERE", "t1.keyphrasename", "=", "``", "Parsing", "''", "AND", "t3.year", "=", "2012", "AND", "t4.venuename", "=", "``", "acl", "''", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "join", "venue", "as", "t4", "on", "t4", ".", "venueid", "=", "t3", ".", "venueid", "where", "t1", ".", "keyphrasename", "=", "value", "and", "t3", ".", "year", "=", "value", "and", "t4", ".", "venuename", "=", "value"], "question": "acl papers in 2012 in Parsing", "question_toks": ["acl", "papers", "in", "2012", "in", "Parsing"], "guid": 4444}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | ACL papers in 2016 with neural attention in the title", "sql": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.title LIKE \"neural attention\" AND t1.year  =  2016 AND t2.venuename  =  \"ACL\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.title LIKE \"neural attention\" AND t1.year  =  2016 AND t2.venuename  =  \"ACL\";", "query_toks": ["SELECT", "DISTINCT", "t1.paperid", "FROM", "venue", "AS", "t2", "JOIN", "paper", "AS", "t1", "ON", "t2.venueid", "=", "t1.venueid", "WHERE", "t1.title", "LIKE", "``", "neural", "attention", "''", "AND", "t1.year", "=", "2016", "AND", "t2.venuename", "=", "``", "ACL", "''", ";"], "query_toks_no_value": ["select", "distinct", "t1", ".", "paperid", "from", "venue", "as", "t2", "join", "paper", "as", "t1", "on", "t2", ".", "venueid", "=", "t1", ".", "venueid", "where", "t1", ".", "title", "like", "value", "and", "t1", ".", "year", "=", "value", "and", "t2", ".", "venuename", "=", "value"], "question": "ACL papers in 2016 with neural attention in the title", "question_toks": ["ACL", "papers", "in", "2016", "with", "neural", "attention", "in", "the", "title"], "guid": 4445}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the papers written by \" H. V. Jagadish \" and \" Yunyao Li \" after 2005 .", "sql": "SELECT t5.title FROM writes AS t3 JOIN author AS t2 ON t3.aid  =  t2.aid JOIN publication AS t5 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t5.pid JOIN author AS t1 ON t4.aid  =  t1.aid WHERE t2.name  =  \"H. V. Jagadish\" AND t1.name  =  \"Yunyao Li\" AND t5.year  >  2005;", "example": {"db_id": "academic", "query": "SELECT t5.title FROM writes AS t3 JOIN author AS t2 ON t3.aid  =  t2.aid JOIN publication AS t5 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t5.pid JOIN author AS t1 ON t4.aid  =  t1.aid WHERE t2.name  =  \"H. V. Jagadish\" AND t1.name  =  \"Yunyao Li\" AND t5.year  >  2005;", "query_toks": ["SELECT", "t5.title", "FROM", "writes", "AS", "t3", "JOIN", "author", "AS", "t2", "ON", "t3.aid", "=", "t2.aid", "JOIN", "publication", "AS", "t5", "ON", "t3.pid", "=", "t5.pid", "JOIN", "writes", "AS", "t4", "ON", "t4.pid", "=", "t5.pid", "JOIN", "author", "AS", "t1", "ON", "t4.aid", "=", "t1.aid", "WHERE", "t2.name", "=", "``", "H.", "V.", "Jagadish", "''", "AND", "t1.name", "=", "``", "Yunyao", "Li", "''", "AND", "t5.year", ">", "2005", ";"], "query_toks_no_value": ["select", "t5", ".", "title", "from", "writes", "as", "t3", "join", "author", "as", "t2", "on", "t3", ".", "aid", "=", "t2", ".", "aid", "join", "publication", "as", "t5", "on", "t3", ".", "pid", "=", "t5", ".", "pid", "join", "writes", "as", "t4", "on", "t4", ".", "pid", "=", "t5", ".", "pid", "join", "author", "as", "t1", "on", "t4", ".", "aid", "=", "t1", ".", "aid", "where", "t2", ".", "name", "=", "value", "and", "t1", ".", "name", "=", "value", "and", "t5", ".", "year", ">", "value"], "question": "return me the papers written by \" H. V. Jagadish \" and \" Yunyao Li \" after 2005 .", "question_toks": ["return", "me", "the", "papers", "written", "by", "``", "H.", "V.", "Jagadish", "``", "and", "``", "Yunyao", "Li", "``", "after", "2005", "."], "guid": 4446}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | Has Peter Mertens and Dina Barbian written a paper together ?", "sql": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "writes", "AS", "t3", "JOIN", "author", "AS", "t2", "ON", "t3.authorid", "=", "t2.authorid", "JOIN", "writes", "AS", "t4", "ON", "t4.paperid", "=", "t3.paperid", "JOIN", "author", "AS", "t1", "ON", "t4.authorid", "=", "t1.authorid", "WHERE", "t2.authorname", "=", "``", "Peter", "Mertens", "''", "AND", "t1.authorname", "=", "``", "Dina", "Barbian", "''", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "writes", "as", "t3", "join", "author", "as", "t2", "on", "t3", ".", "authorid", "=", "t2", ".", "authorid", "join", "writes", "as", "t4", "on", "t4", ".", "paperid", "=", "t3", ".", "paperid", "join", "author", "as", "t1", "on", "t4", ".", "authorid", "=", "t1", ".", "authorid", "where", "t2", ".", "authorname", "=", "value", "and", "t1", ".", "authorname", "=", "value"], "question": "Has Peter Mertens and Dina Barbian written a paper together ?", "question_toks": ["Has", "Peter", "Mertens", "and", "Dina", "Barbian", "written", "a", "paper", "together", "?"], "guid": 4447}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | datasets used in papers written by jitendra malik ?", "sql": "SELECT DISTINCT t2.datasetid FROM paper AS t3 JOIN paperdataset AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"jitendra malik\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t2.datasetid FROM paper AS t3 JOIN paperdataset AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"jitendra malik\";", "query_toks": ["SELECT", "DISTINCT", "t2.datasetid", "FROM", "paper", "AS", "t3", "JOIN", "paperdataset", "AS", "t2", "ON", "t3.paperid", "=", "t2.paperid", "JOIN", "writes", "AS", "t4", "ON", "t4.paperid", "=", "t3.paperid", "JOIN", "author", "AS", "t1", "ON", "t4.authorid", "=", "t1.authorid", "WHERE", "t1.authorname", "=", "``", "jitendra", "malik", "''", ";"], "query_toks_no_value": ["select", "distinct", "t2", ".", "datasetid", "from", "paper", "as", "t3", "join", "paperdataset", "as", "t2", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "join", "writes", "as", "t4", "on", "t4", ".", "paperid", "=", "t3", ".", "paperid", "join", "author", "as", "t1", "on", "t4", ".", "authorid", "=", "t1", ".", "authorid", "where", "t1", ".", "authorname", "=", "value"], "question": "datasets used in papers written by jitendra malik ?", "question_toks": ["datasets", "used", "in", "papers", "written", "by", "jitendra", "malik", "?"], "guid": 4448}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | what did sharon goldwater write ?", "sql": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";", "query_toks": ["SELECT", "DISTINCT", "t2.paperid", "FROM", "writes", "AS", "t2", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "WHERE", "t1.authorname", "=", "``", "sharon", "goldwater", "''", ";"], "query_toks_no_value": ["select", "distinct", "t2", ".", "paperid", "from", "writes", "as", "t2", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "where", "t1", ".", "authorname", "=", "value"], "question": "what did sharon goldwater write ?", "question_toks": ["what", "did", "sharon", "goldwater", "write", "?"], "guid": 4449}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | what datasets do papers at ACL use most ?", "sql": "SELECT DISTINCT t1.datasetid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t4.venuename  =  \"ACL\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t1.datasetid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t4.venuename  =  \"ACL\";", "query_toks": ["SELECT", "DISTINCT", "t1.datasetid", "FROM", "paperdataset", "AS", "t2", "JOIN", "dataset", "AS", "t1", "ON", "t2.datasetid", "=", "t1.datasetid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "JOIN", "venue", "AS", "t4", "ON", "t4.venueid", "=", "t3.venueid", "WHERE", "t4.venuename", "=", "``", "ACL", "''", ";"], "query_toks_no_value": ["select", "distinct", "t1", ".", "datasetid", "from", "paperdataset", "as", "t2", "join", "dataset", "as", "t1", "on", "t2", ".", "datasetid", "=", "t1", ".", "datasetid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "join", "venue", "as", "t4", "on", "t4", ".", "venueid", "=", "t3", ".", "venueid", "where", "t4", ".", "venuename", "=", "value"], "question": "what datasets do papers at ACL use most ?", "question_toks": ["what", "datasets", "do", "papers", "at", "ACL", "use", "most", "?"], "guid": 4450}}
{"text": "Document_Types: document_type_code, document_description; Documents: document_id, document_type_code, grant_id, sent_date, response_received_date, other_details; Grants: grant_id, organisation_id, grant_amount, grant_start_date, grant_end_date, other_details; Organisation_Types: organisation_type, organisation_type_description; Organisations: organisation_id, organisation_type, organisation_details; Project_Outcomes: project_id, outcome_code, outcome_details; Project_Staff: staff_id, project_id, role_code, date_from, date_to, other_details; Projects: project_id, organisation_id, project_details; Research_Outcomes: outcome_code, outcome_description; Research_Staff: staff_id, employer_organisation_id, staff_details | For each project id, how many staff does it have? List them in increasing order.", "sql": "SELECT T1.project_id ,  count(*) FROM Project_Staff AS T1 JOIN Projects AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id ORDER BY count(*) ASC", "example": {"db_id": "tracking_grants_for_research", "query": "SELECT T1.project_id ,  count(*) FROM Project_Staff AS T1 JOIN Projects AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id ORDER BY count(*) ASC", "query_toks": ["SELECT", "T1.project_id", ",", "count", "(", "*", ")", "FROM", "Project_Staff", "AS", "T1", "JOIN", "Projects", "AS", "T2", "ON", "T1.project_id", "=", "T2.project_id", "GROUP", "BY", "T1.project_id", "ORDER", "BY", "count", "(", "*", ")", "ASC"], "query_toks_no_value": ["select", "t1", ".", "project_id", ",", "count", "(", "*", ")", "from", "project_staff", "as", "t1", "join", "projects", "as", "t2", "on", "t1", ".", "project_id", "=", "t2", ".", "project_id", "group", "by", "t1", ".", "project_id", "order", "by", "count", "(", "*", ")", "asc"], "question": "For each project id, how many staff does it have? List them in increasing order.", "question_toks": ["For", "each", "project", "id", ",", "how", "many", "staff", "does", "it", "have", "?", "List", "them", "in", "increasing", "order", "."], "guid": 4451}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | Fetch me some papers on Question Answering", "sql": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "WHERE", "t1.keyphrasename", "=", "``", "Question", "Answering", "''", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "where", "t1", ".", "keyphrasename", "=", "value"], "question": "Fetch me some papers on Question Answering", "question_toks": ["Fetch", "me", "some", "papers", "on", "Question", "Answering"], "guid": 4452}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | keywords used by Luke Zettlemoyer", "sql": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";", "query_toks": ["SELECT", "DISTINCT", "t1.keyphraseid", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "JOIN", "writes", "AS", "t4", "ON", "t4.paperid", "=", "t3.paperid", "JOIN", "author", "AS", "t5", "ON", "t4.authorid", "=", "t5.authorid", "WHERE", "t5.authorname", "=", "``", "Luke", "Zettlemoyer", "''", ";"], "query_toks_no_value": ["select", "distinct", "t1", ".", "keyphraseid", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "join", "writes", "as", "t4", "on", "t4", ".", "paperid", "=", "t3", ".", "paperid", "join", "author", "as", "t5", "on", "t4", ".", "authorid", "=", "t5", ".", "authorid", "where", "t5", ".", "authorname", "=", "value"], "question": "keywords used by Luke Zettlemoyer", "question_toks": ["keywords", "used", "by", "Luke", "Zettlemoyer"], "guid": 4453}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the number of papers on PVLDB .", "sql": "SELECT COUNT ( DISTINCT t2.title ) FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\";", "example": {"db_id": "academic", "query": "SELECT COUNT ( DISTINCT t2.title ) FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\";", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "t2.title", ")", "FROM", "publication", "AS", "t2", "JOIN", "journal", "AS", "t1", "ON", "t2.jid", "=", "t1.jid", "WHERE", "t1.name", "=", "``", "PVLDB", "''", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "t2", ".", "title", ")", "from", "publication", "as", "t2", "join", "journal", "as", "t1", "on", "t2", ".", "jid", "=", "t1", ".", "jid", "where", "t1", ".", "name", "=", "value"], "question": "return me the number of papers on PVLDB .", "question_toks": ["return", "me", "the", "number", "of", "papers", "on", "PVLDB", "."], "guid": 4454}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | what was the first deep learning paper ?", "sql": "SELECT DISTINCT t2.datasetid  ,  t4.year FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN paper AS t4 ON t4.paperid  =  t3.paperid JOIN keyphrase AS t5 ON t1.keyphraseid  =  t5.keyphraseid WHERE t5.keyphrasename  =  \"deep learning\" ORDER BY t4.year ASC;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t2.datasetid  ,  t4.year FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN paper AS t4 ON t4.paperid  =  t3.paperid JOIN keyphrase AS t5 ON t1.keyphraseid  =  t5.keyphraseid WHERE t5.keyphrasename  =  \"deep learning\" ORDER BY t4.year ASC;", "query_toks": ["SELECT", "DISTINCT", "t2.datasetid", ",", "t4.year", "FROM", "paperdataset", "AS", "t3", "JOIN", "dataset", "AS", "t2", "ON", "t3.datasetid", "=", "t2.datasetid", "JOIN", "paperkeyphrase", "AS", "t1", "ON", "t1.paperid", "=", "t3.paperid", "JOIN", "paper", "AS", "t4", "ON", "t4.paperid", "=", "t3.paperid", "JOIN", "keyphrase", "AS", "t5", "ON", "t1.keyphraseid", "=", "t5.keyphraseid", "WHERE", "t5.keyphrasename", "=", "``", "deep", "learning", "''", "ORDER", "BY", "t4.year", "ASC", ";"], "query_toks_no_value": ["select", "distinct", "t2", ".", "datasetid", ",", "t4", ".", "year", "from", "paperdataset", "as", "t3", "join", "dataset", "as", "t2", "on", "t3", ".", "datasetid", "=", "t2", ".", "datasetid", "join", "paperkeyphrase", "as", "t1", "on", "t1", ".", "paperid", "=", "t3", ".", "paperid", "join", "paper", "as", "t4", "on", "t4", ".", "paperid", "=", "t3", ".", "paperid", "join", "keyphrase", "as", "t5", "on", "t1", ".", "keyphraseid", "=", "t5", ".", "keyphraseid", "where", "t5", ".", "keyphrasename", "=", "value", "order", "by", "t4", ".", "year", "asc"], "question": "what was the first deep learning paper ?", "question_toks": ["what", "was", "the", "first", "deep", "learning", "paper", "?"], "guid": 4455}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | what year had the most number of NIPS papers ?", "sql": "SELECT DISTINCT COUNT ( t1.paperid )  ,  t1.year FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"NIPS\" GROUP BY t1.year ORDER BY COUNT ( t1.paperid ) DESC;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( t1.paperid )  ,  t1.year FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"NIPS\" GROUP BY t1.year ORDER BY COUNT ( t1.paperid ) DESC;", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "t1.paperid", ")", ",", "t1.year", "FROM", "venue", "AS", "t2", "JOIN", "paper", "AS", "t1", "ON", "t2.venueid", "=", "t1.venueid", "WHERE", "t2.venuename", "=", "``", "NIPS", "''", "GROUP", "BY", "t1.year", "ORDER", "BY", "COUNT", "(", "t1.paperid", ")", "DESC", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "t1", ".", "paperid", ")", ",", "t1", ".", "year", "from", "venue", "as", "t2", "join", "paper", "as", "t1", "on", "t2", ".", "venueid", "=", "t1", ".", "venueid", "where", "t2", ".", "venuename", "=", "value", "group", "by", "t1", ".", "year", "order", "by", "count", "(", "t1", ".", "paperid", ")", "desc"], "question": "what year had the most number of NIPS papers ?", "question_toks": ["what", "year", "had", "the", "most", "number", "of", "NIPS", "papers", "?"], "guid": 4456}}
{"text": "publication: Publication_ID, Book_ID, Publisher, Publication_Date, Price; book: Book_ID, Title, Issues, Writer | Show the prices of publications whose publisher is either \"Person\" or \"Wiley\"", "sql": "SELECT Price FROM publication WHERE Publisher  =  \"Person\" OR Publisher  =  \"Wiley\"", "example": {"db_id": "book_2", "query": "SELECT Price FROM publication WHERE Publisher  =  \"Person\" OR Publisher  =  \"Wiley\"", "query_toks": ["SELECT", "Price", "FROM", "publication", "WHERE", "Publisher", "=", "``", "Person", "''", "OR", "Publisher", "=", "``", "Wiley", "''"], "query_toks_no_value": ["select", "price", "from", "publication", "where", "publisher", "=", "value", "or", "publisher", "=", "value"], "question": "Show the prices of publications whose publisher is either \"Person\" or \"Wiley\"", "question_toks": ["Show", "the", "prices", "of", "publications", "whose", "publisher", "is", "either", "``", "Person", "''", "or", "``", "Wiley", "''"], "guid": 4457}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | papers coauthored by Peter Mertens and Dina Barbian", "sql": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "writes", "AS", "t3", "JOIN", "author", "AS", "t2", "ON", "t3.authorid", "=", "t2.authorid", "JOIN", "writes", "AS", "t4", "ON", "t4.paperid", "=", "t3.paperid", "JOIN", "author", "AS", "t1", "ON", "t4.authorid", "=", "t1.authorid", "WHERE", "t2.authorname", "=", "``", "Peter", "Mertens", "''", "AND", "t1.authorname", "=", "``", "Dina", "Barbian", "''", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "writes", "as", "t3", "join", "author", "as", "t2", "on", "t3", ".", "authorid", "=", "t2", ".", "authorid", "join", "writes", "as", "t4", "on", "t4", ".", "paperid", "=", "t3", ".", "paperid", "join", "author", "as", "t1", "on", "t4", ".", "authorid", "=", "t1", ".", "authorid", "where", "t2", ".", "authorname", "=", "value", "and", "t1", ".", "authorname", "=", "value"], "question": "papers coauthored by Peter Mertens and Dina Barbian", "question_toks": ["papers", "coauthored", "by", "Peter", "Mertens", "and", "Dina", "Barbian"], "guid": 4458}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | which EMNLP 2010 papers have been cited the most ?", "sql": "SELECT DISTINCT t3.citedpaperid  ,  COUNT ( t3.citedpaperid ) FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2010 AND t2.venuename  =  \"EMNLP\" GROUP BY t3.citedpaperid ORDER BY COUNT ( t3.citedpaperid ) DESC;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.citedpaperid  ,  COUNT ( t3.citedpaperid ) FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2010 AND t2.venuename  =  \"EMNLP\" GROUP BY t3.citedpaperid ORDER BY COUNT ( t3.citedpaperid ) DESC;", "query_toks": ["SELECT", "DISTINCT", "t3.citedpaperid", ",", "COUNT", "(", "t3.citedpaperid", ")", "FROM", "paper", "AS", "t1", "JOIN", "cite", "AS", "t3", "ON", "t1.paperid", "=", "t3.citedpaperid", "JOIN", "venue", "AS", "t2", "ON", "t2.venueid", "=", "t1.venueid", "WHERE", "t1.year", "=", "2010", "AND", "t2.venuename", "=", "``", "EMNLP", "''", "GROUP", "BY", "t3.citedpaperid", "ORDER", "BY", "COUNT", "(", "t3.citedpaperid", ")", "DESC", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "citedpaperid", ",", "count", "(", "t3", ".", "citedpaperid", ")", "from", "paper", "as", "t1", "join", "cite", "as", "t3", "on", "t1", ".", "paperid", "=", "t3", ".", "citedpaperid", "join", "venue", "as", "t2", "on", "t2", ".", "venueid", "=", "t1", ".", "venueid", "where", "t1", ".", "year", "=", "value", "and", "t2", ".", "venuename", "=", "value", "group", "by", "t3", ".", "citedpaperid", "order", "by", "count", "(", "t3", ".", "citedpaperid", ")", "desc"], "question": "which EMNLP 2010 papers have been cited the most ?", "question_toks": ["which", "EMNLP", "2010", "papers", "have", "been", "cited", "the", "most", "?"], "guid": 4459}}
{"text": "workshop: Workshop_ID, Date, Venue, Name; submission: Submission_ID, Scores, Author, College; Acceptance: Submission_ID, Workshop_ID, Result | Compute the average score of submissions.", "sql": "SELECT avg(Scores) FROM submission", "example": {"db_id": "workshop_paper", "query": "SELECT avg(Scores) FROM submission", "query_toks": ["SELECT", "avg", "(", "Scores", ")", "FROM", "submission"], "query_toks_no_value": ["select", "avg", "(", "scores", ")", "from", "submission"], "question": "Compute the average score of submissions.", "question_toks": ["Compute", "the", "average", "score", "of", "submissions", "."], "guid": 4460}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | papers with Question Answering in keyphrases", "sql": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "WHERE", "t1.keyphrasename", "=", "``", "Question", "Answering", "''", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "where", "t1", ".", "keyphrasename", "=", "value"], "question": "papers with Question Answering in keyphrases", "question_toks": ["papers", "with", "Question", "Answering", "in", "keyphrases"], "guid": 4461}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | What has sharon goldwater published ?", "sql": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";", "query_toks": ["SELECT", "DISTINCT", "t2.paperid", "FROM", "writes", "AS", "t2", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "WHERE", "t1.authorname", "=", "``", "sharon", "goldwater", "''", ";"], "query_toks_no_value": ["select", "distinct", "t2", ".", "paperid", "from", "writes", "as", "t2", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "where", "t1", ".", "authorname", "=", "value"], "question": "What has sharon goldwater published ?", "question_toks": ["What", "has", "sharon", "goldwater", "published", "?"], "guid": 4462}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | papers that used WebKB", "sql": "SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname  =  \"WebKB\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname  =  \"WebKB\";", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "paperdataset", "AS", "t2", "JOIN", "dataset", "AS", "t1", "ON", "t2.datasetid", "=", "t1.datasetid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "WHERE", "t1.datasetname", "=", "``", "WebKB", "''", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "paperdataset", "as", "t2", "join", "dataset", "as", "t1", "on", "t2", ".", "datasetid", "=", "t1", ".", "datasetid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "where", "t1", ".", "datasetname", "=", "value"], "question": "papers that used WebKB", "question_toks": ["papers", "that", "used", "WebKB"], "guid": 4463}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | datasets mentioned at ACL", "sql": "SELECT DISTINCT t1.datasetid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t4.venuename  =  \"ACL\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t1.datasetid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t4.venuename  =  \"ACL\";", "query_toks": ["SELECT", "DISTINCT", "t1.datasetid", "FROM", "paperdataset", "AS", "t2", "JOIN", "dataset", "AS", "t1", "ON", "t2.datasetid", "=", "t1.datasetid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "JOIN", "venue", "AS", "t4", "ON", "t4.venueid", "=", "t3.venueid", "WHERE", "t4.venuename", "=", "``", "ACL", "''", ";"], "query_toks_no_value": ["select", "distinct", "t1", ".", "datasetid", "from", "paperdataset", "as", "t2", "join", "dataset", "as", "t1", "on", "t2", ".", "datasetid", "=", "t1", ".", "datasetid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "join", "venue", "as", "t4", "on", "t4", ".", "venueid", "=", "t3", ".", "venueid", "where", "t4", ".", "venuename", "=", "value"], "question": "datasets mentioned at ACL", "question_toks": ["datasets", "mentioned", "at", "ACL"], "guid": 4464}}
{"text": "Scientists: SSN, Name; Projects: Code, Name, Hours; AssignedTo: Scientist, Project | What are the names of all the scientists in alphabetical order?", "sql": "SELECT name FROM scientists ORDER BY name", "example": {"db_id": "scientist_1", "query": "SELECT name FROM scientists ORDER BY name", "query_toks": ["SELECT", "name", "FROM", "scientists", "ORDER", "BY", "name"], "query_toks_no_value": ["select", "name", "from", "scientists", "order", "by", "name"], "question": "What are the names of all the scientists in alphabetical order?", "question_toks": ["What", "are", "the", "names", "of", "all", "the", "scientists", "in", "alphabetical", "order", "?"], "guid": 4465}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | When was benjamin mako hill 's first publication ?", "sql": "SELECT DISTINCT COUNT ( t3.paperid )  ,  t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"benjamin mako hill\" GROUP BY t3.year ORDER BY t3.year;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( t3.paperid )  ,  t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"benjamin mako hill\" GROUP BY t3.year ORDER BY t3.year;", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "t3.paperid", ")", ",", "t3.year", "FROM", "writes", "AS", "t2", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "JOIN", "paper", "AS", "t3", "ON", "t2.paperid", "=", "t3.paperid", "WHERE", "t1.authorname", "=", "``", "benjamin", "mako", "hill", "''", "GROUP", "BY", "t3.year", "ORDER", "BY", "t3.year", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "t3", ".", "paperid", ")", ",", "t3", ".", "year", "from", "writes", "as", "t2", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "join", "paper", "as", "t3", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "where", "t1", ".", "authorname", "=", "value", "group", "by", "t3", ".", "year", "order", "by", "t3", ".", "year"], "question": "When was benjamin mako hill 's first publication ?", "question_toks": ["When", "was", "benjamin", "mako", "hill", "'s", "first", "publication", "?"], "guid": 4466}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | list datasets for semantic parsing", "sql": "SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  \"semantic parsing\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  \"semantic parsing\";", "query_toks": ["SELECT", "DISTINCT", "t2.datasetid", "FROM", "paperdataset", "AS", "t3", "JOIN", "dataset", "AS", "t2", "ON", "t3.datasetid", "=", "t2.datasetid", "JOIN", "paperkeyphrase", "AS", "t1", "ON", "t1.paperid", "=", "t3.paperid", "JOIN", "keyphrase", "AS", "t4", "ON", "t1.keyphraseid", "=", "t4.keyphraseid", "WHERE", "t4.keyphrasename", "=", "``", "semantic", "parsing", "''", ";"], "query_toks_no_value": ["select", "distinct", "t2", ".", "datasetid", "from", "paperdataset", "as", "t3", "join", "dataset", "as", "t2", "on", "t3", ".", "datasetid", "=", "t2", ".", "datasetid", "join", "paperkeyphrase", "as", "t1", "on", "t1", ".", "paperid", "=", "t3", ".", "paperid", "join", "keyphrase", "as", "t4", "on", "t1", ".", "keyphraseid", "=", "t4", ".", "keyphraseid", "where", "t4", ".", "keyphrasename", "=", "value"], "question": "list datasets for semantic parsing", "question_toks": ["list", "datasets", "for", "semantic", "parsing"], "guid": 4467}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the papers on VLDB conference after 2000 .", "sql": "SELECT t2.title FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\" AND t2.year  >  2000;", "example": {"db_id": "academic", "query": "SELECT t2.title FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\" AND t2.year  >  2000;", "query_toks": ["SELECT", "t2.title", "FROM", "publication", "AS", "t2", "JOIN", "conference", "AS", "t1", "ON", "t2.cid", "=", "t1.cid", "WHERE", "t1.name", "=", "``", "VLDB", "''", "AND", "t2.year", ">", "2000", ";"], "query_toks_no_value": ["select", "t2", ".", "title", "from", "publication", "as", "t2", "join", "conference", "as", "t1", "on", "t2", ".", "cid", "=", "t1", ".", "cid", "where", "t1", ".", "name", "=", "value", "and", "t2", ".", "year", ">", "value"], "question": "return me the papers on VLDB conference after 2000 .", "question_toks": ["return", "me", "the", "papers", "on", "VLDB", "conference", "after", "2000", "."], "guid": 4468}}
{"text": "Document_Types: document_type_code, document_description; Documents: document_id, document_type_code, grant_id, sent_date, response_received_date, other_details; Grants: grant_id, organisation_id, grant_amount, grant_start_date, grant_end_date, other_details; Organisation_Types: organisation_type, organisation_type_description; Organisations: organisation_id, organisation_type, organisation_details; Project_Outcomes: project_id, outcome_code, outcome_details; Project_Staff: staff_id, project_id, role_code, date_from, date_to, other_details; Projects: project_id, organisation_id, project_details; Research_Outcomes: outcome_code, outcome_description; Research_Staff: staff_id, employer_organisation_id, staff_details | Which role is most common for the staff?", "sql": "SELECT role_code FROM Project_Staff GROUP BY role_code ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "tracking_grants_for_research", "query": "SELECT role_code FROM Project_Staff GROUP BY role_code ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "role_code", "FROM", "Project_Staff", "GROUP", "BY", "role_code", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "role_code", "from", "project_staff", "group", "by", "role_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which role is most common for the staff?", "question_toks": ["Which", "role", "is", "most", "common", "for", "the", "staff", "?"], "guid": 4469}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | monte carlo simulation papers published after 2011", "sql": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"monte carlo simulation\" AND t3.year  >  2011;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"monte carlo simulation\" AND t3.year  >  2011;", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "WHERE", "t1.keyphrasename", "=", "``", "monte", "carlo", "simulation", "''", "AND", "t3.year", ">", "2011", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "where", "t1", ".", "keyphrasename", "=", "value", "and", "t3", ".", "year", ">", "value"], "question": "monte carlo simulation papers published after 2011", "question_toks": ["monte", "carlo", "simulation", "papers", "published", "after", "2011"], "guid": 4470}}
{"text": "journal: Journal_ID, Date, Theme, Sales; editor: Editor_ID, Name, Age; journal_committee: Editor_ID, Journal_ID, Work_Type | What are the different ages of editors? Show each age along with the number of editors of that age.", "sql": "SELECT Age ,  COUNT(*) FROM editor GROUP BY Age", "example": {"db_id": "journal_committee", "query": "SELECT Age ,  COUNT(*) FROM editor GROUP BY Age", "query_toks": ["SELECT", "Age", ",", "COUNT", "(", "*", ")", "FROM", "editor", "GROUP", "BY", "Age"], "query_toks_no_value": ["select", "age", ",", "count", "(", "*", ")", "from", "editor", "group", "by", "age"], "question": "What are the different ages of editors? Show each age along with the number of editors of that age.", "question_toks": ["What", "are", "the", "different", "ages", "of", "editors", "?", "Show", "each", "age", "along", "with", "the", "number", "of", "editors", "of", "that", "age", "."], "guid": 4471}}
{"text": "book_club: book_club_id, Year, Author_or_Editor, Book_Title, Publisher, Category, Result; movie: movie_id, Title, Year, Director, Budget_million, Gross_worldwide; culture_company: Company_name, Type, Incorporated_in, Group_Equity_Shareholding, book_club_id, movie_id | What is the publisher with most number of books?", "sql": "SELECT publisher FROM book_club GROUP BY publisher ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "culture_company", "query": "SELECT publisher FROM book_club GROUP BY publisher ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "publisher", "FROM", "book_club", "GROUP", "BY", "publisher", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "publisher", "from", "book_club", "group", "by", "publisher", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the publisher with most number of books?", "question_toks": ["What", "is", "the", "publisher", "with", "most", "number", "of", "books", "?"], "guid": 4472}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | papers with more than 10 citations", "sql": "SELECT DISTINCT t2.citingpaperid FROM paper AS t1 JOIN cite AS t2 ON t1.paperid  =  t2.citedpaperid GROUP BY t2.citingpaperid HAVING COUNT ( DISTINCT t2.citedpaperid )  >  10;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t2.citingpaperid FROM paper AS t1 JOIN cite AS t2 ON t1.paperid  =  t2.citedpaperid GROUP BY t2.citingpaperid HAVING COUNT ( DISTINCT t2.citedpaperid )  >  10;", "query_toks": ["SELECT", "DISTINCT", "t2.citingpaperid", "FROM", "paper", "AS", "t1", "JOIN", "cite", "AS", "t2", "ON", "t1.paperid", "=", "t2.citedpaperid", "GROUP", "BY", "t2.citingpaperid", "HAVING", "COUNT", "(", "DISTINCT", "t2.citedpaperid", ")", ">", "10", ";"], "query_toks_no_value": ["select", "distinct", "t2", ".", "citingpaperid", "from", "paper", "as", "t1", "join", "cite", "as", "t2", "on", "t1", ".", "paperid", "=", "t2", ".", "citedpaperid", "group", "by", "t2", ".", "citingpaperid", "having", "count", "(", "distinct", "t2", ".", "citedpaperid", ")", ">", "value"], "question": "papers with more than 10 citations", "question_toks": ["papers", "with", "more", "than", "10", "citations"], "guid": 4473}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | Parsing papers from ACL 2014 that used Jeopardy! Questions", "sql": "SELECT DISTINCT t2.paperid FROM paperdataset AS t3 JOIN dataset AS t5 ON t3.datasetid  =  t5.datasetid JOIN paperkeyphrase AS t4 ON t4.paperid  =  t3.paperid JOIN paper AS t2 ON t2.paperid  =  t3.paperid JOIN venue AS t6 ON t6.venueid  =  t2.venueid JOIN keyphrase AS t1 ON t4.keyphraseid  =  t1.keyphraseid WHERE t5.datasetname  =  \"Jeopardy! Questions\" AND t1.keyphrasename  =  \"Parsing\" AND t2.year  =  2014 AND t6.venuename  =  \"ACL\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t2.paperid FROM paperdataset AS t3 JOIN dataset AS t5 ON t3.datasetid  =  t5.datasetid JOIN paperkeyphrase AS t4 ON t4.paperid  =  t3.paperid JOIN paper AS t2 ON t2.paperid  =  t3.paperid JOIN venue AS t6 ON t6.venueid  =  t2.venueid JOIN keyphrase AS t1 ON t4.keyphraseid  =  t1.keyphraseid WHERE t5.datasetname  =  \"Jeopardy! Questions\" AND t1.keyphrasename  =  \"Parsing\" AND t2.year  =  2014 AND t6.venuename  =  \"ACL\";", "query_toks": ["SELECT", "DISTINCT", "t2.paperid", "FROM", "paperdataset", "AS", "t3", "JOIN", "dataset", "AS", "t5", "ON", "t3.datasetid", "=", "t5.datasetid", "JOIN", "paperkeyphrase", "AS", "t4", "ON", "t4.paperid", "=", "t3.paperid", "JOIN", "paper", "AS", "t2", "ON", "t2.paperid", "=", "t3.paperid", "JOIN", "venue", "AS", "t6", "ON", "t6.venueid", "=", "t2.venueid", "JOIN", "keyphrase", "AS", "t1", "ON", "t4.keyphraseid", "=", "t1.keyphraseid", "WHERE", "t5.datasetname", "=", "``", "Jeopardy", "!", "Questions", "''", "AND", "t1.keyphrasename", "=", "``", "Parsing", "''", "AND", "t2.year", "=", "2014", "AND", "t6.venuename", "=", "``", "ACL", "''", ";"], "query_toks_no_value": ["select", "distinct", "t2", ".", "paperid", "from", "paperdataset", "as", "t3", "join", "dataset", "as", "t5", "on", "t3", ".", "datasetid", "=", "t5", ".", "datasetid", "join", "paperkeyphrase", "as", "t4", "on", "t4", ".", "paperid", "=", "t3", ".", "paperid", "join", "paper", "as", "t2", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "join", "venue", "as", "t6", "on", "t6", ".", "venueid", "=", "t2", ".", "venueid", "join", "keyphrase", "as", "t1", "on", "t4", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "where", "t5", ".", "datasetname", "=", "value", "and", "t1", ".", "keyphrasename", "=", "value", "and", "t2", ".", "year", "=", "value", "and", "t6", ".", "venuename", "=", "value"], "question": "Parsing papers from ACL 2014 that used Jeopardy! Questions", "question_toks": ["Parsing", "papers", "from", "ACL", "2014", "that", "used", "Jeopardy", "!", "Questions"], "guid": 4474}}
{"text": "Inst: instID, name, country; Authors: authID, lname, fname; Papers: paperID, title; Authorship: authID, instID, paperID, authOrder | Which papers have the substring \"Database\" in their titles? Show the titles of the papers.", "sql": "SELECT title FROM papers WHERE title LIKE \"%Database%\"", "example": {"db_id": "icfp_1", "query": "SELECT title FROM papers WHERE title LIKE \"%Database%\"", "query_toks": ["SELECT", "title", "FROM", "papers", "WHERE", "title", "LIKE", "``", "%", "Database", "%", "''"], "query_toks_no_value": ["select", "title", "from", "papers", "where", "title", "like", "value"], "question": "Which papers have the substring \"Database\" in their titles? Show the titles of the papers.", "question_toks": ["Which", "papers", "have", "the", "substring", "``", "Database", "''", "in", "their", "titles", "?", "Show", "the", "titles", "of", "the", "papers", "."], "guid": 4475}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | how many papers jamie callan published each year ?", "sql": "SELECT DISTINCT COUNT ( t3.paperid )  ,  t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"jamie callan\" GROUP BY t3.year;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( t3.paperid )  ,  t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"jamie callan\" GROUP BY t3.year;", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "t3.paperid", ")", ",", "t3.year", "FROM", "writes", "AS", "t2", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "JOIN", "paper", "AS", "t3", "ON", "t2.paperid", "=", "t3.paperid", "WHERE", "t1.authorname", "=", "``", "jamie", "callan", "''", "GROUP", "BY", "t3.year", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "t3", ".", "paperid", ")", ",", "t3", ".", "year", "from", "writes", "as", "t2", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "join", "paper", "as", "t3", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "where", "t1", ".", "authorname", "=", "value", "group", "by", "t3", ".", "year"], "question": "how many papers jamie callan published each year ?", "question_toks": ["how", "many", "papers", "jamie", "callan", "published", "each", "year", "?"], "guid": 4476}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | How many times was noah a smith cited ?", "sql": "SELECT DISTINCT COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"noah a smith\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"noah a smith\";", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "t4.citedpaperid", ")", "FROM", "paper", "AS", "t3", "JOIN", "cite", "AS", "t4", "ON", "t3.paperid", "=", "t4.citedpaperid", "JOIN", "writes", "AS", "t2", "ON", "t2.paperid", "=", "t3.paperid", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "WHERE", "t1.authorname", "=", "``", "noah", "a", "smith", "''", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "t4", ".", "citedpaperid", ")", "from", "paper", "as", "t3", "join", "cite", "as", "t4", "on", "t3", ".", "paperid", "=", "t4", ".", "citedpaperid", "join", "writes", "as", "t2", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "where", "t1", ".", "authorname", "=", "value"], "question": "How many times was noah a smith cited ?", "question_toks": ["How", "many", "times", "was", "noah", "a", "smith", "cited", "?"], "guid": 4477}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | sharon goldwater 's papers", "sql": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";", "query_toks": ["SELECT", "DISTINCT", "t2.paperid", "FROM", "writes", "AS", "t2", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "WHERE", "t1.authorname", "=", "``", "sharon", "goldwater", "''", ";"], "query_toks_no_value": ["select", "distinct", "t2", ".", "paperid", "from", "writes", "as", "t2", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "where", "t1", ".", "authorname", "=", "value"], "question": "sharon goldwater 's papers", "question_toks": ["sharon", "goldwater", "'s", "papers"], "guid": 4478}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the total citations of the papers in \" University of Michigan \" .", "sql": "SELECT SUM ( t4.citation_num ) FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid JOIN writes AS t3 ON t3.aid  =  t1.aid JOIN publication AS t4 ON t3.pid  =  t4.pid WHERE t2.name  =  \"University of Michigan\";", "example": {"db_id": "academic", "query": "SELECT SUM ( t4.citation_num ) FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid JOIN writes AS t3 ON t3.aid  =  t1.aid JOIN publication AS t4 ON t3.pid  =  t4.pid WHERE t2.name  =  \"University of Michigan\";", "query_toks": ["SELECT", "SUM", "(", "t4.citation_num", ")", "FROM", "organization", "AS", "t2", "JOIN", "author", "AS", "t1", "ON", "t2.oid", "=", "t1.oid", "JOIN", "writes", "AS", "t3", "ON", "t3.aid", "=", "t1.aid", "JOIN", "publication", "AS", "t4", "ON", "t3.pid", "=", "t4.pid", "WHERE", "t2.name", "=", "``", "University", "of", "Michigan", "''", ";"], "query_toks_no_value": ["select", "sum", "(", "t4", ".", "citation_num", ")", "from", "organization", "as", "t2", "join", "author", "as", "t1", "on", "t2", ".", "oid", "=", "t1", ".", "oid", "join", "writes", "as", "t3", "on", "t3", ".", "aid", "=", "t1", ".", "aid", "join", "publication", "as", "t4", "on", "t3", ".", "pid", "=", "t4", ".", "pid", "where", "t2", ".", "name", "=", "value"], "question": "return me the total citations of the papers in \" University of Michigan \" .", "question_toks": ["return", "me", "the", "total", "citations", "of", "the", "papers", "in", "``", "University", "of", "Michigan", "``", "."], "guid": 4479}}
{"text": "Document_Types: document_type_code, document_description; Documents: document_id, document_type_code, grant_id, sent_date, response_received_date, other_details; Grants: grant_id, organisation_id, grant_amount, grant_start_date, grant_end_date, other_details; Organisation_Types: organisation_type, organisation_type_description; Organisations: organisation_id, organisation_type, organisation_details; Project_Outcomes: project_id, outcome_code, outcome_details; Project_Staff: staff_id, project_id, role_code, date_from, date_to, other_details; Projects: project_id, organisation_id, project_details; Research_Outcomes: outcome_code, outcome_description; Research_Staff: staff_id, employer_organisation_id, staff_details | What are the details for all projects that did not hire any staff in a research role?", "sql": "SELECT project_details FROM Projects WHERE project_id NOT IN ( SELECT project_id FROM Project_Staff WHERE role_code  =  'researcher' )", "example": {"db_id": "tracking_grants_for_research", "query": "SELECT project_details FROM Projects WHERE project_id NOT IN ( SELECT project_id FROM Project_Staff WHERE role_code  =  'researcher' )", "query_toks": ["SELECT", "project_details", "FROM", "Projects", "WHERE", "project_id", "NOT", "IN", "(", "SELECT", "project_id", "FROM", "Project_Staff", "WHERE", "role_code", "=", "'researcher", "'", ")"], "query_toks_no_value": ["select", "project_details", "from", "projects", "where", "project_id", "not", "in", "(", "select", "project_id", "from", "project_staff", "where", "role_code", "=", "value", ")"], "question": "What are the details for all projects that did not hire any staff in a research role?", "question_toks": ["What", "are", "the", "details", "for", "all", "projects", "that", "did", "not", "hire", "any", "staff", "in", "a", "research", "role", "?"], "guid": 4480}}
{"text": "Inst: instID, name, country; Authors: authID, lname, fname; Papers: paperID, title; Authorship: authID, instID, paperID, authOrder | What is the name of the institution that \"Matthias Blume\" belongs to?", "sql": "SELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t1.fname  =  \"Matthias\" AND t1.lname  =  \"Blume\"", "example": {"db_id": "icfp_1", "query": "SELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t1.fname  =  \"Matthias\" AND t1.lname  =  \"Blume\"", "query_toks": ["SELECT", "DISTINCT", "t3.name", "FROM", "authors", "AS", "t1", "JOIN", "authorship", "AS", "t2", "ON", "t1.authid", "=", "t2.authid", "JOIN", "inst", "AS", "t3", "ON", "t2.instid", "=", "t3.instid", "WHERE", "t1.fname", "=", "``", "Matthias", "''", "AND", "t1.lname", "=", "``", "Blume", "''"], "query_toks_no_value": ["select", "distinct", "t3", ".", "name", "from", "authors", "as", "t1", "join", "authorship", "as", "t2", "on", "t1", ".", "authid", "=", "t2", ".", "authid", "join", "inst", "as", "t3", "on", "t2", ".", "instid", "=", "t3", ".", "instid", "where", "t1", ".", "fname", "=", "value", "and", "t1", ".", "lname", "=", "value"], "question": "What is the name of the institution that \"Matthias Blume\" belongs to?", "question_toks": ["What", "is", "the", "name", "of", "the", "institution", "that", "``", "Matthias", "Blume", "''", "belongs", "to", "?"], "guid": 4481}}
{"text": "item: i_id, title; review: a_id, u_id, i_id, rating, rank; useracct: u_id, name; trust: source_u_id, target_u_id, trust | Find the number of reviews.", "sql": "SELECT count(*) FROM review", "example": {"db_id": "epinions_1", "query": "SELECT count(*) FROM review", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "review"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "review"], "question": "Find the number of reviews.", "question_toks": ["Find", "the", "number", "of", "reviews", "."], "guid": 4482}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | What papers have Peter Mertens and Dina Barbian written ?", "sql": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "writes", "AS", "t3", "JOIN", "author", "AS", "t2", "ON", "t3.authorid", "=", "t2.authorid", "JOIN", "writes", "AS", "t4", "ON", "t4.paperid", "=", "t3.paperid", "JOIN", "author", "AS", "t1", "ON", "t4.authorid", "=", "t1.authorid", "WHERE", "t2.authorname", "=", "``", "Peter", "Mertens", "''", "AND", "t1.authorname", "=", "``", "Dina", "Barbian", "''", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "writes", "as", "t3", "join", "author", "as", "t2", "on", "t3", ".", "authorid", "=", "t2", ".", "authorid", "join", "writes", "as", "t4", "on", "t4", ".", "paperid", "=", "t3", ".", "paperid", "join", "author", "as", "t1", "on", "t4", ".", "authorid", "=", "t1", ".", "authorid", "where", "t2", ".", "authorname", "=", "value", "and", "t1", ".", "authorname", "=", "value"], "question": "What papers have Peter Mertens and Dina Barbian written ?", "question_toks": ["What", "papers", "have", "Peter", "Mertens", "and", "Dina", "Barbian", "written", "?"], "guid": 4483}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the number of papers written by \" H. V. Jagadish \" and \" Divesh Srivastava \" before 2000 .", "sql": "SELECT COUNT ( DISTINCT t5.title ) FROM writes AS t3 JOIN author AS t2 ON t3.aid  =  t2.aid JOIN publication AS t5 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t5.pid JOIN author AS t1 ON t4.aid  =  t1.aid WHERE t2.name  =  \"H. V. Jagadish\" AND t1.name  =  \"Divesh Srivastava\" AND t5.year  <  2000;", "example": {"db_id": "academic", "query": "SELECT COUNT ( DISTINCT t5.title ) FROM writes AS t3 JOIN author AS t2 ON t3.aid  =  t2.aid JOIN publication AS t5 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t5.pid JOIN author AS t1 ON t4.aid  =  t1.aid WHERE t2.name  =  \"H. V. Jagadish\" AND t1.name  =  \"Divesh Srivastava\" AND t5.year  <  2000;", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "t5.title", ")", "FROM", "writes", "AS", "t3", "JOIN", "author", "AS", "t2", "ON", "t3.aid", "=", "t2.aid", "JOIN", "publication", "AS", "t5", "ON", "t3.pid", "=", "t5.pid", "JOIN", "writes", "AS", "t4", "ON", "t4.pid", "=", "t5.pid", "JOIN", "author", "AS", "t1", "ON", "t4.aid", "=", "t1.aid", "WHERE", "t2.name", "=", "``", "H.", "V.", "Jagadish", "''", "AND", "t1.name", "=", "``", "Divesh", "Srivastava", "''", "AND", "t5.year", "<", "2000", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "t5", ".", "title", ")", "from", "writes", "as", "t3", "join", "author", "as", "t2", "on", "t3", ".", "aid", "=", "t2", ".", "aid", "join", "publication", "as", "t5", "on", "t3", ".", "pid", "=", "t5", ".", "pid", "join", "writes", "as", "t4", "on", "t4", ".", "pid", "=", "t5", ".", "pid", "join", "author", "as", "t1", "on", "t4", ".", "aid", "=", "t1", ".", "aid", "where", "t2", ".", "name", "=", "value", "and", "t1", ".", "name", "=", "value", "and", "t5", ".", "year", "<", "value"], "question": "return me the number of papers written by \" H. V. Jagadish \" and \" Divesh Srivastava \" before 2000 .", "question_toks": ["return", "me", "the", "number", "of", "papers", "written", "by", "``", "H.", "V.", "Jagadish", "``", "and", "``", "Divesh", "Srivastava", "``", "before", "2000", "."], "guid": 4484}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the papers in PVLDB containing keyword \" Keyword search \" .", "sql": "SELECT t4.title FROM publication_keyword AS t2 JOIN keyword AS t1 ON t2.kid  =  t1.kid JOIN publication AS t4 ON t4.pid  =  t2.pid JOIN journal AS t3 ON t4.jid  =  t3.jid WHERE t3.name  =  \"PVLDB\" AND t1.keyword  =  \"Keyword search\";", "example": {"db_id": "academic", "query": "SELECT t4.title FROM publication_keyword AS t2 JOIN keyword AS t1 ON t2.kid  =  t1.kid JOIN publication AS t4 ON t4.pid  =  t2.pid JOIN journal AS t3 ON t4.jid  =  t3.jid WHERE t3.name  =  \"PVLDB\" AND t1.keyword  =  \"Keyword search\";", "query_toks": ["SELECT", "t4.title", "FROM", "publication_keyword", "AS", "t2", "JOIN", "keyword", "AS", "t1", "ON", "t2.kid", "=", "t1.kid", "JOIN", "publication", "AS", "t4", "ON", "t4.pid", "=", "t2.pid", "JOIN", "journal", "AS", "t3", "ON", "t4.jid", "=", "t3.jid", "WHERE", "t3.name", "=", "``", "PVLDB", "''", "AND", "t1.keyword", "=", "``", "Keyword", "search", "''", ";"], "query_toks_no_value": ["select", "t4", ".", "title", "from", "publication_keyword", "as", "t2", "join", "keyword", "as", "t1", "on", "t2", ".", "kid", "=", "t1", ".", "kid", "join", "publication", "as", "t4", "on", "t4", ".", "pid", "=", "t2", ".", "pid", "join", "journal", "as", "t3", "on", "t4", ".", "jid", "=", "t3", ".", "jid", "where", "t3", ".", "name", "=", "value", "and", "t1", ".", "keyword", "=", "value"], "question": "return me the papers in PVLDB containing keyword \" Keyword search \" .", "question_toks": ["return", "me", "the", "papers", "in", "PVLDB", "containing", "keyword", "``", "Keyword", "search", "``", "."], "guid": 4485}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | most cited parsing papers", "sql": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"parsing\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"parsing\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;", "query_toks": ["SELECT", "DISTINCT", "t4.citedpaperid", ",", "COUNT", "(", "t4.citedpaperid", ")", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "JOIN", "cite", "AS", "t4", "ON", "t3.paperid", "=", "t4.citedpaperid", "WHERE", "t1.keyphrasename", "=", "``", "parsing", "''", "GROUP", "BY", "t4.citedpaperid", "ORDER", "BY", "COUNT", "(", "t4.citedpaperid", ")", "DESC", ";"], "query_toks_no_value": ["select", "distinct", "t4", ".", "citedpaperid", ",", "count", "(", "t4", ".", "citedpaperid", ")", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "join", "cite", "as", "t4", "on", "t3", ".", "paperid", "=", "t4", ".", "citedpaperid", "where", "t1", ".", "keyphrasename", "=", "value", "group", "by", "t4", ".", "citedpaperid", "order", "by", "count", "(", "t4", ".", "citedpaperid", ")", "desc"], "question": "most cited parsing papers", "question_toks": ["most", "cited", "parsing", "papers"], "guid": 4486}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | papers that used Question Answering", "sql": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "WHERE", "t1.keyphrasename", "=", "``", "Question", "Answering", "''", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "where", "t1", ".", "keyphrasename", "=", "value"], "question": "papers that used Question Answering", "question_toks": ["papers", "that", "used", "Question", "Answering"], "guid": 4487}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the papers by \" H. V. Jagadish \" on VLDB conference with more than 200 citations .", "sql": "SELECT t4.title FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\" AND t2.name  =  \"VLDB\" AND t4.citation_num  >  200;", "example": {"db_id": "academic", "query": "SELECT t4.title FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\" AND t2.name  =  \"VLDB\" AND t4.citation_num  >  200;", "query_toks": ["SELECT", "t4.title", "FROM", "publication", "AS", "t4", "JOIN", "conference", "AS", "t2", "ON", "t4.cid", "=", "t2.cid", "JOIN", "writes", "AS", "t3", "ON", "t3.pid", "=", "t4.pid", "JOIN", "author", "AS", "t1", "ON", "t3.aid", "=", "t1.aid", "WHERE", "t1.name", "=", "``", "H.", "V.", "Jagadish", "''", "AND", "t2.name", "=", "``", "VLDB", "''", "AND", "t4.citation_num", ">", "200", ";"], "query_toks_no_value": ["select", "t4", ".", "title", "from", "publication", "as", "t4", "join", "conference", "as", "t2", "on", "t4", ".", "cid", "=", "t2", ".", "cid", "join", "writes", "as", "t3", "on", "t3", ".", "pid", "=", "t4", ".", "pid", "join", "author", "as", "t1", "on", "t3", ".", "aid", "=", "t1", ".", "aid", "where", "t1", ".", "name", "=", "value", "and", "t2", ".", "name", "=", "value", "and", "t4", ".", "citation_num", ">", "value"], "question": "return me the papers by \" H. V. Jagadish \" on VLDB conference with more than 200 citations .", "question_toks": ["return", "me", "the", "papers", "by", "``", "H.", "V.", "Jagadish", "``", "on", "VLDB", "conference", "with", "more", "than", "200", "citations", "."], "guid": 4488}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | papers at chi", "sql": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"chi\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"chi\";", "query_toks": ["SELECT", "DISTINCT", "t1.paperid", "FROM", "venue", "AS", "t2", "JOIN", "paper", "AS", "t1", "ON", "t2.venueid", "=", "t1.venueid", "WHERE", "t2.venuename", "=", "``", "chi", "''", ";"], "query_toks_no_value": ["select", "distinct", "t1", ".", "paperid", "from", "venue", "as", "t2", "join", "paper", "as", "t1", "on", "t2", ".", "venueid", "=", "t1", ".", "venueid", "where", "t2", ".", "venuename", "=", "value"], "question": "papers at chi", "question_toks": ["papers", "at", "chi"], "guid": 4489}}
{"text": "event: Event_ID, Date, Venue, Name, Event_Attendance; journalist: journalist_ID, Name, Nationality, Age, Years_working; news_report: journalist_ID, Event_ID, Work_Type | Show the dates, places, and names of events in descending order of the attendance.", "sql": "SELECT Date ,  Name ,  venue FROM event ORDER BY Event_Attendance DESC", "example": {"db_id": "news_report", "query": "SELECT Date ,  Name ,  venue FROM event ORDER BY Event_Attendance DESC", "query_toks": ["SELECT", "Date", ",", "Name", ",", "venue", "FROM", "event", "ORDER", "BY", "Event_Attendance", "DESC"], "query_toks_no_value": ["select", "date", ",", "name", ",", "venue", "from", "event", "order", "by", "event_attendance", "desc"], "question": "Show the dates, places, and names of events in descending order of the attendance.", "question_toks": ["Show", "the", "dates", ",", "places", ",", "and", "names", "of", "events", "in", "descending", "order", "of", "the", "attendance", "."], "guid": 4490}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | who published papers in CVPR 2007", "sql": "SELECT DISTINCT COUNT ( t2.paperid )  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2007 AND t3.venuename  =  \"CVPR\" GROUP BY t1.authorid ORDER BY COUNT ( t2.paperid ) DESC;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( t2.paperid )  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2007 AND t3.venuename  =  \"CVPR\" GROUP BY t1.authorid ORDER BY COUNT ( t2.paperid ) DESC;", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "t2.paperid", ")", ",", "t1.authorid", "FROM", "venue", "AS", "t3", "JOIN", "paper", "AS", "t2", "ON", "t3.venueid", "=", "t2.venueid", "JOIN", "writes", "AS", "t1", "ON", "t1.paperid", "=", "t2.paperid", "WHERE", "t2.year", "=", "2007", "AND", "t3.venuename", "=", "``", "CVPR", "''", "GROUP", "BY", "t1.authorid", "ORDER", "BY", "COUNT", "(", "t2.paperid", ")", "DESC", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "t2", ".", "paperid", ")", ",", "t1", ".", "authorid", "from", "venue", "as", "t3", "join", "paper", "as", "t2", "on", "t3", ".", "venueid", "=", "t2", ".", "venueid", "join", "writes", "as", "t1", "on", "t1", ".", "paperid", "=", "t2", ".", "paperid", "where", "t2", ".", "year", "=", "value", "and", "t3", ".", "venuename", "=", "value", "group", "by", "t1", ".", "authorid", "order", "by", "count", "(", "t2", ".", "paperid", ")", "desc"], "question": "who published papers in CVPR 2007", "question_toks": ["who", "published", "papers", "in", "CVPR", "2007"], "guid": 4491}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | What are the 5 most recent papers of Mirella Lapata ?", "sql": "SELECT DISTINCT t3.paperid  ,  t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Mirella Lapata\" ORDER BY t3.year DESC LIMIT 5;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid  ,  t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Mirella Lapata\" ORDER BY t3.year DESC LIMIT 5;", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", ",", "t3.year", "FROM", "writes", "AS", "t2", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "JOIN", "paper", "AS", "t3", "ON", "t2.paperid", "=", "t3.paperid", "WHERE", "t1.authorname", "=", "``", "Mirella", "Lapata", "''", "ORDER", "BY", "t3.year", "DESC", "LIMIT", "5", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", ",", "t3", ".", "year", "from", "writes", "as", "t2", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "join", "paper", "as", "t3", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "where", "t1", ".", "authorname", "=", "value", "order", "by", "t3", ".", "year", "desc", "limit", "value"], "question": "What are the 5 most recent papers of Mirella Lapata ?", "question_toks": ["What", "are", "the", "5", "most", "recent", "papers", "of", "Mirella", "Lapata", "?"], "guid": 4492}}
{"text": "Scientists: SSN, Name; Projects: Code, Name, Hours; AssignedTo: Scientist, Project | Find the name of project that continues for the longest time.", "sql": "SELECT name FROM projects ORDER BY hours DESC LIMIT 1", "example": {"db_id": "scientist_1", "query": "SELECT name FROM projects ORDER BY hours DESC LIMIT 1", "query_toks": ["SELECT", "name", "FROM", "projects", "ORDER", "BY", "hours", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "name", "from", "projects", "order", "by", "hours", "desc", "limit", "value"], "question": "Find the name of project that continues for the longest time.", "question_toks": ["Find", "the", "name", "of", "project", "that", "continues", "for", "the", "longest", "time", "."], "guid": 4493}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | Show me Question Answering papers .", "sql": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "WHERE", "t1.keyphrasename", "=", "``", "Question", "Answering", "''", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "where", "t1", ".", "keyphrasename", "=", "value"], "question": "Show me Question Answering papers .", "question_toks": ["Show", "me", "Question", "Answering", "papers", "."], "guid": 4494}}
{"text": "Scientists: SSN, Name; Projects: Code, Name, Hours; AssignedTo: Scientist, Project | Find name of the project that needs the least amount of time to finish and the name of scientists who worked on it.", "sql": "SELECT T2.name ,  T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.hours  =  (SELECT min(hours) FROM projects)", "example": {"db_id": "scientist_1", "query": "SELECT T2.name ,  T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.hours  =  (SELECT min(hours) FROM projects)", "query_toks": ["SELECT", "T2.name", ",", "T3.name", "FROM", "assignedto", "AS", "T1", "JOIN", "projects", "AS", "T2", "ON", "T1.project", "=", "T2.code", "JOIN", "scientists", "AS", "T3", "ON", "T1.scientist", "=", "T3.SSN", "WHERE", "T2.hours", "=", "(", "SELECT", "min", "(", "hours", ")", "FROM", "projects", ")"], "query_toks_no_value": ["select", "t2", ".", "name", ",", "t3", ".", "name", "from", "assignedto", "as", "t1", "join", "projects", "as", "t2", "on", "t1", ".", "project", "=", "t2", ".", "code", "join", "scientists", "as", "t3", "on", "t1", ".", "scientist", "=", "t3", ".", "ssn", "where", "t2", ".", "hours", "=", "(", "select", "min", "(", "hours", ")", "from", "projects", ")"], "question": "Find name of the project that needs the least amount of time to finish and the name of scientists who worked on it.", "question_toks": ["Find", "name", "of", "the", "project", "that", "needs", "the", "least", "amount", "of", "time", "to", "finish", "and", "the", "name", "of", "scientists", "who", "worked", "on", "it", "."], "guid": 4495}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | When does Michael Stonebraker publish the first VLDB paper ?", "sql": "SELECT DISTINCT t3.year FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Michael Stonebraker\" AND t4.venuename  =  \"VLDB\" ORDER BY t3.year;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.year FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Michael Stonebraker\" AND t4.venuename  =  \"VLDB\" ORDER BY t3.year;", "query_toks": ["SELECT", "DISTINCT", "t3.year", "FROM", "venue", "AS", "t4", "JOIN", "paper", "AS", "t3", "ON", "t4.venueid", "=", "t3.venueid", "JOIN", "writes", "AS", "t2", "ON", "t2.paperid", "=", "t3.paperid", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "WHERE", "t1.authorname", "=", "``", "Michael", "Stonebraker", "''", "AND", "t4.venuename", "=", "``", "VLDB", "''", "ORDER", "BY", "t3.year", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "year", "from", "venue", "as", "t4", "join", "paper", "as", "t3", "on", "t4", ".", "venueid", "=", "t3", ".", "venueid", "join", "writes", "as", "t2", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "where", "t1", ".", "authorname", "=", "value", "and", "t4", ".", "venuename", "=", "value", "order", "by", "t3", ".", "year"], "question": "When does Michael Stonebraker publish the first VLDB paper ?", "question_toks": ["When", "does", "Michael", "Stonebraker", "publish", "the", "first", "VLDB", "paper", "?"], "guid": 4496}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | where does Peter Mertens publish ?", "sql": "SELECT DISTINCT t3.journalid  ,  t4.venueid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Peter Mertens\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.journalid  ,  t4.venueid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Peter Mertens\";", "query_toks": ["SELECT", "DISTINCT", "t3.journalid", ",", "t4.venueid", "FROM", "venue", "AS", "t4", "JOIN", "paper", "AS", "t3", "ON", "t4.venueid", "=", "t3.venueid", "JOIN", "writes", "AS", "t2", "ON", "t2.paperid", "=", "t3.paperid", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "WHERE", "t1.authorname", "=", "``", "Peter", "Mertens", "''", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "journalid", ",", "t4", ".", "venueid", "from", "venue", "as", "t4", "join", "paper", "as", "t3", "on", "t4", ".", "venueid", "=", "t3", ".", "venueid", "join", "writes", "as", "t2", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "where", "t1", ".", "authorname", "=", "value"], "question": "where does Peter Mertens publish ?", "question_toks": ["where", "does", "Peter", "Mertens", "publish", "?"], "guid": 4497}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | What is the most cited paper at sigcomm ?", "sql": "SELECT DISTINCT t3.citedpaperid  ,  COUNT ( t3.citingpaperid ) FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"sigcomm\" GROUP BY t3.citedpaperid ORDER BY COUNT ( t3.citingpaperid ) DESC;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.citedpaperid  ,  COUNT ( t3.citingpaperid ) FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"sigcomm\" GROUP BY t3.citedpaperid ORDER BY COUNT ( t3.citingpaperid ) DESC;", "query_toks": ["SELECT", "DISTINCT", "t3.citedpaperid", ",", "COUNT", "(", "t3.citingpaperid", ")", "FROM", "paper", "AS", "t1", "JOIN", "cite", "AS", "t3", "ON", "t1.paperid", "=", "t3.citedpaperid", "JOIN", "venue", "AS", "t2", "ON", "t2.venueid", "=", "t1.venueid", "WHERE", "t2.venuename", "=", "``", "sigcomm", "''", "GROUP", "BY", "t3.citedpaperid", "ORDER", "BY", "COUNT", "(", "t3.citingpaperid", ")", "DESC", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "citedpaperid", ",", "count", "(", "t3", ".", "citingpaperid", ")", "from", "paper", "as", "t1", "join", "cite", "as", "t3", "on", "t1", ".", "paperid", "=", "t3", ".", "citedpaperid", "join", "venue", "as", "t2", "on", "t2", ".", "venueid", "=", "t1", ".", "venueid", "where", "t2", ".", "venuename", "=", "value", "group", "by", "t3", ".", "citedpaperid", "order", "by", "count", "(", "t3", ".", "citingpaperid", ")", "desc"], "question": "What is the most cited paper at sigcomm ?", "question_toks": ["What", "is", "the", "most", "cited", "paper", "at", "sigcomm", "?"], "guid": 4498}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | Which paper from EMNLP 2010 was cited most ?", "sql": "SELECT DISTINCT t3.citedpaperid  ,  COUNT ( t3.citedpaperid ) FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2010 AND t2.venuename  =  \"EMNLP\" GROUP BY t3.citedpaperid ORDER BY COUNT ( t3.citedpaperid ) DESC;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.citedpaperid  ,  COUNT ( t3.citedpaperid ) FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2010 AND t2.venuename  =  \"EMNLP\" GROUP BY t3.citedpaperid ORDER BY COUNT ( t3.citedpaperid ) DESC;", "query_toks": ["SELECT", "DISTINCT", "t3.citedpaperid", ",", "COUNT", "(", "t3.citedpaperid", ")", "FROM", "paper", "AS", "t1", "JOIN", "cite", "AS", "t3", "ON", "t1.paperid", "=", "t3.citedpaperid", "JOIN", "venue", "AS", "t2", "ON", "t2.venueid", "=", "t1.venueid", "WHERE", "t1.year", "=", "2010", "AND", "t2.venuename", "=", "``", "EMNLP", "''", "GROUP", "BY", "t3.citedpaperid", "ORDER", "BY", "COUNT", "(", "t3.citedpaperid", ")", "DESC", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "citedpaperid", ",", "count", "(", "t3", ".", "citedpaperid", ")", "from", "paper", "as", "t1", "join", "cite", "as", "t3", "on", "t1", ".", "paperid", "=", "t3", ".", "citedpaperid", "join", "venue", "as", "t2", "on", "t2", ".", "venueid", "=", "t1", ".", "venueid", "where", "t1", ".", "year", "=", "value", "and", "t2", ".", "venuename", "=", "value", "group", "by", "t3", ".", "citedpaperid", "order", "by", "count", "(", "t3", ".", "citedpaperid", ")", "desc"], "question": "Which paper from EMNLP 2010 was cited most ?", "question_toks": ["Which", "paper", "from", "EMNLP", "2010", "was", "cited", "most", "?"], "guid": 4499}}
{"text": "Document_Types: document_type_code, document_description; Documents: document_id, document_type_code, grant_id, sent_date, response_received_date, other_details; Grants: grant_id, organisation_id, grant_amount, grant_start_date, grant_end_date, other_details; Organisation_Types: organisation_type, organisation_type_description; Organisations: organisation_id, organisation_type, organisation_details; Project_Outcomes: project_id, outcome_code, outcome_details; Project_Staff: staff_id, project_id, role_code, date_from, date_to, other_details; Projects: project_id, organisation_id, project_details; Research_Outcomes: outcome_code, outcome_description; Research_Staff: staff_id, employer_organisation_id, staff_details | What is the type of the document whose description starts with the word 'Initial'?", "sql": "SELECT document_type_code FROM Document_Types WHERE document_description LIKE 'Initial%'", "example": {"db_id": "tracking_grants_for_research", "query": "SELECT document_type_code FROM Document_Types WHERE document_description LIKE 'Initial%'", "query_toks": ["SELECT", "document_type_code", "FROM", "Document_Types", "WHERE", "document_description", "LIKE", "'Initial", "%", "'"], "query_toks_no_value": ["select", "document_type_code", "from", "document_types", "where", "document_description", "like", "value"], "question": "What is the type of the document whose description starts with the word 'Initial'?", "question_toks": ["What", "is", "the", "type", "of", "the", "document", "whose", "description", "starts", "with", "the", "word", "'Initial", "'", "?"], "guid": 4500}}
{"text": "journal: Journal_ID, Date, Theme, Sales; editor: Editor_ID, Name, Age; journal_committee: Editor_ID, Journal_ID, Work_Type | Show the distinct themes of journals.", "sql": "SELECT DISTINCT Theme FROM journal", "example": {"db_id": "journal_committee", "query": "SELECT DISTINCT Theme FROM journal", "query_toks": ["SELECT", "DISTINCT", "Theme", "FROM", "journal"], "query_toks_no_value": ["select", "distinct", "theme", "from", "journal"], "question": "Show the distinct themes of journals.", "question_toks": ["Show", "the", "distinct", "themes", "of", "journals", "."], "guid": 4501}}
{"text": "book_club: book_club_id, Year, Author_or_Editor, Book_Title, Publisher, Category, Result; movie: movie_id, Title, Year, Director, Budget_million, Gross_worldwide; culture_company: Company_name, Type, Incorporated_in, Group_Equity_Shareholding, book_club_id, movie_id | What are all company names that have a corresponding movie directed in the year 1999?", "sql": "SELECT T2.company_name FROM movie AS T1 JOIN culture_company AS T2 ON T1.movie_id  =  T2.movie_id WHERE T1.year  =  1999", "example": {"db_id": "culture_company", "query": "SELECT T2.company_name FROM movie AS T1 JOIN culture_company AS T2 ON T1.movie_id  =  T2.movie_id WHERE T1.year  =  1999", "query_toks": ["SELECT", "T2.company_name", "FROM", "movie", "AS", "T1", "JOIN", "culture_company", "AS", "T2", "ON", "T1.movie_id", "=", "T2.movie_id", "WHERE", "T1.year", "=", "1999"], "query_toks_no_value": ["select", "t2", ".", "company_name", "from", "movie", "as", "t1", "join", "culture_company", "as", "t2", "on", "t1", ".", "movie_id", "=", "t2", ".", "movie_id", "where", "t1", ".", "year", "=", "value"], "question": "What are all company names that have a corresponding movie directed in the year 1999?", "question_toks": ["What", "are", "all", "company", "names", "that", "have", "a", "corresponding", "movie", "directed", "in", "the", "year", "1999", "?"], "guid": 4502}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | who wrote papers in 2015", "sql": "SELECT DISTINCT t1.authorid FROM writes AS t1 JOIN paper AS t2 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2015;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t1.authorid FROM writes AS t1 JOIN paper AS t2 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2015;", "query_toks": ["SELECT", "DISTINCT", "t1.authorid", "FROM", "writes", "AS", "t1", "JOIN", "paper", "AS", "t2", "ON", "t1.paperid", "=", "t2.paperid", "WHERE", "t2.year", "=", "2015", ";"], "query_toks_no_value": ["select", "distinct", "t1", ".", "authorid", "from", "writes", "as", "t1", "join", "paper", "as", "t2", "on", "t1", ".", "paperid", "=", "t2", ".", "paperid", "where", "t2", ".", "year", "=", "value"], "question": "who wrote papers in 2015", "question_toks": ["who", "wrote", "papers", "in", "2015"], "guid": 4503}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | ACL papers with less than 5 citations", "sql": "SELECT DISTINCT t3.citingpaperid FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"ACL\" GROUP BY t3.citingpaperid HAVING COUNT ( DISTINCT t3.citedpaperid )  <  5;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.citingpaperid FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"ACL\" GROUP BY t3.citingpaperid HAVING COUNT ( DISTINCT t3.citedpaperid )  <  5;", "query_toks": ["SELECT", "DISTINCT", "t3.citingpaperid", "FROM", "paper", "AS", "t1", "JOIN", "cite", "AS", "t3", "ON", "t1.paperid", "=", "t3.citedpaperid", "JOIN", "venue", "AS", "t2", "ON", "t2.venueid", "=", "t1.venueid", "WHERE", "t2.venuename", "=", "``", "ACL", "''", "GROUP", "BY", "t3.citingpaperid", "HAVING", "COUNT", "(", "DISTINCT", "t3.citedpaperid", ")", "<", "5", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "citingpaperid", "from", "paper", "as", "t1", "join", "cite", "as", "t3", "on", "t1", ".", "paperid", "=", "t3", ".", "citedpaperid", "join", "venue", "as", "t2", "on", "t2", ".", "venueid", "=", "t1", ".", "venueid", "where", "t2", ".", "venuename", "=", "value", "group", "by", "t3", ".", "citingpaperid", "having", "count", "(", "distinct", "t3", ".", "citedpaperid", ")", "<", "value"], "question": "ACL papers with less than 5 citations", "question_toks": ["ACL", "papers", "with", "less", "than", "5", "citations"], "guid": 4504}}
{"text": "Inst: instID, name, country; Authors: authID, lname, fname; Papers: paperID, title; Authorship: authID, instID, paperID, authOrder | Which papers have the substring \"ML\" in their titles? Return the titles of the papers.", "sql": "SELECT title FROM papers WHERE title LIKE \"%ML%\"", "example": {"db_id": "icfp_1", "query": "SELECT title FROM papers WHERE title LIKE \"%ML%\"", "query_toks": ["SELECT", "title", "FROM", "papers", "WHERE", "title", "LIKE", "``", "%", "ML", "%", "''"], "query_toks_no_value": ["select", "title", "from", "papers", "where", "title", "like", "value"], "question": "Which papers have the substring \"ML\" in their titles? Return the titles of the papers.", "question_toks": ["Which", "papers", "have", "the", "substring", "``", "ML", "''", "in", "their", "titles", "?", "Return", "the", "titles", "of", "the", "papers", "."], "guid": 4505}}
{"text": "item: i_id, title; review: a_id, u_id, i_id, rating, rank; useracct: u_id, name; trust: source_u_id, target_u_id, trust | Find each target user's name and average trust score.", "sql": "SELECT T1.name ,  avg(trust) FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id  =  T2.target_u_id GROUP BY T2.target_u_id", "example": {"db_id": "epinions_1", "query": "SELECT T1.name ,  avg(trust) FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id  =  T2.target_u_id GROUP BY T2.target_u_id", "query_toks": ["SELECT", "T1.name", ",", "avg", "(", "trust", ")", "FROM", "useracct", "AS", "T1", "JOIN", "trust", "AS", "T2", "ON", "T1.u_id", "=", "T2.target_u_id", "GROUP", "BY", "T2.target_u_id"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "avg", "(", "trust", ")", "from", "useracct", "as", "t1", "join", "trust", "as", "t2", "on", "t1", ".", "u_id", "=", "t2", ".", "target_u_id", "group", "by", "t2", ".", "target_u_id"], "question": "Find each target user's name and average trust score.", "question_toks": ["Find", "each", "target", "user", "'s", "name", "and", "average", "trust", "score", "."], "guid": 4506}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | papers written by Peter Mertens and Dina Barbian", "sql": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "writes", "AS", "t3", "JOIN", "author", "AS", "t2", "ON", "t3.authorid", "=", "t2.authorid", "JOIN", "writes", "AS", "t4", "ON", "t4.paperid", "=", "t3.paperid", "JOIN", "author", "AS", "t1", "ON", "t4.authorid", "=", "t1.authorid", "WHERE", "t2.authorname", "=", "``", "Peter", "Mertens", "''", "AND", "t1.authorname", "=", "``", "Dina", "Barbian", "''", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "writes", "as", "t3", "join", "author", "as", "t2", "on", "t3", ".", "authorid", "=", "t2", ".", "authorid", "join", "writes", "as", "t4", "on", "t4", ".", "paperid", "=", "t3", ".", "paperid", "join", "author", "as", "t1", "on", "t4", ".", "authorid", "=", "t1", ".", "authorid", "where", "t2", ".", "authorname", "=", "value", "and", "t1", ".", "authorname", "=", "value"], "question": "papers written by Peter Mertens and Dina Barbian", "question_toks": ["papers", "written", "by", "Peter", "Mertens", "and", "Dina", "Barbian"], "guid": 4507}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the number of papers after 2000 .", "sql": "SELECT COUNT ( DISTINCT title ) FROM publication WHERE YEAR  >  2000;", "example": {"db_id": "academic", "query": "SELECT COUNT ( DISTINCT title ) FROM publication WHERE YEAR  >  2000;", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "title", ")", "FROM", "publication", "WHERE", "YEAR", ">", "2000", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "title", ")", "from", "publication", "where", "year", ">", "value"], "question": "return me the number of papers after 2000 .", "question_toks": ["return", "me", "the", "number", "of", "papers", "after", "2000", "."], "guid": 4508}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the homepage of the VLDB conference .", "sql": "SELECT homepage FROM conference WHERE name  =  \"VLDB\";", "example": {"db_id": "academic", "query": "SELECT homepage FROM conference WHERE name  =  \"VLDB\";", "query_toks": ["SELECT", "homepage", "FROM", "conference", "WHERE", "name", "=", "``", "VLDB", "''", ";"], "query_toks_no_value": ["select", "homepage", "from", "conference", "where", "name", "=", "value"], "question": "return me the homepage of the VLDB conference .", "question_toks": ["return", "me", "the", "homepage", "of", "the", "VLDB", "conference", "."], "guid": 4509}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | What papers were published during the conference pldi 2015 ?", "sql": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"pldi\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"pldi\";", "query_toks": ["SELECT", "DISTINCT", "t1.paperid", "FROM", "venue", "AS", "t2", "JOIN", "paper", "AS", "t1", "ON", "t2.venueid", "=", "t1.venueid", "WHERE", "t1.year", "=", "2015", "AND", "t2.venuename", "=", "``", "pldi", "''", ";"], "query_toks_no_value": ["select", "distinct", "t1", ".", "paperid", "from", "venue", "as", "t2", "join", "paper", "as", "t1", "on", "t2", ".", "venueid", "=", "t1", ".", "venueid", "where", "t1", ".", "year", "=", "value", "and", "t2", ".", "venuename", "=", "value"], "question": "What papers were published during the conference pldi 2015 ?", "question_toks": ["What", "papers", "were", "published", "during", "the", "conference", "pldi", "2015", "?"], "guid": 4510}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | which EMNLP 2010 papers have the most citations ?", "sql": "SELECT DISTINCT t3.citedpaperid  ,  COUNT ( t3.citedpaperid ) FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2010 AND t2.venuename  =  \"EMNLP\" GROUP BY t3.citedpaperid ORDER BY COUNT ( t3.citedpaperid ) DESC;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.citedpaperid  ,  COUNT ( t3.citedpaperid ) FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2010 AND t2.venuename  =  \"EMNLP\" GROUP BY t3.citedpaperid ORDER BY COUNT ( t3.citedpaperid ) DESC;", "query_toks": ["SELECT", "DISTINCT", "t3.citedpaperid", ",", "COUNT", "(", "t3.citedpaperid", ")", "FROM", "paper", "AS", "t1", "JOIN", "cite", "AS", "t3", "ON", "t1.paperid", "=", "t3.citedpaperid", "JOIN", "venue", "AS", "t2", "ON", "t2.venueid", "=", "t1.venueid", "WHERE", "t1.year", "=", "2010", "AND", "t2.venuename", "=", "``", "EMNLP", "''", "GROUP", "BY", "t3.citedpaperid", "ORDER", "BY", "COUNT", "(", "t3.citedpaperid", ")", "DESC", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "citedpaperid", ",", "count", "(", "t3", ".", "citedpaperid", ")", "from", "paper", "as", "t1", "join", "cite", "as", "t3", "on", "t1", ".", "paperid", "=", "t3", ".", "citedpaperid", "join", "venue", "as", "t2", "on", "t2", ".", "venueid", "=", "t1", ".", "venueid", "where", "t1", ".", "year", "=", "value", "and", "t2", ".", "venuename", "=", "value", "group", "by", "t3", ".", "citedpaperid", "order", "by", "count", "(", "t3", ".", "citedpaperid", ")", "desc"], "question": "which EMNLP 2010 papers have the most citations ?", "question_toks": ["which", "EMNLP", "2010", "papers", "have", "the", "most", "citations", "?"], "guid": 4511}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | main topics of work by Brian DeRenzi", "sql": "SELECT DISTINCT t1.keyphrasename  ,  SUM ( t3.numcitedby ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Brian DeRenzi\" GROUP BY t1.keyphrasename ORDER BY SUM ( t3.numcitedby ) DESC;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t1.keyphrasename  ,  SUM ( t3.numcitedby ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Brian DeRenzi\" GROUP BY t1.keyphrasename ORDER BY SUM ( t3.numcitedby ) DESC;", "query_toks": ["SELECT", "DISTINCT", "t1.keyphrasename", ",", "SUM", "(", "t3.numcitedby", ")", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "JOIN", "writes", "AS", "t4", "ON", "t4.paperid", "=", "t3.paperid", "JOIN", "author", "AS", "t5", "ON", "t4.authorid", "=", "t5.authorid", "WHERE", "t5.authorname", "=", "``", "Brian", "DeRenzi", "''", "GROUP", "BY", "t1.keyphrasename", "ORDER", "BY", "SUM", "(", "t3.numcitedby", ")", "DESC", ";"], "query_toks_no_value": ["select", "distinct", "t1", ".", "keyphrasename", ",", "sum", "(", "t3", ".", "numcitedby", ")", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "join", "writes", "as", "t4", "on", "t4", ".", "paperid", "=", "t3", ".", "paperid", "join", "author", "as", "t5", "on", "t4", ".", "authorid", "=", "t5", ".", "authorid", "where", "t5", ".", "authorname", "=", "value", "group", "by", "t1", ".", "keyphrasename", "order", "by", "sum", "(", "t3", ".", "numcitedby", ")", "desc"], "question": "main topics of work by Brian DeRenzi", "question_toks": ["main", "topics", "of", "work", "by", "Brian", "DeRenzi"], "guid": 4512}}
{"text": "Scientists: SSN, Name; Projects: Code, Name, Hours; AssignedTo: Scientist, Project | What are the names of each scientist, the names of the projects that they work on, and the hours for each of those projects, listed in alphabetical order by project name, then scientist name.", "sql": "SELECT T1.Name ,  T3.Name ,  T3.Hours FROM Scientists AS T1 JOIN AssignedTo AS T2 ON T1.SSN = T2.Scientist JOIN Projects AS T3 ON T2.Project = T3.Code ORDER BY T3.Name ,  T1.Name", "example": {"db_id": "scientist_1", "query": "SELECT T1.Name ,  T3.Name ,  T3.Hours FROM Scientists AS T1 JOIN AssignedTo AS T2 ON T1.SSN = T2.Scientist JOIN Projects AS T3 ON T2.Project = T3.Code ORDER BY T3.Name ,  T1.Name", "query_toks": ["SELECT", "T1.Name", ",", "T3.Name", ",", "T3.Hours", "FROM", "Scientists", "AS", "T1", "JOIN", "AssignedTo", "AS", "T2", "ON", "T1.SSN", "=", "T2.Scientist", "JOIN", "Projects", "AS", "T3", "ON", "T2.Project", "=", "T3.Code", "ORDER", "BY", "T3.Name", ",", "T1.Name"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "t3", ".", "name", ",", "t3", ".", "hours", "from", "scientists", "as", "t1", "join", "assignedto", "as", "t2", "on", "t1", ".", "ssn", "=", "t2", ".", "scientist", "join", "projects", "as", "t3", "on", "t2", ".", "project", "=", "t3", ".", "code", "order", "by", "t3", ".", "name", ",", "t1", ".", "name"], "question": "What are the names of each scientist, the names of the projects that they work on, and the hours for each of those projects, listed in alphabetical order by project name, then scientist name.", "question_toks": ["What", "are", "the", "names", "of", "each", "scientist", ",", "the", "names", "of", "the", "projects", "that", "they", "work", "on", ",", "and", "the", "hours", "for", "each", "of", "those", "projects", ",", "listed", "in", "alphabetical", "order", "by", "project", "name", ",", "then", "scientist", "name", "."], "guid": 4513}}
{"text": "Scientists: SSN, Name; Projects: Code, Name, Hours; AssignedTo: Scientist, Project | Find the number of projects which each scientist is working on and scientist's name.", "sql": "SELECT count(*) ,  T1.name FROM scientists AS T1 JOIN assignedto AS T2 ON T1.ssn  =  T2.scientist GROUP BY T1.name", "example": {"db_id": "scientist_1", "query": "SELECT count(*) ,  T1.name FROM scientists AS T1 JOIN assignedto AS T2 ON T1.ssn  =  T2.scientist GROUP BY T1.name", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "T1.name", "FROM", "scientists", "AS", "T1", "JOIN", "assignedto", "AS", "T2", "ON", "T1.ssn", "=", "T2.scientist", "GROUP", "BY", "T1.name"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "t1", ".", "name", "from", "scientists", "as", "t1", "join", "assignedto", "as", "t2", "on", "t1", ".", "ssn", "=", "t2", ".", "scientist", "group", "by", "t1", ".", "name"], "question": "Find the number of projects which each scientist is working on and scientist's name.", "question_toks": ["Find", "the", "number", "of", "projects", "which", "each", "scientist", "is", "working", "on", "and", "scientist", "'s", "name", "."], "guid": 4514}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | What was the first paper on deep learning written ?", "sql": "SELECT DISTINCT t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\" GROUP BY t3.year ORDER BY t3.year ASC;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\" GROUP BY t3.year ORDER BY t3.year ASC;", "query_toks": ["SELECT", "DISTINCT", "t3.year", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "WHERE", "t1.keyphrasename", "=", "``", "deep", "learning", "''", "GROUP", "BY", "t3.year", "ORDER", "BY", "t3.year", "ASC", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "year", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "where", "t1", ".", "keyphrasename", "=", "value", "group", "by", "t3", ".", "year", "order", "by", "t3", ".", "year", "asc"], "question": "What was the first paper on deep learning written ?", "question_toks": ["What", "was", "the", "first", "paper", "on", "deep", "learning", "written", "?"], "guid": 4515}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | How many papers has Christopher D. Manning published ?", "sql": "SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christopher D. Manning\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christopher D. Manning\";", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "DISTINCT", "t2.paperid", ")", "FROM", "writes", "AS", "t2", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "WHERE", "t1.authorname", "=", "``", "Christopher", "D.", "Manning", "''", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "distinct", "t2", ".", "paperid", ")", "from", "writes", "as", "t2", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "where", "t1", ".", "authorname", "=", "value"], "question": "How many papers has Christopher D. Manning published ?", "question_toks": ["How", "many", "papers", "has", "Christopher", "D.", "Manning", "published", "?"], "guid": 4516}}
{"text": "Document_Types: document_type_code, document_description; Documents: document_id, document_type_code, grant_id, sent_date, response_received_date, other_details; Grants: grant_id, organisation_id, grant_amount, grant_start_date, grant_end_date, other_details; Organisation_Types: organisation_type, organisation_type_description; Organisations: organisation_id, organisation_type, organisation_details; Project_Outcomes: project_id, outcome_code, outcome_details; Project_Staff: staff_id, project_id, role_code, date_from, date_to, other_details; Projects: project_id, organisation_id, project_details; Research_Outcomes: outcome_code, outcome_description; Research_Staff: staff_id, employer_organisation_id, staff_details | What are the different grant amounts for documents sent before '1986-08-26 20:49:27' and after the grant ended on '1989-03-16 18:27:16'?", "sql": "SELECT T1.grant_amount FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id  =  T2.grant_id WHERE T2.sent_date  <  '1986-08-26 20:49:27' INTERSECT SELECT grant_amount FROM grants WHERE grant_end_date  >  '1989-03-16 18:27:16'", "example": {"db_id": "tracking_grants_for_research", "query": "SELECT T1.grant_amount FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id  =  T2.grant_id WHERE T2.sent_date  <  '1986-08-26 20:49:27' INTERSECT SELECT grant_amount FROM grants WHERE grant_end_date  >  '1989-03-16 18:27:16'", "query_toks": ["SELECT", "T1.grant_amount", "FROM", "Grants", "AS", "T1", "JOIN", "Documents", "AS", "T2", "ON", "T1.grant_id", "=", "T2.grant_id", "WHERE", "T2.sent_date", "<", "'1986-08-26", "20:49:27", "'", "INTERSECT", "SELECT", "grant_amount", "FROM", "grants", "WHERE", "grant_end_date", ">", "'1989-03-16", "18:27:16", "'"], "query_toks_no_value": ["select", "t1", ".", "grant_amount", "from", "grants", "as", "t1", "join", "documents", "as", "t2", "on", "t1", ".", "grant_id", "=", "t2", ".", "grant_id", "where", "t2", ".", "sent_date", "<", "value", "intersect", "select", "grant_amount", "from", "grants", "where", "grant_end_date", ">", "value"], "question": "What are the different grant amounts for documents sent before '1986-08-26 20:49:27' and after the grant ended on '1989-03-16 18:27:16'?", "question_toks": ["What", "are", "the", "different", "grant", "amounts", "for", "documents", "sent", "before", "'1986-08-26", "20:49:27", "'", "and", "after", "the", "grant", "ended", "on", "'1989-03-16", "18:27:16", "'", "?"], "guid": 4517}}
{"text": "Scientists: SSN, Name; Projects: Code, Name, Hours; AssignedTo: Scientist, Project | How many different scientists are assigned to any project?", "sql": "SELECT count(DISTINCT scientist) FROM assignedto", "example": {"db_id": "scientist_1", "query": "SELECT count(DISTINCT scientist) FROM assignedto", "query_toks": ["SELECT", "count", "(", "DISTINCT", "scientist", ")", "FROM", "assignedto"], "query_toks_no_value": ["select", "count", "(", "distinct", "scientist", ")", "from", "assignedto"], "question": "How many different scientists are assigned to any project?", "question_toks": ["How", "many", "different", "scientists", "are", "assigned", "to", "any", "project", "?"], "guid": 4518}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | who published the most papers in CVPR 2007", "sql": "SELECT DISTINCT COUNT ( t2.paperid )  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2007 AND t3.venuename  =  \"CVPR\" GROUP BY t1.authorid ORDER BY COUNT ( t2.paperid ) DESC;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( t2.paperid )  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2007 AND t3.venuename  =  \"CVPR\" GROUP BY t1.authorid ORDER BY COUNT ( t2.paperid ) DESC;", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "t2.paperid", ")", ",", "t1.authorid", "FROM", "venue", "AS", "t3", "JOIN", "paper", "AS", "t2", "ON", "t3.venueid", "=", "t2.venueid", "JOIN", "writes", "AS", "t1", "ON", "t1.paperid", "=", "t2.paperid", "WHERE", "t2.year", "=", "2007", "AND", "t3.venuename", "=", "``", "CVPR", "''", "GROUP", "BY", "t1.authorid", "ORDER", "BY", "COUNT", "(", "t2.paperid", ")", "DESC", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "t2", ".", "paperid", ")", ",", "t1", ".", "authorid", "from", "venue", "as", "t3", "join", "paper", "as", "t2", "on", "t3", ".", "venueid", "=", "t2", ".", "venueid", "join", "writes", "as", "t1", "on", "t1", ".", "paperid", "=", "t2", ".", "paperid", "where", "t2", ".", "year", "=", "value", "and", "t3", ".", "venuename", "=", "value", "group", "by", "t1", ".", "authorid", "order", "by", "count", "(", "t2", ".", "paperid", ")", "desc"], "question": "who published the most papers in CVPR 2007", "question_toks": ["who", "published", "the", "most", "papers", "in", "CVPR", "2007"], "guid": 4519}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | top authors working on ImageNet ?", "sql": "SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t4 ON t4.paperid  =  t2.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t1.datasetname  =  \"ImageNet\" GROUP BY t3.paperid ORDER BY COUNT ( t4.paperid ) DESC;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t4 ON t4.paperid  =  t2.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t1.datasetname  =  \"ImageNet\" GROUP BY t3.paperid ORDER BY COUNT ( t4.paperid ) DESC;", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "t4.paperid", ")", ",", "t3.paperid", "FROM", "paperdataset", "AS", "t2", "JOIN", "dataset", "AS", "t1", "ON", "t2.datasetid", "=", "t1.datasetid", "JOIN", "paper", "AS", "t4", "ON", "t4.paperid", "=", "t2.paperid", "JOIN", "writes", "AS", "t3", "ON", "t3.paperid", "=", "t4.paperid", "WHERE", "t1.datasetname", "=", "``", "ImageNet", "''", "GROUP", "BY", "t3.paperid", "ORDER", "BY", "COUNT", "(", "t4.paperid", ")", "DESC", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "t4", ".", "paperid", ")", ",", "t3", ".", "paperid", "from", "paperdataset", "as", "t2", "join", "dataset", "as", "t1", "on", "t2", ".", "datasetid", "=", "t1", ".", "datasetid", "join", "paper", "as", "t4", "on", "t4", ".", "paperid", "=", "t2", ".", "paperid", "join", "writes", "as", "t3", "on", "t3", ".", "paperid", "=", "t4", ".", "paperid", "where", "t1", ".", "datasetname", "=", "value", "group", "by", "t3", ".", "paperid", "order", "by", "count", "(", "t4", ".", "paperid", ")", "desc"], "question": "top authors working on ImageNet ?", "question_toks": ["top", "authors", "working", "on", "ImageNet", "?"], "guid": 4520}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the number of papers in \" University of Michigan \" in Databases area .", "sql": "SELECT COUNT ( DISTINCT t4.title ) FROM domain_author AS t6 JOIN author AS t1 ON t6.aid  =  t1.aid JOIN DOMAIN AS t3 ON t3.did  =  t6.did JOIN domain_publication AS t2 ON t3.did  =  t2.did JOIN organization AS t5 ON t5.oid  =  t1.oid JOIN publication AS t4 ON t4.pid  =  t2.pid WHERE t3.name  =  \"Databases\" AND t5.name  =  \"University of Michigan\";", "example": {"db_id": "academic", "query": "SELECT COUNT ( DISTINCT t4.title ) FROM domain_author AS t6 JOIN author AS t1 ON t6.aid  =  t1.aid JOIN DOMAIN AS t3 ON t3.did  =  t6.did JOIN domain_publication AS t2 ON t3.did  =  t2.did JOIN organization AS t5 ON t5.oid  =  t1.oid JOIN publication AS t4 ON t4.pid  =  t2.pid WHERE t3.name  =  \"Databases\" AND t5.name  =  \"University of Michigan\";", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "t4.title", ")", "FROM", "domain_author", "AS", "t6", "JOIN", "author", "AS", "t1", "ON", "t6.aid", "=", "t1.aid", "JOIN", "DOMAIN", "AS", "t3", "ON", "t3.did", "=", "t6.did", "JOIN", "domain_publication", "AS", "t2", "ON", "t3.did", "=", "t2.did", "JOIN", "organization", "AS", "t5", "ON", "t5.oid", "=", "t1.oid", "JOIN", "publication", "AS", "t4", "ON", "t4.pid", "=", "t2.pid", "WHERE", "t3.name", "=", "``", "Databases", "''", "AND", "t5.name", "=", "``", "University", "of", "Michigan", "''", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "t4", ".", "title", ")", "from", "domain_author", "as", "t6", "join", "author", "as", "t1", "on", "t6", ".", "aid", "=", "t1", ".", "aid", "join", "domain", "as", "t3", "on", "t3", ".", "did", "=", "t6", ".", "did", "join", "domain_publication", "as", "t2", "on", "t3", ".", "did", "=", "t2", ".", "did", "join", "organization", "as", "t5", "on", "t5", ".", "oid", "=", "t1", ".", "oid", "join", "publication", "as", "t4", "on", "t4", ".", "pid", "=", "t2", ".", "pid", "where", "t3", ".", "name", "=", "value", "and", "t5", ".", "name", "=", "value"], "question": "return me the number of papers in \" University of Michigan \" in Databases area .", "question_toks": ["return", "me", "the", "number", "of", "papers", "in", "``", "University", "of", "Michigan", "``", "in", "Databases", "area", "."], "guid": 4521}}
{"text": "item: i_id, title; review: a_id, u_id, i_id, rating, rank; useracct: u_id, name; trust: source_u_id, target_u_id, trust | Find the name of the source user with the highest average trust score.", "sql": "SELECT T1.name FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id  =  T2.source_u_id GROUP BY T2.source_u_id ORDER BY avg(trust) DESC LIMIT 1", "example": {"db_id": "epinions_1", "query": "SELECT T1.name FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id  =  T2.source_u_id GROUP BY T2.source_u_id ORDER BY avg(trust) DESC LIMIT 1", "query_toks": ["SELECT", "T1.name", "FROM", "useracct", "AS", "T1", "JOIN", "trust", "AS", "T2", "ON", "T1.u_id", "=", "T2.source_u_id", "GROUP", "BY", "T2.source_u_id", "ORDER", "BY", "avg", "(", "trust", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "useracct", "as", "t1", "join", "trust", "as", "t2", "on", "t1", ".", "u_id", "=", "t2", ".", "source_u_id", "group", "by", "t2", ".", "source_u_id", "order", "by", "avg", "(", "trust", ")", "desc", "limit", "value"], "question": "Find the name of the source user with the highest average trust score.", "question_toks": ["Find", "the", "name", "of", "the", "source", "user", "with", "the", "highest", "average", "trust", "score", "."], "guid": 4522}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | journal papers for instance segmentation", "sql": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"instance segmentation\" AND t3.journalid  >=  0;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"instance segmentation\" AND t3.journalid  >=  0;", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "WHERE", "t1.keyphrasename", "=", "``", "instance", "segmentation", "''", "AND", "t3.journalid", ">", "=", "0", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "where", "t1", ".", "keyphrasename", "=", "value", "and", "t3", ".", "journalid", ">", "=", "value"], "question": "journal papers for instance segmentation", "question_toks": ["journal", "papers", "for", "instance", "segmentation"], "guid": 4523}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | What was the best paper at TACL 2014 ?", "sql": "SELECT DISTINCT COUNT ( DISTINCT t3.citingpaperid )  ,  t1.paperid FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2014 AND t2.venuename  =  \"TACL\" GROUP BY t1.paperid ORDER BY COUNT ( DISTINCT t3.citingpaperid ) DESC;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( DISTINCT t3.citingpaperid )  ,  t1.paperid FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2014 AND t2.venuename  =  \"TACL\" GROUP BY t1.paperid ORDER BY COUNT ( DISTINCT t3.citingpaperid ) DESC;", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "DISTINCT", "t3.citingpaperid", ")", ",", "t1.paperid", "FROM", "paper", "AS", "t1", "JOIN", "cite", "AS", "t3", "ON", "t1.paperid", "=", "t3.citedpaperid", "JOIN", "venue", "AS", "t2", "ON", "t2.venueid", "=", "t1.venueid", "WHERE", "t1.year", "=", "2014", "AND", "t2.venuename", "=", "``", "TACL", "''", "GROUP", "BY", "t1.paperid", "ORDER", "BY", "COUNT", "(", "DISTINCT", "t3.citingpaperid", ")", "DESC", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "distinct", "t3", ".", "citingpaperid", ")", ",", "t1", ".", "paperid", "from", "paper", "as", "t1", "join", "cite", "as", "t3", "on", "t1", ".", "paperid", "=", "t3", ".", "citedpaperid", "join", "venue", "as", "t2", "on", "t2", ".", "venueid", "=", "t1", ".", "venueid", "where", "t1", ".", "year", "=", "value", "and", "t2", ".", "venuename", "=", "value", "group", "by", "t1", ".", "paperid", "order", "by", "count", "(", "distinct", "t3", ".", "citingpaperid", ")", "desc"], "question": "What was the best paper at TACL 2014 ?", "question_toks": ["What", "was", "the", "best", "paper", "at", "TACL", "2014", "?"], "guid": 4524}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | What conference does Daniella Coelho publish in ?", "sql": "SELECT DISTINCT t3.venueid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Daniella Coelho\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.venueid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Daniella Coelho\";", "query_toks": ["SELECT", "DISTINCT", "t3.venueid", "FROM", "writes", "AS", "t2", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "JOIN", "paper", "AS", "t3", "ON", "t2.paperid", "=", "t3.paperid", "WHERE", "t1.authorname", "=", "``", "Daniella", "Coelho", "''", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "venueid", "from", "writes", "as", "t2", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "join", "paper", "as", "t3", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "where", "t1", ".", "authorname", "=", "value"], "question": "What conference does Daniella Coelho publish in ?", "question_toks": ["What", "conference", "does", "Daniella", "Coelho", "publish", "in", "?"], "guid": 4525}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | what keywords are used by papers at uist", "sql": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t4.venuename  =  \"uist\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t4.venuename  =  \"uist\";", "query_toks": ["SELECT", "DISTINCT", "t1.keyphraseid", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "JOIN", "venue", "AS", "t4", "ON", "t4.venueid", "=", "t3.venueid", "WHERE", "t4.venuename", "=", "``", "uist", "''", ";"], "query_toks_no_value": ["select", "distinct", "t1", ".", "keyphraseid", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "join", "venue", "as", "t4", "on", "t4", ".", "venueid", "=", "t3", ".", "venueid", "where", "t4", ".", "venuename", "=", "value"], "question": "what keywords are used by papers at uist", "question_toks": ["what", "keywords", "are", "used", "by", "papers", "at", "uist"], "guid": 4526}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the authors of \" Making database systems usable \" .", "sql": "SELECT t1.name FROM writes AS t2 JOIN author AS t1 ON t2.aid  =  t1.aid JOIN publication AS t3 ON t2.pid  =  t3.pid WHERE t3.title  =  \"Making database systems usable\";", "example": {"db_id": "academic", "query": "SELECT t1.name FROM writes AS t2 JOIN author AS t1 ON t2.aid  =  t1.aid JOIN publication AS t3 ON t2.pid  =  t3.pid WHERE t3.title  =  \"Making database systems usable\";", "query_toks": ["SELECT", "t1.name", "FROM", "writes", "AS", "t2", "JOIN", "author", "AS", "t1", "ON", "t2.aid", "=", "t1.aid", "JOIN", "publication", "AS", "t3", "ON", "t2.pid", "=", "t3.pid", "WHERE", "t3.title", "=", "``", "Making", "database", "systems", "usable", "''", ";"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "writes", "as", "t2", "join", "author", "as", "t1", "on", "t2", ".", "aid", "=", "t1", ".", "aid", "join", "publication", "as", "t3", "on", "t2", ".", "pid", "=", "t3", ".", "pid", "where", "t3", ".", "title", "=", "value"], "question": "return me the authors of \" Making database systems usable \" .", "question_toks": ["return", "me", "the", "authors", "of", "``", "Making", "database", "systems", "usable", "``", "."], "guid": 4527}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | recent papers by sanjeev arora", "sql": "SELECT DISTINCT t1.keyphrasename  ,  t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"sanjeev arora\" ORDER BY t3.year DESC;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t1.keyphrasename  ,  t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"sanjeev arora\" ORDER BY t3.year DESC;", "query_toks": ["SELECT", "DISTINCT", "t1.keyphrasename", ",", "t3.year", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "JOIN", "writes", "AS", "t4", "ON", "t4.paperid", "=", "t3.paperid", "JOIN", "author", "AS", "t5", "ON", "t4.authorid", "=", "t5.authorid", "WHERE", "t5.authorname", "=", "``", "sanjeev", "arora", "''", "ORDER", "BY", "t3.year", "DESC", ";"], "query_toks_no_value": ["select", "distinct", "t1", ".", "keyphrasename", ",", "t3", ".", "year", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "join", "writes", "as", "t4", "on", "t4", ".", "paperid", "=", "t3", ".", "paperid", "join", "author", "as", "t5", "on", "t4", ".", "authorid", "=", "t5", ".", "authorid", "where", "t5", ".", "authorname", "=", "value", "order", "by", "t3", ".", "year", "desc"], "question": "recent papers by sanjeev arora", "question_toks": ["recent", "papers", "by", "sanjeev", "arora"], "guid": 4528}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | What are keyphrases by Christof Dallermassl in 2000 ?", "sql": "SELECT DISTINCT t2.keyphraseid FROM paper AS t3 JOIN paperkeyphrase AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christof Dallermassl\" AND t3.year  =  2000;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t2.keyphraseid FROM paper AS t3 JOIN paperkeyphrase AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christof Dallermassl\" AND t3.year  =  2000;", "query_toks": ["SELECT", "DISTINCT", "t2.keyphraseid", "FROM", "paper", "AS", "t3", "JOIN", "paperkeyphrase", "AS", "t2", "ON", "t3.paperid", "=", "t2.paperid", "JOIN", "writes", "AS", "t4", "ON", "t4.paperid", "=", "t3.paperid", "JOIN", "author", "AS", "t1", "ON", "t4.authorid", "=", "t1.authorid", "WHERE", "t1.authorname", "=", "``", "Christof", "Dallermassl", "''", "AND", "t3.year", "=", "2000", ";"], "query_toks_no_value": ["select", "distinct", "t2", ".", "keyphraseid", "from", "paper", "as", "t3", "join", "paperkeyphrase", "as", "t2", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "join", "writes", "as", "t4", "on", "t4", ".", "paperid", "=", "t3", ".", "paperid", "join", "author", "as", "t1", "on", "t4", ".", "authorid", "=", "t1", ".", "authorid", "where", "t1", ".", "authorname", "=", "value", "and", "t3", ".", "year", "=", "value"], "question": "What are keyphrases by Christof Dallermassl in 2000 ?", "question_toks": ["What", "are", "keyphrases", "by", "Christof", "Dallermassl", "in", "2000", "?"], "guid": 4529}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | how many papers published in nature communications 2015 ?", "sql": "SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"nature communications\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"nature communications\";", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "t1.paperid", ")", "FROM", "venue", "AS", "t2", "JOIN", "paper", "AS", "t1", "ON", "t2.venueid", "=", "t1.venueid", "WHERE", "t1.year", "=", "2015", "AND", "t2.venuename", "=", "``", "nature", "communications", "''", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "t1", ".", "paperid", ")", "from", "venue", "as", "t2", "join", "paper", "as", "t1", "on", "t2", ".", "venueid", "=", "t1", ".", "venueid", "where", "t1", ".", "year", "=", "value", "and", "t2", ".", "venuename", "=", "value"], "question": "how many papers published in nature communications 2015 ?", "question_toks": ["how", "many", "papers", "published", "in", "nature", "communications", "2015", "?"], "guid": 4530}}
{"text": "Inst: instID, name, country; Authors: authID, lname, fname; Papers: paperID, title; Authorship: authID, instID, paperID, authOrder | Find the first names of all the authors ordered in alphabetical order.", "sql": "SELECT fname FROM authors ORDER BY fname", "example": {"db_id": "icfp_1", "query": "SELECT fname FROM authors ORDER BY fname", "query_toks": ["SELECT", "fname", "FROM", "authors", "ORDER", "BY", "fname"], "query_toks_no_value": ["select", "fname", "from", "authors", "order", "by", "fname"], "question": "Find the first names of all the authors ordered in alphabetical order.", "question_toks": ["Find", "the", "first", "names", "of", "all", "the", "authors", "ordered", "in", "alphabetical", "order", "."], "guid": 4531}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | What is the venue of Fracture of acrylic bone cement ?", "sql": "SELECT DISTINCT venueid FROM paper WHERE title  =  \"Fracture of acrylic bone cement\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT venueid FROM paper WHERE title  =  \"Fracture of acrylic bone cement\";", "query_toks": ["SELECT", "DISTINCT", "venueid", "FROM", "paper", "WHERE", "title", "=", "``", "Fracture", "of", "acrylic", "bone", "cement", "''", ";"], "query_toks_no_value": ["select", "distinct", "venueid", "from", "paper", "where", "title", "=", "value"], "question": "What is the venue of Fracture of acrylic bone cement ?", "question_toks": ["What", "is", "the", "venue", "of", "Fracture", "of", "acrylic", "bone", "cement", "?"], "guid": 4532}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me all the papers in \" University of Michigan \" .", "sql": "SELECT t4.title FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid JOIN writes AS t3 ON t3.aid  =  t1.aid JOIN publication AS t4 ON t3.pid  =  t4.pid WHERE t2.name  =  \"University of Michigan\";", "example": {"db_id": "academic", "query": "SELECT t4.title FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid JOIN writes AS t3 ON t3.aid  =  t1.aid JOIN publication AS t4 ON t3.pid  =  t4.pid WHERE t2.name  =  \"University of Michigan\";", "query_toks": ["SELECT", "t4.title", "FROM", "organization", "AS", "t2", "JOIN", "author", "AS", "t1", "ON", "t2.oid", "=", "t1.oid", "JOIN", "writes", "AS", "t3", "ON", "t3.aid", "=", "t1.aid", "JOIN", "publication", "AS", "t4", "ON", "t3.pid", "=", "t4.pid", "WHERE", "t2.name", "=", "``", "University", "of", "Michigan", "''", ";"], "query_toks_no_value": ["select", "t4", ".", "title", "from", "organization", "as", "t2", "join", "author", "as", "t1", "on", "t2", ".", "oid", "=", "t1", ".", "oid", "join", "writes", "as", "t3", "on", "t3", ".", "aid", "=", "t1", ".", "aid", "join", "publication", "as", "t4", "on", "t3", ".", "pid", "=", "t4", ".", "pid", "where", "t2", ".", "name", "=", "value"], "question": "return me all the papers in \" University of Michigan \" .", "question_toks": ["return", "me", "all", "the", "papers", "in", "``", "University", "of", "Michigan", "``", "."], "guid": 4533}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the paper after 2000 in PVLDB with the most citations .", "sql": "SELECT t2.title FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\" AND t2.year  >  2000 ORDER BY t2.citation_num DESC LIMIT 1;", "example": {"db_id": "academic", "query": "SELECT t2.title FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\" AND t2.year  >  2000 ORDER BY t2.citation_num DESC LIMIT 1;", "query_toks": ["SELECT", "t2.title", "FROM", "publication", "AS", "t2", "JOIN", "journal", "AS", "t1", "ON", "t2.jid", "=", "t1.jid", "WHERE", "t1.name", "=", "``", "PVLDB", "''", "AND", "t2.year", ">", "2000", "ORDER", "BY", "t2.citation_num", "DESC", "LIMIT", "1", ";"], "query_toks_no_value": ["select", "t2", ".", "title", "from", "publication", "as", "t2", "join", "journal", "as", "t1", "on", "t2", ".", "jid", "=", "t1", ".", "jid", "where", "t1", ".", "name", "=", "value", "and", "t2", ".", "year", ">", "value", "order", "by", "t2", ".", "citation_num", "desc", "limit", "value"], "question": "return me the paper after 2000 in PVLDB with the most citations .", "question_toks": ["return", "me", "the", "paper", "after", "2000", "in", "PVLDB", "with", "the", "most", "citations", "."], "guid": 4534}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | journal articles by mohammad rastegari", "sql": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"mohammad rastegari\" AND t3.journalid  >=  0;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"mohammad rastegari\" AND t3.journalid  >=  0;", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "writes", "AS", "t2", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "JOIN", "paper", "AS", "t3", "ON", "t2.paperid", "=", "t3.paperid", "WHERE", "t1.authorname", "=", "``", "mohammad", "rastegari", "''", "AND", "t3.journalid", ">", "=", "0", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "writes", "as", "t2", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "join", "paper", "as", "t3", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "where", "t1", ".", "authorname", "=", "value", "and", "t3", ".", "journalid", ">", "=", "value"], "question": "journal articles by mohammad rastegari", "question_toks": ["journal", "articles", "by", "mohammad", "rastegari"], "guid": 4535}}
{"text": "Document_Types: document_type_code, document_description; Documents: document_id, document_type_code, grant_id, sent_date, response_received_date, other_details; Grants: grant_id, organisation_id, grant_amount, grant_start_date, grant_end_date, other_details; Organisation_Types: organisation_type, organisation_type_description; Organisations: organisation_id, organisation_type, organisation_details; Project_Outcomes: project_id, outcome_code, outcome_details; Project_Staff: staff_id, project_id, role_code, date_from, date_to, other_details; Projects: project_id, organisation_id, project_details; Research_Outcomes: outcome_code, outcome_description; Research_Staff: staff_id, employer_organisation_id, staff_details | What is the last date that a staff member left a project?", "sql": "SELECT date_to FROM Project_Staff ORDER BY date_to DESC LIMIT 1", "example": {"db_id": "tracking_grants_for_research", "query": "SELECT date_to FROM Project_Staff ORDER BY date_to DESC LIMIT 1", "query_toks": ["SELECT", "date_to", "FROM", "Project_Staff", "ORDER", "BY", "date_to", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "date_to", "from", "project_staff", "order", "by", "date_to", "desc", "limit", "value"], "question": "What is the last date that a staff member left a project?", "question_toks": ["What", "is", "the", "last", "date", "that", "a", "staff", "member", "left", "a", "project", "?"], "guid": 4536}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | How many papers does Christopher D. Manning have", "sql": "SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christopher D. Manning\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christopher D. Manning\";", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "DISTINCT", "t2.paperid", ")", "FROM", "writes", "AS", "t2", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "WHERE", "t1.authorname", "=", "``", "Christopher", "D.", "Manning", "''", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "distinct", "t2", ".", "paperid", ")", "from", "writes", "as", "t2", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "where", "t1", ".", "authorname", "=", "value"], "question": "How many papers does Christopher D. Manning have", "question_toks": ["How", "many", "papers", "does", "Christopher", "D.", "Manning", "have"], "guid": 4537}}
{"text": "Document_Types: document_type_code, document_description; Documents: document_id, document_type_code, grant_id, sent_date, response_received_date, other_details; Grants: grant_id, organisation_id, grant_amount, grant_start_date, grant_end_date, other_details; Organisation_Types: organisation_type, organisation_type_description; Organisations: organisation_id, organisation_type, organisation_details; Project_Outcomes: project_id, outcome_code, outcome_details; Project_Staff: staff_id, project_id, role_code, date_from, date_to, other_details; Projects: project_id, organisation_id, project_details; Research_Outcomes: outcome_code, outcome_description; Research_Staff: staff_id, employer_organisation_id, staff_details | For grants with both documents described as 'Regular' and documents described as 'Initial Application', list its start date.", "sql": "SELECT T1.grant_start_date FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id  =  T2.grant_id JOIN Document_Types AS T3 ON T2.document_type_code  =  T3.document_type_code WHERE T3.document_description  =  'Regular' INTERSECT SELECT T1.grant_start_date FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id  =  T2.grant_id JOIN Document_Types AS T3 ON T2.document_type_code  =  T3.document_type_code WHERE T3.document_description  =  'Initial Application'", "example": {"db_id": "tracking_grants_for_research", "query": "SELECT T1.grant_start_date FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id  =  T2.grant_id JOIN Document_Types AS T3 ON T2.document_type_code  =  T3.document_type_code WHERE T3.document_description  =  'Regular' INTERSECT SELECT T1.grant_start_date FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id  =  T2.grant_id JOIN Document_Types AS T3 ON T2.document_type_code  =  T3.document_type_code WHERE T3.document_description  =  'Initial Application'", "query_toks": ["SELECT", "T1.grant_start_date", "FROM", "Grants", "AS", "T1", "JOIN", "Documents", "AS", "T2", "ON", "T1.grant_id", "=", "T2.grant_id", "JOIN", "Document_Types", "AS", "T3", "ON", "T2.document_type_code", "=", "T3.document_type_code", "WHERE", "T3.document_description", "=", "'Regular", "'", "INTERSECT", "SELECT", "T1.grant_start_date", "FROM", "Grants", "AS", "T1", "JOIN", "Documents", "AS", "T2", "ON", "T1.grant_id", "=", "T2.grant_id", "JOIN", "Document_Types", "AS", "T3", "ON", "T2.document_type_code", "=", "T3.document_type_code", "WHERE", "T3.document_description", "=", "'Initial", "Application", "'"], "query_toks_no_value": ["select", "t1", ".", "grant_start_date", "from", "grants", "as", "t1", "join", "documents", "as", "t2", "on", "t1", ".", "grant_id", "=", "t2", ".", "grant_id", "join", "document_types", "as", "t3", "on", "t2", ".", "document_type_code", "=", "t3", ".", "document_type_code", "where", "t3", ".", "document_description", "=", "value", "intersect", "select", "t1", ".", "grant_start_date", "from", "grants", "as", "t1", "join", "documents", "as", "t2", "on", "t1", ".", "grant_id", "=", "t2", ".", "grant_id", "join", "document_types", "as", "t3", "on", "t2", ".", "document_type_code", "=", "t3", ".", "document_type_code", "where", "t3", ".", "document_description", "=", "value"], "question": "For grants with both documents described as 'Regular' and documents described as 'Initial Application', list its start date.", "question_toks": ["For", "grants", "with", "both", "documents", "described", "as", "'Regular", "'", "and", "documents", "described", "as", "'Initial", "Application", "'", ",", "list", "its", "start", "date", "."], "guid": 4538}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the authors who have papers containing keyword \" Relational Database \" .", "sql": "SELECT t2.name FROM publication_keyword AS t5 JOIN keyword AS t1 ON t5.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t3.pid JOIN author AS t2 ON t4.aid  =  t2.aid WHERE t1.keyword  =  \"Relational Database\";", "example": {"db_id": "academic", "query": "SELECT t2.name FROM publication_keyword AS t5 JOIN keyword AS t1 ON t5.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t3.pid JOIN author AS t2 ON t4.aid  =  t2.aid WHERE t1.keyword  =  \"Relational Database\";", "query_toks": ["SELECT", "t2.name", "FROM", "publication_keyword", "AS", "t5", "JOIN", "keyword", "AS", "t1", "ON", "t5.kid", "=", "t1.kid", "JOIN", "publication", "AS", "t3", "ON", "t3.pid", "=", "t5.pid", "JOIN", "writes", "AS", "t4", "ON", "t4.pid", "=", "t3.pid", "JOIN", "author", "AS", "t2", "ON", "t4.aid", "=", "t2.aid", "WHERE", "t1.keyword", "=", "``", "Relational", "Database", "''", ";"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "publication_keyword", "as", "t5", "join", "keyword", "as", "t1", "on", "t5", ".", "kid", "=", "t1", ".", "kid", "join", "publication", "as", "t3", "on", "t3", ".", "pid", "=", "t5", ".", "pid", "join", "writes", "as", "t4", "on", "t4", ".", "pid", "=", "t3", ".", "pid", "join", "author", "as", "t2", "on", "t4", ".", "aid", "=", "t2", ".", "aid", "where", "t1", ".", "keyword", "=", "value"], "question": "return me the authors who have papers containing keyword \" Relational Database \" .", "question_toks": ["return", "me", "the", "authors", "who", "have", "papers", "containing", "keyword", "``", "Relational", "Database", "``", "."], "guid": 4539}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | What are the best NLP conferences ?", "sql": "SELECT DISTINCT COUNT ( DISTINCT t4.citingpaperid )  ,  t3.venueid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"NLP\" GROUP BY t3.venueid ORDER BY COUNT ( DISTINCT t4.citingpaperid ) DESC;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( DISTINCT t4.citingpaperid )  ,  t3.venueid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"NLP\" GROUP BY t3.venueid ORDER BY COUNT ( DISTINCT t4.citingpaperid ) DESC;", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "DISTINCT", "t4.citingpaperid", ")", ",", "t3.venueid", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "JOIN", "cite", "AS", "t4", "ON", "t3.paperid", "=", "t4.citedpaperid", "WHERE", "t1.keyphrasename", "=", "``", "NLP", "''", "GROUP", "BY", "t3.venueid", "ORDER", "BY", "COUNT", "(", "DISTINCT", "t4.citingpaperid", ")", "DESC", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "distinct", "t4", ".", "citingpaperid", ")", ",", "t3", ".", "venueid", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "join", "cite", "as", "t4", "on", "t3", ".", "paperid", "=", "t4", ".", "citedpaperid", "where", "t1", ".", "keyphrasename", "=", "value", "group", "by", "t3", ".", "venueid", "order", "by", "count", "(", "distinct", "t4", ".", "citingpaperid", ")", "desc"], "question": "What are the best NLP conferences ?", "question_toks": ["What", "are", "the", "best", "NLP", "conferences", "?"], "guid": 4540}}
{"text": "Document_Types: document_type_code, document_description; Documents: document_id, document_type_code, grant_id, sent_date, response_received_date, other_details; Grants: grant_id, organisation_id, grant_amount, grant_start_date, grant_end_date, other_details; Organisation_Types: organisation_type, organisation_type_description; Organisations: organisation_id, organisation_type, organisation_details; Project_Outcomes: project_id, outcome_code, outcome_details; Project_Staff: staff_id, project_id, role_code, date_from, date_to, other_details; Projects: project_id, organisation_id, project_details; Research_Outcomes: outcome_code, outcome_description; Research_Staff: staff_id, employer_organisation_id, staff_details | How many tasks are there?", "sql": "SELECT count(*) FROM Tasks", "example": {"db_id": "tracking_grants_for_research", "query": "SELECT count(*) FROM Tasks", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Tasks"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "tasks"], "question": "How many tasks are there?", "question_toks": ["How", "many", "tasks", "are", "there", "?"], "guid": 4541}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the authors who have papers in PVLDB after 2010 .", "sql": "SELECT t1.name FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t2.name  =  \"PVLDB\" AND t4.year  >  2010;", "example": {"db_id": "academic", "query": "SELECT t1.name FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t2.name  =  \"PVLDB\" AND t4.year  >  2010;", "query_toks": ["SELECT", "t1.name", "FROM", "publication", "AS", "t4", "JOIN", "journal", "AS", "t2", "ON", "t4.jid", "=", "t2.jid", "JOIN", "writes", "AS", "t3", "ON", "t3.pid", "=", "t4.pid", "JOIN", "author", "AS", "t1", "ON", "t3.aid", "=", "t1.aid", "WHERE", "t2.name", "=", "``", "PVLDB", "''", "AND", "t4.year", ">", "2010", ";"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "publication", "as", "t4", "join", "journal", "as", "t2", "on", "t4", ".", "jid", "=", "t2", ".", "jid", "join", "writes", "as", "t3", "on", "t3", ".", "pid", "=", "t4", ".", "pid", "join", "author", "as", "t1", "on", "t3", ".", "aid", "=", "t1", ".", "aid", "where", "t2", ".", "name", "=", "value", "and", "t4", ".", "year", ">", "value"], "question": "return me the authors who have papers in PVLDB after 2010 .", "question_toks": ["return", "me", "the", "authors", "who", "have", "papers", "in", "PVLDB", "after", "2010", "."], "guid": 4542}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | conferences that mention ImageNet", "sql": "SELECT DISTINCT t3.venueid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname  =  \"ImageNet\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.venueid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname  =  \"ImageNet\";", "query_toks": ["SELECT", "DISTINCT", "t3.venueid", "FROM", "paperdataset", "AS", "t2", "JOIN", "dataset", "AS", "t1", "ON", "t2.datasetid", "=", "t1.datasetid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "WHERE", "t1.datasetname", "=", "``", "ImageNet", "''", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "venueid", "from", "paperdataset", "as", "t2", "join", "dataset", "as", "t1", "on", "t2", ".", "datasetid", "=", "t1", ".", "datasetid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "where", "t1", ".", "datasetname", "=", "value"], "question": "conferences that mention ImageNet", "question_toks": ["conferences", "that", "mention", "ImageNet"], "guid": 4543}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | which topics were most popular at NIPS 2015", "sql": "SELECT DISTINCT COUNT ( t3.paperid )  ,  t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t3.year  =  2015 AND t4.venuename  =  \"NIPS\" GROUP BY t1.keyphraseid ORDER BY COUNT ( t3.paperid ) DESC;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( t3.paperid )  ,  t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t3.year  =  2015 AND t4.venuename  =  \"NIPS\" GROUP BY t1.keyphraseid ORDER BY COUNT ( t3.paperid ) DESC;", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "t3.paperid", ")", ",", "t1.keyphraseid", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "JOIN", "venue", "AS", "t4", "ON", "t4.venueid", "=", "t3.venueid", "WHERE", "t3.year", "=", "2015", "AND", "t4.venuename", "=", "``", "NIPS", "''", "GROUP", "BY", "t1.keyphraseid", "ORDER", "BY", "COUNT", "(", "t3.paperid", ")", "DESC", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "t3", ".", "paperid", ")", ",", "t1", ".", "keyphraseid", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "join", "venue", "as", "t4", "on", "t4", ".", "venueid", "=", "t3", ".", "venueid", "where", "t3", ".", "year", "=", "value", "and", "t4", ".", "venuename", "=", "value", "group", "by", "t1", ".", "keyphraseid", "order", "by", "count", "(", "t3", ".", "paperid", ")", "desc"], "question": "which topics were most popular at NIPS 2015", "question_toks": ["which", "topics", "were", "most", "popular", "at", "NIPS", "2015"], "guid": 4544}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me all the papers, which contain the keyword \" Natural Language \" .", "sql": "SELECT t3.title FROM publication_keyword AS t2 JOIN keyword AS t1 ON t2.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t2.pid WHERE t1.keyword  =  \"Natural Language\";", "example": {"db_id": "academic", "query": "SELECT t3.title FROM publication_keyword AS t2 JOIN keyword AS t1 ON t2.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t2.pid WHERE t1.keyword  =  \"Natural Language\";", "query_toks": ["SELECT", "t3.title", "FROM", "publication_keyword", "AS", "t2", "JOIN", "keyword", "AS", "t1", "ON", "t2.kid", "=", "t1.kid", "JOIN", "publication", "AS", "t3", "ON", "t3.pid", "=", "t2.pid", "WHERE", "t1.keyword", "=", "``", "Natural", "Language", "''", ";"], "query_toks_no_value": ["select", "t3", ".", "title", "from", "publication_keyword", "as", "t2", "join", "keyword", "as", "t1", "on", "t2", ".", "kid", "=", "t1", ".", "kid", "join", "publication", "as", "t3", "on", "t3", ".", "pid", "=", "t2", ".", "pid", "where", "t1", ".", "keyword", "=", "value"], "question": "return me all the papers, which contain the keyword \" Natural Language \" .", "question_toks": ["return", "me", "all", "the", "papers", ",", "which", "contain", "the", "keyword", "``", "Natural", "Language", "``", "."], "guid": 4545}}
{"text": "publication: Publication_ID, Book_ID, Publisher, Publication_Date, Price; book: Book_ID, Title, Issues, Writer | List the writers who have written more than one book.", "sql": "SELECT Writer FROM book GROUP BY Writer HAVING COUNT(*)  >  1", "example": {"db_id": "book_2", "query": "SELECT Writer FROM book GROUP BY Writer HAVING COUNT(*)  >  1", "query_toks": ["SELECT", "Writer", "FROM", "book", "GROUP", "BY", "Writer", "HAVING", "COUNT", "(", "*", ")", ">", "1"], "query_toks_no_value": ["select", "writer", "from", "book", "group", "by", "writer", "having", "count", "(", "*", ")", ">", "value"], "question": "List the writers who have written more than one book.", "question_toks": ["List", "the", "writers", "who", "have", "written", "more", "than", "one", "book", "."], "guid": 4546}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | 2014 papers", "sql": "SELECT DISTINCT paperid FROM paper WHERE YEAR  =  2014;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT paperid FROM paper WHERE YEAR  =  2014;", "query_toks": ["SELECT", "DISTINCT", "paperid", "FROM", "paper", "WHERE", "YEAR", "=", "2014", ";"], "query_toks_no_value": ["select", "distinct", "paperid", "from", "paper", "where", "year", "=", "value"], "question": "2014 papers", "question_toks": ["2014", "papers"], "guid": 4547}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | Which paper should I read about dependent types ?", "sql": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"dependent types\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"dependent types\";", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "WHERE", "t1.keyphrasename", "=", "``", "dependent", "types", "''", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "where", "t1", ".", "keyphrasename", "=", "value"], "question": "Which paper should I read about dependent types ?", "question_toks": ["Which", "paper", "should", "I", "read", "about", "dependent", "types", "?"], "guid": 4548}}
{"text": "Scientists: SSN, Name; Projects: Code, Name, Hours; AssignedTo: Scientist, Project | What is the name and hours for the project which has the most scientists assigned to it?", "sql": "SELECT T1.name ,  T1.hours FROM projects AS T1 JOIN assignedto AS T2 ON T1.code  =  T2.project GROUP BY T2.project ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "scientist_1", "query": "SELECT T1.name ,  T1.hours FROM projects AS T1 JOIN assignedto AS T2 ON T1.code  =  T2.project GROUP BY T2.project ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.name", ",", "T1.hours", "FROM", "projects", "AS", "T1", "JOIN", "assignedto", "AS", "T2", "ON", "T1.code", "=", "T2.project", "GROUP", "BY", "T2.project", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "t1", ".", "hours", "from", "projects", "as", "t1", "join", "assignedto", "as", "t2", "on", "t1", ".", "code", "=", "t2", ".", "project", "group", "by", "t2", ".", "project", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the name and hours for the project which has the most scientists assigned to it?", "question_toks": ["What", "is", "the", "name", "and", "hours", "for", "the", "project", "which", "has", "the", "most", "scientists", "assigned", "to", "it", "?"], "guid": 4549}}
{"text": "item: i_id, title; review: a_id, u_id, i_id, rating, rank; useracct: u_id, name; trust: source_u_id, target_u_id, trust | Find the name of the item with the lowest average rating.", "sql": "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id GROUP BY T2.i_id ORDER BY avg(T2.rating) LIMIT 1", "example": {"db_id": "epinions_1", "query": "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id GROUP BY T2.i_id ORDER BY avg(T2.rating) LIMIT 1", "query_toks": ["SELECT", "T1.title", "FROM", "item", "AS", "T1", "JOIN", "review", "AS", "T2", "ON", "T1.i_id", "=", "T2.i_id", "GROUP", "BY", "T2.i_id", "ORDER", "BY", "avg", "(", "T2.rating", ")", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "title", "from", "item", "as", "t1", "join", "review", "as", "t2", "on", "t1", ".", "i_id", "=", "t2", ".", "i_id", "group", "by", "t2", ".", "i_id", "order", "by", "avg", "(", "t2", ".", "rating", ")", "limit", "value"], "question": "Find the name of the item with the lowest average rating.", "question_toks": ["Find", "the", "name", "of", "the", "item", "with", "the", "lowest", "average", "rating", "."], "guid": 4550}}
{"text": "Inst: instID, name, country; Authors: authID, lname, fname; Papers: paperID, title; Authorship: authID, instID, paperID, authOrder | List the titles of the papers whose authors are from the institution \"Indiana University\".", "sql": "SELECT DISTINCT t1.title FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Indiana University\"", "example": {"db_id": "icfp_1", "query": "SELECT DISTINCT t1.title FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Indiana University\"", "query_toks": ["SELECT", "DISTINCT", "t1.title", "FROM", "papers", "AS", "t1", "JOIN", "authorship", "AS", "t2", "ON", "t1.paperid", "=", "t2.paperid", "JOIN", "inst", "AS", "t3", "ON", "t2.instid", "=", "t3.instid", "WHERE", "t3.name", "=", "``", "Indiana", "University", "''"], "query_toks_no_value": ["select", "distinct", "t1", ".", "title", "from", "papers", "as", "t1", "join", "authorship", "as", "t2", "on", "t1", ".", "paperid", "=", "t2", ".", "paperid", "join", "inst", "as", "t3", "on", "t2", ".", "instid", "=", "t3", ".", "instid", "where", "t3", ".", "name", "=", "value"], "question": "List the titles of the papers whose authors are from the institution \"Indiana University\".", "question_toks": ["List", "the", "titles", "of", "the", "papers", "whose", "authors", "are", "from", "the", "institution", "``", "Indiana", "University", "''", "."], "guid": 4551}}
{"text": "item: i_id, title; review: a_id, u_id, i_id, rating, rank; useracct: u_id, name; trust: source_u_id, target_u_id, trust | Find the names of the items that did not receive any review.", "sql": "SELECT title FROM item WHERE i_id NOT IN (SELECT i_id FROM review)", "example": {"db_id": "epinions_1", "query": "SELECT title FROM item WHERE i_id NOT IN (SELECT i_id FROM review)", "query_toks": ["SELECT", "title", "FROM", "item", "WHERE", "i_id", "NOT", "IN", "(", "SELECT", "i_id", "FROM", "review", ")"], "query_toks_no_value": ["select", "title", "from", "item", "where", "i_id", "not", "in", "(", "select", "i_id", "from", "review", ")"], "question": "Find the names of the items that did not receive any review.", "question_toks": ["Find", "the", "names", "of", "the", "items", "that", "did", "not", "receive", "any", "review", "."], "guid": 4552}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | topics at ACL 2014", "sql": "SELECT DISTINCT COUNT ( t3.paperid )  ,  t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t3.year  =  2014 AND t4.venuename  =  \"ACL\" GROUP BY t1.keyphraseid ORDER BY COUNT ( t3.paperid ) DESC;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( t3.paperid )  ,  t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t3.year  =  2014 AND t4.venuename  =  \"ACL\" GROUP BY t1.keyphraseid ORDER BY COUNT ( t3.paperid ) DESC;", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "t3.paperid", ")", ",", "t1.keyphraseid", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "JOIN", "venue", "AS", "t4", "ON", "t4.venueid", "=", "t3.venueid", "WHERE", "t3.year", "=", "2014", "AND", "t4.venuename", "=", "``", "ACL", "''", "GROUP", "BY", "t1.keyphraseid", "ORDER", "BY", "COUNT", "(", "t3.paperid", ")", "DESC", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "t3", ".", "paperid", ")", ",", "t1", ".", "keyphraseid", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "join", "venue", "as", "t4", "on", "t4", ".", "venueid", "=", "t3", ".", "venueid", "where", "t3", ".", "year", "=", "value", "and", "t4", ".", "venuename", "=", "value", "group", "by", "t1", ".", "keyphraseid", "order", "by", "count", "(", "t3", ".", "paperid", ")", "desc"], "question": "topics at ACL 2014", "question_toks": ["topics", "at", "ACL", "2014"], "guid": 4553}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | How many papers did michael i. jordan publish in 2016 ?", "sql": "SELECT DISTINCT COUNT ( t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"michael i. jordan\" AND t3.year  =  2016;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"michael i. jordan\" AND t3.year  =  2016;", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "t2.paperid", ")", "FROM", "writes", "AS", "t2", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "JOIN", "paper", "AS", "t3", "ON", "t2.paperid", "=", "t3.paperid", "WHERE", "t1.authorname", "=", "``", "michael", "i.", "jordan", "''", "AND", "t3.year", "=", "2016", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "t2", ".", "paperid", ")", "from", "writes", "as", "t2", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "join", "paper", "as", "t3", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "where", "t1", ".", "authorname", "=", "value", "and", "t3", ".", "year", "=", "value"], "question": "How many papers did michael i. jordan publish in 2016 ?", "question_toks": ["How", "many", "papers", "did", "michael", "i.", "jordan", "publish", "in", "2016", "?"], "guid": 4554}}
{"text": "event: Event_ID, Date, Venue, Name, Event_Attendance; journalist: journalist_ID, Name, Nationality, Age, Years_working; news_report: journalist_ID, Event_ID, Work_Type | List the names of journalists in ascending order of years working.", "sql": "SELECT Name FROM journalist ORDER BY Years_working ASC", "example": {"db_id": "news_report", "query": "SELECT Name FROM journalist ORDER BY Years_working ASC", "query_toks": ["SELECT", "Name", "FROM", "journalist", "ORDER", "BY", "Years_working", "ASC"], "query_toks_no_value": ["select", "name", "from", "journalist", "order", "by", "years_working", "asc"], "question": "List the names of journalists in ascending order of years working.", "question_toks": ["List", "the", "names", "of", "journalists", "in", "ascending", "order", "of", "years", "working", "."], "guid": 4555}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | what topics does Luke Zettlemoyer publish in", "sql": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";", "query_toks": ["SELECT", "DISTINCT", "t1.keyphraseid", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "JOIN", "writes", "AS", "t4", "ON", "t4.paperid", "=", "t3.paperid", "JOIN", "author", "AS", "t5", "ON", "t4.authorid", "=", "t5.authorid", "WHERE", "t5.authorname", "=", "``", "Luke", "Zettlemoyer", "''", ";"], "query_toks_no_value": ["select", "distinct", "t1", ".", "keyphraseid", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "join", "writes", "as", "t4", "on", "t4", ".", "paperid", "=", "t3", ".", "paperid", "join", "author", "as", "t5", "on", "t4", ".", "authorid", "=", "t5", ".", "authorid", "where", "t5", ".", "authorname", "=", "value"], "question": "what topics does Luke Zettlemoyer publish in", "question_toks": ["what", "topics", "does", "Luke", "Zettlemoyer", "publish", "in"], "guid": 4556}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | Show me chi papers .", "sql": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"chi\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"chi\";", "query_toks": ["SELECT", "DISTINCT", "t1.paperid", "FROM", "venue", "AS", "t2", "JOIN", "paper", "AS", "t1", "ON", "t2.venueid", "=", "t1.venueid", "WHERE", "t2.venuename", "=", "``", "chi", "''", ";"], "query_toks_no_value": ["select", "distinct", "t1", ".", "paperid", "from", "venue", "as", "t2", "join", "paper", "as", "t1", "on", "t2", ".", "venueid", "=", "t1", ".", "venueid", "where", "t2", ".", "venuename", "=", "value"], "question": "Show me chi papers .", "question_toks": ["Show", "me", "chi", "papers", "."], "guid": 4557}}
{"text": "workshop: Workshop_ID, Date, Venue, Name; submission: Submission_ID, Scores, Author, College; Acceptance: Submission_ID, Workshop_ID, Result | Show the colleges that have both authors with submission score larger than 90 and authors with submission score smaller than 80.", "sql": "SELECT College FROM submission WHERE Scores  >  90 INTERSECT SELECT College FROM submission WHERE Scores  <  80", "example": {"db_id": "workshop_paper", "query": "SELECT College FROM submission WHERE Scores  >  90 INTERSECT SELECT College FROM submission WHERE Scores  <  80", "query_toks": ["SELECT", "College", "FROM", "submission", "WHERE", "Scores", ">", "90", "INTERSECT", "SELECT", "College", "FROM", "submission", "WHERE", "Scores", "<", "80"], "query_toks_no_value": ["select", "college", "from", "submission", "where", "scores", ">", "value", "intersect", "select", "college", "from", "submission", "where", "scores", "<", "value"], "question": "Show the colleges that have both authors with submission score larger than 90 and authors with submission score smaller than 80.", "question_toks": ["Show", "the", "colleges", "that", "have", "both", "authors", "with", "submission", "score", "larger", "than", "90", "and", "authors", "with", "submission", "score", "smaller", "than", "80", "."], "guid": 4558}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | How many papers does David M. Blei have in AISTATS ?", "sql": "SELECT DISTINCT COUNT ( t3.paperid ) FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"David M. Blei\" AND t4.venuename  =  \"AISTATS\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( t3.paperid ) FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"David M. Blei\" AND t4.venuename  =  \"AISTATS\";", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "t3.paperid", ")", "FROM", "venue", "AS", "t4", "JOIN", "paper", "AS", "t3", "ON", "t4.venueid", "=", "t3.venueid", "JOIN", "writes", "AS", "t2", "ON", "t2.paperid", "=", "t3.paperid", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "WHERE", "t1.authorname", "=", "``", "David", "M.", "Blei", "''", "AND", "t4.venuename", "=", "``", "AISTATS", "''", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "t3", ".", "paperid", ")", "from", "venue", "as", "t4", "join", "paper", "as", "t3", "on", "t4", ".", "venueid", "=", "t3", ".", "venueid", "join", "writes", "as", "t2", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "where", "t1", ".", "authorname", "=", "value", "and", "t4", ".", "venuename", "=", "value"], "question": "How many papers does David M. Blei have in AISTATS ?", "question_toks": ["How", "many", "papers", "does", "David", "M.", "Blei", "have", "in", "AISTATS", "?"], "guid": 4559}}
{"text": "film: Film_ID, Title, Studio, Director, Gross_in_dollar; market: Market_ID, Country, Number_cities; film_market_estimation: Estimation_ID, Low_Estimate, High_Estimate, Film_ID, Type, Market_ID, Year | How many film are there?", "sql": "SELECT count(*) FROM film", "example": {"db_id": "film_rank", "query": "SELECT count(*) FROM film", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "film"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "film"], "question": "How many film are there?", "question_toks": ["How", "many", "film", "are", "there", "?"], "guid": 7696}}
{"text": "film: Film_ID, Title, Studio, Director, Gross_in_dollar; market: Market_ID, Country, Number_cities; film_market_estimation: Estimation_ID, Low_Estimate, High_Estimate, Film_ID, Type, Market_ID, Year | What are the titles of films and corresponding types of market estimations?", "sql": "SELECT T1.Title ,  T2.Type FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID  =  T2.Film_ID", "example": {"db_id": "film_rank", "query": "SELECT T1.Title ,  T2.Type FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID  =  T2.Film_ID", "query_toks": ["SELECT", "T1.Title", ",", "T2.Type", "FROM", "film", "AS", "T1", "JOIN", "film_market_estimation", "AS", "T2", "ON", "T1.Film_ID", "=", "T2.Film_ID"], "query_toks_no_value": ["select", "t1", ".", "title", ",", "t2", ".", "type", "from", "film", "as", "t1", "join", "film_market_estimation", "as", "t2", "on", "t1", ".", "film_id", "=", "t2", ".", "film_id"], "question": "What are the titles of films and corresponding types of market estimations?", "question_toks": ["What", "are", "the", "titles", "of", "films", "and", "corresponding", "types", "of", "market", "estimations", "?"], "guid": 7697}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | Who is the director of the movie \" James Bond \" ?", "sql": "SELECT t2.name FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t3.title  =  \"James Bond\";", "example": {"db_id": "imdb", "query": "SELECT t2.name FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t3.title  =  \"James Bond\";", "query_toks": ["SELECT", "t2.name", "FROM", "director", "AS", "t2", "JOIN", "directed_by", "AS", "t1", "ON", "t2.did", "=", "t1.did", "JOIN", "movie", "AS", "t3", "ON", "t3.mid", "=", "t1.msid", "WHERE", "t3.title", "=", "``", "James", "Bond", "''", ";"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "director", "as", "t2", "join", "directed_by", "as", "t1", "on", "t2", ".", "did", "=", "t1", ".", "did", "join", "movie", "as", "t3", "on", "t3", ".", "mid", "=", "t1", ".", "msid", "where", "t3", ".", "title", "=", "value"], "question": "Who is the director of the movie \" James Bond \" ?", "question_toks": ["Who", "is", "the", "director", "of", "the", "movie", "``", "James", "Bond", "``", "?"], "guid": 7698}}
{"text": "program: Program_ID, Name, Origin, Launch, Owner; channel: Channel_ID, Name, Owner, Share_in_percent, Rating_in_percent; broadcast: Channel_ID, Program_ID, Time_of_day; broadcast_share: Channel_ID, Program_ID, Date, Share_in_percent | Find the name of the program that is broadcast most frequently.", "sql": "SELECT t1.name FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id GROUP BY t2.program_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "program_share", "query": "SELECT t1.name FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id GROUP BY t2.program_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "t1.name", "FROM", "program", "AS", "t1", "JOIN", "broadcast", "AS", "t2", "ON", "t1.program_id", "=", "t2.program_id", "GROUP", "BY", "t2.program_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "program", "as", "t1", "join", "broadcast", "as", "t2", "on", "t1", ".", "program_id", "=", "t2", ".", "program_id", "group", "by", "t2", ".", "program_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Find the name of the program that is broadcast most frequently.", "question_toks": ["Find", "the", "name", "of", "the", "program", "that", "is", "broadcast", "most", "frequently", "."], "guid": 7699}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | Find the actors who played in the movie \" Camp X-Ray \"", "sql": "SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t3.title  =  \"Camp X-Ray\";", "example": {"db_id": "imdb", "query": "SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t3.title  =  \"Camp X-Ray\";", "query_toks": ["SELECT", "t1.name", "FROM", "CAST", "AS", "t2", "JOIN", "actor", "AS", "t1", "ON", "t2.aid", "=", "t1.aid", "JOIN", "movie", "AS", "t3", "ON", "t3.mid", "=", "t2.msid", "WHERE", "t3.title", "=", "``", "Camp", "X-Ray", "''", ";"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "cast", "as", "t2", "join", "actor", "as", "t1", "on", "t2", ".", "aid", "=", "t1", ".", "aid", "join", "movie", "as", "t3", "on", "t3", ".", "mid", "=", "t2", ".", "msid", "where", "t3", ".", "title", "=", "value"], "question": "Find the actors who played in the movie \" Camp X-Ray \"", "question_toks": ["Find", "the", "actors", "who", "played", "in", "the", "movie", "``", "Camp", "X-Ray", "``"], "guid": 7700}}
{"text": "festival_detail: Festival_ID, Festival_Name, Chair_Name, Location, Year, Num_of_Audience; artwork: Artwork_ID, Type, Name; nomination: Artwork_ID, Festival_ID, Result | List the most common type of artworks.", "sql": "SELECT TYPE FROM artwork GROUP BY TYPE ORDER BY COUNT(*) DESC LIMIT 1", "example": {"db_id": "entertainment_awards", "query": "SELECT TYPE FROM artwork GROUP BY TYPE ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "TYPE", "FROM", "artwork", "GROUP", "BY", "TYPE", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "type", "from", "artwork", "group", "by", "type", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "List the most common type of artworks.", "question_toks": ["List", "the", "most", "common", "type", "of", "artworks", "."], "guid": 7701}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | Who directed the movie \" James Bond \" ?", "sql": "SELECT t2.name FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t3.title  =  \"James Bond\";", "example": {"db_id": "imdb", "query": "SELECT t2.name FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t3.title  =  \"James Bond\";", "query_toks": ["SELECT", "t2.name", "FROM", "director", "AS", "t2", "JOIN", "directed_by", "AS", "t1", "ON", "t2.did", "=", "t1.did", "JOIN", "movie", "AS", "t3", "ON", "t3.mid", "=", "t1.msid", "WHERE", "t3.title", "=", "``", "James", "Bond", "''", ";"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "director", "as", "t2", "join", "directed_by", "as", "t1", "on", "t2", ".", "did", "=", "t1", ".", "did", "join", "movie", "as", "t3", "on", "t3", ".", "mid", "=", "t1", ".", "msid", "where", "t3", ".", "title", "=", "value"], "question": "Who directed the movie \" James Bond \" ?", "question_toks": ["Who", "directed", "the", "movie", "``", "James", "Bond", "``", "?"], "guid": 7702}}
{"text": "film: Film_ID, Title, Studio, Director, Gross_in_dollar; market: Market_ID, Country, Number_cities; film_market_estimation: Estimation_ID, Low_Estimate, High_Estimate, Film_ID, Type, Market_ID, Year | What are the types of film market estimations in year 1995?", "sql": "SELECT TYPE FROM film_market_estimation WHERE YEAR  =  1995", "example": {"db_id": "film_rank", "query": "SELECT TYPE FROM film_market_estimation WHERE YEAR  =  1995", "query_toks": ["SELECT", "TYPE", "FROM", "film_market_estimation", "WHERE", "YEAR", "=", "1995"], "query_toks_no_value": ["select", "type", "from", "film_market_estimation", "where", "year", "=", "value"], "question": "What are the types of film market estimations in year 1995?", "question_toks": ["What", "are", "the", "types", "of", "film", "market", "estimations", "in", "year", "1995", "?"], "guid": 7703}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | Who acts as \" Alan Turing \" in the movie \" The Imitation Game \" ?", "sql": "SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t2.role  =  \"Alan Turing\" AND t3.title  =  \"The Imitation Game\";", "example": {"db_id": "imdb", "query": "SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t2.role  =  \"Alan Turing\" AND t3.title  =  \"The Imitation Game\";", "query_toks": ["SELECT", "t1.name", "FROM", "CAST", "AS", "t2", "JOIN", "actor", "AS", "t1", "ON", "t2.aid", "=", "t1.aid", "JOIN", "movie", "AS", "t3", "ON", "t3.mid", "=", "t2.msid", "WHERE", "t2.role", "=", "``", "Alan", "Turing", "''", "AND", "t3.title", "=", "``", "The", "Imitation", "Game", "''", ";"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "cast", "as", "t2", "join", "actor", "as", "t1", "on", "t2", ".", "aid", "=", "t1", ".", "aid", "join", "movie", "as", "t3", "on", "t3", ".", "mid", "=", "t2", ".", "msid", "where", "t2", ".", "role", "=", "value", "and", "t3", ".", "title", "=", "value"], "question": "Who acts as \" Alan Turing \" in the movie \" The Imitation Game \" ?", "question_toks": ["Who", "acts", "as", "``", "Alan", "Turing", "``", "in", "the", "movie", "``", "The", "Imitation", "Game", "``", "?"], "guid": 7704}}
{"text": "film: Film_ID, Title, Studio, Director, Gross_in_dollar; market: Market_ID, Country, Number_cities; film_market_estimation: Estimation_ID, Low_Estimate, High_Estimate, Film_ID, Type, Market_ID, Year | What are the names of studios that have produced films with both Nicholas Meyer and Walter Hill?", "sql": "SELECT Studio FROM film WHERE Director  =  \"Nicholas Meyer\" INTERSECT SELECT Studio FROM film WHERE Director  =  \"Walter Hill\"", "example": {"db_id": "film_rank", "query": "SELECT Studio FROM film WHERE Director  =  \"Nicholas Meyer\" INTERSECT SELECT Studio FROM film WHERE Director  =  \"Walter Hill\"", "query_toks": ["SELECT", "Studio", "FROM", "film", "WHERE", "Director", "=", "``", "Nicholas", "Meyer", "''", "INTERSECT", "SELECT", "Studio", "FROM", "film", "WHERE", "Director", "=", "``", "Walter", "Hill", "''"], "query_toks_no_value": ["select", "studio", "from", "film", "where", "director", "=", "value", "intersect", "select", "studio", "from", "film", "where", "director", "=", "value"], "question": "What are the names of studios that have produced films with both Nicholas Meyer and Walter Hill?", "question_toks": ["What", "are", "the", "names", "of", "studios", "that", "have", "produced", "films", "with", "both", "Nicholas", "Meyer", "and", "Walter", "Hill", "?"], "guid": 7705}}
{"text": "film: Film_ID, Rank_in_series, Number_in_season, Title, Directed_by, Original_air_date, Production_code; cinema: Cinema_ID, Name, Openning_year, Capacity, Location; schedule: Cinema_ID, Film_ID, Date, Show_times_per_day, Price | What is total number of show times per dat for each cinema?", "sql": "SELECT T2.name ,  sum(T1.show_times_per_day) FROM schedule AS T1 JOIN cinema AS T2 ON T1.cinema_id  =  T2.cinema_id GROUP BY T1.cinema_id", "example": {"db_id": "cinema", "query": "SELECT T2.name ,  sum(T1.show_times_per_day) FROM schedule AS T1 JOIN cinema AS T2 ON T1.cinema_id  =  T2.cinema_id GROUP BY T1.cinema_id", "query_toks": ["SELECT", "T2.name", ",", "sum", "(", "T1.show_times_per_day", ")", "FROM", "schedule", "AS", "T1", "JOIN", "cinema", "AS", "T2", "ON", "T1.cinema_id", "=", "T2.cinema_id", "GROUP", "BY", "T1.cinema_id"], "query_toks_no_value": ["select", "t2", ".", "name", ",", "sum", "(", "t1", ".", "show_times_per_day", ")", "from", "schedule", "as", "t1", "join", "cinema", "as", "t2", "on", "t1", ".", "cinema_id", "=", "t2", ".", "cinema_id", "group", "by", "t1", ".", "cinema_id"], "question": "What is total number of show times per dat for each cinema?", "question_toks": ["What", "is", "total", "number", "of", "show", "times", "per", "dat", "for", "each", "cinema", "?"], "guid": 7706}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | Find the actor who played \" Alan Turing \" in the movie \" The Imitation Game \"", "sql": "SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t2.role  =  \"Alan Turing\" AND t3.title  =  \"The Imitation Game\";", "example": {"db_id": "imdb", "query": "SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t2.role  =  \"Alan Turing\" AND t3.title  =  \"The Imitation Game\";", "query_toks": ["SELECT", "t1.name", "FROM", "CAST", "AS", "t2", "JOIN", "actor", "AS", "t1", "ON", "t2.aid", "=", "t1.aid", "JOIN", "movie", "AS", "t3", "ON", "t3.mid", "=", "t2.msid", "WHERE", "t2.role", "=", "``", "Alan", "Turing", "''", "AND", "t3.title", "=", "``", "The", "Imitation", "Game", "''", ";"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "cast", "as", "t2", "join", "actor", "as", "t1", "on", "t2", ".", "aid", "=", "t1", ".", "aid", "join", "movie", "as", "t3", "on", "t3", ".", "mid", "=", "t2", ".", "msid", "where", "t2", ".", "role", "=", "value", "and", "t3", ".", "title", "=", "value"], "question": "Find the actor who played \" Alan Turing \" in the movie \" The Imitation Game \"", "question_toks": ["Find", "the", "actor", "who", "played", "``", "Alan", "Turing", "``", "in", "the", "movie", "``", "The", "Imitation", "Game", "``"], "guid": 7707}}
{"text": "film: Film_ID, Title, Studio, Director, Gross_in_dollar; market: Market_ID, Country, Number_cities; film_market_estimation: Estimation_ID, Low_Estimate, High_Estimate, Film_ID, Type, Market_ID, Year | Which studios have an average gross of over 4500000?", "sql": "SELECT Studio FROM film GROUP BY Studio HAVING avg(Gross_in_dollar)  >=  4500000", "example": {"db_id": "film_rank", "query": "SELECT Studio FROM film GROUP BY Studio HAVING avg(Gross_in_dollar)  >=  4500000", "query_toks": ["SELECT", "Studio", "FROM", "film", "GROUP", "BY", "Studio", "HAVING", "avg", "(", "Gross_in_dollar", ")", ">", "=", "4500000"], "query_toks_no_value": ["select", "studio", "from", "film", "group", "by", "studio", "having", "avg", "(", "gross_in_dollar", ")", ">", "=", "value"], "question": "Which studios have an average gross of over 4500000?", "question_toks": ["Which", "studios", "have", "an", "average", "gross", "of", "over", "4500000", "?"], "guid": 7708}}
{"text": "TV_Channel: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option; TV_series: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel; Cartoon: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel | What is the name of the series that has the episode \"A Love of a Lifetime\"?", "sql": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";", "example": {"db_id": "tvshow", "query": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";", "query_toks": ["SELECT", "T1.series_name", "FROM", "TV_Channel", "AS", "T1", "JOIN", "TV_series", "AS", "T2", "ON", "T1.id", "=", "T2.Channel", "WHERE", "T2.Episode", "=", "``", "A", "Love", "of", "a", "Lifetime", "''", ";"], "query_toks_no_value": ["select", "t1", ".", "series_name", "from", "tv_channel", "as", "t1", "join", "tv_series", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "channel", "where", "t2", ".", "episode", "=", "value"], "question": "What is the name of the series that has the episode \"A Love of a Lifetime\"?", "question_toks": ["What", "is", "the", "name", "of", "the", "series", "that", "has", "the", "episode", "``", "A", "Love", "of", "a", "Lifetime", "''", "?"], "guid": 7709}}
{"text": "film: Film_ID, Title, Studio, Director, Gross_in_dollar; market: Market_ID, Country, Number_cities; film_market_estimation: Estimation_ID, Low_Estimate, High_Estimate, Film_ID, Type, Market_ID, Year | Who are the different directors of films which had market estimation in 1995?", "sql": "SELECT DISTINCT T1.Director FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID  =  T2.Film_ID WHERE T2.Year  =  1995", "example": {"db_id": "film_rank", "query": "SELECT DISTINCT T1.Director FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID  =  T2.Film_ID WHERE T2.Year  =  1995", "query_toks": ["SELECT", "DISTINCT", "T1.Director", "FROM", "film", "AS", "T1", "JOIN", "film_market_estimation", "AS", "T2", "ON", "T1.Film_ID", "=", "T2.Film_ID", "WHERE", "T2.Year", "=", "1995"], "query_toks_no_value": ["select", "distinct", "t1", ".", "director", "from", "film", "as", "t1", "join", "film_market_estimation", "as", "t2", "on", "t1", ".", "film_id", "=", "t2", ".", "film_id", "where", "t2", ".", "year", "=", "value"], "question": "Who are the different directors of films which had market estimation in 1995?", "question_toks": ["Who", "are", "the", "different", "directors", "of", "films", "which", "had", "market", "estimation", "in", "1995", "?"], "guid": 7710}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | For the oldest movie listed, what is its average rating and title?", "sql": "SELECT avg(T1.stars) ,  T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.year  =  (SELECT min(YEAR) FROM Movie)", "example": {"db_id": "movie_1", "query": "SELECT avg(T1.stars) ,  T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.year  =  (SELECT min(YEAR) FROM Movie)", "query_toks": ["SELECT", "avg", "(", "T1.stars", ")", ",", "T2.title", "FROM", "Rating", "AS", "T1", "JOIN", "Movie", "AS", "T2", "ON", "T1.mID", "=", "T2.mID", "WHERE", "T2.year", "=", "(", "SELECT", "min", "(", "YEAR", ")", "FROM", "Movie", ")"], "query_toks_no_value": ["select", "avg", "(", "t1", ".", "stars", ")", ",", "t2", ".", "title", "from", "rating", "as", "t1", "join", "movie", "as", "t2", "on", "t1", ".", "mid", "=", "t2", ".", "mid", "where", "t2", ".", "year", "=", "(", "select", "min", "(", "year", ")", "from", "movie", ")"], "question": "For the oldest movie listed, what is its average rating and title?", "question_toks": ["For", "the", "oldest", "movie", "listed", ",", "what", "is", "its", "average", "rating", "and", "title", "?"], "guid": 7711}}
{"text": "film: Film_ID, Title, Studio, Director, Gross_in_dollar; market: Market_ID, Country, Number_cities; film_market_estimation: Estimation_ID, Low_Estimate, High_Estimate, Film_ID, Type, Market_ID, Year | Find the titles and studios of the films that are produced by some film studios that contained the word \"Universal\".", "sql": "SELECT title ,  Studio FROM film WHERE Studio LIKE \"%Universal%\"", "example": {"db_id": "film_rank", "query": "SELECT title ,  Studio FROM film WHERE Studio LIKE \"%Universal%\"", "query_toks": ["SELECT", "title", ",", "Studio", "FROM", "film", "WHERE", "Studio", "LIKE", "``", "%", "Universal", "%", "''"], "query_toks_no_value": ["select", "title", ",", "studio", "from", "film", "where", "studio", "like", "value"], "question": "Find the titles and studios of the films that are produced by some film studios that contained the word \"Universal\".", "question_toks": ["Find", "the", "titles", "and", "studios", "of", "the", "films", "that", "are", "produced", "by", "some", "film", "studios", "that", "contained", "the", "word", "``", "Universal", "''", "."], "guid": 7712}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | Which actors were born in Tehran", "sql": "SELECT name FROM actor WHERE birth_city  =  \"Tehran\";", "example": {"db_id": "imdb", "query": "SELECT name FROM actor WHERE birth_city  =  \"Tehran\";", "query_toks": ["SELECT", "name", "FROM", "actor", "WHERE", "birth_city", "=", "``", "Tehran", "''", ";"], "query_toks_no_value": ["select", "name", "from", "actor", "where", "birth_city", "=", "value"], "question": "Which actors were born in Tehran", "question_toks": ["Which", "actors", "were", "born", "in", "Tehran"], "guid": 7713}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | What are the titles and average ratings for all movies that have the lowest average rating?", "sql": "SELECT T2.title ,  avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY avg(T1.stars) LIMIT 1", "example": {"db_id": "movie_1", "query": "SELECT T2.title ,  avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY avg(T1.stars) LIMIT 1", "query_toks": ["SELECT", "T2.title", ",", "avg", "(", "T1.stars", ")", "FROM", "Rating", "AS", "T1", "JOIN", "Movie", "AS", "T2", "ON", "T1.mID", "=", "T2.mID", "GROUP", "BY", "T1.mID", "ORDER", "BY", "avg", "(", "T1.stars", ")", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "title", ",", "avg", "(", "t1", ".", "stars", ")", "from", "rating", "as", "t1", "join", "movie", "as", "t2", "on", "t1", ".", "mid", "=", "t2", ".", "mid", "group", "by", "t1", ".", "mid", "order", "by", "avg", "(", "t1", ".", "stars", ")", "limit", "value"], "question": "What are the titles and average ratings for all movies that have the lowest average rating?", "question_toks": ["What", "are", "the", "titles", "and", "average", "ratings", "for", "all", "movies", "that", "have", "the", "lowest", "average", "rating", "?"], "guid": 7714}}
{"text": "film: Film_ID, Rank_in_series, Number_in_season, Title, Directed_by, Original_air_date, Production_code; cinema: Cinema_ID, Name, Openning_year, Capacity, Location; schedule: Cinema_ID, Film_ID, Date, Show_times_per_day, Price | What are the name and location of the cinema with the largest capacity?", "sql": "SELECT name ,  LOCATION FROM cinema ORDER BY capacity DESC LIMIT 1", "example": {"db_id": "cinema", "query": "SELECT name ,  LOCATION FROM cinema ORDER BY capacity DESC LIMIT 1", "query_toks": ["SELECT", "name", ",", "LOCATION", "FROM", "cinema", "ORDER", "BY", "capacity", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "name", ",", "location", "from", "cinema", "order", "by", "capacity", "desc", "limit", "value"], "question": "What are the name and location of the cinema with the largest capacity?", "question_toks": ["What", "are", "the", "name", "and", "location", "of", "the", "cinema", "with", "the", "largest", "capacity", "?"], "guid": 7715}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | For each director, what is the title and score of their most poorly rated movie?", "sql": "SELECT T2.title ,  T1.stars ,  T2.director ,  min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T2.director", "example": {"db_id": "movie_1", "query": "SELECT T2.title ,  T1.stars ,  T2.director ,  min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T2.director", "query_toks": ["SELECT", "T2.title", ",", "T1.stars", ",", "T2.director", ",", "min", "(", "T1.stars", ")", "FROM", "Rating", "AS", "T1", "JOIN", "Movie", "AS", "T2", "ON", "T1.mID", "=", "T2.mID", "GROUP", "BY", "T2.director"], "query_toks_no_value": ["select", "t2", ".", "title", ",", "t1", ".", "stars", ",", "t2", ".", "director", ",", "min", "(", "t1", ".", "stars", ")", "from", "rating", "as", "t1", "join", "movie", "as", "t2", "on", "t1", ".", "mid", "=", "t2", ".", "mid", "group", "by", "t2", ".", "director"], "question": "For each director, what is the title and score of their most poorly rated movie?", "question_toks": ["For", "each", "director", ",", "what", "is", "the", "title", "and", "score", "of", "their", "most", "poorly", "rated", "movie", "?"], "guid": 7716}}
{"text": "film: Film_ID, Title, Studio, Director, Gross_in_dollar; market: Market_ID, Country, Number_cities; film_market_estimation: Estimation_ID, Low_Estimate, High_Estimate, Film_ID, Type, Market_ID, Year | What is the average ticket sales gross in dollars of films?", "sql": "SELECT avg(Gross_in_dollar) FROM film", "example": {"db_id": "film_rank", "query": "SELECT avg(Gross_in_dollar) FROM film", "query_toks": ["SELECT", "avg", "(", "Gross_in_dollar", ")", "FROM", "film"], "query_toks_no_value": ["select", "avg", "(", "gross_in_dollar", ")", "from", "film"], "question": "What is the average ticket sales gross in dollars of films?", "question_toks": ["What", "is", "the", "average", "ticket", "sales", "gross", "in", "dollars", "of", "films", "?"], "guid": 7717}}
{"text": "festival_detail: Festival_ID, Festival_Name, Chair_Name, Location, Year, Num_of_Audience; artwork: Artwork_ID, Type, Name; nomination: Artwork_ID, Festival_ID, Result | What is the average number of audience for festivals?", "sql": "SELECT avg(Num_of_Audience) FROM festival_detail", "example": {"db_id": "entertainment_awards", "query": "SELECT avg(Num_of_Audience) FROM festival_detail", "query_toks": ["SELECT", "avg", "(", "Num_of_Audience", ")", "FROM", "festival_detail"], "query_toks_no_value": ["select", "avg", "(", "num_of_audience", ")", "from", "festival_detail"], "question": "What is the average number of audience for festivals?", "question_toks": ["What", "is", "the", "average", "number", "of", "audience", "for", "festivals", "?"], "guid": 7718}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | What are the names of reviewers who had rated 3 star and 4 star?", "sql": "SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  =  3 INTERSECT SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  =  4", "example": {"db_id": "movie_1", "query": "SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  =  3 INTERSECT SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  =  4", "query_toks": ["SELECT", "T2.name", "FROM", "Rating", "AS", "T1", "JOIN", "Reviewer", "AS", "T2", "ON", "T1.rID", "=", "T2.rID", "WHERE", "T1.stars", "=", "3", "INTERSECT", "SELECT", "T2.name", "FROM", "Rating", "AS", "T1", "JOIN", "Reviewer", "AS", "T2", "ON", "T1.rID", "=", "T2.rID", "WHERE", "T1.stars", "=", "4"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "rating", "as", "t1", "join", "reviewer", "as", "t2", "on", "t1", ".", "rid", "=", "t2", ".", "rid", "where", "t1", ".", "stars", "=", "value", "intersect", "select", "t2", ".", "name", "from", "rating", "as", "t1", "join", "reviewer", "as", "t2", "on", "t1", ".", "rid", "=", "t2", ".", "rid", "where", "t1", ".", "stars", "=", "value"], "question": "What are the names of reviewers who had rated 3 star and 4 star?", "question_toks": ["What", "are", "the", "names", "of", "reviewers", "who", "had", "rated", "3", "star", "and", "4", "star", "?"], "guid": 7719}}
{"text": "festival_detail: Festival_ID, Festival_Name, Chair_Name, Location, Year, Num_of_Audience; artwork: Artwork_ID, Type, Name; nomination: Artwork_ID, Festival_ID, Result | Show the number of audience in year 2008 or 2010.", "sql": "SELECT Num_of_Audience FROM festival_detail WHERE YEAR  =  2008 OR YEAR  =  2010", "example": {"db_id": "entertainment_awards", "query": "SELECT Num_of_Audience FROM festival_detail WHERE YEAR  =  2008 OR YEAR  =  2010", "query_toks": ["SELECT", "Num_of_Audience", "FROM", "festival_detail", "WHERE", "YEAR", "=", "2008", "OR", "YEAR", "=", "2010"], "query_toks_no_value": ["select", "num_of_audience", "from", "festival_detail", "where", "year", "=", "value", "or", "year", "=", "value"], "question": "Show the number of audience in year 2008 or 2010.", "question_toks": ["Show", "the", "number", "of", "audience", "in", "year", "2008", "or", "2010", "."], "guid": 7720}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | For each movie that received more than 3 reviews, what is the average rating?", "sql": "SELECT mID ,  avg(stars) FROM Rating GROUP BY mID HAVING count(*)  >=  2", "example": {"db_id": "movie_1", "query": "SELECT mID ,  avg(stars) FROM Rating GROUP BY mID HAVING count(*)  >=  2", "query_toks": ["SELECT", "mID", ",", "avg", "(", "stars", ")", "FROM", "Rating", "GROUP", "BY", "mID", "HAVING", "count", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "mid", ",", "avg", "(", "stars", ")", "from", "rating", "group", "by", "mid", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "For each movie that received more than 3 reviews, what is the average rating?", "question_toks": ["For", "each", "movie", "that", "received", "more", "than", "3", "reviews", ",", "what", "is", "the", "average", "rating", "?"], "guid": 7721}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | where is the director of \" The Past \" from", "sql": "SELECT t2.birth_city FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t3.title  =  \"The Past\";", "example": {"db_id": "imdb", "query": "SELECT t2.birth_city FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t3.title  =  \"The Past\";", "query_toks": ["SELECT", "t2.birth_city", "FROM", "director", "AS", "t2", "JOIN", "directed_by", "AS", "t1", "ON", "t2.did", "=", "t1.did", "JOIN", "movie", "AS", "t3", "ON", "t3.mid", "=", "t1.msid", "WHERE", "t3.title", "=", "``", "The", "Past", "''", ";"], "query_toks_no_value": ["select", "t2", ".", "birth_city", "from", "director", "as", "t2", "join", "directed_by", "as", "t1", "on", "t2", ".", "did", "=", "t1", ".", "did", "join", "movie", "as", "t3", "on", "t3", ".", "mid", "=", "t1", ".", "msid", "where", "t3", ".", "title", "=", "value"], "question": "where is the director of \" The Past \" from", "question_toks": ["where", "is", "the", "director", "of", "``", "The", "Past", "``", "from"], "guid": 7722}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | Find all the female actors from Austin", "sql": "SELECT name FROM actor WHERE birth_city  =  \"Austin\" AND gender  =  \"female\";", "example": {"db_id": "imdb", "query": "SELECT name FROM actor WHERE birth_city  =  \"Austin\" AND gender  =  \"female\";", "query_toks": ["SELECT", "name", "FROM", "actor", "WHERE", "birth_city", "=", "``", "Austin", "''", "AND", "gender", "=", "``", "female", "''", ";"], "query_toks_no_value": ["select", "name", "from", "actor", "where", "birth_city", "=", "value", "and", "gender", "=", "value"], "question": "Find all the female actors from Austin", "question_toks": ["Find", "all", "the", "female", "actors", "from", "Austin"], "guid": 7723}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | How many movies were produced in the year 2013 ?", "sql": "SELECT COUNT ( DISTINCT title  ) FROM movie WHERE release_year  =  2013;", "example": {"db_id": "imdb", "query": "SELECT COUNT ( DISTINCT title  ) FROM movie WHERE release_year  =  2013;", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "title", ")", "FROM", "movie", "WHERE", "release_year", "=", "2013", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "title", ")", "from", "movie", "where", "release_year", "=", "value"], "question": "How many movies were produced in the year 2013 ?", "question_toks": ["How", "many", "movies", "were", "produced", "in", "the", "year", "2013", "?"], "guid": 7724}}
{"text": "TV_Channel: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option; TV_series: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel; Cartoon: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel | What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?", "sql": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";", "example": {"db_id": "tvshow", "query": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";", "query_toks": ["SELECT", "Weekly_Rank", "FROM", "TV_series", "WHERE", "Episode", "=", "``", "A", "Love", "of", "a", "Lifetime", "''", ";"], "query_toks_no_value": ["select", "weekly_rank", "from", "tv_series", "where", "episode", "=", "value"], "question": "What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?", "question_toks": ["What", "is", "Weekly", "Rank", "of", "TV", "series", "with", "Episode", "``", "A", "Love", "of", "a", "Lifetime", "''", "?"], "guid": 7725}}
{"text": "TV_Channel: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option; TV_series: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel; Cartoon: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel | which countries' tv channels are not playing any cartoon written by Todd Casey?", "sql": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'", "example": {"db_id": "tvshow", "query": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'", "query_toks": ["SELECT", "country", "FROM", "TV_Channel", "EXCEPT", "SELECT", "T1.country", "FROM", "TV_Channel", "AS", "T1", "JOIN", "cartoon", "AS", "T2", "ON", "T1.id", "=", "T2.Channel", "WHERE", "T2.written_by", "=", "'Todd", "Casey", "'"], "query_toks_no_value": ["select", "country", "from", "tv_channel", "except", "select", "t1", ".", "country", "from", "tv_channel", "as", "t1", "join", "cartoon", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "channel", "where", "t2", ".", "written_by", "=", "value"], "question": "which countries' tv channels are not playing any cartoon written by Todd Casey?", "question_toks": ["which", "countries", "'", "tv", "channels", "are", "not", "playing", "any", "cartoon", "written", "by", "Todd", "Casey", "?"], "guid": 7726}}
{"text": "film: Film_ID, Rank_in_series, Number_in_season, Title, Directed_by, Original_air_date, Production_code; cinema: Cinema_ID, Name, Openning_year, Capacity, Location; schedule: Cinema_ID, Film_ID, Date, Show_times_per_day, Price | Count the number of cinemas.", "sql": "SELECT count(*) FROM cinema", "example": {"db_id": "cinema", "query": "SELECT count(*) FROM cinema", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "cinema"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "cinema"], "question": "Count the number of cinemas.", "question_toks": ["Count", "the", "number", "of", "cinemas", "."], "guid": 7727}}
{"text": "TV_Channel: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option; TV_series: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel; Cartoon: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel | list all cartoon titles and their directors ordered by their air date", "sql": "SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date", "example": {"db_id": "tvshow", "query": "SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date", "query_toks": ["SELECT", "title", ",", "Directed_by", "FROM", "Cartoon", "ORDER", "BY", "Original_air_date"], "query_toks_no_value": ["select", "title", ",", "directed_by", "from", "cartoon", "order", "by", "original_air_date"], "question": "list all cartoon titles and their directors ordered by their air date", "question_toks": ["list", "all", "cartoon", "titles", "and", "their", "directors", "ordered", "by", "their", "air", "date"], "guid": 7728}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | What are the names of all movies directed by Steven Spielberg?", "sql": "SELECT title FROM Movie WHERE director = 'Steven Spielberg'", "example": {"db_id": "movie_1", "query": "SELECT title FROM Movie WHERE director = 'Steven Spielberg'", "query_toks": ["SELECT", "title", "FROM", "Movie", "WHERE", "director", "=", "'Steven", "Spielberg", "'"], "query_toks_no_value": ["select", "title", "from", "movie", "where", "director", "=", "value"], "question": "What are the names of all movies directed by Steven Spielberg?", "question_toks": ["What", "are", "the", "names", "of", "all", "movies", "directed", "by", "Steven", "Spielberg", "?"], "guid": 7729}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | What are the different names of all reviewers whose ratings do not have a date field?", "sql": "SELECT DISTINCT name FROM Reviewer AS T1 JOIN Rating AS T2 ON T1.rID  =  T2.rID WHERE ratingDate  =  \"null\"", "example": {"db_id": "movie_1", "query": "SELECT DISTINCT name FROM Reviewer AS T1 JOIN Rating AS T2 ON T1.rID  =  T2.rID WHERE ratingDate  =  \"null\"", "query_toks": ["SELECT", "DISTINCT", "name", "FROM", "Reviewer", "AS", "T1", "JOIN", "Rating", "AS", "T2", "ON", "T1.rID", "=", "T2.rID", "WHERE", "ratingDate", "=", "``", "null", "''"], "query_toks_no_value": ["select", "distinct", "name", "from", "reviewer", "as", "t1", "join", "rating", "as", "t2", "on", "t1", ".", "rid", "=", "t2", ".", "rid", "where", "ratingdate", "=", "value"], "question": "What are the different names of all reviewers whose ratings do not have a date field?", "question_toks": ["What", "are", "the", "different", "names", "of", "all", "reviewers", "whose", "ratings", "do", "not", "have", "a", "date", "field", "?"], "guid": 7730}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | What is the name of the movie that has been reviewed the most?", "sql": "SELECT T2.title ,  T1.mID FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "movie_1", "query": "SELECT T2.title ,  T1.mID FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T2.title", ",", "T1.mID", "FROM", "Rating", "AS", "T1", "JOIN", "Movie", "AS", "T2", "ON", "T1.mID", "=", "T2.mID", "GROUP", "BY", "T1.mID", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "title", ",", "t1", ".", "mid", "from", "rating", "as", "t1", "join", "movie", "as", "t2", "on", "t1", ".", "mid", "=", "t2", ".", "mid", "group", "by", "t1", ".", "mid", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the name of the movie that has been reviewed the most?", "question_toks": ["What", "is", "the", "name", "of", "the", "movie", "that", "has", "been", "reviewed", "the", "most", "?"], "guid": 7731}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | find the number of actors from Iran who played in \" Jim Jarmusch \" movies", "sql": "SELECT COUNT ( DISTINCT t1.name  ) FROM CAST AS t4 JOIN actor AS t1 ON t4.aid  =  t1.aid JOIN movie AS t5 ON t5.mid  =  t4.msid JOIN directed_by AS t2 ON t5.mid  =  t2.msid JOIN director AS t3 ON t3.did  =  t2.did WHERE t1.nationality  =  \"Iran\" AND t3.name  =  \"Jim Jarmusch\";", "example": {"db_id": "imdb", "query": "SELECT COUNT ( DISTINCT t1.name  ) FROM CAST AS t4 JOIN actor AS t1 ON t4.aid  =  t1.aid JOIN movie AS t5 ON t5.mid  =  t4.msid JOIN directed_by AS t2 ON t5.mid  =  t2.msid JOIN director AS t3 ON t3.did  =  t2.did WHERE t1.nationality  =  \"Iran\" AND t3.name  =  \"Jim Jarmusch\";", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "t1.name", ")", "FROM", "CAST", "AS", "t4", "JOIN", "actor", "AS", "t1", "ON", "t4.aid", "=", "t1.aid", "JOIN", "movie", "AS", "t5", "ON", "t5.mid", "=", "t4.msid", "JOIN", "directed_by", "AS", "t2", "ON", "t5.mid", "=", "t2.msid", "JOIN", "director", "AS", "t3", "ON", "t3.did", "=", "t2.did", "WHERE", "t1.nationality", "=", "``", "Iran", "''", "AND", "t3.name", "=", "``", "Jim", "Jarmusch", "''", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "t1", ".", "name", ")", "from", "cast", "as", "t4", "join", "actor", "as", "t1", "on", "t4", ".", "aid", "=", "t1", ".", "aid", "join", "movie", "as", "t5", "on", "t5", ".", "mid", "=", "t4", ".", "msid", "join", "directed_by", "as", "t2", "on", "t5", ".", "mid", "=", "t2", ".", "msid", "join", "director", "as", "t3", "on", "t3", ".", "did", "=", "t2", ".", "did", "where", "t1", ".", "nationality", "=", "value", "and", "t3", ".", "name", "=", "value"], "question": "find the number of actors from Iran who played in \" Jim Jarmusch \" movies", "question_toks": ["find", "the", "number", "of", "actors", "from", "Iran", "who", "played", "in", "``", "Jim", "Jarmusch", "``", "movies"], "guid": 7732}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | What year is the movie \" The Imitation Game \" from ?", "sql": "SELECT release_year FROM movie WHERE title  =  \"The Imitation Game\";", "example": {"db_id": "imdb", "query": "SELECT release_year FROM movie WHERE title  =  \"The Imitation Game\";", "query_toks": ["SELECT", "release_year", "FROM", "movie", "WHERE", "title", "=", "``", "The", "Imitation", "Game", "''", ";"], "query_toks_no_value": ["select", "release_year", "from", "movie", "where", "title", "=", "value"], "question": "What year is the movie \" The Imitation Game \" from ?", "question_toks": ["What", "year", "is", "the", "movie", "``", "The", "Imitation", "Game", "``", "from", "?"], "guid": 7733}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | How many movies did \" Shahab Hosseini \" act in ?", "sql": "SELECT COUNT ( DISTINCT t2.title  ) FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.name  =  \"Shahab Hosseini\";", "example": {"db_id": "imdb", "query": "SELECT COUNT ( DISTINCT t2.title  ) FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.name  =  \"Shahab Hosseini\";", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "t2.title", ")", "FROM", "CAST", "AS", "t3", "JOIN", "actor", "AS", "t1", "ON", "t3.aid", "=", "t1.aid", "JOIN", "movie", "AS", "t2", "ON", "t2.mid", "=", "t3.msid", "WHERE", "t1.name", "=", "``", "Shahab", "Hosseini", "''", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "t2", ".", "title", ")", "from", "cast", "as", "t3", "join", "actor", "as", "t1", "on", "t3", ".", "aid", "=", "t1", ".", "aid", "join", "movie", "as", "t2", "on", "t2", ".", "mid", "=", "t3", ".", "msid", "where", "t1", ".", "name", "=", "value"], "question": "How many movies did \" Shahab Hosseini \" act in ?", "question_toks": ["How", "many", "movies", "did", "``", "Shahab", "Hosseini", "``", "act", "in", "?"], "guid": 7734}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | How many actors are in the movie \" Saving Private Ryan \" ?", "sql": "SELECT COUNT ( DISTINCT t1.name  ) FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t3.title  =  \"Saving Private Ryan\";", "example": {"db_id": "imdb", "query": "SELECT COUNT ( DISTINCT t1.name  ) FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t3.title  =  \"Saving Private Ryan\";", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "t1.name", ")", "FROM", "CAST", "AS", "t2", "JOIN", "actor", "AS", "t1", "ON", "t2.aid", "=", "t1.aid", "JOIN", "movie", "AS", "t3", "ON", "t3.mid", "=", "t2.msid", "WHERE", "t3.title", "=", "``", "Saving", "Private", "Ryan", "''", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "t1", ".", "name", ")", "from", "cast", "as", "t2", "join", "actor", "as", "t1", "on", "t2", ".", "aid", "=", "t1", ".", "aid", "join", "movie", "as", "t3", "on", "t3", ".", "mid", "=", "t2", ".", "msid", "where", "t3", ".", "title", "=", "value"], "question": "How many actors are in the movie \" Saving Private Ryan \" ?", "question_toks": ["How", "many", "actors", "are", "in", "the", "movie", "``", "Saving", "Private", "Ryan", "``", "?"], "guid": 7735}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | Find the average rating star for each movie that are not reviewed by Brittany Harris.", "sql": "SELECT mID ,  avg(stars) FROM Rating WHERE mID NOT IN (SELECT T1.mID FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T2.name  =  \"Brittany Harris\") GROUP BY mID", "example": {"db_id": "movie_1", "query": "SELECT mID ,  avg(stars) FROM Rating WHERE mID NOT IN (SELECT T1.mID FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T2.name  =  \"Brittany Harris\") GROUP BY mID", "query_toks": ["SELECT", "mID", ",", "avg", "(", "stars", ")", "FROM", "Rating", "WHERE", "mID", "NOT", "IN", "(", "SELECT", "T1.mID", "FROM", "Rating", "AS", "T1", "JOIN", "Reviewer", "AS", "T2", "ON", "T1.rID", "=", "T2.rID", "WHERE", "T2.name", "=", "``", "Brittany", "Harris", "''", ")", "GROUP", "BY", "mID"], "query_toks_no_value": ["select", "mid", ",", "avg", "(", "stars", ")", "from", "rating", "where", "mid", "not", "in", "(", "select", "t1", ".", "mid", "from", "rating", "as", "t1", "join", "reviewer", "as", "t2", "on", "t1", ".", "rid", "=", "t2", ".", "rid", "where", "t2", ".", "name", "=", "value", ")", "group", "by", "mid"], "question": "Find the average rating star for each movie that are not reviewed by Brittany Harris.", "question_toks": ["Find", "the", "average", "rating", "star", "for", "each", "movie", "that", "are", "not", "reviewed", "by", "Brittany", "Harris", "."], "guid": 7736}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | What are the movies related to nuclear weapons", "sql": "SELECT t3.title FROM tags AS t2 JOIN keyword AS t1 ON t2.kid  =  t1.id JOIN movie AS t3 ON t2.msid  =  t3.mid WHERE t1.keyword  =  \"nuclear weapons\";", "example": {"db_id": "imdb", "query": "SELECT t3.title FROM tags AS t2 JOIN keyword AS t1 ON t2.kid  =  t1.id JOIN movie AS t3 ON t2.msid  =  t3.mid WHERE t1.keyword  =  \"nuclear weapons\";", "query_toks": ["SELECT", "t3.title", "FROM", "tags", "AS", "t2", "JOIN", "keyword", "AS", "t1", "ON", "t2.kid", "=", "t1.id", "JOIN", "movie", "AS", "t3", "ON", "t2.msid", "=", "t3.mid", "WHERE", "t1.keyword", "=", "``", "nuclear", "weapons", "''", ";"], "query_toks_no_value": ["select", "t3", ".", "title", "from", "tags", "as", "t2", "join", "keyword", "as", "t1", "on", "t2", ".", "kid", "=", "t1", ".", "id", "join", "movie", "as", "t3", "on", "t2", ".", "msid", "=", "t3", ".", "mid", "where", "t1", ".", "keyword", "=", "value"], "question": "What are the movies related to nuclear weapons", "question_toks": ["What", "are", "the", "movies", "related", "to", "nuclear", "weapons"], "guid": 7737}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | What are names of the movies that are either made before 1980 or directed by James Cameron?", "sql": "SELECT title FROM Movie WHERE director  =  \"James Cameron\" OR YEAR   <  1980", "example": {"db_id": "movie_1", "query": "SELECT title FROM Movie WHERE director  =  \"James Cameron\" OR YEAR   <  1980", "query_toks": ["SELECT", "title", "FROM", "Movie", "WHERE", "director", "=", "``", "James", "Cameron", "''", "OR", "YEAR", "<", "1980"], "query_toks_no_value": ["select", "title", "from", "movie", "where", "director", "=", "value", "or", "year", "<", "value"], "question": "What are names of the movies that are either made before 1980 or directed by James Cameron?", "question_toks": ["What", "are", "names", "of", "the", "movies", "that", "are", "either", "made", "before", "1980", "or", "directed", "by", "James", "Cameron", "?"], "guid": 7738}}
{"text": "TV_Channel: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option; TV_series: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel; Cartoon: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel | find the package option of the tv channel that do not have any cartoon directed by Ben Jones.", "sql": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')", "example": {"db_id": "tvshow", "query": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')", "query_toks": ["SELECT", "package_option", "FROM", "TV_Channel", "WHERE", "id", "NOT", "IN", "(", "SELECT", "channel", "FROM", "cartoon", "WHERE", "directed_by", "=", "'Ben", "Jones", "'", ")"], "query_toks_no_value": ["select", "package_option", "from", "tv_channel", "where", "id", "not", "in", "(", "select", "channel", "from", "cartoon", "where", "directed_by", "=", "value", ")"], "question": "find the package option of the tv channel that do not have any cartoon directed by Ben Jones.", "question_toks": ["find", "the", "package", "option", "of", "the", "tv", "channel", "that", "do", "not", "have", "any", "cartoon", "directed", "by", "Ben", "Jones", "."], "guid": 7739}}
{"text": "program: Program_ID, Name, Origin, Launch, Owner; channel: Channel_ID, Name, Owner, Share_in_percent, Rating_in_percent; broadcast: Channel_ID, Program_ID, Time_of_day; broadcast_share: Channel_ID, Program_ID, Date, Share_in_percent | List all channel names ordered by their rating in percent from big to small.", "sql": "SELECT name FROM channel ORDER BY rating_in_percent DESC", "example": {"db_id": "program_share", "query": "SELECT name FROM channel ORDER BY rating_in_percent DESC", "query_toks": ["SELECT", "name", "FROM", "channel", "ORDER", "BY", "rating_in_percent", "DESC"], "query_toks_no_value": ["select", "name", "from", "channel", "order", "by", "rating_in_percent", "desc"], "question": "List all channel names ordered by their rating in percent from big to small.", "question_toks": ["List", "all", "channel", "names", "ordered", "by", "their", "rating", "in", "percent", "from", "big", "to", "small", "."], "guid": 7740}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | What are the names and years released for the movies with the top 3 highest ratings?", "sql": "SELECT T2.title ,  T2.year FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID ORDER BY T1.stars DESC LIMIT 3", "example": {"db_id": "movie_1", "query": "SELECT T2.title ,  T2.year FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID ORDER BY T1.stars DESC LIMIT 3", "query_toks": ["SELECT", "T2.title", ",", "T2.year", "FROM", "Rating", "AS", "T1", "JOIN", "Movie", "AS", "T2", "ON", "T1.mID", "=", "T2.mID", "ORDER", "BY", "T1.stars", "DESC", "LIMIT", "3"], "query_toks_no_value": ["select", "t2", ".", "title", ",", "t2", ".", "year", "from", "rating", "as", "t1", "join", "movie", "as", "t2", "on", "t1", ".", "mid", "=", "t2", ".", "mid", "order", "by", "t1", ".", "stars", "desc", "limit", "value"], "question": "What are the names and years released for the movies with the top 3 highest ratings?", "question_toks": ["What", "are", "the", "names", "and", "years", "released", "for", "the", "movies", "with", "the", "top", "3", "highest", "ratings", "?"], "guid": 7741}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | What are the names of all movies that were created after the most recent Steven Spielberg film?", "sql": "SELECT title FROM Movie WHERE YEAR  >  (SELECT max(YEAR) FROM Movie WHERE director  =  \"Steven Spielberg\")", "example": {"db_id": "movie_1", "query": "SELECT title FROM Movie WHERE YEAR  >  (SELECT max(YEAR) FROM Movie WHERE director  =  \"Steven Spielberg\")", "query_toks": ["SELECT", "title", "FROM", "Movie", "WHERE", "YEAR", ">", "(", "SELECT", "max", "(", "YEAR", ")", "FROM", "Movie", "WHERE", "director", "=", "``", "Steven", "Spielberg", "''", ")"], "query_toks_no_value": ["select", "title", "from", "movie", "where", "year", ">", "(", "select", "max", "(", "year", ")", "from", "movie", "where", "director", "=", "value", ")"], "question": "What are the names of all movies that were created after the most recent Steven Spielberg film?", "question_toks": ["What", "are", "the", "names", "of", "all", "movies", "that", "were", "created", "after", "the", "most", "recent", "Steven", "Spielberg", "film", "?"], "guid": 7742}}
{"text": "film: Film_ID, Rank_in_series, Number_in_season, Title, Directed_by, Original_air_date, Production_code; cinema: Cinema_ID, Name, Openning_year, Capacity, Location; schedule: Cinema_ID, Film_ID, Date, Show_times_per_day, Price | Show all the locations where some cinemas were opened in both year 2010 and year 2011.", "sql": "SELECT LOCATION FROM cinema WHERE openning_year  =  2010 INTERSECT SELECT LOCATION FROM cinema WHERE openning_year  =  2011", "example": {"db_id": "cinema", "query": "SELECT LOCATION FROM cinema WHERE openning_year  =  2010 INTERSECT SELECT LOCATION FROM cinema WHERE openning_year  =  2011", "query_toks": ["SELECT", "LOCATION", "FROM", "cinema", "WHERE", "openning_year", "=", "2010", "INTERSECT", "SELECT", "LOCATION", "FROM", "cinema", "WHERE", "openning_year", "=", "2011"], "query_toks_no_value": ["select", "location", "from", "cinema", "where", "openning_year", "=", "value", "intersect", "select", "location", "from", "cinema", "where", "openning_year", "=", "value"], "question": "Show all the locations where some cinemas were opened in both year 2010 and year 2011.", "question_toks": ["Show", "all", "the", "locations", "where", "some", "cinemas", "were", "opened", "in", "both", "year", "2010", "and", "year", "2011", "."], "guid": 7743}}
{"text": "TV_Channel: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option; TV_series: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel; Cartoon: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel | List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".", "sql": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";", "example": {"db_id": "tvshow", "query": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";", "query_toks": ["SELECT", "T2.Episode", "FROM", "TV_Channel", "AS", "T1", "JOIN", "TV_series", "AS", "T2", "ON", "T1.id", "=", "T2.Channel", "WHERE", "T1.series_name", "=", "``", "Sky", "Radio", "''", ";"], "query_toks_no_value": ["select", "t2", ".", "episode", "from", "tv_channel", "as", "t1", "join", "tv_series", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "channel", "where", "t1", ".", "series_name", "=", "value"], "question": "List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".", "question_toks": ["List", "the", "Episode", "of", "all", "TV", "series", "showed", "on", "TV", "Channel", "with", "series", "name", "``", "Sky", "Radio", "''", "."], "guid": 7744}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | What is the name of the most recent movie?", "sql": "SELECT title FROM Movie WHERE YEAR  =  (SELECT max(YEAR) FROM Movie)", "example": {"db_id": "movie_1", "query": "SELECT title FROM Movie WHERE YEAR  =  (SELECT max(YEAR) FROM Movie)", "query_toks": ["SELECT", "title", "FROM", "Movie", "WHERE", "YEAR", "=", "(", "SELECT", "max", "(", "YEAR", ")", "FROM", "Movie", ")"], "query_toks_no_value": ["select", "title", "from", "movie", "where", "year", "=", "(", "select", "max", "(", "year", ")", "from", "movie", ")"], "question": "What is the name of the most recent movie?", "question_toks": ["What", "is", "the", "name", "of", "the", "most", "recent", "movie", "?"], "guid": 7745}}
{"text": "TV_Channel: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option; TV_series: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel; Cartoon: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel | What are the titles of all cartoons directed by Ben Jones or Brandon Vietti?", "sql": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";", "example": {"db_id": "tvshow", "query": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";", "query_toks": ["SELECT", "Title", "FROM", "Cartoon", "WHERE", "Directed_by", "=", "``", "Ben", "Jones", "''", "OR", "Directed_by", "=", "``", "Brandon", "Vietti", "''", ";"], "query_toks_no_value": ["select", "title", "from", "cartoon", "where", "directed_by", "=", "value", "or", "directed_by", "=", "value"], "question": "What are the titles of all cartoons directed by Ben Jones or Brandon Vietti?", "question_toks": ["What", "are", "the", "titles", "of", "all", "cartoons", "directed", "by", "Ben", "Jones", "or", "Brandon", "Vietti", "?"], "guid": 7746}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | Which movie had the character \" Daffy Duck \"", "sql": "SELECT t1.title FROM movie AS t1 JOIN CAST AS t2 ON t1.mid  =  t2.msid WHERE t2.role  =  \"Daffy Duck\";", "example": {"db_id": "imdb", "query": "SELECT t1.title FROM movie AS t1 JOIN CAST AS t2 ON t1.mid  =  t2.msid WHERE t2.role  =  \"Daffy Duck\";", "query_toks": ["SELECT", "t1.title", "FROM", "movie", "AS", "t1", "JOIN", "CAST", "AS", "t2", "ON", "t1.mid", "=", "t2.msid", "WHERE", "t2.role", "=", "``", "Daffy", "Duck", "''", ";"], "query_toks_no_value": ["select", "t1", ".", "title", "from", "movie", "as", "t1", "join", "cast", "as", "t2", "on", "t1", ".", "mid", "=", "t2", ".", "msid", "where", "t2", ".", "role", "=", "value"], "question": "Which movie had the character \" Daffy Duck \"", "question_toks": ["Which", "movie", "had", "the", "character", "``", "Daffy", "Duck", "``"], "guid": 7747}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | What is the nationality of the actress \" Christoph Waltz \" ?", "sql": "SELECT nationality FROM actor WHERE name  =  \"Christoph Waltz\";", "example": {"db_id": "imdb", "query": "SELECT nationality FROM actor WHERE name  =  \"Christoph Waltz\";", "query_toks": ["SELECT", "nationality", "FROM", "actor", "WHERE", "name", "=", "``", "Christoph", "Waltz", "''", ";"], "query_toks_no_value": ["select", "nationality", "from", "actor", "where", "name", "=", "value"], "question": "What is the nationality of the actress \" Christoph Waltz \" ?", "question_toks": ["What", "is", "the", "nationality", "of", "the", "actress", "``", "Christoph", "Waltz", "``", "?"], "guid": 7748}}
{"text": "TV_Channel: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option; TV_series: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel; Cartoon: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel | What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?", "sql": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'", "example": {"db_id": "tvshow", "query": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'", "query_toks": ["SELECT", "T1.series_name", ",", "T1.country", "FROM", "TV_Channel", "AS", "T1", "JOIN", "cartoon", "AS", "T2", "ON", "T1.id", "=", "T2.Channel", "WHERE", "T2.directed_by", "=", "'Michael", "Chang", "'", "INTERSECT", "SELECT", "T1.series_name", ",", "T1.country", "FROM", "TV_Channel", "AS", "T1", "JOIN", "cartoon", "AS", "T2", "ON", "T1.id", "=", "T2.Channel", "WHERE", "T2.directed_by", "=", "'Ben", "Jones", "'"], "query_toks_no_value": ["select", "t1", ".", "series_name", ",", "t1", ".", "country", "from", "tv_channel", "as", "t1", "join", "cartoon", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "channel", "where", "t2", ".", "directed_by", "=", "value", "intersect", "select", "t1", ".", "series_name", ",", "t1", ".", "country", "from", "tv_channel", "as", "t1", "join", "cartoon", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "channel", "where", "t2", ".", "directed_by", "=", "value"], "question": "What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?", "question_toks": ["What", "is", "the", "series", "name", "and", "country", "of", "all", "TV", "channels", "that", "are", "playing", "cartoons", "directed", "by", "Ben", "Jones", "and", "cartoons", "directed", "by", "Michael", "Chang", "?"], "guid": 7749}}
{"text": "film: Film_ID, Title, Studio, Director, Gross_in_dollar; market: Market_ID, Country, Number_cities; film_market_estimation: Estimation_ID, Low_Estimate, High_Estimate, Film_ID, Type, Market_ID, Year | Return the titles and directors of films that were never in the market of China.", "sql": "SELECT title ,  director FROM film WHERE film_id NOT IN (SELECT film_id FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.market_id  =  T2.Market_ID WHERE country  =  'China')", "example": {"db_id": "film_rank", "query": "SELECT title ,  director FROM film WHERE film_id NOT IN (SELECT film_id FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.market_id  =  T2.Market_ID WHERE country  =  'China')", "query_toks": ["SELECT", "title", ",", "director", "FROM", "film", "WHERE", "film_id", "NOT", "IN", "(", "SELECT", "film_id", "FROM", "film_market_estimation", "AS", "T1", "JOIN", "market", "AS", "T2", "ON", "T1.market_id", "=", "T2.Market_ID", "WHERE", "country", "=", "'China", "'", ")"], "query_toks_no_value": ["select", "title", ",", "director", "from", "film", "where", "film_id", "not", "in", "(", "select", "film_id", "from", "film_market_estimation", "as", "t1", "join", "market", "as", "t2", "on", "t1", ".", "market_id", "=", "t2", ".", "market_id", "where", "country", "=", "value", ")"], "question": "Return the titles and directors of films that were never in the market of China.", "question_toks": ["Return", "the", "titles", "and", "directors", "of", "films", "that", "were", "never", "in", "the", "market", "of", "China", "."], "guid": 7750}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | Find all actors who are from Afghanistan", "sql": "SELECT name FROM actor WHERE nationality  =  \"Afghanistan\";", "example": {"db_id": "imdb", "query": "SELECT name FROM actor WHERE nationality  =  \"Afghanistan\";", "query_toks": ["SELECT", "name", "FROM", "actor", "WHERE", "nationality", "=", "``", "Afghanistan", "''", ";"], "query_toks_no_value": ["select", "name", "from", "actor", "where", "nationality", "=", "value"], "question": "Find all actors who are from Afghanistan", "question_toks": ["Find", "all", "actors", "who", "are", "from", "Afghanistan"], "guid": 7751}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | Find the names of all reviewers who rated Gone with the Wind.", "sql": "SELECT DISTINCT T3.name FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.title  =  'Gone with the Wind'", "example": {"db_id": "movie_1", "query": "SELECT DISTINCT T3.name FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.title  =  'Gone with the Wind'", "query_toks": ["SELECT", "DISTINCT", "T3.name", "FROM", "Rating", "AS", "T1", "JOIN", "Movie", "AS", "T2", "ON", "T1.mID", "=", "T2.mID", "JOIN", "Reviewer", "AS", "T3", "ON", "T1.rID", "=", "T3.rID", "WHERE", "T2.title", "=", "'Gone", "with", "the", "Wind", "'"], "query_toks_no_value": ["select", "distinct", "t3", ".", "name", "from", "rating", "as", "t1", "join", "movie", "as", "t2", "on", "t1", ".", "mid", "=", "t2", ".", "mid", "join", "reviewer", "as", "t3", "on", "t1", ".", "rid", "=", "t3", ".", "rid", "where", "t2", ".", "title", "=", "value"], "question": "Find the names of all reviewers who rated Gone with the Wind.", "question_toks": ["Find", "the", "names", "of", "all", "reviewers", "who", "rated", "Gone", "with", "the", "Wind", "."], "guid": 7752}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | For each reviewer id, what is the title and rating for the movie with the smallest rating?", "sql": "SELECT T2.title ,  T1.rID ,  T1.stars ,  min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.rID", "example": {"db_id": "movie_1", "query": "SELECT T2.title ,  T1.rID ,  T1.stars ,  min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.rID", "query_toks": ["SELECT", "T2.title", ",", "T1.rID", ",", "T1.stars", ",", "min", "(", "T1.stars", ")", "FROM", "Rating", "AS", "T1", "JOIN", "Movie", "AS", "T2", "ON", "T1.mID", "=", "T2.mID", "GROUP", "BY", "T1.rID"], "query_toks_no_value": ["select", "t2", ".", "title", ",", "t1", ".", "rid", ",", "t1", ".", "stars", ",", "min", "(", "t1", ".", "stars", ")", "from", "rating", "as", "t1", "join", "movie", "as", "t2", "on", "t1", ".", "mid", "=", "t2", ".", "mid", "group", "by", "t1", ".", "rid"], "question": "For each reviewer id, what is the title and rating for the movie with the smallest rating?", "question_toks": ["For", "each", "reviewer", "id", ",", "what", "is", "the", "title", "and", "rating", "for", "the", "movie", "with", "the", "smallest", "rating", "?"], "guid": 7753}}
{"text": "film: Film_ID, Title, Studio, Director, Gross_in_dollar; market: Market_ID, Country, Number_cities; film_market_estimation: Estimation_ID, Low_Estimate, High_Estimate, Film_ID, Type, Market_ID, Year | Show the studios that have not produced films with director \"Walter Hill\".", "sql": "SELECT Studio FROM film EXCEPT SELECT Studio FROM film WHERE Director  =  \"Walter Hill\"", "example": {"db_id": "film_rank", "query": "SELECT Studio FROM film EXCEPT SELECT Studio FROM film WHERE Director  =  \"Walter Hill\"", "query_toks": ["SELECT", "Studio", "FROM", "film", "EXCEPT", "SELECT", "Studio", "FROM", "film", "WHERE", "Director", "=", "``", "Walter", "Hill", "''"], "query_toks_no_value": ["select", "studio", "from", "film", "except", "select", "studio", "from", "film", "where", "director", "=", "value"], "question": "Show the studios that have not produced films with director \"Walter Hill\".", "question_toks": ["Show", "the", "studios", "that", "have", "not", "produced", "films", "with", "director", "``", "Walter", "Hill", "''", "."], "guid": 7754}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | List all the Sci-Fi movies which released in 2010", "sql": "SELECT t3.title FROM genre AS t2 JOIN classification AS t1 ON t2.gid  =  t1.gid JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.genre  =  \"Sci-Fi\" AND t3.release_year  =  2010;", "example": {"db_id": "imdb", "query": "SELECT t3.title FROM genre AS t2 JOIN classification AS t1 ON t2.gid  =  t1.gid JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.genre  =  \"Sci-Fi\" AND t3.release_year  =  2010;", "query_toks": ["SELECT", "t3.title", "FROM", "genre", "AS", "t2", "JOIN", "classification", "AS", "t1", "ON", "t2.gid", "=", "t1.gid", "JOIN", "movie", "AS", "t3", "ON", "t3.mid", "=", "t1.msid", "WHERE", "t2.genre", "=", "``", "Sci-Fi", "''", "AND", "t3.release_year", "=", "2010", ";"], "query_toks_no_value": ["select", "t3", ".", "title", "from", "genre", "as", "t2", "join", "classification", "as", "t1", "on", "t2", ".", "gid", "=", "t1", ".", "gid", "join", "movie", "as", "t3", "on", "t3", ".", "mid", "=", "t1", ".", "msid", "where", "t2", ".", "genre", "=", "value", "and", "t3", ".", "release_year", "=", "value"], "question": "List all the Sci-Fi movies which released in 2010", "question_toks": ["List", "all", "the", "Sci-Fi", "movies", "which", "released", "in", "2010"], "guid": 7755}}
{"text": "program: Program_ID, Name, Origin, Launch, Owner; channel: Channel_ID, Name, Owner, Share_in_percent, Rating_in_percent; broadcast: Channel_ID, Program_ID, Time_of_day; broadcast_share: Channel_ID, Program_ID, Date, Share_in_percent | Find the names of channels that are not owned by CCTV.", "sql": "SELECT name FROM channel WHERE OWNER != 'CCTV'", "example": {"db_id": "program_share", "query": "SELECT name FROM channel WHERE OWNER != 'CCTV'", "query_toks": ["SELECT", "name", "FROM", "channel", "WHERE", "OWNER", "!", "=", "'CCTV", "'"], "query_toks_no_value": ["select", "name", "from", "channel", "where", "owner", "!", "=", "value"], "question": "Find the names of channels that are not owned by CCTV.", "question_toks": ["Find", "the", "names", "of", "channels", "that", "are", "not", "owned", "by", "CCTV", "."], "guid": 7756}}
{"text": "film: Film_ID, Title, Studio, Director, Gross_in_dollar; market: Market_ID, Country, Number_cities; film_market_estimation: Estimation_ID, Low_Estimate, High_Estimate, Film_ID, Type, Market_ID, Year | List the title of films that do not have any market estimation.", "sql": "SELECT Title FROM film WHERE Film_ID NOT IN (SELECT Film_ID FROM film_market_estimation)", "example": {"db_id": "film_rank", "query": "SELECT Title FROM film WHERE Film_ID NOT IN (SELECT Film_ID FROM film_market_estimation)", "query_toks": ["SELECT", "Title", "FROM", "film", "WHERE", "Film_ID", "NOT", "IN", "(", "SELECT", "Film_ID", "FROM", "film_market_estimation", ")"], "query_toks_no_value": ["select", "title", "from", "film", "where", "film_id", "not", "in", "(", "select", "film_id", "from", "film_market_estimation", ")"], "question": "List the title of films that do not have any market estimation.", "question_toks": ["List", "the", "title", "of", "films", "that", "do", "not", "have", "any", "market", "estimation", "."], "guid": 7757}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | Find the titles of all movies that have no ratings.", "sql": "SELECT title FROM Movie WHERE mID NOT IN (SELECT mID FROM Rating)", "example": {"db_id": "movie_1", "query": "SELECT title FROM Movie WHERE mID NOT IN (SELECT mID FROM Rating)", "query_toks": ["SELECT", "title", "FROM", "Movie", "WHERE", "mID", "NOT", "IN", "(", "SELECT", "mID", "FROM", "Rating", ")"], "query_toks_no_value": ["select", "title", "from", "movie", "where", "mid", "not", "in", "(", "select", "mid", "from", "rating", ")"], "question": "Find the titles of all movies that have no ratings.", "question_toks": ["Find", "the", "titles", "of", "all", "movies", "that", "have", "no", "ratings", "."], "guid": 7758}}
{"text": "festival_detail: Festival_ID, Festival_Name, Chair_Name, Location, Year, Num_of_Audience; artwork: Artwork_ID, Type, Name; nomination: Artwork_ID, Festival_ID, Result | What are the names of festivals held in year 2007?", "sql": "SELECT Festival_Name FROM festival_detail WHERE YEAR  =  2007", "example": {"db_id": "entertainment_awards", "query": "SELECT Festival_Name FROM festival_detail WHERE YEAR  =  2007", "query_toks": ["SELECT", "Festival_Name", "FROM", "festival_detail", "WHERE", "YEAR", "=", "2007"], "query_toks_no_value": ["select", "festival_name", "from", "festival_detail", "where", "year", "=", "value"], "question": "What are the names of festivals held in year 2007?", "question_toks": ["What", "are", "the", "names", "of", "festivals", "held", "in", "year", "2007", "?"], "guid": 7759}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | What is the name of the movie produced after 2000 and directed by James Cameron?", "sql": "SELECT title FROM Movie WHERE director = 'James Cameron' AND YEAR  >  2000", "example": {"db_id": "movie_1", "query": "SELECT title FROM Movie WHERE director = 'James Cameron' AND YEAR  >  2000", "query_toks": ["SELECT", "title", "FROM", "Movie", "WHERE", "director", "=", "'James", "Cameron", "'", "AND", "YEAR", ">", "2000"], "query_toks_no_value": ["select", "title", "from", "movie", "where", "director", "=", "value", "and", "year", ">", "value"], "question": "What is the name of the movie produced after 2000 and directed by James Cameron?", "question_toks": ["What", "is", "the", "name", "of", "the", "movie", "produced", "after", "2000", "and", "directed", "by", "James", "Cameron", "?"], "guid": 7760}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | What is the average number of stars that each reviewer awards for a movie?", "sql": "SELECT T2.name ,  avg(T1.stars) FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T2.name", "example": {"db_id": "movie_1", "query": "SELECT T2.name ,  avg(T1.stars) FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T2.name", "query_toks": ["SELECT", "T2.name", ",", "avg", "(", "T1.stars", ")", "FROM", "Rating", "AS", "T1", "JOIN", "Reviewer", "AS", "T2", "ON", "T1.rID", "=", "T2.rID", "GROUP", "BY", "T2.name"], "query_toks_no_value": ["select", "t2", ".", "name", ",", "avg", "(", "t1", ".", "stars", ")", "from", "rating", "as", "t1", "join", "reviewer", "as", "t2", "on", "t1", ".", "rid", "=", "t2", ".", "rid", "group", "by", "t2", ".", "name"], "question": "What is the average number of stars that each reviewer awards for a movie?", "question_toks": ["What", "is", "the", "average", "number", "of", "stars", "that", "each", "reviewer", "awards", "for", "a", "movie", "?"], "guid": 7761}}
{"text": "TV_Channel: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option; TV_series: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel; Cartoon: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel | List each language and the number of TV Channels using it.", "sql": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE", "example": {"db_id": "tvshow", "query": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE", "query_toks": ["SELECT", "LANGUAGE", ",", "count", "(", "*", ")", "FROM", "TV_Channel", "GROUP", "BY", "LANGUAGE"], "query_toks_no_value": ["select", "language", ",", "count", "(", "*", ")", "from", "tv_channel", "group", "by", "language"], "question": "List each language and the number of TV Channels using it.", "question_toks": ["List", "each", "language", "and", "the", "number", "of", "TV", "Channels", "using", "it", "."], "guid": 7762}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | What are the movie titles with the highest average rating and what are those ratings?", "sql": "SELECT T2.title ,  avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY avg(T1.stars) DESC LIMIT 1", "example": {"db_id": "movie_1", "query": "SELECT T2.title ,  avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY avg(T1.stars) DESC LIMIT 1", "query_toks": ["SELECT", "T2.title", ",", "avg", "(", "T1.stars", ")", "FROM", "Rating", "AS", "T1", "JOIN", "Movie", "AS", "T2", "ON", "T1.mID", "=", "T2.mID", "GROUP", "BY", "T1.mID", "ORDER", "BY", "avg", "(", "T1.stars", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "title", ",", "avg", "(", "t1", ".", "stars", ")", "from", "rating", "as", "t1", "join", "movie", "as", "t2", "on", "t1", ".", "mid", "=", "t2", ".", "mid", "group", "by", "t1", ".", "mid", "order", "by", "avg", "(", "t1", ".", "stars", ")", "desc", "limit", "value"], "question": "What are the movie titles with the highest average rating and what are those ratings?", "question_toks": ["What", "are", "the", "movie", "titles", "with", "the", "highest", "average", "rating", "and", "what", "are", "those", "ratings", "?"], "guid": 7763}}
{"text": "TV_Channel: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option; TV_series: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel; Cartoon: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel | What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?", "sql": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";", "example": {"db_id": "tvshow", "query": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";", "query_toks": ["SELECT", "T2.Title", "FROM", "TV_Channel", "AS", "T1", "JOIN", "Cartoon", "AS", "T2", "ON", "T1.id", "=", "T2.Channel", "WHERE", "T1.series_name", "=", "``", "Sky", "Radio", "''", ";"], "query_toks_no_value": ["select", "t2", ".", "title", "from", "tv_channel", "as", "t1", "join", "cartoon", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "channel", "where", "t1", ".", "series_name", "=", "value"], "question": "What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?", "question_toks": ["What", "is", "the", "title", "of", "all", "the", "cartools", "that", "are", "on", "the", "TV", "Channel", "with", "the", "series", "name", "``", "Sky", "Radio", "''", "?"], "guid": 7764}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | How many movies were made before 2000?", "sql": "SELECT count(*) FROM Movie WHERE YEAR  <  2000", "example": {"db_id": "movie_1", "query": "SELECT count(*) FROM Movie WHERE YEAR  <  2000", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Movie", "WHERE", "YEAR", "<", "2000"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "movie", "where", "year", "<", "value"], "question": "How many movies were made before 2000?", "question_toks": ["How", "many", "movies", "were", "made", "before", "2000", "?"], "guid": 7765}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | Find all actors born in \" Austin \" after 1980", "sql": "SELECT name FROM actor WHERE birth_city  =  \"Austin\" AND birth_year  >  1980;", "example": {"db_id": "imdb", "query": "SELECT name FROM actor WHERE birth_city  =  \"Austin\" AND birth_year  >  1980;", "query_toks": ["SELECT", "name", "FROM", "actor", "WHERE", "birth_city", "=", "``", "Austin", "''", "AND", "birth_year", ">", "1980", ";"], "query_toks_no_value": ["select", "name", "from", "actor", "where", "birth_city", "=", "value", "and", "birth_year", ">", "value"], "question": "Find all actors born in \" Austin \" after 1980", "question_toks": ["Find", "all", "actors", "born", "in", "``", "Austin", "``", "after", "1980"], "guid": 7766}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | Find the title and score of the movie with the lowest rating among all movies directed by each director.", "sql": "SELECT T2.title ,  T1.stars ,  T2.director ,  min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T2.director", "example": {"db_id": "movie_1", "query": "SELECT T2.title ,  T1.stars ,  T2.director ,  min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T2.director", "query_toks": ["SELECT", "T2.title", ",", "T1.stars", ",", "T2.director", ",", "min", "(", "T1.stars", ")", "FROM", "Rating", "AS", "T1", "JOIN", "Movie", "AS", "T2", "ON", "T1.mID", "=", "T2.mID", "GROUP", "BY", "T2.director"], "query_toks_no_value": ["select", "t2", ".", "title", ",", "t1", ".", "stars", ",", "t2", ".", "director", ",", "min", "(", "t1", ".", "stars", ")", "from", "rating", "as", "t1", "join", "movie", "as", "t2", "on", "t1", ".", "mid", "=", "t2", ".", "mid", "group", "by", "t2", ".", "director"], "question": "Find the title and score of the movie with the lowest rating among all movies directed by each director.", "question_toks": ["Find", "the", "title", "and", "score", "of", "the", "movie", "with", "the", "lowest", "rating", "among", "all", "movies", "directed", "by", "each", "director", "."], "guid": 7767}}
{"text": "program: Program_ID, Name, Origin, Launch, Owner; channel: Channel_ID, Name, Owner, Share_in_percent, Rating_in_percent; broadcast: Channel_ID, Program_ID, Time_of_day; broadcast_share: Channel_ID, Program_ID, Date, Share_in_percent | how many programs are broadcast in each time section of the day?", "sql": "SELECT count(*) ,  time_of_day FROM broadcast GROUP BY time_of_day", "example": {"db_id": "program_share", "query": "SELECT count(*) ,  time_of_day FROM broadcast GROUP BY time_of_day", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "time_of_day", "FROM", "broadcast", "GROUP", "BY", "time_of_day"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "time_of_day", "from", "broadcast", "group", "by", "time_of_day"], "question": "how many programs are broadcast in each time section of the day?", "question_toks": ["how", "many", "programs", "are", "broadcast", "in", "each", "time", "section", "of", "the", "day", "?"], "guid": 7768}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | In what year was \" Benedict Cumberbatch \" born", "sql": "SELECT birth_year FROM actor WHERE name  =  \"Benedict Cumberbatch\";", "example": {"db_id": "imdb", "query": "SELECT birth_year FROM actor WHERE name  =  \"Benedict Cumberbatch\";", "query_toks": ["SELECT", "birth_year", "FROM", "actor", "WHERE", "name", "=", "``", "Benedict", "Cumberbatch", "''", ";"], "query_toks_no_value": ["select", "birth_year", "from", "actor", "where", "name", "=", "value"], "question": "In what year was \" Benedict Cumberbatch \" born", "question_toks": ["In", "what", "year", "was", "``", "Benedict", "Cumberbatch", "``", "born"], "guid": 7769}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | Find the ids of reviewers who didn't only give 4 star.", "sql": "SELECT rID FROM Rating WHERE stars != 4", "example": {"db_id": "movie_1", "query": "SELECT rID FROM Rating WHERE stars != 4", "query_toks": ["SELECT", "rID", "FROM", "Rating", "WHERE", "stars", "!", "=", "4"], "query_toks_no_value": ["select", "rid", "from", "rating", "where", "stars", "!", "=", "value"], "question": "Find the ids of reviewers who didn't only give 4 star.", "question_toks": ["Find", "the", "ids", "of", "reviewers", "who", "did", "n't", "only", "give", "4", "star", "."], "guid": 7770}}
{"text": "TV_Channel: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option; TV_series: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel; Cartoon: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel | What are the countries that have cartoons on TV that were written by Todd Casey?", "sql": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'", "example": {"db_id": "tvshow", "query": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'", "query_toks": ["SELECT", "T1.country", "FROM", "TV_Channel", "AS", "T1", "JOIN", "cartoon", "AS", "T2", "ON", "T1.id", "=", "T2.Channel", "WHERE", "T2.written_by", "=", "'Todd", "Casey", "'"], "query_toks_no_value": ["select", "t1", ".", "country", "from", "tv_channel", "as", "t1", "join", "cartoon", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "channel", "where", "t2", ".", "written_by", "=", "value"], "question": "What are the countries that have cartoons on TV that were written by Todd Casey?", "question_toks": ["What", "are", "the", "countries", "that", "have", "cartoons", "on", "TV", "that", "were", "written", "by", "Todd", "Casey", "?"], "guid": 7771}}
{"text": "TV_Channel: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option; TV_series: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel; Cartoon: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel | What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.", "sql": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";", "example": {"db_id": "tvshow", "query": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";", "query_toks": ["SELECT", "T1.series_name", "FROM", "TV_Channel", "AS", "T1", "JOIN", "TV_series", "AS", "T2", "ON", "T1.id", "=", "T2.Channel", "WHERE", "T2.Episode", "=", "``", "A", "Love", "of", "a", "Lifetime", "''", ";"], "query_toks_no_value": ["select", "t1", ".", "series_name", "from", "tv_channel", "as", "t1", "join", "tv_series", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "channel", "where", "t2", ".", "episode", "=", "value"], "question": "What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.", "question_toks": ["What", "is", "the", "TV", "Channel", "of", "TV", "series", "with", "Episode", "``", "A", "Love", "of", "a", "Lifetime", "''", "?", "List", "the", "TV", "Channel", "'s", "series", "name", "."], "guid": 7772}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | Where is the birth place of \" Kevin Spacey \"", "sql": "SELECT birth_city FROM director WHERE name  =  \"director_name0\";", "example": {"db_id": "imdb", "query": "SELECT birth_city FROM director WHERE name  =  \"director_name0\";", "query_toks": ["SELECT", "birth_city", "FROM", "director", "WHERE", "name", "=", "``", "director_name0", "''", ";"], "query_toks_no_value": ["select", "birth_city", "from", "director", "where", "name", "=", "value"], "question": "Where is the birth place of \" Kevin Spacey \"", "question_toks": ["Where", "is", "the", "birth", "place", "of", "``", "Kevin", "Spacey", "``"], "guid": 7773}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | What are the names of movies that get 3 star and 4 star?", "sql": "SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  =  3 INTERSECT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  =  4", "example": {"db_id": "movie_1", "query": "SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  =  3 INTERSECT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  =  4", "query_toks": ["SELECT", "T2.title", "FROM", "Rating", "AS", "T1", "JOIN", "Movie", "AS", "T2", "ON", "T1.mID", "=", "T2.mID", "WHERE", "T1.stars", "=", "3", "INTERSECT", "SELECT", "T2.title", "FROM", "Rating", "AS", "T1", "JOIN", "Movie", "AS", "T2", "ON", "T1.mID", "=", "T2.mID", "WHERE", "T1.stars", "=", "4"], "query_toks_no_value": ["select", "t2", ".", "title", "from", "rating", "as", "t1", "join", "movie", "as", "t2", "on", "t1", ".", "mid", "=", "t2", ".", "mid", "where", "t1", ".", "stars", "=", "value", "intersect", "select", "t2", ".", "title", "from", "rating", "as", "t1", "join", "movie", "as", "t2", "on", "t1", ".", "mid", "=", "t2", ".", "mid", "where", "t1", ".", "stars", "=", "value"], "question": "What are the names of movies that get 3 star and 4 star?", "question_toks": ["What", "are", "the", "names", "of", "movies", "that", "get", "3", "star", "and", "4", "star", "?"], "guid": 7774}}
{"text": "film: Film_ID, Rank_in_series, Number_in_season, Title, Directed_by, Original_air_date, Production_code; cinema: Cinema_ID, Name, Openning_year, Capacity, Location; schedule: Cinema_ID, Film_ID, Date, Show_times_per_day, Price | Show the average, minimum, and maximum capacity for all the cinemas opened in year 2011 or later.", "sql": "SELECT avg(capacity) ,  min(capacity) ,  max(capacity) FROM cinema WHERE openning_year  >=  2011", "example": {"db_id": "cinema", "query": "SELECT avg(capacity) ,  min(capacity) ,  max(capacity) FROM cinema WHERE openning_year  >=  2011", "query_toks": ["SELECT", "avg", "(", "capacity", ")", ",", "min", "(", "capacity", ")", ",", "max", "(", "capacity", ")", "FROM", "cinema", "WHERE", "openning_year", ">", "=", "2011"], "query_toks_no_value": ["select", "avg", "(", "capacity", ")", ",", "min", "(", "capacity", ")", ",", "max", "(", "capacity", ")", "from", "cinema", "where", "openning_year", ">", "=", "value"], "question": "Show the average, minimum, and maximum capacity for all the cinemas opened in year 2011 or later.", "question_toks": ["Show", "the", "average", ",", "minimum", ",", "and", "maximum", "capacity", "for", "all", "the", "cinemas", "opened", "in", "year", "2011", "or", "later", "."], "guid": 7775}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | How many movies did \" Quentin Tarantino \" direct before 2002 and after 2010 ?", "sql": "SELECT COUNT ( DISTINCT t4.title  ) FROM director AS t3 JOIN directed_by AS t2 ON t3.did  =  t2.did JOIN movie AS t4 ON t4.mid  =  t2.msid JOIN made_by AS t5 ON t4.mid  =  t5.msid JOIN producer AS t1 ON t1.pid  =  t5.pid WHERE t3.name  =  \"Quentin Tarantino\" AND t4.release_year  <  2010 AND t4.release_year  >  2002;", "example": {"db_id": "imdb", "query": "SELECT COUNT ( DISTINCT t4.title  ) FROM director AS t3 JOIN directed_by AS t2 ON t3.did  =  t2.did JOIN movie AS t4 ON t4.mid  =  t2.msid JOIN made_by AS t5 ON t4.mid  =  t5.msid JOIN producer AS t1 ON t1.pid  =  t5.pid WHERE t3.name  =  \"Quentin Tarantino\" AND t4.release_year  <  2010 AND t4.release_year  >  2002;", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "t4.title", ")", "FROM", "director", "AS", "t3", "JOIN", "directed_by", "AS", "t2", "ON", "t3.did", "=", "t2.did", "JOIN", "movie", "AS", "t4", "ON", "t4.mid", "=", "t2.msid", "JOIN", "made_by", "AS", "t5", "ON", "t4.mid", "=", "t5.msid", "JOIN", "producer", "AS", "t1", "ON", "t1.pid", "=", "t5.pid", "WHERE", "t3.name", "=", "``", "Quentin", "Tarantino", "''", "AND", "t4.release_year", "<", "2010", "AND", "t4.release_year", ">", "2002", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "t4", ".", "title", ")", "from", "director", "as", "t3", "join", "directed_by", "as", "t2", "on", "t3", ".", "did", "=", "t2", ".", "did", "join", "movie", "as", "t4", "on", "t4", ".", "mid", "=", "t2", ".", "msid", "join", "made_by", "as", "t5", "on", "t4", ".", "mid", "=", "t5", ".", "msid", "join", "producer", "as", "t1", "on", "t1", ".", "pid", "=", "t5", ".", "pid", "where", "t3", ".", "name", "=", "value", "and", "t4", ".", "release_year", "<", "value", "and", "t4", ".", "release_year", ">", "value"], "question": "How many movies did \" Quentin Tarantino \" direct before 2002 and after 2010 ?", "question_toks": ["How", "many", "movies", "did", "``", "Quentin", "Tarantino", "``", "direct", "before", "2002", "and", "after", "2010", "?"], "guid": 7776}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | What are the ids of all reviewers who have not given 4 stars at least once?", "sql": "SELECT rID FROM Rating WHERE stars != 4", "example": {"db_id": "movie_1", "query": "SELECT rID FROM Rating WHERE stars != 4", "query_toks": ["SELECT", "rID", "FROM", "Rating", "WHERE", "stars", "!", "=", "4"], "query_toks_no_value": ["select", "rid", "from", "rating", "where", "stars", "!", "=", "value"], "question": "What are the ids of all reviewers who have not given 4 stars at least once?", "question_toks": ["What", "are", "the", "ids", "of", "all", "reviewers", "who", "have", "not", "given", "4", "stars", "at", "least", "once", "?"], "guid": 7777}}
{"text": "film: Film_ID, Title, Studio, Director, Gross_in_dollar; market: Market_ID, Country, Number_cities; film_market_estimation: Estimation_ID, Low_Estimate, High_Estimate, Film_ID, Type, Market_ID, Year | List the name of film studio that have the most number of films.", "sql": "SELECT Studio FROM film GROUP BY Studio ORDER BY COUNT(*) DESC LIMIT 1", "example": {"db_id": "film_rank", "query": "SELECT Studio FROM film GROUP BY Studio ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "Studio", "FROM", "film", "GROUP", "BY", "Studio", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "studio", "from", "film", "group", "by", "studio", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "List the name of film studio that have the most number of films.", "question_toks": ["List", "the", "name", "of", "film", "studio", "that", "have", "the", "most", "number", "of", "films", "."], "guid": 7778}}
{"text": "festival_detail: Festival_ID, Festival_Name, Chair_Name, Location, Year, Num_of_Audience; artwork: Artwork_ID, Type, Name; nomination: Artwork_ID, Festival_ID, Result | What is the location of the festival with the largest number of audience?", "sql": "SELECT LOCATION FROM festival_detail ORDER BY Num_of_Audience DESC LIMIT 1", "example": {"db_id": "entertainment_awards", "query": "SELECT LOCATION FROM festival_detail ORDER BY Num_of_Audience DESC LIMIT 1", "query_toks": ["SELECT", "LOCATION", "FROM", "festival_detail", "ORDER", "BY", "Num_of_Audience", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "location", "from", "festival_detail", "order", "by", "num_of_audience", "desc", "limit", "value"], "question": "What is the location of the festival with the largest number of audience?", "question_toks": ["What", "is", "the", "location", "of", "the", "festival", "with", "the", "largest", "number", "of", "audience", "?"], "guid": 7779}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | For any rating where the name of reviewer is the same as the director of the movie, return the reviewer name, movie title, and number of stars.", "sql": "SELECT DISTINCT T3.name ,  T2.title ,  T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.director  =  T3.name", "example": {"db_id": "movie_1", "query": "SELECT DISTINCT T3.name ,  T2.title ,  T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.director  =  T3.name", "query_toks": ["SELECT", "DISTINCT", "T3.name", ",", "T2.title", ",", "T1.stars", "FROM", "Rating", "AS", "T1", "JOIN", "Movie", "AS", "T2", "ON", "T1.mID", "=", "T2.mID", "JOIN", "Reviewer", "AS", "T3", "ON", "T1.rID", "=", "T3.rID", "WHERE", "T2.director", "=", "T3.name"], "query_toks_no_value": ["select", "distinct", "t3", ".", "name", ",", "t2", ".", "title", ",", "t1", ".", "stars", "from", "rating", "as", "t1", "join", "movie", "as", "t2", "on", "t1", ".", "mid", "=", "t2", ".", "mid", "join", "reviewer", "as", "t3", "on", "t1", ".", "rid", "=", "t3", ".", "rid", "where", "t2", ".", "director", "=", "t3", ".", "name"], "question": "For any rating where the name of reviewer is the same as the director of the movie, return the reviewer name, movie title, and number of stars.", "question_toks": ["For", "any", "rating", "where", "the", "name", "of", "reviewer", "is", "the", "same", "as", "the", "director", "of", "the", "movie", ",", "return", "the", "reviewer", "name", ",", "movie", "title", ",", "and", "number", "of", "stars", "."], "guid": 7780}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | Find all actors from Afghanistan", "sql": "SELECT name FROM actor WHERE nationality  =  \"Afghanistan\";", "example": {"db_id": "imdb", "query": "SELECT name FROM actor WHERE nationality  =  \"Afghanistan\";", "query_toks": ["SELECT", "name", "FROM", "actor", "WHERE", "nationality", "=", "``", "Afghanistan", "''", ";"], "query_toks_no_value": ["select", "name", "from", "actor", "where", "nationality", "=", "value"], "question": "Find all actors from Afghanistan", "question_toks": ["Find", "all", "actors", "from", "Afghanistan"], "guid": 7781}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | What is the average rating star for each reviewer?", "sql": "SELECT T2.name ,  avg(T1.stars) FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T2.name", "example": {"db_id": "movie_1", "query": "SELECT T2.name ,  avg(T1.stars) FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T2.name", "query_toks": ["SELECT", "T2.name", ",", "avg", "(", "T1.stars", ")", "FROM", "Rating", "AS", "T1", "JOIN", "Reviewer", "AS", "T2", "ON", "T1.rID", "=", "T2.rID", "GROUP", "BY", "T2.name"], "query_toks_no_value": ["select", "t2", ".", "name", ",", "avg", "(", "t1", ".", "stars", ")", "from", "rating", "as", "t1", "join", "reviewer", "as", "t2", "on", "t1", ".", "rid", "=", "t2", ".", "rid", "group", "by", "t2", ".", "name"], "question": "What is the average rating star for each reviewer?", "question_toks": ["What", "is", "the", "average", "rating", "star", "for", "each", "reviewer", "?"], "guid": 7782}}
{"text": "film: Film_ID, Rank_in_series, Number_in_season, Title, Directed_by, Original_air_date, Production_code; cinema: Cinema_ID, Name, Openning_year, Capacity, Location; schedule: Cinema_ID, Film_ID, Date, Show_times_per_day, Price | Show name, opening year, and capacity for each cinema.", "sql": "SELECT name ,  openning_year ,  capacity FROM cinema", "example": {"db_id": "cinema", "query": "SELECT name ,  openning_year ,  capacity FROM cinema", "query_toks": ["SELECT", "name", ",", "openning_year", ",", "capacity", "FROM", "cinema"], "query_toks_no_value": ["select", "name", ",", "openning_year", ",", "capacity", "from", "cinema"], "question": "Show name, opening year, and capacity for each cinema.", "question_toks": ["Show", "name", ",", "opening", "year", ",", "and", "capacity", "for", "each", "cinema", "."], "guid": 7783}}
{"text": "TV_Channel: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option; TV_series: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel; Cartoon: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel | What is the number of cartoones written by Joseph Kuhr?", "sql": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";", "example": {"db_id": "tvshow", "query": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Cartoon", "WHERE", "Written_by", "=", "``", "Joseph", "Kuhr", "''", ";"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "cartoon", "where", "written_by", "=", "value"], "question": "What is the number of cartoones written by Joseph Kuhr?", "question_toks": ["What", "is", "the", "number", "of", "cartoones", "written", "by", "Joseph", "Kuhr", "?"], "guid": 7784}}
{"text": "TV_Channel: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option; TV_series: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel; Cartoon: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel | What is the pixel aspect ratio and country of origin for all TV channels that do not use English?", "sql": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'", "example": {"db_id": "tvshow", "query": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'", "query_toks": ["SELECT", "Pixel_aspect_ratio_PAR", ",", "country", "FROM", "tv_channel", "WHERE", "LANGUAGE", "!", "=", "'English", "'"], "query_toks_no_value": ["select", "pixel_aspect_ratio_par", ",", "country", "from", "tv_channel", "where", "language", "!", "=", "value"], "question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?", "question_toks": ["What", "is", "the", "pixel", "aspect", "ratio", "and", "country", "of", "origin", "for", "all", "TV", "channels", "that", "do", "not", "use", "English", "?"], "guid": 7785}}
{"text": "TV_Channel: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option; TV_series: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel; Cartoon: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel | How many different series and contents are listed in the TV Channel table?", "sql": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;", "example": {"db_id": "tvshow", "query": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;", "query_toks": ["SELECT", "count", "(", "DISTINCT", "series_name", ")", ",", "count", "(", "DISTINCT", "content", ")", "FROM", "TV_Channel", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "series_name", ")", ",", "count", "(", "distinct", "content", ")", "from", "tv_channel"], "question": "How many different series and contents are listed in the TV Channel table?", "question_toks": ["How", "many", "different", "series", "and", "contents", "are", "listed", "in", "the", "TV", "Channel", "table", "?"], "guid": 7786}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | List \" James Bond \" directors", "sql": "SELECT t2.name FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t3.title  =  \"James Bond\";", "example": {"db_id": "imdb", "query": "SELECT t2.name FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t3.title  =  \"James Bond\";", "query_toks": ["SELECT", "t2.name", "FROM", "director", "AS", "t2", "JOIN", "directed_by", "AS", "t1", "ON", "t2.did", "=", "t1.did", "JOIN", "movie", "AS", "t3", "ON", "t3.mid", "=", "t1.msid", "WHERE", "t3.title", "=", "``", "James", "Bond", "''", ";"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "director", "as", "t2", "join", "directed_by", "as", "t1", "on", "t2", ".", "did", "=", "t1", ".", "did", "join", "movie", "as", "t3", "on", "t3", ".", "mid", "=", "t1", ".", "msid", "where", "t3", ".", "title", "=", "value"], "question": "List \" James Bond \" directors", "question_toks": ["List", "``", "James", "Bond", "``", "directors"], "guid": 7787}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | What are all the movies directed by \" Asghar Farhadi \" featuring \" Taraneh Alidoosti \" ?", "sql": "SELECT t4.title FROM CAST AS t5 JOIN actor AS t1 ON t5.aid  =  t1.aid JOIN movie AS t4 ON t4.mid  =  t5.msid JOIN directed_by AS t2 ON t4.mid  =  t2.msid JOIN director AS t3 ON t3.did  =  t2.did WHERE t1.name  =  \"Taraneh Alidoosti\" AND t3.name  =  \"Asghar Farhadi\";", "example": {"db_id": "imdb", "query": "SELECT t4.title FROM CAST AS t5 JOIN actor AS t1 ON t5.aid  =  t1.aid JOIN movie AS t4 ON t4.mid  =  t5.msid JOIN directed_by AS t2 ON t4.mid  =  t2.msid JOIN director AS t3 ON t3.did  =  t2.did WHERE t1.name  =  \"Taraneh Alidoosti\" AND t3.name  =  \"Asghar Farhadi\";", "query_toks": ["SELECT", "t4.title", "FROM", "CAST", "AS", "t5", "JOIN", "actor", "AS", "t1", "ON", "t5.aid", "=", "t1.aid", "JOIN", "movie", "AS", "t4", "ON", "t4.mid", "=", "t5.msid", "JOIN", "directed_by", "AS", "t2", "ON", "t4.mid", "=", "t2.msid", "JOIN", "director", "AS", "t3", "ON", "t3.did", "=", "t2.did", "WHERE", "t1.name", "=", "``", "Taraneh", "Alidoosti", "''", "AND", "t3.name", "=", "``", "Asghar", "Farhadi", "''", ";"], "query_toks_no_value": ["select", "t4", ".", "title", "from", "cast", "as", "t5", "join", "actor", "as", "t1", "on", "t5", ".", "aid", "=", "t1", ".", "aid", "join", "movie", "as", "t4", "on", "t4", ".", "mid", "=", "t5", ".", "msid", "join", "directed_by", "as", "t2", "on", "t4", ".", "mid", "=", "t2", ".", "msid", "join", "director", "as", "t3", "on", "t3", ".", "did", "=", "t2", ".", "did", "where", "t1", ".", "name", "=", "value", "and", "t3", ".", "name", "=", "value"], "question": "What are all the movies directed by \" Asghar Farhadi \" featuring \" Taraneh Alidoosti \" ?", "question_toks": ["What", "are", "all", "the", "movies", "directed", "by", "``", "Asghar", "Farhadi", "``", "featuring", "``", "Taraneh", "Alidoosti", "``", "?"], "guid": 7788}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | For each director, what are the titles and ratings for all the movies they reviewed?", "sql": "SELECT T2.title ,  T1.stars ,  T2.director ,  max(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE director != \"null\" GROUP BY director", "example": {"db_id": "movie_1", "query": "SELECT T2.title ,  T1.stars ,  T2.director ,  max(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE director != \"null\" GROUP BY director", "query_toks": ["SELECT", "T2.title", ",", "T1.stars", ",", "T2.director", ",", "max", "(", "T1.stars", ")", "FROM", "Rating", "AS", "T1", "JOIN", "Movie", "AS", "T2", "ON", "T1.mID", "=", "T2.mID", "WHERE", "director", "!", "=", "``", "null", "''", "GROUP", "BY", "director"], "query_toks_no_value": ["select", "t2", ".", "title", ",", "t1", ".", "stars", ",", "t2", ".", "director", ",", "max", "(", "t1", ".", "stars", ")", "from", "rating", "as", "t1", "join", "movie", "as", "t2", "on", "t1", ".", "mid", "=", "t2", ".", "mid", "where", "director", "!", "=", "value", "group", "by", "director"], "question": "For each director, what are the titles and ratings for all the movies they reviewed?", "question_toks": ["For", "each", "director", ",", "what", "are", "the", "titles", "and", "ratings", "for", "all", "the", "movies", "they", "reviewed", "?"], "guid": 7789}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | Who is the writer of \" The Truman Show \"", "sql": "SELECT t2.name FROM written_by AS t3 JOIN movie AS t1 ON t3.msid  =  t1.mid JOIN writer AS t2 ON t3.wid  =  t2.wid WHERE t1.title  =  \"The Truman Show\";", "example": {"db_id": "imdb", "query": "SELECT t2.name FROM written_by AS t3 JOIN movie AS t1 ON t3.msid  =  t1.mid JOIN writer AS t2 ON t3.wid  =  t2.wid WHERE t1.title  =  \"The Truman Show\";", "query_toks": ["SELECT", "t2.name", "FROM", "written_by", "AS", "t3", "JOIN", "movie", "AS", "t1", "ON", "t3.msid", "=", "t1.mid", "JOIN", "writer", "AS", "t2", "ON", "t3.wid", "=", "t2.wid", "WHERE", "t1.title", "=", "``", "The", "Truman", "Show", "''", ";"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "written_by", "as", "t3", "join", "movie", "as", "t1", "on", "t3", ".", "msid", "=", "t1", ".", "mid", "join", "writer", "as", "t2", "on", "t3", ".", "wid", "=", "t2", ".", "wid", "where", "t1", ".", "title", "=", "value"], "question": "Who is the writer of \" The Truman Show \"", "question_toks": ["Who", "is", "the", "writer", "of", "``", "The", "Truman", "Show", "``"], "guid": 7790}}
{"text": "program: Program_ID, Name, Origin, Launch, Owner; channel: Channel_ID, Name, Owner, Share_in_percent, Rating_in_percent; broadcast: Channel_ID, Program_ID, Time_of_day; broadcast_share: Channel_ID, Program_ID, Date, Share_in_percent | find the program owners that have some programs in both morning and night time.", "sql": "SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  \"Morning\" INTERSECT SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  \"Night\"", "example": {"db_id": "program_share", "query": "SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  \"Morning\" INTERSECT SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  \"Night\"", "query_toks": ["SELECT", "t1.owner", "FROM", "program", "AS", "t1", "JOIN", "broadcast", "AS", "t2", "ON", "t1.program_id", "=", "t2.program_id", "WHERE", "t2.Time_of_day", "=", "``", "Morning", "''", "INTERSECT", "SELECT", "t1.owner", "FROM", "program", "AS", "t1", "JOIN", "broadcast", "AS", "t2", "ON", "t1.program_id", "=", "t2.program_id", "WHERE", "t2.Time_of_day", "=", "``", "Night", "''"], "query_toks_no_value": ["select", "t1", ".", "owner", "from", "program", "as", "t1", "join", "broadcast", "as", "t2", "on", "t1", ".", "program_id", "=", "t2", ".", "program_id", "where", "t2", ".", "time_of_day", "=", "value", "intersect", "select", "t1", ".", "owner", "from", "program", "as", "t1", "join", "broadcast", "as", "t2", "on", "t1", ".", "program_id", "=", "t2", ".", "program_id", "where", "t2", ".", "time_of_day", "=", "value"], "question": "find the program owners that have some programs in both morning and night time.", "question_toks": ["find", "the", "program", "owners", "that", "have", "some", "programs", "in", "both", "morning", "and", "night", "time", "."], "guid": 7791}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | Return all reviewer names and movie names together in a single list.", "sql": "SELECT name FROM Reviewer UNION SELECT title FROM Movie", "example": {"db_id": "movie_1", "query": "SELECT name FROM Reviewer UNION SELECT title FROM Movie", "query_toks": ["SELECT", "name", "FROM", "Reviewer", "UNION", "SELECT", "title", "FROM", "Movie"], "query_toks_no_value": ["select", "name", "from", "reviewer", "union", "select", "title", "from", "movie"], "question": "Return all reviewer names and movie names together in a single list.", "question_toks": ["Return", "all", "reviewer", "names", "and", "movie", "names", "together", "in", "a", "single", "list", "."], "guid": 7792}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | What is the number of actors in the movie \" Saving Private Ryan \" ?", "sql": "SELECT COUNT ( DISTINCT t1.name  ) FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t3.title  =  \"Saving Private Ryan\";", "example": {"db_id": "imdb", "query": "SELECT COUNT ( DISTINCT t1.name  ) FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t3.title  =  \"Saving Private Ryan\";", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "t1.name", ")", "FROM", "CAST", "AS", "t2", "JOIN", "actor", "AS", "t1", "ON", "t2.aid", "=", "t1.aid", "JOIN", "movie", "AS", "t3", "ON", "t3.mid", "=", "t2.msid", "WHERE", "t3.title", "=", "``", "Saving", "Private", "Ryan", "''", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "t1", ".", "name", ")", "from", "cast", "as", "t2", "join", "actor", "as", "t1", "on", "t2", ".", "aid", "=", "t1", ".", "aid", "join", "movie", "as", "t3", "on", "t3", ".", "mid", "=", "t2", ".", "msid", "where", "t3", ".", "title", "=", "value"], "question": "What is the number of actors in the movie \" Saving Private Ryan \" ?", "question_toks": ["What", "is", "the", "number", "of", "actors", "in", "the", "movie", "``", "Saving", "Private", "Ryan", "``", "?"], "guid": 7793}}
{"text": "program: Program_ID, Name, Origin, Launch, Owner; channel: Channel_ID, Name, Owner, Share_in_percent, Rating_in_percent; broadcast: Channel_ID, Program_ID, Time_of_day; broadcast_share: Channel_ID, Program_ID, Date, Share_in_percent | Which program was launched most recently? Return the program name.", "sql": "SELECT name FROM program ORDER BY launch DESC LIMIT 1", "example": {"db_id": "program_share", "query": "SELECT name FROM program ORDER BY launch DESC LIMIT 1", "query_toks": ["SELECT", "name", "FROM", "program", "ORDER", "BY", "launch", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "name", "from", "program", "order", "by", "launch", "desc", "limit", "value"], "question": "Which program was launched most recently? Return the program name.", "question_toks": ["Which", "program", "was", "launched", "most", "recently", "?", "Return", "the", "program", "name", "."], "guid": 7794}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | Who is the writer of the movie \" The Truman Show \"", "sql": "SELECT t2.name FROM written_by AS t3 JOIN movie AS t1 ON t3.msid  =  t1.mid JOIN writer AS t2 ON t3.wid  =  t2.wid WHERE t1.title  =  \"The Truman Show\";", "example": {"db_id": "imdb", "query": "SELECT t2.name FROM written_by AS t3 JOIN movie AS t1 ON t3.msid  =  t1.mid JOIN writer AS t2 ON t3.wid  =  t2.wid WHERE t1.title  =  \"The Truman Show\";", "query_toks": ["SELECT", "t2.name", "FROM", "written_by", "AS", "t3", "JOIN", "movie", "AS", "t1", "ON", "t3.msid", "=", "t1.mid", "JOIN", "writer", "AS", "t2", "ON", "t3.wid", "=", "t2.wid", "WHERE", "t1.title", "=", "``", "The", "Truman", "Show", "''", ";"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "written_by", "as", "t3", "join", "movie", "as", "t1", "on", "t3", ".", "msid", "=", "t1", ".", "mid", "join", "writer", "as", "t2", "on", "t3", ".", "wid", "=", "t2", ".", "wid", "where", "t1", ".", "title", "=", "value"], "question": "Who is the writer of the movie \" The Truman Show \"", "question_toks": ["Who", "is", "the", "writer", "of", "the", "movie", "``", "The", "Truman", "Show", "``"], "guid": 7795}}
{"text": "TV_Channel: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option; TV_series: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel; Cartoon: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel | What is the content of TV Channel with serial name \"Sky Radio\"?", "sql": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";", "example": {"db_id": "tvshow", "query": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";", "query_toks": ["SELECT", "Content", "FROM", "TV_Channel", "WHERE", "series_name", "=", "``", "Sky", "Radio", "''", ";"], "query_toks_no_value": ["select", "content", "from", "tv_channel", "where", "series_name", "=", "value"], "question": "What is the content of TV Channel with serial name \"Sky Radio\"?", "question_toks": ["What", "is", "the", "content", "of", "TV", "Channel", "with", "serial", "name", "``", "Sky", "Radio", "''", "?"], "guid": 7796}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | Find all the female actors born in \" New York City \" after 1980", "sql": "SELECT name FROM actor WHERE birth_city  =  \"New York City\" AND birth_year  >  1980 AND gender  =  \"female\";", "example": {"db_id": "imdb", "query": "SELECT name FROM actor WHERE birth_city  =  \"New York City\" AND birth_year  >  1980 AND gender  =  \"female\";", "query_toks": ["SELECT", "name", "FROM", "actor", "WHERE", "birth_city", "=", "``", "New", "York", "City", "''", "AND", "birth_year", ">", "1980", "AND", "gender", "=", "``", "female", "''", ";"], "query_toks_no_value": ["select", "name", "from", "actor", "where", "birth_city", "=", "value", "and", "birth_year", ">", "value", "and", "gender", "=", "value"], "question": "Find all the female actors born in \" New York City \" after 1980", "question_toks": ["Find", "all", "the", "female", "actors", "born", "in", "``", "New", "York", "City", "``", "after", "1980"], "guid": 7797}}
{"text": "TV_Channel: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option; TV_series: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel; Cartoon: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel | How many TV Channels use the English language?", "sql": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";", "example": {"db_id": "tvshow", "query": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "TV_Channel", "WHERE", "LANGUAGE", "=", "``", "English", "''", ";"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "tv_channel", "where", "language", "=", "value"], "question": "How many TV Channels use the English language?", "question_toks": ["How", "many", "TV", "Channels", "use", "the", "English", "language", "?"], "guid": 7798}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | How many movie ratings have more than 3 stars?", "sql": "SELECT count(*) FROM Rating WHERE stars  >  3", "example": {"db_id": "movie_1", "query": "SELECT count(*) FROM Rating WHERE stars  >  3", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Rating", "WHERE", "stars", ">", "3"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "rating", "where", "stars", ">", "value"], "question": "How many movie ratings have more than 3 stars?", "question_toks": ["How", "many", "movie", "ratings", "have", "more", "than", "3", "stars", "?"], "guid": 7799}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | Find the names of reviewers who had given higher than 3 star ratings.", "sql": "SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  >  3", "example": {"db_id": "movie_1", "query": "SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  >  3", "query_toks": ["SELECT", "T2.name", "FROM", "Rating", "AS", "T1", "JOIN", "Reviewer", "AS", "T2", "ON", "T1.rID", "=", "T2.rID", "WHERE", "T1.stars", ">", "3"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "rating", "as", "t1", "join", "reviewer", "as", "t2", "on", "t1", ".", "rid", "=", "t2", ".", "rid", "where", "t1", ".", "stars", ">", "value"], "question": "Find the names of reviewers who had given higher than 3 star ratings.", "question_toks": ["Find", "the", "names", "of", "reviewers", "who", "had", "given", "higher", "than", "3", "star", "ratings", "."], "guid": 7800}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | In what years did a movie receive a 4 or 5 star rating, and list the years from oldest to most recently?", "sql": "SELECT DISTINCT YEAR FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID WHERE T2.stars  >=  4 ORDER BY T1.year", "example": {"db_id": "movie_1", "query": "SELECT DISTINCT YEAR FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID WHERE T2.stars  >=  4 ORDER BY T1.year", "query_toks": ["SELECT", "DISTINCT", "YEAR", "FROM", "Movie", "AS", "T1", "JOIN", "Rating", "AS", "T2", "ON", "T1.mID", "=", "T2.mID", "WHERE", "T2.stars", ">", "=", "4", "ORDER", "BY", "T1.year"], "query_toks_no_value": ["select", "distinct", "year", "from", "movie", "as", "t1", "join", "rating", "as", "t2", "on", "t1", ".", "mid", "=", "t2", ".", "mid", "where", "t2", ".", "stars", ">", "=", "value", "order", "by", "t1", ".", "year"], "question": "In what years did a movie receive a 4 or 5 star rating, and list the years from oldest to most recently?", "question_toks": ["In", "what", "years", "did", "a", "movie", "receive", "a", "4", "or", "5", "star", "rating", ",", "and", "list", "the", "years", "from", "oldest", "to", "most", "recently", "?"], "guid": 7801}}
{"text": "TV_Channel: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option; TV_series: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel; Cartoon: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel | Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?", "sql": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'", "example": {"db_id": "tvshow", "query": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'", "query_toks": ["SELECT", "T1.series_name", ",", "T1.country", "FROM", "TV_Channel", "AS", "T1", "JOIN", "cartoon", "AS", "T2", "ON", "T1.id", "=", "T2.Channel", "WHERE", "T2.directed_by", "=", "'Michael", "Chang", "'", "INTERSECT", "SELECT", "T1.series_name", ",", "T1.country", "FROM", "TV_Channel", "AS", "T1", "JOIN", "cartoon", "AS", "T2", "ON", "T1.id", "=", "T2.Channel", "WHERE", "T2.directed_by", "=", "'Ben", "Jones", "'"], "query_toks_no_value": ["select", "t1", ".", "series_name", ",", "t1", ".", "country", "from", "tv_channel", "as", "t1", "join", "cartoon", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "channel", "where", "t2", ".", "directed_by", "=", "value", "intersect", "select", "t1", ".", "series_name", ",", "t1", ".", "country", "from", "tv_channel", "as", "t1", "join", "cartoon", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "channel", "where", "t2", ".", "directed_by", "=", "value"], "question": "Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?", "question_toks": ["Find", "the", "series", "name", "and", "country", "of", "the", "tv", "channel", "that", "is", "playing", "some", "cartoons", "directed", "by", "Ben", "Jones", "and", "Michael", "Chang", "?"], "guid": 7802}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | Find all movies featuring \" Woody Strode \" and \" Jason Robards \"", "sql": "SELECT t4.title FROM CAST AS t5 JOIN actor AS t1 ON t5.aid  =  t1.aid JOIN movie AS t4 ON t4.mid  =  t5.msid JOIN CAST AS t3 ON t4.mid  =  t3.msid JOIN actor AS t2 ON t3.aid  =  t2.aid WHERE t1.name  =  \"Woody Strode\" AND t2.name  =  \"Jason Robards\";", "example": {"db_id": "imdb", "query": "SELECT t4.title FROM CAST AS t5 JOIN actor AS t1 ON t5.aid  =  t1.aid JOIN movie AS t4 ON t4.mid  =  t5.msid JOIN CAST AS t3 ON t4.mid  =  t3.msid JOIN actor AS t2 ON t3.aid  =  t2.aid WHERE t1.name  =  \"Woody Strode\" AND t2.name  =  \"Jason Robards\";", "query_toks": ["SELECT", "t4.title", "FROM", "CAST", "AS", "t5", "JOIN", "actor", "AS", "t1", "ON", "t5.aid", "=", "t1.aid", "JOIN", "movie", "AS", "t4", "ON", "t4.mid", "=", "t5.msid", "JOIN", "CAST", "AS", "t3", "ON", "t4.mid", "=", "t3.msid", "JOIN", "actor", "AS", "t2", "ON", "t3.aid", "=", "t2.aid", "WHERE", "t1.name", "=", "``", "Woody", "Strode", "''", "AND", "t2.name", "=", "``", "Jason", "Robards", "''", ";"], "query_toks_no_value": ["select", "t4", ".", "title", "from", "cast", "as", "t5", "join", "actor", "as", "t1", "on", "t5", ".", "aid", "=", "t1", ".", "aid", "join", "movie", "as", "t4", "on", "t4", ".", "mid", "=", "t5", ".", "msid", "join", "cast", "as", "t3", "on", "t4", ".", "mid", "=", "t3", ".", "msid", "join", "actor", "as", "t2", "on", "t3", ".", "aid", "=", "t2", ".", "aid", "where", "t1", ".", "name", "=", "value", "and", "t2", ".", "name", "=", "value"], "question": "Find all movies featuring \" Woody Strode \" and \" Jason Robards \"", "question_toks": ["Find", "all", "movies", "featuring", "``", "Woody", "Strode", "``", "and", "``", "Jason", "Robards", "``"], "guid": 7803}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | What are the names of the reviewers who have rated a movie more than 3 stars before?", "sql": "SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  >  3", "example": {"db_id": "movie_1", "query": "SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  >  3", "query_toks": ["SELECT", "T2.name", "FROM", "Rating", "AS", "T1", "JOIN", "Reviewer", "AS", "T2", "ON", "T1.rID", "=", "T2.rID", "WHERE", "T1.stars", ">", "3"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "rating", "as", "t1", "join", "reviewer", "as", "t2", "on", "t1", ".", "rid", "=", "t2", ".", "rid", "where", "t1", ".", "stars", ">", "value"], "question": "What are the names of the reviewers who have rated a movie more than 3 stars before?", "question_toks": ["What", "are", "the", "names", "of", "the", "reviewers", "who", "have", "rated", "a", "movie", "more", "than", "3", "stars", "before", "?"], "guid": 7804}}
{"text": "film: Film_ID, Rank_in_series, Number_in_season, Title, Directed_by, Original_air_date, Production_code; cinema: Cinema_ID, Name, Openning_year, Capacity, Location; schedule: Cinema_ID, Film_ID, Date, Show_times_per_day, Price | Show director with the largest number of show times in total.", "sql": "SELECT T2.directed_by FROM schedule AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T2.directed_by ORDER BY sum(T1.show_times_per_day) DESC LIMIT 1", "example": {"db_id": "cinema", "query": "SELECT T2.directed_by FROM schedule AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T2.directed_by ORDER BY sum(T1.show_times_per_day) DESC LIMIT 1", "query_toks": ["SELECT", "T2.directed_by", "FROM", "schedule", "AS", "T1", "JOIN", "film", "AS", "T2", "ON", "T1.film_id", "=", "T2.film_id", "GROUP", "BY", "T2.directed_by", "ORDER", "BY", "sum", "(", "T1.show_times_per_day", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "directed_by", "from", "schedule", "as", "t1", "join", "film", "as", "t2", "on", "t1", ".", "film_id", "=", "t2", ".", "film_id", "group", "by", "t2", ".", "directed_by", "order", "by", "sum", "(", "t1", ".", "show_times_per_day", ")", "desc", "limit", "value"], "question": "Show director with the largest number of show times in total.", "question_toks": ["Show", "director", "with", "the", "largest", "number", "of", "show", "times", "in", "total", "."], "guid": 7805}}
{"text": "program: Program_ID, Name, Origin, Launch, Owner; channel: Channel_ID, Name, Owner, Share_in_percent, Rating_in_percent; broadcast: Channel_ID, Program_ID, Time_of_day; broadcast_share: Channel_ID, Program_ID, Date, Share_in_percent | what are the names of the channels that broadcast in both morning and night?", "sql": "SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Morning' INTERSECT SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Night'", "example": {"db_id": "program_share", "query": "SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Morning' INTERSECT SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Night'", "query_toks": ["SELECT", "t1.name", "FROM", "channel", "AS", "t1", "JOIN", "broadcast", "AS", "t2", "ON", "t1.channel_id", "=", "t2.channel_id", "WHERE", "t2.time_of_day", "=", "'Morning", "'", "INTERSECT", "SELECT", "t1.name", "FROM", "channel", "AS", "t1", "JOIN", "broadcast", "AS", "t2", "ON", "t1.channel_id", "=", "t2.channel_id", "WHERE", "t2.time_of_day", "=", "'Night", "'"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "channel", "as", "t1", "join", "broadcast", "as", "t2", "on", "t1", ".", "channel_id", "=", "t2", ".", "channel_id", "where", "t2", ".", "time_of_day", "=", "value", "intersect", "select", "t1", ".", "name", "from", "channel", "as", "t1", "join", "broadcast", "as", "t2", "on", "t1", ".", "channel_id", "=", "t2", ".", "channel_id", "where", "t2", ".", "time_of_day", "=", "value"], "question": "what are the names of the channels that broadcast in both morning and night?", "question_toks": ["what", "are", "the", "names", "of", "the", "channels", "that", "broadcast", "in", "both", "morning", "and", "night", "?"], "guid": 7806}}
{"text": "program: Program_ID, Name, Origin, Launch, Owner; channel: Channel_ID, Name, Owner, Share_in_percent, Rating_in_percent; broadcast: Channel_ID, Program_ID, Time_of_day; broadcast_share: Channel_ID, Program_ID, Date, Share_in_percent | Count the number of distinct channel owners.", "sql": "SELECT count(DISTINCT OWNER) FROM channel", "example": {"db_id": "program_share", "query": "SELECT count(DISTINCT OWNER) FROM channel", "query_toks": ["SELECT", "count", "(", "DISTINCT", "OWNER", ")", "FROM", "channel"], "query_toks_no_value": ["select", "count", "(", "distinct", "owner", ")", "from", "channel"], "question": "Count the number of distinct channel owners.", "question_toks": ["Count", "the", "number", "of", "distinct", "channel", "owners", "."], "guid": 7807}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | What is the average rating for each movie that has never been reviewed by Brittany Harris?", "sql": "SELECT mID ,  avg(stars) FROM Rating WHERE mID NOT IN (SELECT T1.mID FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T2.name  =  \"Brittany Harris\") GROUP BY mID", "example": {"db_id": "movie_1", "query": "SELECT mID ,  avg(stars) FROM Rating WHERE mID NOT IN (SELECT T1.mID FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T2.name  =  \"Brittany Harris\") GROUP BY mID", "query_toks": ["SELECT", "mID", ",", "avg", "(", "stars", ")", "FROM", "Rating", "WHERE", "mID", "NOT", "IN", "(", "SELECT", "T1.mID", "FROM", "Rating", "AS", "T1", "JOIN", "Reviewer", "AS", "T2", "ON", "T1.rID", "=", "T2.rID", "WHERE", "T2.name", "=", "``", "Brittany", "Harris", "''", ")", "GROUP", "BY", "mID"], "query_toks_no_value": ["select", "mid", ",", "avg", "(", "stars", ")", "from", "rating", "where", "mid", "not", "in", "(", "select", "t1", ".", "mid", "from", "rating", "as", "t1", "join", "reviewer", "as", "t2", "on", "t1", ".", "rid", "=", "t2", ".", "rid", "where", "t2", ".", "name", "=", "value", ")", "group", "by", "mid"], "question": "What is the average rating for each movie that has never been reviewed by Brittany Harris?", "question_toks": ["What", "is", "the", "average", "rating", "for", "each", "movie", "that", "has", "never", "been", "reviewed", "by", "Brittany", "Harris", "?"], "guid": 7808}}
{"text": "film: Film_ID, Rank_in_series, Number_in_season, Title, Directed_by, Original_air_date, Production_code; cinema: Cinema_ID, Name, Openning_year, Capacity, Location; schedule: Cinema_ID, Film_ID, Date, Show_times_per_day, Price | How many cinema do we have?", "sql": "SELECT count(*) FROM cinema", "example": {"db_id": "cinema", "query": "SELECT count(*) FROM cinema", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "cinema"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "cinema"], "question": "How many cinema do we have?", "question_toks": ["How", "many", "cinema", "do", "we", "have", "?"], "guid": 7809}}
{"text": "film: Film_ID, Rank_in_series, Number_in_season, Title, Directed_by, Original_air_date, Production_code; cinema: Cinema_ID, Name, Openning_year, Capacity, Location; schedule: Cinema_ID, Film_ID, Date, Show_times_per_day, Price | What are all the locations with a cinema?", "sql": "SELECT DISTINCT LOCATION FROM cinema", "example": {"db_id": "cinema", "query": "SELECT DISTINCT LOCATION FROM cinema", "query_toks": ["SELECT", "DISTINCT", "LOCATION", "FROM", "cinema"], "query_toks_no_value": ["select", "distinct", "location", "from", "cinema"], "question": "What are all the locations with a cinema?", "question_toks": ["What", "are", "all", "the", "locations", "with", "a", "cinema", "?"], "guid": 7810}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | What are the titles and directors of all movies that have a rating higher than the average James Cameron film rating?", "sql": "SELECT T2.title ,  T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  >  (SELECT avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.director  =  \"James Cameron\")", "example": {"db_id": "movie_1", "query": "SELECT T2.title ,  T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  >  (SELECT avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.director  =  \"James Cameron\")", "query_toks": ["SELECT", "T2.title", ",", "T2.director", "FROM", "Rating", "AS", "T1", "JOIN", "Movie", "AS", "T2", "ON", "T1.mID", "=", "T2.mID", "WHERE", "T1.stars", ">", "(", "SELECT", "avg", "(", "T1.stars", ")", "FROM", "Rating", "AS", "T1", "JOIN", "Movie", "AS", "T2", "ON", "T1.mID", "=", "T2.mID", "WHERE", "T2.director", "=", "``", "James", "Cameron", "''", ")"], "query_toks_no_value": ["select", "t2", ".", "title", ",", "t2", ".", "director", "from", "rating", "as", "t1", "join", "movie", "as", "t2", "on", "t1", ".", "mid", "=", "t2", ".", "mid", "where", "t1", ".", "stars", ">", "(", "select", "avg", "(", "t1", ".", "stars", ")", "from", "rating", "as", "t1", "join", "movie", "as", "t2", "on", "t1", ".", "mid", "=", "t2", ".", "mid", "where", "t2", ".", "director", "=", "value", ")"], "question": "What are the titles and directors of all movies that have a rating higher than the average James Cameron film rating?", "question_toks": ["What", "are", "the", "titles", "and", "directors", "of", "all", "movies", "that", "have", "a", "rating", "higher", "than", "the", "average", "James", "Cameron", "film", "rating", "?"], "guid": 7811}}
{"text": "TV_Channel: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option; TV_series: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel; Cartoon: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel | What are the languages used by the least number of TV Channels and how many channels use it?", "sql": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;", "example": {"db_id": "tvshow", "query": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;", "query_toks": ["SELECT", "LANGUAGE", ",", "count", "(", "*", ")", "FROM", "TV_Channel", "GROUP", "BY", "LANGUAGE", "ORDER", "BY", "count", "(", "*", ")", "ASC", "LIMIT", "1", ";"], "query_toks_no_value": ["select", "language", ",", "count", "(", "*", ")", "from", "tv_channel", "group", "by", "language", "order", "by", "count", "(", "*", ")", "asc", "limit", "value"], "question": "What are the languages used by the least number of TV Channels and how many channels use it?", "question_toks": ["What", "are", "the", "languages", "used", "by", "the", "least", "number", "of", "TV", "Channels", "and", "how", "many", "channels", "use", "it", "?"], "guid": 7812}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | Find all movies about nuclear weapons", "sql": "SELECT t3.title FROM tags AS t2 JOIN keyword AS t1 ON t2.kid  =  t1.id JOIN movie AS t3 ON t2.msid  =  t3.mid WHERE t1.keyword  =  \"nuclear weapons\";", "example": {"db_id": "imdb", "query": "SELECT t3.title FROM tags AS t2 JOIN keyword AS t1 ON t2.kid  =  t1.id JOIN movie AS t3 ON t2.msid  =  t3.mid WHERE t1.keyword  =  \"nuclear weapons\";", "query_toks": ["SELECT", "t3.title", "FROM", "tags", "AS", "t2", "JOIN", "keyword", "AS", "t1", "ON", "t2.kid", "=", "t1.id", "JOIN", "movie", "AS", "t3", "ON", "t2.msid", "=", "t3.mid", "WHERE", "t1.keyword", "=", "``", "nuclear", "weapons", "''", ";"], "query_toks_no_value": ["select", "t3", ".", "title", "from", "tags", "as", "t2", "join", "keyword", "as", "t1", "on", "t2", ".", "kid", "=", "t1", ".", "id", "join", "movie", "as", "t3", "on", "t2", ".", "msid", "=", "t3", ".", "mid", "where", "t1", ".", "keyword", "=", "value"], "question": "Find all movies about nuclear weapons", "question_toks": ["Find", "all", "movies", "about", "nuclear", "weapons"], "guid": 7813}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | How many movies did \" Steven Spielberg \" direct ?", "sql": "SELECT COUNT ( DISTINCT t3.title  ) FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.name  =  \"Steven Spielberg\";", "example": {"db_id": "imdb", "query": "SELECT COUNT ( DISTINCT t3.title  ) FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.name  =  \"Steven Spielberg\";", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "t3.title", ")", "FROM", "director", "AS", "t2", "JOIN", "directed_by", "AS", "t1", "ON", "t2.did", "=", "t1.did", "JOIN", "movie", "AS", "t3", "ON", "t3.mid", "=", "t1.msid", "WHERE", "t2.name", "=", "``", "Steven", "Spielberg", "''", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "t3", ".", "title", ")", "from", "director", "as", "t2", "join", "directed_by", "as", "t1", "on", "t2", ".", "did", "=", "t1", ".", "did", "join", "movie", "as", "t3", "on", "t3", ".", "mid", "=", "t1", ".", "msid", "where", "t2", ".", "name", "=", "value"], "question": "How many movies did \" Steven Spielberg \" direct ?", "question_toks": ["How", "many", "movies", "did", "``", "Steven", "Spielberg", "``", "direct", "?"], "guid": 7814}}
{"text": "TV_Channel: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option; TV_series: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel; Cartoon: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel | What is the country with the most number of TV Channels and how many does it have?", "sql": "SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;", "example": {"db_id": "tvshow", "query": "SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;", "query_toks": ["SELECT", "Country", ",", "count", "(", "*", ")", "FROM", "TV_Channel", "GROUP", "BY", "Country", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1", ";"], "query_toks_no_value": ["select", "country", ",", "count", "(", "*", ")", "from", "tv_channel", "group", "by", "country", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the country with the most number of TV Channels and how many does it have?", "question_toks": ["What", "is", "the", "country", "with", "the", "most", "number", "of", "TV", "Channels", "and", "how", "many", "does", "it", "have", "?"], "guid": 7815}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | What is the title of the newest movie?", "sql": "SELECT title FROM Movie WHERE YEAR  =  (SELECT max(YEAR) FROM Movie)", "example": {"db_id": "movie_1", "query": "SELECT title FROM Movie WHERE YEAR  =  (SELECT max(YEAR) FROM Movie)", "query_toks": ["SELECT", "title", "FROM", "Movie", "WHERE", "YEAR", "=", "(", "SELECT", "max", "(", "YEAR", ")", "FROM", "Movie", ")"], "query_toks_no_value": ["select", "title", "from", "movie", "where", "year", "=", "(", "select", "max", "(", "year", ")", "from", "movie", ")"], "question": "What is the title of the newest movie?", "question_toks": ["What", "is", "the", "title", "of", "the", "newest", "movie", "?"], "guid": 7816}}
{"text": "film: Film_ID, Title, Studio, Director, Gross_in_dollar; market: Market_ID, Country, Number_cities; film_market_estimation: Estimation_ID, Low_Estimate, High_Estimate, Film_ID, Type, Market_ID, Year | What is the average number of cities of markets with low film market estimate bigger than 10000?", "sql": "SELECT avg(T2.Number_cities) FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID WHERE T1.Low_Estimate  >  10000", "example": {"db_id": "film_rank", "query": "SELECT avg(T2.Number_cities) FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID WHERE T1.Low_Estimate  >  10000", "query_toks": ["SELECT", "avg", "(", "T2.Number_cities", ")", "FROM", "film_market_estimation", "AS", "T1", "JOIN", "market", "AS", "T2", "ON", "T1.Market_ID", "=", "T2.Market_ID", "WHERE", "T1.Low_Estimate", ">", "10000"], "query_toks_no_value": ["select", "avg", "(", "t2", ".", "number_cities", ")", "from", "film_market_estimation", "as", "t1", "join", "market", "as", "t2", "on", "t1", ".", "market_id", "=", "t2", ".", "market_id", "where", "t1", ".", "low_estimate", ">", "value"], "question": "What is the average number of cities of markets with low film market estimate bigger than 10000?", "question_toks": ["What", "is", "the", "average", "number", "of", "cities", "of", "markets", "with", "low", "film", "market", "estimate", "bigger", "than", "10000", "?"], "guid": 7817}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | Who was the director of the movie Joy from 2015 ?", "sql": "SELECT t2.name FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t3.release_year  =  2015 AND t3.title  =  \"Joy\";", "example": {"db_id": "imdb", "query": "SELECT t2.name FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t3.release_year  =  2015 AND t3.title  =  \"Joy\";", "query_toks": ["SELECT", "t2.name", "FROM", "director", "AS", "t2", "JOIN", "directed_by", "AS", "t1", "ON", "t2.did", "=", "t1.did", "JOIN", "movie", "AS", "t3", "ON", "t3.mid", "=", "t1.msid", "WHERE", "t3.release_year", "=", "2015", "AND", "t3.title", "=", "``", "Joy", "''", ";"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "director", "as", "t2", "join", "directed_by", "as", "t1", "on", "t2", ".", "did", "=", "t1", ".", "did", "join", "movie", "as", "t3", "on", "t3", ".", "mid", "=", "t1", ".", "msid", "where", "t3", ".", "release_year", "=", "value", "and", "t3", ".", "title", "=", "value"], "question": "Who was the director of the movie Joy from 2015 ?", "question_toks": ["Who", "was", "the", "director", "of", "the", "movie", "Joy", "from", "2015", "?"], "guid": 7818}}
{"text": "festival_detail: Festival_ID, Festival_Name, Chair_Name, Location, Year, Num_of_Audience; artwork: Artwork_ID, Type, Name; nomination: Artwork_ID, Festival_ID, Result | Show the id, name of each festival and the number of artworks it has nominated.", "sql": "SELECT T1.Festival_ID ,  T3.Festival_Name ,  COUNT(*) FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID GROUP BY T1.Festival_ID", "example": {"db_id": "entertainment_awards", "query": "SELECT T1.Festival_ID ,  T3.Festival_Name ,  COUNT(*) FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID GROUP BY T1.Festival_ID", "query_toks": ["SELECT", "T1.Festival_ID", ",", "T3.Festival_Name", ",", "COUNT", "(", "*", ")", "FROM", "nomination", "AS", "T1", "JOIN", "artwork", "AS", "T2", "ON", "T1.Artwork_ID", "=", "T2.Artwork_ID", "JOIN", "festival_detail", "AS", "T3", "ON", "T1.Festival_ID", "=", "T3.Festival_ID", "GROUP", "BY", "T1.Festival_ID"], "query_toks_no_value": ["select", "t1", ".", "festival_id", ",", "t3", ".", "festival_name", ",", "count", "(", "*", ")", "from", "nomination", "as", "t1", "join", "artwork", "as", "t2", "on", "t1", ".", "artwork_id", "=", "t2", ".", "artwork_id", "join", "festival_detail", "as", "t3", "on", "t1", ".", "festival_id", "=", "t3", ".", "festival_id", "group", "by", "t1", ".", "festival_id"], "question": "Show the id, name of each festival and the number of artworks it has nominated.", "question_toks": ["Show", "the", "id", ",", "name", "of", "each", "festival", "and", "the", "number", "of", "artworks", "it", "has", "nominated", "."], "guid": 7819}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | Which movies did \" Alfred Hitchcock \" direct ?", "sql": "SELECT t3.title FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.name  =  \"Alfred Hitchcock\";", "example": {"db_id": "imdb", "query": "SELECT t3.title FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.name  =  \"Alfred Hitchcock\";", "query_toks": ["SELECT", "t3.title", "FROM", "director", "AS", "t2", "JOIN", "directed_by", "AS", "t1", "ON", "t2.did", "=", "t1.did", "JOIN", "movie", "AS", "t3", "ON", "t3.mid", "=", "t1.msid", "WHERE", "t2.name", "=", "``", "Alfred", "Hitchcock", "''", ";"], "query_toks_no_value": ["select", "t3", ".", "title", "from", "director", "as", "t2", "join", "directed_by", "as", "t1", "on", "t2", ".", "did", "=", "t1", ".", "did", "join", "movie", "as", "t3", "on", "t3", ".", "mid", "=", "t1", ".", "msid", "where", "t2", ".", "name", "=", "value"], "question": "Which movies did \" Alfred Hitchcock \" direct ?", "question_toks": ["Which", "movies", "did", "``", "Alfred", "Hitchcock", "``", "direct", "?"], "guid": 7820}}
{"text": "film: Film_ID, Rank_in_series, Number_in_season, Title, Directed_by, Original_air_date, Production_code; cinema: Cinema_ID, Name, Openning_year, Capacity, Location; schedule: Cinema_ID, Film_ID, Date, Show_times_per_day, Price | Count the number of films whose title contains the word 'Dummy'.", "sql": "SELECT count(*) FROM film WHERE title LIKE \"%Dummy%\"", "example": {"db_id": "cinema", "query": "SELECT count(*) FROM film WHERE title LIKE \"%Dummy%\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "film", "WHERE", "title", "LIKE", "``", "%", "Dummy", "%", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "film", "where", "title", "like", "value"], "question": "Count the number of films whose title contains the word 'Dummy'.", "question_toks": ["Count", "the", "number", "of", "films", "whose", "title", "contains", "the", "word", "'Dummy", "'", "."], "guid": 7821}}
{"text": "film: Film_ID, Title, Studio, Director, Gross_in_dollar; market: Market_ID, Country, Number_cities; film_market_estimation: Estimation_ID, Low_Estimate, High_Estimate, Film_ID, Type, Market_ID, Year | Show the studios that have produced films with director \"Nicholas Meyer\" and \"Walter Hill\".", "sql": "SELECT Studio FROM film WHERE Director  =  \"Nicholas Meyer\" INTERSECT SELECT Studio FROM film WHERE Director  =  \"Walter Hill\"", "example": {"db_id": "film_rank", "query": "SELECT Studio FROM film WHERE Director  =  \"Nicholas Meyer\" INTERSECT SELECT Studio FROM film WHERE Director  =  \"Walter Hill\"", "query_toks": ["SELECT", "Studio", "FROM", "film", "WHERE", "Director", "=", "``", "Nicholas", "Meyer", "''", "INTERSECT", "SELECT", "Studio", "FROM", "film", "WHERE", "Director", "=", "``", "Walter", "Hill", "''"], "query_toks_no_value": ["select", "studio", "from", "film", "where", "director", "=", "value", "intersect", "select", "studio", "from", "film", "where", "director", "=", "value"], "question": "Show the studios that have produced films with director \"Nicholas Meyer\" and \"Walter Hill\".", "question_toks": ["Show", "the", "studios", "that", "have", "produced", "films", "with", "director", "``", "Nicholas", "Meyer", "''", "and", "``", "Walter", "Hill", "''", "."], "guid": 7822}}
{"text": "program: Program_ID, Name, Origin, Launch, Owner; channel: Channel_ID, Name, Owner, Share_in_percent, Rating_in_percent; broadcast: Channel_ID, Program_ID, Time_of_day; broadcast_share: Channel_ID, Program_ID, Date, Share_in_percent | Which programs are never broadcasted in the morning? Give me the names of the programs.", "sql": "SELECT name FROM program EXCEPT SELECT t1.name FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  \"Morning\"", "example": {"db_id": "program_share", "query": "SELECT name FROM program EXCEPT SELECT t1.name FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  \"Morning\"", "query_toks": ["SELECT", "name", "FROM", "program", "EXCEPT", "SELECT", "t1.name", "FROM", "program", "AS", "t1", "JOIN", "broadcast", "AS", "t2", "ON", "t1.program_id", "=", "t2.program_id", "WHERE", "t2.Time_of_day", "=", "``", "Morning", "''"], "query_toks_no_value": ["select", "name", "from", "program", "except", "select", "t1", ".", "name", "from", "program", "as", "t1", "join", "broadcast", "as", "t2", "on", "t1", ".", "program_id", "=", "t2", ".", "program_id", "where", "t2", ".", "time_of_day", "=", "value"], "question": "Which programs are never broadcasted in the morning? Give me the names of the programs.", "question_toks": ["Which", "programs", "are", "never", "broadcasted", "in", "the", "morning", "?", "Give", "me", "the", "names", "of", "the", "programs", "."], "guid": 7823}}
{"text": "film: Film_ID, Rank_in_series, Number_in_season, Title, Directed_by, Original_air_date, Production_code; cinema: Cinema_ID, Name, Openning_year, Capacity, Location; schedule: Cinema_ID, Film_ID, Date, Show_times_per_day, Price | Find the locations that have more than one movie theater with capacity above 300.", "sql": "SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >  1", "example": {"db_id": "cinema", "query": "SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >  1", "query_toks": ["SELECT", "LOCATION", "FROM", "cinema", "WHERE", "capacity", ">", "300", "GROUP", "BY", "LOCATION", "HAVING", "count", "(", "*", ")", ">", "1"], "query_toks_no_value": ["select", "location", "from", "cinema", "where", "capacity", ">", "value", "group", "by", "location", "having", "count", "(", "*", ")", ">", "value"], "question": "Find the locations that have more than one movie theater with capacity above 300.", "question_toks": ["Find", "the", "locations", "that", "have", "more", "than", "one", "movie", "theater", "with", "capacity", "above", "300", "."], "guid": 7824}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | What are the names of directors who directed movies with 5 star rating? Also return the title of these movies.", "sql": "SELECT T1.director ,  T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID WHERE T2.stars  =  5", "example": {"db_id": "movie_1", "query": "SELECT T1.director ,  T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID WHERE T2.stars  =  5", "query_toks": ["SELECT", "T1.director", ",", "T1.title", "FROM", "Movie", "AS", "T1", "JOIN", "Rating", "AS", "T2", "ON", "T1.mID", "=", "T2.mID", "WHERE", "T2.stars", "=", "5"], "query_toks_no_value": ["select", "t1", ".", "director", ",", "t1", ".", "title", "from", "movie", "as", "t1", "join", "rating", "as", "t2", "on", "t1", ".", "mid", "=", "t2", ".", "mid", "where", "t2", ".", "stars", "=", "value"], "question": "What are the names of directors who directed movies with 5 star rating? Also return the title of these movies.", "question_toks": ["What", "are", "the", "names", "of", "directors", "who", "directed", "movies", "with", "5", "star", "rating", "?", "Also", "return", "the", "title", "of", "these", "movies", "."], "guid": 7825}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | What are the names of the directors who made exactly one movie excluding director NULL?", "sql": "SELECT director FROM Movie WHERE director != \"null\" GROUP BY director HAVING count(*)  =  1", "example": {"db_id": "movie_1", "query": "SELECT director FROM Movie WHERE director != \"null\" GROUP BY director HAVING count(*)  =  1", "query_toks": ["SELECT", "director", "FROM", "Movie", "WHERE", "director", "!", "=", "``", "null", "''", "GROUP", "BY", "director", "HAVING", "count", "(", "*", ")", "=", "1"], "query_toks_no_value": ["select", "director", "from", "movie", "where", "director", "!", "=", "value", "group", "by", "director", "having", "count", "(", "*", ")", "=", "value"], "question": "What are the names of the directors who made exactly one movie excluding director NULL?", "question_toks": ["What", "are", "the", "names", "of", "the", "directors", "who", "made", "exactly", "one", "movie", "excluding", "director", "NULL", "?"], "guid": 7826}}
{"text": "film: Film_ID, Rank_in_series, Number_in_season, Title, Directed_by, Original_air_date, Production_code; cinema: Cinema_ID, Name, Openning_year, Capacity, Location; schedule: Cinema_ID, Film_ID, Date, Show_times_per_day, Price | Show all the cinema names and opening years in descending order of opening year.", "sql": "SELECT name ,  openning_year FROM cinema ORDER BY openning_year DESC", "example": {"db_id": "cinema", "query": "SELECT name ,  openning_year FROM cinema ORDER BY openning_year DESC", "query_toks": ["SELECT", "name", ",", "openning_year", "FROM", "cinema", "ORDER", "BY", "openning_year", "DESC"], "query_toks_no_value": ["select", "name", ",", "openning_year", "from", "cinema", "order", "by", "openning_year", "desc"], "question": "Show all the cinema names and opening years in descending order of opening year.", "question_toks": ["Show", "all", "the", "cinema", "names", "and", "opening", "years", "in", "descending", "order", "of", "opening", "year", "."], "guid": 7827}}
{"text": "festival_detail: Festival_ID, Festival_Name, Chair_Name, Location, Year, Num_of_Audience; artwork: Artwork_ID, Type, Name; nomination: Artwork_ID, Festival_ID, Result | What are the names and locations of festivals?", "sql": "SELECT Festival_Name ,  LOCATION FROM festival_detail", "example": {"db_id": "entertainment_awards", "query": "SELECT Festival_Name ,  LOCATION FROM festival_detail", "query_toks": ["SELECT", "Festival_Name", ",", "LOCATION", "FROM", "festival_detail"], "query_toks_no_value": ["select", "festival_name", ",", "location", "from", "festival_detail"], "question": "What are the names and locations of festivals?", "question_toks": ["What", "are", "the", "names", "and", "locations", "of", "festivals", "?"], "guid": 7828}}
{"text": "TV_Channel: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option; TV_series: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel; Cartoon: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel | What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones?", "sql": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')", "example": {"db_id": "tvshow", "query": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')", "query_toks": ["SELECT", "package_option", "FROM", "TV_Channel", "WHERE", "id", "NOT", "IN", "(", "SELECT", "channel", "FROM", "cartoon", "WHERE", "directed_by", "=", "'Ben", "Jones", "'", ")"], "query_toks_no_value": ["select", "package_option", "from", "tv_channel", "where", "id", "not", "in", "(", "select", "channel", "from", "cartoon", "where", "directed_by", "=", "value", ")"], "question": "What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones?", "question_toks": ["What", "are", "the", "package", "options", "of", "all", "tv", "channels", "that", "are", "not", "playing", "any", "cartoons", "directed", "by", "Ben", "Jones", "?"], "guid": 7829}}
{"text": "TV_Channel: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option; TV_series: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel; Cartoon: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel | List all cartoon directed by \"Ben Jones\".", "sql": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";", "example": {"db_id": "tvshow", "query": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";", "query_toks": ["SELECT", "Title", "FROM", "Cartoon", "WHERE", "Directed_by", "=", "``", "Ben", "Jones", "''", ";"], "query_toks_no_value": ["select", "title", "from", "cartoon", "where", "directed_by", "=", "value"], "question": "List all cartoon directed by \"Ben Jones\".", "question_toks": ["List", "all", "cartoon", "directed", "by", "``", "Ben", "Jones", "''", "."], "guid": 7830}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | Find the names of all directors whose movies are rated by Sarah Martinez.", "sql": "SELECT DISTINCT T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Sarah Martinez'", "example": {"db_id": "movie_1", "query": "SELECT DISTINCT T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Sarah Martinez'", "query_toks": ["SELECT", "DISTINCT", "T2.director", "FROM", "Rating", "AS", "T1", "JOIN", "Movie", "AS", "T2", "ON", "T1.mID", "=", "T2.mID", "JOIN", "Reviewer", "AS", "T3", "ON", "T1.rID", "=", "T3.rID", "WHERE", "T3.name", "=", "'Sarah", "Martinez", "'"], "query_toks_no_value": ["select", "distinct", "t2", ".", "director", "from", "rating", "as", "t1", "join", "movie", "as", "t2", "on", "t1", ".", "mid", "=", "t2", ".", "mid", "join", "reviewer", "as", "t3", "on", "t1", ".", "rid", "=", "t3", ".", "rid", "where", "t3", ".", "name", "=", "value"], "question": "Find the names of all directors whose movies are rated by Sarah Martinez.", "question_toks": ["Find", "the", "names", "of", "all", "directors", "whose", "movies", "are", "rated", "by", "Sarah", "Martinez", "."], "guid": 7831}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | Find all movies featuring both \" Woody Strode \" and \" Jason Robards \"", "sql": "SELECT t4.title FROM CAST AS t5 JOIN actor AS t1 ON t5.aid  =  t1.aid JOIN movie AS t4 ON t4.mid  =  t5.msid JOIN CAST AS t3 ON t4.mid  =  t3.msid JOIN actor AS t2 ON t3.aid  =  t2.aid WHERE t1.name  =  \"Woody Strode\" AND t2.name  =  \"Jason Robards\";", "example": {"db_id": "imdb", "query": "SELECT t4.title FROM CAST AS t5 JOIN actor AS t1 ON t5.aid  =  t1.aid JOIN movie AS t4 ON t4.mid  =  t5.msid JOIN CAST AS t3 ON t4.mid  =  t3.msid JOIN actor AS t2 ON t3.aid  =  t2.aid WHERE t1.name  =  \"Woody Strode\" AND t2.name  =  \"Jason Robards\";", "query_toks": ["SELECT", "t4.title", "FROM", "CAST", "AS", "t5", "JOIN", "actor", "AS", "t1", "ON", "t5.aid", "=", "t1.aid", "JOIN", "movie", "AS", "t4", "ON", "t4.mid", "=", "t5.msid", "JOIN", "CAST", "AS", "t3", "ON", "t4.mid", "=", "t3.msid", "JOIN", "actor", "AS", "t2", "ON", "t3.aid", "=", "t2.aid", "WHERE", "t1.name", "=", "``", "Woody", "Strode", "''", "AND", "t2.name", "=", "``", "Jason", "Robards", "''", ";"], "query_toks_no_value": ["select", "t4", ".", "title", "from", "cast", "as", "t5", "join", "actor", "as", "t1", "on", "t5", ".", "aid", "=", "t1", ".", "aid", "join", "movie", "as", "t4", "on", "t4", ".", "mid", "=", "t5", ".", "msid", "join", "cast", "as", "t3", "on", "t4", ".", "mid", "=", "t3", ".", "msid", "join", "actor", "as", "t2", "on", "t3", ".", "aid", "=", "t2", ".", "aid", "where", "t1", ".", "name", "=", "value", "and", "t2", ".", "name", "=", "value"], "question": "Find all movies featuring both \" Woody Strode \" and \" Jason Robards \"", "question_toks": ["Find", "all", "movies", "featuring", "both", "``", "Woody", "Strode", "``", "and", "``", "Jason", "Robards", "``"], "guid": 7832}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | Find the title and star rating of the movie that got the least rating star for each reviewer.", "sql": "SELECT T2.title ,  T1.rID ,  T1.stars ,  min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.rID", "example": {"db_id": "movie_1", "query": "SELECT T2.title ,  T1.rID ,  T1.stars ,  min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.rID", "query_toks": ["SELECT", "T2.title", ",", "T1.rID", ",", "T1.stars", ",", "min", "(", "T1.stars", ")", "FROM", "Rating", "AS", "T1", "JOIN", "Movie", "AS", "T2", "ON", "T1.mID", "=", "T2.mID", "GROUP", "BY", "T1.rID"], "query_toks_no_value": ["select", "t2", ".", "title", ",", "t1", ".", "rid", ",", "t1", ".", "stars", ",", "min", "(", "t1", ".", "stars", ")", "from", "rating", "as", "t1", "join", "movie", "as", "t2", "on", "t1", ".", "mid", "=", "t2", ".", "mid", "group", "by", "t1", ".", "rid"], "question": "Find the title and star rating of the movie that got the least rating star for each reviewer.", "question_toks": ["Find", "the", "title", "and", "star", "rating", "of", "the", "movie", "that", "got", "the", "least", "rating", "star", "for", "each", "reviewer", "."], "guid": 7833}}
{"text": "film: Film_ID, Rank_in_series, Number_in_season, Title, Directed_by, Original_air_date, Production_code; cinema: Cinema_ID, Name, Openning_year, Capacity, Location; schedule: Cinema_ID, Film_ID, Date, Show_times_per_day, Price | Who are all the directors?", "sql": "SELECT DISTINCT directed_by FROM film", "example": {"db_id": "cinema", "query": "SELECT DISTINCT directed_by FROM film", "query_toks": ["SELECT", "DISTINCT", "directed_by", "FROM", "film"], "query_toks_no_value": ["select", "distinct", "directed_by", "from", "film"], "question": "Who are all the directors?", "question_toks": ["Who", "are", "all", "the", "directors", "?"], "guid": 7834}}
{"text": "festival_detail: Festival_ID, Festival_Name, Chair_Name, Location, Year, Num_of_Audience; artwork: Artwork_ID, Type, Name; nomination: Artwork_ID, Festival_ID, Result | List the name of artworks that are not nominated.", "sql": "SELECT Name FROM Artwork WHERE Artwork_ID NOT IN (SELECT Artwork_ID FROM nomination)", "example": {"db_id": "entertainment_awards", "query": "SELECT Name FROM Artwork WHERE Artwork_ID NOT IN (SELECT Artwork_ID FROM nomination)", "query_toks": ["SELECT", "Name", "FROM", "Artwork", "WHERE", "Artwork_ID", "NOT", "IN", "(", "SELECT", "Artwork_ID", "FROM", "nomination", ")"], "query_toks_no_value": ["select", "name", "from", "artwork", "where", "artwork_id", "not", "in", "(", "select", "artwork_id", "from", "nomination", ")"], "question": "List the name of artworks that are not nominated.", "question_toks": ["List", "the", "name", "of", "artworks", "that", "are", "not", "nominated", "."], "guid": 7835}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | What is the latest movie by \" Jim Jarmusch \"", "sql": "SELECT t3.title FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.name  =  \"Jim Jarmusch\" ORDER BY t3.release_year DESC LIMIT 1;", "example": {"db_id": "imdb", "query": "SELECT t3.title FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.name  =  \"Jim Jarmusch\" ORDER BY t3.release_year DESC LIMIT 1;", "query_toks": ["SELECT", "t3.title", "FROM", "director", "AS", "t2", "JOIN", "directed_by", "AS", "t1", "ON", "t2.did", "=", "t1.did", "JOIN", "movie", "AS", "t3", "ON", "t3.mid", "=", "t1.msid", "WHERE", "t2.name", "=", "``", "Jim", "Jarmusch", "''", "ORDER", "BY", "t3.release_year", "DESC", "LIMIT", "1", ";"], "query_toks_no_value": ["select", "t3", ".", "title", "from", "director", "as", "t2", "join", "directed_by", "as", "t1", "on", "t2", ".", "did", "=", "t1", ".", "did", "join", "movie", "as", "t3", "on", "t3", ".", "mid", "=", "t1", ".", "msid", "where", "t2", ".", "name", "=", "value", "order", "by", "t3", ".", "release_year", "desc", "limit", "value"], "question": "What is the latest movie by \" Jim Jarmusch \"", "question_toks": ["What", "is", "the", "latest", "movie", "by", "``", "Jim", "Jarmusch", "``"], "guid": 7836}}
{"text": "film: Film_ID, Title, Studio, Director, Gross_in_dollar; market: Market_ID, Country, Number_cities; film_market_estimation: Estimation_ID, Low_Estimate, High_Estimate, Film_ID, Type, Market_ID, Year | Return the title of the film with the highest high estimate?", "sql": "SELECT t1.title FROM film AS T1 JOIN film_market_estimation AS T2  ON T1.Film_ID  =  T2.Film_ID ORDER BY high_estimate DESC LIMIT 1", "example": {"db_id": "film_rank", "query": "SELECT t1.title FROM film AS T1 JOIN film_market_estimation AS T2  ON T1.Film_ID  =  T2.Film_ID ORDER BY high_estimate DESC LIMIT 1", "query_toks": ["SELECT", "t1.title", "FROM", "film", "AS", "T1", "JOIN", "film_market_estimation", "AS", "T2", "ON", "T1.Film_ID", "=", "T2.Film_ID", "ORDER", "BY", "high_estimate", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "title", "from", "film", "as", "t1", "join", "film_market_estimation", "as", "t2", "on", "t1", ".", "film_id", "=", "t2", ".", "film_id", "order", "by", "high_estimate", "desc", "limit", "value"], "question": "Return the title of the film with the highest high estimate?", "question_toks": ["Return", "the", "title", "of", "the", "film", "with", "the", "highest", "high", "estimate", "?"], "guid": 7837}}
{"text": "TV_Channel: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option; TV_series: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel; Cartoon: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel | What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?", "sql": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";", "example": {"db_id": "tvshow", "query": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";", "query_toks": ["SELECT", "T1.series_name", "FROM", "TV_Channel", "AS", "T1", "JOIN", "Cartoon", "AS", "T2", "ON", "T1.id", "=", "T2.Channel", "WHERE", "T2.Title", "=", "``", "The", "Rise", "of", "the", "Blue", "Beetle", "!", "``", ";"], "query_toks_no_value": ["select", "t1", ".", "series_name", "from", "tv_channel", "as", "t1", "join", "cartoon", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "channel", "where", "t2", ".", "title", "=", "value"], "question": "What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?", "question_toks": ["What", "is", "the", "series", "name", "of", "the", "TV", "Channel", "that", "shows", "the", "cartoon", "``", "The", "Rise", "of", "the", "Blue", "Beetle", "''", "?"], "guid": 7838}}
{"text": "program: Program_ID, Name, Origin, Launch, Owner; channel: Channel_ID, Name, Owner, Share_in_percent, Rating_in_percent; broadcast: Channel_ID, Program_ID, Time_of_day; broadcast_share: Channel_ID, Program_ID, Date, Share_in_percent | Give me a list of all the channel names sorted by the channel rating in descending order.", "sql": "SELECT name FROM channel ORDER BY rating_in_percent DESC", "example": {"db_id": "program_share", "query": "SELECT name FROM channel ORDER BY rating_in_percent DESC", "query_toks": ["SELECT", "name", "FROM", "channel", "ORDER", "BY", "rating_in_percent", "DESC"], "query_toks_no_value": ["select", "name", "from", "channel", "order", "by", "rating_in_percent", "desc"], "question": "Give me a list of all the channel names sorted by the channel rating in descending order.", "question_toks": ["Give", "me", "a", "list", "of", "all", "the", "channel", "names", "sorted", "by", "the", "channel", "rating", "in", "descending", "order", "."], "guid": 7839}}
{"text": "film: Film_ID, Title, Studio, Director, Gross_in_dollar; market: Market_ID, Country, Number_cities; film_market_estimation: Estimation_ID, Low_Estimate, High_Estimate, Film_ID, Type, Market_ID, Year | What are the countries for each market ordered by decreasing number of cities?", "sql": "SELECT Country FROM market ORDER BY Number_cities DESC", "example": {"db_id": "film_rank", "query": "SELECT Country FROM market ORDER BY Number_cities DESC", "query_toks": ["SELECT", "Country", "FROM", "market", "ORDER", "BY", "Number_cities", "DESC"], "query_toks_no_value": ["select", "country", "from", "market", "order", "by", "number_cities", "desc"], "question": "What are the countries for each market ordered by decreasing number of cities?", "question_toks": ["What", "are", "the", "countries", "for", "each", "market", "ordered", "by", "decreasing", "number", "of", "cities", "?"], "guid": 7840}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | How many movies did \" Humphrey Bogart \" act in before 1942 ?", "sql": "SELECT COUNT ( DISTINCT t2.title  ) FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.name  =  \"Humphrey Bogart\" AND t2.release_year  <  1942;", "example": {"db_id": "imdb", "query": "SELECT COUNT ( DISTINCT t2.title  ) FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.name  =  \"Humphrey Bogart\" AND t2.release_year  <  1942;", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "t2.title", ")", "FROM", "CAST", "AS", "t3", "JOIN", "actor", "AS", "t1", "ON", "t3.aid", "=", "t1.aid", "JOIN", "movie", "AS", "t2", "ON", "t2.mid", "=", "t3.msid", "WHERE", "t1.name", "=", "``", "Humphrey", "Bogart", "''", "AND", "t2.release_year", "<", "1942", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "t2", ".", "title", ")", "from", "cast", "as", "t3", "join", "actor", "as", "t1", "on", "t3", ".", "aid", "=", "t1", ".", "aid", "join", "movie", "as", "t2", "on", "t2", ".", "mid", "=", "t3", ".", "msid", "where", "t1", ".", "name", "=", "value", "and", "t2", ".", "release_year", "<", "value"], "question": "How many movies did \" Humphrey Bogart \" act in before 1942 ?", "question_toks": ["How", "many", "movies", "did", "``", "Humphrey", "Bogart", "``", "act", "in", "before", "1942", "?"], "guid": 7841}}
{"text": "film: Film_ID, Title, Studio, Director, Gross_in_dollar; market: Market_ID, Country, Number_cities; film_market_estimation: Estimation_ID, Low_Estimate, High_Estimate, Film_ID, Type, Market_ID, Year | Return the maximum and minimum number of cities across all markets.", "sql": "SELECT max(Number_cities) ,  min(Number_cities) FROM market", "example": {"db_id": "film_rank", "query": "SELECT max(Number_cities) ,  min(Number_cities) FROM market", "query_toks": ["SELECT", "max", "(", "Number_cities", ")", ",", "min", "(", "Number_cities", ")", "FROM", "market"], "query_toks_no_value": ["select", "max", "(", "number_cities", ")", ",", "min", "(", "number_cities", ")", "from", "market"], "question": "Return the maximum and minimum number of cities across all markets.", "question_toks": ["Return", "the", "maximum", "and", "minimum", "number", "of", "cities", "across", "all", "markets", "."], "guid": 7842}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | In what year was \" Kevin Spacey \" born ?", "sql": "SELECT birth_year FROM actor WHERE name  =  \"actor_name0\";", "example": {"db_id": "imdb", "query": "SELECT birth_year FROM actor WHERE name  =  \"actor_name0\";", "query_toks": ["SELECT", "birth_year", "FROM", "actor", "WHERE", "name", "=", "``", "actor_name0", "''", ";"], "query_toks_no_value": ["select", "birth_year", "from", "actor", "where", "name", "=", "value"], "question": "In what year was \" Kevin Spacey \" born ?", "question_toks": ["In", "what", "year", "was", "``", "Kevin", "Spacey", "``", "born", "?"], "guid": 7843}}
{"text": "film: Film_ID, Title, Studio, Director, Gross_in_dollar; market: Market_ID, Country, Number_cities; film_market_estimation: Estimation_ID, Low_Estimate, High_Estimate, Film_ID, Type, Market_ID, Year | What are the names of studios that have made two or more films?", "sql": "SELECT Studio FROM film GROUP BY Studio HAVING COUNT(*)  >=  2", "example": {"db_id": "film_rank", "query": "SELECT Studio FROM film GROUP BY Studio HAVING COUNT(*)  >=  2", "query_toks": ["SELECT", "Studio", "FROM", "film", "GROUP", "BY", "Studio", "HAVING", "COUNT", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "studio", "from", "film", "group", "by", "studio", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "What are the names of studios that have made two or more films?", "question_toks": ["What", "are", "the", "names", "of", "studios", "that", "have", "made", "two", "or", "more", "films", "?"], "guid": 7844}}
{"text": "program: Program_ID, Name, Origin, Launch, Owner; channel: Channel_ID, Name, Owner, Share_in_percent, Rating_in_percent; broadcast: Channel_ID, Program_ID, Time_of_day; broadcast_share: Channel_ID, Program_ID, Date, Share_in_percent | List the name, origin and owner of each program.", "sql": "SELECT name ,  origin ,  OWNER FROM program", "example": {"db_id": "program_share", "query": "SELECT name ,  origin ,  OWNER FROM program", "query_toks": ["SELECT", "name", ",", "origin", ",", "OWNER", "FROM", "program"], "query_toks_no_value": ["select", "name", ",", "origin", ",", "owner", "from", "program"], "question": "List the name, origin and owner of each program.", "question_toks": ["List", "the", "name", ",", "origin", "and", "owner", "of", "each", "program", "."], "guid": 7845}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | What are the names and years of the movies that has the top 3 highest rating star?", "sql": "SELECT T2.title ,  T2.year FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID ORDER BY T1.stars DESC LIMIT 3", "example": {"db_id": "movie_1", "query": "SELECT T2.title ,  T2.year FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID ORDER BY T1.stars DESC LIMIT 3", "query_toks": ["SELECT", "T2.title", ",", "T2.year", "FROM", "Rating", "AS", "T1", "JOIN", "Movie", "AS", "T2", "ON", "T1.mID", "=", "T2.mID", "ORDER", "BY", "T1.stars", "DESC", "LIMIT", "3"], "query_toks_no_value": ["select", "t2", ".", "title", ",", "t2", ".", "year", "from", "rating", "as", "t1", "join", "movie", "as", "t2", "on", "t1", ".", "mid", "=", "t2", ".", "mid", "order", "by", "t1", ".", "stars", "desc", "limit", "value"], "question": "What are the names and years of the movies that has the top 3 highest rating star?", "question_toks": ["What", "are", "the", "names", "and", "years", "of", "the", "movies", "that", "has", "the", "top", "3", "highest", "rating", "star", "?"], "guid": 7846}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | Find all actors from Canada who acted in \" James Bond \" movies", "sql": "SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t1.nationality  =  \"Canada\" AND t3.title  =  \"James Bond\";", "example": {"db_id": "imdb", "query": "SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t1.nationality  =  \"Canada\" AND t3.title  =  \"James Bond\";", "query_toks": ["SELECT", "t1.name", "FROM", "CAST", "AS", "t2", "JOIN", "actor", "AS", "t1", "ON", "t2.aid", "=", "t1.aid", "JOIN", "movie", "AS", "t3", "ON", "t3.mid", "=", "t2.msid", "WHERE", "t1.nationality", "=", "``", "Canada", "''", "AND", "t3.title", "=", "``", "James", "Bond", "''", ";"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "cast", "as", "t2", "join", "actor", "as", "t1", "on", "t2", ".", "aid", "=", "t1", ".", "aid", "join", "movie", "as", "t3", "on", "t3", ".", "mid", "=", "t2", ".", "msid", "where", "t1", ".", "nationality", "=", "value", "and", "t3", ".", "title", "=", "value"], "question": "Find all actors from Canada who acted in \" James Bond \" movies", "question_toks": ["Find", "all", "actors", "from", "Canada", "who", "acted", "in", "``", "James", "Bond", "``", "movies"], "guid": 7847}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | How many movies about Iraq war were produced in 2015 ?", "sql": "SELECT COUNT ( DISTINCT t3.title  ) FROM tags AS t2 JOIN keyword AS t1 ON t2.kid  =  t1.id JOIN movie AS t3 ON t2.msid  =  t3.mid WHERE t1.keyword  =  \"Iraq war\" AND t3.release_year  =  2015;", "example": {"db_id": "imdb", "query": "SELECT COUNT ( DISTINCT t3.title  ) FROM tags AS t2 JOIN keyword AS t1 ON t2.kid  =  t1.id JOIN movie AS t3 ON t2.msid  =  t3.mid WHERE t1.keyword  =  \"Iraq war\" AND t3.release_year  =  2015;", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "t3.title", ")", "FROM", "tags", "AS", "t2", "JOIN", "keyword", "AS", "t1", "ON", "t2.kid", "=", "t1.id", "JOIN", "movie", "AS", "t3", "ON", "t2.msid", "=", "t3.mid", "WHERE", "t1.keyword", "=", "``", "Iraq", "war", "''", "AND", "t3.release_year", "=", "2015", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "t3", ".", "title", ")", "from", "tags", "as", "t2", "join", "keyword", "as", "t1", "on", "t2", ".", "kid", "=", "t1", ".", "id", "join", "movie", "as", "t3", "on", "t2", ".", "msid", "=", "t3", ".", "mid", "where", "t1", ".", "keyword", "=", "value", "and", "t3", ".", "release_year", "=", "value"], "question": "How many movies about Iraq war were produced in 2015 ?", "question_toks": ["How", "many", "movies", "about", "Iraq", "war", "were", "produced", "in", "2015", "?"], "guid": 7848}}
{"text": "TV_Channel: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option; TV_series: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel; Cartoon: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel | List the title of all cartoons in alphabetical order.", "sql": "SELECT Title FROM Cartoon ORDER BY title", "example": {"db_id": "tvshow", "query": "SELECT Title FROM Cartoon ORDER BY title", "query_toks": ["SELECT", "Title", "FROM", "Cartoon", "ORDER", "BY", "title"], "query_toks_no_value": ["select", "title", "from", "cartoon", "order", "by", "title"], "question": "List the title of all cartoons in alphabetical order.", "question_toks": ["List", "the", "title", "of", "all", "cartoons", "in", "alphabetical", "order", "."], "guid": 7849}}
{"text": "film: Film_ID, Title, Studio, Director, Gross_in_dollar; market: Market_ID, Country, Number_cities; film_market_estimation: Estimation_ID, Low_Estimate, High_Estimate, Film_ID, Type, Market_ID, Year | List the studios of each film and the number of films produced by that studio.", "sql": "SELECT Studio ,  COUNT(*) FROM film GROUP BY Studio", "example": {"db_id": "film_rank", "query": "SELECT Studio ,  COUNT(*) FROM film GROUP BY Studio", "query_toks": ["SELECT", "Studio", ",", "COUNT", "(", "*", ")", "FROM", "film", "GROUP", "BY", "Studio"], "query_toks_no_value": ["select", "studio", ",", "count", "(", "*", ")", "from", "film", "group", "by", "studio"], "question": "List the studios of each film and the number of films produced by that studio.", "question_toks": ["List", "the", "studios", "of", "each", "film", "and", "the", "number", "of", "films", "produced", "by", "that", "studio", "."], "guid": 7850}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | What is the nationality of \" Kevin Spacey \" ?", "sql": "SELECT nationality FROM director WHERE name  =  \"director_name0\";", "example": {"db_id": "imdb", "query": "SELECT nationality FROM director WHERE name  =  \"director_name0\";", "query_toks": ["SELECT", "nationality", "FROM", "director", "WHERE", "name", "=", "``", "director_name0", "''", ";"], "query_toks_no_value": ["select", "nationality", "from", "director", "where", "name", "=", "value"], "question": "What is the nationality of \" Kevin Spacey \" ?", "question_toks": ["What", "is", "the", "nationality", "of", "``", "Kevin", "Spacey", "``", "?"], "guid": 7851}}
{"text": "program: Program_ID, Name, Origin, Launch, Owner; channel: Channel_ID, Name, Owner, Share_in_percent, Rating_in_percent; broadcast: Channel_ID, Program_ID, Time_of_day; broadcast_share: Channel_ID, Program_ID, Date, Share_in_percent | Count the number of programs broadcast for each time section of a day.", "sql": "SELECT count(*) ,  time_of_day FROM broadcast GROUP BY time_of_day", "example": {"db_id": "program_share", "query": "SELECT count(*) ,  time_of_day FROM broadcast GROUP BY time_of_day", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "time_of_day", "FROM", "broadcast", "GROUP", "BY", "time_of_day"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "time_of_day", "from", "broadcast", "group", "by", "time_of_day"], "question": "Count the number of programs broadcast for each time section of a day.", "question_toks": ["Count", "the", "number", "of", "programs", "broadcast", "for", "each", "time", "section", "of", "a", "day", "."], "guid": 7852}}
{"text": "film: Film_ID, Rank_in_series, Number_in_season, Title, Directed_by, Original_air_date, Production_code; cinema: Cinema_ID, Name, Openning_year, Capacity, Location; schedule: Cinema_ID, Film_ID, Date, Show_times_per_day, Price | Show all the locations with at least two cinemas with capacity above 300.", "sql": "SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >=  2", "example": {"db_id": "cinema", "query": "SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >=  2", "query_toks": ["SELECT", "LOCATION", "FROM", "cinema", "WHERE", "capacity", ">", "300", "GROUP", "BY", "LOCATION", "HAVING", "count", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "location", "from", "cinema", "where", "capacity", ">", "value", "group", "by", "location", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "Show all the locations with at least two cinemas with capacity above 300.", "question_toks": ["Show", "all", "the", "locations", "with", "at", "least", "two", "cinemas", "with", "capacity", "above", "300", "."], "guid": 7853}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | What is the reviewer id of Daniel Lewis?", "sql": "SELECT rID FROM Reviewer WHERE name  =  \"Daniel Lewis\"", "example": {"db_id": "movie_1", "query": "SELECT rID FROM Reviewer WHERE name  =  \"Daniel Lewis\"", "query_toks": ["SELECT", "rID", "FROM", "Reviewer", "WHERE", "name", "=", "``", "Daniel", "Lewis", "''"], "query_toks_no_value": ["select", "rid", "from", "reviewer", "where", "name", "=", "value"], "question": "What is the reviewer id of Daniel Lewis?", "question_toks": ["What", "is", "the", "reviewer", "id", "of", "Daniel", "Lewis", "?"], "guid": 7854}}
{"text": "program: Program_ID, Name, Origin, Launch, Owner; channel: Channel_ID, Name, Owner, Share_in_percent, Rating_in_percent; broadcast: Channel_ID, Program_ID, Time_of_day; broadcast_share: Channel_ID, Program_ID, Date, Share_in_percent | list all the names of programs, ordering by launch time.", "sql": "SELECT name FROM program ORDER BY launch", "example": {"db_id": "program_share", "query": "SELECT name FROM program ORDER BY launch", "query_toks": ["SELECT", "name", "FROM", "program", "ORDER", "BY", "launch"], "query_toks_no_value": ["select", "name", "from", "program", "order", "by", "launch"], "question": "list all the names of programs, ordering by launch time.", "question_toks": ["list", "all", "the", "names", "of", "programs", ",", "ordering", "by", "launch", "time", "."], "guid": 7855}}
{"text": "TV_Channel: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option; TV_series: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel; Cartoon: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel | Which country has the most of TV Channels? List the country and number of TV Channels it has.", "sql": "SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;", "example": {"db_id": "tvshow", "query": "SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;", "query_toks": ["SELECT", "Country", ",", "count", "(", "*", ")", "FROM", "TV_Channel", "GROUP", "BY", "Country", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1", ";"], "query_toks_no_value": ["select", "country", ",", "count", "(", "*", ")", "from", "tv_channel", "group", "by", "country", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which country has the most of TV Channels? List the country and number of TV Channels it has.", "question_toks": ["Which", "country", "has", "the", "most", "of", "TV", "Channels", "?", "List", "the", "country", "and", "number", "of", "TV", "Channels", "it", "has", "."], "guid": 7856}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | Find the actors who played in the latest movie by \" Quentin Tarantino \"", "sql": "SELECT t1.name FROM CAST AS t4 JOIN actor AS t1 ON t4.aid  =  t1.aid JOIN movie AS t5 ON t5.mid  =  t4.msid JOIN directed_by AS t2 ON t5.mid  =  t2.msid JOIN director AS t3 ON t3.did  =  t2.did WHERE t3.name  =  \"Quentin Tarantino\" ORDER BY t5.release_year DESC LIMIT 1;", "example": {"db_id": "imdb", "query": "SELECT t1.name FROM CAST AS t4 JOIN actor AS t1 ON t4.aid  =  t1.aid JOIN movie AS t5 ON t5.mid  =  t4.msid JOIN directed_by AS t2 ON t5.mid  =  t2.msid JOIN director AS t3 ON t3.did  =  t2.did WHERE t3.name  =  \"Quentin Tarantino\" ORDER BY t5.release_year DESC LIMIT 1;", "query_toks": ["SELECT", "t1.name", "FROM", "CAST", "AS", "t4", "JOIN", "actor", "AS", "t1", "ON", "t4.aid", "=", "t1.aid", "JOIN", "movie", "AS", "t5", "ON", "t5.mid", "=", "t4.msid", "JOIN", "directed_by", "AS", "t2", "ON", "t5.mid", "=", "t2.msid", "JOIN", "director", "AS", "t3", "ON", "t3.did", "=", "t2.did", "WHERE", "t3.name", "=", "``", "Quentin", "Tarantino", "''", "ORDER", "BY", "t5.release_year", "DESC", "LIMIT", "1", ";"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "cast", "as", "t4", "join", "actor", "as", "t1", "on", "t4", ".", "aid", "=", "t1", ".", "aid", "join", "movie", "as", "t5", "on", "t5", ".", "mid", "=", "t4", ".", "msid", "join", "directed_by", "as", "t2", "on", "t5", ".", "mid", "=", "t2", ".", "msid", "join", "director", "as", "t3", "on", "t3", ".", "did", "=", "t2", ".", "did", "where", "t3", ".", "name", "=", "value", "order", "by", "t5", ".", "release_year", "desc", "limit", "value"], "question": "Find the actors who played in the latest movie by \" Quentin Tarantino \"", "question_toks": ["Find", "the", "actors", "who", "played", "in", "the", "latest", "movie", "by", "``", "Quentin", "Tarantino", "``"], "guid": 7857}}
{"text": "film: Film_ID, Title, Studio, Director, Gross_in_dollar; market: Market_ID, Country, Number_cities; film_market_estimation: Estimation_ID, Low_Estimate, High_Estimate, Film_ID, Type, Market_ID, Year | Please list the countries and years of film market estimations.", "sql": "SELECT T2.Country ,  T1.Year FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID", "example": {"db_id": "film_rank", "query": "SELECT T2.Country ,  T1.Year FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID", "query_toks": ["SELECT", "T2.Country", ",", "T1.Year", "FROM", "film_market_estimation", "AS", "T1", "JOIN", "market", "AS", "T2", "ON", "T1.Market_ID", "=", "T2.Market_ID"], "query_toks_no_value": ["select", "t2", ".", "country", ",", "t1", ".", "year", "from", "film_market_estimation", "as", "t1", "join", "market", "as", "t2", "on", "t1", ".", "market_id", "=", "t2", ".", "market_id"], "question": "Please list the countries and years of film market estimations.", "question_toks": ["Please", "list", "the", "countries", "and", "years", "of", "film", "market", "estimations", "."], "guid": 7858}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | Find all actors who were born in \" New York City \" in 1984", "sql": "SELECT name FROM actor WHERE birth_city  =  \"New York City\" AND birth_year  =  1984;", "example": {"db_id": "imdb", "query": "SELECT name FROM actor WHERE birth_city  =  \"New York City\" AND birth_year  =  1984;", "query_toks": ["SELECT", "name", "FROM", "actor", "WHERE", "birth_city", "=", "``", "New", "York", "City", "''", "AND", "birth_year", "=", "1984", ";"], "query_toks_no_value": ["select", "name", "from", "actor", "where", "birth_city", "=", "value", "and", "birth_year", "=", "value"], "question": "Find all actors who were born in \" New York City \" in 1984", "question_toks": ["Find", "all", "actors", "who", "were", "born", "in", "``", "New", "York", "City", "``", "in", "1984"], "guid": 7859}}
{"text": "film: Film_ID, Title, Studio, Director, Gross_in_dollar; market: Market_ID, Country, Number_cities; film_market_estimation: Estimation_ID, Low_Estimate, High_Estimate, Film_ID, Type, Market_ID, Year | What are the titles and studios of films that have been produced by a studio whose name contains \"Universal\"?", "sql": "SELECT title ,  Studio FROM film WHERE Studio LIKE \"%Universal%\"", "example": {"db_id": "film_rank", "query": "SELECT title ,  Studio FROM film WHERE Studio LIKE \"%Universal%\"", "query_toks": ["SELECT", "title", ",", "Studio", "FROM", "film", "WHERE", "Studio", "LIKE", "``", "%", "Universal", "%", "''"], "query_toks_no_value": ["select", "title", ",", "studio", "from", "film", "where", "studio", "like", "value"], "question": "What are the titles and studios of films that have been produced by a studio whose name contains \"Universal\"?", "question_toks": ["What", "are", "the", "titles", "and", "studios", "of", "films", "that", "have", "been", "produced", "by", "a", "studio", "whose", "name", "contains", "``", "Universal", "''", "?"], "guid": 7860}}
{"text": "program: Program_ID, Name, Origin, Launch, Owner; channel: Channel_ID, Name, Owner, Share_in_percent, Rating_in_percent; broadcast: Channel_ID, Program_ID, Time_of_day; broadcast_share: Channel_ID, Program_ID, Date, Share_in_percent | Which programs' origins are not \"Beijing\"? Give me the program names.", "sql": "SELECT name FROM program WHERE origin != 'Beijing'", "example": {"db_id": "program_share", "query": "SELECT name FROM program WHERE origin != 'Beijing'", "query_toks": ["SELECT", "name", "FROM", "program", "WHERE", "origin", "!", "=", "'Beijing", "'"], "query_toks_no_value": ["select", "name", "from", "program", "where", "origin", "!", "=", "value"], "question": "Which programs' origins are not \"Beijing\"? Give me the program names.", "question_toks": ["Which", "programs", "'", "origins", "are", "not", "``", "Beijing", "''", "?", "Give", "me", "the", "program", "names", "."], "guid": 7861}}
{"text": "film: Film_ID, Title, Studio, Director, Gross_in_dollar; market: Market_ID, Country, Number_cities; film_market_estimation: Estimation_ID, Low_Estimate, High_Estimate, Film_ID, Type, Market_ID, Year | Count the number of films.", "sql": "SELECT count(*) FROM film", "example": {"db_id": "film_rank", "query": "SELECT count(*) FROM film", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "film"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "film"], "question": "Count the number of films.", "question_toks": ["Count", "the", "number", "of", "films", "."], "guid": 7862}}
{"text": "program: Program_ID, Name, Origin, Launch, Owner; channel: Channel_ID, Name, Owner, Share_in_percent, Rating_in_percent; broadcast: Channel_ID, Program_ID, Time_of_day; broadcast_share: Channel_ID, Program_ID, Date, Share_in_percent | What is the list of program origins ordered alphabetically?", "sql": "SELECT origin FROM program ORDER BY origin", "example": {"db_id": "program_share", "query": "SELECT origin FROM program ORDER BY origin", "query_toks": ["SELECT", "origin", "FROM", "program", "ORDER", "BY", "origin"], "query_toks_no_value": ["select", "origin", "from", "program", "order", "by", "origin"], "question": "What is the list of program origins ordered alphabetically?", "question_toks": ["What", "is", "the", "list", "of", "program", "origins", "ordered", "alphabetically", "?"], "guid": 7863}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | What are the names of all reviewers that have given 3 or 4 stars for reviews?", "sql": "SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  =  3 INTERSECT SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  =  4", "example": {"db_id": "movie_1", "query": "SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  =  3 INTERSECT SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  =  4", "query_toks": ["SELECT", "T2.name", "FROM", "Rating", "AS", "T1", "JOIN", "Reviewer", "AS", "T2", "ON", "T1.rID", "=", "T2.rID", "WHERE", "T1.stars", "=", "3", "INTERSECT", "SELECT", "T2.name", "FROM", "Rating", "AS", "T1", "JOIN", "Reviewer", "AS", "T2", "ON", "T1.rID", "=", "T2.rID", "WHERE", "T1.stars", "=", "4"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "rating", "as", "t1", "join", "reviewer", "as", "t2", "on", "t1", ".", "rid", "=", "t2", ".", "rid", "where", "t1", ".", "stars", "=", "value", "intersect", "select", "t2", ".", "name", "from", "rating", "as", "t1", "join", "reviewer", "as", "t2", "on", "t1", ".", "rid", "=", "t2", ".", "rid", "where", "t1", ".", "stars", "=", "value"], "question": "What are the names of all reviewers that have given 3 or 4 stars for reviews?", "question_toks": ["What", "are", "the", "names", "of", "all", "reviewers", "that", "have", "given", "3", "or", "4", "stars", "for", "reviews", "?"], "guid": 7864}}
{"text": "TV_Channel: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option; TV_series: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel; Cartoon: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel | How many cartoons were written by \"Joseph Kuhr\"?", "sql": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";", "example": {"db_id": "tvshow", "query": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Cartoon", "WHERE", "Written_by", "=", "``", "Joseph", "Kuhr", "''", ";"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "cartoon", "where", "written_by", "=", "value"], "question": "How many cartoons were written by \"Joseph Kuhr\"?", "question_toks": ["How", "many", "cartoons", "were", "written", "by", "``", "Joseph", "Kuhr", "''", "?"], "guid": 7865}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | What is the number of movies featuring \" Shahab Hosseini \" ?", "sql": "SELECT COUNT ( DISTINCT t2.title  ) FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.name  =  \"Shahab Hosseini\";", "example": {"db_id": "imdb", "query": "SELECT COUNT ( DISTINCT t2.title  ) FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.name  =  \"Shahab Hosseini\";", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "t2.title", ")", "FROM", "CAST", "AS", "t3", "JOIN", "actor", "AS", "t1", "ON", "t3.aid", "=", "t1.aid", "JOIN", "movie", "AS", "t2", "ON", "t2.mid", "=", "t3.msid", "WHERE", "t1.name", "=", "``", "Shahab", "Hosseini", "''", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "t2", ".", "title", ")", "from", "cast", "as", "t3", "join", "actor", "as", "t1", "on", "t3", ".", "aid", "=", "t1", ".", "aid", "join", "movie", "as", "t2", "on", "t2", ".", "mid", "=", "t3", ".", "msid", "where", "t1", ".", "name", "=", "value"], "question": "What is the number of movies featuring \" Shahab Hosseini \" ?", "question_toks": ["What", "is", "the", "number", "of", "movies", "featuring", "``", "Shahab", "Hosseini", "``", "?"], "guid": 7866}}
{"text": "TV_Channel: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option; TV_series: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel; Cartoon: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel | List the language used least number of TV Channel. List language and number of TV Channel.", "sql": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;", "example": {"db_id": "tvshow", "query": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;", "query_toks": ["SELECT", "LANGUAGE", ",", "count", "(", "*", ")", "FROM", "TV_Channel", "GROUP", "BY", "LANGUAGE", "ORDER", "BY", "count", "(", "*", ")", "ASC", "LIMIT", "1", ";"], "query_toks_no_value": ["select", "language", ",", "count", "(", "*", ")", "from", "tv_channel", "group", "by", "language", "order", "by", "count", "(", "*", ")", "asc", "limit", "value"], "question": "List the language used least number of TV Channel. List language and number of TV Channel.", "question_toks": ["List", "the", "language", "used", "least", "number", "of", "TV", "Channel", ".", "List", "language", "and", "number", "of", "TV", "Channel", "."], "guid": 7867}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | Find the titles of all movies directed by steven spielberg.", "sql": "SELECT title FROM Movie WHERE director = 'Steven Spielberg'", "example": {"db_id": "movie_1", "query": "SELECT title FROM Movie WHERE director = 'Steven Spielberg'", "query_toks": ["SELECT", "title", "FROM", "Movie", "WHERE", "director", "=", "'Steven", "Spielberg", "'"], "query_toks_no_value": ["select", "title", "from", "movie", "where", "director", "=", "value"], "question": "Find the titles of all movies directed by steven spielberg.", "question_toks": ["Find", "the", "titles", "of", "all", "movies", "directed", "by", "steven", "spielberg", "."], "guid": 7868}}
{"text": "festival_detail: Festival_ID, Festival_Name, Chair_Name, Location, Year, Num_of_Audience; artwork: Artwork_ID, Type, Name; nomination: Artwork_ID, Festival_ID, Result | What are the total number of the audiences who visited any of the festivals?", "sql": "SELECT sum(Num_of_Audience) FROM festival_detail", "example": {"db_id": "entertainment_awards", "query": "SELECT sum(Num_of_Audience) FROM festival_detail", "query_toks": ["SELECT", "sum", "(", "Num_of_Audience", ")", "FROM", "festival_detail"], "query_toks_no_value": ["select", "sum", "(", "num_of_audience", ")", "from", "festival_detail"], "question": "What are the total number of the audiences who visited any of the festivals?", "question_toks": ["What", "are", "the", "total", "number", "of", "the", "audiences", "who", "visited", "any", "of", "the", "festivals", "?"], "guid": 7869}}
{"text": "festival_detail: Festival_ID, Festival_Name, Chair_Name, Location, Year, Num_of_Audience; artwork: Artwork_ID, Type, Name; nomination: Artwork_ID, Festival_ID, Result | Please show different types of artworks with the corresponding number of artworks of each type.", "sql": "SELECT TYPE ,  COUNT(*) FROM artwork GROUP BY TYPE", "example": {"db_id": "entertainment_awards", "query": "SELECT TYPE ,  COUNT(*) FROM artwork GROUP BY TYPE", "query_toks": ["SELECT", "TYPE", ",", "COUNT", "(", "*", ")", "FROM", "artwork", "GROUP", "BY", "TYPE"], "query_toks_no_value": ["select", "type", ",", "count", "(", "*", ")", "from", "artwork", "group", "by", "type"], "question": "Please show different types of artworks with the corresponding number of artworks of each type.", "question_toks": ["Please", "show", "different", "types", "of", "artworks", "with", "the", "corresponding", "number", "of", "artworks", "of", "each", "type", "."], "guid": 7870}}
{"text": "TV_Channel: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option; TV_series: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel; Cartoon: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel | What are the ids of the TV channels that do not have any cartoons directed by Ben Jones?", "sql": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'", "example": {"db_id": "tvshow", "query": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'", "query_toks": ["SELECT", "id", "FROM", "TV_Channel", "EXCEPT", "SELECT", "channel", "FROM", "cartoon", "WHERE", "directed_by", "=", "'Ben", "Jones", "'"], "query_toks_no_value": ["select", "id", "from", "tv_channel", "except", "select", "channel", "from", "cartoon", "where", "directed_by", "=", "value"], "question": "What are the ids of the TV channels that do not have any cartoons directed by Ben Jones?", "question_toks": ["What", "are", "the", "ids", "of", "the", "TV", "channels", "that", "do", "not", "have", "any", "cartoons", "directed", "by", "Ben", "Jones", "?"], "guid": 7871}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | What is the number of movies in which \" Jennifer Aniston \" acted after 2010 ?", "sql": "SELECT COUNT ( DISTINCT t2.title  ) FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.name  =  \"Jennifer Aniston\" AND t2.release_year  >  2010;", "example": {"db_id": "imdb", "query": "SELECT COUNT ( DISTINCT t2.title  ) FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.name  =  \"Jennifer Aniston\" AND t2.release_year  >  2010;", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "t2.title", ")", "FROM", "CAST", "AS", "t3", "JOIN", "actor", "AS", "t1", "ON", "t3.aid", "=", "t1.aid", "JOIN", "movie", "AS", "t2", "ON", "t2.mid", "=", "t3.msid", "WHERE", "t1.name", "=", "``", "Jennifer", "Aniston", "''", "AND", "t2.release_year", ">", "2010", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "t2", ".", "title", ")", "from", "cast", "as", "t3", "join", "actor", "as", "t1", "on", "t3", ".", "aid", "=", "t1", ".", "aid", "join", "movie", "as", "t2", "on", "t2", ".", "mid", "=", "t3", ".", "msid", "where", "t1", ".", "name", "=", "value", "and", "t2", ".", "release_year", ">", "value"], "question": "What is the number of movies in which \" Jennifer Aniston \" acted after 2010 ?", "question_toks": ["What", "is", "the", "number", "of", "movies", "in", "which", "``", "Jennifer", "Aniston", "``", "acted", "after", "2010", "?"], "guid": 7872}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | Find all actors from Austin born after 1980", "sql": "SELECT name FROM actor WHERE birth_city  =  \"Austin\" AND birth_year  >  1980;", "example": {"db_id": "imdb", "query": "SELECT name FROM actor WHERE birth_city  =  \"Austin\" AND birth_year  >  1980;", "query_toks": ["SELECT", "name", "FROM", "actor", "WHERE", "birth_city", "=", "``", "Austin", "''", "AND", "birth_year", ">", "1980", ";"], "query_toks_no_value": ["select", "name", "from", "actor", "where", "birth_city", "=", "value", "and", "birth_year", ">", "value"], "question": "Find all actors from Austin born after 1980", "question_toks": ["Find", "all", "actors", "from", "Austin", "born", "after", "1980"], "guid": 7873}}
{"text": "TV_Channel: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option; TV_series: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel; Cartoon: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel | What is the content of the series Sky Radio?", "sql": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";", "example": {"db_id": "tvshow", "query": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";", "query_toks": ["SELECT", "Content", "FROM", "TV_Channel", "WHERE", "series_name", "=", "``", "Sky", "Radio", "''", ";"], "query_toks_no_value": ["select", "content", "from", "tv_channel", "where", "series_name", "=", "value"], "question": "What is the content of the series Sky Radio?", "question_toks": ["What", "is", "the", "content", "of", "the", "series", "Sky", "Radio", "?"], "guid": 7874}}
{"text": "film: Film_ID, Rank_in_series, Number_in_season, Title, Directed_by, Original_air_date, Production_code; cinema: Cinema_ID, Name, Openning_year, Capacity, Location; schedule: Cinema_ID, Film_ID, Date, Show_times_per_day, Price | Show each location and the number of cinemas there.", "sql": "SELECT LOCATION ,  count(*) FROM cinema GROUP BY LOCATION", "example": {"db_id": "cinema", "query": "SELECT LOCATION ,  count(*) FROM cinema GROUP BY LOCATION", "query_toks": ["SELECT", "LOCATION", ",", "count", "(", "*", ")", "FROM", "cinema", "GROUP", "BY", "LOCATION"], "query_toks_no_value": ["select", "location", ",", "count", "(", "*", ")", "from", "cinema", "group", "by", "location"], "question": "Show each location and the number of cinemas there.", "question_toks": ["Show", "each", "location", "and", "the", "number", "of", "cinemas", "there", "."], "guid": 7875}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | How many movie reviews does each director get?", "sql": "SELECT count(*) ,  T1.director FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID GROUP BY T1.director", "example": {"db_id": "movie_1", "query": "SELECT count(*) ,  T1.director FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID GROUP BY T1.director", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "T1.director", "FROM", "Movie", "AS", "T1", "JOIN", "Rating", "AS", "T2", "ON", "T1.mID", "=", "T2.mID", "GROUP", "BY", "T1.director"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "t1", ".", "director", "from", "movie", "as", "t1", "join", "rating", "as", "t2", "on", "t1", ".", "mid", "=", "t2", ".", "mid", "group", "by", "t1", ".", "director"], "question": "How many movie reviews does each director get?", "question_toks": ["How", "many", "movie", "reviews", "does", "each", "director", "get", "?"], "guid": 7876}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | Who directed Avatar?", "sql": "SELECT director FROM Movie WHERE title  = 'Avatar'", "example": {"db_id": "movie_1", "query": "SELECT director FROM Movie WHERE title  = 'Avatar'", "query_toks": ["SELECT", "director", "FROM", "Movie", "WHERE", "title", "=", "'Avatar", "'"], "query_toks_no_value": ["select", "director", "from", "movie", "where", "title", "=", "value"], "question": "Who directed Avatar?", "question_toks": ["Who", "directed", "Avatar", "?"], "guid": 7877}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | Find the average rating star for each movie that received at least 2 ratings.", "sql": "SELECT mID ,  avg(stars) FROM Rating GROUP BY mID HAVING count(*)  >=  2", "example": {"db_id": "movie_1", "query": "SELECT mID ,  avg(stars) FROM Rating GROUP BY mID HAVING count(*)  >=  2", "query_toks": ["SELECT", "mID", ",", "avg", "(", "stars", ")", "FROM", "Rating", "GROUP", "BY", "mID", "HAVING", "count", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "mid", ",", "avg", "(", "stars", ")", "from", "rating", "group", "by", "mid", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "Find the average rating star for each movie that received at least 2 ratings.", "question_toks": ["Find", "the", "average", "rating", "star", "for", "each", "movie", "that", "received", "at", "least", "2", "ratings", "."], "guid": 7878}}
{"text": "film: Film_ID, Title, Studio, Director, Gross_in_dollar; market: Market_ID, Country, Number_cities; film_market_estimation: Estimation_ID, Low_Estimate, High_Estimate, Film_ID, Type, Market_ID, Year | What is the title of the film that has the highest high market estimation.", "sql": "SELECT t1.title FROM film AS T1 JOIN film_market_estimation AS T2  ON T1.Film_ID  =  T2.Film_ID ORDER BY high_estimate DESC LIMIT 1", "example": {"db_id": "film_rank", "query": "SELECT t1.title FROM film AS T1 JOIN film_market_estimation AS T2  ON T1.Film_ID  =  T2.Film_ID ORDER BY high_estimate DESC LIMIT 1", "query_toks": ["SELECT", "t1.title", "FROM", "film", "AS", "T1", "JOIN", "film_market_estimation", "AS", "T2", "ON", "T1.Film_ID", "=", "T2.Film_ID", "ORDER", "BY", "high_estimate", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "title", "from", "film", "as", "t1", "join", "film_market_estimation", "as", "t2", "on", "t1", ".", "film_id", "=", "t2", ".", "film_id", "order", "by", "high_estimate", "desc", "limit", "value"], "question": "What is the title of the film that has the highest high market estimation.", "question_toks": ["What", "is", "the", "title", "of", "the", "film", "that", "has", "the", "highest", "high", "market", "estimation", "."], "guid": 7879}}
{"text": "program: Program_ID, Name, Origin, Launch, Owner; channel: Channel_ID, Name, Owner, Share_in_percent, Rating_in_percent; broadcast: Channel_ID, Program_ID, Time_of_day; broadcast_share: Channel_ID, Program_ID, Date, Share_in_percent | What is the list of program names, sorted by the order of launch date?", "sql": "SELECT name FROM program ORDER BY launch", "example": {"db_id": "program_share", "query": "SELECT name FROM program ORDER BY launch", "query_toks": ["SELECT", "name", "FROM", "program", "ORDER", "BY", "launch"], "query_toks_no_value": ["select", "name", "from", "program", "order", "by", "launch"], "question": "What is the list of program names, sorted by the order of launch date?", "question_toks": ["What", "is", "the", "list", "of", "program", "names", ",", "sorted", "by", "the", "order", "of", "launch", "date", "?"], "guid": 7880}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | What year was the movie \" The Imitation Game \" produced", "sql": "SELECT release_year FROM movie WHERE title  =  \"The Imitation Game\";", "example": {"db_id": "imdb", "query": "SELECT release_year FROM movie WHERE title  =  \"The Imitation Game\";", "query_toks": ["SELECT", "release_year", "FROM", "movie", "WHERE", "title", "=", "``", "The", "Imitation", "Game", "''", ";"], "query_toks_no_value": ["select", "release_year", "from", "movie", "where", "title", "=", "value"], "question": "What year was the movie \" The Imitation Game \" produced", "question_toks": ["What", "year", "was", "the", "movie", "``", "The", "Imitation", "Game", "``", "produced"], "guid": 7881}}
{"text": "film: Film_ID, Rank_in_series, Number_in_season, Title, Directed_by, Original_air_date, Production_code; cinema: Cinema_ID, Name, Openning_year, Capacity, Location; schedule: Cinema_ID, Film_ID, Date, Show_times_per_day, Price | What are the title and director of the films without any schedule?", "sql": "SELECT title ,  directed_by FROM film WHERE film_id NOT IN (SELECT film_id FROM schedule)", "example": {"db_id": "cinema", "query": "SELECT title ,  directed_by FROM film WHERE film_id NOT IN (SELECT film_id FROM schedule)", "query_toks": ["SELECT", "title", ",", "directed_by", "FROM", "film", "WHERE", "film_id", "NOT", "IN", "(", "SELECT", "film_id", "FROM", "schedule", ")"], "query_toks_no_value": ["select", "title", ",", "directed_by", "from", "film", "where", "film_id", "not", "in", "(", "select", "film_id", "from", "schedule", ")"], "question": "What are the title and director of the films without any schedule?", "question_toks": ["What", "are", "the", "title", "and", "director", "of", "the", "films", "without", "any", "schedule", "?"], "guid": 7882}}
{"text": "film: Film_ID, Rank_in_series, Number_in_season, Title, Directed_by, Original_air_date, Production_code; cinema: Cinema_ID, Name, Openning_year, Capacity, Location; schedule: Cinema_ID, Film_ID, Date, Show_times_per_day, Price | Find the distinct locations that has a cinema.", "sql": "SELECT DISTINCT LOCATION FROM cinema", "example": {"db_id": "cinema", "query": "SELECT DISTINCT LOCATION FROM cinema", "query_toks": ["SELECT", "DISTINCT", "LOCATION", "FROM", "cinema"], "query_toks_no_value": ["select", "distinct", "location", "from", "cinema"], "question": "Find the distinct locations that has a cinema.", "question_toks": ["Find", "the", "distinct", "locations", "that", "has", "a", "cinema", "."], "guid": 7883}}
{"text": "film: Film_ID, Title, Studio, Director, Gross_in_dollar; market: Market_ID, Country, Number_cities; film_market_estimation: Estimation_ID, Low_Estimate, High_Estimate, Film_ID, Type, Market_ID, Year | What are the low and high estimates of film markets?", "sql": "SELECT Low_Estimate ,  High_Estimate FROM film_market_estimation", "example": {"db_id": "film_rank", "query": "SELECT Low_Estimate ,  High_Estimate FROM film_market_estimation", "query_toks": ["SELECT", "Low_Estimate", ",", "High_Estimate", "FROM", "film_market_estimation"], "query_toks_no_value": ["select", "low_estimate", ",", "high_estimate", "from", "film_market_estimation"], "question": "What are the low and high estimates of film markets?", "question_toks": ["What", "are", "the", "low", "and", "high", "estimates", "of", "film", "markets", "?"], "guid": 7884}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | Find the name and budget of the latest movie by \" Quentin Tarantino \"", "sql": "SELECT t3.budget  ,  t3.title FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.name  =  \"Quentin Tarantino\" ORDER BY t3.release_year DESC LIMIT 1;", "example": {"db_id": "imdb", "query": "SELECT t3.budget  ,  t3.title FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.name  =  \"Quentin Tarantino\" ORDER BY t3.release_year DESC LIMIT 1;", "query_toks": ["SELECT", "t3.budget", ",", "t3.title", "FROM", "director", "AS", "t2", "JOIN", "directed_by", "AS", "t1", "ON", "t2.did", "=", "t1.did", "JOIN", "movie", "AS", "t3", "ON", "t3.mid", "=", "t1.msid", "WHERE", "t2.name", "=", "``", "Quentin", "Tarantino", "''", "ORDER", "BY", "t3.release_year", "DESC", "LIMIT", "1", ";"], "query_toks_no_value": ["select", "t3", ".", "budget", ",", "t3", ".", "title", "from", "director", "as", "t2", "join", "directed_by", "as", "t1", "on", "t2", ".", "did", "=", "t1", ".", "did", "join", "movie", "as", "t3", "on", "t3", ".", "mid", "=", "t1", ".", "msid", "where", "t2", ".", "name", "=", "value", "order", "by", "t3", ".", "release_year", "desc", "limit", "value"], "question": "Find the name and budget of the latest movie by \" Quentin Tarantino \"", "question_toks": ["Find", "the", "name", "and", "budget", "of", "the", "latest", "movie", "by", "``", "Quentin", "Tarantino", "``"], "guid": 7885}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | Find all actors who were born in 1984", "sql": "SELECT name FROM actor WHERE birth_year  =  1984;", "example": {"db_id": "imdb", "query": "SELECT name FROM actor WHERE birth_year  =  1984;", "query_toks": ["SELECT", "name", "FROM", "actor", "WHERE", "birth_year", "=", "1984", ";"], "query_toks_no_value": ["select", "name", "from", "actor", "where", "birth_year", "=", "value"], "question": "Find all actors who were born in 1984", "question_toks": ["Find", "all", "actors", "who", "were", "born", "in", "1984"], "guid": 7886}}
{"text": "film: Film_ID, Title, Studio, Director, Gross_in_dollar; market: Market_ID, Country, Number_cities; film_market_estimation: Estimation_ID, Low_Estimate, High_Estimate, Film_ID, Type, Market_ID, Year | What are the years of film market estimation for the market of Japan, ordered by year descending?", "sql": "SELECT T1.Year FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID WHERE T2.Country  =  \"Japan\" ORDER BY T1.Year DESC", "example": {"db_id": "film_rank", "query": "SELECT T1.Year FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID WHERE T2.Country  =  \"Japan\" ORDER BY T1.Year DESC", "query_toks": ["SELECT", "T1.Year", "FROM", "film_market_estimation", "AS", "T1", "JOIN", "market", "AS", "T2", "ON", "T1.Market_ID", "=", "T2.Market_ID", "WHERE", "T2.Country", "=", "``", "Japan", "''", "ORDER", "BY", "T1.Year", "DESC"], "query_toks_no_value": ["select", "t1", ".", "year", "from", "film_market_estimation", "as", "t1", "join", "market", "as", "t2", "on", "t1", ".", "market_id", "=", "t2", ".", "market_id", "where", "t2", ".", "country", "=", "value", "order", "by", "t1", ".", "year", "desc"], "question": "What are the years of film market estimation for the market of Japan, ordered by year descending?", "question_toks": ["What", "are", "the", "years", "of", "film", "market", "estimation", "for", "the", "market", "of", "Japan", ",", "ordered", "by", "year", "descending", "?"], "guid": 7887}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | How many actors were born in \" Los Angeles \" after 2000 ?", "sql": "SELECT COUNT ( DISTINCT name  ) FROM actor WHERE birth_city  =  \"Los Angeles\" AND birth_year  >  2000;", "example": {"db_id": "imdb", "query": "SELECT COUNT ( DISTINCT name  ) FROM actor WHERE birth_city  =  \"Los Angeles\" AND birth_year  >  2000;", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "name", ")", "FROM", "actor", "WHERE", "birth_city", "=", "``", "Los", "Angeles", "''", "AND", "birth_year", ">", "2000", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "name", ")", "from", "actor", "where", "birth_city", "=", "value", "and", "birth_year", ">", "value"], "question": "How many actors were born in \" Los Angeles \" after 2000 ?", "question_toks": ["How", "many", "actors", "were", "born", "in", "``", "Los", "Angeles", "``", "after", "2000", "?"], "guid": 7888}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | What is the id of the reviewer whose name includes the word \"Mike\"?", "sql": "SELECT rID FROM Reviewer WHERE name LIKE \"%Mike%\"", "example": {"db_id": "movie_1", "query": "SELECT rID FROM Reviewer WHERE name LIKE \"%Mike%\"", "query_toks": ["SELECT", "rID", "FROM", "Reviewer", "WHERE", "name", "LIKE", "``", "%", "Mike", "%", "''"], "query_toks_no_value": ["select", "rid", "from", "reviewer", "where", "name", "like", "value"], "question": "What is the id of the reviewer whose name includes the word \"Mike\"?", "question_toks": ["What", "is", "the", "id", "of", "the", "reviewer", "whose", "name", "includes", "the", "word", "``", "Mike", "''", "?"], "guid": 7889}}
{"text": "program: Program_ID, Name, Origin, Launch, Owner; channel: Channel_ID, Name, Owner, Share_in_percent, Rating_in_percent; broadcast: Channel_ID, Program_ID, Time_of_day; broadcast_share: Channel_ID, Program_ID, Date, Share_in_percent | What is the total rating of channel for each channel owner?", "sql": "SELECT sum(Rating_in_percent) ,  OWNER FROM channel GROUP BY OWNER", "example": {"db_id": "program_share", "query": "SELECT sum(Rating_in_percent) ,  OWNER FROM channel GROUP BY OWNER", "query_toks": ["SELECT", "sum", "(", "Rating_in_percent", ")", ",", "OWNER", "FROM", "channel", "GROUP", "BY", "OWNER"], "query_toks_no_value": ["select", "sum", "(", "rating_in_percent", ")", ",", "owner", "from", "channel", "group", "by", "owner"], "question": "What is the total rating of channel for each channel owner?", "question_toks": ["What", "is", "the", "total", "rating", "of", "channel", "for", "each", "channel", "owner", "?"], "guid": 7890}}
{"text": "program: Program_ID, Name, Origin, Launch, Owner; channel: Channel_ID, Name, Owner, Share_in_percent, Rating_in_percent; broadcast: Channel_ID, Program_ID, Time_of_day; broadcast_share: Channel_ID, Program_ID, Date, Share_in_percent | What is the total share (in percent) of all the channels owned by CCTV?", "sql": "SELECT sum(Share_in_percent) FROM channel WHERE OWNER  =  'CCTV'", "example": {"db_id": "program_share", "query": "SELECT sum(Share_in_percent) FROM channel WHERE OWNER  =  'CCTV'", "query_toks": ["SELECT", "sum", "(", "Share_in_percent", ")", "FROM", "channel", "WHERE", "OWNER", "=", "'CCTV", "'"], "query_toks_no_value": ["select", "sum", "(", "share_in_percent", ")", "from", "channel", "where", "owner", "=", "value"], "question": "What is the total share (in percent) of all the channels owned by CCTV?", "question_toks": ["What", "is", "the", "total", "share", "(", "in", "percent", ")", "of", "all", "the", "channels", "owned", "by", "CCTV", "?"], "guid": 7891}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | What are all the movies featuring \" Robin Wright \" ?", "sql": "SELECT t2.title FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.name  =  \"Robin Wright\";", "example": {"db_id": "imdb", "query": "SELECT t2.title FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.name  =  \"Robin Wright\";", "query_toks": ["SELECT", "t2.title", "FROM", "CAST", "AS", "t3", "JOIN", "actor", "AS", "t1", "ON", "t3.aid", "=", "t1.aid", "JOIN", "movie", "AS", "t2", "ON", "t2.mid", "=", "t3.msid", "WHERE", "t1.name", "=", "``", "Robin", "Wright", "''", ";"], "query_toks_no_value": ["select", "t2", ".", "title", "from", "cast", "as", "t3", "join", "actor", "as", "t1", "on", "t3", ".", "aid", "=", "t1", ".", "aid", "join", "movie", "as", "t2", "on", "t2", ".", "mid", "=", "t3", ".", "msid", "where", "t1", ".", "name", "=", "value"], "question": "What are all the movies featuring \" Robin Wright \" ?", "question_toks": ["What", "are", "all", "the", "movies", "featuring", "``", "Robin", "Wright", "``", "?"], "guid": 7892}}
{"text": "film: Film_ID, Title, Studio, Director, Gross_in_dollar; market: Market_ID, Country, Number_cities; film_market_estimation: Estimation_ID, Low_Estimate, High_Estimate, Film_ID, Type, Market_ID, Year | What are the countries for each market, ordered alphabetically?", "sql": "SELECT Country FROM market ORDER BY Country ASC", "example": {"db_id": "film_rank", "query": "SELECT Country FROM market ORDER BY Country ASC", "query_toks": ["SELECT", "Country", "FROM", "market", "ORDER", "BY", "Country", "ASC"], "query_toks_no_value": ["select", "country", "from", "market", "order", "by", "country", "asc"], "question": "What are the countries for each market, ordered alphabetically?", "question_toks": ["What", "are", "the", "countries", "for", "each", "market", ",", "ordered", "alphabetically", "?"], "guid": 7893}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | What are the titles of all movies that have not been rated?", "sql": "SELECT title FROM Movie WHERE mID NOT IN (SELECT mID FROM Rating)", "example": {"db_id": "movie_1", "query": "SELECT title FROM Movie WHERE mID NOT IN (SELECT mID FROM Rating)", "query_toks": ["SELECT", "title", "FROM", "Movie", "WHERE", "mID", "NOT", "IN", "(", "SELECT", "mID", "FROM", "Rating", ")"], "query_toks_no_value": ["select", "title", "from", "movie", "where", "mid", "not", "in", "(", "select", "mid", "from", "rating", ")"], "question": "What are the titles of all movies that have not been rated?", "question_toks": ["What", "are", "the", "titles", "of", "all", "movies", "that", "have", "not", "been", "rated", "?"], "guid": 7894}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | find the ids of reviewers who did not give 4 star.", "sql": "SELECT rID FROM Rating EXCEPT SELECT rID FROM Rating WHERE stars  =  4", "example": {"db_id": "movie_1", "query": "SELECT rID FROM Rating EXCEPT SELECT rID FROM Rating WHERE stars  =  4", "query_toks": ["SELECT", "rID", "FROM", "Rating", "EXCEPT", "SELECT", "rID", "FROM", "Rating", "WHERE", "stars", "=", "4"], "query_toks_no_value": ["select", "rid", "from", "rating", "except", "select", "rid", "from", "rating", "where", "stars", "=", "value"], "question": "find the ids of reviewers who did not give 4 star.", "question_toks": ["find", "the", "ids", "of", "reviewers", "who", "did", "not", "give", "4", "star", "."], "guid": 7895}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | What are the names of all movies made before 1980 or had James Cameron as the director?", "sql": "SELECT title FROM Movie WHERE director  =  \"James Cameron\" OR YEAR   <  1980", "example": {"db_id": "movie_1", "query": "SELECT title FROM Movie WHERE director  =  \"James Cameron\" OR YEAR   <  1980", "query_toks": ["SELECT", "title", "FROM", "Movie", "WHERE", "director", "=", "``", "James", "Cameron", "''", "OR", "YEAR", "<", "1980"], "query_toks_no_value": ["select", "title", "from", "movie", "where", "director", "=", "value", "or", "year", "<", "value"], "question": "What are the names of all movies made before 1980 or had James Cameron as the director?", "question_toks": ["What", "are", "the", "names", "of", "all", "movies", "made", "before", "1980", "or", "had", "James", "Cameron", "as", "the", "director", "?"], "guid": 7896}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | Find all movies featuring \" Jason Robards \" and \" Woody Strode \"", "sql": "SELECT t4.title FROM CAST AS t5 JOIN actor AS t1 ON t5.aid  =  t1.aid JOIN movie AS t4 ON t4.mid  =  t5.msid JOIN CAST AS t3 ON t4.mid  =  t3.msid JOIN actor AS t2 ON t3.aid  =  t2.aid WHERE t1.name  =  \"Woody Strode\" AND t2.name  =  \"Jason Robards\";", "example": {"db_id": "imdb", "query": "SELECT t4.title FROM CAST AS t5 JOIN actor AS t1 ON t5.aid  =  t1.aid JOIN movie AS t4 ON t4.mid  =  t5.msid JOIN CAST AS t3 ON t4.mid  =  t3.msid JOIN actor AS t2 ON t3.aid  =  t2.aid WHERE t1.name  =  \"Woody Strode\" AND t2.name  =  \"Jason Robards\";", "query_toks": ["SELECT", "t4.title", "FROM", "CAST", "AS", "t5", "JOIN", "actor", "AS", "t1", "ON", "t5.aid", "=", "t1.aid", "JOIN", "movie", "AS", "t4", "ON", "t4.mid", "=", "t5.msid", "JOIN", "CAST", "AS", "t3", "ON", "t4.mid", "=", "t3.msid", "JOIN", "actor", "AS", "t2", "ON", "t3.aid", "=", "t2.aid", "WHERE", "t1.name", "=", "``", "Woody", "Strode", "''", "AND", "t2.name", "=", "``", "Jason", "Robards", "''", ";"], "query_toks_no_value": ["select", "t4", ".", "title", "from", "cast", "as", "t5", "join", "actor", "as", "t1", "on", "t5", ".", "aid", "=", "t1", ".", "aid", "join", "movie", "as", "t4", "on", "t4", ".", "mid", "=", "t5", ".", "msid", "join", "cast", "as", "t3", "on", "t4", ".", "mid", "=", "t3", ".", "msid", "join", "actor", "as", "t2", "on", "t3", ".", "aid", "=", "t2", ".", "aid", "where", "t1", ".", "name", "=", "value", "and", "t2", ".", "name", "=", "value"], "question": "Find all movies featuring \" Jason Robards \" and \" Woody Strode \"", "question_toks": ["Find", "all", "movies", "featuring", "``", "Jason", "Robards", "``", "and", "``", "Woody", "Strode", "``"], "guid": 7897}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | What are the names of all directors who have made one movie except for the director named NULL?", "sql": "SELECT director FROM Movie WHERE director != \"null\" GROUP BY director HAVING count(*)  =  1", "example": {"db_id": "movie_1", "query": "SELECT director FROM Movie WHERE director != \"null\" GROUP BY director HAVING count(*)  =  1", "query_toks": ["SELECT", "director", "FROM", "Movie", "WHERE", "director", "!", "=", "``", "null", "''", "GROUP", "BY", "director", "HAVING", "count", "(", "*", ")", "=", "1"], "query_toks_no_value": ["select", "director", "from", "movie", "where", "director", "!", "=", "value", "group", "by", "director", "having", "count", "(", "*", ")", "=", "value"], "question": "What are the names of all directors who have made one movie except for the director named NULL?", "question_toks": ["What", "are", "the", "names", "of", "all", "directors", "who", "have", "made", "one", "movie", "except", "for", "the", "director", "named", "NULL", "?"], "guid": 7898}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | When was \" Kevin Spacey \" born ?", "sql": "SELECT birth_year FROM actor WHERE name  =  \"actor_name0\";", "example": {"db_id": "imdb", "query": "SELECT birth_year FROM actor WHERE name  =  \"actor_name0\";", "query_toks": ["SELECT", "birth_year", "FROM", "actor", "WHERE", "name", "=", "``", "actor_name0", "''", ";"], "query_toks_no_value": ["select", "birth_year", "from", "actor", "where", "name", "=", "value"], "question": "When was \" Kevin Spacey \" born ?", "question_toks": ["When", "was", "``", "Kevin", "Spacey", "``", "born", "?"], "guid": 7899}}
{"text": "film: Film_ID, Title, Studio, Director, Gross_in_dollar; market: Market_ID, Country, Number_cities; film_market_estimation: Estimation_ID, Low_Estimate, High_Estimate, Film_ID, Type, Market_ID, Year | List the names of studios that have at least two films.", "sql": "SELECT Studio FROM film GROUP BY Studio HAVING COUNT(*)  >=  2", "example": {"db_id": "film_rank", "query": "SELECT Studio FROM film GROUP BY Studio HAVING COUNT(*)  >=  2", "query_toks": ["SELECT", "Studio", "FROM", "film", "GROUP", "BY", "Studio", "HAVING", "COUNT", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "studio", "from", "film", "group", "by", "studio", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "List the names of studios that have at least two films.", "question_toks": ["List", "the", "names", "of", "studios", "that", "have", "at", "least", "two", "films", "."], "guid": 7900}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | What is the lowest and highest rating star?", "sql": "SELECT max(stars) ,  min(stars) FROM Rating", "example": {"db_id": "movie_1", "query": "SELECT max(stars) ,  min(stars) FROM Rating", "query_toks": ["SELECT", "max", "(", "stars", ")", ",", "min", "(", "stars", ")", "FROM", "Rating"], "query_toks_no_value": ["select", "max", "(", "stars", ")", ",", "min", "(", "stars", ")", "from", "rating"], "question": "What is the lowest and highest rating star?", "question_toks": ["What", "is", "the", "lowest", "and", "highest", "rating", "star", "?"], "guid": 7901}}
{"text": "program: Program_ID, Name, Origin, Launch, Owner; channel: Channel_ID, Name, Owner, Share_in_percent, Rating_in_percent; broadcast: Channel_ID, Program_ID, Time_of_day; broadcast_share: Channel_ID, Program_ID, Date, Share_in_percent | Which channels broadcast both in the morning and at night? Give me the channel names.", "sql": "SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Morning' INTERSECT SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Night'", "example": {"db_id": "program_share", "query": "SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Morning' INTERSECT SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Night'", "query_toks": ["SELECT", "t1.name", "FROM", "channel", "AS", "t1", "JOIN", "broadcast", "AS", "t2", "ON", "t1.channel_id", "=", "t2.channel_id", "WHERE", "t2.time_of_day", "=", "'Morning", "'", "INTERSECT", "SELECT", "t1.name", "FROM", "channel", "AS", "t1", "JOIN", "broadcast", "AS", "t2", "ON", "t1.channel_id", "=", "t2.channel_id", "WHERE", "t2.time_of_day", "=", "'Night", "'"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "channel", "as", "t1", "join", "broadcast", "as", "t2", "on", "t1", ".", "channel_id", "=", "t2", ".", "channel_id", "where", "t2", ".", "time_of_day", "=", "value", "intersect", "select", "t1", ".", "name", "from", "channel", "as", "t1", "join", "broadcast", "as", "t2", "on", "t1", ".", "channel_id", "=", "t2", ".", "channel_id", "where", "t2", ".", "time_of_day", "=", "value"], "question": "Which channels broadcast both in the morning and at night? Give me the channel names.", "question_toks": ["Which", "channels", "broadcast", "both", "in", "the", "morning", "and", "at", "night", "?", "Give", "me", "the", "channel", "names", "."], "guid": 7902}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | What is the reviewer name, film title, movie rating, and rating date  for every movie ordered by reviewer name, movie title, then finally rating?", "sql": "SELECT T3.name ,  T2.title ,  T1.stars ,  T1.ratingDate FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID ORDER BY T3.name ,  T2.title ,  T1.stars", "example": {"db_id": "movie_1", "query": "SELECT T3.name ,  T2.title ,  T1.stars ,  T1.ratingDate FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID ORDER BY T3.name ,  T2.title ,  T1.stars", "query_toks": ["SELECT", "T3.name", ",", "T2.title", ",", "T1.stars", ",", "T1.ratingDate", "FROM", "Rating", "AS", "T1", "JOIN", "Movie", "AS", "T2", "ON", "T1.mID", "=", "T2.mID", "JOIN", "Reviewer", "AS", "T3", "ON", "T1.rID", "=", "T3.rID", "ORDER", "BY", "T3.name", ",", "T2.title", ",", "T1.stars"], "query_toks_no_value": ["select", "t3", ".", "name", ",", "t2", ".", "title", ",", "t1", ".", "stars", ",", "t1", ".", "ratingdate", "from", "rating", "as", "t1", "join", "movie", "as", "t2", "on", "t1", ".", "mid", "=", "t2", ".", "mid", "join", "reviewer", "as", "t3", "on", "t1", ".", "rid", "=", "t3", ".", "rid", "order", "by", "t3", ".", "name", ",", "t2", ".", "title", ",", "t1", ".", "stars"], "question": "What is the reviewer name, film title, movie rating, and rating date  for every movie ordered by reviewer name, movie title, then finally rating?", "question_toks": ["What", "is", "the", "reviewer", "name", ",", "film", "title", ",", "movie", "rating", ",", "and", "rating", "date", "for", "every", "movie", "ordered", "by", "reviewer", "name", ",", "movie", "title", ",", "then", "finally", "rating", "?"], "guid": 7903}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | Find all movies featuring \" Robin Wright \"", "sql": "SELECT t2.title FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.name  =  \"Robin Wright\";", "example": {"db_id": "imdb", "query": "SELECT t2.title FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.name  =  \"Robin Wright\";", "query_toks": ["SELECT", "t2.title", "FROM", "CAST", "AS", "t3", "JOIN", "actor", "AS", "t1", "ON", "t3.aid", "=", "t1.aid", "JOIN", "movie", "AS", "t2", "ON", "t2.mid", "=", "t3.msid", "WHERE", "t1.name", "=", "``", "Robin", "Wright", "''", ";"], "query_toks_no_value": ["select", "t2", ".", "title", "from", "cast", "as", "t3", "join", "actor", "as", "t1", "on", "t3", ".", "aid", "=", "t1", ".", "aid", "join", "movie", "as", "t2", "on", "t2", ".", "mid", "=", "t3", ".", "msid", "where", "t1", ".", "name", "=", "value"], "question": "Find all movies featuring \" Robin Wright \"", "question_toks": ["Find", "all", "movies", "featuring", "``", "Robin", "Wright", "``"], "guid": 7904}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | What are the titles of all movies that James Cameron directed after 2000?", "sql": "SELECT title FROM Movie WHERE director = 'James Cameron' AND YEAR  >  2000", "example": {"db_id": "movie_1", "query": "SELECT title FROM Movie WHERE director = 'James Cameron' AND YEAR  >  2000", "query_toks": ["SELECT", "title", "FROM", "Movie", "WHERE", "director", "=", "'James", "Cameron", "'", "AND", "YEAR", ">", "2000"], "query_toks_no_value": ["select", "title", "from", "movie", "where", "director", "=", "value", "and", "year", ">", "value"], "question": "What are the titles of all movies that James Cameron directed after 2000?", "question_toks": ["What", "are", "the", "titles", "of", "all", "movies", "that", "James", "Cameron", "directed", "after", "2000", "?"], "guid": 7905}}
{"text": "festival_detail: Festival_ID, Festival_Name, Chair_Name, Location, Year, Num_of_Audience; artwork: Artwork_ID, Type, Name; nomination: Artwork_ID, Festival_ID, Result | In which year are there festivals both inside the 'United States' and outside the 'United States'?", "sql": "SELECT YEAR FROM festival_detail WHERE LOCATION  =  'United States' INTERSECT SELECT YEAR FROM festival_detail WHERE LOCATION != 'United States'", "example": {"db_id": "entertainment_awards", "query": "SELECT YEAR FROM festival_detail WHERE LOCATION  =  'United States' INTERSECT SELECT YEAR FROM festival_detail WHERE LOCATION != 'United States'", "query_toks": ["SELECT", "YEAR", "FROM", "festival_detail", "WHERE", "LOCATION", "=", "'United", "States", "'", "INTERSECT", "SELECT", "YEAR", "FROM", "festival_detail", "WHERE", "LOCATION", "!", "=", "'United", "States", "'"], "query_toks_no_value": ["select", "year", "from", "festival_detail", "where", "location", "=", "value", "intersect", "select", "year", "from", "festival_detail", "where", "location", "!", "=", "value"], "question": "In which year are there festivals both inside the 'United States' and outside the 'United States'?", "question_toks": ["In", "which", "year", "are", "there", "festivals", "both", "inside", "the", "'United", "States", "'", "and", "outside", "the", "'United", "States", "'", "?"], "guid": 7906}}
{"text": "program: Program_ID, Name, Origin, Launch, Owner; channel: Channel_ID, Name, Owner, Share_in_percent, Rating_in_percent; broadcast: Channel_ID, Program_ID, Time_of_day; broadcast_share: Channel_ID, Program_ID, Date, Share_in_percent | Who are the owners of the programs that broadcast both in the morning and at night?", "sql": "SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  \"Morning\" INTERSECT SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  \"Night\"", "example": {"db_id": "program_share", "query": "SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  \"Morning\" INTERSECT SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  \"Night\"", "query_toks": ["SELECT", "t1.owner", "FROM", "program", "AS", "t1", "JOIN", "broadcast", "AS", "t2", "ON", "t1.program_id", "=", "t2.program_id", "WHERE", "t2.Time_of_day", "=", "``", "Morning", "''", "INTERSECT", "SELECT", "t1.owner", "FROM", "program", "AS", "t1", "JOIN", "broadcast", "AS", "t2", "ON", "t1.program_id", "=", "t2.program_id", "WHERE", "t2.Time_of_day", "=", "``", "Night", "''"], "query_toks_no_value": ["select", "t1", ".", "owner", "from", "program", "as", "t1", "join", "broadcast", "as", "t2", "on", "t1", ".", "program_id", "=", "t2", ".", "program_id", "where", "t2", ".", "time_of_day", "=", "value", "intersect", "select", "t1", ".", "owner", "from", "program", "as", "t1", "join", "broadcast", "as", "t2", "on", "t1", ".", "program_id", "=", "t2", ".", "program_id", "where", "t2", ".", "time_of_day", "=", "value"], "question": "Who are the owners of the programs that broadcast both in the morning and at night?", "question_toks": ["Who", "are", "the", "owners", "of", "the", "programs", "that", "broadcast", "both", "in", "the", "morning", "and", "at", "night", "?"], "guid": 7907}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | How many movies are there that are directed by \" Asghar Farhadi \" and featuring \" Taraneh Alidoosti \" ?", "sql": "SELECT t4.title FROM CAST AS t5 JOIN actor AS t1 ON t5.aid  =  t1.aid JOIN movie AS t4 ON t4.mid  =  t5.msid JOIN directed_by AS t2 ON t4.mid  =  t2.msid JOIN director AS t3 ON t3.did  =  t2.did WHERE t1.name  =  \"Taraneh Alidoosti\" AND t3.name  =  \"Asghar Farhadi\";", "example": {"db_id": "imdb", "query": "SELECT t4.title FROM CAST AS t5 JOIN actor AS t1 ON t5.aid  =  t1.aid JOIN movie AS t4 ON t4.mid  =  t5.msid JOIN directed_by AS t2 ON t4.mid  =  t2.msid JOIN director AS t3 ON t3.did  =  t2.did WHERE t1.name  =  \"Taraneh Alidoosti\" AND t3.name  =  \"Asghar Farhadi\";", "query_toks": ["SELECT", "t4.title", "FROM", "CAST", "AS", "t5", "JOIN", "actor", "AS", "t1", "ON", "t5.aid", "=", "t1.aid", "JOIN", "movie", "AS", "t4", "ON", "t4.mid", "=", "t5.msid", "JOIN", "directed_by", "AS", "t2", "ON", "t4.mid", "=", "t2.msid", "JOIN", "director", "AS", "t3", "ON", "t3.did", "=", "t2.did", "WHERE", "t1.name", "=", "``", "Taraneh", "Alidoosti", "''", "AND", "t3.name", "=", "``", "Asghar", "Farhadi", "''", ";"], "query_toks_no_value": ["select", "t4", ".", "title", "from", "cast", "as", "t5", "join", "actor", "as", "t1", "on", "t5", ".", "aid", "=", "t1", ".", "aid", "join", "movie", "as", "t4", "on", "t4", ".", "mid", "=", "t5", ".", "msid", "join", "directed_by", "as", "t2", "on", "t4", ".", "mid", "=", "t2", ".", "msid", "join", "director", "as", "t3", "on", "t3", ".", "did", "=", "t2", ".", "did", "where", "t1", ".", "name", "=", "value", "and", "t3", ".", "name", "=", "value"], "question": "How many movies are there that are directed by \" Asghar Farhadi \" and featuring \" Taraneh Alidoosti \" ?", "question_toks": ["How", "many", "movies", "are", "there", "that", "are", "directed", "by", "``", "Asghar", "Farhadi", "``", "and", "featuring", "``", "Taraneh", "Alidoosti", "``", "?"], "guid": 7908}}
{"text": "film: Film_ID, Rank_in_series, Number_in_season, Title, Directed_by, Original_air_date, Production_code; cinema: Cinema_ID, Name, Openning_year, Capacity, Location; schedule: Cinema_ID, Film_ID, Date, Show_times_per_day, Price | Give me the title and highest price for each film.", "sql": "SELECT T2.title ,  max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id", "example": {"db_id": "cinema", "query": "SELECT T2.title ,  max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id", "query_toks": ["SELECT", "T2.title", ",", "max", "(", "T1.price", ")", "FROM", "schedule", "AS", "T1", "JOIN", "film", "AS", "T2", "ON", "T1.film_id", "=", "T2.film_id", "GROUP", "BY", "T1.film_id"], "query_toks_no_value": ["select", "t2", ".", "title", ",", "max", "(", "t1", ".", "price", ")", "from", "schedule", "as", "t1", "join", "film", "as", "t2", "on", "t1", ".", "film_id", "=", "t2", ".", "film_id", "group", "by", "t1", ".", "film_id"], "question": "Give me the title and highest price for each film.", "question_toks": ["Give", "me", "the", "title", "and", "highest", "price", "for", "each", "film", "."], "guid": 7909}}
{"text": "TV_Channel: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option; TV_series: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel; Cartoon: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel | find id of the tv channels that from the countries where have more than two tv channels.", "sql": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2", "example": {"db_id": "tvshow", "query": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2", "query_toks": ["SELECT", "id", "FROM", "tv_channel", "GROUP", "BY", "country", "HAVING", "count", "(", "*", ")", ">", "2"], "query_toks_no_value": ["select", "id", "from", "tv_channel", "group", "by", "country", "having", "count", "(", "*", ")", ">", "value"], "question": "find id of the tv channels that from the countries where have more than two tv channels.", "question_toks": ["find", "id", "of", "the", "tv", "channels", "that", "from", "the", "countries", "where", "have", "more", "than", "two", "tv", "channels", "."], "guid": 7910}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | List all the movies directed by \" Asghar Farhadi \" in which \" Taraneh Alidoosti \" played", "sql": "SELECT t4.title FROM CAST AS t5 JOIN actor AS t1 ON t5.aid  =  t1.aid JOIN movie AS t4 ON t4.mid  =  t5.msid JOIN directed_by AS t2 ON t4.mid  =  t2.msid JOIN director AS t3 ON t3.did  =  t2.did WHERE t1.name  =  \"Taraneh Alidoosti\" AND t3.name  =  \"Asghar Farhadi\";", "example": {"db_id": "imdb", "query": "SELECT t4.title FROM CAST AS t5 JOIN actor AS t1 ON t5.aid  =  t1.aid JOIN movie AS t4 ON t4.mid  =  t5.msid JOIN directed_by AS t2 ON t4.mid  =  t2.msid JOIN director AS t3 ON t3.did  =  t2.did WHERE t1.name  =  \"Taraneh Alidoosti\" AND t3.name  =  \"Asghar Farhadi\";", "query_toks": ["SELECT", "t4.title", "FROM", "CAST", "AS", "t5", "JOIN", "actor", "AS", "t1", "ON", "t5.aid", "=", "t1.aid", "JOIN", "movie", "AS", "t4", "ON", "t4.mid", "=", "t5.msid", "JOIN", "directed_by", "AS", "t2", "ON", "t4.mid", "=", "t2.msid", "JOIN", "director", "AS", "t3", "ON", "t3.did", "=", "t2.did", "WHERE", "t1.name", "=", "``", "Taraneh", "Alidoosti", "''", "AND", "t3.name", "=", "``", "Asghar", "Farhadi", "''", ";"], "query_toks_no_value": ["select", "t4", ".", "title", "from", "cast", "as", "t5", "join", "actor", "as", "t1", "on", "t5", ".", "aid", "=", "t1", ".", "aid", "join", "movie", "as", "t4", "on", "t4", ".", "mid", "=", "t5", ".", "msid", "join", "directed_by", "as", "t2", "on", "t4", ".", "mid", "=", "t2", ".", "msid", "join", "director", "as", "t3", "on", "t3", ".", "did", "=", "t2", ".", "did", "where", "t1", ".", "name", "=", "value", "and", "t3", ".", "name", "=", "value"], "question": "List all the movies directed by \" Asghar Farhadi \" in which \" Taraneh Alidoosti \" played", "question_toks": ["List", "all", "the", "movies", "directed", "by", "``", "Asghar", "Farhadi", "``", "in", "which", "``", "Taraneh", "Alidoosti", "``", "played"], "guid": 7911}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | Return reviewer name, movie title, stars, and ratingDate. And sort the data first by reviewer name, then by movie title, and lastly by number of stars.", "sql": "SELECT T3.name ,  T2.title ,  T1.stars ,  T1.ratingDate FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID ORDER BY T3.name ,  T2.title ,  T1.stars", "example": {"db_id": "movie_1", "query": "SELECT T3.name ,  T2.title ,  T1.stars ,  T1.ratingDate FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID ORDER BY T3.name ,  T2.title ,  T1.stars", "query_toks": ["SELECT", "T3.name", ",", "T2.title", ",", "T1.stars", ",", "T1.ratingDate", "FROM", "Rating", "AS", "T1", "JOIN", "Movie", "AS", "T2", "ON", "T1.mID", "=", "T2.mID", "JOIN", "Reviewer", "AS", "T3", "ON", "T1.rID", "=", "T3.rID", "ORDER", "BY", "T3.name", ",", "T2.title", ",", "T1.stars"], "query_toks_no_value": ["select", "t3", ".", "name", ",", "t2", ".", "title", ",", "t1", ".", "stars", ",", "t1", ".", "ratingdate", "from", "rating", "as", "t1", "join", "movie", "as", "t2", "on", "t1", ".", "mid", "=", "t2", ".", "mid", "join", "reviewer", "as", "t3", "on", "t1", ".", "rid", "=", "t3", ".", "rid", "order", "by", "t3", ".", "name", ",", "t2", ".", "title", ",", "t1", ".", "stars"], "question": "Return reviewer name, movie title, stars, and ratingDate. And sort the data first by reviewer name, then by movie title, and lastly by number of stars.", "question_toks": ["Return", "reviewer", "name", ",", "movie", "title", ",", "stars", ",", "and", "ratingDate", ".", "And", "sort", "the", "data", "first", "by", "reviewer", "name", ",", "then", "by", "movie", "title", ",", "and", "lastly", "by", "number", "of", "stars", "."], "guid": 7912}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | which movie has the most number of actors from China ?", "sql": "SELECT t2.title FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.nationality  =  \"China\" GROUP BY t2.title ORDER BY COUNT ( DISTINCT t1.name  ) DESC LIMIT 1;", "example": {"db_id": "imdb", "query": "SELECT t2.title FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.nationality  =  \"China\" GROUP BY t2.title ORDER BY COUNT ( DISTINCT t1.name  ) DESC LIMIT 1;", "query_toks": ["SELECT", "t2.title", "FROM", "CAST", "AS", "t3", "JOIN", "actor", "AS", "t1", "ON", "t3.aid", "=", "t1.aid", "JOIN", "movie", "AS", "t2", "ON", "t2.mid", "=", "t3.msid", "WHERE", "t1.nationality", "=", "``", "China", "''", "GROUP", "BY", "t2.title", "ORDER", "BY", "COUNT", "(", "DISTINCT", "t1.name", ")", "DESC", "LIMIT", "1", ";"], "query_toks_no_value": ["select", "t2", ".", "title", "from", "cast", "as", "t3", "join", "actor", "as", "t1", "on", "t3", ".", "aid", "=", "t1", ".", "aid", "join", "movie", "as", "t2", "on", "t2", ".", "mid", "=", "t3", ".", "msid", "where", "t1", ".", "nationality", "=", "value", "group", "by", "t2", ".", "title", "order", "by", "count", "(", "distinct", "t1", ".", "name", ")", "desc", "limit", "value"], "question": "which movie has the most number of actors from China ?", "question_toks": ["which", "movie", "has", "the", "most", "number", "of", "actors", "from", "China", "?"], "guid": 7913}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | What are the ids of the movies that are not reviewed by Brittany Harris.", "sql": "SELECT mID FROM Rating EXCEPT SELECT T1.mID FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T2.name  =  \"Brittany Harris\"", "example": {"db_id": "movie_1", "query": "SELECT mID FROM Rating EXCEPT SELECT T1.mID FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T2.name  =  \"Brittany Harris\"", "query_toks": ["SELECT", "mID", "FROM", "Rating", "EXCEPT", "SELECT", "T1.mID", "FROM", "Rating", "AS", "T1", "JOIN", "Reviewer", "AS", "T2", "ON", "T1.rID", "=", "T2.rID", "WHERE", "T2.name", "=", "``", "Brittany", "Harris", "''"], "query_toks_no_value": ["select", "mid", "from", "rating", "except", "select", "t1", ".", "mid", "from", "rating", "as", "t1", "join", "reviewer", "as", "t2", "on", "t1", ".", "rid", "=", "t2", ".", "rid", "where", "t2", ".", "name", "=", "value"], "question": "What are the ids of the movies that are not reviewed by Brittany Harris.", "question_toks": ["What", "are", "the", "ids", "of", "the", "movies", "that", "are", "not", "reviewed", "by", "Brittany", "Harris", "."], "guid": 7914}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | What are the names of all directors whose movies have been reviewed by Sarah Martinez?", "sql": "SELECT DISTINCT T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Sarah Martinez'", "example": {"db_id": "movie_1", "query": "SELECT DISTINCT T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Sarah Martinez'", "query_toks": ["SELECT", "DISTINCT", "T2.director", "FROM", "Rating", "AS", "T1", "JOIN", "Movie", "AS", "T2", "ON", "T1.mID", "=", "T2.mID", "JOIN", "Reviewer", "AS", "T3", "ON", "T1.rID", "=", "T3.rID", "WHERE", "T3.name", "=", "'Sarah", "Martinez", "'"], "query_toks_no_value": ["select", "distinct", "t2", ".", "director", "from", "rating", "as", "t1", "join", "movie", "as", "t2", "on", "t1", ".", "mid", "=", "t2", ".", "mid", "join", "reviewer", "as", "t3", "on", "t1", ".", "rid", "=", "t3", ".", "rid", "where", "t3", ".", "name", "=", "value"], "question": "What are the names of all directors whose movies have been reviewed by Sarah Martinez?", "question_toks": ["What", "are", "the", "names", "of", "all", "directors", "whose", "movies", "have", "been", "reviewed", "by", "Sarah", "Martinez", "?"], "guid": 7915}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | What is the number of movies that \" Brad Pitt \" acts in per year ?", "sql": "SELECT COUNT ( DISTINCT t2.title  )  ,  t2.release_year FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.name  =  \"Brad Pitt\" GROUP BY t2.release_year;", "example": {"db_id": "imdb", "query": "SELECT COUNT ( DISTINCT t2.title  )  ,  t2.release_year FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.name  =  \"Brad Pitt\" GROUP BY t2.release_year;", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "t2.title", ")", ",", "t2.release_year", "FROM", "CAST", "AS", "t3", "JOIN", "actor", "AS", "t1", "ON", "t3.aid", "=", "t1.aid", "JOIN", "movie", "AS", "t2", "ON", "t2.mid", "=", "t3.msid", "WHERE", "t1.name", "=", "``", "Brad", "Pitt", "''", "GROUP", "BY", "t2.release_year", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "t2", ".", "title", ")", ",", "t2", ".", "release_year", "from", "cast", "as", "t3", "join", "actor", "as", "t1", "on", "t3", ".", "aid", "=", "t1", ".", "aid", "join", "movie", "as", "t2", "on", "t2", ".", "mid", "=", "t3", ".", "msid", "where", "t1", ".", "name", "=", "value", "group", "by", "t2", ".", "release_year"], "question": "What is the number of movies that \" Brad Pitt \" acts in per year ?", "question_toks": ["What", "is", "the", "number", "of", "movies", "that", "``", "Brad", "Pitt", "``", "acts", "in", "per", "year", "?"], "guid": 7916}}
{"text": "TV_Channel: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option; TV_series: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel; Cartoon: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel | What are all of the episodes ordered by ratings?", "sql": "SELECT Episode FROM TV_series ORDER BY rating", "example": {"db_id": "tvshow", "query": "SELECT Episode FROM TV_series ORDER BY rating", "query_toks": ["SELECT", "Episode", "FROM", "TV_series", "ORDER", "BY", "rating"], "query_toks_no_value": ["select", "episode", "from", "tv_series", "order", "by", "rating"], "question": "What are all of the episodes ordered by ratings?", "question_toks": ["What", "are", "all", "of", "the", "episodes", "ordered", "by", "ratings", "?"], "guid": 7917}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | Find all years that have a movie that received a rating of 4 or 5, and sort them in increasing order of year.", "sql": "SELECT DISTINCT YEAR FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID WHERE T2.stars  >=  4 ORDER BY T1.year", "example": {"db_id": "movie_1", "query": "SELECT DISTINCT YEAR FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID WHERE T2.stars  >=  4 ORDER BY T1.year", "query_toks": ["SELECT", "DISTINCT", "YEAR", "FROM", "Movie", "AS", "T1", "JOIN", "Rating", "AS", "T2", "ON", "T1.mID", "=", "T2.mID", "WHERE", "T2.stars", ">", "=", "4", "ORDER", "BY", "T1.year"], "query_toks_no_value": ["select", "distinct", "year", "from", "movie", "as", "t1", "join", "rating", "as", "t2", "on", "t1", ".", "mid", "=", "t2", ".", "mid", "where", "t2", ".", "stars", ">", "=", "value", "order", "by", "t1", ".", "year"], "question": "Find all years that have a movie that received a rating of 4 or 5, and sort them in increasing order of year.", "question_toks": ["Find", "all", "years", "that", "have", "a", "movie", "that", "received", "a", "rating", "of", "4", "or", "5", ",", "and", "sort", "them", "in", "increasing", "order", "of", "year", "."], "guid": 7918}}
{"text": "film: Film_ID, Title, Studio, Director, Gross_in_dollar; market: Market_ID, Country, Number_cities; film_market_estimation: Estimation_ID, Low_Estimate, High_Estimate, Film_ID, Type, Market_ID, Year | Show the distinct director of films with market estimation in the year of 1995.", "sql": "SELECT DISTINCT T1.Director FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID  =  T2.Film_ID WHERE T2.Year  =  1995", "example": {"db_id": "film_rank", "query": "SELECT DISTINCT T1.Director FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID  =  T2.Film_ID WHERE T2.Year  =  1995", "query_toks": ["SELECT", "DISTINCT", "T1.Director", "FROM", "film", "AS", "T1", "JOIN", "film_market_estimation", "AS", "T2", "ON", "T1.Film_ID", "=", "T2.Film_ID", "WHERE", "T2.Year", "=", "1995"], "query_toks_no_value": ["select", "distinct", "t1", ".", "director", "from", "film", "as", "t1", "join", "film_market_estimation", "as", "t2", "on", "t1", ".", "film_id", "=", "t2", ".", "film_id", "where", "t2", ".", "year", "=", "value"], "question": "Show the distinct director of films with market estimation in the year of 1995.", "question_toks": ["Show", "the", "distinct", "director", "of", "films", "with", "market", "estimation", "in", "the", "year", "of", "1995", "."], "guid": 7919}}
{"text": "program: Program_ID, Name, Origin, Launch, Owner; channel: Channel_ID, Name, Owner, Share_in_percent, Rating_in_percent; broadcast: Channel_ID, Program_ID, Time_of_day; broadcast_share: Channel_ID, Program_ID, Date, Share_in_percent | How many distinct programs are broadcast at \"Night\" time?", "sql": "SELECT count(DISTINCT program_id) FROM broadcast WHERE time_of_day  =  'Night'", "example": {"db_id": "program_share", "query": "SELECT count(DISTINCT program_id) FROM broadcast WHERE time_of_day  =  'Night'", "query_toks": ["SELECT", "count", "(", "DISTINCT", "program_id", ")", "FROM", "broadcast", "WHERE", "time_of_day", "=", "'Night", "'"], "query_toks_no_value": ["select", "count", "(", "distinct", "program_id", ")", "from", "broadcast", "where", "time_of_day", "=", "value"], "question": "How many distinct programs are broadcast at \"Night\" time?", "question_toks": ["How", "many", "distinct", "programs", "are", "broadcast", "at", "``", "Night", "''", "time", "?"], "guid": 7920}}
{"text": "TV_Channel: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option; TV_series: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel; Cartoon: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel | When did the episode \"A Love of a Lifetime\" air?", "sql": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";", "example": {"db_id": "tvshow", "query": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";", "query_toks": ["SELECT", "Air_Date", "FROM", "TV_series", "WHERE", "Episode", "=", "``", "A", "Love", "of", "a", "Lifetime", "''", ";"], "query_toks_no_value": ["select", "air_date", "from", "tv_series", "where", "episode", "=", "value"], "question": "When did the episode \"A Love of a Lifetime\" air?", "question_toks": ["When", "did", "the", "episode", "``", "A", "Love", "of", "a", "Lifetime", "''", "air", "?"], "guid": 7921}}
{"text": "TV_Channel: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option; TV_series: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel; Cartoon: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel | What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.", "sql": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";", "example": {"db_id": "tvshow", "query": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";", "query_toks": ["SELECT", "T1.series_name", "FROM", "TV_Channel", "AS", "T1", "JOIN", "Cartoon", "AS", "T2", "ON", "T1.id", "=", "T2.Channel", "WHERE", "T2.Title", "=", "``", "The", "Rise", "of", "the", "Blue", "Beetle", "!", "``", ";"], "query_toks_no_value": ["select", "t1", ".", "series_name", "from", "tv_channel", "as", "t1", "join", "cartoon", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "channel", "where", "t2", ".", "title", "=", "value"], "question": "What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.", "question_toks": ["What", "is", "the", "TV", "Channel", "that", "shows", "the", "cartoon", "``", "The", "Rise", "of", "the", "Blue", "Beetle", "!", "''", "?", "List", "the", "TV", "Channel", "'s", "series", "name", "."], "guid": 7922}}
{"text": "TV_Channel: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option; TV_series: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel; Cartoon: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel | List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".", "sql": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";", "example": {"db_id": "tvshow", "query": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";", "query_toks": ["SELECT", "T2.Title", "FROM", "TV_Channel", "AS", "T1", "JOIN", "Cartoon", "AS", "T2", "ON", "T1.id", "=", "T2.Channel", "WHERE", "T1.series_name", "=", "``", "Sky", "Radio", "''", ";"], "query_toks_no_value": ["select", "t2", ".", "title", "from", "tv_channel", "as", "t1", "join", "cartoon", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "channel", "where", "t1", ".", "series_name", "=", "value"], "question": "List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".", "question_toks": ["List", "the", "title", "of", "all", "Cartoons", "showed", "on", "TV", "Channel", "with", "series", "name", "``", "Sky", "Radio", "''", "."], "guid": 7923}}
{"text": "program: Program_ID, Name, Origin, Launch, Owner; channel: Channel_ID, Name, Owner, Share_in_percent, Rating_in_percent; broadcast: Channel_ID, Program_ID, Time_of_day; broadcast_share: Channel_ID, Program_ID, Date, Share_in_percent | Which channels are broadcast in the morning? Give me the channel names.", "sql": "SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Morning'", "example": {"db_id": "program_share", "query": "SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Morning'", "query_toks": ["SELECT", "t1.name", "FROM", "channel", "AS", "t1", "JOIN", "broadcast", "AS", "t2", "ON", "t1.channel_id", "=", "t2.channel_id", "WHERE", "t2.time_of_day", "=", "'Morning", "'"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "channel", "as", "t1", "join", "broadcast", "as", "t2", "on", "t1", ".", "channel_id", "=", "t2", ".", "channel_id", "where", "t2", ".", "time_of_day", "=", "value"], "question": "Which channels are broadcast in the morning? Give me the channel names.", "question_toks": ["Which", "channels", "are", "broadcast", "in", "the", "morning", "?", "Give", "me", "the", "channel", "names", "."], "guid": 7924}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | What are the titles and directors of the movies whose star is greater than the average stars of the movies directed by James Cameron?", "sql": "SELECT T2.title ,  T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  >  (SELECT avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.director  =  \"James Cameron\")", "example": {"db_id": "movie_1", "query": "SELECT T2.title ,  T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  >  (SELECT avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.director  =  \"James Cameron\")", "query_toks": ["SELECT", "T2.title", ",", "T2.director", "FROM", "Rating", "AS", "T1", "JOIN", "Movie", "AS", "T2", "ON", "T1.mID", "=", "T2.mID", "WHERE", "T1.stars", ">", "(", "SELECT", "avg", "(", "T1.stars", ")", "FROM", "Rating", "AS", "T1", "JOIN", "Movie", "AS", "T2", "ON", "T1.mID", "=", "T2.mID", "WHERE", "T2.director", "=", "``", "James", "Cameron", "''", ")"], "query_toks_no_value": ["select", "t2", ".", "title", ",", "t2", ".", "director", "from", "rating", "as", "t1", "join", "movie", "as", "t2", "on", "t1", ".", "mid", "=", "t2", ".", "mid", "where", "t1", ".", "stars", ">", "(", "select", "avg", "(", "t1", ".", "stars", ")", "from", "rating", "as", "t1", "join", "movie", "as", "t2", "on", "t1", ".", "mid", "=", "t2", ".", "mid", "where", "t2", ".", "director", "=", "value", ")"], "question": "What are the titles and directors of the movies whose star is greater than the average stars of the movies directed by James Cameron?", "question_toks": ["What", "are", "the", "titles", "and", "directors", "of", "the", "movies", "whose", "star", "is", "greater", "than", "the", "average", "stars", "of", "the", "movies", "directed", "by", "James", "Cameron", "?"], "guid": 7925}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | What is the maximum and mininum number of stars a rating can receive?", "sql": "SELECT max(stars) ,  min(stars) FROM Rating", "example": {"db_id": "movie_1", "query": "SELECT max(stars) ,  min(stars) FROM Rating", "query_toks": ["SELECT", "max", "(", "stars", ")", ",", "min", "(", "stars", ")", "FROM", "Rating"], "query_toks_no_value": ["select", "max", "(", "stars", ")", ",", "min", "(", "stars", ")", "from", "rating"], "question": "What is the maximum and mininum number of stars a rating can receive?", "question_toks": ["What", "is", "the", "maximum", "and", "mininum", "number", "of", "stars", "a", "rating", "can", "receive", "?"], "guid": 7926}}
{"text": "program: Program_ID, Name, Origin, Launch, Owner; channel: Channel_ID, Name, Owner, Share_in_percent, Rating_in_percent; broadcast: Channel_ID, Program_ID, Time_of_day; broadcast_share: Channel_ID, Program_ID, Date, Share_in_percent | What is the owner of the channel that has the highest rating ratio?", "sql": "SELECT OWNER FROM channel ORDER BY rating_in_percent DESC LIMIT 1", "example": {"db_id": "program_share", "query": "SELECT OWNER FROM channel ORDER BY rating_in_percent DESC LIMIT 1", "query_toks": ["SELECT", "OWNER", "FROM", "channel", "ORDER", "BY", "rating_in_percent", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "owner", "from", "channel", "order", "by", "rating_in_percent", "desc", "limit", "value"], "question": "What is the owner of the channel that has the highest rating ratio?", "question_toks": ["What", "is", "the", "owner", "of", "the", "channel", "that", "has", "the", "highest", "rating", "ratio", "?"], "guid": 7927}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | How many reviewers listed?", "sql": "SELECT count(*) FROM Reviewer", "example": {"db_id": "movie_1", "query": "SELECT count(*) FROM Reviewer", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Reviewer"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "reviewer"], "question": "How many reviewers listed?", "question_toks": ["How", "many", "reviewers", "listed", "?"], "guid": 7928}}
{"text": "Activity: actid, activity_name; Participates_in: stuid, actid; Faculty_Participates_in: FacID, actid; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building | Show all the ranks and the number of male and female faculty for each rank.", "sql": "SELECT rank ,  sex ,  count(*) FROM Faculty GROUP BY rank ,  sex", "example": {"db_id": "activity_1", "query": "SELECT rank ,  sex ,  count(*) FROM Faculty GROUP BY rank ,  sex", "query_toks": ["SELECT", "rank", ",", "sex", ",", "count", "(", "*", ")", "FROM", "Faculty", "GROUP", "BY", "rank", ",", "sex"], "query_toks_no_value": ["select", "rank", ",", "sex", ",", "count", "(", "*", ")", "from", "faculty", "group", "by", "rank", ",", "sex"], "question": "Show all the ranks and the number of male and female faculty for each rank.", "question_toks": ["Show", "all", "the", "ranks", "and", "the", "number", "of", "male", "and", "female", "faculty", "for", "each", "rank", "."], "guid": 978}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Dorm: dormid, dorm_name, student_capacity, gender; Dorm_amenity: amenid, amenity_name; Has_amenity: dormid, amenid; Lives_in: stuid, dormid, room_number | For each dorm, how many amenities does it have?", "sql": "SELECT count(*) ,  T1.dormid FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid WHERE T1.student_capacity  >  100 GROUP BY T1.dormid", "example": {"db_id": "dorm_1", "query": "SELECT count(*) ,  T1.dormid FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid WHERE T1.student_capacity  >  100 GROUP BY T1.dormid", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "T1.dormid", "FROM", "dorm", "AS", "T1", "JOIN", "has_amenity", "AS", "T2", "ON", "T1.dormid", "=", "T2.dormid", "WHERE", "T1.student_capacity", ">", "100", "GROUP", "BY", "T1.dormid"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "t1", ".", "dormid", "from", "dorm", "as", "t1", "join", "has_amenity", "as", "t2", "on", "t1", ".", "dormid", "=", "t2", ".", "dormid", "where", "t1", ".", "student_capacity", ">", "value", "group", "by", "t1", ".", "dormid"], "question": "For each dorm, how many amenities does it have?", "question_toks": ["For", "each", "dorm", ",", "how", "many", "amenities", "does", "it", "have", "?"], "guid": 979}}
{"text": "list: LastName, FirstName, Grade, Classroom; teachers: LastName, FirstName, Classroom | what are the last names of the teachers who teach grade 5?", "sql": "SELECT DISTINCT T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE grade  =  5", "example": {"db_id": "student_1", "query": "SELECT DISTINCT T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE grade  =  5", "query_toks": ["SELECT", "DISTINCT", "T2.lastname", "FROM", "list", "AS", "T1", "JOIN", "teachers", "AS", "T2", "ON", "T1.classroom", "=", "T2.classroom", "WHERE", "grade", "=", "5"], "query_toks_no_value": ["select", "distinct", "t2", ".", "lastname", "from", "list", "as", "t1", "join", "teachers", "as", "t2", "on", "t1", ".", "classroom", "=", "t2", ".", "classroom", "where", "grade", "=", "value"], "question": "what are the last names of the teachers who teach grade 5?", "question_toks": ["what", "are", "the", "last", "names", "of", "the", "teachers", "who", "teach", "grade", "5", "?"], "guid": 980}}
{"text": "Addresses: address_id, line_1, line_2, city, zip_postcode, state_province_county, country; People: person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password; Students: student_id, student_details; Courses: course_id, course_name, course_description, other_details; People_Addresses: person_address_id, person_id, address_id, date_from, date_to; Student_Course_Registrations: student_id, course_id, registration_date; Student_Course_Attendance: student_id, course_id, date_of_attendance; Candidates: candidate_id, candidate_details; Candidate_Assessments: candidate_id, qualification, assessment_date, asessment_outcome_code | What are the names of the courses in alphabetical order?", "sql": "SELECT course_name FROM courses ORDER BY course_name", "example": {"db_id": "student_assessment", "query": "SELECT course_name FROM courses ORDER BY course_name", "query_toks": ["SELECT", "course_name", "FROM", "courses", "ORDER", "BY", "course_name"], "query_toks_no_value": ["select", "course_name", "from", "courses", "order", "by", "course_name"], "question": "What are the names of the courses in alphabetical order?", "question_toks": ["What", "are", "the", "names", "of", "the", "courses", "in", "alphabetical", "order", "?"], "guid": 981}}
{"text": "Activity: actid, activity_name; Participates_in: stuid, actid; Faculty_Participates_in: FacID, actid; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building | Find the first and last name of the faculty who is involved in the largest number of activities.", "sql": "SELECT  T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID GROUP BY T1.FacID ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "activity_1", "query": "SELECT  T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID GROUP BY T1.FacID ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.fname", ",", "T1.lname", "FROM", "Faculty", "AS", "T1", "JOIN", "Faculty_participates_in", "AS", "T2", "ON", "T1.facID", "=", "T2.facID", "GROUP", "BY", "T1.FacID", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "fname", ",", "t1", ".", "lname", "from", "faculty", "as", "t1", "join", "faculty_participates_in", "as", "t2", "on", "t1", ".", "facid", "=", "t2", ".", "facid", "group", "by", "t1", ".", "facid", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Find the first and last name of the faculty who is involved in the largest number of activities.", "question_toks": ["Find", "the", "first", "and", "last", "name", "of", "the", "faculty", "who", "is", "involved", "in", "the", "largest", "number", "of", "activities", "."], "guid": 982}}
{"text": "Course_Authors_and_Tutors: author_id, author_tutor_ATB, login_name, password, personal_name, middle_name, family_name, gender_mf, address_line_1; Students: student_id, date_of_registration, date_of_latest_logon, login_name, password, personal_name, middle_name, family_name; Subjects: subject_id, subject_name; Courses: course_id, author_id, subject_id, course_name, course_description; Student_Course_Enrolment: registration_id, student_id, course_id, date_of_enrolment, date_of_completion; Student_Tests_Taken: registration_id, date_test_taken, test_result | What are the dates of the latest logon of the students with family name \"Jaskolski\" or \"Langosh\"?", "sql": "SELECT date_of_latest_logon FROM Students WHERE family_name  =  \"Jaskolski\" OR family_name  =  \"Langosh\"", "example": {"db_id": "e_learning", "query": "SELECT date_of_latest_logon FROM Students WHERE family_name  =  \"Jaskolski\" OR family_name  =  \"Langosh\"", "query_toks": ["SELECT", "date_of_latest_logon", "FROM", "Students", "WHERE", "family_name", "=", "``", "Jaskolski", "''", "OR", "family_name", "=", "``", "Langosh", "''"], "query_toks_no_value": ["select", "date_of_latest_logon", "from", "students", "where", "family_name", "=", "value", "or", "family_name", "=", "value"], "question": "What are the dates of the latest logon of the students with family name \"Jaskolski\" or \"Langosh\"?", "question_toks": ["What", "are", "the", "dates", "of", "the", "latest", "logon", "of", "the", "students", "with", "family", "name", "``", "Jaskolski", "''", "or", "``", "Langosh", "''", "?"], "guid": 983}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Dorm: dormid, dorm_name, student_capacity, gender; Dorm_amenity: amenid, amenity_name; Has_amenity: dormid, amenid; Lives_in: stuid, dormid, room_number | What are the first names of all students in Smith Hall?", "sql": "SELECT T1.fname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.dorm_name  =  'Smith Hall'", "example": {"db_id": "dorm_1", "query": "SELECT T1.fname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.dorm_name  =  'Smith Hall'", "query_toks": ["SELECT", "T1.fname", "FROM", "student", "AS", "T1", "JOIN", "lives_in", "AS", "T2", "ON", "T1.stuid", "=", "T2.stuid", "JOIN", "dorm", "AS", "T3", "ON", "T3.dormid", "=", "T2.dormid", "WHERE", "T3.dorm_name", "=", "'Smith", "Hall", "'"], "query_toks_no_value": ["select", "t1", ".", "fname", "from", "student", "as", "t1", "join", "lives_in", "as", "t2", "on", "t1", ".", "stuid", "=", "t2", ".", "stuid", "join", "dorm", "as", "t3", "on", "t3", ".", "dormid", "=", "t2", ".", "dormid", "where", "t3", ".", "dorm_name", "=", "value"], "question": "What are the first names of all students in Smith Hall?", "question_toks": ["What", "are", "the", "first", "names", "of", "all", "students", "in", "Smith", "Hall", "?"], "guid": 984}}
{"text": "list: LastName, FirstName, Grade, Classroom; teachers: LastName, FirstName, Classroom | Which students study under the teacher named OTHA MOYER? Give me the first and last names of the students.", "sql": "SELECT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"OTHA\" AND T2.lastname  =  \"MOYER\"", "example": {"db_id": "student_1", "query": "SELECT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"OTHA\" AND T2.lastname  =  \"MOYER\"", "query_toks": ["SELECT", "T1.firstname", ",", "T1.lastname", "FROM", "list", "AS", "T1", "JOIN", "teachers", "AS", "T2", "ON", "T1.classroom", "=", "T2.classroom", "WHERE", "T2.firstname", "=", "``", "OTHA", "''", "AND", "T2.lastname", "=", "``", "MOYER", "''"], "query_toks_no_value": ["select", "t1", ".", "firstname", ",", "t1", ".", "lastname", "from", "list", "as", "t1", "join", "teachers", "as", "t2", "on", "t1", ".", "classroom", "=", "t2", ".", "classroom", "where", "t2", ".", "firstname", "=", "value", "and", "t2", ".", "lastname", "=", "value"], "question": "Which students study under the teacher named OTHA MOYER? Give me the first and last names of the students.", "question_toks": ["Which", "students", "study", "under", "the", "teacher", "named", "OTHA", "MOYER", "?", "Give", "me", "the", "first", "and", "last", "names", "of", "the", "students", "."], "guid": 985}}
{"text": "Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Courses: course_id, course_name, course_description, other_details; Departments: department_id, department_name, department_description, other_details; Degree_Programs: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details; Sections: section_id, course_id, section_name, section_description, other_details; Semesters: semester_id, semester_name, semester_description, other_details; Students: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered; Student_Enrolment: student_enrolment_id, degree_program_id, semester_id, student_id, other_details; Student_Enrolment_Courses: student_course_id, course_id, student_enrolment_id; Transcripts: transcript_id, transcript_date, other_details | How many degrees does the engineering department offer?", "sql": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'", "example": {"db_id": "student_transcripts_tracking", "query": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Departments", "AS", "T1", "JOIN", "Degree_Programs", "AS", "T2", "ON", "T1.department_id", "=", "T2.department_id", "WHERE", "T1.department_name", "=", "'engineer", "'"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "departments", "as", "t1", "join", "degree_programs", "as", "t2", "on", "t1", ".", "department_id", "=", "t2", ".", "department_id", "where", "t1", ".", "department_name", "=", "value"], "question": "How many degrees does the engineering department offer?", "question_toks": ["How", "many", "degrees", "does", "the", "engineering", "department", "offer", "?"], "guid": 986}}
{"text": "Addresses: address_id, line_1, line_2, city, zip_postcode, state_province_county, country; People: person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password; Students: student_id, student_details; Courses: course_id, course_name, course_description, other_details; People_Addresses: person_address_id, person_id, address_id, date_from, date_to; Student_Course_Registrations: student_id, course_id, registration_date; Student_Course_Attendance: student_id, course_id, date_of_attendance; Candidates: candidate_id, candidate_details; Candidate_Assessments: candidate_id, qualification, assessment_date, asessment_outcome_code | What is the name of the course with the most registered students?", "sql": "SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "student_assessment", "query": "SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.course_name", "FROM", "courses", "AS", "T1", "JOIN", "student_course_registrations", "AS", "T2", "ON", "T1.course_id", "=", "T2.course_Id", "GROUP", "BY", "T1.course_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "course_name", "from", "courses", "as", "t1", "join", "student_course_registrations", "as", "t2", "on", "t1", ".", "course_id", "=", "t2", ".", "course_id", "group", "by", "t1", ".", "course_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the name of the course with the most registered students?", "question_toks": ["What", "is", "the", "name", "of", "the", "course", "with", "the", "most", "registered", "students", "?"], "guid": 987}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Dorm: dormid, dorm_name, student_capacity, gender; Dorm_amenity: amenid, amenity_name; Has_amenity: dormid, amenid; Lives_in: stuid, dormid, room_number | What is the first and last name of the students who are not in the largest major?", "sql": "SELECT fname ,  lname FROM student WHERE major != (SELECT major FROM student GROUP BY major ORDER BY count(*) DESC LIMIT 1)", "example": {"db_id": "dorm_1", "query": "SELECT fname ,  lname FROM student WHERE major != (SELECT major FROM student GROUP BY major ORDER BY count(*) DESC LIMIT 1)", "query_toks": ["SELECT", "fname", ",", "lname", "FROM", "student", "WHERE", "major", "!", "=", "(", "SELECT", "major", "FROM", "student", "GROUP", "BY", "major", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1", ")"], "query_toks_no_value": ["select", "fname", ",", "lname", "from", "student", "where", "major", "!", "=", "(", "select", "major", "from", "student", "group", "by", "major", "order", "by", "count", "(", "*", ")", "desc", "limit", "value", ")"], "question": "What is the first and last name of the students who are not in the largest major?", "question_toks": ["What", "is", "the", "first", "and", "last", "name", "of", "the", "students", "who", "are", "not", "in", "the", "largest", "major", "?"], "guid": 988}}
{"text": "Course_Authors_and_Tutors: author_id, author_tutor_ATB, login_name, password, personal_name, middle_name, family_name, gender_mf, address_line_1; Students: student_id, date_of_registration, date_of_latest_logon, login_name, password, personal_name, middle_name, family_name; Subjects: subject_id, subject_name; Courses: course_id, author_id, subject_id, course_name, course_description; Student_Course_Enrolment: registration_id, student_id, course_id, date_of_enrolment, date_of_completion; Student_Tests_Taken: registration_id, date_test_taken, test_result | Find the names of courses taught by the tutor who has personal name \"Julio\".", "sql": "SELECT T2.course_name FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id WHERE T1.personal_name  =  \"Julio\"", "example": {"db_id": "e_learning", "query": "SELECT T2.course_name FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id WHERE T1.personal_name  =  \"Julio\"", "query_toks": ["SELECT", "T2.course_name", "FROM", "Course_Authors_and_Tutors", "AS", "T1", "JOIN", "Courses", "AS", "T2", "ON", "T1.author_id", "=", "T2.author_id", "WHERE", "T1.personal_name", "=", "``", "Julio", "''"], "query_toks_no_value": ["select", "t2", ".", "course_name", "from", "course_authors_and_tutors", "as", "t1", "join", "courses", "as", "t2", "on", "t1", ".", "author_id", "=", "t2", ".", "author_id", "where", "t1", ".", "personal_name", "=", "value"], "question": "Find the names of courses taught by the tutor who has personal name \"Julio\".", "question_toks": ["Find", "the", "names", "of", "courses", "taught", "by", "the", "tutor", "who", "has", "personal", "name", "``", "Julio", "''", "."], "guid": 989}}
{"text": "Activity: actid, activity_name; Participates_in: stuid, actid; Faculty_Participates_in: FacID, actid; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building | Find the building that has the largest number of faculty members.", "sql": "SELECT building FROM Faculty GROUP BY building ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "activity_1", "query": "SELECT building FROM Faculty GROUP BY building ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "building", "FROM", "Faculty", "GROUP", "BY", "building", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "building", "from", "faculty", "group", "by", "building", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Find the building that has the largest number of faculty members.", "question_toks": ["Find", "the", "building", "that", "has", "the", "largest", "number", "of", "faculty", "members", "."], "guid": 990}}
{"text": "Addresses: address_id, line_1, line_2, city, zip_postcode, state_province_county, country; People: person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password; Students: student_id, student_details; Courses: course_id, course_name, course_description, other_details; People_Addresses: person_address_id, person_id, address_id, date_from, date_to; Student_Course_Registrations: student_id, course_id, registration_date; Student_Course_Attendance: student_id, course_id, date_of_attendance; Candidates: candidate_id, candidate_details; Candidate_Assessments: candidate_id, qualification, assessment_date, asessment_outcome_code | How many courses does the student with id 171 actually attend?", "sql": "SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T2.student_id = 171", "example": {"db_id": "student_assessment", "query": "SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T2.student_id = 171", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "courses", "AS", "T1", "JOIN", "student_course_attendance", "AS", "T2", "ON", "T1.course_id", "=", "T2.course_id", "WHERE", "T2.student_id", "=", "171"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "courses", "as", "t1", "join", "student_course_attendance", "as", "t2", "on", "t1", ".", "course_id", "=", "t2", ".", "course_id", "where", "t2", ".", "student_id", "=", "value"], "question": "How many courses does the student with id 171 actually attend?", "question_toks": ["How", "many", "courses", "does", "the", "student", "with", "id", "171", "actually", "attend", "?"], "guid": 991}}
{"text": "Activity: actid, activity_name; Participates_in: stuid, actid; Faculty_Participates_in: FacID, actid; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building | Count the number of Professors who have office in building NEB.", "sql": "SELECT count(*) FROM Faculty WHERE Rank  =  \"Professor\" AND building  =  \"NEB\"", "example": {"db_id": "activity_1", "query": "SELECT count(*) FROM Faculty WHERE Rank  =  \"Professor\" AND building  =  \"NEB\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Faculty", "WHERE", "Rank", "=", "``", "Professor", "''", "AND", "building", "=", "``", "NEB", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "faculty", "where", "rank", "=", "value", "and", "building", "=", "value"], "question": "Count the number of Professors who have office in building NEB.", "question_toks": ["Count", "the", "number", "of", "Professors", "who", "have", "office", "in", "building", "NEB", "."], "guid": 992}}
{"text": "driver: Driver_ID, Name, Party, Home_city, Age; school: School_ID, Grade, School, Location, Type; school_bus: School_ID, Driver_ID, Years_Working, If_full_time | Show the party and the number of drivers in each party.", "sql": "SELECT party ,  count(*) FROM driver GROUP BY party", "example": {"db_id": "school_bus", "query": "SELECT party ,  count(*) FROM driver GROUP BY party", "query_toks": ["SELECT", "party", ",", "count", "(", "*", ")", "FROM", "driver", "GROUP", "BY", "party"], "query_toks_no_value": ["select", "party", ",", "count", "(", "*", ")", "from", "driver", "group", "by", "party"], "question": "Show the party and the number of drivers in each party.", "question_toks": ["Show", "the", "party", "and", "the", "number", "of", "drivers", "in", "each", "party", "."], "guid": 993}}
{"text": "driver: Driver_ID, Name, Party, Home_city, Age; school: School_ID, Grade, School, Location, Type; school_bus: School_ID, Driver_ID, Years_Working, If_full_time | Show all different home cities.", "sql": "SELECT DISTINCT home_city FROM driver", "example": {"db_id": "school_bus", "query": "SELECT DISTINCT home_city FROM driver", "query_toks": ["SELECT", "DISTINCT", "home_city", "FROM", "driver"], "query_toks_no_value": ["select", "distinct", "home_city", "from", "driver"], "question": "Show all different home cities.", "question_toks": ["Show", "all", "different", "home", "cities", "."], "guid": 994}}
{"text": "Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Courses: course_id, course_name, course_description, other_details; Departments: department_id, department_name, department_description, other_details; Degree_Programs: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details; Sections: section_id, course_id, section_name, section_description, other_details; Semesters: semester_id, semester_name, semester_description, other_details; Students: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered; Student_Enrolment: student_enrolment_id, degree_program_id, semester_id, student_id, other_details; Student_Enrolment_Courses: student_course_id, course_id, student_enrolment_id; Transcripts: transcript_id, transcript_date, other_details | How many courses are there?", "sql": "SELECT count(*) FROM Courses", "example": {"db_id": "student_transcripts_tracking", "query": "SELECT count(*) FROM Courses", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Courses"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "courses"], "question": "How many courses are there?", "question_toks": ["How", "many", "courses", "are", "there", "?"], "guid": 995}}
{"text": "School: School_id, School_name, Location, Mascot, Enrollment, IHSAA_Class, IHSAA_Football_Class, County; budget: School_id, Year, Budgeted, total_budget_percent_budgeted, Invested, total_budget_percent_invested, Budget_invested_percent; endowment: endowment_id, School_id, donator_name, amount | Count the number of budgets in year 2001 or before whose budgeted amount is greater than 3000", "sql": "SELECT count(*) FROM budget WHERE budgeted  >  3000 AND YEAR  <=  2001", "example": {"db_id": "school_finance", "query": "SELECT count(*) FROM budget WHERE budgeted  >  3000 AND YEAR  <=  2001", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "budget", "WHERE", "budgeted", ">", "3000", "AND", "YEAR", "<", "=", "2001"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "budget", "where", "budgeted", ">", "value", "and", "year", "<", "=", "value"], "question": "Count the number of budgets in year 2001 or before whose budgeted amount is greater than 3000", "question_toks": ["Count", "the", "number", "of", "budgets", "in", "year", "2001", "or", "before", "whose", "budgeted", "amount", "is", "greater", "than", "3000"], "guid": 996}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Dorm: dormid, dorm_name, student_capacity, gender; Dorm_amenity: amenid, amenity_name; Has_amenity: dormid, amenid; Lives_in: stuid, dormid, room_number | How many different majors are there and how many different city codes are there for each student?", "sql": "SELECT count(DISTINCT major) ,  count(DISTINCT city_code) FROM student", "example": {"db_id": "dorm_1", "query": "SELECT count(DISTINCT major) ,  count(DISTINCT city_code) FROM student", "query_toks": ["SELECT", "count", "(", "DISTINCT", "major", ")", ",", "count", "(", "DISTINCT", "city_code", ")", "FROM", "student"], "query_toks_no_value": ["select", "count", "(", "distinct", "major", ")", ",", "count", "(", "distinct", "city_code", ")", "from", "student"], "question": "How many different majors are there and how many different city codes are there for each student?", "question_toks": ["How", "many", "different", "majors", "are", "there", "and", "how", "many", "different", "city", "codes", "are", "there", "for", "each", "student", "?"], "guid": 997}}
{"text": "Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Courses: course_id, course_name, course_description, other_details; Departments: department_id, department_name, department_description, other_details; Degree_Programs: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details; Sections: section_id, course_id, section_name, section_description, other_details; Semesters: semester_id, semester_name, semester_description, other_details; Students: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered; Student_Enrolment: student_enrolment_id, degree_program_id, semester_id, student_id, other_details; Student_Enrolment_Courses: student_course_id, course_id, student_enrolment_id; Transcripts: transcript_id, transcript_date, other_details | What is the average transcript date?", "sql": "SELECT avg(transcript_date) FROM Transcripts", "example": {"db_id": "student_transcripts_tracking", "query": "SELECT avg(transcript_date) FROM Transcripts", "query_toks": ["SELECT", "avg", "(", "transcript_date", ")", "FROM", "Transcripts"], "query_toks_no_value": ["select", "avg", "(", "transcript_date", ")", "from", "transcripts"], "question": "What is the average transcript date?", "question_toks": ["What", "is", "the", "average", "transcript", "date", "?"], "guid": 998}}
{"text": "Activity: actid, activity_name; Participates_in: stuid, actid; Faculty_Participates_in: FacID, actid; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building | Show the ids for all the faculty members who have at least 2 students.", "sql": "SELECT T1.FacID FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID HAVING count(*)  >=  2", "example": {"db_id": "activity_1", "query": "SELECT T1.FacID FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID HAVING count(*)  >=  2", "query_toks": ["SELECT", "T1.FacID", "FROM", "Faculty", "AS", "T1", "JOIN", "Student", "AS", "T2", "ON", "T1.FacID", "=", "T2.advisor", "GROUP", "BY", "T1.FacID", "HAVING", "count", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "t1", ".", "facid", "from", "faculty", "as", "t1", "join", "student", "as", "t2", "on", "t1", ".", "facid", "=", "t2", ".", "advisor", "group", "by", "t1", ".", "facid", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "Show the ids for all the faculty members who have at least 2 students.", "question_toks": ["Show", "the", "ids", "for", "all", "the", "faculty", "members", "who", "have", "at", "least", "2", "students", "."], "guid": 999}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Dorm: dormid, dorm_name, student_capacity, gender; Dorm_amenity: amenid, amenity_name; Has_amenity: dormid, amenid; Lives_in: stuid, dormid, room_number | Find the name and capacity of the dorm with least number of amenities.", "sql": "SELECT T1.dorm_name ,  T1.student_capacity FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid GROUP BY T2.dormid ORDER BY count(*) LIMIT 1", "example": {"db_id": "dorm_1", "query": "SELECT T1.dorm_name ,  T1.student_capacity FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid GROUP BY T2.dormid ORDER BY count(*) LIMIT 1", "query_toks": ["SELECT", "T1.dorm_name", ",", "T1.student_capacity", "FROM", "dorm", "AS", "T1", "JOIN", "has_amenity", "AS", "T2", "ON", "T1.dormid", "=", "T2.dormid", "JOIN", "dorm_amenity", "AS", "T3", "ON", "T2.amenid", "=", "T3.amenid", "GROUP", "BY", "T2.dormid", "ORDER", "BY", "count", "(", "*", ")", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "dorm_name", ",", "t1", ".", "student_capacity", "from", "dorm", "as", "t1", "join", "has_amenity", "as", "t2", "on", "t1", ".", "dormid", "=", "t2", ".", "dormid", "join", "dorm_amenity", "as", "t3", "on", "t2", ".", "amenid", "=", "t3", ".", "amenid", "group", "by", "t2", ".", "dormid", "order", "by", "count", "(", "*", ")", "limit", "value"], "question": "Find the name and capacity of the dorm with least number of amenities.", "question_toks": ["Find", "the", "name", "and", "capacity", "of", "the", "dorm", "with", "least", "number", "of", "amenities", "."], "guid": 1000}}
{"text": "list: LastName, FirstName, Grade, Classroom; teachers: LastName, FirstName, Classroom | What are the last names of students in room 111?", "sql": "SELECT lastname FROM list WHERE classroom  =  111", "example": {"db_id": "student_1", "query": "SELECT lastname FROM list WHERE classroom  =  111", "query_toks": ["SELECT", "lastname", "FROM", "list", "WHERE", "classroom", "=", "111"], "query_toks_no_value": ["select", "lastname", "from", "list", "where", "classroom", "=", "value"], "question": "What are the last names of students in room 111?", "question_toks": ["What", "are", "the", "last", "names", "of", "students", "in", "room", "111", "?"], "guid": 1001}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Dorm: dormid, dorm_name, student_capacity, gender; Dorm_amenity: amenid, amenity_name; Has_amenity: dormid, amenid; Lives_in: stuid, dormid, room_number | What are the first names of all students who live in the dorm with the most amenities?", "sql": "SELECT T1.fname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid WHERE T2.dormid IN (SELECT T2.dormid FROM dorm AS T3 JOIN has_amenity AS T4 ON T3.dormid  =  T4.dormid JOIN dorm_amenity AS T5 ON T4.amenid  =  T5.amenid GROUP BY T3.dormid ORDER BY count(*) DESC LIMIT 1)", "example": {"db_id": "dorm_1", "query": "SELECT T1.fname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid WHERE T2.dormid IN (SELECT T2.dormid FROM dorm AS T3 JOIN has_amenity AS T4 ON T3.dormid  =  T4.dormid JOIN dorm_amenity AS T5 ON T4.amenid  =  T5.amenid GROUP BY T3.dormid ORDER BY count(*) DESC LIMIT 1)", "query_toks": ["SELECT", "T1.fname", "FROM", "student", "AS", "T1", "JOIN", "lives_in", "AS", "T2", "ON", "T1.stuid", "=", "T2.stuid", "WHERE", "T2.dormid", "IN", "(", "SELECT", "T2.dormid", "FROM", "dorm", "AS", "T3", "JOIN", "has_amenity", "AS", "T4", "ON", "T3.dormid", "=", "T4.dormid", "JOIN", "dorm_amenity", "AS", "T5", "ON", "T4.amenid", "=", "T5.amenid", "GROUP", "BY", "T3.dormid", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1", ")"], "query_toks_no_value": ["select", "t1", ".", "fname", "from", "student", "as", "t1", "join", "lives_in", "as", "t2", "on", "t1", ".", "stuid", "=", "t2", ".", "stuid", "where", "t2", ".", "dormid", "in", "(", "select", "t2", ".", "dormid", "from", "dorm", "as", "t3", "join", "has_amenity", "as", "t4", "on", "t3", ".", "dormid", "=", "t4", ".", "dormid", "join", "dorm_amenity", "as", "t5", "on", "t4", ".", "amenid", "=", "t5", ".", "amenid", "group", "by", "t3", ".", "dormid", "order", "by", "count", "(", "*", ")", "desc", "limit", "value", ")"], "question": "What are the first names of all students who live in the dorm with the most amenities?", "question_toks": ["What", "are", "the", "first", "names", "of", "all", "students", "who", "live", "in", "the", "dorm", "with", "the", "most", "amenities", "?"], "guid": 1002}}
{"text": "Activity: actid, activity_name; Participates_in: stuid, actid; Faculty_Participates_in: FacID, actid; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building | Show the ids for all the students who participate in an activity and are under 20.", "sql": "SELECT StuID FROM Participates_in INTERSECT SELECT StuID FROM Student WHERE age  <  20", "example": {"db_id": "activity_1", "query": "SELECT StuID FROM Participates_in INTERSECT SELECT StuID FROM Student WHERE age  <  20", "query_toks": ["SELECT", "StuID", "FROM", "Participates_in", "INTERSECT", "SELECT", "StuID", "FROM", "Student", "WHERE", "age", "<", "20"], "query_toks_no_value": ["select", "stuid", "from", "participates_in", "intersect", "select", "stuid", "from", "student", "where", "age", "<", "value"], "question": "Show the ids for all the students who participate in an activity and are under 20.", "question_toks": ["Show", "the", "ids", "for", "all", "the", "students", "who", "participate", "in", "an", "activity", "and", "are", "under", "20", "."], "guid": 1003}}
{"text": "list: LastName, FirstName, Grade, Classroom; teachers: LastName, FirstName, Classroom | For each classroom, show the classroom number and count the number of distinct grades that use the room.", "sql": "SELECT classroom ,  count(DISTINCT grade) FROM list GROUP BY classroom", "example": {"db_id": "student_1", "query": "SELECT classroom ,  count(DISTINCT grade) FROM list GROUP BY classroom", "query_toks": ["SELECT", "classroom", ",", "count", "(", "DISTINCT", "grade", ")", "FROM", "list", "GROUP", "BY", "classroom"], "query_toks_no_value": ["select", "classroom", ",", "count", "(", "distinct", "grade", ")", "from", "list", "group", "by", "classroom"], "question": "For each classroom, show the classroom number and count the number of distinct grades that use the room.", "question_toks": ["For", "each", "classroom", ",", "show", "the", "classroom", "number", "and", "count", "the", "number", "of", "distinct", "grades", "that", "use", "the", "room", "."], "guid": 1004}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Dorm: dormid, dorm_name, student_capacity, gender; Dorm_amenity: amenid, amenity_name; Has_amenity: dormid, amenid; Lives_in: stuid, dormid, room_number | Find the name of dorms that do not have amenity TV Lounge.", "sql": "SELECT dorm_name FROM dorm EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge'", "example": {"db_id": "dorm_1", "query": "SELECT dorm_name FROM dorm EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge'", "query_toks": ["SELECT", "dorm_name", "FROM", "dorm", "EXCEPT", "SELECT", "T1.dorm_name", "FROM", "dorm", "AS", "T1", "JOIN", "has_amenity", "AS", "T2", "ON", "T1.dormid", "=", "T2.dormid", "JOIN", "dorm_amenity", "AS", "T3", "ON", "T2.amenid", "=", "T3.amenid", "WHERE", "T3.amenity_name", "=", "'TV", "Lounge", "'"], "query_toks_no_value": ["select", "dorm_name", "from", "dorm", "except", "select", "t1", ".", "dorm_name", "from", "dorm", "as", "t1", "join", "has_amenity", "as", "t2", "on", "t1", ".", "dormid", "=", "t2", ".", "dormid", "join", "dorm_amenity", "as", "t3", "on", "t2", ".", "amenid", "=", "t3", ".", "amenid", "where", "t3", ".", "amenity_name", "=", "value"], "question": "Find the name of dorms that do not have amenity TV Lounge.", "question_toks": ["Find", "the", "name", "of", "dorms", "that", "do", "not", "have", "amenity", "TV", "Lounge", "."], "guid": 1005}}
{"text": "school: School_ID, School, Location, Enrollment, Founded, Denomination, Boys_or_Girls, Day_or_Boarding, Year_Entered_Competition, School_Colors; school_details: School_ID, Nickname, Colors, League, Class, Division; school_performance: School_Id, School_Year, Class_A, Class_AA; player: Player_ID, Player, Team, Age, Position, School_ID | Show the denomination of the school that has the most players.", "sql": "SELECT T2.Denomination FROM player AS T1 JOIN school AS T2 ON T1.School_ID  =  T2.School_ID GROUP BY T1.School_ID ORDER BY COUNT(*) DESC LIMIT 1", "example": {"db_id": "school_player", "query": "SELECT T2.Denomination FROM player AS T1 JOIN school AS T2 ON T1.School_ID  =  T2.School_ID GROUP BY T1.School_ID ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "T2.Denomination", "FROM", "player", "AS", "T1", "JOIN", "school", "AS", "T2", "ON", "T1.School_ID", "=", "T2.School_ID", "GROUP", "BY", "T1.School_ID", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "denomination", "from", "player", "as", "t1", "join", "school", "as", "t2", "on", "t1", ".", "school_id", "=", "t2", ".", "school_id", "group", "by", "t1", ".", "school_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Show the denomination of the school that has the most players.", "question_toks": ["Show", "the", "denomination", "of", "the", "school", "that", "has", "the", "most", "players", "."], "guid": 1006}}
{"text": "driver: Driver_ID, Name, Party, Home_city, Age; school: School_ID, Grade, School, Location, Type; school_bus: School_ID, Driver_ID, Years_Working, If_full_time | Show home city where at least two drivers older than 40 are from.", "sql": "SELECT home_city FROM driver WHERE age  >  40 GROUP BY home_city HAVING count(*)  >=  2", "example": {"db_id": "school_bus", "query": "SELECT home_city FROM driver WHERE age  >  40 GROUP BY home_city HAVING count(*)  >=  2", "query_toks": ["SELECT", "home_city", "FROM", "driver", "WHERE", "age", ">", "40", "GROUP", "BY", "home_city", "HAVING", "count", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "home_city", "from", "driver", "where", "age", ">", "value", "group", "by", "home_city", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "Show home city where at least two drivers older than 40 are from.", "question_toks": ["Show", "home", "city", "where", "at", "least", "two", "drivers", "older", "than", "40", "are", "from", "."], "guid": 1007}}
{"text": "Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Courses: course_id, course_name, course_description, other_details; Departments: department_id, department_name, department_description, other_details; Degree_Programs: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details; Sections: section_id, course_id, section_name, section_description, other_details; Semesters: semester_id, semester_name, semester_description, other_details; Students: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered; Student_Enrolment: student_enrolment_id, degree_program_id, semester_id, student_id, other_details; Student_Enrolment_Courses: student_course_id, course_id, student_enrolment_id; Transcripts: transcript_id, transcript_date, other_details | What is the zip code for Port Chelsea?", "sql": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'", "example": {"db_id": "student_transcripts_tracking", "query": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'", "query_toks": ["SELECT", "zip_postcode", "FROM", "Addresses", "WHERE", "city", "=", "'Port", "Chelsea", "'"], "query_toks_no_value": ["select", "zip_postcode", "from", "addresses", "where", "city", "=", "value"], "question": "What is the zip code for Port Chelsea?", "question_toks": ["What", "is", "the", "zip", "code", "for", "Port", "Chelsea", "?"], "guid": 1008}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Dorm: dormid, dorm_name, student_capacity, gender; Dorm_amenity: amenid, amenity_name; Has_amenity: dormid, amenid; Lives_in: stuid, dormid, room_number | How many female students live in Smith Hall?", "sql": "SELECT count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.dorm_name  =  'Smith Hall' AND T1.sex  =  'F'", "example": {"db_id": "dorm_1", "query": "SELECT count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.dorm_name  =  'Smith Hall' AND T1.sex  =  'F'", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "student", "AS", "T1", "JOIN", "lives_in", "AS", "T2", "ON", "T1.stuid", "=", "T2.stuid", "JOIN", "dorm", "AS", "T3", "ON", "T3.dormid", "=", "T2.dormid", "WHERE", "T3.dorm_name", "=", "'Smith", "Hall", "'", "AND", "T1.sex", "=", "'F", "'"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "student", "as", "t1", "join", "lives_in", "as", "t2", "on", "t1", ".", "stuid", "=", "t2", ".", "stuid", "join", "dorm", "as", "t3", "on", "t3", ".", "dormid", "=", "t2", ".", "dormid", "where", "t3", ".", "dorm_name", "=", "value", "and", "t1", ".", "sex", "=", "value"], "question": "How many female students live in Smith Hall?", "question_toks": ["How", "many", "female", "students", "live", "in", "Smith", "Hall", "?"], "guid": 1009}}
{"text": "Addresses: address_id, line_1, line_2, city, zip_postcode, state_province_county, country; People: person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password; Students: student_id, student_details; Courses: course_id, course_name, course_description, other_details; People_Addresses: person_address_id, person_id, address_id, date_from, date_to; Student_Course_Registrations: student_id, course_id, registration_date; Student_Course_Attendance: student_id, course_id, date_of_attendance; Candidates: candidate_id, candidate_details; Candidate_Assessments: candidate_id, qualification, assessment_date, asessment_outcome_code | How many registed students do each course have? List course name and the number of their registered students?", "sql": "SELECT T3.course_name ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id", "example": {"db_id": "student_assessment", "query": "SELECT T3.course_name ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id", "query_toks": ["SELECT", "T3.course_name", ",", "count", "(", "*", ")", "FROM", "students", "AS", "T1", "JOIN", "student_course_registrations", "AS", "T2", "ON", "T1.student_id", "=", "T2.student_id", "JOIN", "courses", "AS", "T3", "ON", "T2.course_id", "=", "T3.course_id", "GROUP", "BY", "T2.course_id"], "query_toks_no_value": ["select", "t3", ".", "course_name", ",", "count", "(", "*", ")", "from", "students", "as", "t1", "join", "student_course_registrations", "as", "t2", "on", "t1", ".", "student_id", "=", "t2", ".", "student_id", "join", "courses", "as", "t3", "on", "t2", ".", "course_id", "=", "t3", ".", "course_id", "group", "by", "t2", ".", "course_id"], "question": "How many registed students do each course have? List course name and the number of their registered students?", "question_toks": ["How", "many", "registed", "students", "do", "each", "course", "have", "?", "List", "course", "name", "and", "the", "number", "of", "their", "registered", "students", "?"], "guid": 1010}}
{"text": "Addresses: address_id, line_1, line_2, city, zip_postcode, state_province_county, country; People: person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password; Students: student_id, student_details; Courses: course_id, course_name, course_description, other_details; People_Addresses: person_address_id, person_id, address_id, date_from, date_to; Student_Course_Registrations: student_id, course_id, registration_date; Student_Course_Attendance: student_id, course_id, date_of_attendance; Candidates: candidate_id, candidate_details; Candidate_Assessments: candidate_id, qualification, assessment_date, asessment_outcome_code | What are the  ids of every student who has never attended a course?", "sql": "SELECT student_id FROM students WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)", "example": {"db_id": "student_assessment", "query": "SELECT student_id FROM students WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)", "query_toks": ["SELECT", "student_id", "FROM", "students", "WHERE", "student_id", "NOT", "IN", "(", "SELECT", "student_id", "FROM", "student_course_attendance", ")"], "query_toks_no_value": ["select", "student_id", "from", "students", "where", "student_id", "not", "in", "(", "select", "student_id", "from", "student_course_attendance", ")"], "question": "What are the  ids of every student who has never attended a course?", "question_toks": ["What", "are", "the", "ids", "of", "every", "student", "who", "has", "never", "attended", "a", "course", "?"], "guid": 1011}}
{"text": "Activity: actid, activity_name; Participates_in: stuid, actid; Faculty_Participates_in: FacID, actid; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building | Which students participate in both Canoeing and Kayaking as their activities? Tell me their student ids.", "sql": "SELECT T1.stuid FROM participates_in AS T1 JOIN activity AS T2 ON T2.actid  =  T2.actid WHERE T2.activity_name  =  'Canoeing' INTERSECT SELECT T1.stuid FROM participates_in AS T1 JOIN activity AS T2 ON T2.actid  =  T2.actid WHERE T2.activity_name  =  'Kayaking'", "example": {"db_id": "activity_1", "query": "SELECT T1.stuid FROM participates_in AS T1 JOIN activity AS T2 ON T2.actid  =  T2.actid WHERE T2.activity_name  =  'Canoeing' INTERSECT SELECT T1.stuid FROM participates_in AS T1 JOIN activity AS T2 ON T2.actid  =  T2.actid WHERE T2.activity_name  =  'Kayaking'", "query_toks": ["SELECT", "T1.stuid", "FROM", "participates_in", "AS", "T1", "JOIN", "activity", "AS", "T2", "ON", "T2.actid", "=", "T2.actid", "WHERE", "T2.activity_name", "=", "'Canoeing", "'", "INTERSECT", "SELECT", "T1.stuid", "FROM", "participates_in", "AS", "T1", "JOIN", "activity", "AS", "T2", "ON", "T2.actid", "=", "T2.actid", "WHERE", "T2.activity_name", "=", "'Kayaking", "'"], "query_toks_no_value": ["select", "t1", ".", "stuid", "from", "participates_in", "as", "t1", "join", "activity", "as", "t2", "on", "t2", ".", "actid", "=", "t2", ".", "actid", "where", "t2", ".", "activity_name", "=", "value", "intersect", "select", "t1", ".", "stuid", "from", "participates_in", "as", "t1", "join", "activity", "as", "t2", "on", "t2", ".", "actid", "=", "t2", ".", "actid", "where", "t2", ".", "activity_name", "=", "value"], "question": "Which students participate in both Canoeing and Kayaking as their activities? Tell me their student ids.", "question_toks": ["Which", "students", "participate", "in", "both", "Canoeing", "and", "Kayaking", "as", "their", "activities", "?", "Tell", "me", "their", "student", "ids", "."], "guid": 1012}}
{"text": "Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Courses: course_id, course_name, course_description, other_details; Departments: department_id, department_name, department_description, other_details; Degree_Programs: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details; Sections: section_id, course_id, section_name, section_description, other_details; Semesters: semester_id, semester_name, semester_description, other_details; Students: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered; Student_Enrolment: student_enrolment_id, degree_program_id, semester_id, student_id, other_details; Student_Enrolment_Courses: student_course_id, course_id, student_enrolment_id; Transcripts: transcript_id, transcript_date, other_details | Who is the first student to register? List the first name, middle name and last name.", "sql": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1", "example": {"db_id": "student_transcripts_tracking", "query": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1", "query_toks": ["SELECT", "first_name", ",", "middle_name", ",", "last_name", "FROM", "Students", "ORDER", "BY", "date_first_registered", "ASC", "LIMIT", "1"], "query_toks_no_value": ["select", "first_name", ",", "middle_name", ",", "last_name", "from", "students", "order", "by", "date_first_registered", "asc", "limit", "value"], "question": "Who is the first student to register? List the first name, middle name and last name.", "question_toks": ["Who", "is", "the", "first", "student", "to", "register", "?", "List", "the", "first", "name", ",", "middle", "name", "and", "last", "name", "."], "guid": 1013}}
{"text": "Course_Authors_and_Tutors: author_id, author_tutor_ATB, login_name, password, personal_name, middle_name, family_name, gender_mf, address_line_1; Students: student_id, date_of_registration, date_of_latest_logon, login_name, password, personal_name, middle_name, family_name; Subjects: subject_id, subject_name; Courses: course_id, author_id, subject_id, course_name, course_description; Student_Course_Enrolment: registration_id, student_id, course_id, date_of_enrolment, date_of_completion; Student_Tests_Taken: registration_id, date_test_taken, test_result | Which course author teaches the \"advanced database\" course? Give me his or her login name.", "sql": "SELECT T1.login_name FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id WHERE T2.course_name  =  \"advanced database\"", "example": {"db_id": "e_learning", "query": "SELECT T1.login_name FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id WHERE T2.course_name  =  \"advanced database\"", "query_toks": ["SELECT", "T1.login_name", "FROM", "Course_Authors_and_Tutors", "AS", "T1", "JOIN", "Courses", "AS", "T2", "ON", "T1.author_id", "=", "T2.author_id", "WHERE", "T2.course_name", "=", "``", "advanced", "database", "''"], "query_toks_no_value": ["select", "t1", ".", "login_name", "from", "course_authors_and_tutors", "as", "t1", "join", "courses", "as", "t2", "on", "t1", ".", "author_id", "=", "t2", ".", "author_id", "where", "t2", ".", "course_name", "=", "value"], "question": "Which course author teaches the \"advanced database\" course? Give me his or her login name.", "question_toks": ["Which", "course", "author", "teaches", "the", "``", "advanced", "database", "''", "course", "?", "Give", "me", "his", "or", "her", "login", "name", "."], "guid": 1014}}
{"text": "Course_Authors_and_Tutors: author_id, author_tutor_ATB, login_name, password, personal_name, middle_name, family_name, gender_mf, address_line_1; Students: student_id, date_of_registration, date_of_latest_logon, login_name, password, personal_name, middle_name, family_name; Subjects: subject_id, subject_name; Courses: course_id, author_id, subject_id, course_name, course_description; Student_Course_Enrolment: registration_id, student_id, course_id, date_of_enrolment, date_of_completion; Student_Tests_Taken: registration_id, date_test_taken, test_result | Find the the date of enrollment of the \"Spanish\" course.", "sql": "SELECT T2.date_of_enrolment FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id WHERE T1.course_name  =  \"Spanish\"", "example": {"db_id": "e_learning", "query": "SELECT T2.date_of_enrolment FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id WHERE T1.course_name  =  \"Spanish\"", "query_toks": ["SELECT", "T2.date_of_enrolment", "FROM", "Courses", "AS", "T1", "JOIN", "Student_Course_Enrolment", "AS", "T2", "ON", "T1.course_id", "=", "T2.course_id", "WHERE", "T1.course_name", "=", "``", "Spanish", "''"], "query_toks_no_value": ["select", "t2", ".", "date_of_enrolment", "from", "courses", "as", "t1", "join", "student_course_enrolment", "as", "t2", "on", "t1", ".", "course_id", "=", "t2", ".", "course_id", "where", "t1", ".", "course_name", "=", "value"], "question": "Find the the date of enrollment of the \"Spanish\" course.", "question_toks": ["Find", "the", "the", "date", "of", "enrollment", "of", "the", "``", "Spanish", "''", "course", "."], "guid": 1015}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Dorm: dormid, dorm_name, student_capacity, gender; Dorm_amenity: amenid, amenity_name; Has_amenity: dormid, amenid; Lives_in: stuid, dormid, room_number | What are the different dorm amenity names in alphabetical order?", "sql": "SELECT amenity_name FROM dorm_amenity ORDER BY amenity_name", "example": {"db_id": "dorm_1", "query": "SELECT amenity_name FROM dorm_amenity ORDER BY amenity_name", "query_toks": ["SELECT", "amenity_name", "FROM", "dorm_amenity", "ORDER", "BY", "amenity_name"], "query_toks_no_value": ["select", "amenity_name", "from", "dorm_amenity", "order", "by", "amenity_name"], "question": "What are the different dorm amenity names in alphabetical order?", "question_toks": ["What", "are", "the", "different", "dorm", "amenity", "names", "in", "alphabetical", "order", "?"], "guid": 1016}}
{"text": "Addresses: address_id, line_1, line_2, city, zip_postcode, state_province_county, country; People: person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password; Students: student_id, student_details; Courses: course_id, course_name, course_description, other_details; People_Addresses: person_address_id, person_id, address_id, date_from, date_to; Student_Course_Registrations: student_id, course_id, registration_date; Student_Course_Attendance: student_id, course_id, date_of_attendance; Candidates: candidate_id, candidate_details; Candidate_Assessments: candidate_id, qualification, assessment_date, asessment_outcome_code | What are the different cities where people live?", "sql": "SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id", "example": {"db_id": "student_assessment", "query": "SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id", "query_toks": ["SELECT", "DISTINCT", "T1.city", "FROM", "addresses", "AS", "T1", "JOIN", "people_addresses", "AS", "T2", "ON", "T1.address_id", "=", "T2.address_id"], "query_toks_no_value": ["select", "distinct", "t1", ".", "city", "from", "addresses", "as", "t1", "join", "people_addresses", "as", "t2", "on", "t1", ".", "address_id", "=", "t2", ".", "address_id"], "question": "What are the different cities where people live?", "question_toks": ["What", "are", "the", "different", "cities", "where", "people", "live", "?"], "guid": 1017}}
{"text": "Activity: actid, activity_name; Participates_in: stuid, actid; Faculty_Participates_in: FacID, actid; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building | What are the first names of the faculty members playing both Canoeing and Kayaking?", "sql": "SELECT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' INTERSECT SELECT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Kayaking'", "example": {"db_id": "activity_1", "query": "SELECT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' INTERSECT SELECT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Kayaking'", "query_toks": ["SELECT", "T1.lname", "FROM", "Faculty", "AS", "T1", "JOIN", "Faculty_participates_in", "AS", "T2", "ON", "T1.facID", "=", "T2.facID", "JOIN", "activity", "AS", "T3", "ON", "T2.actid", "=", "T2.actid", "WHERE", "T3.activity_name", "=", "'Canoeing", "'", "INTERSECT", "SELECT", "T1.lname", "FROM", "Faculty", "AS", "T1", "JOIN", "Faculty_participates_in", "AS", "T2", "ON", "T1.facID", "=", "T2.facID", "JOIN", "activity", "AS", "T3", "ON", "T2.actid", "=", "T2.actid", "WHERE", "T3.activity_name", "=", "'Kayaking", "'"], "query_toks_no_value": ["select", "t1", ".", "lname", "from", "faculty", "as", "t1", "join", "faculty_participates_in", "as", "t2", "on", "t1", ".", "facid", "=", "t2", ".", "facid", "join", "activity", "as", "t3", "on", "t2", ".", "actid", "=", "t2", ".", "actid", "where", "t3", ".", "activity_name", "=", "value", "intersect", "select", "t1", ".", "lname", "from", "faculty", "as", "t1", "join", "faculty_participates_in", "as", "t2", "on", "t1", ".", "facid", "=", "t2", ".", "facid", "join", "activity", "as", "t3", "on", "t2", ".", "actid", "=", "t2", ".", "actid", "where", "t3", ".", "activity_name", "=", "value"], "question": "What are the first names of the faculty members playing both Canoeing and Kayaking?", "question_toks": ["What", "are", "the", "first", "names", "of", "the", "faculty", "members", "playing", "both", "Canoeing", "and", "Kayaking", "?"], "guid": 1018}}
{"text": "Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Courses: course_id, course_name, course_description, other_details; Departments: department_id, department_name, department_description, other_details; Degree_Programs: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details; Sections: section_id, course_id, section_name, section_description, other_details; Semesters: semester_id, semester_name, semester_description, other_details; Students: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered; Student_Enrolment: student_enrolment_id, degree_program_id, semester_id, student_id, other_details; Student_Enrolment_Courses: student_course_id, course_id, student_enrolment_id; Transcripts: transcript_id, transcript_date, other_details | How many different degree names are offered?", "sql": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs", "example": {"db_id": "student_transcripts_tracking", "query": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs", "query_toks": ["SELECT", "count", "(", "DISTINCT", "degree_summary_name", ")", "FROM", "Degree_Programs"], "query_toks_no_value": ["select", "count", "(", "distinct", "degree_summary_name", ")", "from", "degree_programs"], "question": "How many different degree names are offered?", "question_toks": ["How", "many", "different", "degree", "names", "are", "offered", "?"], "guid": 1019}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Dorm: dormid, dorm_name, student_capacity, gender; Dorm_amenity: amenid, amenity_name; Has_amenity: dormid, amenid; Lives_in: stuid, dormid, room_number | Find the name of dorms only for female (F gender).", "sql": "SELECT dorm_name FROM dorm WHERE gender  =  'F'", "example": {"db_id": "dorm_1", "query": "SELECT dorm_name FROM dorm WHERE gender  =  'F'", "query_toks": ["SELECT", "dorm_name", "FROM", "dorm", "WHERE", "gender", "=", "'F", "'"], "query_toks_no_value": ["select", "dorm_name", "from", "dorm", "where", "gender", "=", "value"], "question": "Find the name of dorms only for female (F gender).", "question_toks": ["Find", "the", "name", "of", "dorms", "only", "for", "female", "(", "F", "gender", ")", "."], "guid": 1020}}
{"text": "Activity: actid, activity_name; Participates_in: stuid, actid; Faculty_Participates_in: FacID, actid; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building | What are the faculty id and the number of students each faculty has?", "sql": "SELECT T1.FacID ,  count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID", "example": {"db_id": "activity_1", "query": "SELECT T1.FacID ,  count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID", "query_toks": ["SELECT", "T1.FacID", ",", "count", "(", "*", ")", "FROM", "Faculty", "AS", "T1", "JOIN", "Student", "AS", "T2", "ON", "T1.FacID", "=", "T2.advisor", "GROUP", "BY", "T1.FacID"], "query_toks_no_value": ["select", "t1", ".", "facid", ",", "count", "(", "*", ")", "from", "faculty", "as", "t1", "join", "student", "as", "t2", "on", "t1", ".", "facid", "=", "t2", ".", "advisor", "group", "by", "t1", ".", "facid"], "question": "What are the faculty id and the number of students each faculty has?", "question_toks": ["What", "are", "the", "faculty", "id", "and", "the", "number", "of", "students", "each", "faculty", "has", "?"], "guid": 1021}}
{"text": "Course_Authors_and_Tutors: author_id, author_tutor_ATB, login_name, password, personal_name, middle_name, family_name, gender_mf, address_line_1; Students: student_id, date_of_registration, date_of_latest_logon, login_name, password, personal_name, middle_name, family_name; Subjects: subject_id, subject_name; Courses: course_id, author_id, subject_id, course_name, course_description; Student_Course_Enrolment: registration_id, student_id, course_id, date_of_enrolment, date_of_completion; Student_Tests_Taken: registration_id, date_test_taken, test_result | How many distinct courses are enrolled in by students?", "sql": "SELECT count(course_id) FROM Student_Course_Enrolment", "example": {"db_id": "e_learning", "query": "SELECT count(course_id) FROM Student_Course_Enrolment", "query_toks": ["SELECT", "count", "(", "course_id", ")", "FROM", "Student_Course_Enrolment"], "query_toks_no_value": ["select", "count", "(", "course_id", ")", "from", "student_course_enrolment"], "question": "How many distinct courses are enrolled in by students?", "question_toks": ["How", "many", "distinct", "courses", "are", "enrolled", "in", "by", "students", "?"], "guid": 1022}}
{"text": "list: LastName, FirstName, Grade, Classroom; teachers: LastName, FirstName, Classroom | For each fourth-grade classroom, show the classroom number and the total number of students using it.", "sql": "SELECT classroom ,  count(*) FROM list WHERE grade  =  \"4\" GROUP BY classroom", "example": {"db_id": "student_1", "query": "SELECT classroom ,  count(*) FROM list WHERE grade  =  \"4\" GROUP BY classroom", "query_toks": ["SELECT", "classroom", ",", "count", "(", "*", ")", "FROM", "list", "WHERE", "grade", "=", "``", "4", "''", "GROUP", "BY", "classroom"], "query_toks_no_value": ["select", "classroom", ",", "count", "(", "*", ")", "from", "list", "where", "grade", "=", "value", "group", "by", "classroom"], "question": "For each fourth-grade classroom, show the classroom number and the total number of students using it.", "question_toks": ["For", "each", "fourth-grade", "classroom", ",", "show", "the", "classroom", "number", "and", "the", "total", "number", "of", "students", "using", "it", "."], "guid": 1023}}
{"text": "Activity: actid, activity_name; Participates_in: stuid, actid; Faculty_Participates_in: FacID, actid; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building | Show all the distinct buildings that have faculty rooms.", "sql": "SELECT DISTINCT building FROM Faculty", "example": {"db_id": "activity_1", "query": "SELECT DISTINCT building FROM Faculty", "query_toks": ["SELECT", "DISTINCT", "building", "FROM", "Faculty"], "query_toks_no_value": ["select", "distinct", "building", "from", "faculty"], "question": "Show all the distinct buildings that have faculty rooms.", "question_toks": ["Show", "all", "the", "distinct", "buildings", "that", "have", "faculty", "rooms", "."], "guid": 1024}}
{"text": "Course_Authors_and_Tutors: author_id, author_tutor_ATB, login_name, password, personal_name, middle_name, family_name, gender_mf, address_line_1; Students: student_id, date_of_registration, date_of_latest_logon, login_name, password, personal_name, middle_name, family_name; Subjects: subject_id, subject_name; Courses: course_id, author_id, subject_id, course_name, course_description; Student_Course_Enrolment: registration_id, student_id, course_id, date_of_enrolment, date_of_completion; Student_Tests_Taken: registration_id, date_test_taken, test_result | What are the addresses of the course authors who teach either \"operating system\" or \"data structure\" course.", "sql": "SELECT T1.address_line_1 FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id WHERE T2.course_name  =  \"operating system\" OR T2.course_name  =  \"data structure\"", "example": {"db_id": "e_learning", "query": "SELECT T1.address_line_1 FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id WHERE T2.course_name  =  \"operating system\" OR T2.course_name  =  \"data structure\"", "query_toks": ["SELECT", "T1.address_line_1", "FROM", "Course_Authors_and_Tutors", "AS", "T1", "JOIN", "Courses", "AS", "T2", "ON", "T1.author_id", "=", "T2.author_id", "WHERE", "T2.course_name", "=", "``", "operating", "system", "''", "OR", "T2.course_name", "=", "``", "data", "structure", "''"], "query_toks_no_value": ["select", "t1", ".", "address_line_1", "from", "course_authors_and_tutors", "as", "t1", "join", "courses", "as", "t2", "on", "t1", ".", "author_id", "=", "t2", ".", "author_id", "where", "t2", ".", "course_name", "=", "value", "or", "t2", ".", "course_name", "=", "value"], "question": "What are the addresses of the course authors who teach either \"operating system\" or \"data structure\" course.", "question_toks": ["What", "are", "the", "addresses", "of", "the", "course", "authors", "who", "teach", "either", "``", "operating", "system", "''", "or", "``", "data", "structure", "''", "course", "."], "guid": 1025}}
{"text": "course: Course_ID, Staring_Date, Course; teacher: Teacher_ID, Name, Age, Hometown; course_arrange: Course_ID, Teacher_ID, Grade | What are the names of the teachers whose courses have not been arranged?", "sql": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)", "example": {"db_id": "course_teach", "query": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)", "query_toks": ["SELECT", "Name", "FROM", "teacher", "WHERE", "Teacher_id", "NOT", "IN", "(", "SELECT", "Teacher_id", "FROM", "course_arrange", ")"], "query_toks_no_value": ["select", "name", "from", "teacher", "where", "teacher_id", "not", "in", "(", "select", "teacher_id", "from", "course_arrange", ")"], "question": "What are the names of the teachers whose courses have not been arranged?", "question_toks": ["What", "are", "the", "names", "of", "the", "teachers", "whose", "courses", "have", "not", "been", "arranged", "?"], "guid": 1026}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Dorm: dormid, dorm_name, student_capacity, gender; Dorm_amenity: amenid, amenity_name; Has_amenity: dormid, amenid; Lives_in: stuid, dormid, room_number | What is the first name of the students who are in age 20 to 25 and living in PHL city?", "sql": "SELECT fname FROM student WHERE city_code  =  'PHL' AND age BETWEEN 20 AND 25", "example": {"db_id": "dorm_1", "query": "SELECT fname FROM student WHERE city_code  =  'PHL' AND age BETWEEN 20 AND 25", "query_toks": ["SELECT", "fname", "FROM", "student", "WHERE", "city_code", "=", "'PHL", "'", "AND", "age", "BETWEEN", "20", "AND", "25"], "query_toks_no_value": ["select", "fname", "from", "student", "where", "city_code", "=", "value", "and", "age", "between", "value", "and", "value"], "question": "What is the first name of the students who are in age 20 to 25 and living in PHL city?", "question_toks": ["What", "is", "the", "first", "name", "of", "the", "students", "who", "are", "in", "age", "20", "to", "25", "and", "living", "in", "PHL", "city", "?"], "guid": 1027}}
{"text": "School: School_id, School_name, Location, Mascot, Enrollment, IHSAA_Class, IHSAA_Football_Class, County; budget: School_id, Year, Budgeted, total_budget_percent_budgeted, Invested, total_budget_percent_invested, Budget_invested_percent; endowment: endowment_id, School_id, donator_name, amount | How many budgets are above 3000 in year 2001 or before?", "sql": "SELECT count(*) FROM budget WHERE budgeted  >  3000 AND YEAR  <=  2001", "example": {"db_id": "school_finance", "query": "SELECT count(*) FROM budget WHERE budgeted  >  3000 AND YEAR  <=  2001", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "budget", "WHERE", "budgeted", ">", "3000", "AND", "YEAR", "<", "=", "2001"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "budget", "where", "budgeted", ">", "value", "and", "year", "<", "=", "value"], "question": "How many budgets are above 3000 in year 2001 or before?", "question_toks": ["How", "many", "budgets", "are", "above", "3000", "in", "year", "2001", "or", "before", "?"], "guid": 1028}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Dorm: dormid, dorm_name, student_capacity, gender; Dorm_amenity: amenid, amenity_name; Has_amenity: dormid, amenid; Lives_in: stuid, dormid, room_number | Find the name of the dorm with the largest capacity.", "sql": "SELECT dorm_name FROM dorm ORDER BY student_capacity DESC LIMIT 1", "example": {"db_id": "dorm_1", "query": "SELECT dorm_name FROM dorm ORDER BY student_capacity DESC LIMIT 1", "query_toks": ["SELECT", "dorm_name", "FROM", "dorm", "ORDER", "BY", "student_capacity", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "dorm_name", "from", "dorm", "order", "by", "student_capacity", "desc", "limit", "value"], "question": "Find the name of the dorm with the largest capacity.", "question_toks": ["Find", "the", "name", "of", "the", "dorm", "with", "the", "largest", "capacity", "."], "guid": 1029}}
{"text": "driver: Driver_ID, Name, Party, Home_city, Age; school: School_ID, Grade, School, Location, Type; school_bus: School_ID, Driver_ID, Years_Working, If_full_time | Show the school name and driver name for all school buses.", "sql": "SELECT T2.school ,  T3.name FROM school_bus AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id JOIN driver AS T3 ON T1.driver_id  =  T3.driver_id", "example": {"db_id": "school_bus", "query": "SELECT T2.school ,  T3.name FROM school_bus AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id JOIN driver AS T3 ON T1.driver_id  =  T3.driver_id", "query_toks": ["SELECT", "T2.school", ",", "T3.name", "FROM", "school_bus", "AS", "T1", "JOIN", "school", "AS", "T2", "ON", "T1.school_id", "=", "T2.school_id", "JOIN", "driver", "AS", "T3", "ON", "T1.driver_id", "=", "T3.driver_id"], "query_toks_no_value": ["select", "t2", ".", "school", ",", "t3", ".", "name", "from", "school_bus", "as", "t1", "join", "school", "as", "t2", "on", "t1", ".", "school_id", "=", "t2", ".", "school_id", "join", "driver", "as", "t3", "on", "t1", ".", "driver_id", "=", "t3", ".", "driver_id"], "question": "Show the school name and driver name for all school buses.", "question_toks": ["Show", "the", "school", "name", "and", "driver", "name", "for", "all", "school", "buses", "."], "guid": 1030}}
{"text": "list: LastName, FirstName, Grade, Classroom; teachers: LastName, FirstName, Classroom | Find the number of teachers who teach the student called MADLOCK RAY.", "sql": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"MADLOCK\" AND T1.lastname  =  \"RAY\"", "example": {"db_id": "student_1", "query": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"MADLOCK\" AND T1.lastname  =  \"RAY\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "list", "AS", "T1", "JOIN", "teachers", "AS", "T2", "ON", "T1.classroom", "=", "T2.classroom", "WHERE", "T1.firstname", "=", "``", "MADLOCK", "''", "AND", "T1.lastname", "=", "``", "RAY", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "list", "as", "t1", "join", "teachers", "as", "t2", "on", "t1", ".", "classroom", "=", "t2", ".", "classroom", "where", "t1", ".", "firstname", "=", "value", "and", "t1", ".", "lastname", "=", "value"], "question": "Find the number of teachers who teach the student called MADLOCK RAY.", "question_toks": ["Find", "the", "number", "of", "teachers", "who", "teach", "the", "student", "called", "MADLOCK", "RAY", "."], "guid": 1031}}
{"text": "list: LastName, FirstName, Grade, Classroom; teachers: LastName, FirstName, Classroom | Find the classrooms in which grade 4 is studying.", "sql": "SELECT DISTINCT classroom FROM list WHERE grade  =  4", "example": {"db_id": "student_1", "query": "SELECT DISTINCT classroom FROM list WHERE grade  =  4", "query_toks": ["SELECT", "DISTINCT", "classroom", "FROM", "list", "WHERE", "grade", "=", "4"], "query_toks_no_value": ["select", "distinct", "classroom", "from", "list", "where", "grade", "=", "value"], "question": "Find the classrooms in which grade 4 is studying.", "question_toks": ["Find", "the", "classrooms", "in", "which", "grade", "4", "is", "studying", "."], "guid": 1032}}
{"text": "School: School_id, School_name, Location, Mascot, Enrollment, IHSAA_Class, IHSAA_Football_Class, County; budget: School_id, Year, Budgeted, total_budget_percent_budgeted, Invested, total_budget_percent_invested, Budget_invested_percent; endowment: endowment_id, School_id, donator_name, amount | What are the mascots for schools with enrollments above the average?", "sql": "SELECT mascot FROM school WHERE enrollment  >  (SELECT avg(enrollment) FROM school)", "example": {"db_id": "school_finance", "query": "SELECT mascot FROM school WHERE enrollment  >  (SELECT avg(enrollment) FROM school)", "query_toks": ["SELECT", "mascot", "FROM", "school", "WHERE", "enrollment", ">", "(", "SELECT", "avg", "(", "enrollment", ")", "FROM", "school", ")"], "query_toks_no_value": ["select", "mascot", "from", "school", "where", "enrollment", ">", "(", "select", "avg", "(", "enrollment", ")", "from", "school", ")"], "question": "What are the mascots for schools with enrollments above the average?", "question_toks": ["What", "are", "the", "mascots", "for", "schools", "with", "enrollments", "above", "the", "average", "?"], "guid": 1033}}
{"text": "Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Courses: course_id, course_name, course_description, other_details; Departments: department_id, department_name, department_description, other_details; Degree_Programs: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details; Sections: section_id, course_id, section_name, section_description, other_details; Semesters: semester_id, semester_name, semester_description, other_details; Students: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered; Student_Enrolment: student_enrolment_id, degree_program_id, semester_id, student_id, other_details; Student_Enrolment_Courses: student_course_id, course_id, student_enrolment_id; Transcripts: transcript_id, transcript_date, other_details | Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582 .", "sql": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'", "example": {"db_id": "student_transcripts_tracking", "query": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'", "query_toks": ["select", "t1.first_name", "from", "students", "as", "t1", "join", "addresses", "as", "t2", "on", "t1.permanent_address_id", "=", "t2.address_id", "where", "t2.country", "=", "\"haiti\"", "or", "t1.cell_mobile_number", "=", "\"09700166582\""], "query_toks_no_value": ["select", "t1", ".", "first_name", "from", "students", "as", "t1", "join", "addresses", "as", "t2", "on", "t1", ".", "permanent_address_id", "=", "t2", ".", "address_id", "where", "t2", ".", "country", "=", "value", "or", "t1", ".", "cell_mobile_number", "=", "value"], "question": "Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582 .", "question_toks": ["Find", "the", "first", "name", "of", "the", "students", "who", "permanently", "live", "in", "the", "country", "Haiti", "or", "have", "the", "cell", "phone", "number", "09700166582", "."], "guid": 1034}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Dorm: dormid, dorm_name, student_capacity, gender; Dorm_amenity: amenid, amenity_name; Has_amenity: dormid, amenid; Lives_in: stuid, dormid, room_number | How many dorms are in the database?", "sql": "SELECT count(*) FROM dorm", "example": {"db_id": "dorm_1", "query": "SELECT count(*) FROM dorm", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "dorm"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "dorm"], "question": "How many dorms are in the database?", "question_toks": ["How", "many", "dorms", "are", "in", "the", "database", "?"], "guid": 1035}}
{"text": "list: LastName, FirstName, Grade, Classroom; teachers: LastName, FirstName, Classroom | Find the number of students in total.", "sql": "SELECT count(*) FROM list", "example": {"db_id": "student_1", "query": "SELECT count(*) FROM list", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "list"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "list"], "question": "Find the number of students in total.", "question_toks": ["Find", "the", "number", "of", "students", "in", "total", "."], "guid": 1036}}
{"text": "School: School_id, School_name, Location, Mascot, Enrollment, IHSAA_Class, IHSAA_Football_Class, County; budget: School_id, Year, Budgeted, total_budget_percent_budgeted, Invested, total_budget_percent_invested, Budget_invested_percent; endowment: endowment_id, School_id, donator_name, amount | Show the average, maximum, minimum enrollment of all schools.", "sql": "SELECT avg(enrollment) ,  max(enrollment) ,  min(enrollment) FROM school", "example": {"db_id": "school_finance", "query": "SELECT avg(enrollment) ,  max(enrollment) ,  min(enrollment) FROM school", "query_toks": ["SELECT", "avg", "(", "enrollment", ")", ",", "max", "(", "enrollment", ")", ",", "min", "(", "enrollment", ")", "FROM", "school"], "query_toks_no_value": ["select", "avg", "(", "enrollment", ")", ",", "max", "(", "enrollment", ")", ",", "min", "(", "enrollment", ")", "from", "school"], "question": "Show the average, maximum, minimum enrollment of all schools.", "question_toks": ["Show", "the", "average", ",", "maximum", ",", "minimum", "enrollment", "of", "all", "schools", "."], "guid": 1037}}
{"text": "Activity: actid, activity_name; Participates_in: stuid, actid; Faculty_Participates_in: FacID, actid; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building | What are the phone, room, and building of the faculty member called Jerry Prince?", "sql": "SELECT phone ,  room ,  building FROM Faculty WHERE Fname  =  \"Jerry\" AND Lname  =  \"Prince\"", "example": {"db_id": "activity_1", "query": "SELECT phone ,  room ,  building FROM Faculty WHERE Fname  =  \"Jerry\" AND Lname  =  \"Prince\"", "query_toks": ["SELECT", "phone", ",", "room", ",", "building", "FROM", "Faculty", "WHERE", "Fname", "=", "``", "Jerry", "''", "AND", "Lname", "=", "``", "Prince", "''"], "query_toks_no_value": ["select", "phone", ",", "room", ",", "building", "from", "faculty", "where", "fname", "=", "value", "and", "lname", "=", "value"], "question": "What are the phone, room, and building of the faculty member called Jerry Prince?", "question_toks": ["What", "are", "the", "phone", ",", "room", ",", "and", "building", "of", "the", "faculty", "member", "called", "Jerry", "Prince", "?"], "guid": 1038}}
{"text": "Course_Authors_and_Tutors: author_id, author_tutor_ATB, login_name, password, personal_name, middle_name, family_name, gender_mf, address_line_1; Students: student_id, date_of_registration, date_of_latest_logon, login_name, password, personal_name, middle_name, family_name; Subjects: subject_id, subject_name; Courses: course_id, author_id, subject_id, course_name, course_description; Student_Course_Enrolment: registration_id, student_id, course_id, date_of_enrolment, date_of_completion; Student_Tests_Taken: registration_id, date_test_taken, test_result | List all the subject names.", "sql": "SELECT subject_name FROM SUBJECTS", "example": {"db_id": "e_learning", "query": "SELECT subject_name FROM SUBJECTS", "query_toks": ["SELECT", "subject_name", "FROM", "SUBJECTS"], "query_toks_no_value": ["select", "subject_name", "from", "subjects"], "question": "List all the subject names.", "question_toks": ["List", "all", "the", "subject", "names", "."], "guid": 1039}}
{"text": "Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Courses: course_id, course_name, course_description, other_details; Departments: department_id, department_name, department_description, other_details; Degree_Programs: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details; Sections: section_id, course_id, section_name, section_description, other_details; Semesters: semester_id, semester_name, semester_description, other_details; Students: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered; Student_Enrolment: student_enrolment_id, degree_program_id, semester_id, student_id, other_details; Student_Enrolment_Courses: student_course_id, course_id, student_enrolment_id; Transcripts: transcript_id, transcript_date, other_details | What is the description of the department whose name has the substring the computer?", "sql": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'", "example": {"db_id": "student_transcripts_tracking", "query": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'", "query_toks": ["SELECT", "department_description", "FROM", "Departments", "WHERE", "department_name", "LIKE", "'", "%", "computer", "%", "'"], "query_toks_no_value": ["select", "department_description", "from", "departments", "where", "department_name", "like", "value"], "question": "What is the description of the department whose name has the substring the computer?", "question_toks": ["What", "is", "the", "description", "of", "the", "department", "whose", "name", "has", "the", "substring", "the", "computer", "?"], "guid": 1040}}
{"text": "Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Courses: course_id, course_name, course_description, other_details; Departments: department_id, department_name, department_description, other_details; Degree_Programs: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details; Sections: section_id, course_id, section_name, section_description, other_details; Semesters: semester_id, semester_name, semester_description, other_details; Students: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered; Student_Enrolment: student_enrolment_id, degree_program_id, semester_id, student_id, other_details; Student_Enrolment_Courses: student_course_id, course_id, student_enrolment_id; Transcripts: transcript_id, transcript_date, other_details | Which department offers the most number of degrees? List department name and id.", "sql": "SELECT T2.department_name ,  T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "student_transcripts_tracking", "query": "SELECT T2.department_name ,  T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T2.department_name", ",", "T1.department_id", "FROM", "Degree_Programs", "AS", "T1", "JOIN", "Departments", "AS", "T2", "ON", "T1.department_id", "=", "T2.department_id", "GROUP", "BY", "T1.department_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "department_name", ",", "t1", ".", "department_id", "from", "degree_programs", "as", "t1", "join", "departments", "as", "t2", "on", "t1", ".", "department_id", "=", "t2", ".", "department_id", "group", "by", "t1", ".", "department_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which department offers the most number of degrees? List department name and id.", "question_toks": ["Which", "department", "offers", "the", "most", "number", "of", "degrees", "?", "List", "department", "name", "and", "id", "."], "guid": 1041}}
{"text": "Course_Authors_and_Tutors: author_id, author_tutor_ATB, login_name, password, personal_name, middle_name, family_name, gender_mf, address_line_1; Students: student_id, date_of_registration, date_of_latest_logon, login_name, password, personal_name, middle_name, family_name; Subjects: subject_id, subject_name; Courses: course_id, author_id, subject_id, course_name, course_description; Student_Course_Enrolment: registration_id, student_id, course_id, date_of_enrolment, date_of_completion; Student_Tests_Taken: registration_id, date_test_taken, test_result | Which course authors teach two or more courses? Give me their addresses and author IDs.", "sql": "SELECT T1.address_line_1 ,  T2.author_id FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id GROUP BY T2.author_id HAVING Count(*)  >=  2", "example": {"db_id": "e_learning", "query": "SELECT T1.address_line_1 ,  T2.author_id FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id GROUP BY T2.author_id HAVING Count(*)  >=  2", "query_toks": ["SELECT", "T1.address_line_1", ",", "T2.author_id", "FROM", "Course_Authors_and_Tutors", "AS", "T1", "JOIN", "Courses", "AS", "T2", "ON", "T1.author_id", "=", "T2.author_id", "GROUP", "BY", "T2.author_id", "HAVING", "Count", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "t1", ".", "address_line_1", ",", "t2", ".", "author_id", "from", "course_authors_and_tutors", "as", "t1", "join", "courses", "as", "t2", "on", "t1", ".", "author_id", "=", "t2", ".", "author_id", "group", "by", "t2", ".", "author_id", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "Which course authors teach two or more courses? Give me their addresses and author IDs.", "question_toks": ["Which", "course", "authors", "teach", "two", "or", "more", "courses", "?", "Give", "me", "their", "addresses", "and", "author", "IDs", "."], "guid": 1042}}
{"text": "Course_Authors_and_Tutors: author_id, author_tutor_ATB, login_name, password, personal_name, middle_name, family_name, gender_mf, address_line_1; Students: student_id, date_of_registration, date_of_latest_logon, login_name, password, personal_name, middle_name, family_name; Subjects: subject_id, subject_name; Courses: course_id, author_id, subject_id, course_name, course_description; Student_Course_Enrolment: registration_id, student_id, course_id, date_of_enrolment, date_of_completion; Student_Tests_Taken: registration_id, date_test_taken, test_result | What are the names of the courses taught by the tutor whose personal name is \"Julio\"?", "sql": "SELECT T2.course_name FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id WHERE T1.personal_name  =  \"Julio\"", "example": {"db_id": "e_learning", "query": "SELECT T2.course_name FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id WHERE T1.personal_name  =  \"Julio\"", "query_toks": ["SELECT", "T2.course_name", "FROM", "Course_Authors_and_Tutors", "AS", "T1", "JOIN", "Courses", "AS", "T2", "ON", "T1.author_id", "=", "T2.author_id", "WHERE", "T1.personal_name", "=", "``", "Julio", "''"], "query_toks_no_value": ["select", "t2", ".", "course_name", "from", "course_authors_and_tutors", "as", "t1", "join", "courses", "as", "t2", "on", "t1", ".", "author_id", "=", "t2", ".", "author_id", "where", "t1", ".", "personal_name", "=", "value"], "question": "What are the names of the courses taught by the tutor whose personal name is \"Julio\"?", "question_toks": ["What", "are", "the", "names", "of", "the", "courses", "taught", "by", "the", "tutor", "whose", "personal", "name", "is", "``", "Julio", "''", "?"], "guid": 1043}}
{"text": "Addresses: address_id, line_1, line_2, city, zip_postcode, state_province_county, country; People: person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password; Students: student_id, student_details; Courses: course_id, course_name, course_description, other_details; People_Addresses: person_address_id, person_id, address_id, date_from, date_to; Student_Course_Registrations: student_id, course_id, registration_date; Student_Course_Attendance: student_id, course_id, date_of_attendance; Candidates: candidate_id, candidate_details; Candidate_Assessments: candidate_id, qualification, assessment_date, asessment_outcome_code | Find the id of courses which are registered or attended by student whose id is 121?", "sql": "SELECT course_id FROM student_course_registrations WHERE student_id = 121 UNION SELECT course_id FROM student_course_attendance WHERE student_id = 121", "example": {"db_id": "student_assessment", "query": "SELECT course_id FROM student_course_registrations WHERE student_id = 121 UNION SELECT course_id FROM student_course_attendance WHERE student_id = 121", "query_toks": ["SELECT", "course_id", "FROM", "student_course_registrations", "WHERE", "student_id", "=", "121", "UNION", "SELECT", "course_id", "FROM", "student_course_attendance", "WHERE", "student_id", "=", "121"], "query_toks_no_value": ["select", "course_id", "from", "student_course_registrations", "where", "student_id", "=", "value", "union", "select", "course_id", "from", "student_course_attendance", "where", "student_id", "=", "value"], "question": "Find the id of courses which are registered or attended by student whose id is 121?", "question_toks": ["Find", "the", "id", "of", "courses", "which", "are", "registered", "or", "attended", "by", "student", "whose", "id", "is", "121", "?"], "guid": 1044}}
{"text": "Addresses: address_id, line_1, line_2, city, zip_postcode, state_province_county, country; People: person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password; Students: student_id, student_details; Courses: course_id, course_name, course_description, other_details; People_Addresses: person_address_id, person_id, address_id, date_from, date_to; Student_Course_Registrations: student_id, course_id, registration_date; Student_Course_Attendance: student_id, course_id, date_of_attendance; Candidates: candidate_id, candidate_details; Candidate_Assessments: candidate_id, qualification, assessment_date, asessment_outcome_code | For every student who is registered for some course, how many courses are they registered for?", "sql": "SELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id", "example": {"db_id": "student_assessment", "query": "SELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id", "query_toks": ["SELECT", "T1.student_id", ",", "count", "(", "*", ")", "FROM", "students", "AS", "T1", "JOIN", "student_course_registrations", "AS", "T2", "ON", "T1.student_id", "=", "T2.student_id", "GROUP", "BY", "T1.student_id"], "query_toks_no_value": ["select", "t1", ".", "student_id", ",", "count", "(", "*", ")", "from", "students", "as", "t1", "join", "student_course_registrations", "as", "t2", "on", "t1", ".", "student_id", "=", "t2", ".", "student_id", "group", "by", "t1", ".", "student_id"], "question": "For every student who is registered for some course, how many courses are they registered for?", "question_toks": ["For", "every", "student", "who", "is", "registered", "for", "some", "course", ",", "how", "many", "courses", "are", "they", "registered", "for", "?"], "guid": 1045}}
{"text": "Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Courses: course_id, course_name, course_description, other_details; Departments: department_id, department_name, department_description, other_details; Degree_Programs: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details; Sections: section_id, course_id, section_name, section_description, other_details; Semesters: semester_id, semester_name, semester_description, other_details; Students: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered; Student_Enrolment: student_enrolment_id, degree_program_id, semester_id, student_id, other_details; Student_Enrolment_Courses: student_course_id, course_id, student_enrolment_id; Transcripts: transcript_id, transcript_date, other_details | What is the program id and the summary of the degree that has the most students enrolled?", "sql": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "student_transcripts_tracking", "query": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.degree_program_id", ",", "T1.degree_summary_name", "FROM", "Degree_Programs", "AS", "T1", "JOIN", "Student_Enrolment", "AS", "T2", "ON", "T1.degree_program_id", "=", "T2.degree_program_id", "GROUP", "BY", "T1.degree_program_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "degree_program_id", ",", "t1", ".", "degree_summary_name", "from", "degree_programs", "as", "t1", "join", "student_enrolment", "as", "t2", "on", "t1", ".", "degree_program_id", "=", "t2", ".", "degree_program_id", "group", "by", "t1", ".", "degree_program_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the program id and the summary of the degree that has the most students enrolled?", "question_toks": ["What", "is", "the", "program", "id", "and", "the", "summary", "of", "the", "degree", "that", "has", "the", "most", "students", "enrolled", "?"], "guid": 1046}}
{"text": "Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Courses: course_id, course_name, course_description, other_details; Departments: department_id, department_name, department_description, other_details; Degree_Programs: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details; Sections: section_id, course_id, section_name, section_description, other_details; Semesters: semester_id, semester_name, semester_description, other_details; Students: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered; Student_Enrolment: student_enrolment_id, degree_program_id, semester_id, student_id, other_details; Student_Enrolment_Courses: student_course_id, course_id, student_enrolment_id; Transcripts: transcript_id, transcript_date, other_details | Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program.", "sql": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id", "example": {"db_id": "student_transcripts_tracking", "query": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id", "query_toks": ["SELECT", "T1.last_name", "FROM", "Students", "AS", "T1", "JOIN", "Addresses", "AS", "T2", "ON", "T1.current_address_id", "=", "T2.address_id", "WHERE", "T2.state_province_county", "=", "'NorthCarolina", "'", "EXCEPT", "SELECT", "DISTINCT", "T3.last_name", "FROM", "Students", "AS", "T3", "JOIN", "Student_Enrolment", "AS", "T4", "ON", "T3.student_id", "=", "T4.student_id"], "query_toks_no_value": ["select", "t1", ".", "last_name", "from", "students", "as", "t1", "join", "addresses", "as", "t2", "on", "t1", ".", "current_address_id", "=", "t2", ".", "address_id", "where", "t2", ".", "state_province_county", "=", "value", "except", "select", "distinct", "t3", ".", "last_name", "from", "students", "as", "t3", "join", "student_enrolment", "as", "t4", "on", "t3", ".", "student_id", "=", "t4", ".", "student_id"], "question": "Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program.", "question_toks": ["Find", "the", "last", "name", "of", "the", "students", "who", "currently", "live", "in", "the", "state", "of", "North", "Carolina", "but", "have", "not", "registered", "in", "any", "degree", "program", "."], "guid": 1047}}
{"text": "Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Courses: course_id, course_name, course_description, other_details; Departments: department_id, department_name, department_description, other_details; Degree_Programs: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details; Sections: section_id, course_id, section_name, section_description, other_details; Semesters: semester_id, semester_name, semester_description, other_details; Students: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered; Student_Enrolment: student_enrolment_id, degree_program_id, semester_id, student_id, other_details; Student_Enrolment_Courses: student_course_id, course_id, student_enrolment_id; Transcripts: transcript_id, transcript_date, other_details | Who is the earliest graduate of the school? List the first name, middle name and last name.", "sql": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1", "example": {"db_id": "student_transcripts_tracking", "query": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1", "query_toks": ["SELECT", "first_name", ",", "middle_name", ",", "last_name", "FROM", "Students", "ORDER", "BY", "date_left", "ASC", "LIMIT", "1"], "query_toks_no_value": ["select", "first_name", ",", "middle_name", ",", "last_name", "from", "students", "order", "by", "date_left", "asc", "limit", "value"], "question": "Who is the earliest graduate of the school? List the first name, middle name and last name.", "question_toks": ["Who", "is", "the", "earliest", "graduate", "of", "the", "school", "?", "List", "the", "first", "name", ",", "middle", "name", "and", "last", "name", "."], "guid": 1048}}
{"text": "School: School_id, School_name, Location, Mascot, Enrollment, IHSAA_Class, IHSAA_Football_Class, County; budget: School_id, Year, Budgeted, total_budget_percent_budgeted, Invested, total_budget_percent_invested, Budget_invested_percent; endowment: endowment_id, School_id, donator_name, amount | List the name, IHSAA Football Class, and Mascot of the schools that have more than 6000 of budgeted amount or were founded before 2003, in the order of percent of total invested budget and total budgeted budget.", "sql": "SELECT T1.School_name ,  T1.Mascot ,  T1.IHSAA_Football_Class FROM school AS T1 JOIN budget AS T2 ON T1.school_id  =  T2.school_id WHERE Budgeted  >  6000 OR YEAR  <  2003 ORDER BY T2.total_budget_percent_invested ,  T2.total_budget_percent_budgeted", "example": {"db_id": "school_finance", "query": "SELECT T1.School_name ,  T1.Mascot ,  T1.IHSAA_Football_Class FROM school AS T1 JOIN budget AS T2 ON T1.school_id  =  T2.school_id WHERE Budgeted  >  6000 OR YEAR  <  2003 ORDER BY T2.total_budget_percent_invested ,  T2.total_budget_percent_budgeted", "query_toks": ["SELECT", "T1.School_name", ",", "T1.Mascot", ",", "T1.IHSAA_Football_Class", "FROM", "school", "AS", "T1", "JOIN", "budget", "AS", "T2", "ON", "T1.school_id", "=", "T2.school_id", "WHERE", "Budgeted", ">", "6000", "OR", "YEAR", "<", "2003", "ORDER", "BY", "T2.total_budget_percent_invested", ",", "T2.total_budget_percent_budgeted"], "query_toks_no_value": ["select", "t1", ".", "school_name", ",", "t1", ".", "mascot", ",", "t1", ".", "ihsaa_football_class", "from", "school", "as", "t1", "join", "budget", "as", "t2", "on", "t1", ".", "school_id", "=", "t2", ".", "school_id", "where", "budgeted", ">", "value", "or", "year", "<", "value", "order", "by", "t2", ".", "total_budget_percent_invested", ",", "t2", ".", "total_budget_percent_budgeted"], "question": "List the name, IHSAA Football Class, and Mascot of the schools that have more than 6000 of budgeted amount or were founded before 2003, in the order of percent of total invested budget and total budgeted budget.", "question_toks": ["List", "the", "name", ",", "IHSAA", "Football", "Class", ",", "and", "Mascot", "of", "the", "schools", "that", "have", "more", "than", "6000", "of", "budgeted", "amount", "or", "were", "founded", "before", "2003", ",", "in", "the", "order", "of", "percent", "of", "total", "invested", "budget", "and", "total", "budgeted", "budget", "."], "guid": 1049}}
{"text": "course: Course_ID, Staring_Date, Course; teacher: Teacher_ID, Name, Age, Hometown; course_arrange: Course_ID, Teacher_ID, Grade | Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name.", "sql": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name", "example": {"db_id": "course_teach", "query": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name", "query_toks": ["SELECT", "T3.Name", ",", "T2.Course", "FROM", "course_arrange", "AS", "T1", "JOIN", "course", "AS", "T2", "ON", "T1.Course_ID", "=", "T2.Course_ID", "JOIN", "teacher", "AS", "T3", "ON", "T1.Teacher_ID", "=", "T3.Teacher_ID", "ORDER", "BY", "T3.Name"], "query_toks_no_value": ["select", "t3", ".", "name", ",", "t2", ".", "course", "from", "course_arrange", "as", "t1", "join", "course", "as", "t2", "on", "t1", ".", "course_id", "=", "t2", ".", "course_id", "join", "teacher", "as", "t3", "on", "t1", ".", "teacher_id", "=", "t3", ".", "teacher_id", "order", "by", "t3", ".", "name"], "question": "Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name.", "question_toks": ["Show", "names", "of", "teachers", "and", "the", "courses", "they", "are", "arranged", "to", "teach", "in", "ascending", "alphabetical", "order", "of", "the", "teacher", "'s", "name", "."], "guid": 1050}}
{"text": "Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Courses: course_id, course_name, course_description, other_details; Departments: department_id, department_name, department_description, other_details; Degree_Programs: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details; Sections: section_id, course_id, section_name, section_description, other_details; Semesters: semester_id, semester_name, semester_description, other_details; Students: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered; Student_Enrolment: student_enrolment_id, degree_program_id, semester_id, student_id, other_details; Student_Enrolment_Courses: student_course_id, course_id, student_enrolment_id; Transcripts: transcript_id, transcript_date, other_details | When was the last transcript released?", "sql": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1", "example": {"db_id": "student_transcripts_tracking", "query": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1", "query_toks": ["SELECT", "transcript_date", "FROM", "Transcripts", "ORDER", "BY", "transcript_date", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "transcript_date", "from", "transcripts", "order", "by", "transcript_date", "desc", "limit", "value"], "question": "When was the last transcript released?", "question_toks": ["When", "was", "the", "last", "transcript", "released", "?"], "guid": 1051}}
{"text": "Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Courses: course_id, course_name, course_description, other_details; Departments: department_id, department_name, department_description, other_details; Degree_Programs: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details; Sections: section_id, course_id, section_name, section_description, other_details; Semesters: semester_id, semester_name, semester_description, other_details; Students: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered; Student_Enrolment: student_enrolment_id, degree_program_id, semester_id, student_id, other_details; Student_Enrolment_Courses: student_course_id, course_id, student_enrolment_id; Transcripts: transcript_id, transcript_date, other_details | Show the date and id of the transcript with at least 2 course results.", "sql": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2", "example": {"db_id": "student_transcripts_tracking", "query": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2", "query_toks": ["SELECT", "T2.transcript_date", ",", "T1.transcript_id", "FROM", "Transcript_Contents", "AS", "T1", "JOIN", "Transcripts", "AS", "T2", "ON", "T1.transcript_id", "=", "T2.transcript_id", "GROUP", "BY", "T1.transcript_id", "HAVING", "count", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "t2", ".", "transcript_date", ",", "t1", ".", "transcript_id", "from", "transcript_contents", "as", "t1", "join", "transcripts", "as", "t2", "on", "t1", ".", "transcript_id", "=", "t2", ".", "transcript_id", "group", "by", "t1", ".", "transcript_id", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "Show the date and id of the transcript with at least 2 course results.", "question_toks": ["Show", "the", "date", "and", "id", "of", "the", "transcript", "with", "at", "least", "2", "course", "results", "."], "guid": 1052}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Dorm: dormid, dorm_name, student_capacity, gender; Dorm_amenity: amenid, amenity_name; Has_amenity: dormid, amenid; Lives_in: stuid, dormid, room_number | What is the name of the dorm with both a TV Lounge and Study Room listed as amenities?", "sql": "SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge' INTERSECT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'Study Room'", "example": {"db_id": "dorm_1", "query": "SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge' INTERSECT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'Study Room'", "query_toks": ["SELECT", "T1.dorm_name", "FROM", "dorm", "AS", "T1", "JOIN", "has_amenity", "AS", "T2", "ON", "T1.dormid", "=", "T2.dormid", "JOIN", "dorm_amenity", "AS", "T3", "ON", "T2.amenid", "=", "T3.amenid", "WHERE", "T3.amenity_name", "=", "'TV", "Lounge", "'", "INTERSECT", "SELECT", "T1.dorm_name", "FROM", "dorm", "AS", "T1", "JOIN", "has_amenity", "AS", "T2", "ON", "T1.dormid", "=", "T2.dormid", "JOIN", "dorm_amenity", "AS", "T3", "ON", "T2.amenid", "=", "T3.amenid", "WHERE", "T3.amenity_name", "=", "'Study", "Room", "'"], "query_toks_no_value": ["select", "t1", ".", "dorm_name", "from", "dorm", "as", "t1", "join", "has_amenity", "as", "t2", "on", "t1", ".", "dormid", "=", "t2", ".", "dormid", "join", "dorm_amenity", "as", "t3", "on", "t2", ".", "amenid", "=", "t3", ".", "amenid", "where", "t3", ".", "amenity_name", "=", "value", "intersect", "select", "t1", ".", "dorm_name", "from", "dorm", "as", "t1", "join", "has_amenity", "as", "t2", "on", "t1", ".", "dormid", "=", "t2", ".", "dormid", "join", "dorm_amenity", "as", "t3", "on", "t2", ".", "amenid", "=", "t3", ".", "amenid", "where", "t3", ".", "amenity_name", "=", "value"], "question": "What is the name of the dorm with both a TV Lounge and Study Room listed as amenities?", "question_toks": ["What", "is", "the", "name", "of", "the", "dorm", "with", "both", "a", "TV", "Lounge", "and", "Study", "Room", "listed", "as", "amenities", "?"], "guid": 1053}}
{"text": "list: LastName, FirstName, Grade, Classroom; teachers: LastName, FirstName, Classroom | Which classrooms are used by grade 4?", "sql": "SELECT DISTINCT classroom FROM list WHERE grade  =  4", "example": {"db_id": "student_1", "query": "SELECT DISTINCT classroom FROM list WHERE grade  =  4", "query_toks": ["SELECT", "DISTINCT", "classroom", "FROM", "list", "WHERE", "grade", "=", "4"], "query_toks_no_value": ["select", "distinct", "classroom", "from", "list", "where", "grade", "=", "value"], "question": "Which classrooms are used by grade 4?", "question_toks": ["Which", "classrooms", "are", "used", "by", "grade", "4", "?"], "guid": 1054}}
{"text": "Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Courses: course_id, course_name, course_description, other_details; Departments: department_id, department_name, department_description, other_details; Degree_Programs: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details; Sections: section_id, course_id, section_name, section_description, other_details; Semesters: semester_id, semester_name, semester_description, other_details; Students: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered; Student_Enrolment: student_enrolment_id, degree_program_id, semester_id, student_id, other_details; Student_Enrolment_Courses: student_course_id, course_id, student_enrolment_id; Transcripts: transcript_id, transcript_date, other_details | What is the first, middle, and last name of the earliest school graduate?", "sql": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1", "example": {"db_id": "student_transcripts_tracking", "query": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1", "query_toks": ["SELECT", "first_name", ",", "middle_name", ",", "last_name", "FROM", "Students", "ORDER", "BY", "date_left", "ASC", "LIMIT", "1"], "query_toks_no_value": ["select", "first_name", ",", "middle_name", ",", "last_name", "from", "students", "order", "by", "date_left", "asc", "limit", "value"], "question": "What is the first, middle, and last name of the earliest school graduate?", "question_toks": ["What", "is", "the", "first", ",", "middle", ",", "and", "last", "name", "of", "the", "earliest", "school", "graduate", "?"], "guid": 1055}}
{"text": "Activity: actid, activity_name; Participates_in: stuid, actid; Faculty_Participates_in: FacID, actid; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building | Find the first names of professors who are not playing Canoeing or Kayaking.", "sql": "SELECT lname FROM faculty WHERE rank  =  'Professor' EXCEPT SELECT DISTINCT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' OR T3.activity_name  =  'Kayaking'", "example": {"db_id": "activity_1", "query": "SELECT lname FROM faculty WHERE rank  =  'Professor' EXCEPT SELECT DISTINCT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' OR T3.activity_name  =  'Kayaking'", "query_toks": ["SELECT", "lname", "FROM", "faculty", "WHERE", "rank", "=", "'Professor", "'", "EXCEPT", "SELECT", "DISTINCT", "T1.lname", "FROM", "Faculty", "AS", "T1", "JOIN", "Faculty_participates_in", "AS", "T2", "ON", "T1.facID", "=", "T2.facID", "JOIN", "activity", "AS", "T3", "ON", "T2.actid", "=", "T2.actid", "WHERE", "T3.activity_name", "=", "'Canoeing", "'", "OR", "T3.activity_name", "=", "'Kayaking", "'"], "query_toks_no_value": ["select", "lname", "from", "faculty", "where", "rank", "=", "value", "except", "select", "distinct", "t1", ".", "lname", "from", "faculty", "as", "t1", "join", "faculty_participates_in", "as", "t2", "on", "t1", ".", "facid", "=", "t2", ".", "facid", "join", "activity", "as", "t3", "on", "t2", ".", "actid", "=", "t2", ".", "actid", "where", "t3", ".", "activity_name", "=", "value", "or", "t3", ".", "activity_name", "=", "value"], "question": "Find the first names of professors who are not playing Canoeing or Kayaking.", "question_toks": ["Find", "the", "first", "names", "of", "professors", "who", "are", "not", "playing", "Canoeing", "or", "Kayaking", "."], "guid": 1056}}
{"text": "list: LastName, FirstName, Grade, Classroom; teachers: LastName, FirstName, Classroom | Which grade is studying in classroom 103?", "sql": "SELECT DISTINCT grade FROM list WHERE classroom  =  103", "example": {"db_id": "student_1", "query": "SELECT DISTINCT grade FROM list WHERE classroom  =  103", "query_toks": ["SELECT", "DISTINCT", "grade", "FROM", "list", "WHERE", "classroom", "=", "103"], "query_toks_no_value": ["select", "distinct", "grade", "from", "list", "where", "classroom", "=", "value"], "question": "Which grade is studying in classroom 103?", "question_toks": ["Which", "grade", "is", "studying", "in", "classroom", "103", "?"], "guid": 1057}}
{"text": "Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Courses: course_id, course_name, course_description, other_details; Departments: department_id, department_name, department_description, other_details; Degree_Programs: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details; Sections: section_id, course_id, section_name, section_description, other_details; Semesters: semester_id, semester_name, semester_description, other_details; Students: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered; Student_Enrolment: student_enrolment_id, degree_program_id, semester_id, student_id, other_details; Student_Enrolment_Courses: student_course_id, course_id, student_enrolment_id; Transcripts: transcript_id, transcript_date, other_details | What is the description for the section named h?", "sql": "SELECT section_description FROM Sections WHERE section_name  =  'h'", "example": {"db_id": "student_transcripts_tracking", "query": "SELECT section_description FROM Sections WHERE section_name  =  'h'", "query_toks": ["SELECT", "section_description", "FROM", "Sections", "WHERE", "section_name", "=", "'h", "'"], "query_toks_no_value": ["select", "section_description", "from", "sections", "where", "section_name", "=", "value"], "question": "What is the description for the section named h?", "question_toks": ["What", "is", "the", "description", "for", "the", "section", "named", "h", "?"], "guid": 1058}}
{"text": "Addresses: address_id, line_1, line_2, city, zip_postcode, state_province_county, country; People: person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password; Students: student_id, student_details; Courses: course_id, course_name, course_description, other_details; People_Addresses: person_address_id, person_id, address_id, date_from, date_to; Student_Course_Registrations: student_id, course_id, registration_date; Student_Course_Attendance: student_id, course_id, date_of_attendance; Candidates: candidate_id, candidate_details; Candidate_Assessments: candidate_id, qualification, assessment_date, asessment_outcome_code | What are the first names of the people in alphabetical order?", "sql": "SELECT first_name FROM people ORDER BY first_name", "example": {"db_id": "student_assessment", "query": "SELECT first_name FROM people ORDER BY first_name", "query_toks": ["SELECT", "first_name", "FROM", "people", "ORDER", "BY", "first_name"], "query_toks_no_value": ["select", "first_name", "from", "people", "order", "by", "first_name"], "question": "What are the first names of the people in alphabetical order?", "question_toks": ["What", "are", "the", "first", "names", "of", "the", "people", "in", "alphabetical", "order", "?"], "guid": 1059}}
{"text": "school: School_ID, School, Location, Enrollment, Founded, Denomination, Boys_or_Girls, Day_or_Boarding, Year_Entered_Competition, School_Colors; school_details: School_ID, Nickname, Colors, League, Class, Division; school_performance: School_Id, School_Year, Class_A, Class_AA; player: Player_ID, Player, Team, Age, Position, School_ID | What are the denomination more than one school have?", "sql": "SELECT Denomination FROM school GROUP BY Denomination HAVING COUNT(*)  >  1", "example": {"db_id": "school_player", "query": "SELECT Denomination FROM school GROUP BY Denomination HAVING COUNT(*)  >  1", "query_toks": ["SELECT", "Denomination", "FROM", "school", "GROUP", "BY", "Denomination", "HAVING", "COUNT", "(", "*", ")", ">", "1"], "query_toks_no_value": ["select", "denomination", "from", "school", "group", "by", "denomination", "having", "count", "(", "*", ")", ">", "value"], "question": "What are the denomination more than one school have?", "question_toks": ["What", "are", "the", "denomination", "more", "than", "one", "school", "have", "?"], "guid": 1060}}
{"text": "list: LastName, FirstName, Grade, Classroom; teachers: LastName, FirstName, Classroom | Find the grade taught in classroom 103.", "sql": "SELECT DISTINCT grade FROM list WHERE classroom  =  103", "example": {"db_id": "student_1", "query": "SELECT DISTINCT grade FROM list WHERE classroom  =  103", "query_toks": ["SELECT", "DISTINCT", "grade", "FROM", "list", "WHERE", "classroom", "=", "103"], "query_toks_no_value": ["select", "distinct", "grade", "from", "list", "where", "classroom", "=", "value"], "question": "Find the grade taught in classroom 103.", "question_toks": ["Find", "the", "grade", "taught", "in", "classroom", "103", "."], "guid": 1061}}
{"text": "Course_Authors_and_Tutors: author_id, author_tutor_ATB, login_name, password, personal_name, middle_name, family_name, gender_mf, address_line_1; Students: student_id, date_of_registration, date_of_latest_logon, login_name, password, personal_name, middle_name, family_name; Subjects: subject_id, subject_name; Courses: course_id, author_id, subject_id, course_name, course_description; Student_Course_Enrolment: registration_id, student_id, course_id, date_of_enrolment, date_of_completion; Student_Tests_Taken: registration_id, date_test_taken, test_result | Count the number of students who did not enroll in any course.", "sql": "SELECT count(*) FROM Students WHERE student_id NOT IN (SELECT student_id FROM Student_Course_Enrolment)", "example": {"db_id": "e_learning", "query": "SELECT count(*) FROM Students WHERE student_id NOT IN (SELECT student_id FROM Student_Course_Enrolment)", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Students", "WHERE", "student_id", "NOT", "IN", "(", "SELECT", "student_id", "FROM", "Student_Course_Enrolment", ")"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "students", "where", "student_id", "not", "in", "(", "select", "student_id", "from", "student_course_enrolment", ")"], "question": "Count the number of students who did not enroll in any course.", "question_toks": ["Count", "the", "number", "of", "students", "who", "did", "not", "enroll", "in", "any", "course", "."], "guid": 1062}}
{"text": "list: LastName, FirstName, Grade, Classroom; teachers: LastName, FirstName, Classroom | Show each student's first name and last name.", "sql": "SELECT DISTINCT firstname ,  lastname FROM list", "example": {"db_id": "student_1", "query": "SELECT DISTINCT firstname ,  lastname FROM list", "query_toks": ["SELECT", "DISTINCT", "firstname", ",", "lastname", "FROM", "list"], "query_toks_no_value": ["select", "distinct", "firstname", ",", "lastname", "from", "list"], "question": "Show each student's first name and last name.", "question_toks": ["Show", "each", "student", "'s", "first", "name", "and", "last", "name", "."], "guid": 1063}}
{"text": "Activity: actid, activity_name; Participates_in: stuid, actid; Faculty_Participates_in: FacID, actid; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building | How many activities does Mark Giuliano participate in?", "sql": "SELECT count(*) FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID WHERE T1.fname  =  \"Mark\" AND T1.lname  =  \"Giuliano\"", "example": {"db_id": "activity_1", "query": "SELECT count(*) FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID WHERE T1.fname  =  \"Mark\" AND T1.lname  =  \"Giuliano\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Faculty", "AS", "T1", "JOIN", "Faculty_participates_in", "AS", "T2", "ON", "T1.facID", "=", "T2.facID", "WHERE", "T1.fname", "=", "``", "Mark", "''", "AND", "T1.lname", "=", "``", "Giuliano", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "faculty", "as", "t1", "join", "faculty_participates_in", "as", "t2", "on", "t1", ".", "facid", "=", "t2", ".", "facid", "where", "t1", ".", "fname", "=", "value", "and", "t1", ".", "lname", "=", "value"], "question": "How many activities does Mark Giuliano participate in?", "question_toks": ["How", "many", "activities", "does", "Mark", "Giuliano", "participate", "in", "?"], "guid": 1064}}
{"text": "list: LastName, FirstName, Grade, Classroom; teachers: LastName, FirstName, Classroom | What are the first names of students studying in room 107?", "sql": "SELECT DISTINCT firstname FROM list WHERE classroom  =  107", "example": {"db_id": "student_1", "query": "SELECT DISTINCT firstname FROM list WHERE classroom  =  107", "query_toks": ["SELECT", "DISTINCT", "firstname", "FROM", "list", "WHERE", "classroom", "=", "107"], "query_toks_no_value": ["select", "distinct", "firstname", "from", "list", "where", "classroom", "=", "value"], "question": "What are the first names of students studying in room 107?", "question_toks": ["What", "are", "the", "first", "names", "of", "students", "studying", "in", "room", "107", "?"], "guid": 1065}}
{"text": "Addresses: address_id, line_1, line_2, city, zip_postcode, state_province_county, country; People: person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password; Students: student_id, student_details; Courses: course_id, course_name, course_description, other_details; People_Addresses: person_address_id, person_id, address_id, date_from, date_to; Student_Course_Registrations: student_id, course_id, registration_date; Student_Course_Attendance: student_id, course_id, date_of_attendance; Candidates: candidate_id, candidate_details; Candidate_Assessments: candidate_id, qualification, assessment_date, asessment_outcome_code | How many courses do the student whose id is 171 attend?", "sql": "SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T2.student_id = 171", "example": {"db_id": "student_assessment", "query": "SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T2.student_id = 171", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "courses", "AS", "T1", "JOIN", "student_course_attendance", "AS", "T2", "ON", "T1.course_id", "=", "T2.course_id", "WHERE", "T2.student_id", "=", "171"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "courses", "as", "t1", "join", "student_course_attendance", "as", "t2", "on", "t1", ".", "course_id", "=", "t2", ".", "course_id", "where", "t2", ".", "student_id", "=", "value"], "question": "How many courses do the student whose id is 171 attend?", "question_toks": ["How", "many", "courses", "do", "the", "student", "whose", "id", "is", "171", "attend", "?"], "guid": 1066}}
{"text": "Course_Authors_and_Tutors: author_id, author_tutor_ATB, login_name, password, personal_name, middle_name, family_name, gender_mf, address_line_1; Students: student_id, date_of_registration, date_of_latest_logon, login_name, password, personal_name, middle_name, family_name; Subjects: subject_id, subject_name; Courses: course_id, author_id, subject_id, course_name, course_description; Student_Course_Enrolment: registration_id, student_id, course_id, date_of_enrolment, date_of_completion; Student_Tests_Taken: registration_id, date_test_taken, test_result | What are the login names and family names of course author and tutors?", "sql": "SELECT login_name ,  family_name FROM Course_Authors_and_Tutors", "example": {"db_id": "e_learning", "query": "SELECT login_name ,  family_name FROM Course_Authors_and_Tutors", "query_toks": ["SELECT", "login_name", ",", "family_name", "FROM", "Course_Authors_and_Tutors"], "query_toks_no_value": ["select", "login_name", ",", "family_name", "from", "course_authors_and_tutors"], "question": "What are the login names and family names of course author and tutors?", "question_toks": ["What", "are", "the", "login", "names", "and", "family", "names", "of", "course", "author", "and", "tutors", "?"], "guid": 1067}}
{"text": "Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Courses: course_id, course_name, course_description, other_details; Departments: department_id, department_name, department_description, other_details; Degree_Programs: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details; Sections: section_id, course_id, section_name, section_description, other_details; Semesters: semester_id, semester_name, semester_description, other_details; Students: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered; Student_Enrolment: student_enrolment_id, degree_program_id, semester_id, student_id, other_details; Student_Enrolment_Courses: student_course_id, course_id, student_enrolment_id; Transcripts: transcript_id, transcript_date, other_details | What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester?", "sql": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2", "example": {"db_id": "student_transcripts_tracking", "query": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2", "query_toks": ["SELECT", "T1.first_name", ",", "T1.middle_name", ",", "T1.last_name", ",", "T1.student_id", "FROM", "Students", "AS", "T1", "JOIN", "Student_Enrolment", "AS", "T2", "ON", "T1.student_id", "=", "T2.student_id", "GROUP", "BY", "T1.student_id", "HAVING", "count", "(", "*", ")", "=", "2"], "query_toks_no_value": ["select", "t1", ".", "first_name", ",", "t1", ".", "middle_name", ",", "t1", ".", "last_name", ",", "t1", ".", "student_id", "from", "students", "as", "t1", "join", "student_enrolment", "as", "t2", "on", "t1", ".", "student_id", "=", "t2", ".", "student_id", "group", "by", "t1", ".", "student_id", "having", "count", "(", "*", ")", "=", "value"], "question": "What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester?", "question_toks": ["What", "are", "the", "first", ",", "middle", ",", "and", "last", "names", ",", "along", "with", "the", "ids", ",", "of", "all", "students", "who", "enrolled", "in", "2", "degree", "programs", "in", "one", "semester", "?"], "guid": 1068}}
{"text": "course: Course_ID, Staring_Date, Course; teacher: Teacher_ID, Name, Age, Hometown; course_arrange: Course_ID, Teacher_ID, Grade | What is the age and hometown of every teacher?", "sql": "SELECT Age ,  Hometown FROM teacher", "example": {"db_id": "course_teach", "query": "SELECT Age ,  Hometown FROM teacher", "query_toks": ["SELECT", "Age", ",", "Hometown", "FROM", "teacher"], "query_toks_no_value": ["select", "age", ",", "hometown", "from", "teacher"], "question": "What is the age and hometown of every teacher?", "question_toks": ["What", "is", "the", "age", "and", "hometown", "of", "every", "teacher", "?"], "guid": 1069}}
{"text": "Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Courses: course_id, course_name, course_description, other_details; Departments: department_id, department_name, department_description, other_details; Degree_Programs: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details; Sections: section_id, course_id, section_name, section_description, other_details; Semesters: semester_id, semester_name, semester_description, other_details; Students: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered; Student_Enrolment: student_enrolment_id, degree_program_id, semester_id, student_id, other_details; Student_Enrolment_Courses: student_course_id, course_id, student_enrolment_id; Transcripts: transcript_id, transcript_date, other_details | Whose permanent address is different from his or her current address? List his or her first name.", "sql": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id", "example": {"db_id": "student_transcripts_tracking", "query": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id", "query_toks": ["SELECT", "first_name", "FROM", "Students", "WHERE", "current_address_id", "!", "=", "permanent_address_id"], "query_toks_no_value": ["select", "first_name", "from", "students", "where", "current_address_id", "!", "=", "permanent_address_id"], "question": "Whose permanent address is different from his or her current address? List his or her first name.", "question_toks": ["Whose", "permanent", "address", "is", "different", "from", "his", "or", "her", "current", "address", "?", "List", "his", "or", "her", "first", "name", "."], "guid": 1070}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Dorm: dormid, dorm_name, student_capacity, gender; Dorm_amenity: amenid, amenity_name; Has_amenity: dormid, amenid; Lives_in: stuid, dormid, room_number | What is the average age of students who are living in the dorm with the largest capacity?", "sql": "SELECT avg(T1.age) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.student_capacity  =  (SELECT max(student_capacity) FROM dorm)", "example": {"db_id": "dorm_1", "query": "SELECT avg(T1.age) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.student_capacity  =  (SELECT max(student_capacity) FROM dorm)", "query_toks": ["SELECT", "avg", "(", "T1.age", ")", "FROM", "student", "AS", "T1", "JOIN", "lives_in", "AS", "T2", "ON", "T1.stuid", "=", "T2.stuid", "JOIN", "dorm", "AS", "T3", "ON", "T3.dormid", "=", "T2.dormid", "WHERE", "T3.student_capacity", "=", "(", "SELECT", "max", "(", "student_capacity", ")", "FROM", "dorm", ")"], "query_toks_no_value": ["select", "avg", "(", "t1", ".", "age", ")", "from", "student", "as", "t1", "join", "lives_in", "as", "t2", "on", "t1", ".", "stuid", "=", "t2", ".", "stuid", "join", "dorm", "as", "t3", "on", "t3", ".", "dormid", "=", "t2", ".", "dormid", "where", "t3", ".", "student_capacity", "=", "(", "select", "max", "(", "student_capacity", ")", "from", "dorm", ")"], "question": "What is the average age of students who are living in the dorm with the largest capacity?", "question_toks": ["What", "is", "the", "average", "age", "of", "students", "who", "are", "living", "in", "the", "dorm", "with", "the", "largest", "capacity", "?"], "guid": 1071}}
{"text": "Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Courses: course_id, course_name, course_description, other_details; Departments: department_id, department_name, department_description, other_details; Degree_Programs: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details; Sections: section_id, course_id, section_name, section_description, other_details; Semesters: semester_id, semester_name, semester_description, other_details; Students: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered; Student_Enrolment: student_enrolment_id, degree_program_id, semester_id, student_id, other_details; Student_Enrolment_Courses: student_course_id, course_id, student_enrolment_id; Transcripts: transcript_id, transcript_date, other_details | What are all the course names of the courses which ever have students enrolled in?", "sql": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id", "example": {"db_id": "student_transcripts_tracking", "query": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id", "query_toks": ["SELECT", "DISTINCT", "T1.course_name", "FROM", "Courses", "AS", "T1", "JOIN", "Student_Enrolment_Courses", "AS", "T2", "ON", "T1.course_id", "=", "T2.course_id"], "query_toks_no_value": ["select", "distinct", "t1", ".", "course_name", "from", "courses", "as", "t1", "join", "student_enrolment_courses", "as", "t2", "on", "t1", ".", "course_id", "=", "t2", ".", "course_id"], "question": "What are all the course names of the courses which ever have students enrolled in?", "question_toks": ["What", "are", "all", "the", "course", "names", "of", "the", "courses", "which", "ever", "have", "students", "enrolled", "in", "?"], "guid": 1072}}
{"text": "school: School_ID, School, Location, Enrollment, Founded, Denomination, Boys_or_Girls, Day_or_Boarding, Year_Entered_Competition, School_Colors; school_details: School_ID, Nickname, Colors, League, Class, Division; school_performance: School_Id, School_Year, Class_A, Class_AA; player: Player_ID, Player, Team, Age, Position, School_ID | What is the list of school locations sorted in descending order of school foundation year?", "sql": "SELECT LOCATION FROM school ORDER BY Founded DESC", "example": {"db_id": "school_player", "query": "SELECT LOCATION FROM school ORDER BY Founded DESC", "query_toks": ["SELECT", "LOCATION", "FROM", "school", "ORDER", "BY", "Founded", "DESC"], "query_toks_no_value": ["select", "location", "from", "school", "order", "by", "founded", "desc"], "question": "What is the list of school locations sorted in descending order of school foundation year?", "question_toks": ["What", "is", "the", "list", "of", "school", "locations", "sorted", "in", "descending", "order", "of", "school", "foundation", "year", "?"], "guid": 1073}}
{"text": "list: LastName, FirstName, Grade, Classroom; teachers: LastName, FirstName, Classroom | Which are the first and last names of the students taught by MARROTTE KIRK?", "sql": "SELECT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"MARROTTE\" AND T2.lastname  =  \"KIRK\"", "example": {"db_id": "student_1", "query": "SELECT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"MARROTTE\" AND T2.lastname  =  \"KIRK\"", "query_toks": ["SELECT", "T1.firstname", ",", "T1.lastname", "FROM", "list", "AS", "T1", "JOIN", "teachers", "AS", "T2", "ON", "T1.classroom", "=", "T2.classroom", "WHERE", "T2.firstname", "=", "``", "MARROTTE", "''", "AND", "T2.lastname", "=", "``", "KIRK", "''"], "query_toks_no_value": ["select", "t1", ".", "firstname", ",", "t1", ".", "lastname", "from", "list", "as", "t1", "join", "teachers", "as", "t2", "on", "t1", ".", "classroom", "=", "t2", ".", "classroom", "where", "t2", ".", "firstname", "=", "value", "and", "t2", ".", "lastname", "=", "value"], "question": "Which are the first and last names of the students taught by MARROTTE KIRK?", "question_toks": ["Which", "are", "the", "first", "and", "last", "names", "of", "the", "students", "taught", "by", "MARROTTE", "KIRK", "?"], "guid": 1074}}
{"text": "Course_Authors_and_Tutors: author_id, author_tutor_ATB, login_name, password, personal_name, middle_name, family_name, gender_mf, address_line_1; Students: student_id, date_of_registration, date_of_latest_logon, login_name, password, personal_name, middle_name, family_name; Subjects: subject_id, subject_name; Courses: course_id, author_id, subject_id, course_name, course_description; Student_Course_Enrolment: registration_id, student_id, course_id, date_of_enrolment, date_of_completion; Student_Tests_Taken: registration_id, date_test_taken, test_result | Find the total number of courses offered.", "sql": "SELECT count(*) FROM COURSES", "example": {"db_id": "e_learning", "query": "SELECT count(*) FROM COURSES", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "COURSES"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "courses"], "question": "Find the total number of courses offered.", "question_toks": ["Find", "the", "total", "number", "of", "courses", "offered", "."], "guid": 1075}}
{"text": "Activity: actid, activity_name; Participates_in: stuid, actid; Faculty_Participates_in: FacID, actid; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building | Who is the advisor of Linda Smith? Give me the first name and last name.", "sql": "SELECT T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor WHERE T2.fname  =  \"Linda\" AND T2.lname  =  \"Smith\"", "example": {"db_id": "activity_1", "query": "SELECT T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor WHERE T2.fname  =  \"Linda\" AND T2.lname  =  \"Smith\"", "query_toks": ["SELECT", "T1.fname", ",", "T1.lname", "FROM", "Faculty", "AS", "T1", "JOIN", "Student", "AS", "T2", "ON", "T1.FacID", "=", "T2.advisor", "WHERE", "T2.fname", "=", "``", "Linda", "''", "AND", "T2.lname", "=", "``", "Smith", "''"], "query_toks_no_value": ["select", "t1", ".", "fname", ",", "t1", ".", "lname", "from", "faculty", "as", "t1", "join", "student", "as", "t2", "on", "t1", ".", "facid", "=", "t2", ".", "advisor", "where", "t2", ".", "fname", "=", "value", "and", "t2", ".", "lname", "=", "value"], "question": "Who is the advisor of Linda Smith? Give me the first name and last name.", "question_toks": ["Who", "is", "the", "advisor", "of", "Linda", "Smith", "?", "Give", "me", "the", "first", "name", "and", "last", "name", "."], "guid": 1076}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Dorm: dormid, dorm_name, student_capacity, gender; Dorm_amenity: amenid, amenity_name; Has_amenity: dormid, amenid; Lives_in: stuid, dormid, room_number | Find the number and average age of students living in each city.", "sql": "SELECT count(*) ,  avg(age) ,  city_code FROM student GROUP BY city_code", "example": {"db_id": "dorm_1", "query": "SELECT count(*) ,  avg(age) ,  city_code FROM student GROUP BY city_code", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "avg", "(", "age", ")", ",", "city_code", "FROM", "student", "GROUP", "BY", "city_code"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "avg", "(", "age", ")", ",", "city_code", "from", "student", "group", "by", "city_code"], "question": "Find the number and average age of students living in each city.", "question_toks": ["Find", "the", "number", "and", "average", "age", "of", "students", "living", "in", "each", "city", "."], "guid": 1077}}
{"text": "Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Courses: course_id, course_name, course_description, other_details; Departments: department_id, department_name, department_description, other_details; Degree_Programs: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details; Sections: section_id, course_id, section_name, section_description, other_details; Semesters: semester_id, semester_name, semester_description, other_details; Students: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered; Student_Enrolment: student_enrolment_id, degree_program_id, semester_id, student_id, other_details; Student_Enrolment_Courses: student_course_id, course_id, student_enrolment_id; Transcripts: transcript_id, transcript_date, other_details | What is the earliest date of a transcript release, and what details can you tell me?", "sql": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1", "example": {"db_id": "student_transcripts_tracking", "query": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1", "query_toks": ["SELECT", "transcript_date", ",", "other_details", "FROM", "Transcripts", "ORDER", "BY", "transcript_date", "ASC", "LIMIT", "1"], "query_toks_no_value": ["select", "transcript_date", ",", "other_details", "from", "transcripts", "order", "by", "transcript_date", "asc", "limit", "value"], "question": "What is the earliest date of a transcript release, and what details can you tell me?", "question_toks": ["What", "is", "the", "earliest", "date", "of", "a", "transcript", "release", ",", "and", "what", "details", "can", "you", "tell", "me", "?"], "guid": 1078}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Dorm: dormid, dorm_name, student_capacity, gender; Dorm_amenity: amenid, amenity_name; Has_amenity: dormid, amenid; Lives_in: stuid, dormid, room_number | What are the names of the amenities that Smith Hall has?", "sql": "SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T1.dorm_name  =  'Smith Hall'", "example": {"db_id": "dorm_1", "query": "SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T1.dorm_name  =  'Smith Hall'", "query_toks": ["SELECT", "T3.amenity_name", "FROM", "dorm", "AS", "T1", "JOIN", "has_amenity", "AS", "T2", "ON", "T1.dormid", "=", "T2.dormid", "JOIN", "dorm_amenity", "AS", "T3", "ON", "T2.amenid", "=", "T3.amenid", "WHERE", "T1.dorm_name", "=", "'Smith", "Hall", "'"], "query_toks_no_value": ["select", "t3", ".", "amenity_name", "from", "dorm", "as", "t1", "join", "has_amenity", "as", "t2", "on", "t1", ".", "dormid", "=", "t2", ".", "dormid", "join", "dorm_amenity", "as", "t3", "on", "t2", ".", "amenid", "=", "t3", ".", "amenid", "where", "t1", ".", "dorm_name", "=", "value"], "question": "What are the names of the amenities that Smith Hall has?", "question_toks": ["What", "are", "the", "names", "of", "the", "amenities", "that", "Smith", "Hall", "has", "?"], "guid": 1079}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Dorm: dormid, dorm_name, student_capacity, gender; Dorm_amenity: amenid, amenity_name; Has_amenity: dormid, amenid; Lives_in: stuid, dormid, room_number | Find the first name of students who are living in the Smith Hall.", "sql": "SELECT T1.fname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.dorm_name  =  'Smith Hall'", "example": {"db_id": "dorm_1", "query": "SELECT T1.fname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.dorm_name  =  'Smith Hall'", "query_toks": ["SELECT", "T1.fname", "FROM", "student", "AS", "T1", "JOIN", "lives_in", "AS", "T2", "ON", "T1.stuid", "=", "T2.stuid", "JOIN", "dorm", "AS", "T3", "ON", "T3.dormid", "=", "T2.dormid", "WHERE", "T3.dorm_name", "=", "'Smith", "Hall", "'"], "query_toks_no_value": ["select", "t1", ".", "fname", "from", "student", "as", "t1", "join", "lives_in", "as", "t2", "on", "t1", ".", "stuid", "=", "t2", ".", "stuid", "join", "dorm", "as", "t3", "on", "t3", ".", "dormid", "=", "t2", ".", "dormid", "where", "t3", ".", "dorm_name", "=", "value"], "question": "Find the first name of students who are living in the Smith Hall.", "question_toks": ["Find", "the", "first", "name", "of", "students", "who", "are", "living", "in", "the", "Smith", "Hall", "."], "guid": 1080}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Dorm: dormid, dorm_name, student_capacity, gender; Dorm_amenity: amenid, amenity_name; Has_amenity: dormid, amenid; Lives_in: stuid, dormid, room_number | Find the number of students for the cities where have more than one student.", "sql": "SELECT count(*) ,  city_code FROM student GROUP BY city_code HAVING count(*)  >  1", "example": {"db_id": "dorm_1", "query": "SELECT count(*) ,  city_code FROM student GROUP BY city_code HAVING count(*)  >  1", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "city_code", "FROM", "student", "GROUP", "BY", "city_code", "HAVING", "count", "(", "*", ")", ">", "1"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "city_code", "from", "student", "group", "by", "city_code", "having", "count", "(", "*", ")", ">", "value"], "question": "Find the number of students for the cities where have more than one student.", "question_toks": ["Find", "the", "number", "of", "students", "for", "the", "cities", "where", "have", "more", "than", "one", "student", "."], "guid": 1081}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Dorm: dormid, dorm_name, student_capacity, gender; Dorm_amenity: amenid, amenity_name; Has_amenity: dormid, amenid; Lives_in: stuid, dormid, room_number | Find the first name of students who is older than 20.", "sql": "SELECT fname FROM student WHERE age  >  20", "example": {"db_id": "dorm_1", "query": "SELECT fname FROM student WHERE age  >  20", "query_toks": ["SELECT", "fname", "FROM", "student", "WHERE", "age", ">", "20"], "query_toks_no_value": ["select", "fname", "from", "student", "where", "age", ">", "value"], "question": "Find the first name of students who is older than 20.", "question_toks": ["Find", "the", "first", "name", "of", "students", "who", "is", "older", "than", "20", "."], "guid": 1082}}
{"text": "list: LastName, FirstName, Grade, Classroom; teachers: LastName, FirstName, Classroom | Count the number of students the teacher LORIA ONDERSMA teaches.", "sql": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"LORIA\" AND T2.lastname  =  \"ONDERSMA\"", "example": {"db_id": "student_1", "query": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"LORIA\" AND T2.lastname  =  \"ONDERSMA\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "list", "AS", "T1", "JOIN", "teachers", "AS", "T2", "ON", "T1.classroom", "=", "T2.classroom", "WHERE", "T2.firstname", "=", "``", "LORIA", "''", "AND", "T2.lastname", "=", "``", "ONDERSMA", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "list", "as", "t1", "join", "teachers", "as", "t2", "on", "t1", ".", "classroom", "=", "t2", ".", "classroom", "where", "t2", ".", "firstname", "=", "value", "and", "t2", ".", "lastname", "=", "value"], "question": "Count the number of students the teacher LORIA ONDERSMA teaches.", "question_toks": ["Count", "the", "number", "of", "students", "the", "teacher", "LORIA", "ONDERSMA", "teaches", "."], "guid": 1083}}
{"text": "Course_Authors_and_Tutors: author_id, author_tutor_ATB, login_name, password, personal_name, middle_name, family_name, gender_mf, address_line_1; Students: student_id, date_of_registration, date_of_latest_logon, login_name, password, personal_name, middle_name, family_name; Subjects: subject_id, subject_name; Courses: course_id, author_id, subject_id, course_name, course_description; Student_Course_Enrolment: registration_id, student_id, course_id, date_of_enrolment, date_of_completion; Student_Tests_Taken: registration_id, date_test_taken, test_result | Find the number of distinct courses that have enrolled students.", "sql": "SELECT count(course_id) FROM Student_Course_Enrolment", "example": {"db_id": "e_learning", "query": "SELECT count(course_id) FROM Student_Course_Enrolment", "query_toks": ["SELECT", "count", "(", "course_id", ")", "FROM", "Student_Course_Enrolment"], "query_toks_no_value": ["select", "count", "(", "course_id", ")", "from", "student_course_enrolment"], "question": "Find the number of distinct courses that have enrolled students.", "question_toks": ["Find", "the", "number", "of", "distinct", "courses", "that", "have", "enrolled", "students", "."], "guid": 1084}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Dorm: dormid, dorm_name, student_capacity, gender; Dorm_amenity: amenid, amenity_name; Has_amenity: dormid, amenid; Lives_in: stuid, dormid, room_number | Find the average age of all students living in the each city.", "sql": "SELECT avg(age) ,  city_code FROM student GROUP BY city_code", "example": {"db_id": "dorm_1", "query": "SELECT avg(age) ,  city_code FROM student GROUP BY city_code", "query_toks": ["SELECT", "avg", "(", "age", ")", ",", "city_code", "FROM", "student", "GROUP", "BY", "city_code"], "query_toks_no_value": ["select", "avg", "(", "age", ")", ",", "city_code", "from", "student", "group", "by", "city_code"], "question": "Find the average age of all students living in the each city.", "question_toks": ["Find", "the", "average", "age", "of", "all", "students", "living", "in", "the", "each", "city", "."], "guid": 1085}}
{"text": "Activity: actid, activity_name; Participates_in: stuid, actid; Faculty_Participates_in: FacID, actid; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building | How many faculty members participate in each activity? Return the activity names and the number of faculty members.", "sql": "SELECT T1.activity_name ,  count(*) FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID", "example": {"db_id": "activity_1", "query": "SELECT T1.activity_name ,  count(*) FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID", "query_toks": ["SELECT", "T1.activity_name", ",", "count", "(", "*", ")", "FROM", "Activity", "AS", "T1", "JOIN", "Faculty_participates_in", "AS", "T2", "ON", "T1.actID", "=", "T2.actID", "GROUP", "BY", "T1.actID"], "query_toks_no_value": ["select", "t1", ".", "activity_name", ",", "count", "(", "*", ")", "from", "activity", "as", "t1", "join", "faculty_participates_in", "as", "t2", "on", "t1", ".", "actid", "=", "t2", ".", "actid", "group", "by", "t1", ".", "actid"], "question": "How many faculty members participate in each activity? Return the activity names and the number of faculty members.", "question_toks": ["How", "many", "faculty", "members", "participate", "in", "each", "activity", "?", "Return", "the", "activity", "names", "and", "the", "number", "of", "faculty", "members", "."], "guid": 1086}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Dorm: dormid, dorm_name, student_capacity, gender; Dorm_amenity: amenid, amenity_name; Has_amenity: dormid, amenid; Lives_in: stuid, dormid, room_number | Find the numbers of different majors and cities.", "sql": "SELECT count(DISTINCT major) ,  count(DISTINCT city_code) FROM student", "example": {"db_id": "dorm_1", "query": "SELECT count(DISTINCT major) ,  count(DISTINCT city_code) FROM student", "query_toks": ["SELECT", "count", "(", "DISTINCT", "major", ")", ",", "count", "(", "DISTINCT", "city_code", ")", "FROM", "student"], "query_toks_no_value": ["select", "count", "(", "distinct", "major", ")", ",", "count", "(", "distinct", "city_code", ")", "from", "student"], "question": "Find the numbers of different majors and cities.", "question_toks": ["Find", "the", "numbers", "of", "different", "majors", "and", "cities", "."], "guid": 1087}}
{"text": "list: LastName, FirstName, Grade, Classroom; teachers: LastName, FirstName, Classroom | Report the number of students in each classroom.", "sql": "SELECT classroom ,  count(*) FROM list GROUP BY classroom", "example": {"db_id": "student_1", "query": "SELECT classroom ,  count(*) FROM list GROUP BY classroom", "query_toks": ["SELECT", "classroom", ",", "count", "(", "*", ")", "FROM", "list", "GROUP", "BY", "classroom"], "query_toks_no_value": ["select", "classroom", ",", "count", "(", "*", ")", "from", "list", "group", "by", "classroom"], "question": "Report the number of students in each classroom.", "question_toks": ["Report", "the", "number", "of", "students", "in", "each", "classroom", "."], "guid": 1088}}
{"text": "Addresses: address_id, line_1, line_2, city, zip_postcode, state_province_county, country; People: person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password; Students: student_id, student_details; Courses: course_id, course_name, course_description, other_details; People_Addresses: person_address_id, person_id, address_id, date_from, date_to; Student_Course_Registrations: student_id, course_id, registration_date; Student_Course_Attendance: student_id, course_id, date_of_attendance; Candidates: candidate_id, candidate_details; Candidate_Assessments: candidate_id, qualification, assessment_date, asessment_outcome_code | How many students are attending English courses?", "sql": "SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"English\"", "example": {"db_id": "student_assessment", "query": "SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"English\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "courses", "AS", "T1", "JOIN", "student_course_attendance", "AS", "T2", "ON", "T1.course_id", "=", "T2.course_id", "WHERE", "T1.course_name", "=", "``", "English", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "courses", "as", "t1", "join", "student_course_attendance", "as", "t2", "on", "t1", ".", "course_id", "=", "t2", ".", "course_id", "where", "t1", ".", "course_name", "=", "value"], "question": "How many students are attending English courses?", "question_toks": ["How", "many", "students", "are", "attending", "English", "courses", "?"], "guid": 1089}}
{"text": "School: School_id, School_name, Location, Mascot, Enrollment, IHSAA_Class, IHSAA_Football_Class, County; budget: School_id, Year, Budgeted, total_budget_percent_budgeted, Invested, total_budget_percent_invested, Budget_invested_percent; endowment: endowment_id, School_id, donator_name, amount | List the names of the schools without any endowment.", "sql": "SELECT school_name FROM school WHERE school_id NOT IN (SELECT school_id FROM endowment)", "example": {"db_id": "school_finance", "query": "SELECT school_name FROM school WHERE school_id NOT IN (SELECT school_id FROM endowment)", "query_toks": ["SELECT", "school_name", "FROM", "school", "WHERE", "school_id", "NOT", "IN", "(", "SELECT", "school_id", "FROM", "endowment", ")"], "query_toks_no_value": ["select", "school_name", "from", "school", "where", "school_id", "not", "in", "(", "select", "school_id", "from", "endowment", ")"], "question": "List the names of the schools without any endowment.", "question_toks": ["List", "the", "names", "of", "the", "schools", "without", "any", "endowment", "."], "guid": 1090}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Dorm: dormid, dorm_name, student_capacity, gender; Dorm_amenity: amenid, amenity_name; Has_amenity: dormid, amenid; Lives_in: stuid, dormid, room_number | Find the first and last name of students whose age is younger than the average age.", "sql": "SELECT fname ,  lname FROM student WHERE age  <  (SELECT avg(age) FROM student)", "example": {"db_id": "dorm_1", "query": "SELECT fname ,  lname FROM student WHERE age  <  (SELECT avg(age) FROM student)", "query_toks": ["SELECT", "fname", ",", "lname", "FROM", "student", "WHERE", "age", "<", "(", "SELECT", "avg", "(", "age", ")", "FROM", "student", ")"], "query_toks_no_value": ["select", "fname", ",", "lname", "from", "student", "where", "age", "<", "(", "select", "avg", "(", "age", ")", "from", "student", ")"], "question": "Find the first and last name of students whose age is younger than the average age.", "question_toks": ["Find", "the", "first", "and", "last", "name", "of", "students", "whose", "age", "is", "younger", "than", "the", "average", "age", "."], "guid": 1091}}
{"text": "Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Courses: course_id, course_name, course_description, other_details; Departments: department_id, department_name, department_description, other_details; Degree_Programs: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details; Sections: section_id, course_id, section_name, section_description, other_details; Semesters: semester_id, semester_name, semester_description, other_details; Students: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered; Student_Enrolment: student_enrolment_id, degree_program_id, semester_id, student_id, other_details; Student_Enrolment_Courses: student_course_id, course_id, student_enrolment_id; Transcripts: transcript_id, transcript_date, other_details | What is the id, line 1, and line 2 of the address with the most students?", "sql": "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "student_transcripts_tracking", "query": "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.address_id", ",", "T1.line_1", ",", "T1.line_2", "FROM", "Addresses", "AS", "T1", "JOIN", "Students", "AS", "T2", "ON", "T1.address_id", "=", "T2.current_address_id", "GROUP", "BY", "T1.address_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "address_id", ",", "t1", ".", "line_1", ",", "t1", ".", "line_2", "from", "addresses", "as", "t1", "join", "students", "as", "t2", "on", "t1", ".", "address_id", "=", "t2", ".", "current_address_id", "group", "by", "t1", ".", "address_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the id, line 1, and line 2 of the address with the most students?", "question_toks": ["What", "is", "the", "id", ",", "line", "1", ",", "and", "line", "2", "of", "the", "address", "with", "the", "most", "students", "?"], "guid": 1092}}
{"text": "Activity: actid, activity_name; Participates_in: stuid, actid; Faculty_Participates_in: FacID, actid; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building | What are the names of the activities Mark Giuliano is involved in", "sql": "SELECT T3.activity_name FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN Activity AS T3 ON T3.actid  =  T2.actid WHERE T1.fname  =  \"Mark\" AND T1.lname  =  \"Giuliano\"", "example": {"db_id": "activity_1", "query": "SELECT T3.activity_name FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN Activity AS T3 ON T3.actid  =  T2.actid WHERE T1.fname  =  \"Mark\" AND T1.lname  =  \"Giuliano\"", "query_toks": ["SELECT", "T3.activity_name", "FROM", "Faculty", "AS", "T1", "JOIN", "Faculty_participates_in", "AS", "T2", "ON", "T1.facID", "=", "T2.facID", "JOIN", "Activity", "AS", "T3", "ON", "T3.actid", "=", "T2.actid", "WHERE", "T1.fname", "=", "``", "Mark", "''", "AND", "T1.lname", "=", "``", "Giuliano", "''"], "query_toks_no_value": ["select", "t3", ".", "activity_name", "from", "faculty", "as", "t1", "join", "faculty_participates_in", "as", "t2", "on", "t1", ".", "facid", "=", "t2", ".", "facid", "join", "activity", "as", "t3", "on", "t3", ".", "actid", "=", "t2", ".", "actid", "where", "t1", ".", "fname", "=", "value", "and", "t1", ".", "lname", "=", "value"], "question": "What are the names of the activities Mark Giuliano is involved in", "question_toks": ["What", "are", "the", "names", "of", "the", "activities", "Mark", "Giuliano", "is", "involved", "in"], "guid": 1093}}
{"text": "Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Courses: course_id, course_name, course_description, other_details; Departments: department_id, department_name, department_description, other_details; Degree_Programs: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details; Sections: section_id, course_id, section_name, section_description, other_details; Semesters: semester_id, semester_name, semester_description, other_details; Students: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered; Student_Enrolment: student_enrolment_id, degree_program_id, semester_id, student_id, other_details; Student_Enrolment_Courses: student_course_id, course_id, student_enrolment_id; Transcripts: transcript_id, transcript_date, other_details | How many different degrees are offered?", "sql": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs", "example": {"db_id": "student_transcripts_tracking", "query": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs", "query_toks": ["SELECT", "count", "(", "DISTINCT", "degree_summary_name", ")", "FROM", "Degree_Programs"], "query_toks_no_value": ["select", "count", "(", "distinct", "degree_summary_name", ")", "from", "degree_programs"], "question": "How many different degrees are offered?", "question_toks": ["How", "many", "different", "degrees", "are", "offered", "?"], "guid": 1094}}
{"text": "Addresses: address_id, line_1, line_2, city, zip_postcode, state_province_county, country; People: person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password; Students: student_id, student_details; Courses: course_id, course_name, course_description, other_details; People_Addresses: person_address_id, person_id, address_id, date_from, date_to; Student_Course_Registrations: student_id, course_id, registration_date; Student_Course_Attendance: student_id, course_id, date_of_attendance; Candidates: candidate_id, candidate_details; Candidate_Assessments: candidate_id, qualification, assessment_date, asessment_outcome_code | Find the cell mobile number of the candidates whose assessment code is \"Fail\"?", "sql": "SELECT T3.cell_mobile_number FROM candidates AS T1 JOIN candidate_assessments AS T2 ON T1.candidate_id = T2.candidate_id JOIN people AS T3 ON T1.candidate_id = T3.person_id WHERE T2.asessment_outcome_code = \"Fail\"", "example": {"db_id": "student_assessment", "query": "SELECT T3.cell_mobile_number FROM candidates AS T1 JOIN candidate_assessments AS T2 ON T1.candidate_id = T2.candidate_id JOIN people AS T3 ON T1.candidate_id = T3.person_id WHERE T2.asessment_outcome_code = \"Fail\"", "query_toks": ["SELECT", "T3.cell_mobile_number", "FROM", "candidates", "AS", "T1", "JOIN", "candidate_assessments", "AS", "T2", "ON", "T1.candidate_id", "=", "T2.candidate_id", "JOIN", "people", "AS", "T3", "ON", "T1.candidate_id", "=", "T3.person_id", "WHERE", "T2.asessment_outcome_code", "=", "``", "Fail", "''"], "query_toks_no_value": ["select", "t3", ".", "cell_mobile_number", "from", "candidates", "as", "t1", "join", "candidate_assessments", "as", "t2", "on", "t1", ".", "candidate_id", "=", "t2", ".", "candidate_id", "join", "people", "as", "t3", "on", "t1", ".", "candidate_id", "=", "t3", ".", "person_id", "where", "t2", ".", "asessment_outcome_code", "=", "value"], "question": "Find the cell mobile number of the candidates whose assessment code is \"Fail\"?", "question_toks": ["Find", "the", "cell", "mobile", "number", "of", "the", "candidates", "whose", "assessment", "code", "is", "``", "Fail", "''", "?"], "guid": 1095}}
{"text": "school: School_ID, School, Location, Enrollment, Founded, Denomination, Boys_or_Girls, Day_or_Boarding, Year_Entered_Competition, School_Colors; school_details: School_ID, Nickname, Colors, League, Class, Division; school_performance: School_Id, School_Year, Class_A, Class_AA; player: Player_ID, Player, Team, Age, Position, School_ID | Find the team of the player of the highest age.", "sql": "SELECT Team FROM player ORDER BY Age DESC LIMIT 1", "example": {"db_id": "school_player", "query": "SELECT Team FROM player ORDER BY Age DESC LIMIT 1", "query_toks": ["SELECT", "Team", "FROM", "player", "ORDER", "BY", "Age", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "team", "from", "player", "order", "by", "age", "desc", "limit", "value"], "question": "Find the team of the player of the highest age.", "question_toks": ["Find", "the", "team", "of", "the", "player", "of", "the", "highest", "age", "."], "guid": 1096}}
{"text": "school: School_ID, School, Location, Enrollment, Founded, Denomination, Boys_or_Girls, Day_or_Boarding, Year_Entered_Competition, School_Colors; school_details: School_ID, Nickname, Colors, League, Class, Division; school_performance: School_Id, School_Year, Class_A, Class_AA; player: Player_ID, Player, Team, Age, Position, School_ID | What are the teams of the players, sorted in ascending alphabetical order?", "sql": "SELECT Team FROM player ORDER BY Team ASC", "example": {"db_id": "school_player", "query": "SELECT Team FROM player ORDER BY Team ASC", "query_toks": ["SELECT", "Team", "FROM", "player", "ORDER", "BY", "Team", "ASC"], "query_toks_no_value": ["select", "team", "from", "player", "order", "by", "team", "asc"], "question": "What are the teams of the players, sorted in ascending alphabetical order?", "question_toks": ["What", "are", "the", "teams", "of", "the", "players", ",", "sorted", "in", "ascending", "alphabetical", "order", "?"], "guid": 1097}}
{"text": "Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Courses: course_id, course_name, course_description, other_details; Departments: department_id, department_name, department_description, other_details; Degree_Programs: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details; Sections: section_id, course_id, section_name, section_description, other_details; Semesters: semester_id, semester_name, semester_description, other_details; Students: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered; Student_Enrolment: student_enrolment_id, degree_program_id, semester_id, student_id, other_details; Student_Enrolment_Courses: student_course_id, course_id, student_enrolment_id; Transcripts: transcript_id, transcript_date, other_details | What is the phone number of the man with the first name Timmothy and the last name Ward?", "sql": "SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'", "example": {"db_id": "student_transcripts_tracking", "query": "SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'", "query_toks": ["SELECT", "cell_mobile_number", "FROM", "Students", "WHERE", "first_name", "=", "'Timmothy", "'", "AND", "last_name", "=", "'Ward", "'"], "query_toks_no_value": ["select", "cell_mobile_number", "from", "students", "where", "first_name", "=", "value", "and", "last_name", "=", "value"], "question": "What is the phone number of the man with the first name Timmothy and the last name Ward?", "question_toks": ["What", "is", "the", "phone", "number", "of", "the", "man", "with", "the", "first", "name", "Timmothy", "and", "the", "last", "name", "Ward", "?"], "guid": 1098}}
{"text": "list: LastName, FirstName, Grade, Classroom; teachers: LastName, FirstName, Classroom | Which classroom has the most students?", "sql": "SELECT classroom FROM list GROUP BY classroom ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "student_1", "query": "SELECT classroom FROM list GROUP BY classroom ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "classroom", "FROM", "list", "GROUP", "BY", "classroom", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "classroom", "from", "list", "group", "by", "classroom", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which classroom has the most students?", "question_toks": ["Which", "classroom", "has", "the", "most", "students", "?"], "guid": 1099}}
{"text": "Addresses: address_id, line_1, line_2, city, zip_postcode, state_province_county, country; People: person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password; Students: student_id, student_details; Courses: course_id, course_name, course_description, other_details; People_Addresses: person_address_id, person_id, address_id, date_from, date_to; Student_Course_Registrations: student_id, course_id, registration_date; Student_Course_Attendance: student_id, course_id, date_of_attendance; Candidates: candidate_id, candidate_details; Candidate_Assessments: candidate_id, qualification, assessment_date, asessment_outcome_code | What are the ids of the students who either registered or attended a course?", "sql": "SELECT student_id FROM student_course_registrations UNION SELECT student_id FROM student_course_attendance", "example": {"db_id": "student_assessment", "query": "SELECT student_id FROM student_course_registrations UNION SELECT student_id FROM student_course_attendance", "query_toks": ["SELECT", "student_id", "FROM", "student_course_registrations", "UNION", "SELECT", "student_id", "FROM", "student_course_attendance"], "query_toks_no_value": ["select", "student_id", "from", "student_course_registrations", "union", "select", "student_id", "from", "student_course_attendance"], "question": "What are the ids of the students who either registered or attended a course?", "question_toks": ["What", "are", "the", "ids", "of", "the", "students", "who", "either", "registered", "or", "attended", "a", "course", "?"], "guid": 1100}}
{"text": "Addresses: address_id, line_1, line_2, city, zip_postcode, state_province_county, country; People: person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password; Students: student_id, student_details; Courses: course_id, course_name, course_description, other_details; People_Addresses: person_address_id, person_id, address_id, date_from, date_to; Student_Course_Registrations: student_id, course_id, registration_date; Student_Course_Attendance: student_id, course_id, date_of_attendance; Candidates: candidate_id, candidate_details; Candidate_Assessments: candidate_id, qualification, assessment_date, asessment_outcome_code | What are the cell phone numbers of the candidates that received an assessment code of \"Fail\"?", "sql": "SELECT T3.cell_mobile_number FROM candidates AS T1 JOIN candidate_assessments AS T2 ON T1.candidate_id = T2.candidate_id JOIN people AS T3 ON T1.candidate_id = T3.person_id WHERE T2.asessment_outcome_code = \"Fail\"", "example": {"db_id": "student_assessment", "query": "SELECT T3.cell_mobile_number FROM candidates AS T1 JOIN candidate_assessments AS T2 ON T1.candidate_id = T2.candidate_id JOIN people AS T3 ON T1.candidate_id = T3.person_id WHERE T2.asessment_outcome_code = \"Fail\"", "query_toks": ["SELECT", "T3.cell_mobile_number", "FROM", "candidates", "AS", "T1", "JOIN", "candidate_assessments", "AS", "T2", "ON", "T1.candidate_id", "=", "T2.candidate_id", "JOIN", "people", "AS", "T3", "ON", "T1.candidate_id", "=", "T3.person_id", "WHERE", "T2.asessment_outcome_code", "=", "``", "Fail", "''"], "query_toks_no_value": ["select", "t3", ".", "cell_mobile_number", "from", "candidates", "as", "t1", "join", "candidate_assessments", "as", "t2", "on", "t1", ".", "candidate_id", "=", "t2", ".", "candidate_id", "join", "people", "as", "t3", "on", "t1", ".", "candidate_id", "=", "t3", ".", "person_id", "where", "t2", ".", "asessment_outcome_code", "=", "value"], "question": "What are the cell phone numbers of the candidates that received an assessment code of \"Fail\"?", "question_toks": ["What", "are", "the", "cell", "phone", "numbers", "of", "the", "candidates", "that", "received", "an", "assessment", "code", "of", "``", "Fail", "''", "?"], "guid": 1101}}
{"text": "Activity: actid, activity_name; Participates_in: stuid, actid; Faculty_Participates_in: FacID, actid; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building | What buildings have faculty offices?", "sql": "SELECT DISTINCT building FROM Faculty", "example": {"db_id": "activity_1", "query": "SELECT DISTINCT building FROM Faculty", "query_toks": ["SELECT", "DISTINCT", "building", "FROM", "Faculty"], "query_toks_no_value": ["select", "distinct", "building", "from", "faculty"], "question": "What buildings have faculty offices?", "question_toks": ["What", "buildings", "have", "faculty", "offices", "?"], "guid": 1102}}
{"text": "Addresses: address_id, line_1, line_2, city, zip_postcode, state_province_county, country; People: person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password; Students: student_id, student_details; Courses: course_id, course_name, course_description, other_details; People_Addresses: person_address_id, person_id, address_id, date_from, date_to; Student_Course_Registrations: student_id, course_id, registration_date; Student_Course_Attendance: student_id, course_id, date_of_attendance; Candidates: candidate_id, candidate_details; Candidate_Assessments: candidate_id, qualification, assessment_date, asessment_outcome_code | How many students attend course English?", "sql": "SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"English\"", "example": {"db_id": "student_assessment", "query": "SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"English\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "courses", "AS", "T1", "JOIN", "student_course_attendance", "AS", "T2", "ON", "T1.course_id", "=", "T2.course_id", "WHERE", "T1.course_name", "=", "``", "English", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "courses", "as", "t1", "join", "student_course_attendance", "as", "t2", "on", "t1", ".", "course_id", "=", "t2", ".", "course_id", "where", "t1", ".", "course_name", "=", "value"], "question": "How many students attend course English?", "question_toks": ["How", "many", "students", "attend", "course", "English", "?"], "guid": 1103}}
{"text": "Course_Authors_and_Tutors: author_id, author_tutor_ATB, login_name, password, personal_name, middle_name, family_name, gender_mf, address_line_1; Students: student_id, date_of_registration, date_of_latest_logon, login_name, password, personal_name, middle_name, family_name; Subjects: subject_id, subject_name; Courses: course_id, author_id, subject_id, course_name, course_description; Student_Course_Enrolment: registration_id, student_id, course_id, date_of_enrolment, date_of_completion; Student_Tests_Taken: registration_id, date_test_taken, test_result | Find the student ID and personal name of the student with at least two enrollments.", "sql": "SELECT T1.student_id ,  T2.personal_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING COUNT(*)  >=  2", "example": {"db_id": "e_learning", "query": "SELECT T1.student_id ,  T2.personal_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING COUNT(*)  >=  2", "query_toks": ["SELECT", "T1.student_id", ",", "T2.personal_name", "FROM", "Student_Course_Enrolment", "AS", "T1", "JOIN", "Students", "AS", "T2", "ON", "T1.student_id", "=", "T2.student_id", "GROUP", "BY", "T1.student_id", "HAVING", "COUNT", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "t1", ".", "student_id", ",", "t2", ".", "personal_name", "from", "student_course_enrolment", "as", "t1", "join", "students", "as", "t2", "on", "t1", ".", "student_id", "=", "t2", ".", "student_id", "group", "by", "t1", ".", "student_id", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "Find the student ID and personal name of the student with at least two enrollments.", "question_toks": ["Find", "the", "student", "ID", "and", "personal", "name", "of", "the", "student", "with", "at", "least", "two", "enrollments", "."], "guid": 1104}}
{"text": "driver: Driver_ID, Name, Party, Home_city, Age; school: School_ID, Grade, School, Location, Type; school_bus: School_ID, Driver_ID, Years_Working, If_full_time | Show the party with drivers from Hartford and drivers older than 40.", "sql": "SELECT party FROM driver WHERE home_city  =  'Hartford' AND age  >  40", "example": {"db_id": "school_bus", "query": "SELECT party FROM driver WHERE home_city  =  'Hartford' AND age  >  40", "query_toks": ["SELECT", "party", "FROM", "driver", "WHERE", "home_city", "=", "'Hartford", "'", "AND", "age", ">", "40"], "query_toks_no_value": ["select", "party", "from", "driver", "where", "home_city", "=", "value", "and", "age", ">", "value"], "question": "Show the party with drivers from Hartford and drivers older than 40.", "question_toks": ["Show", "the", "party", "with", "drivers", "from", "Hartford", "and", "drivers", "older", "than", "40", "."], "guid": 1105}}
{"text": "Activity: actid, activity_name; Participates_in: stuid, actid; Faculty_Participates_in: FacID, actid; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building | What are the rank, first name, and last name of the faculty members?", "sql": "SELECT rank ,  Fname ,  Lname FROM Faculty", "example": {"db_id": "activity_1", "query": "SELECT rank ,  Fname ,  Lname FROM Faculty", "query_toks": ["SELECT", "rank", ",", "Fname", ",", "Lname", "FROM", "Faculty"], "query_toks_no_value": ["select", "rank", ",", "fname", ",", "lname", "from", "faculty"], "question": "What are the rank, first name, and last name of the faculty members?", "question_toks": ["What", "are", "the", "rank", ",", "first", "name", ",", "and", "last", "name", "of", "the", "faculty", "members", "?"], "guid": 1106}}
{"text": "Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Courses: course_id, course_name, course_description, other_details; Departments: department_id, department_name, department_description, other_details; Degree_Programs: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details; Sections: section_id, course_id, section_name, section_description, other_details; Semesters: semester_id, semester_name, semester_description, other_details; Students: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered; Student_Enrolment: student_enrolment_id, degree_program_id, semester_id, student_id, other_details; Student_Enrolment_Courses: student_course_id, course_id, student_enrolment_id; Transcripts: transcript_id, transcript_date, other_details | What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582 ?", "sql": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'", "example": {"db_id": "student_transcripts_tracking", "query": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'", "query_toks": ["select", "t1.first_name", "from", "students", "as", "t1", "join", "addresses", "as", "t2", "on", "t1.permanent_address_id", "=", "t2.address_id", "where", "t2.country", "=", "\"haiti\"", "or", "t1.cell_mobile_number", "=", "\"09700166582\""], "query_toks_no_value": ["select", "t1", ".", "first_name", "from", "students", "as", "t1", "join", "addresses", "as", "t2", "on", "t1", ".", "permanent_address_id", "=", "t2", ".", "address_id", "where", "t2", ".", "country", "=", "value", "or", "t1", ".", "cell_mobile_number", "=", "value"], "question": "What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582 ?", "question_toks": ["What", "are", "the", "first", "names", "of", "the", "students", "who", "live", "in", "Haiti", "permanently", "or", "have", "the", "cell", "phone", "number", "09700166582", "?"], "guid": 1107}}
{"text": "Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Courses: course_id, course_name, course_description, other_details; Departments: department_id, department_name, department_description, other_details; Degree_Programs: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details; Sections: section_id, course_id, section_name, section_description, other_details; Semesters: semester_id, semester_name, semester_description, other_details; Students: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered; Student_Enrolment: student_enrolment_id, degree_program_id, semester_id, student_id, other_details; Student_Enrolment_Courses: student_course_id, course_id, student_enrolment_id; Transcripts: transcript_id, transcript_date, other_details | What is the id of the semester that had both Masters and Bachelors students enrolled?", "sql": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'", "example": {"db_id": "student_transcripts_tracking", "query": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'", "query_toks": ["SELECT", "DISTINCT", "T2.semester_id", "FROM", "Degree_Programs", "AS", "T1", "JOIN", "Student_Enrolment", "AS", "T2", "ON", "T1.degree_program_id", "=", "T2.degree_program_id", "WHERE", "degree_summary_name", "=", "'Master", "'", "INTERSECT", "SELECT", "DISTINCT", "T2.semester_id", "FROM", "Degree_Programs", "AS", "T1", "JOIN", "Student_Enrolment", "AS", "T2", "ON", "T1.degree_program_id", "=", "T2.degree_program_id", "WHERE", "degree_summary_name", "=", "'Bachelor", "'"], "query_toks_no_value": ["select", "distinct", "t2", ".", "semester_id", "from", "degree_programs", "as", "t1", "join", "student_enrolment", "as", "t2", "on", "t1", ".", "degree_program_id", "=", "t2", ".", "degree_program_id", "where", "degree_summary_name", "=", "value", "intersect", "select", "distinct", "t2", ".", "semester_id", "from", "degree_programs", "as", "t1", "join", "student_enrolment", "as", "t2", "on", "t1", ".", "degree_program_id", "=", "t2", ".", "degree_program_id", "where", "degree_summary_name", "=", "value"], "question": "What is the id of the semester that had both Masters and Bachelors students enrolled?", "question_toks": ["What", "is", "the", "id", "of", "the", "semester", "that", "had", "both", "Masters", "and", "Bachelors", "students", "enrolled", "?"], "guid": 1108}}
{"text": "Activity: actid, activity_name; Participates_in: stuid, actid; Faculty_Participates_in: FacID, actid; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building | How many male and female assistant professors do we have?", "sql": "SELECT sex ,  count(*) FROM Faculty WHERE rank  =  \"AsstProf\" GROUP BY sex", "example": {"db_id": "activity_1", "query": "SELECT sex ,  count(*) FROM Faculty WHERE rank  =  \"AsstProf\" GROUP BY sex", "query_toks": ["SELECT", "sex", ",", "count", "(", "*", ")", "FROM", "Faculty", "WHERE", "rank", "=", "``", "AsstProf", "''", "GROUP", "BY", "sex"], "query_toks_no_value": ["select", "sex", ",", "count", "(", "*", ")", "from", "faculty", "where", "rank", "=", "value", "group", "by", "sex"], "question": "How many male and female assistant professors do we have?", "question_toks": ["How", "many", "male", "and", "female", "assistant", "professors", "do", "we", "have", "?"], "guid": 1109}}
{"text": "driver: Driver_ID, Name, Party, Home_city, Age; school: School_ID, Grade, School, Location, Type; school_bus: School_ID, Driver_ID, Years_Working, If_full_time | Show the school name and type for schools without a school bus.", "sql": "SELECT school ,  TYPE FROM school WHERE school_id NOT IN (SELECT school_id FROM school_bus)", "example": {"db_id": "school_bus", "query": "SELECT school ,  TYPE FROM school WHERE school_id NOT IN (SELECT school_id FROM school_bus)", "query_toks": ["SELECT", "school", ",", "TYPE", "FROM", "school", "WHERE", "school_id", "NOT", "IN", "(", "SELECT", "school_id", "FROM", "school_bus", ")"], "query_toks_no_value": ["select", "school", ",", "type", "from", "school", "where", "school_id", "not", "in", "(", "select", "school_id", "from", "school_bus", ")"], "question": "Show the school name and type for schools without a school bus.", "question_toks": ["Show", "the", "school", "name", "and", "type", "for", "schools", "without", "a", "school", "bus", "."], "guid": 1110}}
{"text": "course: Course_ID, Staring_Date, Course; teacher: Teacher_ID, Name, Age, Hometown; course_arrange: Course_ID, Teacher_ID, Grade | Show different hometown of teachers and the number of teachers from each hometown.", "sql": "SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown", "example": {"db_id": "course_teach", "query": "SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown", "query_toks": ["SELECT", "Hometown", ",", "COUNT", "(", "*", ")", "FROM", "teacher", "GROUP", "BY", "Hometown"], "query_toks_no_value": ["select", "hometown", ",", "count", "(", "*", ")", "from", "teacher", "group", "by", "hometown"], "question": "Show different hometown of teachers and the number of teachers from each hometown.", "question_toks": ["Show", "different", "hometown", "of", "teachers", "and", "the", "number", "of", "teachers", "from", "each", "hometown", "."], "guid": 1111}}
{"text": "Activity: actid, activity_name; Participates_in: stuid, actid; Faculty_Participates_in: FacID, actid; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building | Give me the number of faculty members who participate in an activity", "sql": "SELECT count(DISTINCT FacID) FROM Faculty_participates_in", "example": {"db_id": "activity_1", "query": "SELECT count(DISTINCT FacID) FROM Faculty_participates_in", "query_toks": ["SELECT", "count", "(", "DISTINCT", "FacID", ")", "FROM", "Faculty_participates_in"], "query_toks_no_value": ["select", "count", "(", "distinct", "facid", ")", "from", "faculty_participates_in"], "question": "Give me the number of faculty members who participate in an activity", "question_toks": ["Give", "me", "the", "number", "of", "faculty", "members", "who", "participate", "in", "an", "activity"], "guid": 1112}}
{"text": "course: Course_ID, Staring_Date, Course; teacher: Teacher_ID, Name, Age, Hometown; course_arrange: Course_ID, Teacher_ID, Grade | What is the hometown of the youngest teacher?", "sql": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1", "example": {"db_id": "course_teach", "query": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1", "query_toks": ["SELECT", "Hometown", "FROM", "teacher", "ORDER", "BY", "Age", "ASC", "LIMIT", "1"], "query_toks_no_value": ["select", "hometown", "from", "teacher", "order", "by", "age", "asc", "limit", "value"], "question": "What is the hometown of the youngest teacher?", "question_toks": ["What", "is", "the", "hometown", "of", "the", "youngest", "teacher", "?"], "guid": 1113}}
{"text": "list: LastName, FirstName, Grade, Classroom; teachers: LastName, FirstName, Classroom | Report the total number of students for each fourth-grade classroom.", "sql": "SELECT classroom ,  count(*) FROM list WHERE grade  =  \"4\" GROUP BY classroom", "example": {"db_id": "student_1", "query": "SELECT classroom ,  count(*) FROM list WHERE grade  =  \"4\" GROUP BY classroom", "query_toks": ["SELECT", "classroom", ",", "count", "(", "*", ")", "FROM", "list", "WHERE", "grade", "=", "``", "4", "''", "GROUP", "BY", "classroom"], "query_toks_no_value": ["select", "classroom", ",", "count", "(", "*", ")", "from", "list", "where", "grade", "=", "value", "group", "by", "classroom"], "question": "Report the total number of students for each fourth-grade classroom.", "question_toks": ["Report", "the", "total", "number", "of", "students", "for", "each", "fourth-grade", "classroom", "."], "guid": 1114}}
{"text": "Course_Authors_and_Tutors: author_id, author_tutor_ATB, login_name, password, personal_name, middle_name, family_name, gender_mf, address_line_1; Students: student_id, date_of_registration, date_of_latest_logon, login_name, password, personal_name, middle_name, family_name; Subjects: subject_id, subject_name; Courses: course_id, author_id, subject_id, course_name, course_description; Student_Course_Enrolment: registration_id, student_id, course_id, date_of_enrolment, date_of_completion; Student_Tests_Taken: registration_id, date_test_taken, test_result | What are the subject ID, subject name, and the number of available courses for each subject?", "sql": "SELECT T1.subject_id ,  T2.subject_name ,  COUNT(*) FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id  =  T2.subject_id GROUP BY T1.subject_id", "example": {"db_id": "e_learning", "query": "SELECT T1.subject_id ,  T2.subject_name ,  COUNT(*) FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id  =  T2.subject_id GROUP BY T1.subject_id", "query_toks": ["SELECT", "T1.subject_id", ",", "T2.subject_name", ",", "COUNT", "(", "*", ")", "FROM", "Courses", "AS", "T1", "JOIN", "Subjects", "AS", "T2", "ON", "T1.subject_id", "=", "T2.subject_id", "GROUP", "BY", "T1.subject_id"], "query_toks_no_value": ["select", "t1", ".", "subject_id", ",", "t2", ".", "subject_name", ",", "count", "(", "*", ")", "from", "courses", "as", "t1", "join", "subjects", "as", "t2", "on", "t1", ".", "subject_id", "=", "t2", ".", "subject_id", "group", "by", "t1", ".", "subject_id"], "question": "What are the subject ID, subject name, and the number of available courses for each subject?", "question_toks": ["What", "are", "the", "subject", "ID", ",", "subject", "name", ",", "and", "the", "number", "of", "available", "courses", "for", "each", "subject", "?"], "guid": 1115}}
{"text": "list: LastName, FirstName, Grade, Classroom; teachers: LastName, FirstName, Classroom | Find the last names of the students in third grade that are not taught by COVIN JEROME.", "sql": "SELECT DISTINCT T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.grade  =  3 AND T2.firstname != \"COVIN\" AND T2.lastname != \"JEROME\"", "example": {"db_id": "student_1", "query": "SELECT DISTINCT T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.grade  =  3 AND T2.firstname != \"COVIN\" AND T2.lastname != \"JEROME\"", "query_toks": ["SELECT", "DISTINCT", "T1.lastname", "FROM", "list", "AS", "T1", "JOIN", "teachers", "AS", "T2", "ON", "T1.classroom", "=", "T2.classroom", "WHERE", "T1.grade", "=", "3", "AND", "T2.firstname", "!", "=", "``", "COVIN", "''", "AND", "T2.lastname", "!", "=", "``", "JEROME", "''"], "query_toks_no_value": ["select", "distinct", "t1", ".", "lastname", "from", "list", "as", "t1", "join", "teachers", "as", "t2", "on", "t1", ".", "classroom", "=", "t2", ".", "classroom", "where", "t1", ".", "grade", "=", "value", "and", "t2", ".", "firstname", "!", "=", "value", "and", "t2", ".", "lastname", "!", "=", "value"], "question": "Find the last names of the students in third grade that are not taught by COVIN JEROME.", "question_toks": ["Find", "the", "last", "names", "of", "the", "students", "in", "third", "grade", "that", "are", "not", "taught", "by", "COVIN", "JEROME", "."], "guid": 1116}}
{"text": "Addresses: address_id, line_1, line_2, city, zip_postcode, state_province_county, country; People: person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password; Students: student_id, student_details; Courses: course_id, course_name, course_description, other_details; People_Addresses: person_address_id, person_id, address_id, date_from, date_to; Student_Course_Registrations: student_id, course_id, registration_date; Student_Course_Attendance: student_id, course_id, date_of_attendance; Candidates: candidate_id, candidate_details; Candidate_Assessments: candidate_id, qualification, assessment_date, asessment_outcome_code | What is detail of the student who registered the most number of courses?", "sql": "SELECT T1.student_details FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "student_assessment", "query": "SELECT T1.student_details FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.student_details", "FROM", "students", "AS", "T1", "JOIN", "student_course_registrations", "AS", "T2", "ON", "T1.student_id", "=", "T2.student_id", "GROUP", "BY", "T1.student_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "student_details", "from", "students", "as", "t1", "join", "student_course_registrations", "as", "t2", "on", "t1", ".", "student_id", "=", "t2", ".", "student_id", "group", "by", "t1", ".", "student_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is detail of the student who registered the most number of courses?", "question_toks": ["What", "is", "detail", "of", "the", "student", "who", "registered", "the", "most", "number", "of", "courses", "?"], "guid": 1117}}
{"text": "driver: Driver_ID, Name, Party, Home_city, Age; school: School_ID, Grade, School, Location, Type; school_bus: School_ID, Driver_ID, Years_Working, If_full_time | Show the types of schools that have two schools.", "sql": "SELECT TYPE FROM school GROUP BY TYPE HAVING count(*)  =  2", "example": {"db_id": "school_bus", "query": "SELECT TYPE FROM school GROUP BY TYPE HAVING count(*)  =  2", "query_toks": ["SELECT", "TYPE", "FROM", "school", "GROUP", "BY", "TYPE", "HAVING", "count", "(", "*", ")", "=", "2"], "query_toks_no_value": ["select", "type", "from", "school", "group", "by", "type", "having", "count", "(", "*", ")", "=", "value"], "question": "Show the types of schools that have two schools.", "question_toks": ["Show", "the", "types", "of", "schools", "that", "have", "two", "schools", "."], "guid": 1118}}
{"text": "list: LastName, FirstName, Grade, Classroom; teachers: LastName, FirstName, Classroom | For each classroom, show the classroom number and find how many students are using it.", "sql": "SELECT classroom ,  count(*) FROM list GROUP BY classroom", "example": {"db_id": "student_1", "query": "SELECT classroom ,  count(*) FROM list GROUP BY classroom", "query_toks": ["SELECT", "classroom", ",", "count", "(", "*", ")", "FROM", "list", "GROUP", "BY", "classroom"], "query_toks_no_value": ["select", "classroom", ",", "count", "(", "*", ")", "from", "list", "group", "by", "classroom"], "question": "For each classroom, show the classroom number and find how many students are using it.", "question_toks": ["For", "each", "classroom", ",", "show", "the", "classroom", "number", "and", "find", "how", "many", "students", "are", "using", "it", "."], "guid": 1119}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Dorm: dormid, dorm_name, student_capacity, gender; Dorm_amenity: amenid, amenity_name; Has_amenity: dormid, amenid; Lives_in: stuid, dormid, room_number | Find the number of amenities for each of the dorms that can accommodate more than 100 students.", "sql": "SELECT count(*) ,  T1.dormid FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid WHERE T1.student_capacity  >  100 GROUP BY T1.dormid", "example": {"db_id": "dorm_1", "query": "SELECT count(*) ,  T1.dormid FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid WHERE T1.student_capacity  >  100 GROUP BY T1.dormid", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "T1.dormid", "FROM", "dorm", "AS", "T1", "JOIN", "has_amenity", "AS", "T2", "ON", "T1.dormid", "=", "T2.dormid", "WHERE", "T1.student_capacity", ">", "100", "GROUP", "BY", "T1.dormid"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "t1", ".", "dormid", "from", "dorm", "as", "t1", "join", "has_amenity", "as", "t2", "on", "t1", ".", "dormid", "=", "t2", ".", "dormid", "where", "t1", ".", "student_capacity", ">", "value", "group", "by", "t1", ".", "dormid"], "question": "Find the number of amenities for each of the dorms that can accommodate more than 100 students.", "question_toks": ["Find", "the", "number", "of", "amenities", "for", "each", "of", "the", "dorms", "that", "can", "accommodate", "more", "than", "100", "students", "."], "guid": 1120}}
{"text": "list: LastName, FirstName, Grade, Classroom; teachers: LastName, FirstName, Classroom | Find all students taught by OTHA MOYER. Output the first and last names of the students.", "sql": "SELECT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"OTHA\" AND T2.lastname  =  \"MOYER\"", "example": {"db_id": "student_1", "query": "SELECT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"OTHA\" AND T2.lastname  =  \"MOYER\"", "query_toks": ["SELECT", "T1.firstname", ",", "T1.lastname", "FROM", "list", "AS", "T1", "JOIN", "teachers", "AS", "T2", "ON", "T1.classroom", "=", "T2.classroom", "WHERE", "T2.firstname", "=", "``", "OTHA", "''", "AND", "T2.lastname", "=", "``", "MOYER", "''"], "query_toks_no_value": ["select", "t1", ".", "firstname", ",", "t1", ".", "lastname", "from", "list", "as", "t1", "join", "teachers", "as", "t2", "on", "t1", ".", "classroom", "=", "t2", ".", "classroom", "where", "t2", ".", "firstname", "=", "value", "and", "t2", ".", "lastname", "=", "value"], "question": "Find all students taught by OTHA MOYER. Output the first and last names of the students.", "question_toks": ["Find", "all", "students", "taught", "by", "OTHA", "MOYER", ".", "Output", "the", "first", "and", "last", "names", "of", "the", "students", "."], "guid": 1121}}
{"text": "Course_Authors_and_Tutors: author_id, author_tutor_ATB, login_name, password, personal_name, middle_name, family_name, gender_mf, address_line_1; Students: student_id, date_of_registration, date_of_latest_logon, login_name, password, personal_name, middle_name, family_name; Subjects: subject_id, subject_name; Courses: course_id, author_id, subject_id, course_name, course_description; Student_Course_Enrolment: registration_id, student_id, course_id, date_of_enrolment, date_of_completion; Student_Tests_Taken: registration_id, date_test_taken, test_result | Find the names of the courses that have just one student enrollment.", "sql": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name HAVING COUNT(*)  =  1", "example": {"db_id": "e_learning", "query": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name HAVING COUNT(*)  =  1", "query_toks": ["SELECT", "T1.course_name", "FROM", "Courses", "AS", "T1", "JOIN", "Student_Course_Enrolment", "AS", "T2", "ON", "T1.course_id", "=", "T2.course_id", "GROUP", "BY", "T1.course_name", "HAVING", "COUNT", "(", "*", ")", "=", "1"], "query_toks_no_value": ["select", "t1", ".", "course_name", "from", "courses", "as", "t1", "join", "student_course_enrolment", "as", "t2", "on", "t1", ".", "course_id", "=", "t2", ".", "course_id", "group", "by", "t1", ".", "course_name", "having", "count", "(", "*", ")", "=", "value"], "question": "Find the names of the courses that have just one student enrollment.", "question_toks": ["Find", "the", "names", "of", "the", "courses", "that", "have", "just", "one", "student", "enrollment", "."], "guid": 1122}}
{"text": "school: School_ID, School, Location, Enrollment, Founded, Denomination, Boys_or_Girls, Day_or_Boarding, Year_Entered_Competition, School_Colors; school_details: School_ID, Nickname, Colors, League, Class, Division; school_performance: School_Id, School_Year, Class_A, Class_AA; player: Player_ID, Player, Team, Age, Position, School_ID | List the school color of the school that has the largest enrollment.", "sql": "SELECT School_Colors FROM school ORDER BY Enrollment DESC LIMIT 1", "example": {"db_id": "school_player", "query": "SELECT School_Colors FROM school ORDER BY Enrollment DESC LIMIT 1", "query_toks": ["SELECT", "School_Colors", "FROM", "school", "ORDER", "BY", "Enrollment", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "school_colors", "from", "school", "order", "by", "enrollment", "desc", "limit", "value"], "question": "List the school color of the school that has the largest enrollment.", "question_toks": ["List", "the", "school", "color", "of", "the", "school", "that", "has", "the", "largest", "enrollment", "."], "guid": 1123}}
{"text": "Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Courses: course_id, course_name, course_description, other_details; Departments: department_id, department_name, department_description, other_details; Degree_Programs: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details; Sections: section_id, course_id, section_name, section_description, other_details; Semesters: semester_id, semester_name, semester_description, other_details; Students: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered; Student_Enrolment: student_enrolment_id, degree_program_id, semester_id, student_id, other_details; Student_Enrolment_Courses: student_course_id, course_id, student_enrolment_id; Transcripts: transcript_id, transcript_date, other_details | What is the semester which most student registered in? Show both the name and the id.", "sql": "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "student_transcripts_tracking", "query": "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.semester_name", ",", "T1.semester_id", "FROM", "Semesters", "AS", "T1", "JOIN", "Student_Enrolment", "AS", "T2", "ON", "T1.semester_id", "=", "T2.semester_id", "GROUP", "BY", "T1.semester_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "semester_name", ",", "t1", ".", "semester_id", "from", "semesters", "as", "t1", "join", "student_enrolment", "as", "t2", "on", "t1", ".", "semester_id", "=", "t2", ".", "semester_id", "group", "by", "t1", ".", "semester_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the semester which most student registered in? Show both the name and the id.", "question_toks": ["What", "is", "the", "semester", "which", "most", "student", "registered", "in", "?", "Show", "both", "the", "name", "and", "the", "id", "."], "guid": 1124}}
{"text": "Course_Authors_and_Tutors: author_id, author_tutor_ATB, login_name, password, personal_name, middle_name, family_name, gender_mf, address_line_1; Students: student_id, date_of_registration, date_of_latest_logon, login_name, password, personal_name, middle_name, family_name; Subjects: subject_id, subject_name; Courses: course_id, author_id, subject_id, course_name, course_description; Student_Course_Enrolment: registration_id, student_id, course_id, date_of_enrolment, date_of_completion; Student_Tests_Taken: registration_id, date_test_taken, test_result | List all the dates of enrollment and completion of students.", "sql": "SELECT date_of_enrolment ,  date_of_completion FROM Student_Course_Enrolment", "example": {"db_id": "e_learning", "query": "SELECT date_of_enrolment ,  date_of_completion FROM Student_Course_Enrolment", "query_toks": ["SELECT", "date_of_enrolment", ",", "date_of_completion", "FROM", "Student_Course_Enrolment"], "query_toks_no_value": ["select", "date_of_enrolment", ",", "date_of_completion", "from", "student_course_enrolment"], "question": "List all the dates of enrollment and completion of students.", "question_toks": ["List", "all", "the", "dates", "of", "enrollment", "and", "completion", "of", "students", "."], "guid": 1125}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Dorm: dormid, dorm_name, student_capacity, gender; Dorm_amenity: amenid, amenity_name; Has_amenity: dormid, amenid; Lives_in: stuid, dormid, room_number | How many diffrent dorm amenities are there?", "sql": "SELECT count(*) FROM dorm_amenity", "example": {"db_id": "dorm_1", "query": "SELECT count(*) FROM dorm_amenity", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "dorm_amenity"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "dorm_amenity"], "question": "How many diffrent dorm amenities are there?", "question_toks": ["How", "many", "diffrent", "dorm", "amenities", "are", "there", "?"], "guid": 1126}}
{"text": "Activity: actid, activity_name; Participates_in: stuid, actid; Faculty_Participates_in: FacID, actid; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building | Show the ids of students whose advisors are professors.", "sql": "SELECT T2.StuID FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor WHERE T1.rank  =  \"Professor\"", "example": {"db_id": "activity_1", "query": "SELECT T2.StuID FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor WHERE T1.rank  =  \"Professor\"", "query_toks": ["SELECT", "T2.StuID", "FROM", "Faculty", "AS", "T1", "JOIN", "Student", "AS", "T2", "ON", "T1.FacID", "=", "T2.advisor", "WHERE", "T1.rank", "=", "``", "Professor", "''"], "query_toks_no_value": ["select", "t2", ".", "stuid", "from", "faculty", "as", "t1", "join", "student", "as", "t2", "on", "t1", ".", "facid", "=", "t2", ".", "advisor", "where", "t1", ".", "rank", "=", "value"], "question": "Show the ids of students whose advisors are professors.", "question_toks": ["Show", "the", "ids", "of", "students", "whose", "advisors", "are", "professors", "."], "guid": 1127}}
{"text": "Course_Authors_and_Tutors: author_id, author_tutor_ATB, login_name, password, personal_name, middle_name, family_name, gender_mf, address_line_1; Students: student_id, date_of_registration, date_of_latest_logon, login_name, password, personal_name, middle_name, family_name; Subjects: subject_id, subject_name; Courses: course_id, author_id, subject_id, course_name, course_description; Student_Course_Enrolment: registration_id, student_id, course_id, date_of_enrolment, date_of_completion; Student_Tests_Taken: registration_id, date_test_taken, test_result | Find the subject ID, subject name, and the corresponding number of available courses for each subject.", "sql": "SELECT T1.subject_id ,  T2.subject_name ,  COUNT(*) FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id  =  T2.subject_id GROUP BY T1.subject_id", "example": {"db_id": "e_learning", "query": "SELECT T1.subject_id ,  T2.subject_name ,  COUNT(*) FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id  =  T2.subject_id GROUP BY T1.subject_id", "query_toks": ["SELECT", "T1.subject_id", ",", "T2.subject_name", ",", "COUNT", "(", "*", ")", "FROM", "Courses", "AS", "T1", "JOIN", "Subjects", "AS", "T2", "ON", "T1.subject_id", "=", "T2.subject_id", "GROUP", "BY", "T1.subject_id"], "query_toks_no_value": ["select", "t1", ".", "subject_id", ",", "t2", ".", "subject_name", ",", "count", "(", "*", ")", "from", "courses", "as", "t1", "join", "subjects", "as", "t2", "on", "t1", ".", "subject_id", "=", "t2", ".", "subject_id", "group", "by", "t1", ".", "subject_id"], "question": "Find the subject ID, subject name, and the corresponding number of available courses for each subject.", "question_toks": ["Find", "the", "subject", "ID", ",", "subject", "name", ",", "and", "the", "corresponding", "number", "of", "available", "courses", "for", "each", "subject", "."], "guid": 1128}}
{"text": "Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Courses: course_id, course_name, course_description, other_details; Departments: department_id, department_name, department_description, other_details; Degree_Programs: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details; Sections: section_id, course_id, section_name, section_description, other_details; Semesters: semester_id, semester_name, semester_description, other_details; Students: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered; Student_Enrolment: student_enrolment_id, degree_program_id, semester_id, student_id, other_details; Student_Enrolment_Courses: student_course_id, course_id, student_enrolment_id; Transcripts: transcript_id, transcript_date, other_details | List the section_name in reversed lexicographical order.", "sql": "SELECT section_name FROM Sections ORDER BY section_name DESC", "example": {"db_id": "student_transcripts_tracking", "query": "SELECT section_name FROM Sections ORDER BY section_name DESC", "query_toks": ["SELECT", "section_name", "FROM", "Sections", "ORDER", "BY", "section_name", "DESC"], "query_toks_no_value": ["select", "section_name", "from", "sections", "order", "by", "section_name", "desc"], "question": "List the section_name in reversed lexicographical order.", "question_toks": ["List", "the", "section_name", "in", "reversed", "lexicographical", "order", "."], "guid": 1129}}
{"text": "school: School_ID, School, Location, Enrollment, Founded, Denomination, Boys_or_Girls, Day_or_Boarding, Year_Entered_Competition, School_Colors; school_details: School_ID, Nickname, Colors, League, Class, Division; school_performance: School_Id, School_Year, Class_A, Class_AA; player: Player_ID, Player, Team, Age, Position, School_ID | Show the nicknames of schools that are not in division 1.", "sql": "SELECT Nickname FROM school_details WHERE Division != \"Division 1\"", "example": {"db_id": "school_player", "query": "SELECT Nickname FROM school_details WHERE Division != \"Division 1\"", "query_toks": ["SELECT", "Nickname", "FROM", "school_details", "WHERE", "Division", "!", "=", "``", "Division", "1", "''"], "query_toks_no_value": ["select", "nickname", "from", "school_details", "where", "division", "!", "=", "value"], "question": "Show the nicknames of schools that are not in division 1.", "question_toks": ["Show", "the", "nicknames", "of", "schools", "that", "are", "not", "in", "division", "1", "."], "guid": 1130}}
{"text": "Addresses: address_id, line_1, line_2, city, zip_postcode, state_province_county, country; People: person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password; Students: student_id, student_details; Courses: course_id, course_name, course_description, other_details; People_Addresses: person_address_id, person_id, address_id, date_from, date_to; Student_Course_Registrations: student_id, course_id, registration_date; Student_Course_Attendance: student_id, course_id, date_of_attendance; Candidates: candidate_id, candidate_details; Candidate_Assessments: candidate_id, qualification, assessment_date, asessment_outcome_code | What is the id of the candidate whose email is stanley.monahan@example.org?", "sql": "SELECT T2.candidate_id FROM people AS T1 JOIN candidates AS T2 ON T1.person_id = T2.candidate_id WHERE T1.email_address = \"stanley.monahan@example.org\"", "example": {"db_id": "student_assessment", "query": "SELECT T2.candidate_id FROM people AS T1 JOIN candidates AS T2 ON T1.person_id = T2.candidate_id WHERE T1.email_address = \"stanley.monahan@example.org\"", "query_toks": ["SELECT", "T2.candidate_id", "FROM", "people", "AS", "T1", "JOIN", "candidates", "AS", "T2", "ON", "T1.person_id", "=", "T2.candidate_id", "WHERE", "T1.email_address", "=", "``", "stanley.monahan", "@", "example.org", "''"], "query_toks_no_value": ["select", "t2", ".", "candidate_id", "from", "people", "as", "t1", "join", "candidates", "as", "t2", "on", "t1", ".", "person_id", "=", "t2", ".", "candidate_id", "where", "t1", ".", "email_address", "=", "value"], "question": "What is the id of the candidate whose email is stanley.monahan@example.org?", "question_toks": ["What", "is", "the", "id", "of", "the", "candidate", "whose", "email", "is", "stanley.monahan", "@", "example.org", "?"], "guid": 1131}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Dorm: dormid, dorm_name, student_capacity, gender; Dorm_amenity: amenid, amenity_name; Has_amenity: dormid, amenid; Lives_in: stuid, dormid, room_number | List name of all amenities which Anonymous Donor Hall has, and sort the results in alphabetic order.", "sql": "SELECT T1.amenity_name FROM dorm_amenity AS T1 JOIN has_amenity AS T2 ON T2.amenid  =  T1.amenid JOIN dorm AS T3 ON T2.dormid  =  T3.dormid WHERE T3.dorm_name  =  'Anonymous Donor Hall' ORDER BY T1.amenity_name", "example": {"db_id": "dorm_1", "query": "SELECT T1.amenity_name FROM dorm_amenity AS T1 JOIN has_amenity AS T2 ON T2.amenid  =  T1.amenid JOIN dorm AS T3 ON T2.dormid  =  T3.dormid WHERE T3.dorm_name  =  'Anonymous Donor Hall' ORDER BY T1.amenity_name", "query_toks": ["SELECT", "T1.amenity_name", "FROM", "dorm_amenity", "AS", "T1", "JOIN", "has_amenity", "AS", "T2", "ON", "T2.amenid", "=", "T1.amenid", "JOIN", "dorm", "AS", "T3", "ON", "T2.dormid", "=", "T3.dormid", "WHERE", "T3.dorm_name", "=", "'Anonymous", "Donor", "Hall", "'", "ORDER", "BY", "T1.amenity_name"], "query_toks_no_value": ["select", "t1", ".", "amenity_name", "from", "dorm_amenity", "as", "t1", "join", "has_amenity", "as", "t2", "on", "t2", ".", "amenid", "=", "t1", ".", "amenid", "join", "dorm", "as", "t3", "on", "t2", ".", "dormid", "=", "t3", ".", "dormid", "where", "t3", ".", "dorm_name", "=", "value", "order", "by", "t1", ".", "amenity_name"], "question": "List name of all amenities which Anonymous Donor Hall has, and sort the results in alphabetic order.", "question_toks": ["List", "name", "of", "all", "amenities", "which", "Anonymous", "Donor", "Hall", "has", ",", "and", "sort", "the", "results", "in", "alphabetic", "order", "."], "guid": 1132}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Dorm: dormid, dorm_name, student_capacity, gender; Dorm_amenity: amenid, amenity_name; Has_amenity: dormid, amenid; Lives_in: stuid, dormid, room_number | Find the first name of students living in city PHL whose age is between 20 and 25.", "sql": "SELECT fname FROM student WHERE city_code  =  'PHL' AND age BETWEEN 20 AND 25", "example": {"db_id": "dorm_1", "query": "SELECT fname FROM student WHERE city_code  =  'PHL' AND age BETWEEN 20 AND 25", "query_toks": ["SELECT", "fname", "FROM", "student", "WHERE", "city_code", "=", "'PHL", "'", "AND", "age", "BETWEEN", "20", "AND", "25"], "query_toks_no_value": ["select", "fname", "from", "student", "where", "city_code", "=", "value", "and", "age", "between", "value", "and", "value"], "question": "Find the first name of students living in city PHL whose age is between 20 and 25.", "question_toks": ["Find", "the", "first", "name", "of", "students", "living", "in", "city", "PHL", "whose", "age", "is", "between", "20", "and", "25", "."], "guid": 1133}}
{"text": "Activity: actid, activity_name; Participates_in: stuid, actid; Faculty_Participates_in: FacID, actid; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building | Show the rank, first name, and last name for all the faculty.", "sql": "SELECT rank ,  Fname ,  Lname FROM Faculty", "example": {"db_id": "activity_1", "query": "SELECT rank ,  Fname ,  Lname FROM Faculty", "query_toks": ["SELECT", "rank", ",", "Fname", ",", "Lname", "FROM", "Faculty"], "query_toks_no_value": ["select", "rank", ",", "fname", ",", "lname", "from", "faculty"], "question": "Show the rank, first name, and last name for all the faculty.", "question_toks": ["Show", "the", "rank", ",", "first", "name", ",", "and", "last", "name", "for", "all", "the", "faculty", "."], "guid": 1134}}
{"text": "school: School_ID, School, Location, Enrollment, Founded, Denomination, Boys_or_Girls, Day_or_Boarding, Year_Entered_Competition, School_Colors; school_details: School_ID, Nickname, Colors, League, Class, Division; school_performance: School_Id, School_Year, Class_A, Class_AA; player: Player_ID, Player, Team, Age, Position, School_ID | Please show different denominations and the corresponding number of schools in descending order.", "sql": "SELECT Denomination ,  COUNT(*) FROM school GROUP BY Denomination ORDER BY COUNT(*) DESC", "example": {"db_id": "school_player", "query": "SELECT Denomination ,  COUNT(*) FROM school GROUP BY Denomination ORDER BY COUNT(*) DESC", "query_toks": ["SELECT", "Denomination", ",", "COUNT", "(", "*", ")", "FROM", "school", "GROUP", "BY", "Denomination", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC"], "query_toks_no_value": ["select", "denomination", ",", "count", "(", "*", ")", "from", "school", "group", "by", "denomination", "order", "by", "count", "(", "*", ")", "desc"], "question": "Please show different denominations and the corresponding number of schools in descending order.", "question_toks": ["Please", "show", "different", "denominations", "and", "the", "corresponding", "number", "of", "schools", "in", "descending", "order", "."], "guid": 1135}}
{"text": "Activity: actid, activity_name; Participates_in: stuid, actid; Faculty_Participates_in: FacID, actid; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building | Show the ids of the students who don't participate in any activity.", "sql": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Participates_in", "example": {"db_id": "activity_1", "query": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Participates_in", "query_toks": ["SELECT", "StuID", "FROM", "Student", "EXCEPT", "SELECT", "StuID", "FROM", "Participates_in"], "query_toks_no_value": ["select", "stuid", "from", "student", "except", "select", "stuid", "from", "participates_in"], "question": "Show the ids of the students who don't participate in any activity.", "question_toks": ["Show", "the", "ids", "of", "the", "students", "who", "do", "n't", "participate", "in", "any", "activity", "."], "guid": 1136}}
{"text": "course: Course_ID, Staring_Date, Course; teacher: Teacher_ID, Name, Age, Hometown; course_arrange: Course_ID, Teacher_ID, Grade | What are the names of the teachers who teach at least two courses?", "sql": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2", "example": {"db_id": "course_teach", "query": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2", "query_toks": ["SELECT", "T2.Name", "FROM", "course_arrange", "AS", "T1", "JOIN", "teacher", "AS", "T2", "ON", "T1.Teacher_ID", "=", "T2.Teacher_ID", "GROUP", "BY", "T2.Name", "HAVING", "COUNT", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "course_arrange", "as", "t1", "join", "teacher", "as", "t2", "on", "t1", ".", "teacher_id", "=", "t2", ".", "teacher_id", "group", "by", "t2", ".", "name", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "What are the names of the teachers who teach at least two courses?", "question_toks": ["What", "are", "the", "names", "of", "the", "teachers", "who", "teach", "at", "least", "two", "courses", "?"], "guid": 1137}}
{"text": "Course_Authors_and_Tutors: author_id, author_tutor_ATB, login_name, password, personal_name, middle_name, family_name, gender_mf, address_line_1; Students: student_id, date_of_registration, date_of_latest_logon, login_name, password, personal_name, middle_name, family_name; Subjects: subject_id, subject_name; Courses: course_id, author_id, subject_id, course_name, course_description; Student_Course_Enrolment: registration_id, student_id, course_id, date_of_enrolment, date_of_completion; Student_Tests_Taken: registration_id, date_test_taken, test_result | Which course is enrolled in by the most students? Give me the course name.", "sql": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) DESC LIMIT 1", "example": {"db_id": "e_learning", "query": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.course_name", "FROM", "Courses", "AS", "T1", "JOIN", "Student_Course_Enrolment", "AS", "T2", "ON", "T1.course_id", "=", "T2.course_id", "GROUP", "BY", "T1.course_name", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "course_name", "from", "courses", "as", "t1", "join", "student_course_enrolment", "as", "t2", "on", "t1", ".", "course_id", "=", "t2", ".", "course_id", "group", "by", "t1", ".", "course_name", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which course is enrolled in by the most students? Give me the course name.", "question_toks": ["Which", "course", "is", "enrolled", "in", "by", "the", "most", "students", "?", "Give", "me", "the", "course", "name", "."], "guid": 1138}}
{"text": "Course_Authors_and_Tutors: author_id, author_tutor_ATB, login_name, password, personal_name, middle_name, family_name, gender_mf, address_line_1; Students: student_id, date_of_registration, date_of_latest_logon, login_name, password, personal_name, middle_name, family_name; Subjects: subject_id, subject_name; Courses: course_id, author_id, subject_id, course_name, course_description; Student_Course_Enrolment: registration_id, student_id, course_id, date_of_enrolment, date_of_completion; Student_Tests_Taken: registration_id, date_test_taken, test_result | Return the addresses of the course authors or tutors whose personal name is \"Cathrine\".", "sql": "SELECT address_line_1 FROM Course_Authors_and_Tutors WHERE personal_name\t =  \"Cathrine\"", "example": {"db_id": "e_learning", "query": "SELECT address_line_1 FROM Course_Authors_and_Tutors WHERE personal_name\t =  \"Cathrine\"", "query_toks": ["SELECT", "address_line_1", "FROM", "Course_Authors_and_Tutors", "WHERE", "personal_name", "=", "``", "Cathrine", "''"], "query_toks_no_value": ["select", "address_line_1", "from", "course_authors_and_tutors", "where", "personal_name", "=", "value"], "question": "Return the addresses of the course authors or tutors whose personal name is \"Cathrine\".", "question_toks": ["Return", "the", "addresses", "of", "the", "course", "authors", "or", "tutors", "whose", "personal", "name", "is", "``", "Cathrine", "''", "."], "guid": 1139}}
{"text": "school: School_ID, School, Location, Enrollment, Founded, Denomination, Boys_or_Girls, Day_or_Boarding, Year_Entered_Competition, School_Colors; school_details: School_ID, Nickname, Colors, League, Class, Division; school_performance: School_Id, School_Year, Class_A, Class_AA; player: Player_ID, Player, Team, Age, Position, School_ID | Show the denomination shared by schools founded before 1890 and schools founded after 1900", "sql": "SELECT Denomination FROM school WHERE Founded  <  1890 INTERSECT SELECT Denomination FROM school WHERE Founded  >  1900", "example": {"db_id": "school_player", "query": "SELECT Denomination FROM school WHERE Founded  <  1890 INTERSECT SELECT Denomination FROM school WHERE Founded  >  1900", "query_toks": ["SELECT", "Denomination", "FROM", "school", "WHERE", "Founded", "<", "1890", "INTERSECT", "SELECT", "Denomination", "FROM", "school", "WHERE", "Founded", ">", "1900"], "query_toks_no_value": ["select", "denomination", "from", "school", "where", "founded", "<", "value", "intersect", "select", "denomination", "from", "school", "where", "founded", ">", "value"], "question": "Show the denomination shared by schools founded before 1890 and schools founded after 1900", "question_toks": ["Show", "the", "denomination", "shared", "by", "schools", "founded", "before", "1890", "and", "schools", "founded", "after", "1900"], "guid": 1140}}
{"text": "Activity: actid, activity_name; Participates_in: stuid, actid; Faculty_Participates_in: FacID, actid; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building | How many female Professors do we have?", "sql": "SELECT count(*) FROM Faculty WHERE Sex  =  'F' AND Rank  =  \"Professor\"", "example": {"db_id": "activity_1", "query": "SELECT count(*) FROM Faculty WHERE Sex  =  'F' AND Rank  =  \"Professor\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Faculty", "WHERE", "Sex", "=", "'F", "'", "AND", "Rank", "=", "``", "Professor", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "faculty", "where", "sex", "=", "value", "and", "rank", "=", "value"], "question": "How many female Professors do we have?", "question_toks": ["How", "many", "female", "Professors", "do", "we", "have", "?"], "guid": 1141}}
{"text": "Activity: actid, activity_name; Participates_in: stuid, actid; Faculty_Participates_in: FacID, actid; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building | What are the ids of the faculty members who do not advise any student.", "sql": "SELECT FacID FROM Faculty EXCEPT SELECT advisor FROM Student", "example": {"db_id": "activity_1", "query": "SELECT FacID FROM Faculty EXCEPT SELECT advisor FROM Student", "query_toks": ["SELECT", "FacID", "FROM", "Faculty", "EXCEPT", "SELECT", "advisor", "FROM", "Student"], "query_toks_no_value": ["select", "facid", "from", "faculty", "except", "select", "advisor", "from", "student"], "question": "What are the ids of the faculty members who do not advise any student.", "question_toks": ["What", "are", "the", "ids", "of", "the", "faculty", "members", "who", "do", "not", "advise", "any", "student", "."], "guid": 1142}}
{"text": "Course_Authors_and_Tutors: author_id, author_tutor_ATB, login_name, password, personal_name, middle_name, family_name, gender_mf, address_line_1; Students: student_id, date_of_registration, date_of_latest_logon, login_name, password, personal_name, middle_name, family_name; Subjects: subject_id, subject_name; Courses: course_id, author_id, subject_id, course_name, course_description; Student_Course_Enrolment: registration_id, student_id, course_id, date_of_enrolment, date_of_completion; Student_Tests_Taken: registration_id, date_test_taken, test_result | How many students did not have any course enrollment?", "sql": "SELECT count(*) FROM Students WHERE student_id NOT IN (SELECT student_id FROM Student_Course_Enrolment)", "example": {"db_id": "e_learning", "query": "SELECT count(*) FROM Students WHERE student_id NOT IN (SELECT student_id FROM Student_Course_Enrolment)", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Students", "WHERE", "student_id", "NOT", "IN", "(", "SELECT", "student_id", "FROM", "Student_Course_Enrolment", ")"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "students", "where", "student_id", "not", "in", "(", "select", "student_id", "from", "student_course_enrolment", ")"], "question": "How many students did not have any course enrollment?", "question_toks": ["How", "many", "students", "did", "not", "have", "any", "course", "enrollment", "?"], "guid": 1143}}
{"text": "Course_Authors_and_Tutors: author_id, author_tutor_ATB, login_name, password, personal_name, middle_name, family_name, gender_mf, address_line_1; Students: student_id, date_of_registration, date_of_latest_logon, login_name, password, personal_name, middle_name, family_name; Subjects: subject_id, subject_name; Courses: course_id, author_id, subject_id, course_name, course_description; Student_Course_Enrolment: registration_id, student_id, course_id, date_of_enrolment, date_of_completion; Student_Tests_Taken: registration_id, date_test_taken, test_result | What are the names of all the subjects.", "sql": "SELECT subject_name FROM SUBJECTS", "example": {"db_id": "e_learning", "query": "SELECT subject_name FROM SUBJECTS", "query_toks": ["SELECT", "subject_name", "FROM", "SUBJECTS"], "query_toks_no_value": ["select", "subject_name", "from", "subjects"], "question": "What are the names of all the subjects.", "question_toks": ["What", "are", "the", "names", "of", "all", "the", "subjects", "."], "guid": 1144}}
{"text": "Course_Authors_and_Tutors: author_id, author_tutor_ATB, login_name, password, personal_name, middle_name, family_name, gender_mf, address_line_1; Students: student_id, date_of_registration, date_of_latest_logon, login_name, password, personal_name, middle_name, family_name; Subjects: subject_id, subject_name; Courses: course_id, author_id, subject_id, course_name, course_description; Student_Course_Enrolment: registration_id, student_id, course_id, date_of_enrolment, date_of_completion; Student_Tests_Taken: registration_id, date_test_taken, test_result | List the dates of enrollment and completion of the student with family name \"Zieme\" and personal name \"Bernie\".", "sql": "SELECT T1.date_of_enrolment ,  T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.family_name  =  \"Zieme\" AND T2.personal_name  =  \"Bernie\"", "example": {"db_id": "e_learning", "query": "SELECT T1.date_of_enrolment ,  T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.family_name  =  \"Zieme\" AND T2.personal_name  =  \"Bernie\"", "query_toks": ["SELECT", "T1.date_of_enrolment", ",", "T1.date_of_completion", "FROM", "Student_Course_Enrolment", "AS", "T1", "JOIN", "Students", "AS", "T2", "ON", "T1.student_id", "=", "T2.student_id", "WHERE", "T2.family_name", "=", "``", "Zieme", "''", "AND", "T2.personal_name", "=", "``", "Bernie", "''"], "query_toks_no_value": ["select", "t1", ".", "date_of_enrolment", ",", "t1", ".", "date_of_completion", "from", "student_course_enrolment", "as", "t1", "join", "students", "as", "t2", "on", "t1", ".", "student_id", "=", "t2", ".", "student_id", "where", "t2", ".", "family_name", "=", "value", "and", "t2", ".", "personal_name", "=", "value"], "question": "List the dates of enrollment and completion of the student with family name \"Zieme\" and personal name \"Bernie\".", "question_toks": ["List", "the", "dates", "of", "enrollment", "and", "completion", "of", "the", "student", "with", "family", "name", "``", "Zieme", "''", "and", "personal", "name", "``", "Bernie", "''", "."], "guid": 1145}}
{"text": "Addresses: address_id, line_1, line_2, city, zip_postcode, state_province_county, country; People: person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password; Students: student_id, student_details; Courses: course_id, course_name, course_description, other_details; People_Addresses: person_address_id, person_id, address_id, date_from, date_to; Student_Course_Registrations: student_id, course_id, registration_date; Student_Course_Attendance: student_id, course_id, date_of_attendance; Candidates: candidate_id, candidate_details; Candidate_Assessments: candidate_id, qualification, assessment_date, asessment_outcome_code | what are the first name and last name of all candidates?", "sql": "SELECT T2.first_name ,  T2.last_name FROM candidates AS T1 JOIN people AS T2 ON T1.candidate_id = T2.person_id", "example": {"db_id": "student_assessment", "query": "SELECT T2.first_name ,  T2.last_name FROM candidates AS T1 JOIN people AS T2 ON T1.candidate_id = T2.person_id", "query_toks": ["SELECT", "T2.first_name", ",", "T2.last_name", "FROM", "candidates", "AS", "T1", "JOIN", "people", "AS", "T2", "ON", "T1.candidate_id", "=", "T2.person_id"], "query_toks_no_value": ["select", "t2", ".", "first_name", ",", "t2", ".", "last_name", "from", "candidates", "as", "t1", "join", "people", "as", "t2", "on", "t1", ".", "candidate_id", "=", "t2", ".", "person_id"], "question": "what are the first name and last name of all candidates?", "question_toks": ["what", "are", "the", "first", "name", "and", "last", "name", "of", "all", "candidates", "?"], "guid": 1146}}
{"text": "list: LastName, FirstName, Grade, Classroom; teachers: LastName, FirstName, Classroom | Report the first name and last name of all the teachers.", "sql": "SELECT DISTINCT firstname ,  lastname FROM teachers", "example": {"db_id": "student_1", "query": "SELECT DISTINCT firstname ,  lastname FROM teachers", "query_toks": ["SELECT", "DISTINCT", "firstname", ",", "lastname", "FROM", "teachers"], "query_toks_no_value": ["select", "distinct", "firstname", ",", "lastname", "from", "teachers"], "question": "Report the first name and last name of all the teachers.", "question_toks": ["Report", "the", "first", "name", "and", "last", "name", "of", "all", "the", "teachers", "."], "guid": 1147}}
{"text": "list: LastName, FirstName, Grade, Classroom; teachers: LastName, FirstName, Classroom | For each classroom, report the classroom number and the number of grades using it.", "sql": "SELECT classroom ,  count(DISTINCT grade) FROM list GROUP BY classroom", "example": {"db_id": "student_1", "query": "SELECT classroom ,  count(DISTINCT grade) FROM list GROUP BY classroom", "query_toks": ["SELECT", "classroom", ",", "count", "(", "DISTINCT", "grade", ")", "FROM", "list", "GROUP", "BY", "classroom"], "query_toks_no_value": ["select", "classroom", ",", "count", "(", "distinct", "grade", ")", "from", "list", "group", "by", "classroom"], "question": "For each classroom, report the classroom number and the number of grades using it.", "question_toks": ["For", "each", "classroom", ",", "report", "the", "classroom", "number", "and", "the", "number", "of", "grades", "using", "it", "."], "guid": 1148}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Dorm: dormid, dorm_name, student_capacity, gender; Dorm_amenity: amenid, amenity_name; Has_amenity: dormid, amenid; Lives_in: stuid, dormid, room_number | What is the first and last name of all students who are younger than average?", "sql": "SELECT fname ,  lname FROM student WHERE age  <  (SELECT avg(age) FROM student)", "example": {"db_id": "dorm_1", "query": "SELECT fname ,  lname FROM student WHERE age  <  (SELECT avg(age) FROM student)", "query_toks": ["SELECT", "fname", ",", "lname", "FROM", "student", "WHERE", "age", "<", "(", "SELECT", "avg", "(", "age", ")", "FROM", "student", ")"], "query_toks_no_value": ["select", "fname", ",", "lname", "from", "student", "where", "age", "<", "(", "select", "avg", "(", "age", ")", "from", "student", ")"], "question": "What is the first and last name of all students who are younger than average?", "question_toks": ["What", "is", "the", "first", "and", "last", "name", "of", "all", "students", "who", "are", "younger", "than", "average", "?"], "guid": 1149}}
{"text": "list: LastName, FirstName, Grade, Classroom; teachers: LastName, FirstName, Classroom | Find the number of teachers who teach the student called CHRISSY NABOZNY.", "sql": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"CHRISSY\" AND T1.lastname  =  \"NABOZNY\"", "example": {"db_id": "student_1", "query": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"CHRISSY\" AND T1.lastname  =  \"NABOZNY\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "list", "AS", "T1", "JOIN", "teachers", "AS", "T2", "ON", "T1.classroom", "=", "T2.classroom", "WHERE", "T1.firstname", "=", "``", "CHRISSY", "''", "AND", "T1.lastname", "=", "``", "NABOZNY", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "list", "as", "t1", "join", "teachers", "as", "t2", "on", "t1", ".", "classroom", "=", "t2", ".", "classroom", "where", "t1", ".", "firstname", "=", "value", "and", "t1", ".", "lastname", "=", "value"], "question": "Find the number of teachers who teach the student called CHRISSY NABOZNY.", "question_toks": ["Find", "the", "number", "of", "teachers", "who", "teach", "the", "student", "called", "CHRISSY", "NABOZNY", "."], "guid": 1150}}
{"text": "Course_Authors_and_Tutors: author_id, author_tutor_ATB, login_name, password, personal_name, middle_name, family_name, gender_mf, address_line_1; Students: student_id, date_of_registration, date_of_latest_logon, login_name, password, personal_name, middle_name, family_name; Subjects: subject_id, subject_name; Courses: course_id, author_id, subject_id, course_name, course_description; Student_Course_Enrolment: registration_id, student_id, course_id, date_of_enrolment, date_of_completion; Student_Tests_Taken: registration_id, date_test_taken, test_result | How many distinct students are enrolled in courses?", "sql": "SELECT count(DISTINCT student_id) FROM Student_Course_Enrolment", "example": {"db_id": "e_learning", "query": "SELECT count(DISTINCT student_id) FROM Student_Course_Enrolment", "query_toks": ["SELECT", "count", "(", "DISTINCT", "student_id", ")", "FROM", "Student_Course_Enrolment"], "query_toks_no_value": ["select", "count", "(", "distinct", "student_id", ")", "from", "student_course_enrolment"], "question": "How many distinct students are enrolled in courses?", "question_toks": ["How", "many", "distinct", "students", "are", "enrolled", "in", "courses", "?"], "guid": 1151}}
{"text": "Addresses: address_id, line_1, line_2, city, zip_postcode, state_province_county, country; People: person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password; Students: student_id, student_details; Courses: course_id, course_name, course_description, other_details; People_Addresses: person_address_id, person_id, address_id, date_from, date_to; Student_Course_Registrations: student_id, course_id, registration_date; Student_Course_Attendance: student_id, course_id, date_of_attendance; Candidates: candidate_id, candidate_details; Candidate_Assessments: candidate_id, qualification, assessment_date, asessment_outcome_code | What is the id of the candidate who most recently accessed the course?", "sql": "SELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1", "example": {"db_id": "student_assessment", "query": "SELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1", "query_toks": ["SELECT", "candidate_id", "FROM", "candidate_assessments", "ORDER", "BY", "assessment_date", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "candidate_id", "from", "candidate_assessments", "order", "by", "assessment_date", "desc", "limit", "value"], "question": "What is the id of the candidate who most recently accessed the course?", "question_toks": ["What", "is", "the", "id", "of", "the", "candidate", "who", "most", "recently", "accessed", "the", "course", "?"], "guid": 1152}}
{"text": "School: School_id, School_name, Location, Mascot, Enrollment, IHSAA_Class, IHSAA_Football_Class, County; budget: School_id, Year, Budgeted, total_budget_percent_budgeted, Invested, total_budget_percent_invested, Budget_invested_percent; endowment: endowment_id, School_id, donator_name, amount | What are the total and average enrollment of all schools?", "sql": "SELECT sum(enrollment) ,  avg(enrollment) FROM school", "example": {"db_id": "school_finance", "query": "SELECT sum(enrollment) ,  avg(enrollment) FROM school", "query_toks": ["SELECT", "sum", "(", "enrollment", ")", ",", "avg", "(", "enrollment", ")", "FROM", "school"], "query_toks_no_value": ["select", "sum", "(", "enrollment", ")", ",", "avg", "(", "enrollment", ")", "from", "school"], "question": "What are the total and average enrollment of all schools?", "question_toks": ["What", "are", "the", "total", "and", "average", "enrollment", "of", "all", "schools", "?"], "guid": 1153}}
{"text": "Course_Authors_and_Tutors: author_id, author_tutor_ATB, login_name, password, personal_name, middle_name, family_name, gender_mf, address_line_1; Students: student_id, date_of_registration, date_of_latest_logon, login_name, password, personal_name, middle_name, family_name; Subjects: subject_id, subject_name; Courses: course_id, author_id, subject_id, course_name, course_description; Student_Course_Enrolment: registration_id, student_id, course_id, date_of_enrolment, date_of_completion; Student_Tests_Taken: registration_id, date_test_taken, test_result | List the subject ID, name of subject and the number of courses available for each subject in ascending order of the course counts.", "sql": "SELECT T1.subject_id ,  T2.subject_name ,  COUNT(*) FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id  =  T2.subject_id GROUP BY T1.subject_id ORDER BY COUNT(*) ASC", "example": {"db_id": "e_learning", "query": "SELECT T1.subject_id ,  T2.subject_name ,  COUNT(*) FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id  =  T2.subject_id GROUP BY T1.subject_id ORDER BY COUNT(*) ASC", "query_toks": ["SELECT", "T1.subject_id", ",", "T2.subject_name", ",", "COUNT", "(", "*", ")", "FROM", "Courses", "AS", "T1", "JOIN", "Subjects", "AS", "T2", "ON", "T1.subject_id", "=", "T2.subject_id", "GROUP", "BY", "T1.subject_id", "ORDER", "BY", "COUNT", "(", "*", ")", "ASC"], "query_toks_no_value": ["select", "t1", ".", "subject_id", ",", "t2", ".", "subject_name", ",", "count", "(", "*", ")", "from", "courses", "as", "t1", "join", "subjects", "as", "t2", "on", "t1", ".", "subject_id", "=", "t2", ".", "subject_id", "group", "by", "t1", ".", "subject_id", "order", "by", "count", "(", "*", ")", "asc"], "question": "List the subject ID, name of subject and the number of courses available for each subject in ascending order of the course counts.", "question_toks": ["List", "the", "subject", "ID", ",", "name", "of", "subject", "and", "the", "number", "of", "courses", "available", "for", "each", "subject", "in", "ascending", "order", "of", "the", "course", "counts", "."], "guid": 1154}}
{"text": "Course_Authors_and_Tutors: author_id, author_tutor_ATB, login_name, password, personal_name, middle_name, family_name, gender_mf, address_line_1; Students: student_id, date_of_registration, date_of_latest_logon, login_name, password, personal_name, middle_name, family_name; Subjects: subject_id, subject_name; Courses: course_id, author_id, subject_id, course_name, course_description; Student_Course_Enrolment: registration_id, student_id, course_id, date_of_enrolment, date_of_completion; Student_Tests_Taken: registration_id, date_test_taken, test_result | Find the number of distinct students enrolled in courses.", "sql": "SELECT count(DISTINCT student_id) FROM Student_Course_Enrolment", "example": {"db_id": "e_learning", "query": "SELECT count(DISTINCT student_id) FROM Student_Course_Enrolment", "query_toks": ["SELECT", "count", "(", "DISTINCT", "student_id", ")", "FROM", "Student_Course_Enrolment"], "query_toks_no_value": ["select", "count", "(", "distinct", "student_id", ")", "from", "student_course_enrolment"], "question": "Find the number of distinct students enrolled in courses.", "question_toks": ["Find", "the", "number", "of", "distinct", "students", "enrolled", "in", "courses", "."], "guid": 1155}}
{"text": "Activity: actid, activity_name; Participates_in: stuid, actid; Faculty_Participates_in: FacID, actid; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building | Show all the activity names and the number of faculty involved in each activity.", "sql": "SELECT T1.activity_name ,  count(*) FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID", "example": {"db_id": "activity_1", "query": "SELECT T1.activity_name ,  count(*) FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID", "query_toks": ["SELECT", "T1.activity_name", ",", "count", "(", "*", ")", "FROM", "Activity", "AS", "T1", "JOIN", "Faculty_participates_in", "AS", "T2", "ON", "T1.actID", "=", "T2.actID", "GROUP", "BY", "T1.actID"], "query_toks_no_value": ["select", "t1", ".", "activity_name", ",", "count", "(", "*", ")", "from", "activity", "as", "t1", "join", "faculty_participates_in", "as", "t2", "on", "t1", ".", "actid", "=", "t2", ".", "actid", "group", "by", "t1", ".", "actid"], "question": "Show all the activity names and the number of faculty involved in each activity.", "question_toks": ["Show", "all", "the", "activity", "names", "and", "the", "number", "of", "faculty", "involved", "in", "each", "activity", "."], "guid": 1156}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Dorm: dormid, dorm_name, student_capacity, gender; Dorm_amenity: amenid, amenity_name; Has_amenity: dormid, amenid; Lives_in: stuid, dormid, room_number | Find the first and last name of students who are not in the largest major.", "sql": "SELECT fname ,  lname FROM student WHERE major != (SELECT major FROM student GROUP BY major ORDER BY count(*) DESC LIMIT 1)", "example": {"db_id": "dorm_1", "query": "SELECT fname ,  lname FROM student WHERE major != (SELECT major FROM student GROUP BY major ORDER BY count(*) DESC LIMIT 1)", "query_toks": ["SELECT", "fname", ",", "lname", "FROM", "student", "WHERE", "major", "!", "=", "(", "SELECT", "major", "FROM", "student", "GROUP", "BY", "major", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1", ")"], "query_toks_no_value": ["select", "fname", ",", "lname", "from", "student", "where", "major", "!", "=", "(", "select", "major", "from", "student", "group", "by", "major", "order", "by", "count", "(", "*", ")", "desc", "limit", "value", ")"], "question": "Find the first and last name of students who are not in the largest major.", "question_toks": ["Find", "the", "first", "and", "last", "name", "of", "students", "who", "are", "not", "in", "the", "largest", "major", "."], "guid": 1157}}
{"text": "list: LastName, FirstName, Grade, Classroom; teachers: LastName, FirstName, Classroom | Find the last names of the teachers that teach fifth grade.", "sql": "SELECT DISTINCT T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE grade  =  5", "example": {"db_id": "student_1", "query": "SELECT DISTINCT T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE grade  =  5", "query_toks": ["SELECT", "DISTINCT", "T2.lastname", "FROM", "list", "AS", "T1", "JOIN", "teachers", "AS", "T2", "ON", "T1.classroom", "=", "T2.classroom", "WHERE", "grade", "=", "5"], "query_toks_no_value": ["select", "distinct", "t2", ".", "lastname", "from", "list", "as", "t1", "join", "teachers", "as", "t2", "on", "t1", ".", "classroom", "=", "t2", ".", "classroom", "where", "grade", "=", "value"], "question": "Find the last names of the teachers that teach fifth grade.", "question_toks": ["Find", "the", "last", "names", "of", "the", "teachers", "that", "teach", "fifth", "grade", "."], "guid": 1158}}
{"text": "Activity: actid, activity_name; Participates_in: stuid, actid; Faculty_Participates_in: FacID, actid; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building | Give me the the first and last name of the faculty who advises the most students.", "sql": "SELECT T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "activity_1", "query": "SELECT T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.fname", ",", "T1.lname", "FROM", "Faculty", "AS", "T1", "JOIN", "Student", "AS", "T2", "ON", "T1.FacID", "=", "T2.advisor", "GROUP", "BY", "T1.FacID", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "fname", ",", "t1", ".", "lname", "from", "faculty", "as", "t1", "join", "student", "as", "t2", "on", "t1", ".", "facid", "=", "t2", ".", "advisor", "group", "by", "t1", ".", "facid", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Give me the the first and last name of the faculty who advises the most students.", "question_toks": ["Give", "me", "the", "the", "first", "and", "last", "name", "of", "the", "faculty", "who", "advises", "the", "most", "students", "."], "guid": 1159}}
{"text": "School: School_id, School_name, Location, Mascot, Enrollment, IHSAA_Class, IHSAA_Football_Class, County; budget: School_id, Year, Budgeted, total_budget_percent_budgeted, Invested, total_budget_percent_invested, Budget_invested_percent; endowment: endowment_id, School_id, donator_name, amount | Show each county along with the number of schools and total enrollment in each county.", "sql": "SELECT county ,  count(*) ,  sum(enrollment) FROM school GROUP BY county", "example": {"db_id": "school_finance", "query": "SELECT county ,  count(*) ,  sum(enrollment) FROM school GROUP BY county", "query_toks": ["SELECT", "county", ",", "count", "(", "*", ")", ",", "sum", "(", "enrollment", ")", "FROM", "school", "GROUP", "BY", "county"], "query_toks_no_value": ["select", "county", ",", "count", "(", "*", ")", ",", "sum", "(", "enrollment", ")", "from", "school", "group", "by", "county"], "question": "Show each county along with the number of schools and total enrollment in each county.", "question_toks": ["Show", "each", "county", "along", "with", "the", "number", "of", "schools", "and", "total", "enrollment", "in", "each", "county", "."], "guid": 1160}}
{"text": "course: Course_ID, Staring_Date, Course; teacher: Teacher_ID, Name, Age, Hometown; course_arrange: Course_ID, Teacher_ID, Grade | How many teachers are there?", "sql": "SELECT count(*) FROM teacher", "example": {"db_id": "course_teach", "query": "SELECT count(*) FROM teacher", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "teacher"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "teacher"], "question": "How many teachers are there?", "question_toks": ["How", "many", "teachers", "are", "there", "?"], "guid": 1161}}
{"text": "Activity: actid, activity_name; Participates_in: stuid, actid; Faculty_Participates_in: FacID, actid; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building | Which students have professors as their advisors? Find their student ids.", "sql": "SELECT T2.StuID FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor WHERE T1.rank  =  \"Professor\"", "example": {"db_id": "activity_1", "query": "SELECT T2.StuID FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor WHERE T1.rank  =  \"Professor\"", "query_toks": ["SELECT", "T2.StuID", "FROM", "Faculty", "AS", "T1", "JOIN", "Student", "AS", "T2", "ON", "T1.FacID", "=", "T2.advisor", "WHERE", "T1.rank", "=", "``", "Professor", "''"], "query_toks_no_value": ["select", "t2", ".", "stuid", "from", "faculty", "as", "t1", "join", "student", "as", "t2", "on", "t1", ".", "facid", "=", "t2", ".", "advisor", "where", "t1", ".", "rank", "=", "value"], "question": "Which students have professors as their advisors? Find their student ids.", "question_toks": ["Which", "students", "have", "professors", "as", "their", "advisors", "?", "Find", "their", "student", "ids", "."], "guid": 1162}}
{"text": "school: School_ID, School, Location, Enrollment, Founded, Denomination, Boys_or_Girls, Day_or_Boarding, Year_Entered_Competition, School_Colors; school_details: School_ID, Nickname, Colors, League, Class, Division; school_performance: School_Id, School_Year, Class_A, Class_AA; player: Player_ID, Player, Team, Age, Position, School_ID | What are the enrollments of schools whose denomination is not \"Catholic\"?", "sql": "SELECT Enrollment FROM school WHERE Denomination != \"Catholic\"", "example": {"db_id": "school_player", "query": "SELECT Enrollment FROM school WHERE Denomination != \"Catholic\"", "query_toks": ["SELECT", "Enrollment", "FROM", "school", "WHERE", "Denomination", "!", "=", "``", "Catholic", "''"], "query_toks_no_value": ["select", "enrollment", "from", "school", "where", "denomination", "!", "=", "value"], "question": "What are the enrollments of schools whose denomination is not \"Catholic\"?", "question_toks": ["What", "are", "the", "enrollments", "of", "schools", "whose", "denomination", "is", "not", "``", "Catholic", "''", "?"], "guid": 1163}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Dorm: dormid, dorm_name, student_capacity, gender; Dorm_amenity: amenid, amenity_name; Has_amenity: dormid, amenid; Lives_in: stuid, dormid, room_number | Find the average age of students who are living in the dorm with the largest capacity.", "sql": "SELECT avg(T1.age) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.student_capacity  =  (SELECT max(student_capacity) FROM dorm)", "example": {"db_id": "dorm_1", "query": "SELECT avg(T1.age) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.student_capacity  =  (SELECT max(student_capacity) FROM dorm)", "query_toks": ["SELECT", "avg", "(", "T1.age", ")", "FROM", "student", "AS", "T1", "JOIN", "lives_in", "AS", "T2", "ON", "T1.stuid", "=", "T2.stuid", "JOIN", "dorm", "AS", "T3", "ON", "T3.dormid", "=", "T2.dormid", "WHERE", "T3.student_capacity", "=", "(", "SELECT", "max", "(", "student_capacity", ")", "FROM", "dorm", ")"], "query_toks_no_value": ["select", "avg", "(", "t1", ".", "age", ")", "from", "student", "as", "t1", "join", "lives_in", "as", "t2", "on", "t1", ".", "stuid", "=", "t2", ".", "stuid", "join", "dorm", "as", "t3", "on", "t3", ".", "dormid", "=", "t2", ".", "dormid", "where", "t3", ".", "student_capacity", "=", "(", "select", "max", "(", "student_capacity", ")", "from", "dorm", ")"], "question": "Find the average age of students who are living in the dorm with the largest capacity.", "question_toks": ["Find", "the", "average", "age", "of", "students", "who", "are", "living", "in", "the", "dorm", "with", "the", "largest", "capacity", "."], "guid": 1164}}
{"text": "Course_Authors_and_Tutors: author_id, author_tutor_ATB, login_name, password, personal_name, middle_name, family_name, gender_mf, address_line_1; Students: student_id, date_of_registration, date_of_latest_logon, login_name, password, personal_name, middle_name, family_name; Subjects: subject_id, subject_name; Courses: course_id, author_id, subject_id, course_name, course_description; Student_Course_Enrolment: registration_id, student_id, course_id, date_of_enrolment, date_of_completion; Student_Tests_Taken: registration_id, date_test_taken, test_result | What is the date of enrollment of the course named \"Spanish\"?", "sql": "SELECT T2.date_of_enrolment FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id WHERE T1.course_name  =  \"Spanish\"", "example": {"db_id": "e_learning", "query": "SELECT T2.date_of_enrolment FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id WHERE T1.course_name  =  \"Spanish\"", "query_toks": ["SELECT", "T2.date_of_enrolment", "FROM", "Courses", "AS", "T1", "JOIN", "Student_Course_Enrolment", "AS", "T2", "ON", "T1.course_id", "=", "T2.course_id", "WHERE", "T1.course_name", "=", "``", "Spanish", "''"], "query_toks_no_value": ["select", "t2", ".", "date_of_enrolment", "from", "courses", "as", "t1", "join", "student_course_enrolment", "as", "t2", "on", "t1", ".", "course_id", "=", "t2", ".", "course_id", "where", "t1", ".", "course_name", "=", "value"], "question": "What is the date of enrollment of the course named \"Spanish\"?", "question_toks": ["What", "is", "the", "date", "of", "enrollment", "of", "the", "course", "named", "``", "Spanish", "''", "?"], "guid": 1165}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Dorm: dormid, dorm_name, student_capacity, gender; Dorm_amenity: amenid, amenity_name; Has_amenity: dormid, amenid; Lives_in: stuid, dormid, room_number | Find the number of students in each major.", "sql": "SELECT count(*) ,  major FROM student GROUP BY major", "example": {"db_id": "dorm_1", "query": "SELECT count(*) ,  major FROM student GROUP BY major", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "major", "FROM", "student", "GROUP", "BY", "major"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "major", "from", "student", "group", "by", "major"], "question": "Find the number of students in each major.", "question_toks": ["Find", "the", "number", "of", "students", "in", "each", "major", "."], "guid": 1166}}
{"text": "list: LastName, FirstName, Grade, Classroom; teachers: LastName, FirstName, Classroom | Find the grade studying in room 105.", "sql": "SELECT DISTINCT grade FROM list WHERE classroom  =  105", "example": {"db_id": "student_1", "query": "SELECT DISTINCT grade FROM list WHERE classroom  =  105", "query_toks": ["SELECT", "DISTINCT", "grade", "FROM", "list", "WHERE", "classroom", "=", "105"], "query_toks_no_value": ["select", "distinct", "grade", "from", "list", "where", "classroom", "=", "value"], "question": "Find the grade studying in room 105.", "question_toks": ["Find", "the", "grade", "studying", "in", "room", "105", "."], "guid": 1167}}
{"text": "course: Course_ID, Staring_Date, Course; teacher: Teacher_ID, Name, Age, Hometown; course_arrange: Course_ID, Teacher_ID, Grade | What are the names of the people who teach math courses?", "sql": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\"", "example": {"db_id": "course_teach", "query": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\"", "query_toks": ["SELECT", "T3.Name", "FROM", "course_arrange", "AS", "T1", "JOIN", "course", "AS", "T2", "ON", "T1.Course_ID", "=", "T2.Course_ID", "JOIN", "teacher", "AS", "T3", "ON", "T1.Teacher_ID", "=", "T3.Teacher_ID", "WHERE", "T2.Course", "=", "``", "Math", "''"], "query_toks_no_value": ["select", "t3", ".", "name", "from", "course_arrange", "as", "t1", "join", "course", "as", "t2", "on", "t1", ".", "course_id", "=", "t2", ".", "course_id", "join", "teacher", "as", "t3", "on", "t1", ".", "teacher_id", "=", "t3", ".", "teacher_id", "where", "t2", ".", "course", "=", "value"], "question": "What are the names of the people who teach math courses?", "question_toks": ["What", "are", "the", "names", "of", "the", "people", "who", "teach", "math", "courses", "?"], "guid": 1168}}
{"text": "School: School_id, School_name, Location, Mascot, Enrollment, IHSAA_Class, IHSAA_Football_Class, County; budget: School_id, Year, Budgeted, total_budget_percent_budgeted, Invested, total_budget_percent_invested, Budget_invested_percent; endowment: endowment_id, School_id, donator_name, amount | How many schools are there?", "sql": "SELECT count(*) FROM school", "example": {"db_id": "school_finance", "query": "SELECT count(*) FROM school", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "school"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "school"], "question": "How many schools are there?", "question_toks": ["How", "many", "schools", "are", "there", "?"], "guid": 1169}}
{"text": "list: LastName, FirstName, Grade, Classroom; teachers: LastName, FirstName, Classroom | What are the first name and last name of all the teachers?", "sql": "SELECT DISTINCT firstname ,  lastname FROM teachers", "example": {"db_id": "student_1", "query": "SELECT DISTINCT firstname ,  lastname FROM teachers", "query_toks": ["SELECT", "DISTINCT", "firstname", ",", "lastname", "FROM", "teachers"], "query_toks_no_value": ["select", "distinct", "firstname", ",", "lastname", "from", "teachers"], "question": "What are the first name and last name of all the teachers?", "question_toks": ["What", "are", "the", "first", "name", "and", "last", "name", "of", "all", "the", "teachers", "?"], "guid": 1170}}
{"text": "course: Course_ID, Staring_Date, Course; teacher: Teacher_ID, Name, Age, Hometown; course_arrange: Course_ID, Teacher_ID, Grade | List the most common hometown of teachers.", "sql": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1", "example": {"db_id": "course_teach", "query": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "Hometown", "FROM", "teacher", "GROUP", "BY", "Hometown", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "hometown", "from", "teacher", "group", "by", "hometown", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "List the most common hometown of teachers.", "question_toks": ["List", "the", "most", "common", "hometown", "of", "teachers", "."], "guid": 1171}}
{"text": "Activity: actid, activity_name; Participates_in: stuid, actid; Faculty_Participates_in: FacID, actid; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building | What ranks do we have for faculty?", "sql": "SELECT DISTINCT rank FROM Faculty", "example": {"db_id": "activity_1", "query": "SELECT DISTINCT rank FROM Faculty", "query_toks": ["SELECT", "DISTINCT", "rank", "FROM", "Faculty"], "query_toks_no_value": ["select", "distinct", "rank", "from", "faculty"], "question": "What ranks do we have for faculty?", "question_toks": ["What", "ranks", "do", "we", "have", "for", "faculty", "?"], "guid": 1172}}
{"text": "Activity: actid, activity_name; Participates_in: stuid, actid; Faculty_Participates_in: FacID, actid; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building | In which buildings are there at least ten professors?", "sql": "SELECT building FROM Faculty WHERE rank  =  \"Professor\" GROUP BY building HAVING count(*)  >=  10", "example": {"db_id": "activity_1", "query": "SELECT building FROM Faculty WHERE rank  =  \"Professor\" GROUP BY building HAVING count(*)  >=  10", "query_toks": ["SELECT", "building", "FROM", "Faculty", "WHERE", "rank", "=", "``", "Professor", "''", "GROUP", "BY", "building", "HAVING", "count", "(", "*", ")", ">", "=", "10"], "query_toks_no_value": ["select", "building", "from", "faculty", "where", "rank", "=", "value", "group", "by", "building", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "In which buildings are there at least ten professors?", "question_toks": ["In", "which", "buildings", "are", "there", "at", "least", "ten", "professors", "?"], "guid": 1173}}
{"text": "Addresses: address_id, line_1, line_2, city, zip_postcode, state_province_county, country; People: person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password; Students: student_id, student_details; Courses: course_id, course_name, course_description, other_details; People_Addresses: person_address_id, person_id, address_id, date_from, date_to; Student_Course_Registrations: student_id, course_id, registration_date; Student_Course_Attendance: student_id, course_id, date_of_attendance; Candidates: candidate_id, candidate_details; Candidate_Assessments: candidate_id, qualification, assessment_date, asessment_outcome_code | What are the ids of the students who attended courses in the statistics department in order of attendance date.", "sql": "SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"statistics\" ORDER BY T2.date_of_attendance", "example": {"db_id": "student_assessment", "query": "SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"statistics\" ORDER BY T2.date_of_attendance", "query_toks": ["SELECT", "T2.student_id", "FROM", "courses", "AS", "T1", "JOIN", "student_course_attendance", "AS", "T2", "ON", "T1.course_id", "=", "T2.course_id", "WHERE", "T1.course_name", "=", "``", "statistics", "''", "ORDER", "BY", "T2.date_of_attendance"], "query_toks_no_value": ["select", "t2", ".", "student_id", "from", "courses", "as", "t1", "join", "student_course_attendance", "as", "t2", "on", "t1", ".", "course_id", "=", "t2", ".", "course_id", "where", "t1", ".", "course_name", "=", "value", "order", "by", "t2", ".", "date_of_attendance"], "question": "What are the ids of the students who attended courses in the statistics department in order of attendance date.", "question_toks": ["What", "are", "the", "ids", "of", "the", "students", "who", "attended", "courses", "in", "the", "statistics", "department", "in", "order", "of", "attendance", "date", "."], "guid": 1174}}
{"text": "Course_Authors_and_Tutors: author_id, author_tutor_ATB, login_name, password, personal_name, middle_name, family_name, gender_mf, address_line_1; Students: student_id, date_of_registration, date_of_latest_logon, login_name, password, personal_name, middle_name, family_name; Subjects: subject_id, subject_name; Courses: course_id, author_id, subject_id, course_name, course_description; Student_Course_Enrolment: registration_id, student_id, course_id, date_of_enrolment, date_of_completion; Student_Tests_Taken: registration_id, date_test_taken, test_result | Return the login names of the students whose family name is \"Ward\".", "sql": "SELECT login_name FROM Students WHERE family_name  =  \"Ward\"", "example": {"db_id": "e_learning", "query": "SELECT login_name FROM Students WHERE family_name  =  \"Ward\"", "query_toks": ["SELECT", "login_name", "FROM", "Students", "WHERE", "family_name", "=", "``", "Ward", "''"], "query_toks_no_value": ["select", "login_name", "from", "students", "where", "family_name", "=", "value"], "question": "Return the login names of the students whose family name is \"Ward\".", "question_toks": ["Return", "the", "login", "names", "of", "the", "students", "whose", "family", "name", "is", "``", "Ward", "''", "."], "guid": 1175}}
{"text": "School: School_id, School_name, Location, Mascot, Enrollment, IHSAA_Class, IHSAA_Football_Class, County; budget: School_id, Year, Budgeted, total_budget_percent_budgeted, Invested, total_budget_percent_invested, Budget_invested_percent; endowment: endowment_id, School_id, donator_name, amount | How many donors have endowment for school named \"Glenn\"?", "sql": "SELECT count(DISTINCT T1.donator_name) FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T2.school_name  =  \"Glenn\"", "example": {"db_id": "school_finance", "query": "SELECT count(DISTINCT T1.donator_name) FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T2.school_name  =  \"Glenn\"", "query_toks": ["SELECT", "count", "(", "DISTINCT", "T1.donator_name", ")", "FROM", "endowment", "AS", "T1", "JOIN", "school", "AS", "T2", "ON", "T1.school_id", "=", "T2.school_id", "WHERE", "T2.school_name", "=", "``", "Glenn", "''"], "query_toks_no_value": ["select", "count", "(", "distinct", "t1", ".", "donator_name", ")", "from", "endowment", "as", "t1", "join", "school", "as", "t2", "on", "t1", ".", "school_id", "=", "t2", ".", "school_id", "where", "t2", ".", "school_name", "=", "value"], "question": "How many donors have endowment for school named \"Glenn\"?", "question_toks": ["How", "many", "donors", "have", "endowment", "for", "school", "named", "``", "Glenn", "''", "?"], "guid": 1176}}
{"text": "list: LastName, FirstName, Grade, Classroom; teachers: LastName, FirstName, Classroom | How many teachers does the student named CHRISSY NABOZNY have?", "sql": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"CHRISSY\" AND T1.lastname  =  \"NABOZNY\"", "example": {"db_id": "student_1", "query": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"CHRISSY\" AND T1.lastname  =  \"NABOZNY\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "list", "AS", "T1", "JOIN", "teachers", "AS", "T2", "ON", "T1.classroom", "=", "T2.classroom", "WHERE", "T1.firstname", "=", "``", "CHRISSY", "''", "AND", "T1.lastname", "=", "``", "NABOZNY", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "list", "as", "t1", "join", "teachers", "as", "t2", "on", "t1", ".", "classroom", "=", "t2", ".", "classroom", "where", "t1", ".", "firstname", "=", "value", "and", "t1", ".", "lastname", "=", "value"], "question": "How many teachers does the student named CHRISSY NABOZNY have?", "question_toks": ["How", "many", "teachers", "does", "the", "student", "named", "CHRISSY", "NABOZNY", "have", "?"], "guid": 1177}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Dorm: dormid, dorm_name, student_capacity, gender; Dorm_amenity: amenid, amenity_name; Has_amenity: dormid, amenid; Lives_in: stuid, dormid, room_number | How many students are older than 20 in each dorm?", "sql": "SELECT count(*) ,  T3.dorm_name FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T1.age  >  20 GROUP BY T3.dorm_name", "example": {"db_id": "dorm_1", "query": "SELECT count(*) ,  T3.dorm_name FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T1.age  >  20 GROUP BY T3.dorm_name", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "T3.dorm_name", "FROM", "student", "AS", "T1", "JOIN", "lives_in", "AS", "T2", "ON", "T1.stuid", "=", "T2.stuid", "JOIN", "dorm", "AS", "T3", "ON", "T3.dormid", "=", "T2.dormid", "WHERE", "T1.age", ">", "20", "GROUP", "BY", "T3.dorm_name"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "t3", ".", "dorm_name", "from", "student", "as", "t1", "join", "lives_in", "as", "t2", "on", "t1", ".", "stuid", "=", "t2", ".", "stuid", "join", "dorm", "as", "t3", "on", "t3", ".", "dormid", "=", "t2", ".", "dormid", "where", "t1", ".", "age", ">", "value", "group", "by", "t3", ".", "dorm_name"], "question": "How many students are older than 20 in each dorm?", "question_toks": ["How", "many", "students", "are", "older", "than", "20", "in", "each", "dorm", "?"], "guid": 1178}}
{"text": "Activity: actid, activity_name; Participates_in: stuid, actid; Faculty_Participates_in: FacID, actid; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building | What are the faculty ids of all the male faculty members?", "sql": "SELECT FacID FROM Faculty WHERE Sex  =  'M'", "example": {"db_id": "activity_1", "query": "SELECT FacID FROM Faculty WHERE Sex  =  'M'", "query_toks": ["SELECT", "FacID", "FROM", "Faculty", "WHERE", "Sex", "=", "'M", "'"], "query_toks_no_value": ["select", "facid", "from", "faculty", "where", "sex", "=", "value"], "question": "What are the faculty ids of all the male faculty members?", "question_toks": ["What", "are", "the", "faculty", "ids", "of", "all", "the", "male", "faculty", "members", "?"], "guid": 1179}}
{"text": "school: School_ID, School, Location, Enrollment, Founded, Denomination, Boys_or_Girls, Day_or_Boarding, Year_Entered_Competition, School_Colors; school_details: School_ID, Nickname, Colors, League, Class, Division; school_performance: School_Id, School_Year, Class_A, Class_AA; player: Player_ID, Player, Team, Age, Position, School_ID | Which schools have more than 1 player? Give me the school locations.", "sql": "SELECT T2.Location FROM player AS T1 JOIN school AS T2 ON T1.School_ID  =  T2.School_ID GROUP BY T1.School_ID HAVING COUNT(*)  >  1", "example": {"db_id": "school_player", "query": "SELECT T2.Location FROM player AS T1 JOIN school AS T2 ON T1.School_ID  =  T2.School_ID GROUP BY T1.School_ID HAVING COUNT(*)  >  1", "query_toks": ["SELECT", "T2.Location", "FROM", "player", "AS", "T1", "JOIN", "school", "AS", "T2", "ON", "T1.School_ID", "=", "T2.School_ID", "GROUP", "BY", "T1.School_ID", "HAVING", "COUNT", "(", "*", ")", ">", "1"], "query_toks_no_value": ["select", "t2", ".", "location", "from", "player", "as", "t1", "join", "school", "as", "t2", "on", "t1", ".", "school_id", "=", "t2", ".", "school_id", "group", "by", "t1", ".", "school_id", "having", "count", "(", "*", ")", ">", "value"], "question": "Which schools have more than 1 player? Give me the school locations.", "question_toks": ["Which", "schools", "have", "more", "than", "1", "player", "?", "Give", "me", "the", "school", "locations", "."], "guid": 1180}}
{"text": "School: School_id, School_name, Location, Mascot, Enrollment, IHSAA_Class, IHSAA_Football_Class, County; budget: School_id, Year, Budgeted, total_budget_percent_budgeted, Invested, total_budget_percent_invested, Budget_invested_percent; endowment: endowment_id, School_id, donator_name, amount | Show each school name, its budgeted amount, and invested amount in year 2002 or after.", "sql": "SELECT T2.school_name ,  T1.budgeted ,  T1.invested FROM budget AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T1.year  >=  2002", "example": {"db_id": "school_finance", "query": "SELECT T2.school_name ,  T1.budgeted ,  T1.invested FROM budget AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T1.year  >=  2002", "query_toks": ["SELECT", "T2.school_name", ",", "T1.budgeted", ",", "T1.invested", "FROM", "budget", "AS", "T1", "JOIN", "school", "AS", "T2", "ON", "T1.school_id", "=", "T2.school_id", "WHERE", "T1.year", ">", "=", "2002"], "query_toks_no_value": ["select", "t2", ".", "school_name", ",", "t1", ".", "budgeted", ",", "t1", ".", "invested", "from", "budget", "as", "t1", "join", "school", "as", "t2", "on", "t1", ".", "school_id", "=", "t2", ".", "school_id", "where", "t1", ".", "year", ">", "=", "value"], "question": "Show each school name, its budgeted amount, and invested amount in year 2002 or after.", "question_toks": ["Show", "each", "school", "name", ",", "its", "budgeted", "amount", ",", "and", "invested", "amount", "in", "year", "2002", "or", "after", "."], "guid": 1181}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Dorm: dormid, dorm_name, student_capacity, gender; Dorm_amenity: amenid, amenity_name; Has_amenity: dormid, amenid; Lives_in: stuid, dormid, room_number | Find the number of students who is older than 20 in each dorm.", "sql": "SELECT count(*) ,  T3.dorm_name FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T1.age  >  20 GROUP BY T3.dorm_name", "example": {"db_id": "dorm_1", "query": "SELECT count(*) ,  T3.dorm_name FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T1.age  >  20 GROUP BY T3.dorm_name", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "T3.dorm_name", "FROM", "student", "AS", "T1", "JOIN", "lives_in", "AS", "T2", "ON", "T1.stuid", "=", "T2.stuid", "JOIN", "dorm", "AS", "T3", "ON", "T3.dormid", "=", "T2.dormid", "WHERE", "T1.age", ">", "20", "GROUP", "BY", "T3.dorm_name"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "t3", ".", "dorm_name", "from", "student", "as", "t1", "join", "lives_in", "as", "t2", "on", "t1", ".", "stuid", "=", "t2", ".", "stuid", "join", "dorm", "as", "t3", "on", "t3", ".", "dormid", "=", "t2", ".", "dormid", "where", "t1", ".", "age", ">", "value", "group", "by", "t3", ".", "dorm_name"], "question": "Find the number of students who is older than 20 in each dorm.", "question_toks": ["Find", "the", "number", "of", "students", "who", "is", "older", "than", "20", "in", "each", "dorm", "."], "guid": 1182}}
{"text": "Course_Authors_and_Tutors: author_id, author_tutor_ATB, login_name, password, personal_name, middle_name, family_name, gender_mf, address_line_1; Students: student_id, date_of_registration, date_of_latest_logon, login_name, password, personal_name, middle_name, family_name; Subjects: subject_id, subject_name; Courses: course_id, author_id, subject_id, course_name, course_description; Student_Course_Enrolment: registration_id, student_id, course_id, date_of_enrolment, date_of_completion; Student_Tests_Taken: registration_id, date_test_taken, test_result | Find the dates of the tests taken with result \"Pass\".", "sql": "SELECT date_test_taken FROM Student_Tests_Taken WHERE test_result  =  \"Pass\"", "example": {"db_id": "e_learning", "query": "SELECT date_test_taken FROM Student_Tests_Taken WHERE test_result  =  \"Pass\"", "query_toks": ["SELECT", "date_test_taken", "FROM", "Student_Tests_Taken", "WHERE", "test_result", "=", "``", "Pass", "''"], "query_toks_no_value": ["select", "date_test_taken", "from", "student_tests_taken", "where", "test_result", "=", "value"], "question": "Find the dates of the tests taken with result \"Pass\".", "question_toks": ["Find", "the", "dates", "of", "the", "tests", "taken", "with", "result", "``", "Pass", "''", "."], "guid": 1183}}
{"text": "Addresses: address_id, line_1, line_2, city, zip_postcode, state_province_county, country; People: person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password; Students: student_id, student_details; Courses: course_id, course_name, course_description, other_details; People_Addresses: person_address_id, person_id, address_id, date_from, date_to; Student_Course_Registrations: student_id, course_id, registration_date; Student_Course_Attendance: student_id, course_id, date_of_attendance; Candidates: candidate_id, candidate_details; Candidate_Assessments: candidate_id, qualification, assessment_date, asessment_outcome_code | What are the ids of the students who registered for course 301 most recently?", "sql": "SELECT student_id FROM student_course_attendance WHERE course_id = 301 ORDER BY date_of_attendance DESC LIMIT 1", "example": {"db_id": "student_assessment", "query": "SELECT student_id FROM student_course_attendance WHERE course_id = 301 ORDER BY date_of_attendance DESC LIMIT 1", "query_toks": ["SELECT", "student_id", "FROM", "student_course_attendance", "WHERE", "course_id", "=", "301", "ORDER", "BY", "date_of_attendance", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "student_id", "from", "student_course_attendance", "where", "course_id", "=", "value", "order", "by", "date_of_attendance", "desc", "limit", "value"], "question": "What are the ids of the students who registered for course 301 most recently?", "question_toks": ["What", "are", "the", "ids", "of", "the", "students", "who", "registered", "for", "course", "301", "most", "recently", "?"], "guid": 1184}}
{"text": "Activity: actid, activity_name; Participates_in: stuid, actid; Faculty_Participates_in: FacID, actid; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building | Show the names of all the activities Mark Giuliano participates in.", "sql": "SELECT T3.activity_name FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN Activity AS T3 ON T3.actid  =  T2.actid WHERE T1.fname  =  \"Mark\" AND T1.lname  =  \"Giuliano\"", "example": {"db_id": "activity_1", "query": "SELECT T3.activity_name FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN Activity AS T3 ON T3.actid  =  T2.actid WHERE T1.fname  =  \"Mark\" AND T1.lname  =  \"Giuliano\"", "query_toks": ["SELECT", "T3.activity_name", "FROM", "Faculty", "AS", "T1", "JOIN", "Faculty_participates_in", "AS", "T2", "ON", "T1.facID", "=", "T2.facID", "JOIN", "Activity", "AS", "T3", "ON", "T3.actid", "=", "T2.actid", "WHERE", "T1.fname", "=", "``", "Mark", "''", "AND", "T1.lname", "=", "``", "Giuliano", "''"], "query_toks_no_value": ["select", "t3", ".", "activity_name", "from", "faculty", "as", "t1", "join", "faculty_participates_in", "as", "t2", "on", "t1", ".", "facid", "=", "t2", ".", "facid", "join", "activity", "as", "t3", "on", "t3", ".", "actid", "=", "t2", ".", "actid", "where", "t1", ".", "fname", "=", "value", "and", "t1", ".", "lname", "=", "value"], "question": "Show the names of all the activities Mark Giuliano participates in.", "question_toks": ["Show", "the", "names", "of", "all", "the", "activities", "Mark", "Giuliano", "participates", "in", "."], "guid": 1185}}
{"text": "Activity: actid, activity_name; Participates_in: stuid, actid; Faculty_Participates_in: FacID, actid; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building | What activities do we have?", "sql": "SELECT activity_name FROM Activity", "example": {"db_id": "activity_1", "query": "SELECT activity_name FROM Activity", "query_toks": ["SELECT", "activity_name", "FROM", "Activity"], "query_toks_no_value": ["select", "activity_name", "from", "activity"], "question": "What activities do we have?", "question_toks": ["What", "activities", "do", "we", "have", "?"], "guid": 1186}}
{"text": "Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Courses: course_id, course_name, course_description, other_details; Departments: department_id, department_name, department_description, other_details; Degree_Programs: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details; Sections: section_id, course_id, section_name, section_description, other_details; Semesters: semester_id, semester_name, semester_description, other_details; Students: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered; Student_Enrolment: student_enrolment_id, degree_program_id, semester_id, student_id, other_details; Student_Enrolment_Courses: student_course_id, course_id, student_enrolment_id; Transcripts: transcript_id, transcript_date, other_details | What are the descriptions for all the math courses?", "sql": "SELECT course_description FROM Courses WHERE course_name  =  'math'", "example": {"db_id": "student_transcripts_tracking", "query": "SELECT course_description FROM Courses WHERE course_name  =  'math'", "query_toks": ["SELECT", "course_description", "FROM", "Courses", "WHERE", "course_name", "=", "'math", "'"], "query_toks_no_value": ["select", "course_description", "from", "courses", "where", "course_name", "=", "value"], "question": "What are the descriptions for all the math courses?", "question_toks": ["What", "are", "the", "descriptions", "for", "all", "the", "math", "courses", "?"], "guid": 1187}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Dorm: dormid, dorm_name, student_capacity, gender; Dorm_amenity: amenid, amenity_name; Has_amenity: dormid, amenid; Lives_in: stuid, dormid, room_number | What is the average age for each dorm and what are the names of each dorm?", "sql": "SELECT avg(T1.age) ,  T3.dorm_name FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid GROUP BY T3.dorm_name", "example": {"db_id": "dorm_1", "query": "SELECT avg(T1.age) ,  T3.dorm_name FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid GROUP BY T3.dorm_name", "query_toks": ["SELECT", "avg", "(", "T1.age", ")", ",", "T3.dorm_name", "FROM", "student", "AS", "T1", "JOIN", "lives_in", "AS", "T2", "ON", "T1.stuid", "=", "T2.stuid", "JOIN", "dorm", "AS", "T3", "ON", "T3.dormid", "=", "T2.dormid", "GROUP", "BY", "T3.dorm_name"], "query_toks_no_value": ["select", "avg", "(", "t1", ".", "age", ")", ",", "t3", ".", "dorm_name", "from", "student", "as", "t1", "join", "lives_in", "as", "t2", "on", "t1", ".", "stuid", "=", "t2", ".", "stuid", "join", "dorm", "as", "t3", "on", "t3", ".", "dormid", "=", "t2", ".", "dormid", "group", "by", "t3", ".", "dorm_name"], "question": "What is the average age for each dorm and what are the names of each dorm?", "question_toks": ["What", "is", "the", "average", "age", "for", "each", "dorm", "and", "what", "are", "the", "names", "of", "each", "dorm", "?"], "guid": 1188}}
{"text": "list: LastName, FirstName, Grade, Classroom; teachers: LastName, FirstName, Classroom | Find the last names of students studying in room 111.", "sql": "SELECT lastname FROM list WHERE classroom  =  111", "example": {"db_id": "student_1", "query": "SELECT lastname FROM list WHERE classroom  =  111", "query_toks": ["SELECT", "lastname", "FROM", "list", "WHERE", "classroom", "=", "111"], "query_toks_no_value": ["select", "lastname", "from", "list", "where", "classroom", "=", "value"], "question": "Find the last names of students studying in room 111.", "question_toks": ["Find", "the", "last", "names", "of", "students", "studying", "in", "room", "111", "."], "guid": 1189}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Dorm: dormid, dorm_name, student_capacity, gender; Dorm_amenity: amenid, amenity_name; Has_amenity: dormid, amenid; Lives_in: stuid, dormid, room_number | Find the name of dorms that can accommodate more than 300 students.", "sql": "SELECT dorm_name FROM dorm WHERE student_capacity  >  300", "example": {"db_id": "dorm_1", "query": "SELECT dorm_name FROM dorm WHERE student_capacity  >  300", "query_toks": ["SELECT", "dorm_name", "FROM", "dorm", "WHERE", "student_capacity", ">", "300"], "query_toks_no_value": ["select", "dorm_name", "from", "dorm", "where", "student_capacity", ">", "value"], "question": "Find the name of dorms that can accommodate more than 300 students.", "question_toks": ["Find", "the", "name", "of", "dorms", "that", "can", "accommodate", "more", "than", "300", "students", "."], "guid": 1190}}
{"text": "Course_Authors_and_Tutors: author_id, author_tutor_ATB, login_name, password, personal_name, middle_name, family_name, gender_mf, address_line_1; Students: student_id, date_of_registration, date_of_latest_logon, login_name, password, personal_name, middle_name, family_name; Subjects: subject_id, subject_name; Courses: course_id, author_id, subject_id, course_name, course_description; Student_Course_Enrolment: registration_id, student_id, course_id, date_of_enrolment, date_of_completion; Student_Tests_Taken: registration_id, date_test_taken, test_result | Which tests have \"Pass\" results? Return the dates when the tests were taken.", "sql": "SELECT date_test_taken FROM Student_Tests_Taken WHERE test_result  =  \"Pass\"", "example": {"db_id": "e_learning", "query": "SELECT date_test_taken FROM Student_Tests_Taken WHERE test_result  =  \"Pass\"", "query_toks": ["SELECT", "date_test_taken", "FROM", "Student_Tests_Taken", "WHERE", "test_result", "=", "``", "Pass", "''"], "query_toks_no_value": ["select", "date_test_taken", "from", "student_tests_taken", "where", "test_result", "=", "value"], "question": "Which tests have \"Pass\" results? Return the dates when the tests were taken.", "question_toks": ["Which", "tests", "have", "``", "Pass", "''", "results", "?", "Return", "the", "dates", "when", "the", "tests", "were", "taken", "."], "guid": 1191}}
{"text": "Activity: actid, activity_name; Participates_in: stuid, actid; Faculty_Participates_in: FacID, actid; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building | Show all the buildings along with the number of faculty members the buildings have.", "sql": "SELECT building ,  count(*) FROM Faculty GROUP BY building", "example": {"db_id": "activity_1", "query": "SELECT building ,  count(*) FROM Faculty GROUP BY building", "query_toks": ["SELECT", "building", ",", "count", "(", "*", ")", "FROM", "Faculty", "GROUP", "BY", "building"], "query_toks_no_value": ["select", "building", ",", "count", "(", "*", ")", "from", "faculty", "group", "by", "building"], "question": "Show all the buildings along with the number of faculty members the buildings have.", "question_toks": ["Show", "all", "the", "buildings", "along", "with", "the", "number", "of", "faculty", "members", "the", "buildings", "have", "."], "guid": 1192}}
{"text": "Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Courses: course_id, course_name, course_description, other_details; Departments: department_id, department_name, department_description, other_details; Degree_Programs: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details; Sections: section_id, course_id, section_name, section_description, other_details; Semesters: semester_id, semester_name, semester_description, other_details; Students: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered; Student_Enrolment: student_enrolment_id, degree_program_id, semester_id, student_id, other_details; Student_Enrolment_Courses: student_course_id, course_id, student_enrolment_id; Transcripts: transcript_id, transcript_date, other_details | How many degrees does the engineering department have?", "sql": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'", "example": {"db_id": "student_transcripts_tracking", "query": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Departments", "AS", "T1", "JOIN", "Degree_Programs", "AS", "T2", "ON", "T1.department_id", "=", "T2.department_id", "WHERE", "T1.department_name", "=", "'engineer", "'"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "departments", "as", "t1", "join", "degree_programs", "as", "t2", "on", "t1", ".", "department_id", "=", "t2", ".", "department_id", "where", "t1", ".", "department_name", "=", "value"], "question": "How many degrees does the engineering department have?", "question_toks": ["How", "many", "degrees", "does", "the", "engineering", "department", "have", "?"], "guid": 1193}}
{"text": "School: School_id, School_name, Location, Mascot, Enrollment, IHSAA_Class, IHSAA_Football_Class, County; budget: School_id, Year, Budgeted, total_budget_percent_budgeted, Invested, total_budget_percent_invested, Budget_invested_percent; endowment: endowment_id, School_id, donator_name, amount | Count the number of schools.", "sql": "SELECT count(*) FROM school", "example": {"db_id": "school_finance", "query": "SELECT count(*) FROM school", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "school"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "school"], "question": "Count the number of schools.", "question_toks": ["Count", "the", "number", "of", "schools", "."], "guid": 1194}}
{"text": "Course_Authors_and_Tutors: author_id, author_tutor_ATB, login_name, password, personal_name, middle_name, family_name, gender_mf, address_line_1; Students: student_id, date_of_registration, date_of_latest_logon, login_name, password, personal_name, middle_name, family_name; Subjects: subject_id, subject_name; Courses: course_id, author_id, subject_id, course_name, course_description; Student_Course_Enrolment: registration_id, student_id, course_id, date_of_enrolment, date_of_completion; Student_Tests_Taken: registration_id, date_test_taken, test_result | What are the descriptions of the courses with name \"database\"?", "sql": "SELECT course_description FROM COURSES WHERE course_name  =  \"database\"", "example": {"db_id": "e_learning", "query": "SELECT course_description FROM COURSES WHERE course_name  =  \"database\"", "query_toks": ["SELECT", "course_description", "FROM", "COURSES", "WHERE", "course_name", "=", "``", "database", "''"], "query_toks_no_value": ["select", "course_description", "from", "courses", "where", "course_name", "=", "value"], "question": "What are the descriptions of the courses with name \"database\"?", "question_toks": ["What", "are", "the", "descriptions", "of", "the", "courses", "with", "name", "``", "database", "''", "?"], "guid": 1195}}
{"text": "Course_Authors_and_Tutors: author_id, author_tutor_ATB, login_name, password, personal_name, middle_name, family_name, gender_mf, address_line_1; Students: student_id, date_of_registration, date_of_latest_logon, login_name, password, personal_name, middle_name, family_name; Subjects: subject_id, subject_name; Courses: course_id, author_id, subject_id, course_name, course_description; Student_Course_Enrolment: registration_id, student_id, course_id, date_of_enrolment, date_of_completion; Student_Tests_Taken: registration_id, date_test_taken, test_result | How many tests have result \"Fail\"?", "sql": "SELECT count(*) FROM Student_Tests_Taken WHERE test_result  =  \"Fail\"", "example": {"db_id": "e_learning", "query": "SELECT count(*) FROM Student_Tests_Taken WHERE test_result  =  \"Fail\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Student_Tests_Taken", "WHERE", "test_result", "=", "``", "Fail", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "student_tests_taken", "where", "test_result", "=", "value"], "question": "How many tests have result \"Fail\"?", "question_toks": ["How", "many", "tests", "have", "result", "``", "Fail", "''", "?"], "guid": 1196}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Dorm: dormid, dorm_name, student_capacity, gender; Dorm_amenity: amenid, amenity_name; Has_amenity: dormid, amenid; Lives_in: stuid, dormid, room_number | What is the total student capacity of all dorms?", "sql": "SELECT sum(student_capacity) FROM dorm", "example": {"db_id": "dorm_1", "query": "SELECT sum(student_capacity) FROM dorm", "query_toks": ["SELECT", "sum", "(", "student_capacity", ")", "FROM", "dorm"], "query_toks_no_value": ["select", "sum", "(", "student_capacity", ")", "from", "dorm"], "question": "What is the total student capacity of all dorms?", "question_toks": ["What", "is", "the", "total", "student", "capacity", "of", "all", "dorms", "?"], "guid": 1197}}
{"text": "Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Courses: course_id, course_name, course_description, other_details; Departments: department_id, department_name, department_description, other_details; Degree_Programs: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details; Sections: section_id, course_id, section_name, section_description, other_details; Semesters: semester_id, semester_name, semester_description, other_details; Students: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered; Student_Enrolment: student_enrolment_id, degree_program_id, semester_id, student_id, other_details; Student_Enrolment_Courses: student_course_id, course_id, student_enrolment_id; Transcripts: transcript_id, transcript_date, other_details | What are the names of all courses that have some students enrolled?", "sql": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id", "example": {"db_id": "student_transcripts_tracking", "query": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id", "query_toks": ["SELECT", "DISTINCT", "T1.course_name", "FROM", "Courses", "AS", "T1", "JOIN", "Student_Enrolment_Courses", "AS", "T2", "ON", "T1.course_id", "=", "T2.course_id"], "query_toks_no_value": ["select", "distinct", "t1", ".", "course_name", "from", "courses", "as", "t1", "join", "student_enrolment_courses", "as", "t2", "on", "t1", ".", "course_id", "=", "t2", ".", "course_id"], "question": "What are the names of all courses that have some students enrolled?", "question_toks": ["What", "are", "the", "names", "of", "all", "courses", "that", "have", "some", "students", "enrolled", "?"], "guid": 1198}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Dorm: dormid, dorm_name, student_capacity, gender; Dorm_amenity: amenid, amenity_name; Has_amenity: dormid, amenid; Lives_in: stuid, dormid, room_number | How many dorms are there?", "sql": "SELECT count(*) FROM dorm", "example": {"db_id": "dorm_1", "query": "SELECT count(*) FROM dorm", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "dorm"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "dorm"], "question": "How many dorms are there?", "question_toks": ["How", "many", "dorms", "are", "there", "?"], "guid": 1199}}
{"text": "school: School_ID, School, Location, Enrollment, Founded, Denomination, Boys_or_Girls, Day_or_Boarding, Year_Entered_Competition, School_Colors; school_details: School_ID, Nickname, Colors, League, Class, Division; school_performance: School_Id, School_Year, Class_A, Class_AA; player: Player_ID, Player, Team, Age, Position, School_ID | Order denominations in descending order of the count of schools with the denomination. Return each denomination with the count of schools.", "sql": "SELECT Denomination ,  COUNT(*) FROM school GROUP BY Denomination ORDER BY COUNT(*) DESC", "example": {"db_id": "school_player", "query": "SELECT Denomination ,  COUNT(*) FROM school GROUP BY Denomination ORDER BY COUNT(*) DESC", "query_toks": ["SELECT", "Denomination", ",", "COUNT", "(", "*", ")", "FROM", "school", "GROUP", "BY", "Denomination", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC"], "query_toks_no_value": ["select", "denomination", ",", "count", "(", "*", ")", "from", "school", "group", "by", "denomination", "order", "by", "count", "(", "*", ")", "desc"], "question": "Order denominations in descending order of the count of schools with the denomination. Return each denomination with the count of schools.", "question_toks": ["Order", "denominations", "in", "descending", "order", "of", "the", "count", "of", "schools", "with", "the", "denomination", ".", "Return", "each", "denomination", "with", "the", "count", "of", "schools", "."], "guid": 1200}}
{"text": "list: LastName, FirstName, Grade, Classroom; teachers: LastName, FirstName, Classroom | What are the first and last names of the first-grade students who are NOT taught by teacher OTHA MOYER?", "sql": "SELECT DISTINCT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.grade  =  1 EXCEPT SELECT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"OTHA\" AND T2.lastname  =  \"MOYER\"", "example": {"db_id": "student_1", "query": "SELECT DISTINCT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.grade  =  1 EXCEPT SELECT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"OTHA\" AND T2.lastname  =  \"MOYER\"", "query_toks": ["SELECT", "DISTINCT", "T1.firstname", ",", "T1.lastname", "FROM", "list", "AS", "T1", "JOIN", "teachers", "AS", "T2", "ON", "T1.classroom", "=", "T2.classroom", "WHERE", "T1.grade", "=", "1", "EXCEPT", "SELECT", "T1.firstname", ",", "T1.lastname", "FROM", "list", "AS", "T1", "JOIN", "teachers", "AS", "T2", "ON", "T1.classroom", "=", "T2.classroom", "WHERE", "T2.firstname", "=", "``", "OTHA", "''", "AND", "T2.lastname", "=", "``", "MOYER", "''"], "query_toks_no_value": ["select", "distinct", "t1", ".", "firstname", ",", "t1", ".", "lastname", "from", "list", "as", "t1", "join", "teachers", "as", "t2", "on", "t1", ".", "classroom", "=", "t2", ".", "classroom", "where", "t1", ".", "grade", "=", "value", "except", "select", "t1", ".", "firstname", ",", "t1", ".", "lastname", "from", "list", "as", "t1", "join", "teachers", "as", "t2", "on", "t1", ".", "classroom", "=", "t2", ".", "classroom", "where", "t2", ".", "firstname", "=", "value", "and", "t2", ".", "lastname", "=", "value"], "question": "What are the first and last names of the first-grade students who are NOT taught by teacher OTHA MOYER?", "question_toks": ["What", "are", "the", "first", "and", "last", "names", "of", "the", "first-grade", "students", "who", "are", "NOT", "taught", "by", "teacher", "OTHA", "MOYER", "?"], "guid": 1201}}
{"text": "Addresses: address_id, line_1, line_2, city, zip_postcode, state_province_county, country; People: person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password; Students: student_id, student_details; Courses: course_id, course_name, course_description, other_details; People_Addresses: person_address_id, person_id, address_id, date_from, date_to; Student_Course_Registrations: student_id, course_id, registration_date; Student_Course_Attendance: student_id, course_id, date_of_attendance; Candidates: candidate_id, candidate_details; Candidate_Assessments: candidate_id, qualification, assessment_date, asessment_outcome_code | Find id of candidates whose assessment code is \"Pass\"?", "sql": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"", "example": {"db_id": "student_assessment", "query": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"", "query_toks": ["SELECT", "candidate_id", "FROM", "candidate_assessments", "WHERE", "asessment_outcome_code", "=", "``", "Pass", "''"], "query_toks_no_value": ["select", "candidate_id", "from", "candidate_assessments", "where", "asessment_outcome_code", "=", "value"], "question": "Find id of candidates whose assessment code is \"Pass\"?", "question_toks": ["Find", "id", "of", "candidates", "whose", "assessment", "code", "is", "``", "Pass", "''", "?"], "guid": 1202}}
{"text": "Course_Authors_and_Tutors: author_id, author_tutor_ATB, login_name, password, personal_name, middle_name, family_name, gender_mf, address_line_1; Students: student_id, date_of_registration, date_of_latest_logon, login_name, password, personal_name, middle_name, family_name; Subjects: subject_id, subject_name; Courses: course_id, author_id, subject_id, course_name, course_description; Student_Course_Enrolment: registration_id, student_id, course_id, date_of_enrolment, date_of_completion; Student_Tests_Taken: registration_id, date_test_taken, test_result | Return the completion date for all the tests that have \"Fail\" result.", "sql": "SELECT T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id  =  T2.registration_id WHERE T2.test_result  =  \"Fail\"", "example": {"db_id": "e_learning", "query": "SELECT T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id  =  T2.registration_id WHERE T2.test_result  =  \"Fail\"", "query_toks": ["SELECT", "T1.date_of_completion", "FROM", "Student_Course_Enrolment", "AS", "T1", "JOIN", "Student_Tests_Taken", "AS", "T2", "ON", "T1.registration_id", "=", "T2.registration_id", "WHERE", "T2.test_result", "=", "``", "Fail", "''"], "query_toks_no_value": ["select", "t1", ".", "date_of_completion", "from", "student_course_enrolment", "as", "t1", "join", "student_tests_taken", "as", "t2", "on", "t1", ".", "registration_id", "=", "t2", ".", "registration_id", "where", "t2", ".", "test_result", "=", "value"], "question": "Return the completion date for all the tests that have \"Fail\" result.", "question_toks": ["Return", "the", "completion", "date", "for", "all", "the", "tests", "that", "have", "``", "Fail", "''", "result", "."], "guid": 1203}}
{"text": "Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Courses: course_id, course_name, course_description, other_details; Departments: department_id, department_name, department_description, other_details; Degree_Programs: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details; Sections: section_id, course_id, section_name, section_description, other_details; Semesters: semester_id, semester_name, semester_description, other_details; Students: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered; Student_Enrolment: student_enrolment_id, degree_program_id, semester_id, student_id, other_details; Student_Enrolment_Courses: student_course_id, course_id, student_enrolment_id; Transcripts: transcript_id, transcript_date, other_details | Which semesters do not have any student enrolled? List the semester name.", "sql": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )", "example": {"db_id": "student_transcripts_tracking", "query": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )", "query_toks": ["SELECT", "semester_name", "FROM", "Semesters", "WHERE", "semester_id", "NOT", "IN", "(", "SELECT", "semester_id", "FROM", "Student_Enrolment", ")"], "query_toks_no_value": ["select", "semester_name", "from", "semesters", "where", "semester_id", "not", "in", "(", "select", "semester_id", "from", "student_enrolment", ")"], "question": "Which semesters do not have any student enrolled? List the semester name.", "question_toks": ["Which", "semesters", "do", "not", "have", "any", "student", "enrolled", "?", "List", "the", "semester", "name", "."], "guid": 1204}}
{"text": "Addresses: address_id, line_1, line_2, city, zip_postcode, state_province_county, country; People: person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password; Students: student_id, student_details; Courses: course_id, course_name, course_description, other_details; People_Addresses: person_address_id, person_id, address_id, date_from, date_to; Student_Course_Registrations: student_id, course_id, registration_date; Student_Course_Attendance: student_id, course_id, date_of_attendance; Candidates: candidate_id, candidate_details; Candidate_Assessments: candidate_id, qualification, assessment_date, asessment_outcome_code | What are the different cities where students live?", "sql": "SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id JOIN students AS T3 ON T2.person_id = T3.student_id", "example": {"db_id": "student_assessment", "query": "SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id JOIN students AS T3 ON T2.person_id = T3.student_id", "query_toks": ["SELECT", "DISTINCT", "T1.city", "FROM", "addresses", "AS", "T1", "JOIN", "people_addresses", "AS", "T2", "ON", "T1.address_id", "=", "T2.address_id", "JOIN", "students", "AS", "T3", "ON", "T2.person_id", "=", "T3.student_id"], "query_toks_no_value": ["select", "distinct", "t1", ".", "city", "from", "addresses", "as", "t1", "join", "people_addresses", "as", "t2", "on", "t1", ".", "address_id", "=", "t2", ".", "address_id", "join", "students", "as", "t3", "on", "t2", ".", "person_id", "=", "t3", ".", "student_id"], "question": "What are the different cities where students live?", "question_toks": ["What", "are", "the", "different", "cities", "where", "students", "live", "?"], "guid": 1205}}
{"text": "Activity: actid, activity_name; Participates_in: stuid, actid; Faculty_Participates_in: FacID, actid; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building | What are the first name and last name of Linda Smith's advisor?", "sql": "SELECT T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor WHERE T2.fname  =  \"Linda\" AND T2.lname  =  \"Smith\"", "example": {"db_id": "activity_1", "query": "SELECT T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor WHERE T2.fname  =  \"Linda\" AND T2.lname  =  \"Smith\"", "query_toks": ["SELECT", "T1.fname", ",", "T1.lname", "FROM", "Faculty", "AS", "T1", "JOIN", "Student", "AS", "T2", "ON", "T1.FacID", "=", "T2.advisor", "WHERE", "T2.fname", "=", "``", "Linda", "''", "AND", "T2.lname", "=", "``", "Smith", "''"], "query_toks_no_value": ["select", "t1", ".", "fname", ",", "t1", ".", "lname", "from", "faculty", "as", "t1", "join", "student", "as", "t2", "on", "t1", ".", "facid", "=", "t2", ".", "advisor", "where", "t2", ".", "fname", "=", "value", "and", "t2", ".", "lname", "=", "value"], "question": "What are the first name and last name of Linda Smith's advisor?", "question_toks": ["What", "are", "the", "first", "name", "and", "last", "name", "of", "Linda", "Smith", "'s", "advisor", "?"], "guid": 1206}}
{"text": "course: Course_ID, Staring_Date, Course; teacher: Teacher_ID, Name, Age, Hometown; course_arrange: Course_ID, Teacher_ID, Grade | Show names of teachers and the number of courses they teach.", "sql": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name", "example": {"db_id": "course_teach", "query": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name", "query_toks": ["SELECT", "T2.Name", ",", "COUNT", "(", "*", ")", "FROM", "course_arrange", "AS", "T1", "JOIN", "teacher", "AS", "T2", "ON", "T1.Teacher_ID", "=", "T2.Teacher_ID", "GROUP", "BY", "T2.Name"], "query_toks_no_value": ["select", "t2", ".", "name", ",", "count", "(", "*", ")", "from", "course_arrange", "as", "t1", "join", "teacher", "as", "t2", "on", "t1", ".", "teacher_id", "=", "t2", ".", "teacher_id", "group", "by", "t2", ".", "name"], "question": "Show names of teachers and the number of courses they teach.", "question_toks": ["Show", "names", "of", "teachers", "and", "the", "number", "of", "courses", "they", "teach", "."], "guid": 1207}}
{"text": "Activity: actid, activity_name; Participates_in: stuid, actid; Faculty_Participates_in: FacID, actid; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building | Show the number of male and female assistant professors.", "sql": "SELECT sex ,  count(*) FROM Faculty WHERE rank  =  \"AsstProf\" GROUP BY sex", "example": {"db_id": "activity_1", "query": "SELECT sex ,  count(*) FROM Faculty WHERE rank  =  \"AsstProf\" GROUP BY sex", "query_toks": ["SELECT", "sex", ",", "count", "(", "*", ")", "FROM", "Faculty", "WHERE", "rank", "=", "``", "AsstProf", "''", "GROUP", "BY", "sex"], "query_toks_no_value": ["select", "sex", ",", "count", "(", "*", ")", "from", "faculty", "where", "rank", "=", "value", "group", "by", "sex"], "question": "Show the number of male and female assistant professors.", "question_toks": ["Show", "the", "number", "of", "male", "and", "female", "assistant", "professors", "."], "guid": 1208}}
{"text": "list: LastName, FirstName, Grade, Classroom; teachers: LastName, FirstName, Classroom | Find the first names of all the teachers that teach in classroom 110.", "sql": "SELECT firstname FROM teachers WHERE classroom  =  110", "example": {"db_id": "student_1", "query": "SELECT firstname FROM teachers WHERE classroom  =  110", "query_toks": ["SELECT", "firstname", "FROM", "teachers", "WHERE", "classroom", "=", "110"], "query_toks_no_value": ["select", "firstname", "from", "teachers", "where", "classroom", "=", "value"], "question": "Find the first names of all the teachers that teach in classroom 110.", "question_toks": ["Find", "the", "first", "names", "of", "all", "the", "teachers", "that", "teach", "in", "classroom", "110", "."], "guid": 1209}}
{"text": "Course_Authors_and_Tutors: author_id, author_tutor_ATB, login_name, password, personal_name, middle_name, family_name, gender_mf, address_line_1; Students: student_id, date_of_registration, date_of_latest_logon, login_name, password, personal_name, middle_name, family_name; Subjects: subject_id, subject_name; Courses: course_id, author_id, subject_id, course_name, course_description; Student_Course_Enrolment: registration_id, student_id, course_id, date_of_enrolment, date_of_completion; Student_Tests_Taken: registration_id, date_test_taken, test_result | What are the enrollment dates of all the tests that have result \"Pass\"?", "sql": "SELECT T1.date_of_enrolment FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id  =  T2.registration_id WHERE T2.test_result  =  \"Pass\"", "example": {"db_id": "e_learning", "query": "SELECT T1.date_of_enrolment FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id  =  T2.registration_id WHERE T2.test_result  =  \"Pass\"", "query_toks": ["SELECT", "T1.date_of_enrolment", "FROM", "Student_Course_Enrolment", "AS", "T1", "JOIN", "Student_Tests_Taken", "AS", "T2", "ON", "T1.registration_id", "=", "T2.registration_id", "WHERE", "T2.test_result", "=", "``", "Pass", "''"], "query_toks_no_value": ["select", "t1", ".", "date_of_enrolment", "from", "student_course_enrolment", "as", "t1", "join", "student_tests_taken", "as", "t2", "on", "t1", ".", "registration_id", "=", "t2", ".", "registration_id", "where", "t2", ".", "test_result", "=", "value"], "question": "What are the enrollment dates of all the tests that have result \"Pass\"?", "question_toks": ["What", "are", "the", "enrollment", "dates", "of", "all", "the", "tests", "that", "have", "result", "``", "Pass", "''", "?"], "guid": 1210}}
{"text": "Addresses: address_id, line_1, line_2, city, zip_postcode, state_province_county, country; People: person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password; Students: student_id, student_details; Courses: course_id, course_name, course_description, other_details; People_Addresses: person_address_id, person_id, address_id, date_from, date_to; Student_Course_Registrations: student_id, course_id, registration_date; Student_Course_Attendance: student_id, course_id, date_of_attendance; Candidates: candidate_id, candidate_details; Candidate_Assessments: candidate_id, qualification, assessment_date, asessment_outcome_code | What are the id of students who registered courses or attended courses?", "sql": "SELECT student_id FROM student_course_registrations UNION SELECT student_id FROM student_course_attendance", "example": {"db_id": "student_assessment", "query": "SELECT student_id FROM student_course_registrations UNION SELECT student_id FROM student_course_attendance", "query_toks": ["SELECT", "student_id", "FROM", "student_course_registrations", "UNION", "SELECT", "student_id", "FROM", "student_course_attendance"], "query_toks_no_value": ["select", "student_id", "from", "student_course_registrations", "union", "select", "student_id", "from", "student_course_attendance"], "question": "What are the id of students who registered courses or attended courses?", "question_toks": ["What", "are", "the", "id", "of", "students", "who", "registered", "courses", "or", "attended", "courses", "?"], "guid": 1211}}
{"text": "Course_Authors_and_Tutors: author_id, author_tutor_ATB, login_name, password, personal_name, middle_name, family_name, gender_mf, address_line_1; Students: student_id, date_of_registration, date_of_latest_logon, login_name, password, personal_name, middle_name, family_name; Subjects: subject_id, subject_name; Courses: course_id, author_id, subject_id, course_name, course_description; Student_Course_Enrolment: registration_id, student_id, course_id, date_of_enrolment, date_of_completion; Student_Tests_Taken: registration_id, date_test_taken, test_result | What is the address of each course author or tutor?", "sql": "SELECT address_line_1 FROM Course_Authors_and_Tutors", "example": {"db_id": "e_learning", "query": "SELECT address_line_1 FROM Course_Authors_and_Tutors", "query_toks": ["SELECT", "address_line_1", "FROM", "Course_Authors_and_Tutors"], "query_toks_no_value": ["select", "address_line_1", "from", "course_authors_and_tutors"], "question": "What is the address of each course author or tutor?", "question_toks": ["What", "is", "the", "address", "of", "each", "course", "author", "or", "tutor", "?"], "guid": 1212}}
{"text": "Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Courses: course_id, course_name, course_description, other_details; Departments: department_id, department_name, department_description, other_details; Degree_Programs: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details; Sections: section_id, course_id, section_name, section_description, other_details; Semesters: semester_id, semester_name, semester_description, other_details; Students: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered; Student_Enrolment: student_enrolment_id, degree_program_id, semester_id, student_id, other_details; Student_Enrolment_Courses: student_course_id, course_id, student_enrolment_id; Transcripts: transcript_id, transcript_date, other_details | How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id.", "sql": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "student_transcripts_tracking", "query": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "student_course_id", "FROM", "Transcript_Contents", "GROUP", "BY", "student_course_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "student_course_id", "from", "transcript_contents", "group", "by", "student_course_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id.", "question_toks": ["How", "many", "times", "at", "most", "can", "a", "course", "enrollment", "result", "show", "in", "different", "transcripts", "?", "Also", "show", "the", "course", "enrollment", "id", "."], "guid": 1213}}
{"text": "Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Courses: course_id, course_name, course_description, other_details; Departments: department_id, department_name, department_description, other_details; Degree_Programs: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details; Sections: section_id, course_id, section_name, section_description, other_details; Semesters: semester_id, semester_name, semester_description, other_details; Students: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered; Student_Enrolment: student_enrolment_id, degree_program_id, semester_id, student_id, other_details; Student_Enrolment_Courses: student_course_id, course_id, student_enrolment_id; Transcripts: transcript_id, transcript_date, other_details | When is the first transcript released? List the date and details.", "sql": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1", "example": {"db_id": "student_transcripts_tracking", "query": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1", "query_toks": ["SELECT", "transcript_date", ",", "other_details", "FROM", "Transcripts", "ORDER", "BY", "transcript_date", "ASC", "LIMIT", "1"], "query_toks_no_value": ["select", "transcript_date", ",", "other_details", "from", "transcripts", "order", "by", "transcript_date", "asc", "limit", "value"], "question": "When is the first transcript released? List the date and details.", "question_toks": ["When", "is", "the", "first", "transcript", "released", "?", "List", "the", "date", "and", "details", "."], "guid": 1214}}
{"text": "Activity: actid, activity_name; Participates_in: stuid, actid; Faculty_Participates_in: FacID, actid; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building | Show the ids of all the faculty members who participate in an activity and advise a student.", "sql": "SELECT FacID FROM Faculty_participates_in INTERSECT SELECT advisor FROM Student", "example": {"db_id": "activity_1", "query": "SELECT FacID FROM Faculty_participates_in INTERSECT SELECT advisor FROM Student", "query_toks": ["SELECT", "FacID", "FROM", "Faculty_participates_in", "INTERSECT", "SELECT", "advisor", "FROM", "Student"], "query_toks_no_value": ["select", "facid", "from", "faculty_participates_in", "intersect", "select", "advisor", "from", "student"], "question": "Show the ids of all the faculty members who participate in an activity and advise a student.", "question_toks": ["Show", "the", "ids", "of", "all", "the", "faculty", "members", "who", "participate", "in", "an", "activity", "and", "advise", "a", "student", "."], "guid": 1215}}
{"text": "Activity: actid, activity_name; Participates_in: stuid, actid; Faculty_Participates_in: FacID, actid; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building | Find the faculty rank that has the least members.", "sql": "SELECT rank FROM Faculty GROUP BY rank ORDER BY count(*) ASC LIMIT 1", "example": {"db_id": "activity_1", "query": "SELECT rank FROM Faculty GROUP BY rank ORDER BY count(*) ASC LIMIT 1", "query_toks": ["SELECT", "rank", "FROM", "Faculty", "GROUP", "BY", "rank", "ORDER", "BY", "count", "(", "*", ")", "ASC", "LIMIT", "1"], "query_toks_no_value": ["select", "rank", "from", "faculty", "group", "by", "rank", "order", "by", "count", "(", "*", ")", "asc", "limit", "value"], "question": "Find the faculty rank that has the least members.", "question_toks": ["Find", "the", "faculty", "rank", "that", "has", "the", "least", "members", "."], "guid": 1216}}
{"text": "Activity: actid, activity_name; Participates_in: stuid, actid; Faculty_Participates_in: FacID, actid; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building | Which building has most faculty members?", "sql": "SELECT building FROM Faculty GROUP BY building ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "activity_1", "query": "SELECT building FROM Faculty GROUP BY building ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "building", "FROM", "Faculty", "GROUP", "BY", "building", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "building", "from", "faculty", "group", "by", "building", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which building has most faculty members?", "question_toks": ["Which", "building", "has", "most", "faculty", "members", "?"], "guid": 1217}}
{"text": "Activity: actid, activity_name; Participates_in: stuid, actid; Faculty_Participates_in: FacID, actid; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building | How many faculty do we have?", "sql": "SELECT count(*) FROM Faculty", "example": {"db_id": "activity_1", "query": "SELECT count(*) FROM Faculty", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Faculty"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "faculty"], "question": "How many faculty do we have?", "question_toks": ["How", "many", "faculty", "do", "we", "have", "?"], "guid": 1218}}
{"text": "list: LastName, FirstName, Grade, Classroom; teachers: LastName, FirstName, Classroom | For each grade 0 classroom, return the classroom number and the count of students.", "sql": "SELECT classroom ,  count(*) FROM list WHERE grade  =  \"0\" GROUP BY classroom", "example": {"db_id": "student_1", "query": "SELECT classroom ,  count(*) FROM list WHERE grade  =  \"0\" GROUP BY classroom", "query_toks": ["SELECT", "classroom", ",", "count", "(", "*", ")", "FROM", "list", "WHERE", "grade", "=", "``", "0", "''", "GROUP", "BY", "classroom"], "query_toks_no_value": ["select", "classroom", ",", "count", "(", "*", ")", "from", "list", "where", "grade", "=", "value", "group", "by", "classroom"], "question": "For each grade 0 classroom, return the classroom number and the count of students.", "question_toks": ["For", "each", "grade", "0", "classroom", ",", "return", "the", "classroom", "number", "and", "the", "count", "of", "students", "."], "guid": 1219}}
{"text": "school: School_ID, School, Location, Enrollment, Founded, Denomination, Boys_or_Girls, Day_or_Boarding, Year_Entered_Competition, School_Colors; school_details: School_ID, Nickname, Colors, League, Class, Division; school_performance: School_Id, School_Year, Class_A, Class_AA; player: Player_ID, Player, Team, Age, Position, School_ID | What are the location and nickname of each school?", "sql": "SELECT T1.Location ,  T2.Nickname FROM school AS T1 JOIN school_details AS T2 ON T1.School_ID  =  T2.School_ID", "example": {"db_id": "school_player", "query": "SELECT T1.Location ,  T2.Nickname FROM school AS T1 JOIN school_details AS T2 ON T1.School_ID  =  T2.School_ID", "query_toks": ["SELECT", "T1.Location", ",", "T2.Nickname", "FROM", "school", "AS", "T1", "JOIN", "school_details", "AS", "T2", "ON", "T1.School_ID", "=", "T2.School_ID"], "query_toks_no_value": ["select", "t1", ".", "location", ",", "t2", ".", "nickname", "from", "school", "as", "t1", "join", "school_details", "as", "t2", "on", "t1", ".", "school_id", "=", "t2", ".", "school_id"], "question": "What are the location and nickname of each school?", "question_toks": ["What", "are", "the", "location", "and", "nickname", "of", "each", "school", "?"], "guid": 1220}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Dorm: dormid, dorm_name, student_capacity, gender; Dorm_amenity: amenid, amenity_name; Has_amenity: dormid, amenid; Lives_in: stuid, dormid, room_number | Find the code of city where most of students are living in.", "sql": "SELECT city_code FROM student GROUP BY city_code ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "dorm_1", "query": "SELECT city_code FROM student GROUP BY city_code ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "city_code", "FROM", "student", "GROUP", "BY", "city_code", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "city_code", "from", "student", "group", "by", "city_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Find the code of city where most of students are living in.", "question_toks": ["Find", "the", "code", "of", "city", "where", "most", "of", "students", "are", "living", "in", "."], "guid": 1221}}
{"text": "school: School_ID, School, Location, Enrollment, Founded, Denomination, Boys_or_Girls, Day_or_Boarding, Year_Entered_Competition, School_Colors; school_details: School_ID, Nickname, Colors, League, Class, Division; school_performance: School_Id, School_Year, Class_A, Class_AA; player: Player_ID, Player, Team, Age, Position, School_ID | Count the number of distinct player positions.", "sql": "SELECT count(DISTINCT POSITION) FROM player", "example": {"db_id": "school_player", "query": "SELECT count(DISTINCT POSITION) FROM player", "query_toks": ["SELECT", "count", "(", "DISTINCT", "POSITION", ")", "FROM", "player"], "query_toks_no_value": ["select", "count", "(", "distinct", "position", ")", "from", "player"], "question": "Count the number of distinct player positions.", "question_toks": ["Count", "the", "number", "of", "distinct", "player", "positions", "."], "guid": 1222}}
{"text": "course: Course_ID, Staring_Date, Course; teacher: Teacher_ID, Name, Age, Hometown; course_arrange: Course_ID, Teacher_ID, Grade | What are the names of the teachers and how many courses do they teach?", "sql": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name", "example": {"db_id": "course_teach", "query": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name", "query_toks": ["SELECT", "T2.Name", ",", "COUNT", "(", "*", ")", "FROM", "course_arrange", "AS", "T1", "JOIN", "teacher", "AS", "T2", "ON", "T1.Teacher_ID", "=", "T2.Teacher_ID", "GROUP", "BY", "T2.Name"], "query_toks_no_value": ["select", "t2", ".", "name", ",", "count", "(", "*", ")", "from", "course_arrange", "as", "t1", "join", "teacher", "as", "t2", "on", "t1", ".", "teacher_id", "=", "t2", ".", "teacher_id", "group", "by", "t2", ".", "name"], "question": "What are the names of the teachers and how many courses do they teach?", "question_toks": ["What", "are", "the", "names", "of", "the", "teachers", "and", "how", "many", "courses", "do", "they", "teach", "?"], "guid": 1223}}
{"text": "Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Courses: course_id, course_name, course_description, other_details; Departments: department_id, department_name, department_description, other_details; Degree_Programs: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details; Sections: section_id, course_id, section_name, section_description, other_details; Semesters: semester_id, semester_name, semester_description, other_details; Students: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered; Student_Enrolment: student_enrolment_id, degree_program_id, semester_id, student_id, other_details; Student_Enrolment_Courses: student_course_id, course_id, student_enrolment_id; Transcripts: transcript_id, transcript_date, other_details | What are the last name of the students who live in North Carolina but have not registered in any degree programs?", "sql": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id", "example": {"db_id": "student_transcripts_tracking", "query": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id", "query_toks": ["SELECT", "T1.last_name", "FROM", "Students", "AS", "T1", "JOIN", "Addresses", "AS", "T2", "ON", "T1.current_address_id", "=", "T2.address_id", "WHERE", "T2.state_province_county", "=", "'NorthCarolina", "'", "EXCEPT", "SELECT", "DISTINCT", "T3.last_name", "FROM", "Students", "AS", "T3", "JOIN", "Student_Enrolment", "AS", "T4", "ON", "T3.student_id", "=", "T4.student_id"], "query_toks_no_value": ["select", "t1", ".", "last_name", "from", "students", "as", "t1", "join", "addresses", "as", "t2", "on", "t1", ".", "current_address_id", "=", "t2", ".", "address_id", "where", "t2", ".", "state_province_county", "=", "value", "except", "select", "distinct", "t3", ".", "last_name", "from", "students", "as", "t3", "join", "student_enrolment", "as", "t4", "on", "t3", ".", "student_id", "=", "t4", ".", "student_id"], "question": "What are the last name of the students who live in North Carolina but have not registered in any degree programs?", "question_toks": ["What", "are", "the", "last", "name", "of", "the", "students", "who", "live", "in", "North", "Carolina", "but", "have", "not", "registered", "in", "any", "degree", "programs", "?"], "guid": 1224}}
{"text": "Activity: actid, activity_name; Participates_in: stuid, actid; Faculty_Participates_in: FacID, actid; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building | Which faculty do not participate in any activity? Find their faculty ids.", "sql": "SELECT FacID FROM Faculty EXCEPT SELECT FacID FROM Faculty_participates_in", "example": {"db_id": "activity_1", "query": "SELECT FacID FROM Faculty EXCEPT SELECT FacID FROM Faculty_participates_in", "query_toks": ["SELECT", "FacID", "FROM", "Faculty", "EXCEPT", "SELECT", "FacID", "FROM", "Faculty_participates_in"], "query_toks_no_value": ["select", "facid", "from", "faculty", "except", "select", "facid", "from", "faculty_participates_in"], "question": "Which faculty do not participate in any activity? Find their faculty ids.", "question_toks": ["Which", "faculty", "do", "not", "participate", "in", "any", "activity", "?", "Find", "their", "faculty", "ids", "."], "guid": 1225}}
{"text": "Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Courses: course_id, course_name, course_description, other_details; Departments: department_id, department_name, department_description, other_details; Degree_Programs: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details; Sections: section_id, course_id, section_name, section_description, other_details; Semesters: semester_id, semester_name, semester_description, other_details; Students: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered; Student_Enrolment: student_enrolment_id, degree_program_id, semester_id, student_id, other_details; Student_Enrolment_Courses: student_course_id, course_id, student_enrolment_id; Transcripts: transcript_id, transcript_date, other_details | Who are enrolled in 2 degree programs in one semester? List the first name, middle name and last name and the id.", "sql": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2", "example": {"db_id": "student_transcripts_tracking", "query": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2", "query_toks": ["SELECT", "T1.first_name", ",", "T1.middle_name", ",", "T1.last_name", ",", "T1.student_id", "FROM", "Students", "AS", "T1", "JOIN", "Student_Enrolment", "AS", "T2", "ON", "T1.student_id", "=", "T2.student_id", "GROUP", "BY", "T1.student_id", "HAVING", "count", "(", "*", ")", "=", "2"], "query_toks_no_value": ["select", "t1", ".", "first_name", ",", "t1", ".", "middle_name", ",", "t1", ".", "last_name", ",", "t1", ".", "student_id", "from", "students", "as", "t1", "join", "student_enrolment", "as", "t2", "on", "t1", ".", "student_id", "=", "t2", ".", "student_id", "group", "by", "t1", ".", "student_id", "having", "count", "(", "*", ")", "=", "value"], "question": "Who are enrolled in 2 degree programs in one semester? List the first name, middle name and last name and the id.", "question_toks": ["Who", "are", "enrolled", "in", "2", "degree", "programs", "in", "one", "semester", "?", "List", "the", "first", "name", ",", "middle", "name", "and", "last", "name", "and", "the", "id", "."], "guid": 1226}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Dorm: dormid, dorm_name, student_capacity, gender; Dorm_amenity: amenid, amenity_name; Has_amenity: dormid, amenid; Lives_in: stuid, dormid, room_number | What are the names of the all-female dorms?", "sql": "SELECT dorm_name FROM dorm WHERE gender  =  'F'", "example": {"db_id": "dorm_1", "query": "SELECT dorm_name FROM dorm WHERE gender  =  'F'", "query_toks": ["SELECT", "dorm_name", "FROM", "dorm", "WHERE", "gender", "=", "'F", "'"], "query_toks_no_value": ["select", "dorm_name", "from", "dorm", "where", "gender", "=", "value"], "question": "What are the names of the all-female dorms?", "question_toks": ["What", "are", "the", "names", "of", "the", "all-female", "dorms", "?"], "guid": 1227}}
{"text": "Activity: actid, activity_name; Participates_in: stuid, actid; Faculty_Participates_in: FacID, actid; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building | What is the total number of faculty members?", "sql": "SELECT count(*) FROM Faculty", "example": {"db_id": "activity_1", "query": "SELECT count(*) FROM Faculty", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Faculty"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "faculty"], "question": "What is the total number of faculty members?", "question_toks": ["What", "is", "the", "total", "number", "of", "faculty", "members", "?"], "guid": 1228}}
{"text": "Course_Authors_and_Tutors: author_id, author_tutor_ATB, login_name, password, personal_name, middle_name, family_name, gender_mf, address_line_1; Students: student_id, date_of_registration, date_of_latest_logon, login_name, password, personal_name, middle_name, family_name; Subjects: subject_id, subject_name; Courses: course_id, author_id, subject_id, course_name, course_description; Student_Course_Enrolment: registration_id, student_id, course_id, date_of_enrolment, date_of_completion; Student_Tests_Taken: registration_id, date_test_taken, test_result | Count the number of tests with \"Fail\" result.", "sql": "SELECT count(*) FROM Student_Tests_Taken WHERE test_result  =  \"Fail\"", "example": {"db_id": "e_learning", "query": "SELECT count(*) FROM Student_Tests_Taken WHERE test_result  =  \"Fail\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Student_Tests_Taken", "WHERE", "test_result", "=", "``", "Fail", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "student_tests_taken", "where", "test_result", "=", "value"], "question": "Count the number of tests with \"Fail\" result.", "question_toks": ["Count", "the", "number", "of", "tests", "with", "``", "Fail", "''", "result", "."], "guid": 1229}}
{"text": "list: LastName, FirstName, Grade, Classroom; teachers: LastName, FirstName, Classroom | Find the first names of the teachers that teach first grade.", "sql": "SELECT DISTINCT T2.firstname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE grade  =  1", "example": {"db_id": "student_1", "query": "SELECT DISTINCT T2.firstname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE grade  =  1", "query_toks": ["SELECT", "DISTINCT", "T2.firstname", "FROM", "list", "AS", "T1", "JOIN", "teachers", "AS", "T2", "ON", "T1.classroom", "=", "T2.classroom", "WHERE", "grade", "=", "1"], "query_toks_no_value": ["select", "distinct", "t2", ".", "firstname", "from", "list", "as", "t1", "join", "teachers", "as", "t2", "on", "t1", ".", "classroom", "=", "t2", ".", "classroom", "where", "grade", "=", "value"], "question": "Find the first names of the teachers that teach first grade.", "question_toks": ["Find", "the", "first", "names", "of", "the", "teachers", "that", "teach", "first", "grade", "."], "guid": 1230}}
{"text": "Activity: actid, activity_name; Participates_in: stuid, actid; Faculty_Participates_in: FacID, actid; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building | Find the first names of the faculty members who participate in Canoeing and Kayaking.", "sql": "SELECT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' INTERSECT SELECT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Kayaking'", "example": {"db_id": "activity_1", "query": "SELECT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' INTERSECT SELECT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Kayaking'", "query_toks": ["SELECT", "T1.lname", "FROM", "Faculty", "AS", "T1", "JOIN", "Faculty_participates_in", "AS", "T2", "ON", "T1.facID", "=", "T2.facID", "JOIN", "activity", "AS", "T3", "ON", "T2.actid", "=", "T2.actid", "WHERE", "T3.activity_name", "=", "'Canoeing", "'", "INTERSECT", "SELECT", "T1.lname", "FROM", "Faculty", "AS", "T1", "JOIN", "Faculty_participates_in", "AS", "T2", "ON", "T1.facID", "=", "T2.facID", "JOIN", "activity", "AS", "T3", "ON", "T2.actid", "=", "T2.actid", "WHERE", "T3.activity_name", "=", "'Kayaking", "'"], "query_toks_no_value": ["select", "t1", ".", "lname", "from", "faculty", "as", "t1", "join", "faculty_participates_in", "as", "t2", "on", "t1", ".", "facid", "=", "t2", ".", "facid", "join", "activity", "as", "t3", "on", "t2", ".", "actid", "=", "t2", ".", "actid", "where", "t3", ".", "activity_name", "=", "value", "intersect", "select", "t1", ".", "lname", "from", "faculty", "as", "t1", "join", "faculty_participates_in", "as", "t2", "on", "t1", ".", "facid", "=", "t2", ".", "facid", "join", "activity", "as", "t3", "on", "t2", ".", "actid", "=", "t2", ".", "actid", "where", "t3", ".", "activity_name", "=", "value"], "question": "Find the first names of the faculty members who participate in Canoeing and Kayaking.", "question_toks": ["Find", "the", "first", "names", "of", "the", "faculty", "members", "who", "participate", "in", "Canoeing", "and", "Kayaking", "."], "guid": 1231}}
{"text": "School: School_id, School_name, Location, Mascot, Enrollment, IHSAA_Class, IHSAA_Football_Class, County; budget: School_id, Year, Budgeted, total_budget_percent_budgeted, Invested, total_budget_percent_invested, Budget_invested_percent; endowment: endowment_id, School_id, donator_name, amount | What is the total budget amount for school \"Glenn\" in all years?", "sql": "SELECT sum(T1.budgeted) FROM budget AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T2.school_name  =  'Glenn'", "example": {"db_id": "school_finance", "query": "SELECT sum(T1.budgeted) FROM budget AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T2.school_name  =  'Glenn'", "query_toks": ["SELECT", "sum", "(", "T1.budgeted", ")", "FROM", "budget", "AS", "T1", "JOIN", "school", "AS", "T2", "ON", "T1.school_id", "=", "T2.school_id", "WHERE", "T2.school_name", "=", "'Glenn", "'"], "query_toks_no_value": ["select", "sum", "(", "t1", ".", "budgeted", ")", "from", "budget", "as", "t1", "join", "school", "as", "t2", "on", "t1", ".", "school_id", "=", "t2", ".", "school_id", "where", "t2", ".", "school_name", "=", "value"], "question": "What is the total budget amount for school \"Glenn\" in all years?", "question_toks": ["What", "is", "the", "total", "budget", "amount", "for", "school", "``", "Glenn", "''", "in", "all", "years", "?"], "guid": 1232}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Dorm: dormid, dorm_name, student_capacity, gender; Dorm_amenity: amenid, amenity_name; Has_amenity: dormid, amenid; Lives_in: stuid, dormid, room_number | What are the first names of all students who are older than 20?", "sql": "SELECT fname FROM student WHERE age  >  20", "example": {"db_id": "dorm_1", "query": "SELECT fname FROM student WHERE age  >  20", "query_toks": ["SELECT", "fname", "FROM", "student", "WHERE", "age", ">", "20"], "query_toks_no_value": ["select", "fname", "from", "student", "where", "age", ">", "value"], "question": "What are the first names of all students who are older than 20?", "question_toks": ["What", "are", "the", "first", "names", "of", "all", "students", "who", "are", "older", "than", "20", "?"], "guid": 1233}}
{"text": "Addresses: address_id, line_1, line_2, city, zip_postcode, state_province_county, country; People: person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password; Students: student_id, student_details; Courses: course_id, course_name, course_description, other_details; People_Addresses: person_address_id, person_id, address_id, date_from, date_to; Student_Course_Registrations: student_id, course_id, registration_date; Student_Course_Attendance: student_id, course_id, date_of_attendance; Candidates: candidate_id, candidate_details; Candidate_Assessments: candidate_id, qualification, assessment_date, asessment_outcome_code | What are the ids of all students for courses and what are the names of those courses?", "sql": "SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id", "example": {"db_id": "student_assessment", "query": "SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id", "query_toks": ["SELECT", "T1.student_id", ",", "T2.course_name", "FROM", "student_course_registrations", "AS", "T1", "JOIN", "courses", "AS", "T2", "ON", "T1.course_id", "=", "T2.course_id"], "query_toks_no_value": ["select", "t1", ".", "student_id", ",", "t2", ".", "course_name", "from", "student_course_registrations", "as", "t1", "join", "courses", "as", "t2", "on", "t1", ".", "course_id", "=", "t2", ".", "course_id"], "question": "What are the ids of all students for courses and what are the names of those courses?", "question_toks": ["What", "are", "the", "ids", "of", "all", "students", "for", "courses", "and", "what", "are", "the", "names", "of", "those", "courses", "?"], "guid": 1234}}
{"text": "Addresses: address_id, line_1, line_2, city, zip_postcode, state_province_county, country; People: person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password; Students: student_id, student_details; Courses: course_id, course_name, course_description, other_details; People_Addresses: person_address_id, person_id, address_id, date_from, date_to; Student_Course_Registrations: student_id, course_id, registration_date; Student_Course_Attendance: student_id, course_id, date_of_attendance; Candidates: candidate_id, candidate_details; Candidate_Assessments: candidate_id, qualification, assessment_date, asessment_outcome_code | List the id of students who registered some courses and the number of their registered courses?", "sql": "SELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id", "example": {"db_id": "student_assessment", "query": "SELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id", "query_toks": ["SELECT", "T1.student_id", ",", "count", "(", "*", ")", "FROM", "students", "AS", "T1", "JOIN", "student_course_registrations", "AS", "T2", "ON", "T1.student_id", "=", "T2.student_id", "GROUP", "BY", "T1.student_id"], "query_toks_no_value": ["select", "t1", ".", "student_id", ",", "count", "(", "*", ")", "from", "students", "as", "t1", "join", "student_course_registrations", "as", "t2", "on", "t1", ".", "student_id", "=", "t2", ".", "student_id", "group", "by", "t1", ".", "student_id"], "question": "List the id of students who registered some courses and the number of their registered courses?", "question_toks": ["List", "the", "id", "of", "students", "who", "registered", "some", "courses", "and", "the", "number", "of", "their", "registered", "courses", "?"], "guid": 1235}}
{"text": "Activity: actid, activity_name; Participates_in: stuid, actid; Faculty_Participates_in: FacID, actid; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building | Which faculty members advise two ore more students? Give me their faculty ids.", "sql": "SELECT T1.FacID FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID HAVING count(*)  >=  2", "example": {"db_id": "activity_1", "query": "SELECT T1.FacID FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID HAVING count(*)  >=  2", "query_toks": ["SELECT", "T1.FacID", "FROM", "Faculty", "AS", "T1", "JOIN", "Student", "AS", "T2", "ON", "T1.FacID", "=", "T2.advisor", "GROUP", "BY", "T1.FacID", "HAVING", "count", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "t1", ".", "facid", "from", "faculty", "as", "t1", "join", "student", "as", "t2", "on", "t1", ".", "facid", "=", "t2", ".", "advisor", "group", "by", "t1", ".", "facid", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "Which faculty members advise two ore more students? Give me their faculty ids.", "question_toks": ["Which", "faculty", "members", "advise", "two", "ore", "more", "students", "?", "Give", "me", "their", "faculty", "ids", "."], "guid": 1236}}
{"text": "list: LastName, FirstName, Grade, Classroom; teachers: LastName, FirstName, Classroom | What are the grade number and classroom number of each class in the list?", "sql": "SELECT DISTINCT classroom ,  grade FROM list", "example": {"db_id": "student_1", "query": "SELECT DISTINCT classroom ,  grade FROM list", "query_toks": ["SELECT", "DISTINCT", "classroom", ",", "grade", "FROM", "list"], "query_toks_no_value": ["select", "distinct", "classroom", ",", "grade", "from", "list"], "question": "What are the grade number and classroom number of each class in the list?", "question_toks": ["What", "are", "the", "grade", "number", "and", "classroom", "number", "of", "each", "class", "in", "the", "list", "?"], "guid": 1237}}
{"text": "school: School_ID, School, Location, Enrollment, Founded, Denomination, Boys_or_Girls, Day_or_Boarding, Year_Entered_Competition, School_Colors; school_details: School_ID, Nickname, Colors, League, Class, Division; school_performance: School_Id, School_Year, Class_A, Class_AA; player: Player_ID, Player, Team, Age, Position, School_ID | What is the denomination of the school the most players belong to?", "sql": "SELECT T2.Denomination FROM player AS T1 JOIN school AS T2 ON T1.School_ID  =  T2.School_ID GROUP BY T1.School_ID ORDER BY COUNT(*) DESC LIMIT 1", "example": {"db_id": "school_player", "query": "SELECT T2.Denomination FROM player AS T1 JOIN school AS T2 ON T1.School_ID  =  T2.School_ID GROUP BY T1.School_ID ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "T2.Denomination", "FROM", "player", "AS", "T1", "JOIN", "school", "AS", "T2", "ON", "T1.School_ID", "=", "T2.School_ID", "GROUP", "BY", "T1.School_ID", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "denomination", "from", "player", "as", "t1", "join", "school", "as", "t2", "on", "t1", ".", "school_id", "=", "t2", ".", "school_id", "group", "by", "t1", ".", "school_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the denomination of the school the most players belong to?", "question_toks": ["What", "is", "the", "denomination", "of", "the", "school", "the", "most", "players", "belong", "to", "?"], "guid": 1238}}
{"text": "Addresses: address_id, line_1, line_2, city, zip_postcode, state_province_county, country; People: person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password; Students: student_id, student_details; Courses: course_id, course_name, course_description, other_details; People_Addresses: person_address_id, person_id, address_id, date_from, date_to; Student_Course_Registrations: student_id, course_id, registration_date; Student_Course_Attendance: student_id, course_id, date_of_attendance; Candidates: candidate_id, candidate_details; Candidate_Assessments: candidate_id, qualification, assessment_date, asessment_outcome_code | List the id of students who attended some courses?", "sql": "SELECT student_id FROM student_course_attendance", "example": {"db_id": "student_assessment", "query": "SELECT student_id FROM student_course_attendance", "query_toks": ["SELECT", "student_id", "FROM", "student_course_attendance"], "query_toks_no_value": ["select", "student_id", "from", "student_course_attendance"], "question": "List the id of students who attended some courses?", "question_toks": ["List", "the", "id", "of", "students", "who", "attended", "some", "courses", "?"], "guid": 1239}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Dorm: dormid, dorm_name, student_capacity, gender; Dorm_amenity: amenid, amenity_name; Has_amenity: dormid, amenid; Lives_in: stuid, dormid, room_number | How many girl students who are younger than 25?", "sql": "SELECT count(*) FROM student WHERE sex  =  'F' AND age  <  25", "example": {"db_id": "dorm_1", "query": "SELECT count(*) FROM student WHERE sex  =  'F' AND age  <  25", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "student", "WHERE", "sex", "=", "'F", "'", "AND", "age", "<", "25"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "student", "where", "sex", "=", "value", "and", "age", "<", "value"], "question": "How many girl students who are younger than 25?", "question_toks": ["How", "many", "girl", "students", "who", "are", "younger", "than", "25", "?"], "guid": 1240}}
{"text": "Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Courses: course_id, course_name, course_description, other_details; Departments: department_id, department_name, department_description, other_details; Degree_Programs: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details; Sections: section_id, course_id, section_name, section_description, other_details; Semesters: semester_id, semester_name, semester_description, other_details; Students: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered; Student_Enrolment: student_enrolment_id, degree_program_id, semester_id, student_id, other_details; Student_Enrolment_Courses: student_course_id, course_id, student_enrolment_id; Transcripts: transcript_id, transcript_date, other_details | What is the first name of the student whose permanent address is different from his or her current one?", "sql": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id", "example": {"db_id": "student_transcripts_tracking", "query": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id", "query_toks": ["SELECT", "first_name", "FROM", "Students", "WHERE", "current_address_id", "!", "=", "permanent_address_id"], "query_toks_no_value": ["select", "first_name", "from", "students", "where", "current_address_id", "!", "=", "permanent_address_id"], "question": "What is the first name of the student whose permanent address is different from his or her current one?", "question_toks": ["What", "is", "the", "first", "name", "of", "the", "student", "whose", "permanent", "address", "is", "different", "from", "his", "or", "her", "current", "one", "?"], "guid": 1241}}
{"text": "Activity: actid, activity_name; Participates_in: stuid, actid; Faculty_Participates_in: FacID, actid; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building | Show the first name and last name for all the instructors.", "sql": "SELECT fname ,  lname FROM Faculty WHERE Rank  =  \"Instructor\"", "example": {"db_id": "activity_1", "query": "SELECT fname ,  lname FROM Faculty WHERE Rank  =  \"Instructor\"", "query_toks": ["SELECT", "fname", ",", "lname", "FROM", "Faculty", "WHERE", "Rank", "=", "``", "Instructor", "''"], "query_toks_no_value": ["select", "fname", ",", "lname", "from", "faculty", "where", "rank", "=", "value"], "question": "Show the first name and last name for all the instructors.", "question_toks": ["Show", "the", "first", "name", "and", "last", "name", "for", "all", "the", "instructors", "."], "guid": 1242}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Dorm: dormid, dorm_name, student_capacity, gender; Dorm_amenity: amenid, amenity_name; Has_amenity: dormid, amenid; Lives_in: stuid, dormid, room_number | What is the code of the city with the most students?", "sql": "SELECT city_code FROM student GROUP BY city_code ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "dorm_1", "query": "SELECT city_code FROM student GROUP BY city_code ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "city_code", "FROM", "student", "GROUP", "BY", "city_code", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "city_code", "from", "student", "group", "by", "city_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the code of the city with the most students?", "question_toks": ["What", "is", "the", "code", "of", "the", "city", "with", "the", "most", "students", "?"], "guid": 1243}}
{"text": "Course_Authors_and_Tutors: author_id, author_tutor_ATB, login_name, password, personal_name, middle_name, family_name, gender_mf, address_line_1; Students: student_id, date_of_registration, date_of_latest_logon, login_name, password, personal_name, middle_name, family_name; Subjects: subject_id, subject_name; Courses: course_id, author_id, subject_id, course_name, course_description; Student_Course_Enrolment: registration_id, student_id, course_id, date_of_enrolment, date_of_completion; Student_Tests_Taken: registration_id, date_test_taken, test_result | Find the personal names of students not enrolled in any course.", "sql": "SELECT personal_name FROM Students EXCEPT SELECT T1.personal_name FROM Students AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.student_id  =  T2.student_id", "example": {"db_id": "e_learning", "query": "SELECT personal_name FROM Students EXCEPT SELECT T1.personal_name FROM Students AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.student_id  =  T2.student_id", "query_toks": ["SELECT", "personal_name", "FROM", "Students", "EXCEPT", "SELECT", "T1.personal_name", "FROM", "Students", "AS", "T1", "JOIN", "Student_Course_Enrolment", "AS", "T2", "ON", "T1.student_id", "=", "T2.student_id"], "query_toks_no_value": ["select", "personal_name", "from", "students", "except", "select", "t1", ".", "personal_name", "from", "students", "as", "t1", "join", "student_course_enrolment", "as", "t2", "on", "t1", ".", "student_id", "=", "t2", ".", "student_id"], "question": "Find the personal names of students not enrolled in any course.", "question_toks": ["Find", "the", "personal", "names", "of", "students", "not", "enrolled", "in", "any", "course", "."], "guid": 1244}}
{"text": "Course_Authors_and_Tutors: author_id, author_tutor_ATB, login_name, password, personal_name, middle_name, family_name, gender_mf, address_line_1; Students: student_id, date_of_registration, date_of_latest_logon, login_name, password, personal_name, middle_name, family_name; Subjects: subject_id, subject_name; Courses: course_id, author_id, subject_id, course_name, course_description; Student_Course_Enrolment: registration_id, student_id, course_id, date_of_enrolment, date_of_completion; Student_Tests_Taken: registration_id, date_test_taken, test_result | What are the personal names and family names of the students? Sort the result in alphabetical order of the family name.", "sql": "SELECT personal_name ,  family_name FROM Students ORDER BY family_name", "example": {"db_id": "e_learning", "query": "SELECT personal_name ,  family_name FROM Students ORDER BY family_name", "query_toks": ["SELECT", "personal_name", ",", "family_name", "FROM", "Students", "ORDER", "BY", "family_name"], "query_toks_no_value": ["select", "personal_name", ",", "family_name", "from", "students", "order", "by", "family_name"], "question": "What are the personal names and family names of the students? Sort the result in alphabetical order of the family name.", "question_toks": ["What", "are", "the", "personal", "names", "and", "family", "names", "of", "the", "students", "?", "Sort", "the", "result", "in", "alphabetical", "order", "of", "the", "family", "name", "."], "guid": 1245}}
{"text": "Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Courses: course_id, course_name, course_description, other_details; Departments: department_id, department_name, department_description, other_details; Degree_Programs: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details; Sections: section_id, course_id, section_name, section_description, other_details; Semesters: semester_id, semester_name, semester_description, other_details; Students: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered; Student_Enrolment: student_enrolment_id, degree_program_id, semester_id, student_id, other_details; Student_Enrolment_Courses: student_course_id, course_id, student_enrolment_id; Transcripts: transcript_id, transcript_date, other_details | What's the name of the course with most number of enrollments?", "sql": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "student_transcripts_tracking", "query": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.course_name", "FROM", "Courses", "AS", "T1", "JOIN", "Student_Enrolment_Courses", "AS", "T2", "ON", "T1.course_id", "=", "T2.course_id", "GROUP", "BY", "T1.course_name", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "course_name", "from", "courses", "as", "t1", "join", "student_enrolment_courses", "as", "t2", "on", "t1", ".", "course_id", "=", "t2", ".", "course_id", "group", "by", "t1", ".", "course_name", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What's the name of the course with most number of enrollments?", "question_toks": ["What", "'s", "the", "name", "of", "the", "course", "with", "most", "number", "of", "enrollments", "?"], "guid": 1246}}
{"text": "School: School_id, School_name, Location, Mascot, Enrollment, IHSAA_Class, IHSAA_Football_Class, County; budget: School_id, Year, Budgeted, total_budget_percent_budgeted, Invested, total_budget_percent_invested, Budget_invested_percent; endowment: endowment_id, School_id, donator_name, amount | How many budget record has a budget amount smaller than the invested amount?", "sql": "SELECT count(*) FROM budget WHERE budgeted  <  invested", "example": {"db_id": "school_finance", "query": "SELECT count(*) FROM budget WHERE budgeted  <  invested", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "budget", "WHERE", "budgeted", "<", "invested"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "budget", "where", "budgeted", "<", "invested"], "question": "How many budget record has a budget amount smaller than the invested amount?", "question_toks": ["How", "many", "budget", "record", "has", "a", "budget", "amount", "smaller", "than", "the", "invested", "amount", "?"], "guid": 1247}}
{"text": "list: LastName, FirstName, Grade, Classroom; teachers: LastName, FirstName, Classroom | Find the name of the teacher who teaches the largest number of students.", "sql": "SELECT T2.firstname ,  T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom GROUP BY T2.firstname ,  T2.lastname ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "student_1", "query": "SELECT T2.firstname ,  T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom GROUP BY T2.firstname ,  T2.lastname ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T2.firstname", ",", "T2.lastname", "FROM", "list", "AS", "T1", "JOIN", "teachers", "AS", "T2", "ON", "T1.classroom", "=", "T2.classroom", "GROUP", "BY", "T2.firstname", ",", "T2.lastname", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "firstname", ",", "t2", ".", "lastname", "from", "list", "as", "t1", "join", "teachers", "as", "t2", "on", "t1", ".", "classroom", "=", "t2", ".", "classroom", "group", "by", "t2", ".", "firstname", ",", "t2", ".", "lastname", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Find the name of the teacher who teaches the largest number of students.", "question_toks": ["Find", "the", "name", "of", "the", "teacher", "who", "teaches", "the", "largest", "number", "of", "students", "."], "guid": 1248}}
{"text": "Activity: actid, activity_name; Participates_in: stuid, actid; Faculty_Participates_in: FacID, actid; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building | Which activity has the most faculty members participating in? Find the activity name.", "sql": "SELECT T1.activity_name FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "activity_1", "query": "SELECT T1.activity_name FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.activity_name", "FROM", "Activity", "AS", "T1", "JOIN", "Faculty_participates_in", "AS", "T2", "ON", "T1.actID", "=", "T2.actID", "GROUP", "BY", "T1.actID", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "activity_name", "from", "activity", "as", "t1", "join", "faculty_participates_in", "as", "t2", "on", "t1", ".", "actid", "=", "t2", ".", "actid", "group", "by", "t1", ".", "actid", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which activity has the most faculty members participating in? Find the activity name.", "question_toks": ["Which", "activity", "has", "the", "most", "faculty", "members", "participating", "in", "?", "Find", "the", "activity", "name", "."], "guid": 1249}}
{"text": "Activity: actid, activity_name; Participates_in: stuid, actid; Faculty_Participates_in: FacID, actid; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building | Which rank has the smallest number of faculty members?", "sql": "SELECT rank FROM Faculty GROUP BY rank ORDER BY count(*) ASC LIMIT 1", "example": {"db_id": "activity_1", "query": "SELECT rank FROM Faculty GROUP BY rank ORDER BY count(*) ASC LIMIT 1", "query_toks": ["SELECT", "rank", "FROM", "Faculty", "GROUP", "BY", "rank", "ORDER", "BY", "count", "(", "*", ")", "ASC", "LIMIT", "1"], "query_toks_no_value": ["select", "rank", "from", "faculty", "group", "by", "rank", "order", "by", "count", "(", "*", ")", "asc", "limit", "value"], "question": "Which rank has the smallest number of faculty members?", "question_toks": ["Which", "rank", "has", "the", "smallest", "number", "of", "faculty", "members", "?"], "guid": 1250}}
{"text": "school: School_ID, School, Location, Enrollment, Founded, Denomination, Boys_or_Girls, Day_or_Boarding, Year_Entered_Competition, School_Colors; school_details: School_ID, Nickname, Colors, League, Class, Division; school_performance: School_Id, School_Year, Class_A, Class_AA; player: Player_ID, Player, Team, Age, Position, School_ID | For each denomination, return the denomination and the count of schools with that denomination.", "sql": "SELECT Denomination ,  COUNT(*) FROM school GROUP BY Denomination", "example": {"db_id": "school_player", "query": "SELECT Denomination ,  COUNT(*) FROM school GROUP BY Denomination", "query_toks": ["SELECT", "Denomination", ",", "COUNT", "(", "*", ")", "FROM", "school", "GROUP", "BY", "Denomination"], "query_toks_no_value": ["select", "denomination", ",", "count", "(", "*", ")", "from", "school", "group", "by", "denomination"], "question": "For each denomination, return the denomination and the count of schools with that denomination.", "question_toks": ["For", "each", "denomination", ",", "return", "the", "denomination", "and", "the", "count", "of", "schools", "with", "that", "denomination", "."], "guid": 1251}}
{"text": "school: School_ID, School, Location, Enrollment, Founded, Denomination, Boys_or_Girls, Day_or_Boarding, Year_Entered_Competition, School_Colors; school_details: School_ID, Nickname, Colors, League, Class, Division; school_performance: School_Id, School_Year, Class_A, Class_AA; player: Player_ID, Player, Team, Age, Position, School_ID | What is the list of school locations sorted in ascending order of school enrollment?", "sql": "SELECT LOCATION FROM school ORDER BY Enrollment ASC", "example": {"db_id": "school_player", "query": "SELECT LOCATION FROM school ORDER BY Enrollment ASC", "query_toks": ["SELECT", "LOCATION", "FROM", "school", "ORDER", "BY", "Enrollment", "ASC"], "query_toks_no_value": ["select", "location", "from", "school", "order", "by", "enrollment", "asc"], "question": "What is the list of school locations sorted in ascending order of school enrollment?", "question_toks": ["What", "is", "the", "list", "of", "school", "locations", "sorted", "in", "ascending", "order", "of", "school", "enrollment", "?"], "guid": 1252}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Dorm: dormid, dorm_name, student_capacity, gender; Dorm_amenity: amenid, amenity_name; Has_amenity: dormid, amenid; Lives_in: stuid, dormid, room_number | Find the total capacity of all dorms.", "sql": "SELECT sum(student_capacity) FROM dorm", "example": {"db_id": "dorm_1", "query": "SELECT sum(student_capacity) FROM dorm", "query_toks": ["SELECT", "sum", "(", "student_capacity", ")", "FROM", "dorm"], "query_toks_no_value": ["select", "sum", "(", "student_capacity", ")", "from", "dorm"], "question": "Find the total capacity of all dorms.", "question_toks": ["Find", "the", "total", "capacity", "of", "all", "dorms", "."], "guid": 1253}}
{"text": "School: School_id, School_name, Location, Mascot, Enrollment, IHSAA_Class, IHSAA_Football_Class, County; budget: School_id, Year, Budgeted, total_budget_percent_budgeted, Invested, total_budget_percent_invested, Budget_invested_percent; endowment: endowment_id, School_id, donator_name, amount | List the name, location, mascot for all schools.", "sql": "SELECT school_name ,  LOCATION ,  mascot FROM school", "example": {"db_id": "school_finance", "query": "SELECT school_name ,  LOCATION ,  mascot FROM school", "query_toks": ["SELECT", "school_name", ",", "LOCATION", ",", "mascot", "FROM", "school"], "query_toks_no_value": ["select", "school_name", ",", "location", ",", "mascot", "from", "school"], "question": "List the name, location, mascot for all schools.", "question_toks": ["List", "the", "name", ",", "location", ",", "mascot", "for", "all", "schools", "."], "guid": 1254}}
{"text": "Addresses: address_id, line_1, line_2, city, zip_postcode, state_province_county, country; People: person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password; Students: student_id, student_details; Courses: course_id, course_name, course_description, other_details; People_Addresses: person_address_id, person_id, address_id, date_from, date_to; Student_Course_Registrations: student_id, course_id, registration_date; Student_Course_Attendance: student_id, course_id, date_of_attendance; Candidates: candidate_id, candidate_details; Candidate_Assessments: candidate_id, qualification, assessment_date, asessment_outcome_code | which course has most number of registered students?", "sql": "SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "student_assessment", "query": "SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.course_name", "FROM", "courses", "AS", "T1", "JOIN", "student_course_registrations", "AS", "T2", "ON", "T1.course_id", "=", "T2.course_Id", "GROUP", "BY", "T1.course_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "course_name", "from", "courses", "as", "t1", "join", "student_course_registrations", "as", "t2", "on", "t1", ".", "course_id", "=", "t2", ".", "course_id", "group", "by", "t1", ".", "course_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "which course has most number of registered students?", "question_toks": ["which", "course", "has", "most", "number", "of", "registered", "students", "?"], "guid": 1255}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Dorm: dormid, dorm_name, student_capacity, gender; Dorm_amenity: amenid, amenity_name; Has_amenity: dormid, amenid; Lives_in: stuid, dormid, room_number | How many students are there in each major?", "sql": "SELECT count(*) ,  major FROM student GROUP BY major", "example": {"db_id": "dorm_1", "query": "SELECT count(*) ,  major FROM student GROUP BY major", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "major", "FROM", "student", "GROUP", "BY", "major"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "major", "from", "student", "group", "by", "major"], "question": "How many students are there in each major?", "question_toks": ["How", "many", "students", "are", "there", "in", "each", "major", "?"], "guid": 1256}}
{"text": "Addresses: address_id, line_1, line_2, city, zip_postcode, state_province_county, country; People: person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password; Students: student_id, student_details; Courses: course_id, course_name, course_description, other_details; People_Addresses: person_address_id, person_id, address_id, date_from, date_to; Student_Course_Registrations: student_id, course_id, registration_date; Student_Course_Attendance: student_id, course_id, date_of_attendance; Candidates: candidate_id, candidate_details; Candidate_Assessments: candidate_id, qualification, assessment_date, asessment_outcome_code | What are the ids of the candidates that have an outcome code of Pass?", "sql": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"", "example": {"db_id": "student_assessment", "query": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"", "query_toks": ["SELECT", "candidate_id", "FROM", "candidate_assessments", "WHERE", "asessment_outcome_code", "=", "``", "Pass", "''"], "query_toks_no_value": ["select", "candidate_id", "from", "candidate_assessments", "where", "asessment_outcome_code", "=", "value"], "question": "What are the ids of the candidates that have an outcome code of Pass?", "question_toks": ["What", "are", "the", "ids", "of", "the", "candidates", "that", "have", "an", "outcome", "code", "of", "Pass", "?"], "guid": 1257}}
{"text": "driver: Driver_ID, Name, Party, Home_city, Age; school: School_ID, Grade, School, Location, Type; school_bus: School_ID, Driver_ID, Years_Working, If_full_time | How many drivers are there?", "sql": "SELECT count(*) FROM driver", "example": {"db_id": "school_bus", "query": "SELECT count(*) FROM driver", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "driver"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "driver"], "question": "How many drivers are there?", "question_toks": ["How", "many", "drivers", "are", "there", "?"], "guid": 1258}}
{"text": "Course_Authors_and_Tutors: author_id, author_tutor_ATB, login_name, password, personal_name, middle_name, family_name, gender_mf, address_line_1; Students: student_id, date_of_registration, date_of_latest_logon, login_name, password, personal_name, middle_name, family_name; Subjects: subject_id, subject_name; Courses: course_id, author_id, subject_id, course_name, course_description; Student_Course_Enrolment: registration_id, student_id, course_id, date_of_enrolment, date_of_completion; Student_Tests_Taken: registration_id, date_test_taken, test_result | What are the student IDs and middle names of the students enrolled in at most two courses?", "sql": "SELECT T1.student_id ,  T2.middle_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING COUNT(*)  <=  2", "example": {"db_id": "e_learning", "query": "SELECT T1.student_id ,  T2.middle_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING COUNT(*)  <=  2", "query_toks": ["SELECT", "T1.student_id", ",", "T2.middle_name", "FROM", "Student_Course_Enrolment", "AS", "T1", "JOIN", "Students", "AS", "T2", "ON", "T1.student_id", "=", "T2.student_id", "GROUP", "BY", "T1.student_id", "HAVING", "COUNT", "(", "*", ")", "<", "=", "2"], "query_toks_no_value": ["select", "t1", ".", "student_id", ",", "t2", ".", "middle_name", "from", "student_course_enrolment", "as", "t1", "join", "students", "as", "t2", "on", "t1", ".", "student_id", "=", "t2", ".", "student_id", "group", "by", "t1", ".", "student_id", "having", "count", "(", "*", ")", "<", "=", "value"], "question": "What are the student IDs and middle names of the students enrolled in at most two courses?", "question_toks": ["What", "are", "the", "student", "IDs", "and", "middle", "names", "of", "the", "students", "enrolled", "in", "at", "most", "two", "courses", "?"], "guid": 1259}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Dorm: dormid, dorm_name, student_capacity, gender; Dorm_amenity: amenid, amenity_name; Has_amenity: dormid, amenid; Lives_in: stuid, dormid, room_number | Find the last name of students who is either female (sex is F) and living in the city of code BAL or male (sex is M) and in age of below 20.", "sql": "SELECT lname FROM student WHERE sex  =  'F' AND city_code  =  'BAL' UNION SELECT lname FROM student WHERE sex  =  'M' AND age  <  20", "example": {"db_id": "dorm_1", "query": "SELECT lname FROM student WHERE sex  =  'F' AND city_code  =  'BAL' UNION SELECT lname FROM student WHERE sex  =  'M' AND age  <  20", "query_toks": ["SELECT", "lname", "FROM", "student", "WHERE", "sex", "=", "'F", "'", "AND", "city_code", "=", "'BAL", "'", "UNION", "SELECT", "lname", "FROM", "student", "WHERE", "sex", "=", "'M", "'", "AND", "age", "<", "20"], "query_toks_no_value": ["select", "lname", "from", "student", "where", "sex", "=", "value", "and", "city_code", "=", "value", "union", "select", "lname", "from", "student", "where", "sex", "=", "value", "and", "age", "<", "value"], "question": "Find the last name of students who is either female (sex is F) and living in the city of code BAL or male (sex is M) and in age of below 20.", "question_toks": ["Find", "the", "last", "name", "of", "students", "who", "is", "either", "female", "(", "sex", "is", "F", ")", "and", "living", "in", "the", "city", "of", "code", "BAL", "or", "male", "(", "sex", "is", "M", ")", "and", "in", "age", "of", "below", "20", "."], "guid": 1260}}
{"text": "Activity: actid, activity_name; Participates_in: stuid, actid; Faculty_Participates_in: FacID, actid; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building | What are the first name, last name, and phone number of all the female faculty members?", "sql": "SELECT Fname ,  Lname ,  phone FROM Faculty WHERE Sex  =  'F'", "example": {"db_id": "activity_1", "query": "SELECT Fname ,  Lname ,  phone FROM Faculty WHERE Sex  =  'F'", "query_toks": ["SELECT", "Fname", ",", "Lname", ",", "phone", "FROM", "Faculty", "WHERE", "Sex", "=", "'F", "'"], "query_toks_no_value": ["select", "fname", ",", "lname", ",", "phone", "from", "faculty", "where", "sex", "=", "value"], "question": "What are the first name, last name, and phone number of all the female faculty members?", "question_toks": ["What", "are", "the", "first", "name", ",", "last", "name", ",", "and", "phone", "number", "of", "all", "the", "female", "faculty", "members", "?"], "guid": 1261}}
{"text": "list: LastName, FirstName, Grade, Classroom; teachers: LastName, FirstName, Classroom | How many students does LORIA ONDERSMA teaches?", "sql": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"LORIA\" AND T2.lastname  =  \"ONDERSMA\"", "example": {"db_id": "student_1", "query": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"LORIA\" AND T2.lastname  =  \"ONDERSMA\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "list", "AS", "T1", "JOIN", "teachers", "AS", "T2", "ON", "T1.classroom", "=", "T2.classroom", "WHERE", "T2.firstname", "=", "``", "LORIA", "''", "AND", "T2.lastname", "=", "``", "ONDERSMA", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "list", "as", "t1", "join", "teachers", "as", "t2", "on", "t1", ".", "classroom", "=", "t2", ".", "classroom", "where", "t2", ".", "firstname", "=", "value", "and", "t2", ".", "lastname", "=", "value"], "question": "How many students does LORIA ONDERSMA teaches?", "question_toks": ["How", "many", "students", "does", "LORIA", "ONDERSMA", "teaches", "?"], "guid": 1262}}
{"text": "Course_Authors_and_Tutors: author_id, author_tutor_ATB, login_name, password, personal_name, middle_name, family_name, gender_mf, address_line_1; Students: student_id, date_of_registration, date_of_latest_logon, login_name, password, personal_name, middle_name, family_name; Subjects: subject_id, subject_name; Courses: course_id, author_id, subject_id, course_name, course_description; Student_Course_Enrolment: registration_id, student_id, course_id, date_of_enrolment, date_of_completion; Student_Tests_Taken: registration_id, date_test_taken, test_result | List all the information about course authors and tutors in alphabetical order of the personal name.", "sql": "SELECT * FROM Course_Authors_and_Tutors ORDER BY personal_name", "example": {"db_id": "e_learning", "query": "SELECT * FROM Course_Authors_and_Tutors ORDER BY personal_name", "query_toks": ["SELECT", "*", "FROM", "Course_Authors_and_Tutors", "ORDER", "BY", "personal_name"], "query_toks_no_value": ["select", "*", "from", "course_authors_and_tutors", "order", "by", "personal_name"], "question": "List all the information about course authors and tutors in alphabetical order of the personal name.", "question_toks": ["List", "all", "the", "information", "about", "course", "authors", "and", "tutors", "in", "alphabetical", "order", "of", "the", "personal", "name", "."], "guid": 1263}}
{"text": "school: School_ID, School, Location, Enrollment, Founded, Denomination, Boys_or_Girls, Day_or_Boarding, Year_Entered_Competition, School_Colors; school_details: School_ID, Nickname, Colors, League, Class, Division; school_performance: School_Id, School_Year, Class_A, Class_AA; player: Player_ID, Player, Team, Age, Position, School_ID | What are the denominations used by both schools founded before 1890 and schools founded  after 1900?", "sql": "SELECT Denomination FROM school WHERE Founded  <  1890 INTERSECT SELECT Denomination FROM school WHERE Founded  >  1900", "example": {"db_id": "school_player", "query": "SELECT Denomination FROM school WHERE Founded  <  1890 INTERSECT SELECT Denomination FROM school WHERE Founded  >  1900", "query_toks": ["SELECT", "Denomination", "FROM", "school", "WHERE", "Founded", "<", "1890", "INTERSECT", "SELECT", "Denomination", "FROM", "school", "WHERE", "Founded", ">", "1900"], "query_toks_no_value": ["select", "denomination", "from", "school", "where", "founded", "<", "value", "intersect", "select", "denomination", "from", "school", "where", "founded", ">", "value"], "question": "What are the denominations used by both schools founded before 1890 and schools founded  after 1900?", "question_toks": ["What", "are", "the", "denominations", "used", "by", "both", "schools", "founded", "before", "1890", "and", "schools", "founded", "after", "1900", "?"], "guid": 1264}}
{"text": "course: Course_ID, Staring_Date, Course; teacher: Teacher_ID, Name, Age, Hometown; course_arrange: Course_ID, Teacher_ID, Grade | What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher?", "sql": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name", "example": {"db_id": "course_teach", "query": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name", "query_toks": ["SELECT", "T3.Name", ",", "T2.Course", "FROM", "course_arrange", "AS", "T1", "JOIN", "course", "AS", "T2", "ON", "T1.Course_ID", "=", "T2.Course_ID", "JOIN", "teacher", "AS", "T3", "ON", "T1.Teacher_ID", "=", "T3.Teacher_ID", "ORDER", "BY", "T3.Name"], "query_toks_no_value": ["select", "t3", ".", "name", ",", "t2", ".", "course", "from", "course_arrange", "as", "t1", "join", "course", "as", "t2", "on", "t1", ".", "course_id", "=", "t2", ".", "course_id", "join", "teacher", "as", "t3", "on", "t1", ".", "teacher_id", "=", "t3", ".", "teacher_id", "order", "by", "t3", ".", "name"], "question": "What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher?", "question_toks": ["What", "are", "the", "names", "of", "the", "teachers", "and", "the", "courses", "they", "teach", "in", "ascending", "alphabetical", "order", "by", "the", "name", "of", "the", "teacher", "?"], "guid": 1265}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Dorm: dormid, dorm_name, student_capacity, gender; Dorm_amenity: amenid, amenity_name; Has_amenity: dormid, amenid; Lives_in: stuid, dormid, room_number | Find the name of amenities Smith Hall dorm have.", "sql": "SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T1.dorm_name  =  'Smith Hall'", "example": {"db_id": "dorm_1", "query": "SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T1.dorm_name  =  'Smith Hall'", "query_toks": ["SELECT", "T3.amenity_name", "FROM", "dorm", "AS", "T1", "JOIN", "has_amenity", "AS", "T2", "ON", "T1.dormid", "=", "T2.dormid", "JOIN", "dorm_amenity", "AS", "T3", "ON", "T2.amenid", "=", "T3.amenid", "WHERE", "T1.dorm_name", "=", "'Smith", "Hall", "'"], "query_toks_no_value": ["select", "t3", ".", "amenity_name", "from", "dorm", "as", "t1", "join", "has_amenity", "as", "t2", "on", "t1", ".", "dormid", "=", "t2", ".", "dormid", "join", "dorm_amenity", "as", "t3", "on", "t2", ".", "amenid", "=", "t3", ".", "amenid", "where", "t1", ".", "dorm_name", "=", "value"], "question": "Find the name of amenities Smith Hall dorm have.", "question_toks": ["Find", "the", "name", "of", "amenities", "Smith", "Hall", "dorm", "have", "."], "guid": 1266}}
{"text": "Course_Authors_and_Tutors: author_id, author_tutor_ATB, login_name, password, personal_name, middle_name, family_name, gender_mf, address_line_1; Students: student_id, date_of_registration, date_of_latest_logon, login_name, password, personal_name, middle_name, family_name; Subjects: subject_id, subject_name; Courses: course_id, author_id, subject_id, course_name, course_description; Student_Course_Enrolment: registration_id, student_id, course_id, date_of_enrolment, date_of_completion; Student_Tests_Taken: registration_id, date_test_taken, test_result | What are the names and descriptions of the all courses under the \"Computer Science\" subject?", "sql": "SELECT T1.course_name ,  T1.course_description FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id  =  T2.subject_id WHERE T2.subject_name  =  \"Computer Science\"", "example": {"db_id": "e_learning", "query": "SELECT T1.course_name ,  T1.course_description FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id  =  T2.subject_id WHERE T2.subject_name  =  \"Computer Science\"", "query_toks": ["SELECT", "T1.course_name", ",", "T1.course_description", "FROM", "Courses", "AS", "T1", "JOIN", "Subjects", "AS", "T2", "ON", "T1.subject_id", "=", "T2.subject_id", "WHERE", "T2.subject_name", "=", "``", "Computer", "Science", "''"], "query_toks_no_value": ["select", "t1", ".", "course_name", ",", "t1", ".", "course_description", "from", "courses", "as", "t1", "join", "subjects", "as", "t2", "on", "t1", ".", "subject_id", "=", "t2", ".", "subject_id", "where", "t2", ".", "subject_name", "=", "value"], "question": "What are the names and descriptions of the all courses under the \"Computer Science\" subject?", "question_toks": ["What", "are", "the", "names", "and", "descriptions", "of", "the", "all", "courses", "under", "the", "``", "Computer", "Science", "''", "subject", "?"], "guid": 1267}}
{"text": "Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Courses: course_id, course_name, course_description, other_details; Departments: department_id, department_name, department_description, other_details; Degree_Programs: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details; Sections: section_id, course_id, section_name, section_description, other_details; Semesters: semester_id, semester_name, semester_description, other_details; Students: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered; Student_Enrolment: student_enrolment_id, degree_program_id, semester_id, student_id, other_details; Student_Enrolment_Courses: student_course_id, course_id, student_enrolment_id; Transcripts: transcript_id, transcript_date, other_details | For each semester, what is the name and id of the one with the most students registered?", "sql": "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "student_transcripts_tracking", "query": "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.semester_name", ",", "T1.semester_id", "FROM", "Semesters", "AS", "T1", "JOIN", "Student_Enrolment", "AS", "T2", "ON", "T1.semester_id", "=", "T2.semester_id", "GROUP", "BY", "T1.semester_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "semester_name", ",", "t1", ".", "semester_id", "from", "semesters", "as", "t1", "join", "student_enrolment", "as", "t2", "on", "t1", ".", "semester_id", "=", "t2", ".", "semester_id", "group", "by", "t1", ".", "semester_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "For each semester, what is the name and id of the one with the most students registered?", "question_toks": ["For", "each", "semester", ",", "what", "is", "the", "name", "and", "id", "of", "the", "one", "with", "the", "most", "students", "registered", "?"], "guid": 1268}}
{"text": "Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Courses: course_id, course_name, course_description, other_details; Departments: department_id, department_name, department_description, other_details; Degree_Programs: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details; Sections: section_id, course_id, section_name, section_description, other_details; Semesters: semester_id, semester_name, semester_description, other_details; Students: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered; Student_Enrolment: student_enrolment_id, degree_program_id, semester_id, student_id, other_details; Student_Enrolment_Courses: student_course_id, course_id, student_enrolment_id; Transcripts: transcript_id, transcript_date, other_details | What is the mobile phone number of the student named Timmothy Ward ?", "sql": "select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward'", "example": {"db_id": "student_transcripts_tracking", "query": "select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward'", "query_toks": ["select", "cell_mobile_number", "from", "students", "where", "first_name", "=", "\"timmothy\"", "and", "last_name", "=", "\"ward\""], "query_toks_no_value": ["select", "cell_mobile_number", "from", "students", "where", "first_name", "=", "value", "and", "last_name", "=", "value"], "question": "What is the mobile phone number of the student named Timmothy Ward ?", "question_toks": ["What", "is", "the", "mobile", "phone", "number", "of", "the", "student", "named", "Timmothy", "Ward", "?"], "guid": 1269}}
{"text": "list: LastName, FirstName, Grade, Classroom; teachers: LastName, FirstName, Classroom | Show me the classrooms grade 5 is using.", "sql": "SELECT DISTINCT classroom FROM list WHERE grade  =  5", "example": {"db_id": "student_1", "query": "SELECT DISTINCT classroom FROM list WHERE grade  =  5", "query_toks": ["SELECT", "DISTINCT", "classroom", "FROM", "list", "WHERE", "grade", "=", "5"], "query_toks_no_value": ["select", "distinct", "classroom", "from", "list", "where", "grade", "=", "value"], "question": "Show me the classrooms grade 5 is using.", "question_toks": ["Show", "me", "the", "classrooms", "grade", "5", "is", "using", "."], "guid": 1270}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Dorm: dormid, dorm_name, student_capacity, gender; Dorm_amenity: amenid, amenity_name; Has_amenity: dormid, amenid; Lives_in: stuid, dormid, room_number | Find the average and total capacity of dorms for the students with gender X.", "sql": "SELECT avg(student_capacity) ,  sum(student_capacity) FROM dorm WHERE gender  =  'X'", "example": {"db_id": "dorm_1", "query": "SELECT avg(student_capacity) ,  sum(student_capacity) FROM dorm WHERE gender  =  'X'", "query_toks": ["SELECT", "avg", "(", "student_capacity", ")", ",", "sum", "(", "student_capacity", ")", "FROM", "dorm", "WHERE", "gender", "=", "'X", "'"], "query_toks_no_value": ["select", "avg", "(", "student_capacity", ")", ",", "sum", "(", "student_capacity", ")", "from", "dorm", "where", "gender", "=", "value"], "question": "Find the average and total capacity of dorms for the students with gender X.", "question_toks": ["Find", "the", "average", "and", "total", "capacity", "of", "dorms", "for", "the", "students", "with", "gender", "X", "."], "guid": 1271}}
{"text": "course: Course_ID, Staring_Date, Course; teacher: Teacher_ID, Name, Age, Hometown; course_arrange: Course_ID, Teacher_ID, Grade | What is the name of each teacher and what course they teach?", "sql": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID", "example": {"db_id": "course_teach", "query": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID", "query_toks": ["SELECT", "T3.Name", ",", "T2.Course", "FROM", "course_arrange", "AS", "T1", "JOIN", "course", "AS", "T2", "ON", "T1.Course_ID", "=", "T2.Course_ID", "JOIN", "teacher", "AS", "T3", "ON", "T1.Teacher_ID", "=", "T3.Teacher_ID"], "query_toks_no_value": ["select", "t3", ".", "name", ",", "t2", ".", "course", "from", "course_arrange", "as", "t1", "join", "course", "as", "t2", "on", "t1", ".", "course_id", "=", "t2", ".", "course_id", "join", "teacher", "as", "t3", "on", "t1", ".", "teacher_id", "=", "t3", ".", "teacher_id"], "question": "What is the name of each teacher and what course they teach?", "question_toks": ["What", "is", "the", "name", "of", "each", "teacher", "and", "what", "course", "they", "teach", "?"], "guid": 1272}}
{"text": "Course_Authors_and_Tutors: author_id, author_tutor_ATB, login_name, password, personal_name, middle_name, family_name, gender_mf, address_line_1; Students: student_id, date_of_registration, date_of_latest_logon, login_name, password, personal_name, middle_name, family_name; Subjects: subject_id, subject_name; Courses: course_id, author_id, subject_id, course_name, course_description; Student_Course_Enrolment: registration_id, student_id, course_id, date_of_enrolment, date_of_completion; Student_Tests_Taken: registration_id, date_test_taken, test_result | Find the common personal name of course authors and students.", "sql": "SELECT personal_name FROM Course_Authors_and_Tutors INTERSECT SELECT personal_name FROM Students", "example": {"db_id": "e_learning", "query": "SELECT personal_name FROM Course_Authors_and_Tutors INTERSECT SELECT personal_name FROM Students", "query_toks": ["SELECT", "personal_name", "FROM", "Course_Authors_and_Tutors", "INTERSECT", "SELECT", "personal_name", "FROM", "Students"], "query_toks_no_value": ["select", "personal_name", "from", "course_authors_and_tutors", "intersect", "select", "personal_name", "from", "students"], "question": "Find the common personal name of course authors and students.", "question_toks": ["Find", "the", "common", "personal", "name", "of", "course", "authors", "and", "students", "."], "guid": 1273}}
{"text": "list: LastName, FirstName, Grade, Classroom; teachers: LastName, FirstName, Classroom | Find the last names of all the teachers that teach GELL TAMI.", "sql": "SELECT T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"GELL\" AND T1.lastname  =  \"TAMI\"", "example": {"db_id": "student_1", "query": "SELECT T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"GELL\" AND T1.lastname  =  \"TAMI\"", "query_toks": ["SELECT", "T2.lastname", "FROM", "list", "AS", "T1", "JOIN", "teachers", "AS", "T2", "ON", "T1.classroom", "=", "T2.classroom", "WHERE", "T1.firstname", "=", "``", "GELL", "''", "AND", "T1.lastname", "=", "``", "TAMI", "''"], "query_toks_no_value": ["select", "t2", ".", "lastname", "from", "list", "as", "t1", "join", "teachers", "as", "t2", "on", "t1", ".", "classroom", "=", "t2", ".", "classroom", "where", "t1", ".", "firstname", "=", "value", "and", "t1", ".", "lastname", "=", "value"], "question": "Find the last names of all the teachers that teach GELL TAMI.", "question_toks": ["Find", "the", "last", "names", "of", "all", "the", "teachers", "that", "teach", "GELL", "TAMI", "."], "guid": 1274}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Dorm: dormid, dorm_name, student_capacity, gender; Dorm_amenity: amenid, amenity_name; Has_amenity: dormid, amenid; Lives_in: stuid, dormid, room_number | How many students are older than average for each gender?", "sql": "SELECT count(*) ,  sex FROM student WHERE age  >  (SELECT avg(age) FROM student) GROUP BY sex", "example": {"db_id": "dorm_1", "query": "SELECT count(*) ,  sex FROM student WHERE age  >  (SELECT avg(age) FROM student) GROUP BY sex", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "sex", "FROM", "student", "WHERE", "age", ">", "(", "SELECT", "avg", "(", "age", ")", "FROM", "student", ")", "GROUP", "BY", "sex"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "sex", "from", "student", "where", "age", ">", "(", "select", "avg", "(", "age", ")", "from", "student", ")", "group", "by", "sex"], "question": "How many students are older than average for each gender?", "question_toks": ["How", "many", "students", "are", "older", "than", "average", "for", "each", "gender", "?"], "guid": 1275}}
{"text": "school: School_ID, School, Location, Enrollment, Founded, Denomination, Boys_or_Girls, Day_or_Boarding, Year_Entered_Competition, School_Colors; school_details: School_ID, Nickname, Colors, League, Class, Division; school_performance: School_Id, School_Year, Class_A, Class_AA; player: Player_ID, Player, Team, Age, Position, School_ID | List the locations of schools that do not have any player.", "sql": "SELECT LOCATION FROM school WHERE School_ID NOT IN (SELECT School_ID FROM Player)", "example": {"db_id": "school_player", "query": "SELECT LOCATION FROM school WHERE School_ID NOT IN (SELECT School_ID FROM Player)", "query_toks": ["SELECT", "LOCATION", "FROM", "school", "WHERE", "School_ID", "NOT", "IN", "(", "SELECT", "School_ID", "FROM", "Player", ")"], "query_toks_no_value": ["select", "location", "from", "school", "where", "school_id", "not", "in", "(", "select", "school_id", "from", "player", ")"], "question": "List the locations of schools that do not have any player.", "question_toks": ["List", "the", "locations", "of", "schools", "that", "do", "not", "have", "any", "player", "."], "guid": 1276}}
{"text": "Course_Authors_and_Tutors: author_id, author_tutor_ATB, login_name, password, personal_name, middle_name, family_name, gender_mf, address_line_1; Students: student_id, date_of_registration, date_of_latest_logon, login_name, password, personal_name, middle_name, family_name; Subjects: subject_id, subject_name; Courses: course_id, author_id, subject_id, course_name, course_description; Student_Course_Enrolment: registration_id, student_id, course_id, date_of_enrolment, date_of_completion; Student_Tests_Taken: registration_id, date_test_taken, test_result | Find the personal name, family name, and author ID of the course author that teaches the most courses.", "sql": "SELECT T1.personal_name ,  T1.family_name ,  T2.author_id FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id GROUP BY T2.author_id ORDER BY COUNT(*) DESC LIMIT 1", "example": {"db_id": "e_learning", "query": "SELECT T1.personal_name ,  T1.family_name ,  T2.author_id FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id GROUP BY T2.author_id ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.personal_name", ",", "T1.family_name", ",", "T2.author_id", "FROM", "Course_Authors_and_Tutors", "AS", "T1", "JOIN", "Courses", "AS", "T2", "ON", "T1.author_id", "=", "T2.author_id", "GROUP", "BY", "T2.author_id", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "personal_name", ",", "t1", ".", "family_name", ",", "t2", ".", "author_id", "from", "course_authors_and_tutors", "as", "t1", "join", "courses", "as", "t2", "on", "t1", ".", "author_id", "=", "t2", ".", "author_id", "group", "by", "t2", ".", "author_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Find the personal name, family name, and author ID of the course author that teaches the most courses.", "question_toks": ["Find", "the", "personal", "name", ",", "family", "name", ",", "and", "author", "ID", "of", "the", "course", "author", "that", "teaches", "the", "most", "courses", "."], "guid": 1277}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Dorm: dormid, dorm_name, student_capacity, gender; Dorm_amenity: amenid, amenity_name; Has_amenity: dormid, amenid; Lives_in: stuid, dormid, room_number | Find the number of dorms that have some amenity.", "sql": "SELECT count(DISTINCT dormid) FROM has_amenity", "example": {"db_id": "dorm_1", "query": "SELECT count(DISTINCT dormid) FROM has_amenity", "query_toks": ["SELECT", "count", "(", "DISTINCT", "dormid", ")", "FROM", "has_amenity"], "query_toks_no_value": ["select", "count", "(", "distinct", "dormid", ")", "from", "has_amenity"], "question": "Find the number of dorms that have some amenity.", "question_toks": ["Find", "the", "number", "of", "dorms", "that", "have", "some", "amenity", "."], "guid": 1278}}
{"text": "course: Course_ID, Staring_Date, Course; teacher: Teacher_ID, Name, Age, Hometown; course_arrange: Course_ID, Teacher_ID, Grade | For each hometown, how many teachers are there?", "sql": "SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown", "example": {"db_id": "course_teach", "query": "SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown", "query_toks": ["SELECT", "Hometown", ",", "COUNT", "(", "*", ")", "FROM", "teacher", "GROUP", "BY", "Hometown"], "query_toks_no_value": ["select", "hometown", ",", "count", "(", "*", ")", "from", "teacher", "group", "by", "hometown"], "question": "For each hometown, how many teachers are there?", "question_toks": ["For", "each", "hometown", ",", "how", "many", "teachers", "are", "there", "?"], "guid": 1279}}
{"text": "Course_Authors_and_Tutors: author_id, author_tutor_ATB, login_name, password, personal_name, middle_name, family_name, gender_mf, address_line_1; Students: student_id, date_of_registration, date_of_latest_logon, login_name, password, personal_name, middle_name, family_name; Subjects: subject_id, subject_name; Courses: course_id, author_id, subject_id, course_name, course_description; Student_Course_Enrolment: registration_id, student_id, course_id, date_of_enrolment, date_of_completion; Student_Tests_Taken: registration_id, date_test_taken, test_result | Find the enrollment date for all the tests that have \"Pass\" result.", "sql": "SELECT T1.date_of_enrolment FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id  =  T2.registration_id WHERE T2.test_result  =  \"Pass\"", "example": {"db_id": "e_learning", "query": "SELECT T1.date_of_enrolment FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id  =  T2.registration_id WHERE T2.test_result  =  \"Pass\"", "query_toks": ["SELECT", "T1.date_of_enrolment", "FROM", "Student_Course_Enrolment", "AS", "T1", "JOIN", "Student_Tests_Taken", "AS", "T2", "ON", "T1.registration_id", "=", "T2.registration_id", "WHERE", "T2.test_result", "=", "``", "Pass", "''"], "query_toks_no_value": ["select", "t1", ".", "date_of_enrolment", "from", "student_course_enrolment", "as", "t1", "join", "student_tests_taken", "as", "t2", "on", "t1", ".", "registration_id", "=", "t2", ".", "registration_id", "where", "t2", ".", "test_result", "=", "value"], "question": "Find the enrollment date for all the tests that have \"Pass\" result.", "question_toks": ["Find", "the", "enrollment", "date", "for", "all", "the", "tests", "that", "have", "``", "Pass", "''", "result", "."], "guid": 1280}}
{"text": "Addresses: address_id, line_1, line_2, city, zip_postcode, state_province_county, country; People: person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password; Students: student_id, student_details; Courses: course_id, course_name, course_description, other_details; People_Addresses: person_address_id, person_id, address_id, date_from, date_to; Student_Course_Registrations: student_id, course_id, registration_date; Student_Course_Attendance: student_id, course_id, date_of_attendance; Candidates: candidate_id, candidate_details; Candidate_Assessments: candidate_id, qualification, assessment_date, asessment_outcome_code | List the id of students who registered course statistics in the order of registration date.", "sql": "SELECT T2.student_id FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"statistics\" ORDER BY T2.registration_date", "example": {"db_id": "student_assessment", "query": "SELECT T2.student_id FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"statistics\" ORDER BY T2.registration_date", "query_toks": ["SELECT", "T2.student_id", "FROM", "courses", "AS", "T1", "JOIN", "student_course_registrations", "AS", "T2", "ON", "T1.course_id", "=", "T2.course_id", "WHERE", "T1.course_name", "=", "``", "statistics", "''", "ORDER", "BY", "T2.registration_date"], "query_toks_no_value": ["select", "t2", ".", "student_id", "from", "courses", "as", "t1", "join", "student_course_registrations", "as", "t2", "on", "t1", ".", "course_id", "=", "t2", ".", "course_id", "where", "t1", ".", "course_name", "=", "value", "order", "by", "t2", ".", "registration_date"], "question": "List the id of students who registered course statistics in the order of registration date.", "question_toks": ["List", "the", "id", "of", "students", "who", "registered", "course", "statistics", "in", "the", "order", "of", "registration", "date", "."], "guid": 1281}}
{"text": "Addresses: address_id, line_1, line_2, city, zip_postcode, state_province_county, country; People: person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password; Students: student_id, student_details; Courses: course_id, course_name, course_description, other_details; People_Addresses: person_address_id, person_id, address_id, date_from, date_to; Student_Course_Registrations: student_id, course_id, registration_date; Student_Course_Attendance: student_id, course_id, date_of_attendance; Candidates: candidate_id, candidate_details; Candidate_Assessments: candidate_id, qualification, assessment_date, asessment_outcome_code | What are all details of the students who registered but did not attend any course?", "sql": "SELECT * FROM student_course_registrations WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)", "example": {"db_id": "student_assessment", "query": "SELECT * FROM student_course_registrations WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)", "query_toks": ["SELECT", "*", "FROM", "student_course_registrations", "WHERE", "student_id", "NOT", "IN", "(", "SELECT", "student_id", "FROM", "student_course_attendance", ")"], "query_toks_no_value": ["select", "*", "from", "student_course_registrations", "where", "student_id", "not", "in", "(", "select", "student_id", "from", "student_course_attendance", ")"], "question": "What are all details of the students who registered but did not attend any course?", "question_toks": ["What", "are", "all", "details", "of", "the", "students", "who", "registered", "but", "did", "not", "attend", "any", "course", "?"], "guid": 1282}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Dorm: dormid, dorm_name, student_capacity, gender; Dorm_amenity: amenid, amenity_name; Has_amenity: dormid, amenid; Lives_in: stuid, dormid, room_number | How many different genders are there in the dorms?", "sql": "SELECT count(DISTINCT gender) FROM dorm", "example": {"db_id": "dorm_1", "query": "SELECT count(DISTINCT gender) FROM dorm", "query_toks": ["SELECT", "count", "(", "DISTINCT", "gender", ")", "FROM", "dorm"], "query_toks_no_value": ["select", "count", "(", "distinct", "gender", ")", "from", "dorm"], "question": "How many different genders are there in the dorms?", "question_toks": ["How", "many", "different", "genders", "are", "there", "in", "the", "dorms", "?"], "guid": 1283}}
{"text": "Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Courses: course_id, course_name, course_description, other_details; Departments: department_id, department_name, department_description, other_details; Degree_Programs: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details; Sections: section_id, course_id, section_name, section_description, other_details; Semesters: semester_id, semester_name, semester_description, other_details; Students: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered; Student_Enrolment: student_enrolment_id, degree_program_id, semester_id, student_id, other_details; Student_Enrolment_Courses: student_course_id, course_id, student_enrolment_id; Transcripts: transcript_id, transcript_date, other_details | What is the date and id of the transcript with at least 2 courses listed?", "sql": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2", "example": {"db_id": "student_transcripts_tracking", "query": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2", "query_toks": ["SELECT", "T2.transcript_date", ",", "T1.transcript_id", "FROM", "Transcript_Contents", "AS", "T1", "JOIN", "Transcripts", "AS", "T2", "ON", "T1.transcript_id", "=", "T2.transcript_id", "GROUP", "BY", "T1.transcript_id", "HAVING", "count", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "t2", ".", "transcript_date", ",", "t1", ".", "transcript_id", "from", "transcript_contents", "as", "t1", "join", "transcripts", "as", "t2", "on", "t1", ".", "transcript_id", "=", "t2", ".", "transcript_id", "group", "by", "t1", ".", "transcript_id", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "What is the date and id of the transcript with at least 2 courses listed?", "question_toks": ["What", "is", "the", "date", "and", "id", "of", "the", "transcript", "with", "at", "least", "2", "courses", "listed", "?"], "guid": 1284}}
{"text": "course: Course_ID, Staring_Date, Course; teacher: Teacher_ID, Name, Age, Hometown; course_arrange: Course_ID, Teacher_ID, Grade | What are the age and hometown of teachers?", "sql": "SELECT Age ,  Hometown FROM teacher", "example": {"db_id": "course_teach", "query": "SELECT Age ,  Hometown FROM teacher", "query_toks": ["SELECT", "Age", ",", "Hometown", "FROM", "teacher"], "query_toks_no_value": ["select", "age", ",", "hometown", "from", "teacher"], "question": "What are the age and hometown of teachers?", "question_toks": ["What", "are", "the", "age", "and", "hometown", "of", "teachers", "?"], "guid": 1285}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Dorm: dormid, dorm_name, student_capacity, gender; Dorm_amenity: amenid, amenity_name; Has_amenity: dormid, amenid; Lives_in: stuid, dormid, room_number | What are the names of all the dorms that can accomdate more than 300 students?", "sql": "SELECT dorm_name FROM dorm WHERE student_capacity  >  300", "example": {"db_id": "dorm_1", "query": "SELECT dorm_name FROM dorm WHERE student_capacity  >  300", "query_toks": ["SELECT", "dorm_name", "FROM", "dorm", "WHERE", "student_capacity", ">", "300"], "query_toks_no_value": ["select", "dorm_name", "from", "dorm", "where", "student_capacity", ">", "value"], "question": "What are the names of all the dorms that can accomdate more than 300 students?", "question_toks": ["What", "are", "the", "names", "of", "all", "the", "dorms", "that", "can", "accomdate", "more", "than", "300", "students", "?"], "guid": 1286}}
{"text": "Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Courses: course_id, course_name, course_description, other_details; Departments: department_id, department_name, department_description, other_details; Degree_Programs: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details; Sections: section_id, course_id, section_name, section_description, other_details; Semesters: semester_id, semester_name, semester_description, other_details; Students: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered; Student_Enrolment: student_enrolment_id, degree_program_id, semester_id, student_id, other_details; Student_Enrolment_Courses: student_course_id, course_id, student_enrolment_id; Transcripts: transcript_id, transcript_date, other_details | On average, when were the transcripts printed?", "sql": "SELECT avg(transcript_date) FROM Transcripts", "example": {"db_id": "student_transcripts_tracking", "query": "SELECT avg(transcript_date) FROM Transcripts", "query_toks": ["SELECT", "avg", "(", "transcript_date", ")", "FROM", "Transcripts"], "query_toks_no_value": ["select", "avg", "(", "transcript_date", ")", "from", "transcripts"], "question": "On average, when were the transcripts printed?", "question_toks": ["On", "average", ",", "when", "were", "the", "transcripts", "printed", "?"], "guid": 1287}}
{"text": "Activity: actid, activity_name; Participates_in: stuid, actid; Faculty_Participates_in: FacID, actid; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building | What is the first and last name of the faculty participating in the most activities?", "sql": "SELECT  T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID GROUP BY T1.FacID ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "activity_1", "query": "SELECT  T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID GROUP BY T1.FacID ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.fname", ",", "T1.lname", "FROM", "Faculty", "AS", "T1", "JOIN", "Faculty_participates_in", "AS", "T2", "ON", "T1.facID", "=", "T2.facID", "GROUP", "BY", "T1.FacID", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "fname", ",", "t1", ".", "lname", "from", "faculty", "as", "t1", "join", "faculty_participates_in", "as", "t2", "on", "t1", ".", "facid", "=", "t2", ".", "facid", "group", "by", "t1", ".", "facid", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the first and last name of the faculty participating in the most activities?", "question_toks": ["What", "is", "the", "first", "and", "last", "name", "of", "the", "faculty", "participating", "in", "the", "most", "activities", "?"], "guid": 1288}}
{"text": "Activity: actid, activity_name; Participates_in: stuid, actid; Faculty_Participates_in: FacID, actid; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building | Show ids for the faculty members who don't advise any student.", "sql": "SELECT FacID FROM Faculty EXCEPT SELECT advisor FROM Student", "example": {"db_id": "activity_1", "query": "SELECT FacID FROM Faculty EXCEPT SELECT advisor FROM Student", "query_toks": ["SELECT", "FacID", "FROM", "Faculty", "EXCEPT", "SELECT", "advisor", "FROM", "Student"], "query_toks_no_value": ["select", "facid", "from", "faculty", "except", "select", "advisor", "from", "student"], "question": "Show ids for the faculty members who don't advise any student.", "question_toks": ["Show", "ids", "for", "the", "faculty", "members", "who", "do", "n't", "advise", "any", "student", "."], "guid": 1289}}
{"text": "Activity: actid, activity_name; Participates_in: stuid, actid; Faculty_Participates_in: FacID, actid; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building | How many Professors are in building NEB?", "sql": "SELECT count(*) FROM Faculty WHERE Rank  =  \"Professor\" AND building  =  \"NEB\"", "example": {"db_id": "activity_1", "query": "SELECT count(*) FROM Faculty WHERE Rank  =  \"Professor\" AND building  =  \"NEB\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Faculty", "WHERE", "Rank", "=", "``", "Professor", "''", "AND", "building", "=", "``", "NEB", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "faculty", "where", "rank", "=", "value", "and", "building", "=", "value"], "question": "How many Professors are in building NEB?", "question_toks": ["How", "many", "Professors", "are", "in", "building", "NEB", "?"], "guid": 1290}}
{"text": "Course_Authors_and_Tutors: author_id, author_tutor_ATB, login_name, password, personal_name, middle_name, family_name, gender_mf, address_line_1; Students: student_id, date_of_registration, date_of_latest_logon, login_name, password, personal_name, middle_name, family_name; Subjects: subject_id, subject_name; Courses: course_id, author_id, subject_id, course_name, course_description; Student_Course_Enrolment: registration_id, student_id, course_id, date_of_enrolment, date_of_completion; Student_Tests_Taken: registration_id, date_test_taken, test_result | What are the student ID and login name of the student who are enrolled in the most courses?", "sql": "SELECT T1.student_id ,  T2.login_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY COUNT(*) DESC LIMIT 1", "example": {"db_id": "e_learning", "query": "SELECT T1.student_id ,  T2.login_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.student_id", ",", "T2.login_name", "FROM", "Student_Course_Enrolment", "AS", "T1", "JOIN", "Students", "AS", "T2", "ON", "T1.student_id", "=", "T2.student_id", "GROUP", "BY", "T1.student_id", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "student_id", ",", "t2", ".", "login_name", "from", "student_course_enrolment", "as", "t1", "join", "students", "as", "t2", "on", "t1", ".", "student_id", "=", "t2", ".", "student_id", "group", "by", "t1", ".", "student_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What are the student ID and login name of the student who are enrolled in the most courses?", "question_toks": ["What", "are", "the", "student", "ID", "and", "login", "name", "of", "the", "student", "who", "are", "enrolled", "in", "the", "most", "courses", "?"], "guid": 1291}}
{"text": "Activity: actid, activity_name; Participates_in: stuid, actid; Faculty_Participates_in: FacID, actid; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building | Show the faculty id of each faculty member, along with the number of students he or she advises.", "sql": "SELECT T1.FacID ,  count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID", "example": {"db_id": "activity_1", "query": "SELECT T1.FacID ,  count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID", "query_toks": ["SELECT", "T1.FacID", ",", "count", "(", "*", ")", "FROM", "Faculty", "AS", "T1", "JOIN", "Student", "AS", "T2", "ON", "T1.FacID", "=", "T2.advisor", "GROUP", "BY", "T1.FacID"], "query_toks_no_value": ["select", "t1", ".", "facid", ",", "count", "(", "*", ")", "from", "faculty", "as", "t1", "join", "student", "as", "t2", "on", "t1", ".", "facid", "=", "t2", ".", "advisor", "group", "by", "t1", ".", "facid"], "question": "Show the faculty id of each faculty member, along with the number of students he or she advises.", "question_toks": ["Show", "the", "faculty", "id", "of", "each", "faculty", "member", ",", "along", "with", "the", "number", "of", "students", "he", "or", "she", "advises", "."], "guid": 1292}}
{"text": "Addresses: address_id, line_1, line_2, city, zip_postcode, state_province_county, country; People: person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password; Students: student_id, student_details; Courses: course_id, course_name, course_description, other_details; People_Addresses: person_address_id, person_id, address_id, date_from, date_to; Student_Course_Registrations: student_id, course_id, registration_date; Student_Course_Attendance: student_id, course_id, date_of_attendance; Candidates: candidate_id, candidate_details; Candidate_Assessments: candidate_id, qualification, assessment_date, asessment_outcome_code | What are all info of students who registered courses but not attended courses?", "sql": "SELECT * FROM student_course_registrations WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)", "example": {"db_id": "student_assessment", "query": "SELECT * FROM student_course_registrations WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)", "query_toks": ["SELECT", "*", "FROM", "student_course_registrations", "WHERE", "student_id", "NOT", "IN", "(", "SELECT", "student_id", "FROM", "student_course_attendance", ")"], "query_toks_no_value": ["select", "*", "from", "student_course_registrations", "where", "student_id", "not", "in", "(", "select", "student_id", "from", "student_course_attendance", ")"], "question": "What are all info of students who registered courses but not attended courses?", "question_toks": ["What", "are", "all", "info", "of", "students", "who", "registered", "courses", "but", "not", "attended", "courses", "?"], "guid": 1293}}
{"text": "School: School_id, School_name, Location, Mascot, Enrollment, IHSAA_Class, IHSAA_Football_Class, County; budget: School_id, Year, Budgeted, total_budget_percent_budgeted, Invested, total_budget_percent_invested, Budget_invested_percent; endowment: endowment_id, School_id, donator_name, amount | List the amount and donor name for the largest amount of donation.", "sql": "SELECT amount ,  donator_name FROM endowment ORDER BY amount DESC LIMIT 1", "example": {"db_id": "school_finance", "query": "SELECT amount ,  donator_name FROM endowment ORDER BY amount DESC LIMIT 1", "query_toks": ["SELECT", "amount", ",", "donator_name", "FROM", "endowment", "ORDER", "BY", "amount", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "amount", ",", "donator_name", "from", "endowment", "order", "by", "amount", "desc", "limit", "value"], "question": "List the amount and donor name for the largest amount of donation.", "question_toks": ["List", "the", "amount", "and", "donor", "name", "for", "the", "largest", "amount", "of", "donation", "."], "guid": 1294}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Dorm: dormid, dorm_name, student_capacity, gender; Dorm_amenity: amenid, amenity_name; Has_amenity: dormid, amenid; Lives_in: stuid, dormid, room_number | Find the number of female students (with F sex) living in Smith Hall", "sql": "SELECT count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.dorm_name  =  'Smith Hall' AND T1.sex  =  'F'", "example": {"db_id": "dorm_1", "query": "SELECT count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.dorm_name  =  'Smith Hall' AND T1.sex  =  'F'", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "student", "AS", "T1", "JOIN", "lives_in", "AS", "T2", "ON", "T1.stuid", "=", "T2.stuid", "JOIN", "dorm", "AS", "T3", "ON", "T3.dormid", "=", "T2.dormid", "WHERE", "T3.dorm_name", "=", "'Smith", "Hall", "'", "AND", "T1.sex", "=", "'F", "'"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "student", "as", "t1", "join", "lives_in", "as", "t2", "on", "t1", ".", "stuid", "=", "t2", ".", "stuid", "join", "dorm", "as", "t3", "on", "t3", ".", "dormid", "=", "t2", ".", "dormid", "where", "t3", ".", "dorm_name", "=", "value", "and", "t1", ".", "sex", "=", "value"], "question": "Find the number of female students (with F sex) living in Smith Hall", "question_toks": ["Find", "the", "number", "of", "female", "students", "(", "with", "F", "sex", ")", "living", "in", "Smith", "Hall"], "guid": 1295}}
{"text": "school: School_ID, School, Location, Enrollment, Founded, Denomination, Boys_or_Girls, Day_or_Boarding, Year_Entered_Competition, School_Colors; school_details: School_ID, Nickname, Colors, League, Class, Division; school_performance: School_Id, School_Year, Class_A, Class_AA; player: Player_ID, Player, Team, Age, Position, School_ID | Take the average of the school enrollment.", "sql": "SELECT avg(Enrollment) FROM school", "example": {"db_id": "school_player", "query": "SELECT avg(Enrollment) FROM school", "query_toks": ["SELECT", "avg", "(", "Enrollment", ")", "FROM", "school"], "query_toks_no_value": ["select", "avg", "(", "enrollment", ")", "from", "school"], "question": "Take the average of the school enrollment.", "question_toks": ["Take", "the", "average", "of", "the", "school", "enrollment", "."], "guid": 1296}}
{"text": "course: Course_ID, Staring_Date, Course; teacher: Teacher_ID, Name, Age, Hometown; course_arrange: Course_ID, Teacher_ID, Grade | What are the names of the teachers ordered by ascending age?", "sql": "SELECT Name FROM teacher ORDER BY Age ASC", "example": {"db_id": "course_teach", "query": "SELECT Name FROM teacher ORDER BY Age ASC", "query_toks": ["SELECT", "Name", "FROM", "teacher", "ORDER", "BY", "Age", "ASC"], "query_toks_no_value": ["select", "name", "from", "teacher", "order", "by", "age", "asc"], "question": "What are the names of the teachers ordered by ascending age?", "question_toks": ["What", "are", "the", "names", "of", "the", "teachers", "ordered", "by", "ascending", "age", "?"], "guid": 1297}}
{"text": "Activity: actid, activity_name; Participates_in: stuid, actid; Faculty_Participates_in: FacID, actid; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building | Find the ids of the students who participate in Canoeing and Kayaking.", "sql": "SELECT T1.stuid FROM participates_in AS T1 JOIN activity AS T2 ON T2.actid  =  T2.actid WHERE T2.activity_name  =  'Canoeing' INTERSECT SELECT T1.stuid FROM participates_in AS T1 JOIN activity AS T2 ON T2.actid  =  T2.actid WHERE T2.activity_name  =  'Kayaking'", "example": {"db_id": "activity_1", "query": "SELECT T1.stuid FROM participates_in AS T1 JOIN activity AS T2 ON T2.actid  =  T2.actid WHERE T2.activity_name  =  'Canoeing' INTERSECT SELECT T1.stuid FROM participates_in AS T1 JOIN activity AS T2 ON T2.actid  =  T2.actid WHERE T2.activity_name  =  'Kayaking'", "query_toks": ["SELECT", "T1.stuid", "FROM", "participates_in", "AS", "T1", "JOIN", "activity", "AS", "T2", "ON", "T2.actid", "=", "T2.actid", "WHERE", "T2.activity_name", "=", "'Canoeing", "'", "INTERSECT", "SELECT", "T1.stuid", "FROM", "participates_in", "AS", "T1", "JOIN", "activity", "AS", "T2", "ON", "T2.actid", "=", "T2.actid", "WHERE", "T2.activity_name", "=", "'Kayaking", "'"], "query_toks_no_value": ["select", "t1", ".", "stuid", "from", "participates_in", "as", "t1", "join", "activity", "as", "t2", "on", "t2", ".", "actid", "=", "t2", ".", "actid", "where", "t2", ".", "activity_name", "=", "value", "intersect", "select", "t1", ".", "stuid", "from", "participates_in", "as", "t1", "join", "activity", "as", "t2", "on", "t2", ".", "actid", "=", "t2", ".", "actid", "where", "t2", ".", "activity_name", "=", "value"], "question": "Find the ids of the students who participate in Canoeing and Kayaking.", "question_toks": ["Find", "the", "ids", "of", "the", "students", "who", "participate", "in", "Canoeing", "and", "Kayaking", "."], "guid": 1298}}
{"text": "Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Courses: course_id, course_name, course_description, other_details; Departments: department_id, department_name, department_description, other_details; Degree_Programs: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details; Sections: section_id, course_id, section_name, section_description, other_details; Semesters: semester_id, semester_name, semester_description, other_details; Students: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered; Student_Enrolment: student_enrolment_id, degree_program_id, semester_id, student_id, other_details; Student_Enrolment_Courses: student_course_id, course_id, student_enrolment_id; Transcripts: transcript_id, transcript_date, other_details | List all the student details in reversed lexicographical order.", "sql": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC", "example": {"db_id": "student_transcripts_tracking", "query": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC", "query_toks": ["SELECT", "other_student_details", "FROM", "Students", "ORDER", "BY", "other_student_details", "DESC"], "query_toks_no_value": ["select", "other_student_details", "from", "students", "order", "by", "other_student_details", "desc"], "question": "List all the student details in reversed lexicographical order.", "question_toks": ["List", "all", "the", "student", "details", "in", "reversed", "lexicographical", "order", "."], "guid": 1299}}
{"text": "Course_Authors_and_Tutors: author_id, author_tutor_ATB, login_name, password, personal_name, middle_name, family_name, gender_mf, address_line_1; Students: student_id, date_of_registration, date_of_latest_logon, login_name, password, personal_name, middle_name, family_name; Subjects: subject_id, subject_name; Courses: course_id, author_id, subject_id, course_name, course_description; Student_Course_Enrolment: registration_id, student_id, course_id, date_of_enrolment, date_of_completion; Student_Tests_Taken: registration_id, date_test_taken, test_result | On what dates did the student with family name \"Zieme\" and personal name \"Bernie\" enroll in and complete the courses?", "sql": "SELECT T1.date_of_enrolment ,  T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.family_name  =  \"Zieme\" AND T2.personal_name  =  \"Bernie\"", "example": {"db_id": "e_learning", "query": "SELECT T1.date_of_enrolment ,  T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.family_name  =  \"Zieme\" AND T2.personal_name  =  \"Bernie\"", "query_toks": ["SELECT", "T1.date_of_enrolment", ",", "T1.date_of_completion", "FROM", "Student_Course_Enrolment", "AS", "T1", "JOIN", "Students", "AS", "T2", "ON", "T1.student_id", "=", "T2.student_id", "WHERE", "T2.family_name", "=", "``", "Zieme", "''", "AND", "T2.personal_name", "=", "``", "Bernie", "''"], "query_toks_no_value": ["select", "t1", ".", "date_of_enrolment", ",", "t1", ".", "date_of_completion", "from", "student_course_enrolment", "as", "t1", "join", "students", "as", "t2", "on", "t1", ".", "student_id", "=", "t2", ".", "student_id", "where", "t2", ".", "family_name", "=", "value", "and", "t2", ".", "personal_name", "=", "value"], "question": "On what dates did the student with family name \"Zieme\" and personal name \"Bernie\" enroll in and complete the courses?", "question_toks": ["On", "what", "dates", "did", "the", "student", "with", "family", "name", "``", "Zieme", "''", "and", "personal", "name", "``", "Bernie", "''", "enroll", "in", "and", "complete", "the", "courses", "?"], "guid": 1300}}
{"text": "school: School_ID, School, Location, Enrollment, Founded, Denomination, Boys_or_Girls, Day_or_Boarding, Year_Entered_Competition, School_Colors; school_details: School_ID, Nickname, Colors, League, Class, Division; school_performance: School_Id, School_Year, Class_A, Class_AA; player: Player_ID, Player, Team, Age, Position, School_ID | Count the number of schools.", "sql": "SELECT count(*) FROM school", "example": {"db_id": "school_player", "query": "SELECT count(*) FROM school", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "school"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "school"], "question": "Count the number of schools.", "question_toks": ["Count", "the", "number", "of", "schools", "."], "guid": 1301}}
{"text": "Activity: actid, activity_name; Participates_in: stuid, actid; Faculty_Participates_in: FacID, actid; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building | How many students are advised by each rank of faculty? List the rank and the number of students.", "sql": "SELECT T1.rank ,  count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.rank", "example": {"db_id": "activity_1", "query": "SELECT T1.rank ,  count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.rank", "query_toks": ["SELECT", "T1.rank", ",", "count", "(", "*", ")", "FROM", "Faculty", "AS", "T1", "JOIN", "Student", "AS", "T2", "ON", "T1.FacID", "=", "T2.advisor", "GROUP", "BY", "T1.rank"], "query_toks_no_value": ["select", "t1", ".", "rank", ",", "count", "(", "*", ")", "from", "faculty", "as", "t1", "join", "student", "as", "t2", "on", "t1", ".", "facid", "=", "t2", ".", "advisor", "group", "by", "t1", ".", "rank"], "question": "How many students are advised by each rank of faculty? List the rank and the number of students.", "question_toks": ["How", "many", "students", "are", "advised", "by", "each", "rank", "of", "faculty", "?", "List", "the", "rank", "and", "the", "number", "of", "students", "."], "guid": 1302}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Dorm: dormid, dorm_name, student_capacity, gender; Dorm_amenity: amenid, amenity_name; Has_amenity: dormid, amenid; Lives_in: stuid, dormid, room_number | What is the average and total capacity for all dorms who are of gender X?", "sql": "SELECT avg(student_capacity) ,  sum(student_capacity) FROM dorm WHERE gender  =  'X'", "example": {"db_id": "dorm_1", "query": "SELECT avg(student_capacity) ,  sum(student_capacity) FROM dorm WHERE gender  =  'X'", "query_toks": ["SELECT", "avg", "(", "student_capacity", ")", ",", "sum", "(", "student_capacity", ")", "FROM", "dorm", "WHERE", "gender", "=", "'X", "'"], "query_toks_no_value": ["select", "avg", "(", "student_capacity", ")", ",", "sum", "(", "student_capacity", ")", "from", "dorm", "where", "gender", "=", "value"], "question": "What is the average and total capacity for all dorms who are of gender X?", "question_toks": ["What", "is", "the", "average", "and", "total", "capacity", "for", "all", "dorms", "who", "are", "of", "gender", "X", "?"], "guid": 1303}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Dorm: dormid, dorm_name, student_capacity, gender; Dorm_amenity: amenid, amenity_name; Has_amenity: dormid, amenid; Lives_in: stuid, dormid, room_number | What is the first name and age of every student who lives in a dorm with a TV Lounge?", "sql": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid WHERE T2.dormid NOT IN (SELECT T3.dormid FROM has_amenity AS T3 JOIN dorm_amenity AS T4 ON T3.amenid  =  T4.amenid WHERE T4.amenity_name  =  'TV Lounge')", "example": {"db_id": "dorm_1", "query": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid WHERE T2.dormid NOT IN (SELECT T3.dormid FROM has_amenity AS T3 JOIN dorm_amenity AS T4 ON T3.amenid  =  T4.amenid WHERE T4.amenity_name  =  'TV Lounge')", "query_toks": ["SELECT", "T1.fname", ",", "T1.age", "FROM", "student", "AS", "T1", "JOIN", "lives_in", "AS", "T2", "ON", "T1.stuid", "=", "T2.stuid", "WHERE", "T2.dormid", "NOT", "IN", "(", "SELECT", "T3.dormid", "FROM", "has_amenity", "AS", "T3", "JOIN", "dorm_amenity", "AS", "T4", "ON", "T3.amenid", "=", "T4.amenid", "WHERE", "T4.amenity_name", "=", "'TV", "Lounge", "'", ")"], "query_toks_no_value": ["select", "t1", ".", "fname", ",", "t1", ".", "age", "from", "student", "as", "t1", "join", "lives_in", "as", "t2", "on", "t1", ".", "stuid", "=", "t2", ".", "stuid", "where", "t2", ".", "dormid", "not", "in", "(", "select", "t3", ".", "dormid", "from", "has_amenity", "as", "t3", "join", "dorm_amenity", "as", "t4", "on", "t3", ".", "amenid", "=", "t4", ".", "amenid", "where", "t4", ".", "amenity_name", "=", "value", ")"], "question": "What is the first name and age of every student who lives in a dorm with a TV Lounge?", "question_toks": ["What", "is", "the", "first", "name", "and", "age", "of", "every", "student", "who", "lives", "in", "a", "dorm", "with", "a", "TV", "Lounge", "?"], "guid": 1304}}
{"text": "list: LastName, FirstName, Grade, Classroom; teachers: LastName, FirstName, Classroom | How many students are taught by teacher TARRING LEIA?", "sql": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"TARRING\" AND T2.lastname  =  \"LEIA\"", "example": {"db_id": "student_1", "query": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"TARRING\" AND T2.lastname  =  \"LEIA\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "list", "AS", "T1", "JOIN", "teachers", "AS", "T2", "ON", "T1.classroom", "=", "T2.classroom", "WHERE", "T2.firstname", "=", "``", "TARRING", "''", "AND", "T2.lastname", "=", "``", "LEIA", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "list", "as", "t1", "join", "teachers", "as", "t2", "on", "t1", ".", "classroom", "=", "t2", ".", "classroom", "where", "t2", ".", "firstname", "=", "value", "and", "t2", ".", "lastname", "=", "value"], "question": "How many students are taught by teacher TARRING LEIA?", "question_toks": ["How", "many", "students", "are", "taught", "by", "teacher", "TARRING", "LEIA", "?"], "guid": 1305}}
{"text": "Course_Authors_and_Tutors: author_id, author_tutor_ATB, login_name, password, personal_name, middle_name, family_name, gender_mf, address_line_1; Students: student_id, date_of_registration, date_of_latest_logon, login_name, password, personal_name, middle_name, family_name; Subjects: subject_id, subject_name; Courses: course_id, author_id, subject_id, course_name, course_description; Student_Course_Enrolment: registration_id, student_id, course_id, date_of_enrolment, date_of_completion; Student_Tests_Taken: registration_id, date_test_taken, test_result | Find the student ID and login name of the student with the most course enrollments", "sql": "SELECT T1.student_id ,  T2.login_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY COUNT(*) DESC LIMIT 1", "example": {"db_id": "e_learning", "query": "SELECT T1.student_id ,  T2.login_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.student_id", ",", "T2.login_name", "FROM", "Student_Course_Enrolment", "AS", "T1", "JOIN", "Students", "AS", "T2", "ON", "T1.student_id", "=", "T2.student_id", "GROUP", "BY", "T1.student_id", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "student_id", ",", "t2", ".", "login_name", "from", "student_course_enrolment", "as", "t1", "join", "students", "as", "t2", "on", "t1", ".", "student_id", "=", "t2", ".", "student_id", "group", "by", "t1", ".", "student_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Find the student ID and login name of the student with the most course enrollments", "question_toks": ["Find", "the", "student", "ID", "and", "login", "name", "of", "the", "student", "with", "the", "most", "course", "enrollments"], "guid": 1306}}
{"text": "Activity: actid, activity_name; Participates_in: stuid, actid; Faculty_Participates_in: FacID, actid; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building | What is the first and last name of the student participating in the most activities?", "sql": "SELECT T1.fname ,  T1.lname FROM Student AS T1 JOIN Participates_in AS T2 ON T1.StuID  =  T2.StuID GROUP BY T1.StuID ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "activity_1", "query": "SELECT T1.fname ,  T1.lname FROM Student AS T1 JOIN Participates_in AS T2 ON T1.StuID  =  T2.StuID GROUP BY T1.StuID ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.fname", ",", "T1.lname", "FROM", "Student", "AS", "T1", "JOIN", "Participates_in", "AS", "T2", "ON", "T1.StuID", "=", "T2.StuID", "GROUP", "BY", "T1.StuID", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "fname", ",", "t1", ".", "lname", "from", "student", "as", "t1", "join", "participates_in", "as", "t2", "on", "t1", ".", "stuid", "=", "t2", ".", "stuid", "group", "by", "t1", ".", "stuid", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the first and last name of the student participating in the most activities?", "question_toks": ["What", "is", "the", "first", "and", "last", "name", "of", "the", "student", "participating", "in", "the", "most", "activities", "?"], "guid": 1307}}
{"text": "school: School_ID, School, Location, Enrollment, Founded, Denomination, Boys_or_Girls, Day_or_Boarding, Year_Entered_Competition, School_Colors; school_details: School_ID, Nickname, Colors, League, Class, Division; school_performance: School_Id, School_Year, Class_A, Class_AA; player: Player_ID, Player, Team, Age, Position, School_ID | List the teams of the players with the top 5 largest ages.", "sql": "SELECT Team FROM player ORDER BY Age DESC LIMIT 5", "example": {"db_id": "school_player", "query": "SELECT Team FROM player ORDER BY Age DESC LIMIT 5", "query_toks": ["SELECT", "Team", "FROM", "player", "ORDER", "BY", "Age", "DESC", "LIMIT", "5"], "query_toks_no_value": ["select", "team", "from", "player", "order", "by", "age", "desc", "limit", "value"], "question": "List the teams of the players with the top 5 largest ages.", "question_toks": ["List", "the", "teams", "of", "the", "players", "with", "the", "top", "5", "largest", "ages", "."], "guid": 1308}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Dorm: dormid, dorm_name, student_capacity, gender; Dorm_amenity: amenid, amenity_name; Has_amenity: dormid, amenid; Lives_in: stuid, dormid, room_number | What is the most common amenity in the dorms?", "sql": "SELECT T1.amenity_name FROM dorm_amenity AS T1 JOIN has_amenity AS T2 ON T1.amenid  =  T2.amenid GROUP BY T2.amenid ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "dorm_1", "query": "SELECT T1.amenity_name FROM dorm_amenity AS T1 JOIN has_amenity AS T2 ON T1.amenid  =  T2.amenid GROUP BY T2.amenid ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.amenity_name", "FROM", "dorm_amenity", "AS", "T1", "JOIN", "has_amenity", "AS", "T2", "ON", "T1.amenid", "=", "T2.amenid", "GROUP", "BY", "T2.amenid", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "amenity_name", "from", "dorm_amenity", "as", "t1", "join", "has_amenity", "as", "t2", "on", "t1", ".", "amenid", "=", "t2", ".", "amenid", "group", "by", "t2", ".", "amenid", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the most common amenity in the dorms?", "question_toks": ["What", "is", "the", "most", "common", "amenity", "in", "the", "dorms", "?"], "guid": 1309}}
{"text": "Course_Authors_and_Tutors: author_id, author_tutor_ATB, login_name, password, personal_name, middle_name, family_name, gender_mf, address_line_1; Students: student_id, date_of_registration, date_of_latest_logon, login_name, password, personal_name, middle_name, family_name; Subjects: subject_id, subject_name; Courses: course_id, author_id, subject_id, course_name, course_description; Student_Course_Enrolment: registration_id, student_id, course_id, date_of_enrolment, date_of_completion; Student_Tests_Taken: registration_id, date_test_taken, test_result | Find the addresses of the course authors who teach the course with name \"operating system\" or \"data structure\".", "sql": "SELECT T1.address_line_1 FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id WHERE T2.course_name  =  \"operating system\" OR T2.course_name  =  \"data structure\"", "example": {"db_id": "e_learning", "query": "SELECT T1.address_line_1 FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id WHERE T2.course_name  =  \"operating system\" OR T2.course_name  =  \"data structure\"", "query_toks": ["SELECT", "T1.address_line_1", "FROM", "Course_Authors_and_Tutors", "AS", "T1", "JOIN", "Courses", "AS", "T2", "ON", "T1.author_id", "=", "T2.author_id", "WHERE", "T2.course_name", "=", "``", "operating", "system", "''", "OR", "T2.course_name", "=", "``", "data", "structure", "''"], "query_toks_no_value": ["select", "t1", ".", "address_line_1", "from", "course_authors_and_tutors", "as", "t1", "join", "courses", "as", "t2", "on", "t1", ".", "author_id", "=", "t2", ".", "author_id", "where", "t2", ".", "course_name", "=", "value", "or", "t2", ".", "course_name", "=", "value"], "question": "Find the addresses of the course authors who teach the course with name \"operating system\" or \"data structure\".", "question_toks": ["Find", "the", "addresses", "of", "the", "course", "authors", "who", "teach", "the", "course", "with", "name", "``", "operating", "system", "''", "or", "``", "data", "structure", "''", "."], "guid": 1310}}