{"text": "Customers: Customer_ID, Customer_Details; Staff: Staff_ID, Staff_Details; Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claim_Headers: Claim_Header_ID, Claim_Status_Code, Claim_Type_Code, Policy_ID, Date_of_Claim, Date_of_Settlement, Amount_Claimed, Amount_Piad; Claims_Documents: Claim_ID, Document_Type_Code, Created_by_Staff_ID, Created_Date; Claims_Processing_Stages: Claim_Stage_ID, Next_Claim_Stage_ID, Claim_Status_Name, Claim_Status_Description; Claims_Processing: Claim_Processing_ID, Claim_ID, Claim_Outcome_Code, Claim_Stage_ID, Staff_ID | Find the names of customers who either have an deputy policy or uniformed policy.", "sql": "SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.policy_type_code  =  \"Deputy\" OR t1.policy_type_code  =  \"Uniform\"", "example": {"db_id": "insurance_and_eClaims", "query": "SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.policy_type_code  =  \"Deputy\" OR t1.policy_type_code  =  \"Uniform\"", "query_toks": ["SELECT", "DISTINCT", "t2.customer_details", "FROM", "policies", "AS", "t1", "JOIN", "customers", "AS", "t2", "ON", "t1.customer_id", "=", "t2.customer_id", "WHERE", "t1.policy_type_code", "=", "``", "Deputy", "''", "OR", "t1.policy_type_code", "=", "``", "Uniform", "''"], "query_toks_no_value": ["select", "distinct", "t2", ".", "customer_details", "from", "policies", "as", "t1", "join", "customers", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "where", "t1", ".", "policy_type_code", "=", "value", "or", "t1", ".", "policy_type_code", "=", "value"], "question": "Find the names of customers who either have an deputy policy or uniformed policy.", "question_toks": ["Find", "the", "names", "of", "customers", "who", "either", "have", "an", "deputy", "policy", "or", "uniformed", "policy", "."], "guid": 7576}}
{"text": "ACCOUNTS: custid, name; SAVINGS: custid, balance; CHECKING: custid, balance | What is the name and checking balance of the account which has the lowest savings balance?", "sql": "SELECT T2.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT 1", "example": {"db_id": "small_bank_1", "query": "SELECT T2.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT 1", "query_toks": ["SELECT", "T2.balance", ",", "T1.name", "FROM", "accounts", "AS", "T1", "JOIN", "checking", "AS", "T2", "ON", "T1.custid", "=", "T2.custid", "JOIN", "savings", "AS", "T3", "ON", "T1.custid", "=", "T3.custid", "ORDER", "BY", "T3.balance", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "balance", ",", "t1", ".", "name", "from", "accounts", "as", "t1", "join", "checking", "as", "t2", "on", "t1", ".", "custid", "=", "t2", ".", "custid", "join", "savings", "as", "t3", "on", "t1", ".", "custid", "=", "t3", ".", "custid", "order", "by", "t3", ".", "balance", "limit", "value"], "question": "What is the name and checking balance of the account which has the lowest savings balance?", "question_toks": ["What", "is", "the", "name", "and", "checking", "balance", "of", "the", "account", "which", "has", "the", "lowest", "savings", "balance", "?"], "guid": 7577}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | Find the name of customers whose credit score is below the average credit scores of all customers.", "sql": "SELECT cust_name FROM customer WHERE credit_score  <  (SELECT avg(credit_score) FROM customer)", "example": {"db_id": "loan_1", "query": "SELECT cust_name FROM customer WHERE credit_score  <  (SELECT avg(credit_score) FROM customer)", "query_toks": ["SELECT", "cust_name", "FROM", "customer", "WHERE", "credit_score", "<", "(", "SELECT", "avg", "(", "credit_score", ")", "FROM", "customer", ")"], "query_toks_no_value": ["select", "cust_name", "from", "customer", "where", "credit_score", "<", "(", "select", "avg", "(", "credit_score", ")", "from", "customer", ")"], "question": "Find the name of customers whose credit score is below the average credit scores of all customers.", "question_toks": ["Find", "the", "name", "of", "customers", "whose", "credit", "score", "is", "below", "the", "average", "credit", "scores", "of", "all", "customers", "."], "guid": 7578}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | Find the average credit score of the customers who have some loan.", "sql": "SELECT avg(credit_score) FROM customer WHERE cust_id IN (SELECT cust_id FROM loan)", "example": {"db_id": "loan_1", "query": "SELECT avg(credit_score) FROM customer WHERE cust_id IN (SELECT cust_id FROM loan)", "query_toks": ["SELECT", "avg", "(", "credit_score", ")", "FROM", "customer", "WHERE", "cust_id", "IN", "(", "SELECT", "cust_id", "FROM", "loan", ")"], "query_toks_no_value": ["select", "avg", "(", "credit_score", ")", "from", "customer", "where", "cust_id", "in", "(", "select", "cust_id", "from", "loan", ")"], "question": "Find the average credit score of the customers who have some loan.", "question_toks": ["Find", "the", "average", "credit", "score", "of", "the", "customers", "who", "have", "some", "loan", "."], "guid": 7579}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | What are the names of the different customers who have taken out a loan, ordered by the total amount that they have taken?", "sql": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name ORDER BY sum(T2.amount)", "example": {"db_id": "loan_1", "query": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name ORDER BY sum(T2.amount)", "query_toks": ["SELECT", "T1.cust_name", "FROM", "customer", "AS", "T1", "JOIN", "loan", "AS", "T2", "ON", "T1.cust_id", "=", "T2.cust_id", "GROUP", "BY", "T1.cust_name", "ORDER", "BY", "sum", "(", "T2.amount", ")"], "query_toks_no_value": ["select", "t1", ".", "cust_name", "from", "customer", "as", "t1", "join", "loan", "as", "t2", "on", "t1", ".", "cust_id", "=", "t2", ".", "cust_id", "group", "by", "t1", ".", "cust_name", "order", "by", "sum", "(", "t2", ".", "amount", ")"], "question": "What are the names of the different customers who have taken out a loan, ordered by the total amount that they have taken?", "question_toks": ["What", "are", "the", "names", "of", "the", "different", "customers", "who", "have", "taken", "out", "a", "loan", ",", "ordered", "by", "the", "total", "amount", "that", "they", "have", "taken", "?"], "guid": 7580}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | Find the name of bank branch that provided the greatest total amount of loans to customers with credit score is less than 100.", "sql": "SELECT T2.bname FROM loan AS T1 JOIN bank AS T2 ON T1.branch_id  =  T2.branch_id JOIN customer AS T3 ON T1.cust_id  =  T3.cust_id WHERE T3.credit_score  <  100 GROUP BY T2.bname ORDER BY sum(T1.amount) DESC LIMIT 1", "example": {"db_id": "loan_1", "query": "SELECT T2.bname FROM loan AS T1 JOIN bank AS T2 ON T1.branch_id  =  T2.branch_id JOIN customer AS T3 ON T1.cust_id  =  T3.cust_id WHERE T3.credit_score  <  100 GROUP BY T2.bname ORDER BY sum(T1.amount) DESC LIMIT 1", "query_toks": ["SELECT", "T2.bname", "FROM", "loan", "AS", "T1", "JOIN", "bank", "AS", "T2", "ON", "T1.branch_id", "=", "T2.branch_id", "JOIN", "customer", "AS", "T3", "ON", "T1.cust_id", "=", "T3.cust_id", "WHERE", "T3.credit_score", "<", "100", "GROUP", "BY", "T2.bname", "ORDER", "BY", "sum", "(", "T1.amount", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "bname", "from", "loan", "as", "t1", "join", "bank", "as", "t2", "on", "t1", ".", "branch_id", "=", "t2", ".", "branch_id", "join", "customer", "as", "t3", "on", "t1", ".", "cust_id", "=", "t3", ".", "cust_id", "where", "t3", ".", "credit_score", "<", "value", "group", "by", "t2", ".", "bname", "order", "by", "sum", "(", "t1", ".", "amount", ")", "desc", "limit", "value"], "question": "Find the name of bank branch that provided the greatest total amount of loans to customers with credit score is less than 100.", "question_toks": ["Find", "the", "name", "of", "bank", "branch", "that", "provided", "the", "greatest", "total", "amount", "of", "loans", "to", "customers", "with", "credit", "score", "is", "less", "than", "100", "."], "guid": 7581}}
{"text": "Customers: Customer_ID, Customer_name; Services: Service_ID, Service_name; Available_Policies: Policy_ID, policy_type_code, Customer_Phone; Customers_Policies: Customer_ID, Policy_ID, Date_Opened, Date_Closed; First_Notification_of_Loss: FNOL_ID, Customer_ID, Policy_ID, Service_ID; Claims: Claim_ID, FNOL_ID, Effective_Date; Settlements: Settlement_ID, Claim_ID, Effective_Date, Settlement_Amount | How many services are there?", "sql": "SELECT count(*) FROM services", "example": {"db_id": "insurance_fnol", "query": "SELECT count(*) FROM services", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "services"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "services"], "question": "How many services are there?", "question_toks": ["How", "many", "services", "are", "there", "?"], "guid": 7582}}
{"text": "Customers: Customer_ID, Customer_name; Services: Service_ID, Service_name; Available_Policies: Policy_ID, policy_type_code, Customer_Phone; Customers_Policies: Customer_ID, Policy_ID, Date_Opened, Date_Closed; First_Notification_of_Loss: FNOL_ID, Customer_ID, Policy_ID, Service_ID; Claims: Claim_ID, FNOL_ID, Effective_Date; Settlements: Settlement_ID, Claim_ID, Effective_Date, Settlement_Amount | What are the phone numbers of customers using the policy with the code \"Life Insurance\"?", "sql": "SELECT customer_phone FROM available_policies WHERE policy_type_code  =  \"Life Insurance\"", "example": {"db_id": "insurance_fnol", "query": "SELECT customer_phone FROM available_policies WHERE policy_type_code  =  \"Life Insurance\"", "query_toks": ["SELECT", "customer_phone", "FROM", "available_policies", "WHERE", "policy_type_code", "=", "``", "Life", "Insurance", "''"], "query_toks_no_value": ["select", "customer_phone", "from", "available_policies", "where", "policy_type_code", "=", "value"], "question": "What are the phone numbers of customers using the policy with the code \"Life Insurance\"?", "question_toks": ["What", "are", "the", "phone", "numbers", "of", "customers", "using", "the", "policy", "with", "the", "code", "``", "Life", "Insurance", "''", "?"], "guid": 7583}}
{"text": "Customers: Customer_ID, Customer_Details; Customer_Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claims: Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled; Settlements: Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID; Payments: Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment | What is the total amount of settlement made for all the settlements?", "sql": "SELECT sum(Amount_Settled) FROM Settlements", "example": {"db_id": "insurance_policies", "query": "SELECT sum(Amount_Settled) FROM Settlements", "query_toks": ["SELECT", "sum", "(", "Amount_Settled", ")", "FROM", "Settlements"], "query_toks_no_value": ["select", "sum", "(", "amount_settled", ")", "from", "settlements"], "question": "What is the total amount of settlement made for all the settlements?", "question_toks": ["What", "is", "the", "total", "amount", "of", "settlement", "made", "for", "all", "the", "settlements", "?"], "guid": 7584}}
{"text": "ACCOUNTS: custid, name; SAVINGS: custid, balance; CHECKING: custid, balance | Find the number of checking accounts for each account name.", "sql": "SELECT count(*) ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name", "example": {"db_id": "small_bank_1", "query": "SELECT count(*) ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "T1.name", "FROM", "accounts", "AS", "T1", "JOIN", "checking", "AS", "T2", "ON", "T1.custid", "=", "T2.custid", "GROUP", "BY", "T1.name"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "t1", ".", "name", "from", "accounts", "as", "t1", "join", "checking", "as", "t2", "on", "t1", ".", "custid", "=", "t2", ".", "custid", "group", "by", "t1", ".", "name"], "question": "Find the number of checking accounts for each account name.", "question_toks": ["Find", "the", "number", "of", "checking", "accounts", "for", "each", "account", "name", "."], "guid": 7585}}
{"text": "Customers: Customer_ID, Customer_name; Services: Service_ID, Service_name; Available_Policies: Policy_ID, policy_type_code, Customer_Phone; Customers_Policies: Customer_ID, Policy_ID, Date_Opened, Date_Closed; First_Notification_of_Loss: FNOL_ID, Customer_ID, Policy_ID, Service_ID; Claims: Claim_ID, FNOL_ID, Effective_Date; Settlements: Settlement_ID, Claim_ID, Effective_Date, Settlement_Amount | Retrieve the open and close dates of all the policies associated with the customer whose name contains \"Diana\"", "sql": "SELECT t2.date_opened ,  t2.date_closed FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name LIKE \"%Diana%\"", "example": {"db_id": "insurance_fnol", "query": "SELECT t2.date_opened ,  t2.date_closed FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name LIKE \"%Diana%\"", "query_toks": ["SELECT", "t2.date_opened", ",", "t2.date_closed", "FROM", "customers", "AS", "t1", "JOIN", "customers_policies", "AS", "t2", "ON", "t1.customer_id", "=", "t2.customer_id", "WHERE", "t1.customer_name", "LIKE", "``", "%", "Diana", "%", "''"], "query_toks_no_value": ["select", "t2", ".", "date_opened", ",", "t2", ".", "date_closed", "from", "customers", "as", "t1", "join", "customers_policies", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "where", "t1", ".", "customer_name", "like", "value"], "question": "Retrieve the open and close dates of all the policies associated with the customer whose name contains \"Diana\"", "question_toks": ["Retrieve", "the", "open", "and", "close", "dates", "of", "all", "the", "policies", "associated", "with", "the", "customer", "whose", "name", "contains", "``", "Diana", "''"], "guid": 7586}}
{"text": "Customers: Customer_ID, Customer_Details; Staff: Staff_ID, Staff_Details; Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claim_Headers: Claim_Header_ID, Claim_Status_Code, Claim_Type_Code, Policy_ID, Date_of_Claim, Date_of_Settlement, Amount_Claimed, Amount_Piad; Claims_Documents: Claim_ID, Document_Type_Code, Created_by_Staff_ID, Created_Date; Claims_Processing_Stages: Claim_Stage_ID, Next_Claim_Stage_ID, Claim_Status_Name, Claim_Status_Description; Claims_Processing: Claim_Processing_ID, Claim_ID, Claim_Outcome_Code, Claim_Stage_ID, Staff_ID | Find the total and average amount paid in claim headers.", "sql": "SELECT sum(amount_piad) ,  avg(amount_piad) FROM claim_headers", "example": {"db_id": "insurance_and_eClaims", "query": "SELECT sum(amount_piad) ,  avg(amount_piad) FROM claim_headers", "query_toks": ["SELECT", "sum", "(", "amount_piad", ")", ",", "avg", "(", "amount_piad", ")", "FROM", "claim_headers"], "query_toks_no_value": ["select", "sum", "(", "amount_piad", ")", ",", "avg", "(", "amount_piad", ")", "from", "claim_headers"], "question": "Find the total and average amount paid in claim headers.", "question_toks": ["Find", "the", "total", "and", "average", "amount", "paid", "in", "claim", "headers", "."], "guid": 7587}}
{"text": "Ref_Feature_Types: feature_type_code, feature_type_name; Ref_Property_Types: property_type_code, property_type_description; Other_Available_Features: feature_id, feature_type_code, feature_name, feature_description; Properties: property_id, property_type_code, date_on_market, date_sold, property_name, property_address, room_count, vendor_requested_price, buyer_offered_price, agreed_selling_price; Other_Property_Features: property_id, feature_id, property_feature_description | What is the feature type name of feature AirCon?", "sql": "SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  \"AirCon\"", "example": {"db_id": "real_estate_properties", "query": "SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  \"AirCon\"", "query_toks": ["SELECT", "T2.feature_type_name", "FROM", "Other_Available_Features", "AS", "T1", "JOIN", "Ref_Feature_Types", "AS", "T2", "ON", "T1.feature_type_code", "=", "T2.feature_type_code", "WHERE", "T1.feature_name", "=", "``", "AirCon", "''"], "query_toks_no_value": ["select", "t2", ".", "feature_type_name", "from", "other_available_features", "as", "t1", "join", "ref_feature_types", "as", "t2", "on", "t1", ".", "feature_type_code", "=", "t2", ".", "feature_type_code", "where", "t1", ".", "feature_name", "=", "value"], "question": "What is the feature type name of feature AirCon?", "question_toks": ["What", "is", "the", "feature", "type", "name", "of", "feature", "AirCon", "?"], "guid": 7588}}
{"text": "Customers: Customer_ID, Customer_name; Services: Service_ID, Service_name; Available_Policies: Policy_ID, policy_type_code, Customer_Phone; Customers_Policies: Customer_ID, Policy_ID, Date_Opened, Date_Closed; First_Notification_of_Loss: FNOL_ID, Customer_ID, Policy_ID, Service_ID; Claims: Claim_ID, FNOL_ID, Effective_Date; Settlements: Settlement_ID, Claim_ID, Effective_Date, Settlement_Amount | What is the ordered list of customer ids?", "sql": "SELECT customer_id ,  customer_name FROM customers ORDER BY customer_id ASC", "example": {"db_id": "insurance_fnol", "query": "SELECT customer_id ,  customer_name FROM customers ORDER BY customer_id ASC", "query_toks": ["SELECT", "customer_id", ",", "customer_name", "FROM", "customers", "ORDER", "BY", "customer_id", "ASC"], "query_toks_no_value": ["select", "customer_id", ",", "customer_name", "from", "customers", "order", "by", "customer_id", "asc"], "question": "What is the ordered list of customer ids?", "question_toks": ["What", "is", "the", "ordered", "list", "of", "customer", "ids", "?"], "guid": 7589}}
{"text": "Customers: Customer_ID, Customer_Details; Customer_Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claims: Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled; Settlements: Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID; Payments: Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment | Find the claim id and claim date of the claim that incurred the most settlement count. Also tell me the count.", "sql": "SELECT T1.claim_id ,  T1.date_claim_made ,  count(*) FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id  =  T2.claim_id GROUP BY T1.claim_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "insurance_policies", "query": "SELECT T1.claim_id ,  T1.date_claim_made ,  count(*) FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id  =  T2.claim_id GROUP BY T1.claim_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.claim_id", ",", "T1.date_claim_made", ",", "count", "(", "*", ")", "FROM", "Claims", "AS", "T1", "JOIN", "Settlements", "AS", "T2", "ON", "T1.claim_id", "=", "T2.claim_id", "GROUP", "BY", "T1.claim_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "claim_id", ",", "t1", ".", "date_claim_made", ",", "count", "(", "*", ")", "from", "claims", "as", "t1", "join", "settlements", "as", "t2", "on", "t1", ".", "claim_id", "=", "t2", ".", "claim_id", "group", "by", "t1", ".", "claim_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Find the claim id and claim date of the claim that incurred the most settlement count. Also tell me the count.", "question_toks": ["Find", "the", "claim", "id", "and", "claim", "date", "of", "the", "claim", "that", "incurred", "the", "most", "settlement", "count", ".", "Also", "tell", "me", "the", "count", "."], "guid": 7590}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | Count the number of different account types.", "sql": "SELECT count(DISTINCT acc_type) FROM customer", "example": {"db_id": "loan_1", "query": "SELECT count(DISTINCT acc_type) FROM customer", "query_toks": ["SELECT", "count", "(", "DISTINCT", "acc_type", ")", "FROM", "customer"], "query_toks_no_value": ["select", "count", "(", "distinct", "acc_type", ")", "from", "customer"], "question": "Count the number of different account types.", "question_toks": ["Count", "the", "number", "of", "different", "account", "types", "."], "guid": 7591}}
{"text": "Customers: Customer_ID, Customer_name; Services: Service_ID, Service_name; Available_Policies: Policy_ID, policy_type_code, Customer_Phone; Customers_Policies: Customer_ID, Policy_ID, Date_Opened, Date_Closed; First_Notification_of_Loss: FNOL_ID, Customer_ID, Policy_ID, Service_ID; Claims: Claim_ID, FNOL_ID, Effective_Date; Settlements: Settlement_ID, Claim_ID, Effective_Date, Settlement_Amount | Find the total and average amount of settlements.", "sql": "SELECT sum(settlement_amount) ,  avg(settlement_amount) FROM settlements", "example": {"db_id": "insurance_fnol", "query": "SELECT sum(settlement_amount) ,  avg(settlement_amount) FROM settlements", "query_toks": ["SELECT", "sum", "(", "settlement_amount", ")", ",", "avg", "(", "settlement_amount", ")", "FROM", "settlements"], "query_toks_no_value": ["select", "sum", "(", "settlement_amount", ")", ",", "avg", "(", "settlement_amount", ")", "from", "settlements"], "question": "Find the total and average amount of settlements.", "question_toks": ["Find", "the", "total", "and", "average", "amount", "of", "settlements", "."], "guid": 7592}}
{"text": "Addresses: Address_ID, address_details; Locations: Location_ID, Other_Details; Products: Product_ID, Product_Type_Code, Product_Name, Product_Price; Parties: Party_ID, Party_Details; Assets: Asset_ID, Other_Details; Channels: Channel_ID, Other_Details; Finances: Finance_ID, Other_Details; Events: Event_ID, Address_ID, Channel_ID, Event_Type_Code, Finance_ID, Location_ID; Products_in_Events: Product_in_Event_ID, Event_ID, Product_ID; Parties_in_Events: Party_ID, Event_ID, Role_Code | Show the names of products and the number of events they are in.", "sql": "SELECT T1.Product_Name ,  COUNT(*) FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID  =  T2.Product_ID GROUP BY T1.Product_Name", "example": {"db_id": "solvency_ii", "query": "SELECT T1.Product_Name ,  COUNT(*) FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID  =  T2.Product_ID GROUP BY T1.Product_Name", "query_toks": ["SELECT", "T1.Product_Name", ",", "COUNT", "(", "*", ")", "FROM", "Products", "AS", "T1", "JOIN", "Products_in_Events", "AS", "T2", "ON", "T1.Product_ID", "=", "T2.Product_ID", "GROUP", "BY", "T1.Product_Name"], "query_toks_no_value": ["select", "t1", ".", "product_name", ",", "count", "(", "*", ")", "from", "products", "as", "t1", "join", "products_in_events", "as", "t2", "on", "t1", ".", "product_id", "=", "t2", ".", "product_id", "group", "by", "t1", ".", "product_name"], "question": "Show the names of products and the number of events they are in.", "question_toks": ["Show", "the", "names", "of", "products", "and", "the", "number", "of", "events", "they", "are", "in", "."], "guid": 7593}}
{"text": "Addresses: Address_ID, address_details; Locations: Location_ID, Other_Details; Products: Product_ID, Product_Type_Code, Product_Name, Product_Price; Parties: Party_ID, Party_Details; Assets: Asset_ID, Other_Details; Channels: Channel_ID, Other_Details; Finances: Finance_ID, Other_Details; Events: Event_ID, Address_ID, Channel_ID, Event_Type_Code, Finance_ID, Location_ID; Products_in_Events: Product_in_Event_ID, Event_ID, Product_ID; Parties_in_Events: Party_ID, Event_ID, Role_Code | Show the names of products and the number of events they are in, sorted by the number of events in descending order.", "sql": "SELECT T1.Product_Name ,  COUNT(*) FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID  =  T2.Product_ID GROUP BY T1.Product_Name ORDER BY COUNT(*) DESC", "example": {"db_id": "solvency_ii", "query": "SELECT T1.Product_Name ,  COUNT(*) FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID  =  T2.Product_ID GROUP BY T1.Product_Name ORDER BY COUNT(*) DESC", "query_toks": ["SELECT", "T1.Product_Name", ",", "COUNT", "(", "*", ")", "FROM", "Products", "AS", "T1", "JOIN", "Products_in_Events", "AS", "T2", "ON", "T1.Product_ID", "=", "T2.Product_ID", "GROUP", "BY", "T1.Product_Name", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC"], "query_toks_no_value": ["select", "t1", ".", "product_name", ",", "count", "(", "*", ")", "from", "products", "as", "t1", "join", "products_in_events", "as", "t2", "on", "t1", ".", "product_id", "=", "t2", ".", "product_id", "group", "by", "t1", ".", "product_name", "order", "by", "count", "(", "*", ")", "desc"], "question": "Show the names of products and the number of events they are in, sorted by the number of events in descending order.", "question_toks": ["Show", "the", "names", "of", "products", "and", "the", "number", "of", "events", "they", "are", "in", ",", "sorted", "by", "the", "number", "of", "events", "in", "descending", "order", "."], "guid": 7594}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | Find the average credit score of the customers who do not have any loan.", "sql": "SELECT avg(credit_score) FROM customer WHERE cust_id NOT IN (SELECT cust_id FROM loan)", "example": {"db_id": "loan_1", "query": "SELECT avg(credit_score) FROM customer WHERE cust_id NOT IN (SELECT cust_id FROM loan)", "query_toks": ["SELECT", "avg", "(", "credit_score", ")", "FROM", "customer", "WHERE", "cust_id", "NOT", "IN", "(", "SELECT", "cust_id", "FROM", "loan", ")"], "query_toks_no_value": ["select", "avg", "(", "credit_score", ")", "from", "customer", "where", "cust_id", "not", "in", "(", "select", "cust_id", "from", "loan", ")"], "question": "Find the average credit score of the customers who do not have any loan.", "question_toks": ["Find", "the", "average", "credit", "score", "of", "the", "customers", "who", "do", "not", "have", "any", "loan", "."], "guid": 7595}}
{"text": "ACCOUNTS: custid, name; SAVINGS: custid, balance; CHECKING: custid, balance | What are the names of customers with checking balances lower than the average checking balance?", "sql": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM checking)", "example": {"db_id": "small_bank_1", "query": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM checking)", "query_toks": ["SELECT", "T1.name", "FROM", "accounts", "AS", "T1", "JOIN", "checking", "AS", "T2", "ON", "T1.custid", "=", "T2.custid", "WHERE", "T2.balance", "<", "(", "SELECT", "avg", "(", "balance", ")", "FROM", "checking", ")"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "accounts", "as", "t1", "join", "checking", "as", "t2", "on", "t1", ".", "custid", "=", "t2", ".", "custid", "where", "t2", ".", "balance", "<", "(", "select", "avg", "(", "balance", ")", "from", "checking", ")"], "question": "What are the names of customers with checking balances lower than the average checking balance?", "question_toks": ["What", "are", "the", "names", "of", "customers", "with", "checking", "balances", "lower", "than", "the", "average", "checking", "balance", "?"], "guid": 7596}}
{"text": "Customers: Customer_ID, Customer_Details; Staff: Staff_ID, Staff_Details; Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claim_Headers: Claim_Header_ID, Claim_Status_Code, Claim_Type_Code, Policy_ID, Date_of_Claim, Date_of_Settlement, Amount_Claimed, Amount_Piad; Claims_Documents: Claim_ID, Document_Type_Code, Created_by_Staff_ID, Created_Date; Claims_Processing_Stages: Claim_Stage_ID, Next_Claim_Stage_ID, Claim_Status_Name, Claim_Status_Description; Claims_Processing: Claim_Processing_ID, Claim_ID, Claim_Outcome_Code, Claim_Stage_ID, Staff_ID | What is the name of the customer who has made the largest amount of claim in a single claim?", "sql": "SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id  =  t2.policy_id JOIN customers AS t3 ON t2.customer_id  =  t3.customer_id WHERE t1.amount_claimed  =  (SELECT max(amount_claimed) FROM claim_headers)", "example": {"db_id": "insurance_and_eClaims", "query": "SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id  =  t2.policy_id JOIN customers AS t3 ON t2.customer_id  =  t3.customer_id WHERE t1.amount_claimed  =  (SELECT max(amount_claimed) FROM claim_headers)", "query_toks": ["SELECT", "t3.customer_details", "FROM", "claim_headers", "AS", "t1", "JOIN", "policies", "AS", "t2", "ON", "t1.policy_id", "=", "t2.policy_id", "JOIN", "customers", "AS", "t3", "ON", "t2.customer_id", "=", "t3.customer_id", "WHERE", "t1.amount_claimed", "=", "(", "SELECT", "max", "(", "amount_claimed", ")", "FROM", "claim_headers", ")"], "query_toks_no_value": ["select", "t3", ".", "customer_details", "from", "claim_headers", "as", "t1", "join", "policies", "as", "t2", "on", "t1", ".", "policy_id", "=", "t2", ".", "policy_id", "join", "customers", "as", "t3", "on", "t2", ".", "customer_id", "=", "t3", ".", "customer_id", "where", "t1", ".", "amount_claimed", "=", "(", "select", "max", "(", "amount_claimed", ")", "from", "claim_headers", ")"], "question": "What is the name of the customer who has made the largest amount of claim in a single claim?", "question_toks": ["What", "is", "the", "name", "of", "the", "customer", "who", "has", "made", "the", "largest", "amount", "of", "claim", "in", "a", "single", "claim", "?"], "guid": 7597}}
{"text": "Customers: Customer_ID, Customer_name; Services: Service_ID, Service_name; Available_Policies: Policy_ID, policy_type_code, Customer_Phone; Customers_Policies: Customer_ID, Policy_ID, Date_Opened, Date_Closed; First_Notification_of_Loss: FNOL_ID, Customer_ID, Policy_ID, Service_ID; Claims: Claim_ID, FNOL_ID, Effective_Date; Settlements: Settlement_ID, Claim_ID, Effective_Date, Settlement_Amount | Find the names of users who do not have a first notification of loss record.", "sql": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id", "example": {"db_id": "insurance_fnol", "query": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id", "query_toks": ["SELECT", "customer_name", "FROM", "customers", "EXCEPT", "SELECT", "t1.customer_name", "FROM", "customers", "AS", "t1", "JOIN", "first_notification_of_loss", "AS", "t2", "ON", "t1.customer_id", "=", "t2.customer_id"], "query_toks_no_value": ["select", "customer_name", "from", "customers", "except", "select", "t1", ".", "customer_name", "from", "customers", "as", "t1", "join", "first_notification_of_loss", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id"], "question": "Find the names of users who do not have a first notification of loss record.", "question_toks": ["Find", "the", "names", "of", "users", "who", "do", "not", "have", "a", "first", "notification", "of", "loss", "record", "."], "guid": 7598}}
{"text": "ACCOUNTS: custid, name; SAVINGS: custid, balance; CHECKING: custid, balance | Find the name and checking balance of the account with the lowest savings balance.", "sql": "SELECT T1.name ,  T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT 1", "example": {"db_id": "small_bank_1", "query": "SELECT T1.name ,  T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT 1", "query_toks": ["SELECT", "T1.name", ",", "T2.balance", "FROM", "accounts", "AS", "T1", "JOIN", "checking", "AS", "T2", "ON", "T1.custid", "=", "T2.custid", "JOIN", "savings", "AS", "T3", "ON", "T1.custid", "=", "T3.custid", "ORDER", "BY", "T3.balance", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "t2", ".", "balance", "from", "accounts", "as", "t1", "join", "checking", "as", "t2", "on", "t1", ".", "custid", "=", "t2", ".", "custid", "join", "savings", "as", "t3", "on", "t1", ".", "custid", "=", "t3", ".", "custid", "order", "by", "t3", ".", "balance", "limit", "value"], "question": "Find the name and checking balance of the account with the lowest savings balance.", "question_toks": ["Find", "the", "name", "and", "checking", "balance", "of", "the", "account", "with", "the", "lowest", "savings", "balance", "."], "guid": 7599}}
{"text": "Customers: Customer_ID, Customer_Details; Staff: Staff_ID, Staff_Details; Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claim_Headers: Claim_Header_ID, Claim_Status_Code, Claim_Type_Code, Policy_ID, Date_of_Claim, Date_of_Settlement, Amount_Claimed, Amount_Piad; Claims_Documents: Claim_ID, Document_Type_Code, Created_by_Staff_ID, Created_Date; Claims_Processing_Stages: Claim_Stage_ID, Next_Claim_Stage_ID, Claim_Status_Name, Claim_Status_Description; Claims_Processing: Claim_Processing_ID, Claim_ID, Claim_Outcome_Code, Claim_Stage_ID, Staff_ID | Find the names of customers whose name contains \"Diana\".", "sql": "SELECT customer_details FROM customers WHERE customer_details LIKE \"%Diana%\"", "example": {"db_id": "insurance_and_eClaims", "query": "SELECT customer_details FROM customers WHERE customer_details LIKE \"%Diana%\"", "query_toks": ["SELECT", "customer_details", "FROM", "customers", "WHERE", "customer_details", "LIKE", "``", "%", "Diana", "%", "''"], "query_toks_no_value": ["select", "customer_details", "from", "customers", "where", "customer_details", "like", "value"], "question": "Find the names of customers whose name contains \"Diana\".", "question_toks": ["Find", "the", "names", "of", "customers", "whose", "name", "contains", "``", "Diana", "''", "."], "guid": 7600}}
{"text": "ACCOUNTS: custid, name; SAVINGS: custid, balance; CHECKING: custid, balance | Find the name of accounts whose checking balance is higher than corresponding saving balance.", "sql": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T2.balance  >  T3.balance", "example": {"db_id": "small_bank_1", "query": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T2.balance  >  T3.balance", "query_toks": ["SELECT", "T1.name", "FROM", "accounts", "AS", "T1", "JOIN", "checking", "AS", "T2", "ON", "T1.custid", "=", "T2.custid", "JOIN", "savings", "AS", "T3", "ON", "T1.custid", "=", "T3.custid", "WHERE", "T2.balance", ">", "T3.balance"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "accounts", "as", "t1", "join", "checking", "as", "t2", "on", "t1", ".", "custid", "=", "t2", ".", "custid", "join", "savings", "as", "t3", "on", "t1", ".", "custid", "=", "t3", ".", "custid", "where", "t2", ".", "balance", ">", "t3", ".", "balance"], "question": "Find the name of accounts whose checking balance is higher than corresponding saving balance.", "question_toks": ["Find", "the", "name", "of", "accounts", "whose", "checking", "balance", "is", "higher", "than", "corresponding", "saving", "balance", "."], "guid": 7601}}
{"text": "Customers: Customer_ID, Customer_name; Services: Service_ID, Service_name; Available_Policies: Policy_ID, policy_type_code, Customer_Phone; Customers_Policies: Customer_ID, Policy_ID, Date_Opened, Date_Closed; First_Notification_of_Loss: FNOL_ID, Customer_ID, Policy_ID, Service_ID; Claims: Claim_ID, FNOL_ID, Effective_Date; Settlements: Settlement_ID, Claim_ID, Effective_Date, Settlement_Amount | What are all the phone numbers?", "sql": "SELECT customer_phone FROM available_policies", "example": {"db_id": "insurance_fnol", "query": "SELECT customer_phone FROM available_policies", "query_toks": ["SELECT", "customer_phone", "FROM", "available_policies"], "query_toks_no_value": ["select", "customer_phone", "from", "available_policies"], "question": "What are all the phone numbers?", "question_toks": ["What", "are", "all", "the", "phone", "numbers", "?"], "guid": 7602}}
{"text": "Customers: Customer_ID, Customer_name; Services: Service_ID, Service_name; Available_Policies: Policy_ID, policy_type_code, Customer_Phone; Customers_Policies: Customer_ID, Policy_ID, Date_Opened, Date_Closed; First_Notification_of_Loss: FNOL_ID, Customer_ID, Policy_ID, Service_ID; Claims: Claim_ID, FNOL_ID, Effective_Date; Settlements: Settlement_ID, Claim_ID, Effective_Date, Settlement_Amount | Find the policy types more than 4 customers use. Show their type code.", "sql": "SELECT policy_type_code FROM available_policies GROUP BY policy_type_code HAVING count(*)  >  4", "example": {"db_id": "insurance_fnol", "query": "SELECT policy_type_code FROM available_policies GROUP BY policy_type_code HAVING count(*)  >  4", "query_toks": ["SELECT", "policy_type_code", "FROM", "available_policies", "GROUP", "BY", "policy_type_code", "HAVING", "count", "(", "*", ")", ">", "4"], "query_toks_no_value": ["select", "policy_type_code", "from", "available_policies", "group", "by", "policy_type_code", "having", "count", "(", "*", ")", ">", "value"], "question": "Find the policy types more than 4 customers use. Show their type code.", "question_toks": ["Find", "the", "policy", "types", "more", "than", "4", "customers", "use", ".", "Show", "their", "type", "code", "."], "guid": 7603}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | What is the name of the customer with the worst credit score?", "sql": "SELECT cust_name FROM customer ORDER BY credit_score LIMIT 1", "example": {"db_id": "loan_1", "query": "SELECT cust_name FROM customer ORDER BY credit_score LIMIT 1", "query_toks": ["SELECT", "cust_name", "FROM", "customer", "ORDER", "BY", "credit_score", "LIMIT", "1"], "query_toks_no_value": ["select", "cust_name", "from", "customer", "order", "by", "credit_score", "limit", "value"], "question": "What is the name of the customer with the worst credit score?", "question_toks": ["What", "is", "the", "name", "of", "the", "customer", "with", "the", "worst", "credit", "score", "?"], "guid": 7604}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | For each account type, find the average account balance of customers with credit score lower than 50.", "sql": "SELECT avg(acc_bal) ,  acc_type FROM customer WHERE credit_score  <  50 GROUP BY acc_type", "example": {"db_id": "loan_1", "query": "SELECT avg(acc_bal) ,  acc_type FROM customer WHERE credit_score  <  50 GROUP BY acc_type", "query_toks": ["SELECT", "avg", "(", "acc_bal", ")", ",", "acc_type", "FROM", "customer", "WHERE", "credit_score", "<", "50", "GROUP", "BY", "acc_type"], "query_toks_no_value": ["select", "avg", "(", "acc_bal", ")", ",", "acc_type", "from", "customer", "where", "credit_score", "<", "value", "group", "by", "acc_type"], "question": "For each account type, find the average account balance of customers with credit score lower than 50.", "question_toks": ["For", "each", "account", "type", ",", "find", "the", "average", "account", "balance", "of", "customers", "with", "credit", "score", "lower", "than", "50", "."], "guid": 7605}}
{"text": "Customers: Customer_ID, Customer_Details; Staff: Staff_ID, Staff_Details; Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claim_Headers: Claim_Header_ID, Claim_Status_Code, Claim_Type_Code, Policy_ID, Date_of_Claim, Date_of_Settlement, Amount_Claimed, Amount_Piad; Claims_Documents: Claim_ID, Document_Type_Code, Created_by_Staff_ID, Created_Date; Claims_Processing_Stages: Claim_Stage_ID, Next_Claim_Stage_ID, Claim_Status_Name, Claim_Status_Description; Claims_Processing: Claim_Processing_ID, Claim_ID, Claim_Outcome_Code, Claim_Stage_ID, Staff_ID | Sort the customer names in alphabetical order.", "sql": "SELECT customer_details FROM customers ORDER BY customer_details", "example": {"db_id": "insurance_and_eClaims", "query": "SELECT customer_details FROM customers ORDER BY customer_details", "query_toks": ["SELECT", "customer_details", "FROM", "customers", "ORDER", "BY", "customer_details"], "query_toks_no_value": ["select", "customer_details", "from", "customers", "order", "by", "customer_details"], "question": "Sort the customer names in alphabetical order.", "question_toks": ["Sort", "the", "customer", "names", "in", "alphabetical", "order", "."], "guid": 7606}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | What is the name of the bank branch that has lent the greatest amount?", "sql": "SELECT T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id GROUP BY T1.bname ORDER BY sum(T2.amount) DESC LIMIT 1", "example": {"db_id": "loan_1", "query": "SELECT T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id GROUP BY T1.bname ORDER BY sum(T2.amount) DESC LIMIT 1", "query_toks": ["SELECT", "T1.bname", "FROM", "bank", "AS", "T1", "JOIN", "loan", "AS", "T2", "ON", "T1.branch_id", "=", "T2.branch_id", "GROUP", "BY", "T1.bname", "ORDER", "BY", "sum", "(", "T2.amount", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "bname", "from", "bank", "as", "t1", "join", "loan", "as", "t2", "on", "t1", ".", "branch_id", "=", "t2", ".", "branch_id", "group", "by", "t1", ".", "bname", "order", "by", "sum", "(", "t2", ".", "amount", ")", "desc", "limit", "value"], "question": "What is the name of the bank branch that has lent the greatest amount?", "question_toks": ["What", "is", "the", "name", "of", "the", "bank", "branch", "that", "has", "lent", "the", "greatest", "amount", "?"], "guid": 7607}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | What are the names of customers who have not taken a Mortage loan?", "sql": "SELECT cust_name FROM customer EXCEPT SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE T2.loan_type  =  'Mortgages'", "example": {"db_id": "loan_1", "query": "SELECT cust_name FROM customer EXCEPT SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE T2.loan_type  =  'Mortgages'", "query_toks": ["SELECT", "cust_name", "FROM", "customer", "EXCEPT", "SELECT", "T1.cust_name", "FROM", "customer", "AS", "T1", "JOIN", "loan", "AS", "T2", "ON", "T1.cust_id", "=", "T2.cust_id", "WHERE", "T2.loan_type", "=", "'Mortgages", "'"], "query_toks_no_value": ["select", "cust_name", "from", "customer", "except", "select", "t1", ".", "cust_name", "from", "customer", "as", "t1", "join", "loan", "as", "t2", "on", "t1", ".", "cust_id", "=", "t2", ".", "cust_id", "where", "t2", ".", "loan_type", "=", "value"], "question": "What are the names of customers who have not taken a Mortage loan?", "question_toks": ["What", "are", "the", "names", "of", "customers", "who", "have", "not", "taken", "a", "Mortage", "loan", "?"], "guid": 7608}}
{"text": "Addresses: Address_ID, address_details; Locations: Location_ID, Other_Details; Products: Product_ID, Product_Type_Code, Product_Name, Product_Price; Parties: Party_ID, Party_Details; Assets: Asset_ID, Other_Details; Channels: Channel_ID, Other_Details; Finances: Finance_ID, Other_Details; Events: Event_ID, Address_ID, Channel_ID, Event_Type_Code, Finance_ID, Location_ID; Products_in_Events: Product_in_Event_ID, Event_ID, Product_ID; Parties_in_Events: Party_ID, Event_ID, Role_Code | Show the product type codes that have both products with price higher than 4500 and products with price lower than 3000.", "sql": "SELECT Product_Type_Code FROM Products WHERE Product_Price  >  4500 INTERSECT SELECT Product_Type_Code FROM Products WHERE Product_Price  <  3000", "example": {"db_id": "solvency_ii", "query": "SELECT Product_Type_Code FROM Products WHERE Product_Price  >  4500 INTERSECT SELECT Product_Type_Code FROM Products WHERE Product_Price  <  3000", "query_toks": ["SELECT", "Product_Type_Code", "FROM", "Products", "WHERE", "Product_Price", ">", "4500", "INTERSECT", "SELECT", "Product_Type_Code", "FROM", "Products", "WHERE", "Product_Price", "<", "3000"], "query_toks_no_value": ["select", "product_type_code", "from", "products", "where", "product_price", ">", "value", "intersect", "select", "product_type_code", "from", "products", "where", "product_price", "<", "value"], "question": "Show the product type codes that have both products with price higher than 4500 and products with price lower than 3000.", "question_toks": ["Show", "the", "product", "type", "codes", "that", "have", "both", "products", "with", "price", "higher", "than", "4500", "and", "products", "with", "price", "lower", "than", "3000", "."], "guid": 7609}}
{"text": "Customers: Customer_ID, Customer_name; Services: Service_ID, Service_name; Available_Policies: Policy_ID, policy_type_code, Customer_Phone; Customers_Policies: Customer_ID, Policy_ID, Date_Opened, Date_Closed; First_Notification_of_Loss: FNOL_ID, Customer_ID, Policy_ID, Service_ID; Claims: Claim_ID, FNOL_ID, Effective_Date; Settlements: Settlement_ID, Claim_ID, Effective_Date, Settlement_Amount | What are all the customer phone numbers under the most popular policy type?", "sql": "SELECT customer_phone FROM available_policies WHERE policy_type_code  =  (SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1)", "example": {"db_id": "insurance_fnol", "query": "SELECT customer_phone FROM available_policies WHERE policy_type_code  =  (SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1)", "query_toks": ["SELECT", "customer_phone", "FROM", "available_policies", "WHERE", "policy_type_code", "=", "(", "SELECT", "policy_type_code", "FROM", "available_policies", "GROUP", "BY", "policy_type_code", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1", ")"], "query_toks_no_value": ["select", "customer_phone", "from", "available_policies", "where", "policy_type_code", "=", "(", "select", "policy_type_code", "from", "available_policies", "group", "by", "policy_type_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "value", ")"], "question": "What are all the customer phone numbers under the most popular policy type?", "question_toks": ["What", "are", "all", "the", "customer", "phone", "numbers", "under", "the", "most", "popular", "policy", "type", "?"], "guid": 7610}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | Find the state which has the most number of customers.", "sql": "SELECT state FROM bank GROUP BY state ORDER BY sum(no_of_customers) DESC LIMIT 1", "example": {"db_id": "loan_1", "query": "SELECT state FROM bank GROUP BY state ORDER BY sum(no_of_customers) DESC LIMIT 1", "query_toks": ["SELECT", "state", "FROM", "bank", "GROUP", "BY", "state", "ORDER", "BY", "sum", "(", "no_of_customers", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "state", "from", "bank", "group", "by", "state", "order", "by", "sum", "(", "no_of_customers", ")", "desc", "limit", "value"], "question": "Find the state which has the most number of customers.", "question_toks": ["Find", "the", "state", "which", "has", "the", "most", "number", "of", "customers", "."], "guid": 7611}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | Find the total amount of loans provided by bank branches in the state of New York.", "sql": "SELECT sum(T2.amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.state  =  'New York'", "example": {"db_id": "loan_1", "query": "SELECT sum(T2.amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.state  =  'New York'", "query_toks": ["SELECT", "sum", "(", "T2.amount", ")", "FROM", "bank", "AS", "T1", "JOIN", "loan", "AS", "T2", "ON", "T1.branch_id", "=", "T2.branch_id", "WHERE", "T1.state", "=", "'New", "York", "'"], "query_toks_no_value": ["select", "sum", "(", "t2", ".", "amount", ")", "from", "bank", "as", "t1", "join", "loan", "as", "t2", "on", "t1", ".", "branch_id", "=", "t2", ".", "branch_id", "where", "t1", ".", "state", "=", "value"], "question": "Find the total amount of loans provided by bank branches in the state of New York.", "question_toks": ["Find", "the", "total", "amount", "of", "loans", "provided", "by", "bank", "branches", "in", "the", "state", "of", "New", "York", "."], "guid": 7612}}
{"text": "Customers: Customer_ID, Customer_Details; Customer_Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claims: Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled; Settlements: Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID; Payments: Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment | Among all the claims, which settlements have a claimed amount that is no more than the average? List the claim start date.", "sql": "SELECT Date_Claim_Made FROM Claims WHERE Amount_Settled  <=  ( SELECT avg(Amount_Settled) FROM Claims )", "example": {"db_id": "insurance_policies", "query": "SELECT Date_Claim_Made FROM Claims WHERE Amount_Settled  <=  ( SELECT avg(Amount_Settled) FROM Claims )", "query_toks": ["SELECT", "Date_Claim_Made", "FROM", "Claims", "WHERE", "Amount_Settled", "<", "=", "(", "SELECT", "avg", "(", "Amount_Settled", ")", "FROM", "Claims", ")"], "query_toks_no_value": ["select", "date_claim_made", "from", "claims", "where", "amount_settled", "<", "=", "(", "select", "avg", "(", "amount_settled", ")", "from", "claims", ")"], "question": "Among all the claims, which settlements have a claimed amount that is no more than the average? List the claim start date.", "question_toks": ["Among", "all", "the", "claims", ",", "which", "settlements", "have", "a", "claimed", "amount", "that", "is", "no", "more", "than", "the", "average", "?", "List", "the", "claim", "start", "date", "."], "guid": 7613}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | What city and state is the bank with the name morningside in?", "sql": "SELECT city ,  state FROM bank WHERE bname  =  'morningside'", "example": {"db_id": "loan_1", "query": "SELECT city ,  state FROM bank WHERE bname  =  'morningside'", "query_toks": ["SELECT", "city", ",", "state", "FROM", "bank", "WHERE", "bname", "=", "'morningside", "'"], "query_toks_no_value": ["select", "city", ",", "state", "from", "bank", "where", "bname", "=", "value"], "question": "What city and state is the bank with the name morningside in?", "question_toks": ["What", "city", "and", "state", "is", "the", "bank", "with", "the", "name", "morningside", "in", "?"], "guid": 7614}}
{"text": "wrestler: Wrestler_ID, Name, Reign, Days_held, Location, Event; Elimination: Elimination_ID, Wrestler_ID, Team, Eliminated_By, Elimination_Move, Time | Return the names of wrestlers with fewer than 100 days held.", "sql": "SELECT Name FROM wrestler WHERE Days_held  <  100", "example": {"db_id": "wrestler", "query": "SELECT Name FROM wrestler WHERE Days_held  <  100", "query_toks": ["SELECT", "Name", "FROM", "wrestler", "WHERE", "Days_held", "<", "100"], "query_toks_no_value": ["select", "name", "from", "wrestler", "where", "days_held", "<", "value"], "question": "Return the names of wrestlers with fewer than 100 days held.", "question_toks": ["Return", "the", "names", "of", "wrestlers", "with", "fewer", "than", "100", "days", "held", "."], "guid": 3211}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | For each position, what is the minimum time students spent practicing?", "sql": "SELECT min(T2.HS) ,   T1.pPos FROM tryout AS T1 JOIN player AS T2 ON T1.pID  =  T2.pID GROUP BY T1.pPos", "example": {"db_id": "soccer_2", "query": "SELECT min(T2.HS) ,   T1.pPos FROM tryout AS T1 JOIN player AS T2 ON T1.pID  =  T2.pID GROUP BY T1.pPos", "query_toks": ["SELECT", "min", "(", "T2.HS", ")", ",", "T1.pPos", "FROM", "tryout", "AS", "T1", "JOIN", "player", "AS", "T2", "ON", "T1.pID", "=", "T2.pID", "GROUP", "BY", "T1.pPos"], "query_toks_no_value": ["select", "min", "(", "t2", ".", "hs", ")", ",", "t1", ".", "ppos", "from", "tryout", "as", "t1", "join", "player", "as", "t2", "on", "t1", ".", "pid", "=", "t2", ".", "pid", "group", "by", "t1", ".", "ppos"], "question": "For each position, what is the minimum time students spent practicing?", "question_toks": ["For", "each", "position", ",", "what", "is", "the", "minimum", "time", "students", "spent", "practicing", "?"], "guid": 3212}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | What are the states with colleges that have enrollments less than the some other college?", "sql": "SELECT DISTINCT state FROM college WHERE enr  <  (SELECT max(enr) FROM college)", "example": {"db_id": "soccer_2", "query": "SELECT DISTINCT state FROM college WHERE enr  <  (SELECT max(enr) FROM college)", "query_toks": ["SELECT", "DISTINCT", "state", "FROM", "college", "WHERE", "enr", "<", "(", "SELECT", "max", "(", "enr", ")", "FROM", "college", ")"], "query_toks_no_value": ["select", "distinct", "state", "from", "college", "where", "enr", "<", "(", "select", "max", "(", "enr", ")", "from", "college", ")"], "question": "What are the states with colleges that have enrollments less than the some other college?", "question_toks": ["What", "are", "the", "states", "with", "colleges", "that", "have", "enrollments", "less", "than", "the", "some", "other", "college", "?"], "guid": 3213}}
{"text": "swimmer: ID, name, Nationality, meter_100, meter_200, meter_300, meter_400, meter_500, meter_600, meter_700; stadium: ID, name, Capacity, City, Country, Opening_year; event: ID, Name, Stadium_ID, Year; record: ID, Result, Swimmer_ID, Event_ID | Find the name of the swimmer who has the most records.", "sql": "SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id GROUP BY t2.swimmer_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "swimming", "query": "SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id GROUP BY t2.swimmer_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "t1.name", "FROM", "swimmer", "AS", "t1", "JOIN", "record", "AS", "t2", "ON", "t1.id", "=", "t2.swimmer_id", "GROUP", "BY", "t2.swimmer_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "swimmer", "as", "t1", "join", "record", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "swimmer_id", "group", "by", "t2", ".", "swimmer_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Find the name of the swimmer who has the most records.", "question_toks": ["Find", "the", "name", "of", "the", "swimmer", "who", "has", "the", "most", "records", "."], "guid": 3214}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | How many hours do the players train on average?", "sql": "SELECT avg(HS) FROM Player", "example": {"db_id": "soccer_2", "query": "SELECT avg(HS) FROM Player", "query_toks": ["SELECT", "avg", "(", "HS", ")", "FROM", "Player"], "query_toks_no_value": ["select", "avg", "(", "hs", ")", "from", "player"], "question": "How many hours do the players train on average?", "question_toks": ["How", "many", "hours", "do", "the", "players", "train", "on", "average", "?"], "guid": 3215}}
{"text": "college: College_ID, Name, Leader_Name, College_Location; member: Member_ID, Name, Country, College_ID; round: Round_ID, Member_ID, Decoration_Theme, Rank_in_Round | Show the distinct leader names of colleges associated with members from country \"Canada\".", "sql": "SELECT DISTINCT T1.Leader_Name FROM college AS T1 JOIN member AS T2 ON T1.College_ID  =  T2.College_ID WHERE T2.Country  =  \"Canada\"", "example": {"db_id": "decoration_competition", "query": "SELECT DISTINCT T1.Leader_Name FROM college AS T1 JOIN member AS T2 ON T1.College_ID  =  T2.College_ID WHERE T2.Country  =  \"Canada\"", "query_toks": ["SELECT", "DISTINCT", "T1.Leader_Name", "FROM", "college", "AS", "T1", "JOIN", "member", "AS", "T2", "ON", "T1.College_ID", "=", "T2.College_ID", "WHERE", "T2.Country", "=", "``", "Canada", "''"], "query_toks_no_value": ["select", "distinct", "t1", ".", "leader_name", "from", "college", "as", "t1", "join", "member", "as", "t2", "on", "t1", ".", "college_id", "=", "t2", ".", "college_id", "where", "t2", ".", "country", "=", "value"], "question": "Show the distinct leader names of colleges associated with members from country \"Canada\".", "question_toks": ["Show", "the", "distinct", "leader", "names", "of", "colleges", "associated", "with", "members", "from", "country", "``", "Canada", "''", "."], "guid": 3216}}
{"text": "country: Country_id, Country_name, Capital, Official_native_language; team: Team_id, Name; match_season: Season, Player, Position, Country, Team, Draft_Pick_Number, Draft_Class, College; player: Player_ID, Player, Years_Played, Total_WL, Singles_WL, Doubles_WL, Team | Count the number of different teams involved in match season.", "sql": "SELECT count(DISTINCT Team) FROM match_season", "example": {"db_id": "match_season", "query": "SELECT count(DISTINCT Team) FROM match_season", "query_toks": ["SELECT", "count", "(", "DISTINCT", "Team", ")", "FROM", "match_season"], "query_toks_no_value": ["select", "count", "(", "distinct", "team", ")", "from", "match_season"], "question": "Count the number of different teams involved in match season.", "question_toks": ["Count", "the", "number", "of", "different", "teams", "involved", "in", "match", "season", "."], "guid": 3217}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | What are the names of the schools with some players in the mid position but no goalies?", "sql": "SELECT cName FROM  tryout WHERE pPos  =  'mid' EXCEPT SELECT cName FROM  tryout WHERE pPos  =  'goalie'", "example": {"db_id": "soccer_2", "query": "SELECT cName FROM  tryout WHERE pPos  =  'mid' EXCEPT SELECT cName FROM  tryout WHERE pPos  =  'goalie'", "query_toks": ["SELECT", "cName", "FROM", "tryout", "WHERE", "pPos", "=", "'mid", "'", "EXCEPT", "SELECT", "cName", "FROM", "tryout", "WHERE", "pPos", "=", "'goalie", "'"], "query_toks_no_value": ["select", "cname", "from", "tryout", "where", "ppos", "=", "value", "except", "select", "cname", "from", "tryout", "where", "ppos", "=", "value"], "question": "What are the names of the schools with some players in the mid position but no goalies?", "question_toks": ["What", "are", "the", "names", "of", "the", "schools", "with", "some", "players", "in", "the", "mid", "position", "but", "no", "goalies", "?"], "guid": 3218}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | What is the id of the shortest trip?", "sql": "SELECT id FROM trip ORDER BY duration LIMIT 1", "example": {"db_id": "bike_1", "query": "SELECT id FROM trip ORDER BY duration LIMIT 1", "query_toks": ["SELECT", "id", "FROM", "trip", "ORDER", "BY", "duration", "LIMIT", "1"], "query_toks_no_value": ["select", "id", "from", "trip", "order", "by", "duration", "limit", "value"], "question": "What is the id of the shortest trip?", "question_toks": ["What", "is", "the", "id", "of", "the", "shortest", "trip", "?"], "guid": 3219}}
{"text": "gymnast: Gymnast_ID, Floor_Exercise_Points, Pommel_Horse_Points, Rings_Points, Vault_Points, Parallel_Bars_Points, Horizontal_Bar_Points, Total_Points; people: People_ID, Name, Age, Height, Hometown | What are the names of people in ascending alphabetical order?", "sql": "SELECT Name FROM People ORDER BY Name ASC", "example": {"db_id": "gymnast", "query": "SELECT Name FROM People ORDER BY Name ASC", "query_toks": ["SELECT", "Name", "FROM", "People", "ORDER", "BY", "Name", "ASC"], "query_toks_no_value": ["select", "name", "from", "people", "order", "by", "name", "asc"], "question": "What are the names of people in ascending alphabetical order?", "question_toks": ["What", "are", "the", "names", "of", "people", "in", "ascending", "alphabetical", "order", "?"], "guid": 3220}}
{"text": "players: player_id, first_name, last_name, hand, birth_date, country_code; matches: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank; rankings: ranking_date, ranking, player_id, ranking_points, tours | Find the highest rank of losers in all matches.", "sql": "SELECT min(loser_rank) FROM matches", "example": {"db_id": "wta_1", "query": "SELECT min(loser_rank) FROM matches", "query_toks": ["SELECT", "min", "(", "loser_rank", ")", "FROM", "matches"], "query_toks_no_value": ["select", "min", "(", "loser_rank", ")", "from", "matches"], "question": "Find the highest rank of losers in all matches.", "question_toks": ["Find", "the", "highest", "rank", "of", "losers", "in", "all", "matches", "."], "guid": 3221}}
{"text": "players: player_id, first_name, last_name, hand, birth_date, country_code; matches: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank; rankings: ranking_date, ranking, player_id, ranking_points, tours | List the names of all winners who played in both 2013 and 2016.", "sql": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016", "example": {"db_id": "wta_1", "query": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016", "query_toks": ["SELECT", "winner_name", "FROM", "matches", "WHERE", "YEAR", "=", "2013", "INTERSECT", "SELECT", "winner_name", "FROM", "matches", "WHERE", "YEAR", "=", "2016"], "query_toks_no_value": ["select", "winner_name", "from", "matches", "where", "year", "=", "value", "intersect", "select", "winner_name", "from", "matches", "where", "year", "=", "value"], "question": "List the names of all winners who played in both 2013 and 2016.", "question_toks": ["List", "the", "names", "of", "all", "winners", "who", "played", "in", "both", "2013", "and", "2016", "."], "guid": 3222}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | What are the names of players whose training hours is between 500 and 1500?", "sql": "SELECT pName FROM Player WHERE HS BETWEEN 500 AND 1500", "example": {"db_id": "soccer_2", "query": "SELECT pName FROM Player WHERE HS BETWEEN 500 AND 1500", "query_toks": ["SELECT", "pName", "FROM", "Player", "WHERE", "HS", "BETWEEN", "500", "AND", "1500"], "query_toks_no_value": ["select", "pname", "from", "player", "where", "hs", "between", "value", "and", "value"], "question": "What are the names of players whose training hours is between 500 and 1500?", "question_toks": ["What", "are", "the", "names", "of", "players", "whose", "training", "hours", "is", "between", "500", "and", "1500", "?"], "guid": 3223}}
{"text": "basketball_match: Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home; university: School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference | What is the highest acc percent score in the competition?", "sql": "SELECT acc_percent FROM basketball_match ORDER BY acc_percent DESC LIMIT 1", "example": {"db_id": "university_basketball", "query": "SELECT acc_percent FROM basketball_match ORDER BY acc_percent DESC LIMIT 1", "query_toks": ["SELECT", "acc_percent", "FROM", "basketball_match", "ORDER", "BY", "acc_percent", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "acc_percent", "from", "basketball_match", "order", "by", "acc_percent", "desc", "limit", "value"], "question": "What is the highest acc percent score in the competition?", "question_toks": ["What", "is", "the", "highest", "acc", "percent", "score", "in", "the", "competition", "?"], "guid": 3224}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | What is the average longitude of stations that never had bike availability more than 10?", "sql": "SELECT avg(long) FROM station WHERE id NOT IN (SELECT station_id FROM status GROUP BY station_id HAVING max(bikes_available)  >  10)", "example": {"db_id": "bike_1", "query": "SELECT avg(long) FROM station WHERE id NOT IN (SELECT station_id FROM status GROUP BY station_id HAVING max(bikes_available)  >  10)", "query_toks": ["SELECT", "avg", "(", "long", ")", "FROM", "station", "WHERE", "id", "NOT", "IN", "(", "SELECT", "station_id", "FROM", "status", "GROUP", "BY", "station_id", "HAVING", "max", "(", "bikes_available", ")", ">", "10", ")"], "query_toks_no_value": ["select", "avg", "(", "long", ")", "from", "station", "where", "id", "not", "in", "(", "select", "station_id", "from", "status", "group", "by", "station_id", "having", "max", "(", "bikes_available", ")", ">", "value", ")"], "question": "What is the average longitude of stations that never had bike availability more than 10?", "question_toks": ["What", "is", "the", "average", "longitude", "of", "stations", "that", "never", "had", "bike", "availability", "more", "than", "10", "?"], "guid": 3225}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | In zip code 94107, on which day neither Fog nor Rain was not observed?", "sql": "SELECT date FROM weather WHERE zip_code  =  94107 AND EVENTS != \"Fog\" AND EVENTS != \"Rain\"", "example": {"db_id": "bike_1", "query": "SELECT date FROM weather WHERE zip_code  =  94107 AND EVENTS != \"Fog\" AND EVENTS != \"Rain\"", "query_toks": ["SELECT", "date", "FROM", "weather", "WHERE", "zip_code", "=", "94107", "AND", "EVENTS", "!", "=", "``", "Fog", "''", "AND", "EVENTS", "!", "=", "``", "Rain", "''"], "query_toks_no_value": ["select", "date", "from", "weather", "where", "zip_code", "=", "value", "and", "events", "!", "=", "value", "and", "events", "!", "=", "value"], "question": "In zip code 94107, on which day neither Fog nor Rain was not observed?", "question_toks": ["In", "zip", "code", "94107", ",", "on", "which", "day", "neither", "Fog", "nor", "Rain", "was", "not", "observed", "?"], "guid": 3226}}
{"text": "basketball_match: Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home; university: School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference | Find the location and all games score of the school that has Clemson as its team name.", "sql": "SELECT t2.All_Games ,  t1.location FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE team_name  =  'Clemson'", "example": {"db_id": "university_basketball", "query": "SELECT t2.All_Games ,  t1.location FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE team_name  =  'Clemson'", "query_toks": ["SELECT", "t2.All_Games", ",", "t1.location", "FROM", "university", "AS", "t1", "JOIN", "basketball_match", "AS", "t2", "ON", "t1.school_id", "=", "t2.school_id", "WHERE", "team_name", "=", "'Clemson", "'"], "query_toks_no_value": ["select", "t2", ".", "all_games", ",", "t1", ".", "location", "from", "university", "as", "t1", "join", "basketball_match", "as", "t2", "on", "t1", ".", "school_id", "=", "t2", ".", "school_id", "where", "team_name", "=", "value"], "question": "Find the location and all games score of the school that has Clemson as its team name.", "question_toks": ["Find", "the", "location", "and", "all", "games", "score", "of", "the", "school", "that", "has", "Clemson", "as", "its", "team", "name", "."], "guid": 3227}}
{"text": "gymnast: Gymnast_ID, Floor_Exercise_Points, Pommel_Horse_Points, Rings_Points, Vault_Points, Parallel_Bars_Points, Horizontal_Bar_Points, Total_Points; people: People_ID, Name, Age, Height, Hometown | What are the names of gymnasts?", "sql": "SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID", "example": {"db_id": "gymnast", "query": "SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID", "query_toks": ["SELECT", "T2.Name", "FROM", "gymnast", "AS", "T1", "JOIN", "people", "AS", "T2", "ON", "T1.Gymnast_ID", "=", "T2.People_ID"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "gymnast", "as", "t1", "join", "people", "as", "t2", "on", "t1", ".", "gymnast_id", "=", "t2", ".", "people_id"], "question": "What are the names of gymnasts?", "question_toks": ["What", "are", "the", "names", "of", "gymnasts", "?"], "guid": 3228}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | What is the 3 most common cloud cover rates in the region of zip code 94107?", "sql": "SELECT cloud_cover FROM weather WHERE zip_code  =  94107 GROUP BY cloud_cover ORDER BY COUNT (*) DESC LIMIT 3", "example": {"db_id": "bike_1", "query": "SELECT cloud_cover FROM weather WHERE zip_code  =  94107 GROUP BY cloud_cover ORDER BY COUNT (*) DESC LIMIT 3", "query_toks": ["SELECT", "cloud_cover", "FROM", "weather", "WHERE", "zip_code", "=", "94107", "GROUP", "BY", "cloud_cover", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "3"], "query_toks_no_value": ["select", "cloud_cover", "from", "weather", "where", "zip_code", "=", "value", "group", "by", "cloud_cover", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the 3 most common cloud cover rates in the region of zip code 94107?", "question_toks": ["What", "is", "the", "3", "most", "common", "cloud", "cover", "rates", "in", "the", "region", "of", "zip", "code", "94107", "?"], "guid": 3229}}
{"text": "swimmer: ID, name, Nationality, meter_100, meter_200, meter_300, meter_400, meter_500, meter_600, meter_700; stadium: ID, name, Capacity, City, Country, Opening_year; event: ID, Name, Stadium_ID, Year; record: ID, Result, Swimmer_ID, Event_ID | Find the country that has the most stadiums.", "sql": "SELECT country FROM stadium GROUP BY country ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "swimming", "query": "SELECT country FROM stadium GROUP BY country ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "country", "FROM", "stadium", "GROUP", "BY", "country", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "country", "from", "stadium", "group", "by", "country", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Find the country that has the most stadiums.", "question_toks": ["Find", "the", "country", "that", "has", "the", "most", "stadiums", "."], "guid": 3230}}
{"text": "poker_player: Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings; people: People_ID, Nationality, Name, Birth_Date, Height | How many poker players are there?", "sql": "SELECT count(*) FROM poker_player", "example": {"db_id": "poker_player", "query": "SELECT count(*) FROM poker_player", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "poker_player"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "poker_player"], "question": "How many poker players are there?", "question_toks": ["How", "many", "poker", "players", "are", "there", "?"], "guid": 3231}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | Find the names of the students who are in the position of striker and got a yes tryout decision.", "sql": "SELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes' AND T2.pPos  =  'striker'", "example": {"db_id": "soccer_2", "query": "SELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes' AND T2.pPos  =  'striker'", "query_toks": ["SELECT", "T1.pName", "FROM", "player", "AS", "T1", "JOIN", "tryout", "AS", "T2", "ON", "T1.pID", "=", "T2.pID", "WHERE", "T2.decision", "=", "'yes", "'", "AND", "T2.pPos", "=", "'striker", "'"], "query_toks_no_value": ["select", "t1", ".", "pname", "from", "player", "as", "t1", "join", "tryout", "as", "t2", "on", "t1", ".", "pid", "=", "t2", ".", "pid", "where", "t2", ".", "decision", "=", "value", "and", "t2", ".", "ppos", "=", "value"], "question": "Find the names of the students who are in the position of striker and got a yes tryout decision.", "question_toks": ["Find", "the", "names", "of", "the", "students", "who", "are", "in", "the", "position", "of", "striker", "and", "got", "a", "yes", "tryout", "decision", "."], "guid": 3232}}
{"text": "mountain: Mountain_ID, Name, Height, Prominence, Range, Country; climber: Climber_ID, Name, Country, Time, Points, Mountain_ID | List the names of mountains that do not have any climber.", "sql": "SELECT Name FROM mountain WHERE Mountain_ID NOT IN (SELECT Mountain_ID FROM climber)", "example": {"db_id": "climbing", "query": "SELECT Name FROM mountain WHERE Mountain_ID NOT IN (SELECT Mountain_ID FROM climber)", "query_toks": ["SELECT", "Name", "FROM", "mountain", "WHERE", "Mountain_ID", "NOT", "IN", "(", "SELECT", "Mountain_ID", "FROM", "climber", ")"], "query_toks_no_value": ["select", "name", "from", "mountain", "where", "mountain_id", "not", "in", "(", "select", "mountain_id", "from", "climber", ")"], "question": "List the names of mountains that do not have any climber.", "question_toks": ["List", "the", "names", "of", "mountains", "that", "do", "not", "have", "any", "climber", "."], "guid": 3233}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | What are the names of all the circuits that are in the UK or Malaysia?", "sql": "SELECT name FROM circuits WHERE country = \"UK\" OR country = \"Malaysia\"", "example": {"db_id": "formula_1", "query": "SELECT name FROM circuits WHERE country = \"UK\" OR country = \"Malaysia\"", "query_toks": ["SELECT", "name", "FROM", "circuits", "WHERE", "country", "=", "``", "UK", "''", "OR", "country", "=", "``", "Malaysia", "''"], "query_toks_no_value": ["select", "name", "from", "circuits", "where", "country", "=", "value", "or", "country", "=", "value"], "question": "What are the names of all the circuits that are in the UK or Malaysia?", "question_toks": ["What", "are", "the", "names", "of", "all", "the", "circuits", "that", "are", "in", "the", "UK", "or", "Malaysia", "?"], "guid": 3234}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | On average, how old are the members in the club \"Hopkins Student Enterprises\"?", "sql": "SELECT avg(t3.age) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Hopkins Student Enterprises\"", "example": {"db_id": "club_1", "query": "SELECT avg(t3.age) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Hopkins Student Enterprises\"", "query_toks": ["SELECT", "avg", "(", "t3.age", ")", "FROM", "club", "AS", "t1", "JOIN", "member_of_club", "AS", "t2", "ON", "t1.clubid", "=", "t2.clubid", "JOIN", "student", "AS", "t3", "ON", "t2.stuid", "=", "t3.stuid", "WHERE", "t1.clubname", "=", "``", "Hopkins", "Student", "Enterprises", "''"], "query_toks_no_value": ["select", "avg", "(", "t3", ".", "age", ")", "from", "club", "as", "t1", "join", "member_of_club", "as", "t2", "on", "t1", ".", "clubid", "=", "t2", ".", "clubid", "join", "student", "as", "t3", "on", "t2", ".", "stuid", "=", "t3", ".", "stuid", "where", "t1", ".", "clubname", "=", "value"], "question": "On average, how old are the members in the club \"Hopkins Student Enterprises\"?", "question_toks": ["On", "average", ",", "how", "old", "are", "the", "members", "in", "the", "club", "``", "Hopkins", "Student", "Enterprises", "''", "?"], "guid": 3235}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | Give me the start station and end station for the trips with the three oldest id.", "sql": "SELECT start_station_name ,  end_station_name FROM trip ORDER BY id LIMIT 3", "example": {"db_id": "bike_1", "query": "SELECT start_station_name ,  end_station_name FROM trip ORDER BY id LIMIT 3", "query_toks": ["SELECT", "start_station_name", ",", "end_station_name", "FROM", "trip", "ORDER", "BY", "id", "LIMIT", "3"], "query_toks_no_value": ["select", "start_station_name", ",", "end_station_name", "from", "trip", "order", "by", "id", "limit", "value"], "question": "Give me the start station and end station for the trips with the three oldest id.", "question_toks": ["Give", "me", "the", "start", "station", "and", "end", "station", "for", "the", "trips", "with", "the", "three", "oldest", "id", "."], "guid": 3236}}
{"text": "body_builder: Body_Builder_ID, People_ID, Snatch, Clean_Jerk, Total; people: People_ID, Name, Height, Weight, Birth_Date, Birth_Place | What is the average snatch score of body builders?", "sql": "SELECT avg(Snatch) FROM body_builder", "example": {"db_id": "body_builder", "query": "SELECT avg(Snatch) FROM body_builder", "query_toks": ["SELECT", "avg", "(", "Snatch", ")", "FROM", "body_builder"], "query_toks_no_value": ["select", "avg", "(", "snatch", ")", "from", "body_builder"], "question": "What is the average snatch score of body builders?", "question_toks": ["What", "is", "the", "average", "snatch", "score", "of", "body", "builders", "?"], "guid": 3237}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | What is the average bike availablility for stations not in Palo Alto?", "sql": "SELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city  =  \"Palo Alto\")", "example": {"db_id": "bike_1", "query": "SELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city  =  \"Palo Alto\")", "query_toks": ["SELECT", "avg", "(", "bikes_available", ")", "FROM", "status", "WHERE", "station_id", "NOT", "IN", "(", "SELECT", "id", "FROM", "station", "WHERE", "city", "=", "``", "Palo", "Alto", "''", ")"], "query_toks_no_value": ["select", "avg", "(", "bikes_available", ")", "from", "status", "where", "station_id", "not", "in", "(", "select", "id", "from", "station", "where", "city", "=", "value", ")"], "question": "What is the average bike availablility for stations not in Palo Alto?", "question_toks": ["What", "is", "the", "average", "bike", "availablility", "for", "stations", "not", "in", "Palo", "Alto", "?"], "guid": 3238}}
{"text": "body_builder: Body_Builder_ID, People_ID, Snatch, Clean_Jerk, Total; people: People_ID, Name, Height, Weight, Birth_Date, Birth_Place | What are the birthdays of people in ascending order of height?", "sql": "SELECT Birth_Date FROM People ORDER BY Height ASC", "example": {"db_id": "body_builder", "query": "SELECT Birth_Date FROM People ORDER BY Height ASC", "query_toks": ["SELECT", "Birth_Date", "FROM", "People", "ORDER", "BY", "Height", "ASC"], "query_toks_no_value": ["select", "birth_date", "from", "people", "order", "by", "height", "asc"], "question": "What are the birthdays of people in ascending order of height?", "question_toks": ["What", "are", "the", "birthdays", "of", "people", "in", "ascending", "order", "of", "height", "?"], "guid": 3239}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | Find the names of either colleges in LA with greater than 15000 size or in state AZ with less than 13000 enrollment.", "sql": "SELECT cName FROM College WHERE enr  <  13000 AND state = \"AZ\" UNION SELECT cName FROM College WHERE enr  >  15000 AND state = \"LA\"", "example": {"db_id": "soccer_2", "query": "SELECT cName FROM College WHERE enr  <  13000 AND state = \"AZ\" UNION SELECT cName FROM College WHERE enr  >  15000 AND state = \"LA\"", "query_toks": ["SELECT", "cName", "FROM", "College", "WHERE", "enr", "<", "13000", "AND", "state", "=", "``", "AZ", "''", "UNION", "SELECT", "cName", "FROM", "College", "WHERE", "enr", ">", "15000", "AND", "state", "=", "``", "LA", "''"], "query_toks_no_value": ["select", "cname", "from", "college", "where", "enr", "<", "value", "and", "state", "=", "value", "union", "select", "cname", "from", "college", "where", "enr", ">", "value", "and", "state", "=", "value"], "question": "Find the names of either colleges in LA with greater than 15000 size or in state AZ with less than 13000 enrollment.", "question_toks": ["Find", "the", "names", "of", "either", "colleges", "in", "LA", "with", "greater", "than", "15000", "size", "or", "in", "state", "AZ", "with", "less", "than", "13000", "enrollment", "."], "guid": 3240}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | Which clubs are located at \"AKW\"? Return the club names.", "sql": "SELECT clubname FROM club WHERE clublocation  =  \"AKW\"", "example": {"db_id": "club_1", "query": "SELECT clubname FROM club WHERE clublocation  =  \"AKW\"", "query_toks": ["SELECT", "clubname", "FROM", "club", "WHERE", "clublocation", "=", "``", "AKW", "''"], "query_toks_no_value": ["select", "clubname", "from", "club", "where", "clublocation", "=", "value"], "question": "Which clubs are located at \"AKW\"? Return the club names.", "question_toks": ["Which", "clubs", "are", "located", "at", "``", "AKW", "''", "?", "Return", "the", "club", "names", "."], "guid": 3241}}
{"text": "wrestler: Wrestler_ID, Name, Reign, Days_held, Location, Event; Elimination: Elimination_ID, Wrestler_ID, Team, Eliminated_By, Elimination_Move, Time | What are the times of elimination for any instances in which the elimination was done by Punk or Orton?", "sql": "SELECT TIME FROM elimination WHERE Eliminated_By  =  \"Punk\" OR Eliminated_By  =  \"Orton\"", "example": {"db_id": "wrestler", "query": "SELECT TIME FROM elimination WHERE Eliminated_By  =  \"Punk\" OR Eliminated_By  =  \"Orton\"", "query_toks": ["SELECT", "TIME", "FROM", "elimination", "WHERE", "Eliminated_By", "=", "``", "Punk", "''", "OR", "Eliminated_By", "=", "``", "Orton", "''"], "query_toks_no_value": ["select", "time", "from", "elimination", "where", "eliminated_by", "=", "value", "or", "eliminated_by", "=", "value"], "question": "What are the times of elimination for any instances in which the elimination was done by Punk or Orton?", "question_toks": ["What", "are", "the", "times", "of", "elimination", "for", "any", "instances", "in", "which", "the", "elimination", "was", "done", "by", "Punk", "or", "Orton", "?"], "guid": 3242}}
{"text": "players: player_id, first_name, last_name, hand, birth_date, country_code; matches: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank; rankings: ranking_date, ranking, player_id, ranking_points, tours | Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.", "sql": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1", "example": {"db_id": "wta_1", "query": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1", "query_toks": ["SELECT", "winner_name", "FROM", "matches", "WHERE", "tourney_name", "=", "'Australian", "Open", "'", "ORDER", "BY", "winner_rank_points", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "winner_name", "from", "matches", "where", "tourney_name", "=", "value", "order", "by", "winner_rank_points", "desc", "limit", "value"], "question": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.", "question_toks": ["Find", "the", "name", "of", "the", "winner", "who", "has", "the", "highest", "rank", "points", "and", "participated", "in", "the", "Australian", "Open", "tourney", "."], "guid": 3243}}
{"text": "poker_player: Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings; people: People_ID, Nationality, Name, Birth_Date, Height | Return the birth date of the poker player with the lowest earnings.", "sql": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1", "example": {"db_id": "poker_player", "query": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1", "query_toks": ["SELECT", "T1.Birth_Date", "FROM", "people", "AS", "T1", "JOIN", "poker_player", "AS", "T2", "ON", "T1.People_ID", "=", "T2.People_ID", "ORDER", "BY", "T2.Earnings", "ASC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "birth_date", "from", "people", "as", "t1", "join", "poker_player", "as", "t2", "on", "t1", ".", "people_id", "=", "t2", ".", "people_id", "order", "by", "t2", ".", "earnings", "asc", "limit", "value"], "question": "Return the birth date of the poker player with the lowest earnings.", "question_toks": ["Return", "the", "birth", "date", "of", "the", "poker", "player", "with", "the", "lowest", "earnings", "."], "guid": 3244}}
{"text": "poker_player: Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings; people: People_ID, Nationality, Name, Birth_Date, Height | Return the average earnings across all poker players.", "sql": "SELECT avg(Earnings) FROM poker_player", "example": {"db_id": "poker_player", "query": "SELECT avg(Earnings) FROM poker_player", "query_toks": ["SELECT", "avg", "(", "Earnings", ")", "FROM", "poker_player"], "query_toks_no_value": ["select", "avg", "(", "earnings", ")", "from", "poker_player"], "question": "Return the average earnings across all poker players.", "question_toks": ["Return", "the", "average", "earnings", "across", "all", "poker", "players", "."], "guid": 3245}}
{"text": "players: player_id, first_name, last_name, hand, birth_date, country_code; matches: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank; rankings: ranking_date, ranking, player_id, ranking_points, tours | What are the names of players who won in both 2013 and 2016?", "sql": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016", "example": {"db_id": "wta_1", "query": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016", "query_toks": ["SELECT", "winner_name", "FROM", "matches", "WHERE", "YEAR", "=", "2013", "INTERSECT", "SELECT", "winner_name", "FROM", "matches", "WHERE", "YEAR", "=", "2016"], "query_toks_no_value": ["select", "winner_name", "from", "matches", "where", "year", "=", "value", "intersect", "select", "winner_name", "from", "matches", "where", "year", "=", "value"], "question": "What are the names of players who won in both 2013 and 2016?", "question_toks": ["What", "are", "the", "names", "of", "players", "who", "won", "in", "both", "2013", "and", "2016", "?"], "guid": 3246}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | What are the 3 most common cloud covers in the zip code of 94107?", "sql": "SELECT cloud_cover FROM weather WHERE zip_code  =  94107 GROUP BY cloud_cover ORDER BY COUNT (*) DESC LIMIT 3", "example": {"db_id": "bike_1", "query": "SELECT cloud_cover FROM weather WHERE zip_code  =  94107 GROUP BY cloud_cover ORDER BY COUNT (*) DESC LIMIT 3", "query_toks": ["SELECT", "cloud_cover", "FROM", "weather", "WHERE", "zip_code", "=", "94107", "GROUP", "BY", "cloud_cover", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "3"], "query_toks_no_value": ["select", "cloud_cover", "from", "weather", "where", "zip_code", "=", "value", "group", "by", "cloud_cover", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What are the 3 most common cloud covers in the zip code of 94107?", "question_toks": ["What", "are", "the", "3", "most", "common", "cloud", "covers", "in", "the", "zip", "code", "of", "94107", "?"], "guid": 3247}}
{"text": "country: Country_id, Country_name, Capital, Official_native_language; team: Team_id, Name; match_season: Season, Player, Position, Country, Team, Draft_Pick_Number, Draft_Class, College; player: Player_ID, Player, Years_Played, Total_WL, Singles_WL, Doubles_WL, Team | Show the positions of the players from the team with name \"Ryley Goldner\".", "sql": "SELECT T1.Position FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  \"Ryley Goldner\"", "example": {"db_id": "match_season", "query": "SELECT T1.Position FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  \"Ryley Goldner\"", "query_toks": ["SELECT", "T1.Position", "FROM", "match_season", "AS", "T1", "JOIN", "team", "AS", "T2", "ON", "T1.Team", "=", "T2.Team_id", "WHERE", "T2.Name", "=", "``", "Ryley", "Goldner", "''"], "query_toks_no_value": ["select", "t1", ".", "position", "from", "match_season", "as", "t1", "join", "team", "as", "t2", "on", "t1", ".", "team", "=", "t2", ".", "team_id", "where", "t2", ".", "name", "=", "value"], "question": "Show the positions of the players from the team with name \"Ryley Goldner\".", "question_toks": ["Show", "the", "positions", "of", "the", "players", "from", "the", "team", "with", "name", "``", "Ryley", "Goldner", "''", "."], "guid": 3248}}
{"text": "country: Country_id, Country_name, Capital, Official_native_language; team: Team_id, Name; match_season: Season, Player, Position, Country, Team, Draft_Pick_Number, Draft_Class, College; player: Player_ID, Player, Years_Played, Total_WL, Singles_WL, Doubles_WL, Team | What are the different positions of players from UCLA or Duke colleges?", "sql": "SELECT DISTINCT POSITION FROM match_season WHERE College  =  \"UCLA\" OR College  =  \"Duke\"", "example": {"db_id": "match_season", "query": "SELECT DISTINCT POSITION FROM match_season WHERE College  =  \"UCLA\" OR College  =  \"Duke\"", "query_toks": ["SELECT", "DISTINCT", "POSITION", "FROM", "match_season", "WHERE", "College", "=", "``", "UCLA", "''", "OR", "College", "=", "``", "Duke", "''"], "query_toks_no_value": ["select", "distinct", "position", "from", "match_season", "where", "college", "=", "value", "or", "college", "=", "value"], "question": "What are the different positions of players from UCLA or Duke colleges?", "question_toks": ["What", "are", "the", "different", "positions", "of", "players", "from", "UCLA", "or", "Duke", "colleges", "?"], "guid": 3249}}
{"text": "players: player_id, first_name, last_name, hand, birth_date, country_code; matches: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank; rankings: ranking_date, ranking, player_id, ranking_points, tours | What is the name of the winner who has won the most matches, and how many rank points does this player have?", "sql": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "wta_1", "query": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "winner_name", ",", "winner_rank_points", "FROM", "matches", "GROUP", "BY", "winner_name", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "winner_name", ",", "winner_rank_points", "from", "matches", "group", "by", "winner_name", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the name of the winner who has won the most matches, and how many rank points does this player have?", "question_toks": ["What", "is", "the", "name", "of", "the", "winner", "who", "has", "won", "the", "most", "matches", ",", "and", "how", "many", "rank", "points", "does", "this", "player", "have", "?"], "guid": 3250}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | What is the maximum training hours for the students whose training hours is greater than 1000 in different positions?", "sql": "SELECT max(T1.HS) ,  pPos FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T1.HS  >  1000 GROUP BY T2.pPos", "example": {"db_id": "soccer_2", "query": "SELECT max(T1.HS) ,  pPos FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T1.HS  >  1000 GROUP BY T2.pPos", "query_toks": ["SELECT", "max", "(", "T1.HS", ")", ",", "pPos", "FROM", "player", "AS", "T1", "JOIN", "tryout", "AS", "T2", "ON", "T1.pID", "=", "T2.pID", "WHERE", "T1.HS", ">", "1000", "GROUP", "BY", "T2.pPos"], "query_toks_no_value": ["select", "max", "(", "t1", ".", "hs", ")", ",", "ppos", "from", "player", "as", "t1", "join", "tryout", "as", "t2", "on", "t1", ".", "pid", "=", "t2", ".", "pid", "where", "t1", ".", "hs", ">", "value", "group", "by", "t2", ".", "ppos"], "question": "What is the maximum training hours for the students whose training hours is greater than 1000 in different positions?", "question_toks": ["What", "is", "the", "maximum", "training", "hours", "for", "the", "students", "whose", "training", "hours", "is", "greater", "than", "1000", "in", "different", "positions", "?"], "guid": 3251}}
{"text": "wrestler: Wrestler_ID, Name, Reign, Days_held, Location, Event; Elimination: Elimination_ID, Wrestler_ID, Team, Eliminated_By, Elimination_Move, Time | Show the reign and days held of wrestlers.", "sql": "SELECT Reign ,  Days_held FROM wrestler", "example": {"db_id": "wrestler", "query": "SELECT Reign ,  Days_held FROM wrestler", "query_toks": ["SELECT", "Reign", ",", "Days_held", "FROM", "wrestler"], "query_toks_no_value": ["select", "reign", ",", "days_held", "from", "wrestler"], "question": "Show the reign and days held of wrestlers.", "question_toks": ["Show", "the", "reign", "and", "days", "held", "of", "wrestlers", "."], "guid": 3252}}
{"text": "body_builder: Body_Builder_ID, People_ID, Snatch, Clean_Jerk, Total; people: People_ID, Name, Height, Weight, Birth_Date, Birth_Place | What are the names of body builders?", "sql": "SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID", "example": {"db_id": "body_builder", "query": "SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID", "query_toks": ["SELECT", "T2.Name", "FROM", "body_builder", "AS", "T1", "JOIN", "people", "AS", "T2", "ON", "T1.People_ID", "=", "T2.People_ID"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "body_builder", "as", "t1", "join", "people", "as", "t2", "on", "t1", ".", "people_id", "=", "t2", ".", "people_id"], "question": "What are the names of body builders?", "question_toks": ["What", "are", "the", "names", "of", "body", "builders", "?"], "guid": 3253}}
{"text": "swimmer: ID, name, Nationality, meter_100, meter_200, meter_300, meter_400, meter_500, meter_600, meter_700; stadium: ID, name, Capacity, City, Country, Opening_year; event: ID, Name, Stadium_ID, Year; record: ID, Result, Swimmer_ID, Event_ID | How many stadiums are not in country \"Russia\"?", "sql": "SELECT count(*) FROM stadium WHERE country != 'Russia'", "example": {"db_id": "swimming", "query": "SELECT count(*) FROM stadium WHERE country != 'Russia'", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "stadium", "WHERE", "country", "!", "=", "'Russia", "'"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "stadium", "where", "country", "!", "=", "value"], "question": "How many stadiums are not in country \"Russia\"?", "question_toks": ["How", "many", "stadiums", "are", "not", "in", "country", "``", "Russia", "''", "?"], "guid": 3254}}
{"text": "country: Country_id, Country_name, Capital, Official_native_language; team: Team_id, Name; match_season: Season, Player, Position, Country, Team, Draft_Pick_Number, Draft_Class, College; player: Player_ID, Player, Years_Played, Total_WL, Singles_WL, Doubles_WL, Team | Give the different positions of players who play for the country with the capital Dublin.", "sql": "SELECT DISTINCT T2.Position FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Capital  =  \"Dublin\"", "example": {"db_id": "match_season", "query": "SELECT DISTINCT T2.Position FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Capital  =  \"Dublin\"", "query_toks": ["SELECT", "DISTINCT", "T2.Position", "FROM", "country", "AS", "T1", "JOIN", "match_season", "AS", "T2", "ON", "T1.Country_id", "=", "T2.Country", "WHERE", "T1.Capital", "=", "``", "Dublin", "''"], "query_toks_no_value": ["select", "distinct", "t2", ".", "position", "from", "country", "as", "t1", "join", "match_season", "as", "t2", "on", "t1", ".", "country_id", "=", "t2", ".", "country", "where", "t1", ".", "capital", "=", "value"], "question": "Give the different positions of players who play for the country with the capital Dublin.", "question_toks": ["Give", "the", "different", "positions", "of", "players", "who", "play", "for", "the", "country", "with", "the", "capital", "Dublin", "."], "guid": 3255}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | What is the zip code that has the lowest average mean sea level pressure?", "sql": "SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT 1", "example": {"db_id": "bike_1", "query": "SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT 1", "query_toks": ["SELECT", "zip_code", "FROM", "weather", "GROUP", "BY", "zip_code", "ORDER", "BY", "avg", "(", "mean_sea_level_pressure_inches", ")", "LIMIT", "1"], "query_toks_no_value": ["select", "zip_code", "from", "weather", "group", "by", "zip_code", "order", "by", "avg", "(", "mean_sea_level_pressure_inches", ")", "limit", "value"], "question": "What is the zip code that has the lowest average mean sea level pressure?", "question_toks": ["What", "is", "the", "zip", "code", "that", "has", "the", "lowest", "average", "mean", "sea", "level", "pressure", "?"], "guid": 3256}}
{"text": "gymnast: Gymnast_ID, Floor_Exercise_Points, Pommel_Horse_Points, Rings_Points, Vault_Points, Parallel_Bars_Points, Horizontal_Bar_Points, Total_Points; people: People_ID, Name, Age, Height, Hometown | List the total points of gymnasts in descending order of floor exercise points.", "sql": "SELECT Total_Points FROM gymnast ORDER BY Floor_Exercise_Points DESC", "example": {"db_id": "gymnast", "query": "SELECT Total_Points FROM gymnast ORDER BY Floor_Exercise_Points DESC", "query_toks": ["SELECT", "Total_Points", "FROM", "gymnast", "ORDER", "BY", "Floor_Exercise_Points", "DESC"], "query_toks_no_value": ["select", "total_points", "from", "gymnast", "order", "by", "floor_exercise_points", "desc"], "question": "List the total points of gymnasts in descending order of floor exercise points.", "question_toks": ["List", "the", "total", "points", "of", "gymnasts", "in", "descending", "order", "of", "floor", "exercise", "points", "."], "guid": 3257}}
{"text": "wrestler: Wrestler_ID, Name, Reign, Days_held, Location, Event; Elimination: Elimination_ID, Wrestler_ID, Team, Eliminated_By, Elimination_Move, Time | Which locations are shared by more than two wrestlers?", "sql": "SELECT LOCATION FROM wrestler GROUP BY LOCATION HAVING COUNT(*)  >  2", "example": {"db_id": "wrestler", "query": "SELECT LOCATION FROM wrestler GROUP BY LOCATION HAVING COUNT(*)  >  2", "query_toks": ["SELECT", "LOCATION", "FROM", "wrestler", "GROUP", "BY", "LOCATION", "HAVING", "COUNT", "(", "*", ")", ">", "2"], "query_toks_no_value": ["select", "location", "from", "wrestler", "group", "by", "location", "having", "count", "(", "*", ")", ">", "value"], "question": "Which locations are shared by more than two wrestlers?", "question_toks": ["Which", "locations", "are", "shared", "by", "more", "than", "two", "wrestlers", "?"], "guid": 3258}}
{"text": "players: player_id, first_name, last_name, hand, birth_date, country_code; matches: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank; rankings: ranking_date, ranking, player_id, ranking_points, tours | Find the first name, country code and birth date of the winner who has the highest rank points in all matches.", "sql": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1", "example": {"db_id": "wta_1", "query": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1", "query_toks": ["SELECT", "T1.first_name", ",", "T1.country_code", ",", "T1.birth_date", "FROM", "players", "AS", "T1", "JOIN", "matches", "AS", "T2", "ON", "T1.player_id", "=", "T2.winner_id", "ORDER", "BY", "T2.winner_rank_points", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "first_name", ",", "t1", ".", "country_code", ",", "t1", ".", "birth_date", "from", "players", "as", "t1", "join", "matches", "as", "t2", "on", "t1", ".", "player_id", "=", "t2", ".", "winner_id", "order", "by", "t2", ".", "winner_rank_points", "desc", "limit", "value"], "question": "Find the first name, country code and birth date of the winner who has the highest rank points in all matches.", "question_toks": ["Find", "the", "first", "name", ",", "country", "code", "and", "birth", "date", "of", "the", "winner", "who", "has", "the", "highest", "rank", "points", "in", "all", "matches", "."], "guid": 3259}}
{"text": "swimmer: ID, name, Nationality, meter_100, meter_200, meter_300, meter_400, meter_500, meter_600, meter_700; stadium: ID, name, Capacity, City, Country, Opening_year; event: ID, Name, Stadium_ID, Year; record: ID, Result, Swimmer_ID, Event_ID | Find all 200 meter and 300 meter results of swimmers with nationality \"Australia\".", "sql": "SELECT meter_200 ,  meter_300 FROM swimmer WHERE nationality  =  'Australia'", "example": {"db_id": "swimming", "query": "SELECT meter_200 ,  meter_300 FROM swimmer WHERE nationality  =  'Australia'", "query_toks": ["SELECT", "meter_200", ",", "meter_300", "FROM", "swimmer", "WHERE", "nationality", "=", "'Australia", "'"], "query_toks_no_value": ["select", "meter_200", ",", "meter_300", "from", "swimmer", "where", "nationality", "=", "value"], "question": "Find all 200 meter and 300 meter results of swimmers with nationality \"Australia\".", "question_toks": ["Find", "all", "200", "meter", "and", "300", "meter", "results", "of", "swimmers", "with", "nationality", "``", "Australia", "''", "."], "guid": 3260}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | How many trips stated from  a station in Mountain View and ended at one in Palo Alto?", "sql": "SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  \"Mountain View\" AND T3.city  =  \"Palo Alto\"", "example": {"db_id": "bike_1", "query": "SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  \"Mountain View\" AND T3.city  =  \"Palo Alto\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "station", "AS", "T1", "JOIN", "trip", "AS", "T2", "JOIN", "station", "AS", "T3", "JOIN", "trip", "AS", "T4", "ON", "T1.id", "=", "T2.start_station_id", "AND", "T2.id", "=", "T4.id", "AND", "T3.id", "=", "T4.end_station_id", "WHERE", "T1.city", "=", "``", "Mountain", "View", "''", "AND", "T3.city", "=", "``", "Palo", "Alto", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "station", "as", "t1", "join", "trip", "as", "t2", "join", "station", "as", "t3", "join", "trip", "as", "t4", "on", "t1", ".", "id", "=", "t2", ".", "start_station_id", "and", "t2", ".", "id", "=", "t4", ".", "id", "and", "t3", ".", "id", "=", "t4", ".", "end_station_id", "where", "t1", ".", "city", "=", "value", "and", "t3", ".", "city", "=", "value"], "question": "How many trips stated from  a station in Mountain View and ended at one in Palo Alto?", "question_toks": ["How", "many", "trips", "stated", "from", "a", "station", "in", "Mountain", "View", "and", "ended", "at", "one", "in", "Palo", "Alto", "?"], "guid": 3261}}
{"text": "gymnast: Gymnast_ID, Floor_Exercise_Points, Pommel_Horse_Points, Rings_Points, Vault_Points, Parallel_Bars_Points, Horizontal_Bar_Points, Total_Points; people: People_ID, Name, Age, Height, Hometown | What are the ages of the gymnasts, ordered descending by their total points?", "sql": "SELECT T2.Age FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T1.Total_Points DESC", "example": {"db_id": "gymnast", "query": "SELECT T2.Age FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T1.Total_Points DESC", "query_toks": ["SELECT", "T2.Age", "FROM", "gymnast", "AS", "T1", "JOIN", "people", "AS", "T2", "ON", "T1.Gymnast_ID", "=", "T2.People_ID", "ORDER", "BY", "T1.Total_Points", "DESC"], "query_toks_no_value": ["select", "t2", ".", "age", "from", "gymnast", "as", "t1", "join", "people", "as", "t2", "on", "t1", ".", "gymnast_id", "=", "t2", ".", "people_id", "order", "by", "t1", ".", "total_points", "desc"], "question": "What are the ages of the gymnasts, ordered descending by their total points?", "question_toks": ["What", "are", "the", "ages", "of", "the", "gymnasts", ",", "ordered", "descending", "by", "their", "total", "points", "?"], "guid": 3262}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | What is the id, first name, and last name of the driver who was in the first position for laptime at least twice?", "sql": "SELECT T1.driverid ,  T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE POSITION  =  '1' GROUP BY T1.driverid HAVING count(*)  >=  2", "example": {"db_id": "formula_1", "query": "SELECT T1.driverid ,  T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE POSITION  =  '1' GROUP BY T1.driverid HAVING count(*)  >=  2", "query_toks": ["SELECT", "T1.driverid", ",", "T1.forename", ",", "T1.surname", "FROM", "drivers", "AS", "T1", "JOIN", "laptimes", "AS", "T2", "ON", "T1.driverid", "=", "T2.driverid", "WHERE", "POSITION", "=", "'1", "'", "GROUP", "BY", "T1.driverid", "HAVING", "count", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "t1", ".", "driverid", ",", "t1", ".", "forename", ",", "t1", ".", "surname", "from", "drivers", "as", "t1", "join", "laptimes", "as", "t2", "on", "t1", ".", "driverid", "=", "t2", ".", "driverid", "where", "position", "=", "value", "group", "by", "t1", ".", "driverid", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "What is the id, first name, and last name of the driver who was in the first position for laptime at least twice?", "question_toks": ["What", "is", "the", "id", ",", "first", "name", ",", "and", "last", "name", "of", "the", "driver", "who", "was", "in", "the", "first", "position", "for", "laptime", "at", "least", "twice", "?"], "guid": 3263}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | Return the unique name for stations that have ever had 7 bikes available.", "sql": "SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  =  7", "example": {"db_id": "bike_1", "query": "SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  =  7", "query_toks": ["SELECT", "DISTINCT", "T1.name", "FROM", "station", "AS", "T1", "JOIN", "status", "AS", "T2", "ON", "T1.id", "=", "T2.station_id", "WHERE", "T2.bikes_available", "=", "7"], "query_toks_no_value": ["select", "distinct", "t1", ".", "name", "from", "station", "as", "t1", "join", "status", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "station_id", "where", "t2", ".", "bikes_available", "=", "value"], "question": "Return the unique name for stations that have ever had 7 bikes available.", "question_toks": ["Return", "the", "unique", "name", "for", "stations", "that", "have", "ever", "had", "7", "bikes", "available", "."], "guid": 3264}}
{"text": "swimmer: ID, name, Nationality, meter_100, meter_200, meter_300, meter_400, meter_500, meter_600, meter_700; stadium: ID, name, Capacity, City, Country, Opening_year; event: ID, Name, Stadium_ID, Year; record: ID, Result, Swimmer_ID, Event_ID | Find the name and capacity of the stadium where the event named \"World Junior\" happened.", "sql": "SELECT t1.name ,  t1.capacity FROM stadium AS t1 JOIN event AS t2 ON t1.id  =  t2.stadium_id WHERE t2.name  =  'World Junior'", "example": {"db_id": "swimming", "query": "SELECT t1.name ,  t1.capacity FROM stadium AS t1 JOIN event AS t2 ON t1.id  =  t2.stadium_id WHERE t2.name  =  'World Junior'", "query_toks": ["SELECT", "t1.name", ",", "t1.capacity", "FROM", "stadium", "AS", "t1", "JOIN", "event", "AS", "t2", "ON", "t1.id", "=", "t2.stadium_id", "WHERE", "t2.name", "=", "'World", "Junior", "'"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "t1", ".", "capacity", "from", "stadium", "as", "t1", "join", "event", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "stadium_id", "where", "t2", ".", "name", "=", "value"], "question": "Find the name and capacity of the stadium where the event named \"World Junior\" happened.", "question_toks": ["Find", "the", "name", "and", "capacity", "of", "the", "stadium", "where", "the", "event", "named", "``", "World", "Junior", "''", "happened", "."], "guid": 3265}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | How many students are there?", "sql": "SELECT count(*) FROM student", "example": {"db_id": "club_1", "query": "SELECT count(*) FROM student", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "student"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "student"], "question": "How many students are there?", "question_toks": ["How", "many", "students", "are", "there", "?"], "guid": 3266}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | What is the id, forename, and number of races for all drivers that have participated in at least 2 races?", "sql": "SELECT T1.driverid ,  T1.forename ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  >=  2", "example": {"db_id": "formula_1", "query": "SELECT T1.driverid ,  T1.forename ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  >=  2", "query_toks": ["SELECT", "T1.driverid", ",", "T1.forename", ",", "count", "(", "*", ")", "FROM", "drivers", "AS", "T1", "JOIN", "results", "AS", "T2", "ON", "T1.driverid", "=", "T2.driverid", "JOIN", "races", "AS", "T3", "ON", "T2.raceid", "=", "T3.raceid", "GROUP", "BY", "T1.driverid", "HAVING", "count", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "t1", ".", "driverid", ",", "t1", ".", "forename", ",", "count", "(", "*", ")", "from", "drivers", "as", "t1", "join", "results", "as", "t2", "on", "t1", ".", "driverid", "=", "t2", ".", "driverid", "join", "races", "as", "t3", "on", "t2", ".", "raceid", "=", "t3", ".", "raceid", "group", "by", "t1", ".", "driverid", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "What is the id, forename, and number of races for all drivers that have participated in at least 2 races?", "question_toks": ["What", "is", "the", "id", ",", "forename", ",", "and", "number", "of", "races", "for", "all", "drivers", "that", "have", "participated", "in", "at", "least", "2", "races", "?"], "guid": 3267}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | How many colleges in total?", "sql": "SELECT count(*) FROM College", "example": {"db_id": "soccer_2", "query": "SELECT count(*) FROM College", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "College"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "college"], "question": "How many colleges in total?", "question_toks": ["How", "many", "colleges", "in", "total", "?"], "guid": 3268}}
{"text": "club: Club_ID, name, Region, Start_year; club_rank: Rank, Club_ID, Gold, Silver, Bronze, Total; player: Player_ID, name, Position, Club_ID, Apps, Tries, Goals, Points; competition: Competition_ID, Year, Competition_type, Country; competition_result: Competition_ID, Club_ID_1, Club_ID_2, Score | List all club names in descending alphabetical order.", "sql": "SELECT name FROM club ORDER BY name DESC", "example": {"db_id": "sports_competition", "query": "SELECT name FROM club ORDER BY name DESC", "query_toks": ["SELECT", "name", "FROM", "club", "ORDER", "BY", "name", "DESC"], "query_toks_no_value": ["select", "name", "from", "club", "order", "by", "name", "desc"], "question": "List all club names in descending alphabetical order.", "question_toks": ["List", "all", "club", "names", "in", "descending", "alphabetical", "order", "."], "guid": 3269}}
{"text": "race: Race_ID, Name, Class, Date, Track_ID; track: Track_ID, Name, Location, Seating, Year_Opened | What are the different classes of races, and how many races correspond to each?", "sql": "SELECT CLASS ,  count(*) FROM race GROUP BY CLASS", "example": {"db_id": "race_track", "query": "SELECT CLASS ,  count(*) FROM race GROUP BY CLASS", "query_toks": ["SELECT", "CLASS", ",", "count", "(", "*", ")", "FROM", "race", "GROUP", "BY", "CLASS"], "query_toks_no_value": ["select", "class", ",", "count", "(", "*", ")", "from", "race", "group", "by", "class"], "question": "What are the different classes of races, and how many races correspond to each?", "question_toks": ["What", "are", "the", "different", "classes", "of", "races", ",", "and", "how", "many", "races", "correspond", "to", "each", "?"], "guid": 3270}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | What are the names of circuits that belong to UK or Malaysia?", "sql": "SELECT name FROM circuits WHERE country = \"UK\" OR country = \"Malaysia\"", "example": {"db_id": "formula_1", "query": "SELECT name FROM circuits WHERE country = \"UK\" OR country = \"Malaysia\"", "query_toks": ["SELECT", "name", "FROM", "circuits", "WHERE", "country", "=", "``", "UK", "''", "OR", "country", "=", "``", "Malaysia", "''"], "query_toks_no_value": ["select", "name", "from", "circuits", "where", "country", "=", "value", "or", "country", "=", "value"], "question": "What are the names of circuits that belong to UK or Malaysia?", "question_toks": ["What", "are", "the", "names", "of", "circuits", "that", "belong", "to", "UK", "or", "Malaysia", "?"], "guid": 3271}}
{"text": "players: player_id, first_name, last_name, hand, birth_date, country_code; matches: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank; rankings: ranking_date, ranking, player_id, ranking_points, tours | Count the number of matches.", "sql": "SELECT count(*) FROM matches", "example": {"db_id": "wta_1", "query": "SELECT count(*) FROM matches", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "matches"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "matches"], "question": "Count the number of matches.", "question_toks": ["Count", "the", "number", "of", "matches", "."], "guid": 3272}}
{"text": "country: Country_id, Country_name, Capital, Official_native_language; team: Team_id, Name; match_season: Season, Player, Position, Country, Team, Draft_Pick_Number, Draft_Class, College; player: Player_ID, Player, Years_Played, Total_WL, Singles_WL, Doubles_WL, Team | Who are the different players, what season do they play in, and what is the name of the team they are on?", "sql": "SELECT T1.Season ,  T1.Player ,  T2.Name FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id", "example": {"db_id": "match_season", "query": "SELECT T1.Season ,  T1.Player ,  T2.Name FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id", "query_toks": ["SELECT", "T1.Season", ",", "T1.Player", ",", "T2.Name", "FROM", "match_season", "AS", "T1", "JOIN", "team", "AS", "T2", "ON", "T1.Team", "=", "T2.Team_id"], "query_toks_no_value": ["select", "t1", ".", "season", ",", "t1", ".", "player", ",", "t2", ".", "name", "from", "match_season", "as", "t1", "join", "team", "as", "t2", "on", "t1", ".", "team", "=", "t2", ".", "team_id"], "question": "Who are the different players, what season do they play in, and what is the name of the team they are on?", "question_toks": ["Who", "are", "the", "different", "players", ",", "what", "season", "do", "they", "play", "in", ",", "and", "what", "is", "the", "name", "of", "the", "team", "they", "are", "on", "?"], "guid": 3273}}
{"text": "player: Player_ID, Sponsor_name, Player_name, Gender, Residence, Occupation, Votes, Rank; club: Club_ID, Club_name, Region, Start_year; coach: Coach_ID, Coach_name, Gender, Club_ID, Rank; player_coach: Player_ID, Coach_ID, Starting_year; match_result: Rank, Club_ID, Gold, Big_Silver, Small_Silver, Bronze, Points | Show the names of sponsors of players whose residence is either \"Brandon\" or \"Birtle\".", "sql": "SELECT Sponsor_name FROM player WHERE Residence  =  \"Brandon\" OR Residence  =  \"Birtle\"", "example": {"db_id": "riding_club", "query": "SELECT Sponsor_name FROM player WHERE Residence  =  \"Brandon\" OR Residence  =  \"Birtle\"", "query_toks": ["SELECT", "Sponsor_name", "FROM", "player", "WHERE", "Residence", "=", "``", "Brandon", "''", "OR", "Residence", "=", "``", "Birtle", "''"], "query_toks_no_value": ["select", "sponsor_name", "from", "player", "where", "residence", "=", "value", "or", "residence", "=", "value"], "question": "Show the names of sponsors of players whose residence is either \"Brandon\" or \"Birtle\".", "question_toks": ["Show", "the", "names", "of", "sponsors", "of", "players", "whose", "residence", "is", "either", "``", "Brandon", "''", "or", "``", "Birtle", "''", "."], "guid": 3274}}
{"text": "mountain: Mountain_ID, Name, Height, Prominence, Range, Country; climber: Climber_ID, Name, Country, Time, Points, Mountain_ID | Show names of climbers and the names of mountains they climb.", "sql": "SELECT T1.Name ,  T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID", "example": {"db_id": "climbing", "query": "SELECT T1.Name ,  T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID", "query_toks": ["SELECT", "T1.Name", ",", "T2.Name", "FROM", "climber", "AS", "T1", "JOIN", "mountain", "AS", "T2", "ON", "T1.Mountain_ID", "=", "T2.Mountain_ID"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "t2", ".", "name", "from", "climber", "as", "t1", "join", "mountain", "as", "t2", "on", "t1", ".", "mountain_id", "=", "t2", ".", "mountain_id"], "question": "Show names of climbers and the names of mountains they climb.", "question_toks": ["Show", "names", "of", "climbers", "and", "the", "names", "of", "mountains", "they", "climb", "."], "guid": 3275}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | What is the description of the club \"Pen and Paper Gaming\"?", "sql": "SELECT clubdesc FROM club WHERE clubname  =  \"Pen and Paper Gaming\"", "example": {"db_id": "club_1", "query": "SELECT clubdesc FROM club WHERE clubname  =  \"Pen and Paper Gaming\"", "query_toks": ["SELECT", "clubdesc", "FROM", "club", "WHERE", "clubname", "=", "``", "Pen", "and", "Paper", "Gaming", "''"], "query_toks_no_value": ["select", "clubdesc", "from", "club", "where", "clubname", "=", "value"], "question": "What is the description of the club \"Pen and Paper Gaming\"?", "question_toks": ["What", "is", "the", "description", "of", "the", "club", "``", "Pen", "and", "Paper", "Gaming", "''", "?"], "guid": 3276}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | How many different colleges were represented at tryouts?", "sql": "SELECT count(DISTINCT cName) FROM tryout", "example": {"db_id": "soccer_2", "query": "SELECT count(DISTINCT cName) FROM tryout", "query_toks": ["SELECT", "count", "(", "DISTINCT", "cName", ")", "FROM", "tryout"], "query_toks_no_value": ["select", "count", "(", "distinct", "cname", ")", "from", "tryout"], "question": "How many different colleges were represented at tryouts?", "question_toks": ["How", "many", "different", "colleges", "were", "represented", "at", "tryouts", "?"], "guid": 3277}}
{"text": "swimmer: ID, name, Nationality, meter_100, meter_200, meter_300, meter_400, meter_500, meter_600, meter_700; stadium: ID, name, Capacity, City, Country, Opening_year; event: ID, Name, Stadium_ID, Year; record: ID, Result, Swimmer_ID, Event_ID | List all the event names by year from the most recent to the oldest.", "sql": "SELECT name FROM event ORDER BY YEAR DESC", "example": {"db_id": "swimming", "query": "SELECT name FROM event ORDER BY YEAR DESC", "query_toks": ["SELECT", "name", "FROM", "event", "ORDER", "BY", "YEAR", "DESC"], "query_toks_no_value": ["select", "name", "from", "event", "order", "by", "year", "desc"], "question": "List all the event names by year from the most recent to the oldest.", "question_toks": ["List", "all", "the", "event", "names", "by", "year", "from", "the", "most", "recent", "to", "the", "oldest", "."], "guid": 3278}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | What is the average enrollment number?", "sql": "SELECT avg(enr) FROM College", "example": {"db_id": "soccer_2", "query": "SELECT avg(enr) FROM College", "query_toks": ["SELECT", "avg", "(", "enr", ")", "FROM", "College"], "query_toks_no_value": ["select", "avg", "(", "enr", ")", "from", "college"], "question": "What is the average enrollment number?", "question_toks": ["What", "is", "the", "average", "enrollment", "number", "?"], "guid": 3279}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | What are the forename and surname of the driver who has the smallest laptime?", "sql": "SELECT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds LIMIT 1", "example": {"db_id": "formula_1", "query": "SELECT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds LIMIT 1", "query_toks": ["SELECT", "T1.forename", ",", "T1.surname", "FROM", "drivers", "AS", "T1", "JOIN", "laptimes", "AS", "T2", "ON", "T1.driverid", "=", "T2.driverid", "ORDER", "BY", "T2.milliseconds", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "forename", ",", "t1", ".", "surname", "from", "drivers", "as", "t1", "join", "laptimes", "as", "t2", "on", "t1", ".", "driverid", "=", "t2", ".", "driverid", "order", "by", "t2", ".", "milliseconds", "limit", "value"], "question": "What are the forename and surname of the driver who has the smallest laptime?", "question_toks": ["What", "are", "the", "forename", "and", "surname", "of", "the", "driver", "who", "has", "the", "smallest", "laptime", "?"], "guid": 3280}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | What are the different ids and stop durations of all the drivers whose stop lasted longer than the driver in the race with the id 841?", "sql": "SELECT DISTINCT driverid ,  STOP FROM pitstops WHERE duration  >  (SELECT min(duration) FROM pitstops WHERE raceid  =  841)", "example": {"db_id": "formula_1", "query": "SELECT DISTINCT driverid ,  STOP FROM pitstops WHERE duration  >  (SELECT min(duration) FROM pitstops WHERE raceid  =  841)", "query_toks": ["SELECT", "DISTINCT", "driverid", ",", "STOP", "FROM", "pitstops", "WHERE", "duration", ">", "(", "SELECT", "min", "(", "duration", ")", "FROM", "pitstops", "WHERE", "raceid", "=", "841", ")"], "query_toks_no_value": ["select", "distinct", "driverid", ",", "stop", "from", "pitstops", "where", "duration", ">", "(", "select", "min", "(", "duration", ")", "from", "pitstops", "where", "raceid", "=", "value", ")"], "question": "What are the different ids and stop durations of all the drivers whose stop lasted longer than the driver in the race with the id 841?", "question_toks": ["What", "are", "the", "different", "ids", "and", "stop", "durations", "of", "all", "the", "drivers", "whose", "stop", "lasted", "longer", "than", "the", "driver", "in", "the", "race", "with", "the", "id", "841", "?"], "guid": 3281}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | List the forenames of all distinct drivers in alphabetical order?", "sql": "SELECT DISTINCT forename FROM drivers ORDER BY forename ASC", "example": {"db_id": "formula_1", "query": "SELECT DISTINCT forename FROM drivers ORDER BY forename ASC", "query_toks": ["SELECT", "DISTINCT", "forename", "FROM", "drivers", "ORDER", "BY", "forename", "ASC"], "query_toks_no_value": ["select", "distinct", "forename", "from", "drivers", "order", "by", "forename", "asc"], "question": "List the forenames of all distinct drivers in alphabetical order?", "question_toks": ["List", "the", "forenames", "of", "all", "distinct", "drivers", "in", "alphabetical", "order", "?"], "guid": 3282}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | What are the names and ids of all stations that have more than 14 bikes available on average or had bikes installed in December?", "sql": "SELECT T1.name ,  T1.id FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(T2.bikes_available)  >  14 UNION SELECT name ,  id FROM station WHERE installation_date LIKE \"12/%\"", "example": {"db_id": "bike_1", "query": "SELECT T1.name ,  T1.id FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(T2.bikes_available)  >  14 UNION SELECT name ,  id FROM station WHERE installation_date LIKE \"12/%\"", "query_toks": ["SELECT", "T1.name", ",", "T1.id", "FROM", "station", "AS", "T1", "JOIN", "status", "AS", "T2", "ON", "T1.id", "=", "T2.station_id", "GROUP", "BY", "T2.station_id", "HAVING", "avg", "(", "T2.bikes_available", ")", ">", "14", "UNION", "SELECT", "name", ",", "id", "FROM", "station", "WHERE", "installation_date", "LIKE", "``", "12/", "%", "''"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "t1", ".", "id", "from", "station", "as", "t1", "join", "status", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "station_id", "group", "by", "t2", ".", "station_id", "having", "avg", "(", "t2", ".", "bikes_available", ")", ">", "value", "union", "select", "name", ",", "id", "from", "station", "where", "installation_date", "like", "value"], "question": "What are the names and ids of all stations that have more than 14 bikes available on average or had bikes installed in December?", "question_toks": ["What", "are", "the", "names", "and", "ids", "of", "all", "stations", "that", "have", "more", "than", "14", "bikes", "available", "on", "average", "or", "had", "bikes", "installed", "in", "December", "?"], "guid": 3283}}
{"text": "mountain: Mountain_ID, Name, Height, Prominence, Range, Country; climber: Climber_ID, Name, Country, Time, Points, Mountain_ID | What are the countries of mountains with height bigger than 5000?", "sql": "SELECT Country FROM mountain WHERE Height  >  5000", "example": {"db_id": "climbing", "query": "SELECT Country FROM mountain WHERE Height  >  5000", "query_toks": ["SELECT", "Country", "FROM", "mountain", "WHERE", "Height", ">", "5000"], "query_toks_no_value": ["select", "country", "from", "mountain", "where", "height", ">", "value"], "question": "What are the countries of mountains with height bigger than 5000?", "question_toks": ["What", "are", "the", "countries", "of", "mountains", "with", "height", "bigger", "than", "5000", "?"], "guid": 3284}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | What are the drivers' first names,last names, and ids for all those that had more than 8 stops or participated in more than 5 races?", "sql": "SELECT T1.forename ,  T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  8 UNION SELECT T1.forename ,  T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  5", "example": {"db_id": "formula_1", "query": "SELECT T1.forename ,  T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  8 UNION SELECT T1.forename ,  T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  5", "query_toks": ["SELECT", "T1.forename", ",", "T1.surname", ",", "T1.driverid", "FROM", "drivers", "AS", "T1", "JOIN", "pitstops", "AS", "T2", "ON", "T1.driverid", "=", "T2.driverid", "GROUP", "BY", "T1.driverid", "HAVING", "count", "(", "*", ")", ">", "8", "UNION", "SELECT", "T1.forename", ",", "T1.surname", ",", "T1.driverid", "FROM", "drivers", "AS", "T1", "JOIN", "results", "AS", "T2", "ON", "T1.driverid", "=", "T2.driverid", "GROUP", "BY", "T1.driverid", "HAVING", "count", "(", "*", ")", ">", "5"], "query_toks_no_value": ["select", "t1", ".", "forename", ",", "t1", ".", "surname", ",", "t1", ".", "driverid", "from", "drivers", "as", "t1", "join", "pitstops", "as", "t2", "on", "t1", ".", "driverid", "=", "t2", ".", "driverid", "group", "by", "t1", ".", "driverid", "having", "count", "(", "*", ")", ">", "value", "union", "select", "t1", ".", "forename", ",", "t1", ".", "surname", ",", "t1", ".", "driverid", "from", "drivers", "as", "t1", "join", "results", "as", "t2", "on", "t1", ".", "driverid", "=", "t2", ".", "driverid", "group", "by", "t1", ".", "driverid", "having", "count", "(", "*", ")", ">", "value"], "question": "What are the drivers' first names,last names, and ids for all those that had more than 8 stops or participated in more than 5 races?", "question_toks": ["What", "are", "the", "drivers", "'", "first", "names", ",", "last", "names", ",", "and", "ids", "for", "all", "those", "that", "had", "more", "than", "8", "stops", "or", "participated", "in", "more", "than", "5", "races", "?"], "guid": 3285}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | Return the last name for the members of the club named \"Hopkins Student Enterprises\".", "sql": "SELECT t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Hopkins Student Enterprises\"", "example": {"db_id": "club_1", "query": "SELECT t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Hopkins Student Enterprises\"", "query_toks": ["SELECT", "t3.lname", "FROM", "club", "AS", "t1", "JOIN", "member_of_club", "AS", "t2", "ON", "t1.clubid", "=", "t2.clubid", "JOIN", "student", "AS", "t3", "ON", "t2.stuid", "=", "t3.stuid", "WHERE", "t1.clubname", "=", "``", "Hopkins", "Student", "Enterprises", "''"], "query_toks_no_value": ["select", "t3", ".", "lname", "from", "club", "as", "t1", "join", "member_of_club", "as", "t2", "on", "t1", ".", "clubid", "=", "t2", ".", "clubid", "join", "student", "as", "t3", "on", "t2", ".", "stuid", "=", "t3", ".", "stuid", "where", "t1", ".", "clubname", "=", "value"], "question": "Return the last name for the members of the club named \"Hopkins Student Enterprises\".", "question_toks": ["Return", "the", "last", "name", "for", "the", "members", "of", "the", "club", "named", "``", "Hopkins", "Student", "Enterprises", "''", "."], "guid": 3286}}
{"text": "club: Club_ID, name, Region, Start_year; club_rank: Rank, Club_ID, Gold, Silver, Bronze, Total; player: Player_ID, name, Position, Club_ID, Apps, Tries, Goals, Points; competition: Competition_ID, Year, Competition_type, Country; competition_result: Competition_ID, Club_ID_1, Club_ID_2, Score | List the position of players with average number of points scored by players of that position bigger than 20.", "sql": "SELECT POSITION FROM player GROUP BY name HAVING avg(Points)  >=  20", "example": {"db_id": "sports_competition", "query": "SELECT POSITION FROM player GROUP BY name HAVING avg(Points)  >=  20", "query_toks": ["SELECT", "POSITION", "FROM", "player", "GROUP", "BY", "name", "HAVING", "avg", "(", "Points", ")", ">", "=", "20"], "query_toks_no_value": ["select", "position", "from", "player", "group", "by", "name", "having", "avg", "(", "points", ")", ">", "=", "value"], "question": "List the position of players with average number of points scored by players of that position bigger than 20.", "question_toks": ["List", "the", "position", "of", "players", "with", "average", "number", "of", "points", "scored", "by", "players", "of", "that", "position", "bigger", "than", "20", "."], "guid": 3287}}
{"text": "mountain: Mountain_ID, Name, Height, Prominence, Range, Country; climber: Climber_ID, Name, Country, Time, Points, Mountain_ID | Show the names of climbers and the heights of mountains they climb.", "sql": "SELECT T1.Name ,  T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID", "example": {"db_id": "climbing", "query": "SELECT T1.Name ,  T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID", "query_toks": ["SELECT", "T1.Name", ",", "T2.Height", "FROM", "climber", "AS", "T1", "JOIN", "mountain", "AS", "T2", "ON", "T1.Mountain_ID", "=", "T2.Mountain_ID"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "t2", ".", "height", "from", "climber", "as", "t1", "join", "mountain", "as", "t2", "on", "t1", ".", "mountain_id", "=", "t2", ".", "mountain_id"], "question": "Show the names of climbers and the heights of mountains they climb.", "question_toks": ["Show", "the", "names", "of", "climbers", "and", "the", "heights", "of", "mountains", "they", "climb", "."], "guid": 3288}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | How many students whose are playing the role of goalie?", "sql": "SELECT count(*) FROM tryout WHERE pPos  =  'goalie'", "example": {"db_id": "soccer_2", "query": "SELECT count(*) FROM tryout WHERE pPos  =  'goalie'", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "tryout", "WHERE", "pPos", "=", "'goalie", "'"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "tryout", "where", "ppos", "=", "value"], "question": "How many students whose are playing the role of goalie?", "question_toks": ["How", "many", "students", "whose", "are", "playing", "the", "role", "of", "goalie", "?"], "guid": 3289}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | What are the names of all the states with college students playing in the mid position but no goalies?", "sql": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid' EXCEPT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie'", "example": {"db_id": "soccer_2", "query": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid' EXCEPT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie'", "query_toks": ["SELECT", "T1.state", "FROM", "college", "AS", "T1", "JOIN", "tryout", "AS", "T2", "ON", "T1.cName", "=", "T2.cName", "WHERE", "T2.pPos", "=", "'mid", "'", "EXCEPT", "SELECT", "T1.state", "FROM", "college", "AS", "T1", "JOIN", "tryout", "AS", "T2", "ON", "T1.cName", "=", "T2.cName", "WHERE", "T2.pPos", "=", "'goalie", "'"], "query_toks_no_value": ["select", "t1", ".", "state", "from", "college", "as", "t1", "join", "tryout", "as", "t2", "on", "t1", ".", "cname", "=", "t2", ".", "cname", "where", "t2", ".", "ppos", "=", "value", "except", "select", "t1", ".", "state", "from", "college", "as", "t1", "join", "tryout", "as", "t2", "on", "t1", ".", "cname", "=", "t2", ".", "cname", "where", "t2", ".", "ppos", "=", "value"], "question": "What are the names of all the states with college students playing in the mid position but no goalies?", "question_toks": ["What", "are", "the", "names", "of", "all", "the", "states", "with", "college", "students", "playing", "in", "the", "mid", "position", "but", "no", "goalies", "?"], "guid": 3290}}
{"text": "country: Country_id, Country_name, Capital, Official_native_language; team: Team_id, Name; match_season: Season, Player, Position, Country, Team, Draft_Pick_Number, Draft_Class, College; player: Player_ID, Player, Years_Played, Total_WL, Singles_WL, Doubles_WL, Team | What are the names of all teams?", "sql": "SELECT Name FROM Team", "example": {"db_id": "match_season", "query": "SELECT Name FROM Team", "query_toks": ["SELECT", "Name", "FROM", "Team"], "query_toks_no_value": ["select", "name", "from", "team"], "question": "What are the names of all teams?", "question_toks": ["What", "are", "the", "names", "of", "all", "teams", "?"], "guid": 3291}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | What are the names of the clubs that have \"Davis Steven\" as a member?", "sql": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Davis\" AND t3.lname  =  \"Steven\"", "example": {"db_id": "club_1", "query": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Davis\" AND t3.lname  =  \"Steven\"", "query_toks": ["SELECT", "DISTINCT", "t1.clubname", "FROM", "club", "AS", "t1", "JOIN", "member_of_club", "AS", "t2", "ON", "t1.clubid", "=", "t2.clubid", "JOIN", "student", "AS", "t3", "ON", "t2.stuid", "=", "t3.stuid", "WHERE", "t3.fname", "=", "``", "Davis", "''", "AND", "t3.lname", "=", "``", "Steven", "''"], "query_toks_no_value": ["select", "distinct", "t1", ".", "clubname", "from", "club", "as", "t1", "join", "member_of_club", "as", "t2", "on", "t1", ".", "clubid", "=", "t2", ".", "clubid", "join", "student", "as", "t3", "on", "t2", ".", "stuid", "=", "t3", ".", "stuid", "where", "t3", ".", "fname", "=", "value", "and", "t3", ".", "lname", "=", "value"], "question": "What are the names of the clubs that have \"Davis Steven\" as a member?", "question_toks": ["What", "are", "the", "names", "of", "the", "clubs", "that", "have", "``", "Davis", "Steven", "''", "as", "a", "member", "?"], "guid": 3292}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | What are the different names of all the races in reverse alphabetical order?", "sql": "SELECT DISTINCT name FROM races ORDER BY name DESC", "example": {"db_id": "formula_1", "query": "SELECT DISTINCT name FROM races ORDER BY name DESC", "query_toks": ["SELECT", "DISTINCT", "name", "FROM", "races", "ORDER", "BY", "name", "DESC"], "query_toks_no_value": ["select", "distinct", "name", "from", "races", "order", "by", "name", "desc"], "question": "What are the different names of all the races in reverse alphabetical order?", "question_toks": ["What", "are", "the", "different", "names", "of", "all", "the", "races", "in", "reverse", "alphabetical", "order", "?"], "guid": 3293}}
{"text": "country: Country_id, Country_name, Capital, Official_native_language; team: Team_id, Name; match_season: Season, Player, Position, Country, Team, Draft_Pick_Number, Draft_Class, College; player: Player_ID, Player, Years_Played, Total_WL, Singles_WL, Doubles_WL, Team | Show the position of players and the corresponding number of players.", "sql": "SELECT POSITION ,  COUNT(*) FROM match_season GROUP BY POSITION", "example": {"db_id": "match_season", "query": "SELECT POSITION ,  COUNT(*) FROM match_season GROUP BY POSITION", "query_toks": ["SELECT", "POSITION", ",", "COUNT", "(", "*", ")", "FROM", "match_season", "GROUP", "BY", "POSITION"], "query_toks_no_value": ["select", "position", ",", "count", "(", "*", ")", "from", "match_season", "group", "by", "position"], "question": "Show the position of players and the corresponding number of players.", "question_toks": ["Show", "the", "position", "of", "players", "and", "the", "corresponding", "number", "of", "players", "."], "guid": 3294}}
{"text": "club: Club_ID, name, Region, Start_year; club_rank: Rank, Club_ID, Gold, Silver, Bronze, Total; player: Player_ID, name, Position, Club_ID, Apps, Tries, Goals, Points; competition: Competition_ID, Year, Competition_type, Country; competition_result: Competition_ID, Club_ID_1, Club_ID_2, Score | What is the average number of gold medals for a club?", "sql": "SELECT avg(Gold) FROM club_rank", "example": {"db_id": "sports_competition", "query": "SELECT avg(Gold) FROM club_rank", "query_toks": ["SELECT", "avg", "(", "Gold", ")", "FROM", "club_rank"], "query_toks_no_value": ["select", "avg", "(", "gold", ")", "from", "club_rank"], "question": "What is the average number of gold medals for a club?", "question_toks": ["What", "is", "the", "average", "number", "of", "gold", "medals", "for", "a", "club", "?"], "guid": 3295}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | What is minimum hours of the students playing in different position?", "sql": "SELECT min(T2.HS) ,   T1.pPos FROM tryout AS T1 JOIN player AS T2 ON T1.pID  =  T2.pID GROUP BY T1.pPos", "example": {"db_id": "soccer_2", "query": "SELECT min(T2.HS) ,   T1.pPos FROM tryout AS T1 JOIN player AS T2 ON T1.pID  =  T2.pID GROUP BY T1.pPos", "query_toks": ["SELECT", "min", "(", "T2.HS", ")", ",", "T1.pPos", "FROM", "tryout", "AS", "T1", "JOIN", "player", "AS", "T2", "ON", "T1.pID", "=", "T2.pID", "GROUP", "BY", "T1.pPos"], "query_toks_no_value": ["select", "min", "(", "t2", ".", "hs", ")", ",", "t1", ".", "ppos", "from", "tryout", "as", "t1", "join", "player", "as", "t2", "on", "t1", ".", "pid", "=", "t2", ".", "pid", "group", "by", "t1", ".", "ppos"], "question": "What is minimum hours of the students playing in different position?", "question_toks": ["What", "is", "minimum", "hours", "of", "the", "students", "playing", "in", "different", "position", "?"], "guid": 3296}}
{"text": "race: Race_ID, Name, Class, Date, Track_ID; track: Track_ID, Name, Location, Seating, Year_Opened | Find the locations where have both tracks with more than 90000 seats and tracks with less than 70000 seats.", "sql": "SELECT LOCATION FROM track WHERE seating  >  90000 INTERSECT SELECT LOCATION FROM track WHERE seating  <  70000", "example": {"db_id": "race_track", "query": "SELECT LOCATION FROM track WHERE seating  >  90000 INTERSECT SELECT LOCATION FROM track WHERE seating  <  70000", "query_toks": ["SELECT", "LOCATION", "FROM", "track", "WHERE", "seating", ">", "90000", "INTERSECT", "SELECT", "LOCATION", "FROM", "track", "WHERE", "seating", "<", "70000"], "query_toks_no_value": ["select", "location", "from", "track", "where", "seating", ">", "value", "intersect", "select", "location", "from", "track", "where", "seating", "<", "value"], "question": "Find the locations where have both tracks with more than 90000 seats and tracks with less than 70000 seats.", "question_toks": ["Find", "the", "locations", "where", "have", "both", "tracks", "with", "more", "than", "90000", "seats", "and", "tracks", "with", "less", "than", "70000", "seats", "."], "guid": 3297}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | For each constructor id, how many races are there?", "sql": "SELECT count(*) ,  constructorid FROM constructorStandings GROUP BY constructorid", "example": {"db_id": "formula_1", "query": "SELECT count(*) ,  constructorid FROM constructorStandings GROUP BY constructorid", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "constructorid", "FROM", "constructorStandings", "GROUP", "BY", "constructorid"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "constructorid", "from", "constructorstandings", "group", "by", "constructorid"], "question": "For each constructor id, how many races are there?", "question_toks": ["For", "each", "constructor", "id", ",", "how", "many", "races", "are", "there", "?"], "guid": 3298}}
{"text": "gymnast: Gymnast_ID, Floor_Exercise_Points, Pommel_Horse_Points, Rings_Points, Vault_Points, Parallel_Bars_Points, Horizontal_Bar_Points, Total_Points; people: People_ID, Name, Age, Height, Hometown | Show the ages of gymnasts in descending order of total points.", "sql": "SELECT T2.Age FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T1.Total_Points DESC", "example": {"db_id": "gymnast", "query": "SELECT T2.Age FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T1.Total_Points DESC", "query_toks": ["SELECT", "T2.Age", "FROM", "gymnast", "AS", "T1", "JOIN", "people", "AS", "T2", "ON", "T1.Gymnast_ID", "=", "T2.People_ID", "ORDER", "BY", "T1.Total_Points", "DESC"], "query_toks_no_value": ["select", "t2", ".", "age", "from", "gymnast", "as", "t1", "join", "people", "as", "t2", "on", "t1", ".", "gymnast_id", "=", "t2", ".", "people_id", "order", "by", "t1", ".", "total_points", "desc"], "question": "Show the ages of gymnasts in descending order of total points.", "question_toks": ["Show", "the", "ages", "of", "gymnasts", "in", "descending", "order", "of", "total", "points", "."], "guid": 3299}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | For each zip code, what is the average mean temperature for all dates that start with '8'?", "sql": "SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE \"8/%\" GROUP BY zip_code", "example": {"db_id": "bike_1", "query": "SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE \"8/%\" GROUP BY zip_code", "query_toks": ["SELECT", "zip_code", ",", "avg", "(", "mean_temperature_f", ")", "FROM", "weather", "WHERE", "date", "LIKE", "``", "8/", "%", "''", "GROUP", "BY", "zip_code"], "query_toks_no_value": ["select", "zip_code", ",", "avg", "(", "mean_temperature_f", ")", "from", "weather", "where", "date", "like", "value", "group", "by", "zip_code"], "question": "For each zip code, what is the average mean temperature for all dates that start with '8'?", "question_toks": ["For", "each", "zip", "code", ",", "what", "is", "the", "average", "mean", "temperature", "for", "all", "dates", "that", "start", "with", "'8", "'", "?"], "guid": 3300}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | What are all the different start station names for a trip that lasted less than 100?", "sql": "SELECT DISTINCT start_station_name FROM trip WHERE duration  <  100", "example": {"db_id": "bike_1", "query": "SELECT DISTINCT start_station_name FROM trip WHERE duration  <  100", "query_toks": ["SELECT", "DISTINCT", "start_station_name", "FROM", "trip", "WHERE", "duration", "<", "100"], "query_toks_no_value": ["select", "distinct", "start_station_name", "from", "trip", "where", "duration", "<", "value"], "question": "What are all the different start station names for a trip that lasted less than 100?", "question_toks": ["What", "are", "all", "the", "different", "start", "station", "names", "for", "a", "trip", "that", "lasted", "less", "than", "100", "?"], "guid": 3301}}
{"text": "wrestler: Wrestler_ID, Name, Reign, Days_held, Location, Event; Elimination: Elimination_ID, Wrestler_ID, Team, Eliminated_By, Elimination_Move, Time | List the names of wrestlers that have not been eliminated.", "sql": "SELECT Name FROM wrestler WHERE Wrestler_ID NOT IN (SELECT Wrestler_ID FROM elimination)", "example": {"db_id": "wrestler", "query": "SELECT Name FROM wrestler WHERE Wrestler_ID NOT IN (SELECT Wrestler_ID FROM elimination)", "query_toks": ["SELECT", "Name", "FROM", "wrestler", "WHERE", "Wrestler_ID", "NOT", "IN", "(", "SELECT", "Wrestler_ID", "FROM", "elimination", ")"], "query_toks_no_value": ["select", "name", "from", "wrestler", "where", "wrestler_id", "not", "in", "(", "select", "wrestler_id", "from", "elimination", ")"], "question": "List the names of wrestlers that have not been eliminated.", "question_toks": ["List", "the", "names", "of", "wrestlers", "that", "have", "not", "been", "eliminated", "."], "guid": 3302}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | What are the ids of all stations that have a latitude above 37.4 and have never had less than 7 bikes available?", "sql": "SELECT id FROM station WHERE lat  >  37.4 EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING min(bikes_available)  <  7", "example": {"db_id": "bike_1", "query": "SELECT id FROM station WHERE lat  >  37.4 EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING min(bikes_available)  <  7", "query_toks": ["SELECT", "id", "FROM", "station", "WHERE", "lat", ">", "37.4", "EXCEPT", "SELECT", "station_id", "FROM", "status", "GROUP", "BY", "station_id", "HAVING", "min", "(", "bikes_available", ")", "<", "7"], "query_toks_no_value": ["select", "id", "from", "station", "where", "lat", ">", "value", "except", "select", "station_id", "from", "status", "group", "by", "station_id", "having", "min", "(", "bikes_available", ")", "<", "value"], "question": "What are the ids of all stations that have a latitude above 37.4 and have never had less than 7 bikes available?", "question_toks": ["What", "are", "the", "ids", "of", "all", "stations", "that", "have", "a", "latitude", "above", "37.4", "and", "have", "never", "had", "less", "than", "7", "bikes", "available", "?"], "guid": 3303}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | What are the names and enrollment numbers for colleges that have more than 10000 enrolled and are located in Louisiana?", "sql": "SELECT cName ,  enr FROM College WHERE enr  >  10000 AND state = \"LA\"", "example": {"db_id": "soccer_2", "query": "SELECT cName ,  enr FROM College WHERE enr  >  10000 AND state = \"LA\"", "query_toks": ["SELECT", "cName", ",", "enr", "FROM", "College", "WHERE", "enr", ">", "10000", "AND", "state", "=", "``", "LA", "''"], "query_toks_no_value": ["select", "cname", ",", "enr", "from", "college", "where", "enr", ">", "value", "and", "state", "=", "value"], "question": "What are the names and enrollment numbers for colleges that have more than 10000 enrolled and are located in Louisiana?", "question_toks": ["What", "are", "the", "names", "and", "enrollment", "numbers", "for", "colleges", "that", "have", "more", "than", "10000", "enrolled", "and", "are", "located", "in", "Louisiana", "?"], "guid": 3304}}
{"text": "race: Race_ID, Name, Class, Date, Track_ID; track: Track_ID, Name, Location, Seating, Year_Opened | What is the name of the track that has had the greatest number of races?", "sql": "SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "race_track", "query": "SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T2.name", "FROM", "race", "AS", "T1", "JOIN", "track", "AS", "T2", "ON", "T1.track_id", "=", "T2.track_id", "GROUP", "BY", "T1.track_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "race", "as", "t1", "join", "track", "as", "t2", "on", "t1", ".", "track_id", "=", "t2", ".", "track_id", "group", "by", "t1", ".", "track_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the name of the track that has had the greatest number of races?", "question_toks": ["What", "is", "the", "name", "of", "the", "track", "that", "has", "had", "the", "greatest", "number", "of", "races", "?"], "guid": 3305}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | For how many clubs is \"Tracy Kim\" a member?", "sql": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Tracy\" AND t3.lname  =  \"Kim\"", "example": {"db_id": "club_1", "query": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Tracy\" AND t3.lname  =  \"Kim\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "club", "AS", "t1", "JOIN", "member_of_club", "AS", "t2", "ON", "t1.clubid", "=", "t2.clubid", "JOIN", "student", "AS", "t3", "ON", "t2.stuid", "=", "t3.stuid", "WHERE", "t3.fname", "=", "``", "Tracy", "''", "AND", "t3.lname", "=", "``", "Kim", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "club", "as", "t1", "join", "member_of_club", "as", "t2", "on", "t1", ".", "clubid", "=", "t2", ".", "clubid", "join", "student", "as", "t3", "on", "t2", ".", "stuid", "=", "t3", ".", "stuid", "where", "t3", ".", "fname", "=", "value", "and", "t3", ".", "lname", "=", "value"], "question": "For how many clubs is \"Tracy Kim\" a member?", "question_toks": ["For", "how", "many", "clubs", "is", "``", "Tracy", "Kim", "''", "a", "member", "?"], "guid": 3306}}
{"text": "race: Race_ID, Name, Class, Date, Track_ID; track: Track_ID, Name, Location, Seating, Year_Opened | Show year where a track with a seating at least 5000 opened and a track with seating no more than 4000 opened.", "sql": "SELECT year_opened FROM track WHERE seating BETWEEN 4000 AND 5000", "example": {"db_id": "race_track", "query": "SELECT year_opened FROM track WHERE seating BETWEEN 4000 AND 5000", "query_toks": ["SELECT", "year_opened", "FROM", "track", "WHERE", "seating", "BETWEEN", "4000", "AND", "5000"], "query_toks_no_value": ["select", "year_opened", "from", "track", "where", "seating", "between", "value", "and", "value"], "question": "Show year where a track with a seating at least 5000 opened and a track with seating no more than 4000 opened.", "question_toks": ["Show", "year", "where", "a", "track", "with", "a", "seating", "at", "least", "5000", "opened", "and", "a", "track", "with", "seating", "no", "more", "than", "4000", "opened", "."], "guid": 3307}}
{"text": "swimmer: ID, name, Nationality, meter_100, meter_200, meter_300, meter_400, meter_500, meter_600, meter_700; stadium: ID, name, Capacity, City, Country, Opening_year; event: ID, Name, Stadium_ID, Year; record: ID, Result, Swimmer_ID, Event_ID | Find all details for each swimmer.", "sql": "SELECT * FROM swimmer", "example": {"db_id": "swimming", "query": "SELECT * FROM swimmer", "query_toks": ["SELECT", "*", "FROM", "swimmer"], "query_toks_no_value": ["select", "*", "from", "swimmer"], "question": "Find all details for each swimmer.", "question_toks": ["Find", "all", "details", "for", "each", "swimmer", "."], "guid": 3308}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | Find the name and college of students whose decisions are yes in the tryout.", "sql": "SELECT T1.pName ,  T2.cName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'", "example": {"db_id": "soccer_2", "query": "SELECT T1.pName ,  T2.cName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'", "query_toks": ["SELECT", "T1.pName", ",", "T2.cName", "FROM", "player", "AS", "T1", "JOIN", "tryout", "AS", "T2", "ON", "T1.pID", "=", "T2.pID", "WHERE", "T2.decision", "=", "'yes", "'"], "query_toks_no_value": ["select", "t1", ".", "pname", ",", "t2", ".", "cname", "from", "player", "as", "t1", "join", "tryout", "as", "t2", "on", "t1", ".", "pid", "=", "t2", ".", "pid", "where", "t2", ".", "decision", "=", "value"], "question": "Find the name and college of students whose decisions are yes in the tryout.", "question_toks": ["Find", "the", "name", "and", "college", "of", "students", "whose", "decisions", "are", "yes", "in", "the", "tryout", "."], "guid": 3309}}
{"text": "race: Race_ID, Name, Class, Date, Track_ID; track: Track_ID, Name, Location, Seating, Year_Opened | Show the name and location for all tracks.", "sql": "SELECT name ,  LOCATION FROM track", "example": {"db_id": "race_track", "query": "SELECT name ,  LOCATION FROM track", "query_toks": ["SELECT", "name", ",", "LOCATION", "FROM", "track"], "query_toks_no_value": ["select", "name", ",", "location", "from", "track"], "question": "Show the name and location for all tracks.", "question_toks": ["Show", "the", "name", "and", "location", "for", "all", "tracks", "."], "guid": 3310}}
{"text": "gymnast: Gymnast_ID, Floor_Exercise_Points, Pommel_Horse_Points, Rings_Points, Vault_Points, Parallel_Bars_Points, Horizontal_Bar_Points, Total_Points; people: People_ID, Name, Age, Height, Hometown | What are the hometowns that are shared by at least two gymnasts?", "sql": "SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown HAVING COUNT(*)  >=  2", "example": {"db_id": "gymnast", "query": "SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown HAVING COUNT(*)  >=  2", "query_toks": ["SELECT", "T2.Hometown", "FROM", "gymnast", "AS", "T1", "JOIN", "people", "AS", "T2", "ON", "T1.Gymnast_ID", "=", "T2.People_ID", "GROUP", "BY", "T2.Hometown", "HAVING", "COUNT", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "t2", ".", "hometown", "from", "gymnast", "as", "t1", "join", "people", "as", "t2", "on", "t1", ".", "gymnast_id", "=", "t2", ".", "people_id", "group", "by", "t2", ".", "hometown", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "What are the hometowns that are shared by at least two gymnasts?", "question_toks": ["What", "are", "the", "hometowns", "that", "are", "shared", "by", "at", "least", "two", "gymnasts", "?"], "guid": 3311}}
{"text": "players: player_id, first_name, last_name, hand, birth_date, country_code; matches: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank; rankings: ranking_date, ranking, player_id, ranking_points, tours | How many matches were played in each year?", "sql": "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR", "example": {"db_id": "wta_1", "query": "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "YEAR", "FROM", "matches", "GROUP", "BY", "YEAR"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "year", "from", "matches", "group", "by", "year"], "question": "How many matches were played in each year?", "question_toks": ["How", "many", "matches", "were", "played", "in", "each", "year", "?"], "guid": 3312}}
{"text": "wrestler: Wrestler_ID, Name, Reign, Days_held, Location, Event; Elimination: Elimination_ID, Wrestler_ID, Team, Eliminated_By, Elimination_Move, Time | Count the number of wrestlers.", "sql": "SELECT count(*) FROM wrestler", "example": {"db_id": "wrestler", "query": "SELECT count(*) FROM wrestler", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "wrestler"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "wrestler"], "question": "Count the number of wrestlers.", "question_toks": ["Count", "the", "number", "of", "wrestlers", "."], "guid": 3313}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | How many stations are in Mountain View?", "sql": "SELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"", "example": {"db_id": "bike_1", "query": "SELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"", "query_toks": ["SELECT", "COUNT", "(", "*", ")", "FROM", "station", "WHERE", "city", "=", "``", "Mountain", "View", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "station", "where", "city", "=", "value"], "question": "How many stations are in Mountain View?", "question_toks": ["How", "many", "stations", "are", "in", "Mountain", "View", "?"], "guid": 3314}}
{"text": "country: Country_id, Country_name, Capital, Official_native_language; team: Team_id, Name; match_season: Season, Player, Position, Country, Team, Draft_Pick_Number, Draft_Class, College; player: Player_ID, Player, Years_Played, Total_WL, Singles_WL, Doubles_WL, Team | What are the names of countries that have both players with position forward and players with position defender?", "sql": "SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Forward\" INTERSECT SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\"", "example": {"db_id": "match_season", "query": "SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Forward\" INTERSECT SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\"", "query_toks": ["SELECT", "T1.Country_name", "FROM", "country", "AS", "T1", "JOIN", "match_season", "AS", "T2", "ON", "T1.Country_id", "=", "T2.Country", "WHERE", "T2.Position", "=", "``", "Forward", "''", "INTERSECT", "SELECT", "T1.Country_name", "FROM", "country", "AS", "T1", "JOIN", "match_season", "AS", "T2", "ON", "T1.Country_id", "=", "T2.Country", "WHERE", "T2.Position", "=", "``", "Defender", "''"], "query_toks_no_value": ["select", "t1", ".", "country_name", "from", "country", "as", "t1", "join", "match_season", "as", "t2", "on", "t1", ".", "country_id", "=", "t2", ".", "country", "where", "t2", ".", "position", "=", "value", "intersect", "select", "t1", ".", "country_name", "from", "country", "as", "t1", "join", "match_season", "as", "t2", "on", "t1", ".", "country_id", "=", "t2", ".", "country", "where", "t2", ".", "position", "=", "value"], "question": "What are the names of countries that have both players with position forward and players with position defender?", "question_toks": ["What", "are", "the", "names", "of", "countries", "that", "have", "both", "players", "with", "position", "forward", "and", "players", "with", "position", "defender", "?"], "guid": 3315}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | For each race name, What is the maximum fastest lap speed for races after 2004 ordered by year?", "sql": "SELECT max(T2.fastestlapspeed) ,  T1.name ,  T1.year FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY T1.name ORDER BY T1.year", "example": {"db_id": "formula_1", "query": "SELECT max(T2.fastestlapspeed) ,  T1.name ,  T1.year FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY T1.name ORDER BY T1.year", "query_toks": ["SELECT", "max", "(", "T2.fastestlapspeed", ")", ",", "T1.name", ",", "T1.year", "FROM", "races", "AS", "T1", "JOIN", "results", "AS", "T2", "ON", "T1.raceid", "=", "T2.raceid", "WHERE", "T1.year", ">", "2014", "GROUP", "BY", "T1.name", "ORDER", "BY", "T1.year"], "query_toks_no_value": ["select", "max", "(", "t2", ".", "fastestlapspeed", ")", ",", "t1", ".", "name", ",", "t1", ".", "year", "from", "races", "as", "t1", "join", "results", "as", "t2", "on", "t1", ".", "raceid", "=", "t2", ".", "raceid", "where", "t1", ".", "year", ">", "value", "group", "by", "t1", ".", "name", "order", "by", "t1", ".", "year"], "question": "For each race name, What is the maximum fastest lap speed for races after 2004 ordered by year?", "question_toks": ["For", "each", "race", "name", ",", "What", "is", "the", "maximum", "fastest", "lap", "speed", "for", "races", "after", "2004", "ordered", "by", "year", "?"], "guid": 3316}}
{"text": "players: player_id, first_name, last_name, hand, birth_date, country_code; matches: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank; rankings: ranking_date, ranking, player_id, ranking_points, tours | What is the average rank for winners in all matches?", "sql": "SELECT avg(winner_rank) FROM matches", "example": {"db_id": "wta_1", "query": "SELECT avg(winner_rank) FROM matches", "query_toks": ["SELECT", "avg", "(", "winner_rank", ")", "FROM", "matches"], "query_toks_no_value": ["select", "avg", "(", "winner_rank", ")", "from", "matches"], "question": "What is the average rank for winners in all matches?", "question_toks": ["What", "is", "the", "average", "rank", "for", "winners", "in", "all", "matches", "?"], "guid": 3317}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | What are the names and number of hours spent training for each player who trains for less than 1500 hours?", "sql": "SELECT pName ,  HS FROM Player WHERE HS  <  1500", "example": {"db_id": "soccer_2", "query": "SELECT pName ,  HS FROM Player WHERE HS  <  1500", "query_toks": ["SELECT", "pName", ",", "HS", "FROM", "Player", "WHERE", "HS", "<", "1500"], "query_toks_no_value": ["select", "pname", ",", "hs", "from", "player", "where", "hs", "<", "value"], "question": "What are the names and number of hours spent training for each player who trains for less than 1500 hours?", "question_toks": ["What", "are", "the", "names", "and", "number", "of", "hours", "spent", "training", "for", "each", "player", "who", "trains", "for", "less", "than", "1500", "hours", "?"], "guid": 3318}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | What are the first and last name of the president of the club \"Bootup Baltimore\"?", "sql": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t2.position  =  \"President\"", "example": {"db_id": "club_1", "query": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t2.position  =  \"President\"", "query_toks": ["SELECT", "t3.fname", ",", "t3.lname", "FROM", "club", "AS", "t1", "JOIN", "member_of_club", "AS", "t2", "ON", "t1.clubid", "=", "t2.clubid", "JOIN", "student", "AS", "t3", "ON", "t2.stuid", "=", "t3.stuid", "WHERE", "t1.clubname", "=", "``", "Bootup", "Baltimore", "''", "AND", "t2.position", "=", "``", "President", "''"], "query_toks_no_value": ["select", "t3", ".", "fname", ",", "t3", ".", "lname", "from", "club", "as", "t1", "join", "member_of_club", "as", "t2", "on", "t1", ".", "clubid", "=", "t2", ".", "clubid", "join", "student", "as", "t3", "on", "t2", ".", "stuid", "=", "t3", ".", "stuid", "where", "t1", ".", "clubname", "=", "value", "and", "t2", ".", "position", "=", "value"], "question": "What are the first and last name of the president of the club \"Bootup Baltimore\"?", "question_toks": ["What", "are", "the", "first", "and", "last", "name", "of", "the", "president", "of", "the", "club", "``", "Bootup", "Baltimore", "''", "?"], "guid": 3319}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | Find the id and forenames of drivers who participated both the races with name Australian Grand Prix and the races with name Chinese Grand Prix?", "sql": "SELECT T2.driverid ,  T3.forename FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid  =  T3.driverid WHERE T1.name = \"Australian Grand Prix\" INTERSECT SELECT T2.driverid ,  T3.forename FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid  =  T3.driverid WHERE T1.name = \"Chinese Grand Prix\"", "example": {"db_id": "formula_1", "query": "SELECT T2.driverid ,  T3.forename FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid  =  T3.driverid WHERE T1.name = \"Australian Grand Prix\" INTERSECT SELECT T2.driverid ,  T3.forename FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid  =  T3.driverid WHERE T1.name = \"Chinese Grand Prix\"", "query_toks": ["SELECT", "T2.driverid", ",", "T3.forename", "FROM", "races", "AS", "T1", "JOIN", "results", "AS", "T2", "ON", "T1.raceid", "=", "T2.raceid", "JOIN", "drivers", "AS", "T3", "ON", "T2.driverid", "=", "T3.driverid", "WHERE", "T1.name", "=", "``", "Australian", "Grand", "Prix", "''", "INTERSECT", "SELECT", "T2.driverid", ",", "T3.forename", "FROM", "races", "AS", "T1", "JOIN", "results", "AS", "T2", "ON", "T1.raceid", "=", "T2.raceid", "JOIN", "drivers", "AS", "T3", "ON", "T2.driverid", "=", "T3.driverid", "WHERE", "T1.name", "=", "``", "Chinese", "Grand", "Prix", "''"], "query_toks_no_value": ["select", "t2", ".", "driverid", ",", "t3", ".", "forename", "from", "races", "as", "t1", "join", "results", "as", "t2", "on", "t1", ".", "raceid", "=", "t2", ".", "raceid", "join", "drivers", "as", "t3", "on", "t2", ".", "driverid", "=", "t3", ".", "driverid", "where", "t1", ".", "name", "=", "value", "intersect", "select", "t2", ".", "driverid", ",", "t3", ".", "forename", "from", "races", "as", "t1", "join", "results", "as", "t2", "on", "t1", ".", "raceid", "=", "t2", ".", "raceid", "join", "drivers", "as", "t3", "on", "t2", ".", "driverid", "=", "t3", ".", "driverid", "where", "t1", ".", "name", "=", "value"], "question": "Find the id and forenames of drivers who participated both the races with name Australian Grand Prix and the races with name Chinese Grand Prix?", "question_toks": ["Find", "the", "id", "and", "forenames", "of", "drivers", "who", "participated", "both", "the", "races", "with", "name", "Australian", "Grand", "Prix", "and", "the", "races", "with", "name", "Chinese", "Grand", "Prix", "?"], "guid": 3320}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | Find the names of states that have some college students playing in goalie and mid positions.", "sql": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie' INTERSECT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid'", "example": {"db_id": "soccer_2", "query": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie' INTERSECT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid'", "query_toks": ["SELECT", "T1.state", "FROM", "college", "AS", "T1", "JOIN", "tryout", "AS", "T2", "ON", "T1.cName", "=", "T2.cName", "WHERE", "T2.pPos", "=", "'goalie", "'", "INTERSECT", "SELECT", "T1.state", "FROM", "college", "AS", "T1", "JOIN", "tryout", "AS", "T2", "ON", "T1.cName", "=", "T2.cName", "WHERE", "T2.pPos", "=", "'mid", "'"], "query_toks_no_value": ["select", "t1", ".", "state", "from", "college", "as", "t1", "join", "tryout", "as", "t2", "on", "t1", ".", "cname", "=", "t2", ".", "cname", "where", "t2", ".", "ppos", "=", "value", "intersect", "select", "t1", ".", "state", "from", "college", "as", "t1", "join", "tryout", "as", "t2", "on", "t1", ".", "cname", "=", "t2", ".", "cname", "where", "t2", ".", "ppos", "=", "value"], "question": "Find the names of states that have some college students playing in goalie and mid positions.", "question_toks": ["Find", "the", "names", "of", "states", "that", "have", "some", "college", "students", "playing", "in", "goalie", "and", "mid", "positions", "."], "guid": 3321}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | How many players have more than 1000 hours of training?", "sql": "SELECT count(*) FROM Player WHERE HS  >  1000", "example": {"db_id": "soccer_2", "query": "SELECT count(*) FROM Player WHERE HS  >  1000", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Player", "WHERE", "HS", ">", "1000"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "player", "where", "hs", ">", "value"], "question": "How many players have more than 1000 hours of training?", "question_toks": ["How", "many", "players", "have", "more", "than", "1000", "hours", "of", "training", "?"], "guid": 3322}}
{"text": "country: Country_id, Country_name, Capital, Official_native_language; team: Team_id, Name; match_season: Season, Player, Position, Country, Team, Draft_Pick_Number, Draft_Class, College; player: Player_ID, Player, Years_Played, Total_WL, Singles_WL, Doubles_WL, Team | Which college have both players with position midfielder and players with position defender?", "sql": "SELECT College FROM match_season WHERE POSITION  =  \"Midfielder\" INTERSECT SELECT College FROM match_season WHERE POSITION  =  \"Defender\"", "example": {"db_id": "match_season", "query": "SELECT College FROM match_season WHERE POSITION  =  \"Midfielder\" INTERSECT SELECT College FROM match_season WHERE POSITION  =  \"Defender\"", "query_toks": ["SELECT", "College", "FROM", "match_season", "WHERE", "POSITION", "=", "``", "Midfielder", "''", "INTERSECT", "SELECT", "College", "FROM", "match_season", "WHERE", "POSITION", "=", "``", "Defender", "''"], "query_toks_no_value": ["select", "college", "from", "match_season", "where", "position", "=", "value", "intersect", "select", "college", "from", "match_season", "where", "position", "=", "value"], "question": "Which college have both players with position midfielder and players with position defender?", "question_toks": ["Which", "college", "have", "both", "players", "with", "position", "midfielder", "and", "players", "with", "position", "defender", "?"], "guid": 3323}}
{"text": "mountain: Mountain_ID, Name, Height, Prominence, Range, Country; climber: Climber_ID, Name, Country, Time, Points, Mountain_ID | What are the names of mountains that have a height of over 5000 or a prominence of over 1000?", "sql": "SELECT Name FROM mountain WHERE Height  >  5000 OR Prominence  >  1000", "example": {"db_id": "climbing", "query": "SELECT Name FROM mountain WHERE Height  >  5000 OR Prominence  >  1000", "query_toks": ["SELECT", "Name", "FROM", "mountain", "WHERE", "Height", ">", "5000", "OR", "Prominence", ">", "1000"], "query_toks_no_value": ["select", "name", "from", "mountain", "where", "height", ">", "value", "or", "prominence", ">", "value"], "question": "What are the names of mountains that have a height of over 5000 or a prominence of over 1000?", "question_toks": ["What", "are", "the", "names", "of", "mountains", "that", "have", "a", "height", "of", "over", "5000", "or", "a", "prominence", "of", "over", "1000", "?"], "guid": 3324}}
{"text": "country: Country_id, Country_name, Capital, Official_native_language; team: Team_id, Name; match_season: Season, Player, Position, Country, Team, Draft_Pick_Number, Draft_Class, College; player: Player_ID, Player, Years_Played, Total_WL, Singles_WL, Doubles_WL, Team | What are the official native languages that contain the string \"English\".", "sql": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\"", "example": {"db_id": "match_season", "query": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\"", "query_toks": ["SELECT", "Official_native_language", "FROM", "country", "WHERE", "Official_native_language", "LIKE", "``", "%", "English", "%", "''"], "query_toks_no_value": ["select", "official_native_language", "from", "country", "where", "official_native_language", "like", "value"], "question": "What are the official native languages that contain the string \"English\".", "question_toks": ["What", "are", "the", "official", "native", "languages", "that", "contain", "the", "string", "``", "English", "''", "."], "guid": 3325}}
{"text": "country: Country_id, Country_name, Capital, Official_native_language; team: Team_id, Name; match_season: Season, Player, Position, Country, Team, Draft_Pick_Number, Draft_Class, College; player: Player_ID, Player, Years_Played, Total_WL, Singles_WL, Doubles_WL, Team | Return the names of countries that have players that play the Forward position, as well as players who play the Defender position.", "sql": "SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Forward\" INTERSECT SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\"", "example": {"db_id": "match_season", "query": "SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Forward\" INTERSECT SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\"", "query_toks": ["SELECT", "T1.Country_name", "FROM", "country", "AS", "T1", "JOIN", "match_season", "AS", "T2", "ON", "T1.Country_id", "=", "T2.Country", "WHERE", "T2.Position", "=", "``", "Forward", "''", "INTERSECT", "SELECT", "T1.Country_name", "FROM", "country", "AS", "T1", "JOIN", "match_season", "AS", "T2", "ON", "T1.Country_id", "=", "T2.Country", "WHERE", "T2.Position", "=", "``", "Defender", "''"], "query_toks_no_value": ["select", "t1", ".", "country_name", "from", "country", "as", "t1", "join", "match_season", "as", "t2", "on", "t1", ".", "country_id", "=", "t2", ".", "country", "where", "t2", ".", "position", "=", "value", "intersect", "select", "t1", ".", "country_name", "from", "country", "as", "t1", "join", "match_season", "as", "t2", "on", "t1", ".", "country_id", "=", "t2", ".", "country", "where", "t2", ".", "position", "=", "value"], "question": "Return the names of countries that have players that play the Forward position, as well as players who play the Defender position.", "question_toks": ["Return", "the", "names", "of", "countries", "that", "have", "players", "that", "play", "the", "Forward", "position", ",", "as", "well", "as", "players", "who", "play", "the", "Defender", "position", "."], "guid": 3326}}
{"text": "country: Country_id, Country_name, Capital, Official_native_language; team: Team_id, Name; match_season: Season, Player, Position, Country, Team, Draft_Pick_Number, Draft_Class, College; player: Player_ID, Player, Years_Played, Total_WL, Singles_WL, Doubles_WL, Team | Show the players from college UCLA.", "sql": "SELECT Player FROM match_season WHERE College  =  \"UCLA\"", "example": {"db_id": "match_season", "query": "SELECT Player FROM match_season WHERE College  =  \"UCLA\"", "query_toks": ["SELECT", "Player", "FROM", "match_season", "WHERE", "College", "=", "``", "UCLA", "''"], "query_toks_no_value": ["select", "player", "from", "match_season", "where", "college", "=", "value"], "question": "Show the players from college UCLA.", "question_toks": ["Show", "the", "players", "from", "college", "UCLA", "."], "guid": 3327}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | Find the average hours for the students whose tryout decision is no.", "sql": "SELECT avg(T1.HS) FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'no'", "example": {"db_id": "soccer_2", "query": "SELECT avg(T1.HS) FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'no'", "query_toks": ["SELECT", "avg", "(", "T1.HS", ")", "FROM", "player", "AS", "T1", "JOIN", "tryout", "AS", "T2", "ON", "T1.pID", "=", "T2.pID", "WHERE", "T2.decision", "=", "'no", "'"], "query_toks_no_value": ["select", "avg", "(", "t1", ".", "hs", ")", "from", "player", "as", "t1", "join", "tryout", "as", "t2", "on", "t1", ".", "pid", "=", "t2", ".", "pid", "where", "t2", ".", "decision", "=", "value"], "question": "Find the average hours for the students whose tryout decision is no.", "question_toks": ["Find", "the", "average", "hours", "for", "the", "students", "whose", "tryout", "decision", "is", "no", "."], "guid": 3328}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | Find the club which has the largest number of members majoring in \"600\".", "sql": "SELECT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.major  =  \"600\" GROUP BY t1.clubname ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "club_1", "query": "SELECT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.major  =  \"600\" GROUP BY t1.clubname ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "t1.clubname", "FROM", "club", "AS", "t1", "JOIN", "member_of_club", "AS", "t2", "ON", "t1.clubid", "=", "t2.clubid", "JOIN", "student", "AS", "t3", "ON", "t2.stuid", "=", "t3.stuid", "WHERE", "t3.major", "=", "``", "600", "''", "GROUP", "BY", "t1.clubname", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "clubname", "from", "club", "as", "t1", "join", "member_of_club", "as", "t2", "on", "t1", ".", "clubid", "=", "t2", ".", "clubid", "join", "student", "as", "t3", "on", "t2", ".", "stuid", "=", "t3", ".", "stuid", "where", "t3", ".", "major", "=", "value", "group", "by", "t1", ".", "clubname", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Find the club which has the largest number of members majoring in \"600\".", "question_toks": ["Find", "the", "club", "which", "has", "the", "largest", "number", "of", "members", "majoring", "in", "``", "600", "''", "."], "guid": 3329}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | What are the date, mean temperature and mean humidity for the top 3 days with the largest max gust speeds?", "sql": "SELECT date ,  mean_temperature_f ,  mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3", "example": {"db_id": "bike_1", "query": "SELECT date ,  mean_temperature_f ,  mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3", "query_toks": ["SELECT", "date", ",", "mean_temperature_f", ",", "mean_humidity", "FROM", "weather", "ORDER", "BY", "max_gust_speed_mph", "DESC", "LIMIT", "3"], "query_toks_no_value": ["select", "date", ",", "mean_temperature_f", ",", "mean_humidity", "from", "weather", "order", "by", "max_gust_speed_mph", "desc", "limit", "value"], "question": "What are the date, mean temperature and mean humidity for the top 3 days with the largest max gust speeds?", "question_toks": ["What", "are", "the", "date", ",", "mean", "temperature", "and", "mean", "humidity", "for", "the", "top", "3", "days", "with", "the", "largest", "max", "gust", "speeds", "?"], "guid": 3330}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | What is the count of states with college students playing in the mid position but not as goalies?", "sql": "SELECT COUNT(*) FROM (SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid' EXCEPT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie')", "example": {"db_id": "soccer_2", "query": "SELECT COUNT(*) FROM (SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid' EXCEPT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie')", "query_toks": ["SELECT", "COUNT", "(", "*", ")", "FROM", "(", "SELECT", "T1.state", "FROM", "college", "AS", "T1", "JOIN", "tryout", "AS", "T2", "ON", "T1.cName", "=", "T2.cName", "WHERE", "T2.pPos", "=", "'mid", "'", "EXCEPT", "SELECT", "T1.state", "FROM", "college", "AS", "T1", "JOIN", "tryout", "AS", "T2", "ON", "T1.cName", "=", "T2.cName", "WHERE", "T2.pPos", "=", "'goalie", "'", ")"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "(", "select", "t1", ".", "state", "from", "college", "as", "t1", "join", "tryout", "as", "t2", "on", "t1", ".", "cname", "=", "t2", ".", "cname", "where", "t2", ".", "ppos", "=", "value", "except", "select", "t1", ".", "state", "from", "college", "as", "t1", "join", "tryout", "as", "t2", "on", "t1", ".", "cname", "=", "t2", ".", "cname", "where", "t2", ".", "ppos", "=", "value", ")"], "question": "What is the count of states with college students playing in the mid position but not as goalies?", "question_toks": ["What", "is", "the", "count", "of", "states", "with", "college", "students", "playing", "in", "the", "mid", "position", "but", "not", "as", "goalies", "?"], "guid": 3331}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | What is the id and family name of the driver who has the longest laptime?", "sql": "SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds DESC LIMIT 1", "example": {"db_id": "formula_1", "query": "SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds DESC LIMIT 1", "query_toks": ["SELECT", "T1.driverid", ",", "T1.surname", "FROM", "drivers", "AS", "T1", "JOIN", "laptimes", "AS", "T2", "ON", "T1.driverid", "=", "T2.driverid", "ORDER", "BY", "T2.milliseconds", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "driverid", ",", "t1", ".", "surname", "from", "drivers", "as", "t1", "join", "laptimes", "as", "t2", "on", "t1", ".", "driverid", "=", "t2", ".", "driverid", "order", "by", "t2", ".", "milliseconds", "desc", "limit", "value"], "question": "What is the id and family name of the driver who has the longest laptime?", "question_toks": ["What", "is", "the", "id", "and", "family", "name", "of", "the", "driver", "who", "has", "the", "longest", "laptime", "?"], "guid": 3332}}
{"text": "basketball_match: Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home; university: School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference | Find how many different affiliation types there are.", "sql": "SELECT count(DISTINCT affiliation) FROM university", "example": {"db_id": "university_basketball", "query": "SELECT count(DISTINCT affiliation) FROM university", "query_toks": ["SELECT", "count", "(", "DISTINCT", "affiliation", ")", "FROM", "university"], "query_toks_no_value": ["select", "count", "(", "distinct", "affiliation", ")", "from", "university"], "question": "Find how many different affiliation types there are.", "question_toks": ["Find", "how", "many", "different", "affiliation", "types", "there", "are", "."], "guid": 3333}}
{"text": "artist: Artist_ID, Artist, Age, Famous_Title, Famous_Release_date; volume: Volume_ID, Volume_Issue, Issue_Date, Weeks_on_Top, Song, Artist_ID; music_festival: ID, Music_Festival, Date_of_ceremony, Category, Volume, Result | What is the song in the volume with the maximum weeks on top?", "sql": "SELECT Song FROM volume ORDER BY Weeks_on_Top DESC LIMIT 1", "example": {"db_id": "music_4", "query": "SELECT Song FROM volume ORDER BY Weeks_on_Top DESC LIMIT 1", "query_toks": ["SELECT", "Song", "FROM", "volume", "ORDER", "BY", "Weeks_on_Top", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "song", "from", "volume", "order", "by", "weeks_on_top", "desc", "limit", "value"], "question": "What is the song in the volume with the maximum weeks on top?", "question_toks": ["What", "is", "the", "song", "in", "the", "volume", "with", "the", "maximum", "weeks", "on", "top", "?"], "guid": 1798}}
{"text": "singer: Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship; song: Song_ID, Title, Singer_ID, Sales, Highest_Position | Please show the most common citizenship of singers.", "sql": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1", "example": {"db_id": "singer", "query": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "Citizenship", "FROM", "singer", "GROUP", "BY", "Citizenship", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "citizenship", "from", "singer", "group", "by", "citizenship", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Please show the most common citizenship of singers.", "question_toks": ["Please", "show", "the", "most", "common", "citizenship", "of", "singers", "."], "guid": 1799}}
{"text": "conductor: Conductor_ID, Name, Age, Nationality, Year_of_Work; orchestra: Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format; performance: Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share; show: Show_ID, Performance_ID, If_first_show, Result, Attendance | What is the name of the conductor who has worked the greatest number of years?", "sql": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1", "example": {"db_id": "orchestra", "query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1", "query_toks": ["SELECT", "Name", "FROM", "conductor", "ORDER", "BY", "Year_of_Work", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "name", "from", "conductor", "order", "by", "year_of_work", "desc", "limit", "value"], "question": "What is the name of the conductor who has worked the greatest number of years?", "question_toks": ["What", "is", "the", "name", "of", "the", "conductor", "who", "has", "worked", "the", "greatest", "number", "of", "years", "?"], "guid": 1800}}
{"text": "artist: Artist_ID, Artist, Age, Famous_Title, Famous_Release_date; volume: Volume_ID, Volume_Issue, Issue_Date, Weeks_on_Top, Song, Artist_ID; music_festival: ID, Music_Festival, Date_of_ceremony, Category, Volume, Result | What are the categories of music festivals for which there have been more than 1 music festival?", "sql": "SELECT Category FROM music_festival GROUP BY Category HAVING COUNT(*)  >  1", "example": {"db_id": "music_4", "query": "SELECT Category FROM music_festival GROUP BY Category HAVING COUNT(*)  >  1", "query_toks": ["SELECT", "Category", "FROM", "music_festival", "GROUP", "BY", "Category", "HAVING", "COUNT", "(", "*", ")", ">", "1"], "query_toks_no_value": ["select", "category", "from", "music_festival", "group", "by", "category", "having", "count", "(", "*", ")", ">", "value"], "question": "What are the categories of music festivals for which there have been more than 1 music festival?", "question_toks": ["What", "are", "the", "categories", "of", "music", "festivals", "for", "which", "there", "have", "been", "more", "than", "1", "music", "festival", "?"], "guid": 1801}}
{"text": "musical: Musical_ID, Name, Year, Award, Category, Nominee, Result; actor: Actor_ID, Name, Musical_ID, Character, Duration, age | Show different nominees and the number of musicals they have been nominated.", "sql": "SELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee", "example": {"db_id": "musical", "query": "SELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee", "query_toks": ["SELECT", "Nominee", ",", "COUNT", "(", "*", ")", "FROM", "musical", "GROUP", "BY", "Nominee"], "query_toks_no_value": ["select", "nominee", ",", "count", "(", "*", ")", "from", "musical", "group", "by", "nominee"], "question": "Show different nominees and the number of musicals they have been nominated.", "question_toks": ["Show", "different", "nominees", "and", "the", "number", "of", "musicals", "they", "have", "been", "nominated", "."], "guid": 1802}}
{"text": "stadium: Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average; singer: Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male; concert: concert_ID, concert_Name, Theme, Stadium_ID, Year; singer_in_concert: concert_ID, Singer_ID | How many concerts are there in year 2014 or 2015?", "sql": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015", "example": {"db_id": "concert_singer", "query": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "concert", "WHERE", "YEAR", "=", "2014", "OR", "YEAR", "=", "2015"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "concert", "where", "year", "=", "value", "or", "year", "=", "value"], "question": "How many concerts are there in year 2014 or 2015?", "question_toks": ["How", "many", "concerts", "are", "there", "in", "year", "2014", "or", "2015", "?"], "guid": 1803}}
{"text": "stadium: Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average; singer: Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male; concert: concert_ID, concert_Name, Theme, Stadium_ID, Year; singer_in_concert: concert_ID, Singer_ID | Show countries where a singer above age 40 and a singer below 30 are from.", "sql": "SELECT country FROM singer WHERE age  >  40 INTERSECT SELECT country FROM singer WHERE age  <  30", "example": {"db_id": "concert_singer", "query": "SELECT country FROM singer WHERE age  >  40 INTERSECT SELECT country FROM singer WHERE age  <  30", "query_toks": ["SELECT", "country", "FROM", "singer", "WHERE", "age", ">", "40", "INTERSECT", "SELECT", "country", "FROM", "singer", "WHERE", "age", "<", "30"], "query_toks_no_value": ["select", "country", "from", "singer", "where", "age", ">", "value", "intersect", "select", "country", "from", "singer", "where", "age", "<", "value"], "question": "Show countries where a singer above age 40 and a singer below 30 are from.", "question_toks": ["Show", "countries", "where", "a", "singer", "above", "age", "40", "and", "a", "singer", "below", "30", "are", "from", "."], "guid": 1804}}
{"text": "genre: g_name, rating, most_popular_in; artist: artist_name, country, gender, preferred_genre; files: f_id, artist_name, file_size, duration, formats; song: song_name, artist_name, country, f_id, genre_is, rating, languages, releasedate, resolution | What is the average song duration for the songs that are in mp3 format and whose resolution below 800?", "sql": "SELECT avg(T1.duration) FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.formats  =  \"mp3\" AND T2.resolution   <  800", "example": {"db_id": "music_1", "query": "SELECT avg(T1.duration) FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.formats  =  \"mp3\" AND T2.resolution   <  800", "query_toks": ["SELECT", "avg", "(", "T1.duration", ")", "FROM", "files", "AS", "T1", "JOIN", "song", "AS", "T2", "ON", "T1.f_id", "=", "T2.f_id", "WHERE", "T1.formats", "=", "``", "mp3", "''", "AND", "T2.resolution", "<", "800"], "query_toks_no_value": ["select", "avg", "(", "t1", ".", "duration", ")", "from", "files", "as", "t1", "join", "song", "as", "t2", "on", "t1", ".", "f_id", "=", "t2", ".", "f_id", "where", "t1", ".", "formats", "=", "value", "and", "t2", ".", "resolution", "<", "value"], "question": "What is the average song duration for the songs that are in mp3 format and whose resolution below 800?", "question_toks": ["What", "is", "the", "average", "song", "duration", "for", "the", "songs", "that", "are", "in", "mp3", "format", "and", "whose", "resolution", "below", "800", "?"], "guid": 1805}}
{"text": "Songs: SongId, Title; Albums: AId, Title, Year, Label, Type; Band: Id, Firstname, Lastname; Instruments: SongId, BandmateId, Instrument; Performance: SongId, Bandmate, StagePosition; Tracklists: AlbumId, Position, SongId; Vocals: SongId, Bandmate, Type | What instrument did the musician with last name \"Heilo\" use in the song \"Badlands\"?", "sql": "SELECT T4.instrument FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId JOIN Instruments AS T4 ON T4.songid  =  T3.songid AND T4.bandmateid  =  T2.id WHERE T2.lastname  =  \"Heilo\" AND T3.title  =  \"Badlands\"", "example": {"db_id": "music_2", "query": "SELECT T4.instrument FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId JOIN Instruments AS T4 ON T4.songid  =  T3.songid AND T4.bandmateid  =  T2.id WHERE T2.lastname  =  \"Heilo\" AND T3.title  =  \"Badlands\"", "query_toks": ["SELECT", "T4.instrument", "FROM", "Performance", "AS", "T1", "JOIN", "Band", "AS", "T2", "ON", "T1.bandmate", "=", "T2.id", "JOIN", "Songs", "AS", "T3", "ON", "T3.SongId", "=", "T1.SongId", "JOIN", "Instruments", "AS", "T4", "ON", "T4.songid", "=", "T3.songid", "AND", "T4.bandmateid", "=", "T2.id", "WHERE", "T2.lastname", "=", "``", "Heilo", "''", "AND", "T3.title", "=", "``", "Badlands", "''"], "query_toks_no_value": ["select", "t4", ".", "instrument", "from", "performance", "as", "t1", "join", "band", "as", "t2", "on", "t1", ".", "bandmate", "=", "t2", ".", "id", "join", "songs", "as", "t3", "on", "t3", ".", "songid", "=", "t1", ".", "songid", "join", "instruments", "as", "t4", "on", "t4", ".", "songid", "=", "t3", ".", "songid", "and", "t4", ".", "bandmateid", "=", "t2", ".", "id", "where", "t2", ".", "lastname", "=", "value", "and", "t3", ".", "title", "=", "value"], "question": "What instrument did the musician with last name \"Heilo\" use in the song \"Badlands\"?", "question_toks": ["What", "instrument", "did", "the", "musician", "with", "last", "name", "``", "Heilo", "''", "use", "in", "the", "song", "``", "Badlands", "''", "?"], "guid": 1806}}
{"text": "genre: g_name, rating, most_popular_in; artist: artist_name, country, gender, preferred_genre; files: f_id, artist_name, file_size, duration, formats; song: song_name, artist_name, country, f_id, genre_is, rating, languages, releasedate, resolution | What are the names of the songs that have a lower rating than at least one blues song?", "sql": "SELECT song_name FROM song WHERE rating  <  (SELECT max(rating) FROM song WHERE genre_is  =  \"blues\")", "example": {"db_id": "music_1", "query": "SELECT song_name FROM song WHERE rating  <  (SELECT max(rating) FROM song WHERE genre_is  =  \"blues\")", "query_toks": ["SELECT", "song_name", "FROM", "song", "WHERE", "rating", "<", "(", "SELECT", "max", "(", "rating", ")", "FROM", "song", "WHERE", "genre_is", "=", "``", "blues", "''", ")"], "query_toks_no_value": ["select", "song_name", "from", "song", "where", "rating", "<", "(", "select", "max", "(", "rating", ")", "from", "song", "where", "genre_is", "=", "value", ")"], "question": "What are the names of the songs that have a lower rating than at least one blues song?", "question_toks": ["What", "are", "the", "names", "of", "the", "songs", "that", "have", "a", "lower", "rating", "than", "at", "least", "one", "blues", "song", "?"], "guid": 1807}}
{"text": "Songs: SongId, Title; Albums: AId, Title, Year, Label, Type; Band: Id, Firstname, Lastname; Instruments: SongId, BandmateId, Instrument; Performance: SongId, Bandmate, StagePosition; Tracklists: AlbumId, Position, SongId; Vocals: SongId, Bandmate, Type | What are the song titles on the album \"A Kiss Before You Go: Live in Hamburg\"?", "sql": "SELECT T3.title FROM albums AS T1 JOIN tracklists AS T2 ON T1.aid  =  T2.albumid JOIN songs AS T3 ON T2.songid  =  T3.songid WHERE T1.title  =  \"A Kiss Before You Go: Live in Hamburg\"", "example": {"db_id": "music_2", "query": "SELECT T3.title FROM albums AS T1 JOIN tracklists AS T2 ON T1.aid  =  T2.albumid JOIN songs AS T3 ON T2.songid  =  T3.songid WHERE T1.title  =  \"A Kiss Before You Go: Live in Hamburg\"", "query_toks": ["SELECT", "T3.title", "FROM", "albums", "AS", "T1", "JOIN", "tracklists", "AS", "T2", "ON", "T1.aid", "=", "T2.albumid", "JOIN", "songs", "AS", "T3", "ON", "T2.songid", "=", "T3.songid", "WHERE", "T1.title", "=", "``", "A", "Kiss", "Before", "You", "Go", ":", "Live", "in", "Hamburg", "''"], "query_toks_no_value": ["select", "t3", ".", "title", "from", "albums", "as", "t1", "join", "tracklists", "as", "t2", "on", "t1", ".", "aid", "=", "t2", ".", "albumid", "join", "songs", "as", "t3", "on", "t2", ".", "songid", "=", "t3", ".", "songid", "where", "t1", ".", "title", "=", "value"], "question": "What are the song titles on the album \"A Kiss Before You Go: Live in Hamburg\"?", "question_toks": ["What", "are", "the", "song", "titles", "on", "the", "album", "``", "A", "Kiss", "Before", "You", "Go", ":", "Live", "in", "Hamburg", "''", "?"], "guid": 1808}}
{"text": "genre: g_name, rating, most_popular_in; artist: artist_name, country, gender, preferred_genre; files: f_id, artist_name, file_size, duration, formats; song: song_name, artist_name, country, f_id, genre_is, rating, languages, releasedate, resolution | What is the id of the files that are available in the format of mp4 and a resolution smaller than 1000?", "sql": "SELECT f_id FROM files WHERE formats  =  \"mp4\" INTERSECT SELECT f_id FROM song WHERE resolution  <  1000", "example": {"db_id": "music_1", "query": "SELECT f_id FROM files WHERE formats  =  \"mp4\" INTERSECT SELECT f_id FROM song WHERE resolution  <  1000", "query_toks": ["SELECT", "f_id", "FROM", "files", "WHERE", "formats", "=", "``", "mp4", "''", "INTERSECT", "SELECT", "f_id", "FROM", "song", "WHERE", "resolution", "<", "1000"], "query_toks_no_value": ["select", "f_id", "from", "files", "where", "formats", "=", "value", "intersect", "select", "f_id", "from", "song", "where", "resolution", "<", "value"], "question": "What is the id of the files that are available in the format of mp4 and a resolution smaller than 1000?", "question_toks": ["What", "is", "the", "id", "of", "the", "files", "that", "are", "available", "in", "the", "format", "of", "mp4", "and", "a", "resolution", "smaller", "than", "1000", "?"], "guid": 1809}}
{"text": "genre: g_name, rating, most_popular_in; artist: artist_name, country, gender, preferred_genre; files: f_id, artist_name, file_size, duration, formats; song: song_name, artist_name, country, f_id, genre_is, rating, languages, releasedate, resolution | What is ids of the songs whose resolution is higher than the resolution of any songs with rating lower than 8?", "sql": "SELECT f_id FROM song WHERE resolution  >  (SELECT max(resolution) FROM song WHERE rating  <  8)", "example": {"db_id": "music_1", "query": "SELECT f_id FROM song WHERE resolution  >  (SELECT max(resolution) FROM song WHERE rating  <  8)", "query_toks": ["SELECT", "f_id", "FROM", "song", "WHERE", "resolution", ">", "(", "SELECT", "max", "(", "resolution", ")", "FROM", "song", "WHERE", "rating", "<", "8", ")"], "query_toks_no_value": ["select", "f_id", "from", "song", "where", "resolution", ">", "(", "select", "max", "(", "resolution", ")", "from", "song", "where", "rating", "<", "value", ")"], "question": "What is ids of the songs whose resolution is higher than the resolution of any songs with rating lower than 8?", "question_toks": ["What", "is", "ids", "of", "the", "songs", "whose", "resolution", "is", "higher", "than", "the", "resolution", "of", "any", "songs", "with", "rating", "lower", "than", "8", "?"], "guid": 1810}}
{"text": "Songs: SongId, Title; Albums: AId, Title, Year, Label, Type; Band: Id, Firstname, Lastname; Instruments: SongId, BandmateId, Instrument; Performance: SongId, Bandmate, StagePosition; Tracklists: AlbumId, Position, SongId; Vocals: SongId, Bandmate, Type | Which vocal type is the most frequently appearring type?", "sql": "SELECT TYPE FROM vocals GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "music_2", "query": "SELECT TYPE FROM vocals GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "TYPE", "FROM", "vocals", "GROUP", "BY", "TYPE", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "type", "from", "vocals", "group", "by", "type", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which vocal type is the most frequently appearring type?", "question_toks": ["Which", "vocal", "type", "is", "the", "most", "frequently", "appearring", "type", "?"], "guid": 1811}}
{"text": "genre: g_name, rating, most_popular_in; artist: artist_name, country, gender, preferred_genre; files: f_id, artist_name, file_size, duration, formats; song: song_name, artist_name, country, f_id, genre_is, rating, languages, releasedate, resolution | What are the different names for all songs that have a higher resolution than English songs?", "sql": "SELECT DISTINCT song_name FROM song WHERE resolution  >  (SELECT min(resolution) FROM song WHERE languages  =  \"english\")", "example": {"db_id": "music_1", "query": "SELECT DISTINCT song_name FROM song WHERE resolution  >  (SELECT min(resolution) FROM song WHERE languages  =  \"english\")", "query_toks": ["SELECT", "DISTINCT", "song_name", "FROM", "song", "WHERE", "resolution", ">", "(", "SELECT", "min", "(", "resolution", ")", "FROM", "song", "WHERE", "languages", "=", "``", "english", "''", ")"], "query_toks_no_value": ["select", "distinct", "song_name", "from", "song", "where", "resolution", ">", "(", "select", "min", "(", "resolution", ")", "from", "song", "where", "languages", "=", "value", ")"], "question": "What are the different names for all songs that have a higher resolution than English songs?", "question_toks": ["What", "are", "the", "different", "names", "for", "all", "songs", "that", "have", "a", "higher", "resolution", "than", "English", "songs", "?"], "guid": 1812}}
{"text": "conductor: Conductor_ID, Name, Age, Nationality, Year_of_Work; orchestra: Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format; performance: Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share; show: Show_ID, Performance_ID, If_first_show, Result, Attendance | How many different nationalities do conductors have?", "sql": "SELECT count(DISTINCT Nationality) FROM conductor", "example": {"db_id": "orchestra", "query": "SELECT count(DISTINCT Nationality) FROM conductor", "query_toks": ["SELECT", "count", "(", "DISTINCT", "Nationality", ")", "FROM", "conductor"], "query_toks_no_value": ["select", "count", "(", "distinct", "nationality", ")", "from", "conductor"], "question": "How many different nationalities do conductors have?", "question_toks": ["How", "many", "different", "nationalities", "do", "conductors", "have", "?"], "guid": 1813}}
{"text": "musical: Musical_ID, Name, Year, Award, Category, Nominee, Result; actor: Actor_ID, Name, Musical_ID, Character, Duration, age | Show names of musicals and the number of actors who have appeared in the musicals.", "sql": "SELECT T2.Name ,  COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID", "example": {"db_id": "musical", "query": "SELECT T2.Name ,  COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID", "query_toks": ["SELECT", "T2.Name", ",", "COUNT", "(", "*", ")", "FROM", "actor", "AS", "T1", "JOIN", "musical", "AS", "T2", "ON", "T1.Musical_ID", "=", "T2.Musical_ID", "GROUP", "BY", "T1.Musical_ID"], "query_toks_no_value": ["select", "t2", ".", "name", ",", "count", "(", "*", ")", "from", "actor", "as", "t1", "join", "musical", "as", "t2", "on", "t1", ".", "musical_id", "=", "t2", ".", "musical_id", "group", "by", "t1", ".", "musical_id"], "question": "Show names of musicals and the number of actors who have appeared in the musicals.", "question_toks": ["Show", "names", "of", "musicals", "and", "the", "number", "of", "actors", "who", "have", "appeared", "in", "the", "musicals", "."], "guid": 1814}}
{"text": "conductor: Conductor_ID, Name, Age, Nationality, Year_of_Work; orchestra: Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format; performance: Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share; show: Show_ID, Performance_ID, If_first_show, Result, Attendance | List the name of the conductor with the most years of work.", "sql": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1", "example": {"db_id": "orchestra", "query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1", "query_toks": ["SELECT", "Name", "FROM", "conductor", "ORDER", "BY", "Year_of_Work", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "name", "from", "conductor", "order", "by", "year_of_work", "desc", "limit", "value"], "question": "List the name of the conductor with the most years of work.", "question_toks": ["List", "the", "name", "of", "the", "conductor", "with", "the", "most", "years", "of", "work", "."], "guid": 1815}}
{"text": "artist: Artist_ID, Artist, Age, Famous_Title, Famous_Release_date; volume: Volume_ID, Volume_Issue, Issue_Date, Weeks_on_Top, Song, Artist_ID; music_festival: ID, Music_Festival, Date_of_ceremony, Category, Volume, Result | Return the dates of ceremony corresponding to music festivals that had the category \"Best Song\" and result \"Awarded\".", "sql": "SELECT Date_of_ceremony FROM music_festival WHERE Category  =  \"Best Song\" AND RESULT  =  \"Awarded\"", "example": {"db_id": "music_4", "query": "SELECT Date_of_ceremony FROM music_festival WHERE Category  =  \"Best Song\" AND RESULT  =  \"Awarded\"", "query_toks": ["SELECT", "Date_of_ceremony", "FROM", "music_festival", "WHERE", "Category", "=", "``", "Best", "Song", "''", "AND", "RESULT", "=", "``", "Awarded", "''"], "query_toks_no_value": ["select", "date_of_ceremony", "from", "music_festival", "where", "category", "=", "value", "and", "result", "=", "value"], "question": "Return the dates of ceremony corresponding to music festivals that had the category \"Best Song\" and result \"Awarded\".", "question_toks": ["Return", "the", "dates", "of", "ceremony", "corresponding", "to", "music", "festivals", "that", "had", "the", "category", "``", "Best", "Song", "''", "and", "result", "``", "Awarded", "''", "."], "guid": 1816}}
{"text": "genre: g_name, rating, most_popular_in; artist: artist_name, country, gender, preferred_genre; files: f_id, artist_name, file_size, duration, formats; song: song_name, artist_name, country, f_id, genre_is, rating, languages, releasedate, resolution | What are the languages that are used most often in songs?", "sql": "SELECT languages FROM song GROUP BY languages ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "music_1", "query": "SELECT languages FROM song GROUP BY languages ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "languages", "FROM", "song", "GROUP", "BY", "languages", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "languages", "from", "song", "group", "by", "languages", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What are the languages that are used most often in songs?", "question_toks": ["What", "are", "the", "languages", "that", "are", "used", "most", "often", "in", "songs", "?"], "guid": 1817}}
{"text": "artist: Artist_ID, Artist, Age, Famous_Title, Famous_Release_date; volume: Volume_ID, Volume_Issue, Issue_Date, Weeks_on_Top, Song, Artist_ID; music_festival: ID, Music_Festival, Date_of_ceremony, Category, Volume, Result | What are the famous titles of the artist \"Triumfall\"?", "sql": "SELECT Famous_Title FROM artist WHERE Artist  =  \"Triumfall\"", "example": {"db_id": "music_4", "query": "SELECT Famous_Title FROM artist WHERE Artist  =  \"Triumfall\"", "query_toks": ["SELECT", "Famous_Title", "FROM", "artist", "WHERE", "Artist", "=", "``", "Triumfall", "''"], "query_toks_no_value": ["select", "famous_title", "from", "artist", "where", "artist", "=", "value"], "question": "What are the famous titles of the artist \"Triumfall\"?", "question_toks": ["What", "are", "the", "famous", "titles", "of", "the", "artist", "``", "Triumfall", "''", "?"], "guid": 1818}}
{"text": "Songs: SongId, Title; Albums: AId, Title, Year, Label, Type; Band: Id, Firstname, Lastname; Instruments: SongId, BandmateId, Instrument; Performance: SongId, Bandmate, StagePosition; Tracklists: AlbumId, Position, SongId; Vocals: SongId, Bandmate, Type | What are the names of the songs without a lead vocal?", "sql": "SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid WHERE TYPE  =  \"lead\"", "example": {"db_id": "music_2", "query": "SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid WHERE TYPE  =  \"lead\"", "query_toks": ["SELECT", "DISTINCT", "title", "FROM", "vocals", "AS", "t1", "JOIN", "songs", "AS", "t2", "ON", "t1.songid", "=", "t2.songid", "EXCEPT", "SELECT", "t2.title", "FROM", "vocals", "AS", "t1", "JOIN", "songs", "AS", "t2", "ON", "t1.songid", "=", "t2.songid", "WHERE", "TYPE", "=", "``", "lead", "''"], "query_toks_no_value": ["select", "distinct", "title", "from", "vocals", "as", "t1", "join", "songs", "as", "t2", "on", "t1", ".", "songid", "=", "t2", ".", "songid", "except", "select", "t2", ".", "title", "from", "vocals", "as", "t1", "join", "songs", "as", "t2", "on", "t1", ".", "songid", "=", "t2", ".", "songid", "where", "type", "=", "value"], "question": "What are the names of the songs without a lead vocal?", "question_toks": ["What", "are", "the", "names", "of", "the", "songs", "without", "a", "lead", "vocal", "?"], "guid": 1819}}
{"text": "artist: Artist_ID, Artist, Age, Famous_Title, Famous_Release_date; volume: Volume_ID, Volume_Issue, Issue_Date, Weeks_on_Top, Song, Artist_ID; music_festival: ID, Music_Festival, Date_of_ceremony, Category, Volume, Result | Return the categories of music festivals that have the result \"Awarded\".", "sql": "SELECT Category FROM music_festival WHERE RESULT  =  \"Awarded\"", "example": {"db_id": "music_4", "query": "SELECT Category FROM music_festival WHERE RESULT  =  \"Awarded\"", "query_toks": ["SELECT", "Category", "FROM", "music_festival", "WHERE", "RESULT", "=", "``", "Awarded", "''"], "query_toks_no_value": ["select", "category", "from", "music_festival", "where", "result", "=", "value"], "question": "Return the categories of music festivals that have the result \"Awarded\".", "question_toks": ["Return", "the", "categories", "of", "music", "festivals", "that", "have", "the", "result", "``", "Awarded", "''", "."], "guid": 1820}}
{"text": "stadium: Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average; singer: Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male; concert: concert_ID, concert_Name, Theme, Stadium_ID, Year; singer_in_concert: concert_ID, Singer_ID | What are the names of the stadiums without any concerts?", "sql": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)", "example": {"db_id": "concert_singer", "query": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)", "query_toks": ["SELECT", "name", "FROM", "stadium", "WHERE", "stadium_id", "NOT", "IN", "(", "SELECT", "stadium_id", "FROM", "concert", ")"], "query_toks_no_value": ["select", "name", "from", "stadium", "where", "stadium_id", "not", "in", "(", "select", "stadium_id", "from", "concert", ")"], "question": "What are the names of the stadiums without any concerts?", "question_toks": ["What", "are", "the", "names", "of", "the", "stadiums", "without", "any", "concerts", "?"], "guid": 1821}}
{"text": "singer: Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship; song: Song_ID, Title, Singer_ID, Sales, Highest_Position | For each citizenship, what is the maximum net worth?", "sql": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship", "example": {"db_id": "singer", "query": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship", "query_toks": ["SELECT", "Citizenship", ",", "max", "(", "Net_Worth_Millions", ")", "FROM", "singer", "GROUP", "BY", "Citizenship"], "query_toks_no_value": ["select", "citizenship", ",", "max", "(", "net_worth_millions", ")", "from", "singer", "group", "by", "citizenship"], "question": "For each citizenship, what is the maximum net worth?", "question_toks": ["For", "each", "citizenship", ",", "what", "is", "the", "maximum", "net", "worth", "?"], "guid": 1822}}
{"text": "genre: g_name, rating, most_popular_in; artist: artist_name, country, gender, preferred_genre; files: f_id, artist_name, file_size, duration, formats; song: song_name, artist_name, country, f_id, genre_is, rating, languages, releasedate, resolution | What are the names of all singers that are from the UK and released a song in English?", "sql": "SELECT artist_name FROM artist WHERE country  =  \"UK\" INTERSECT SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.languages  =  \"english\"", "example": {"db_id": "music_1", "query": "SELECT artist_name FROM artist WHERE country  =  \"UK\" INTERSECT SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.languages  =  \"english\"", "query_toks": ["SELECT", "artist_name", "FROM", "artist", "WHERE", "country", "=", "``", "UK", "''", "INTERSECT", "SELECT", "T1.artist_name", "FROM", "artist", "AS", "T1", "JOIN", "song", "AS", "T2", "ON", "T1.artist_name", "=", "T2.artist_name", "WHERE", "T2.languages", "=", "``", "english", "''"], "query_toks_no_value": ["select", "artist_name", "from", "artist", "where", "country", "=", "value", "intersect", "select", "t1", ".", "artist_name", "from", "artist", "as", "t1", "join", "song", "as", "t2", "on", "t1", ".", "artist_name", "=", "t2", ".", "artist_name", "where", "t2", ".", "languages", "=", "value"], "question": "What are the names of all singers that are from the UK and released a song in English?", "question_toks": ["What", "are", "the", "names", "of", "all", "singers", "that", "are", "from", "the", "UK", "and", "released", "a", "song", "in", "English", "?"], "guid": 1823}}
{"text": "Songs: SongId, Title; Albums: AId, Title, Year, Label, Type; Band: Id, Firstname, Lastname; Instruments: SongId, BandmateId, Instrument; Performance: SongId, Bandmate, StagePosition; Tracklists: AlbumId, Position, SongId; Vocals: SongId, Bandmate, Type | Who performed the song named \"Badlands\"? Show the first name and the last name.", "sql": "SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  \"Badlands\"", "example": {"db_id": "music_2", "query": "SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  \"Badlands\"", "query_toks": ["SELECT", "T2.firstname", ",", "T2.lastname", "FROM", "Performance", "AS", "T1", "JOIN", "Band", "AS", "T2", "ON", "T1.bandmate", "=", "T2.id", "JOIN", "Songs", "AS", "T3", "ON", "T3.SongId", "=", "T1.SongId", "WHERE", "T3.Title", "=", "``", "Badlands", "''"], "query_toks_no_value": ["select", "t2", ".", "firstname", ",", "t2", ".", "lastname", "from", "performance", "as", "t1", "join", "band", "as", "t2", "on", "t1", ".", "bandmate", "=", "t2", ".", "id", "join", "songs", "as", "t3", "on", "t3", ".", "songid", "=", "t1", ".", "songid", "where", "t3", ".", "title", "=", "value"], "question": "Who performed the song named \"Badlands\"? Show the first name and the last name.", "question_toks": ["Who", "performed", "the", "song", "named", "``", "Badlands", "''", "?", "Show", "the", "first", "name", "and", "the", "last", "name", "."], "guid": 1824}}
{"text": "artist: Artist_ID, Artist, Age, Famous_Title, Famous_Release_date; volume: Volume_ID, Volume_Issue, Issue_Date, Weeks_on_Top, Song, Artist_ID; music_festival: ID, Music_Festival, Date_of_ceremony, Category, Volume, Result | List the age of all music artists.", "sql": "SELECT Age FROM artist", "example": {"db_id": "music_4", "query": "SELECT Age FROM artist", "query_toks": ["SELECT", "Age", "FROM", "artist"], "query_toks_no_value": ["select", "age", "from", "artist"], "question": "List the age of all music artists.", "question_toks": ["List", "the", "age", "of", "all", "music", "artists", "."], "guid": 1825}}
{"text": "artist: Artist_ID, Artist, Age, Famous_Title, Famous_Release_date; volume: Volume_ID, Volume_Issue, Issue_Date, Weeks_on_Top, Song, Artist_ID; music_festival: ID, Music_Festival, Date_of_ceremony, Category, Volume, Result | What is the average age of all artists?", "sql": "SELECT avg(Age) FROM artist", "example": {"db_id": "music_4", "query": "SELECT avg(Age) FROM artist", "query_toks": ["SELECT", "avg", "(", "Age", ")", "FROM", "artist"], "query_toks_no_value": ["select", "avg", "(", "age", ")", "from", "artist"], "question": "What is the average age of all artists?", "question_toks": ["What", "is", "the", "average", "age", "of", "all", "artists", "?"], "guid": 1826}}
{"text": "musical: Musical_ID, Name, Year, Award, Category, Nominee, Result; actor: Actor_ID, Name, Musical_ID, Character, Duration, age | Who are the nominees who were nominated for either of the Bob Fosse or Cleavant Derricks awards?", "sql": "SELECT Nominee FROM musical WHERE Award  =  \"Tony Award\" OR Award  =  \"Cleavant Derricks\"", "example": {"db_id": "musical", "query": "SELECT Nominee FROM musical WHERE Award  =  \"Tony Award\" OR Award  =  \"Cleavant Derricks\"", "query_toks": ["SELECT", "Nominee", "FROM", "musical", "WHERE", "Award", "=", "``", "Tony", "Award", "''", "OR", "Award", "=", "``", "Cleavant", "Derricks", "''"], "query_toks_no_value": ["select", "nominee", "from", "musical", "where", "award", "=", "value", "or", "award", "=", "value"], "question": "Who are the nominees who were nominated for either of the Bob Fosse or Cleavant Derricks awards?", "question_toks": ["Who", "are", "the", "nominees", "who", "were", "nominated", "for", "either", "of", "the", "Bob", "Fosse", "or", "Cleavant", "Derricks", "awards", "?"], "guid": 1827}}
{"text": "Songs: SongId, Title; Albums: AId, Title, Year, Label, Type; Band: Id, Firstname, Lastname; Instruments: SongId, BandmateId, Instrument; Performance: SongId, Bandmate, StagePosition; Tracklists: AlbumId, Position, SongId; Vocals: SongId, Bandmate, Type | How many different instruments are used in the song \"Badlands\"?", "sql": "SELECT count(DISTINCT instrument) FROM instruments AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Badlands\"", "example": {"db_id": "music_2", "query": "SELECT count(DISTINCT instrument) FROM instruments AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Badlands\"", "query_toks": ["SELECT", "count", "(", "DISTINCT", "instrument", ")", "FROM", "instruments", "AS", "T1", "JOIN", "songs", "AS", "T2", "ON", "T1.songid", "=", "T2.songid", "WHERE", "title", "=", "``", "Badlands", "''"], "query_toks_no_value": ["select", "count", "(", "distinct", "instrument", ")", "from", "instruments", "as", "t1", "join", "songs", "as", "t2", "on", "t1", ".", "songid", "=", "t2", ".", "songid", "where", "title", "=", "value"], "question": "How many different instruments are used in the song \"Badlands\"?", "question_toks": ["How", "many", "different", "instruments", "are", "used", "in", "the", "song", "``", "Badlands", "''", "?"], "guid": 1828}}
{"text": "genre: g_name, rating, most_popular_in; artist: artist_name, country, gender, preferred_genre; files: f_id, artist_name, file_size, duration, formats; song: song_name, artist_name, country, f_id, genre_is, rating, languages, releasedate, resolution | What is the gender and name of the artist who sang the song with the smallest resolution?", "sql": "SELECT T1.gender ,  T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name ORDER BY T2.resolution LIMIT 1", "example": {"db_id": "music_1", "query": "SELECT T1.gender ,  T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name ORDER BY T2.resolution LIMIT 1", "query_toks": ["SELECT", "T1.gender", ",", "T1.artist_name", "FROM", "artist", "AS", "T1", "JOIN", "song", "AS", "T2", "ON", "T1.artist_name", "=", "T2.artist_name", "ORDER", "BY", "T2.resolution", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "gender", ",", "t1", ".", "artist_name", "from", "artist", "as", "t1", "join", "song", "as", "t2", "on", "t1", ".", "artist_name", "=", "t2", ".", "artist_name", "order", "by", "t2", ".", "resolution", "limit", "value"], "question": "What is the gender and name of the artist who sang the song with the smallest resolution?", "question_toks": ["What", "is", "the", "gender", "and", "name", "of", "the", "artist", "who", "sang", "the", "song", "with", "the", "smallest", "resolution", "?"], "guid": 1829}}
{"text": "genre: g_name, rating, most_popular_in; artist: artist_name, country, gender, preferred_genre; files: f_id, artist_name, file_size, duration, formats; song: song_name, artist_name, country, f_id, genre_is, rating, languages, releasedate, resolution | What are the names of all songs that have a lower rating than some song of blues genre?", "sql": "SELECT song_name FROM song WHERE rating  <  (SELECT max(rating) FROM song WHERE genre_is  =  \"blues\")", "example": {"db_id": "music_1", "query": "SELECT song_name FROM song WHERE rating  <  (SELECT max(rating) FROM song WHERE genre_is  =  \"blues\")", "query_toks": ["SELECT", "song_name", "FROM", "song", "WHERE", "rating", "<", "(", "SELECT", "max", "(", "rating", ")", "FROM", "song", "WHERE", "genre_is", "=", "``", "blues", "''", ")"], "query_toks_no_value": ["select", "song_name", "from", "song", "where", "rating", "<", "(", "select", "max", "(", "rating", ")", "from", "song", "where", "genre_is", "=", "value", ")"], "question": "What are the names of all songs that have a lower rating than some song of blues genre?", "question_toks": ["What", "are", "the", "names", "of", "all", "songs", "that", "have", "a", "lower", "rating", "than", "some", "song", "of", "blues", "genre", "?"], "guid": 1830}}
{"text": "genre: g_name, rating, most_popular_in; artist: artist_name, country, gender, preferred_genre; files: f_id, artist_name, file_size, duration, formats; song: song_name, artist_name, country, f_id, genre_is, rating, languages, releasedate, resolution | How many songs have 4 minute duration?", "sql": "SELECT count(*) FROM files WHERE duration LIKE \"4:%\"", "example": {"db_id": "music_1", "query": "SELECT count(*) FROM files WHERE duration LIKE \"4:%\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "files", "WHERE", "duration", "LIKE", "``", "4", ":", "%", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "files", "where", "duration", "like", "value"], "question": "How many songs have 4 minute duration?", "question_toks": ["How", "many", "songs", "have", "4", "minute", "duration", "?"], "guid": 1831}}
{"text": "genre: g_name, rating, most_popular_in; artist: artist_name, country, gender, preferred_genre; files: f_id, artist_name, file_size, duration, formats; song: song_name, artist_name, country, f_id, genre_is, rating, languages, releasedate, resolution | How many songs, on average, are sung by a female artist?", "sql": "SELECT avg(T2.rating) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T1.gender  =  \"Female\"", "example": {"db_id": "music_1", "query": "SELECT avg(T2.rating) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T1.gender  =  \"Female\"", "query_toks": ["SELECT", "avg", "(", "T2.rating", ")", "FROM", "artist", "AS", "T1", "JOIN", "song", "AS", "T2", "ON", "T1.artist_name", "=", "T2.artist_name", "WHERE", "T1.gender", "=", "``", "Female", "''"], "query_toks_no_value": ["select", "avg", "(", "t2", ".", "rating", ")", "from", "artist", "as", "t1", "join", "song", "as", "t2", "on", "t1", ".", "artist_name", "=", "t2", ".", "artist_name", "where", "t1", ".", "gender", "=", "value"], "question": "How many songs, on average, are sung by a female artist?", "question_toks": ["How", "many", "songs", ",", "on", "average", ",", "are", "sung", "by", "a", "female", "artist", "?"], "guid": 1832}}
{"text": "stadium: Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average; singer: Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male; concert: concert_ID, concert_Name, Theme, Stadium_ID, Year; singer_in_concert: concert_ID, Singer_ID | What are  the different countries with singers above age 20?", "sql": "SELECT DISTINCT country FROM singer WHERE age  >  20", "example": {"db_id": "concert_singer", "query": "SELECT DISTINCT country FROM singer WHERE age  >  20", "query_toks": ["SELECT", "DISTINCT", "country", "FROM", "singer", "WHERE", "age", ">", "20"], "query_toks_no_value": ["select", "distinct", "country", "from", "singer", "where", "age", ">", "value"], "question": "What are  the different countries with singers above age 20?", "question_toks": ["What", "are", "the", "different", "countries", "with", "singers", "above", "age", "20", "?"], "guid": 1833}}
{"text": "musical: Musical_ID, Name, Year, Award, Category, Nominee, Result; actor: Actor_ID, Name, Musical_ID, Character, Duration, age | What are the characters and duration of actors?", "sql": "SELECT Character ,  Duration FROM actor", "example": {"db_id": "musical", "query": "SELECT Character ,  Duration FROM actor", "query_toks": ["SELECT", "Character", ",", "Duration", "FROM", "actor"], "query_toks_no_value": ["select", "character", ",", "duration", "from", "actor"], "question": "What are the characters and duration of actors?", "question_toks": ["What", "are", "the", "characters", "and", "duration", "of", "actors", "?"], "guid": 1834}}
{"text": "conductor: Conductor_ID, Name, Age, Nationality, Year_of_Work; orchestra: Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format; performance: Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share; show: Show_ID, Performance_ID, If_first_show, Result, Attendance | What are the names of conductors as well as the corresonding orchestras that they have conducted?", "sql": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID", "example": {"db_id": "orchestra", "query": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID", "query_toks": ["SELECT", "T1.Name", ",", "T2.Orchestra", "FROM", "conductor", "AS", "T1", "JOIN", "orchestra", "AS", "T2", "ON", "T1.Conductor_ID", "=", "T2.Conductor_ID"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "t2", ".", "orchestra", "from", "conductor", "as", "t1", "join", "orchestra", "as", "t2", "on", "t1", ".", "conductor_id", "=", "t2", ".", "conductor_id"], "question": "What are the names of conductors as well as the corresonding orchestras that they have conducted?", "question_toks": ["What", "are", "the", "names", "of", "conductors", "as", "well", "as", "the", "corresonding", "orchestras", "that", "they", "have", "conducted", "?"], "guid": 1835}}
{"text": "musical: Musical_ID, Name, Year, Award, Category, Nominee, Result; actor: Actor_ID, Name, Musical_ID, Character, Duration, age | What are the distinct nominees of the musicals with the award that is not \"Tony Award\"?", "sql": "SELECT DISTINCT Nominee FROM musical WHERE Award != \"Tony Award\"", "example": {"db_id": "musical", "query": "SELECT DISTINCT Nominee FROM musical WHERE Award != \"Tony Award\"", "query_toks": ["SELECT", "DISTINCT", "Nominee", "FROM", "musical", "WHERE", "Award", "!", "=", "``", "Tony", "Award", "''"], "query_toks_no_value": ["select", "distinct", "nominee", "from", "musical", "where", "award", "!", "=", "value"], "question": "What are the distinct nominees of the musicals with the award that is not \"Tony Award\"?", "question_toks": ["What", "are", "the", "distinct", "nominees", "of", "the", "musicals", "with", "the", "award", "that", "is", "not", "``", "Tony", "Award", "''", "?"], "guid": 1836}}
{"text": "Songs: SongId, Title; Albums: AId, Title, Year, Label, Type; Band: Id, Firstname, Lastname; Instruments: SongId, BandmateId, Instrument; Performance: SongId, Bandmate, StagePosition; Tracklists: AlbumId, Position, SongId; Vocals: SongId, Bandmate, Type | Find all the songs produced by artists with first name \"Marianne\".", "sql": "SELECT T3.Title FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T2.firstname  =  \"Marianne\"", "example": {"db_id": "music_2", "query": "SELECT T3.Title FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T2.firstname  =  \"Marianne\"", "query_toks": ["SELECT", "T3.Title", "FROM", "Performance", "AS", "T1", "JOIN", "Band", "AS", "T2", "ON", "T1.bandmate", "=", "T2.id", "JOIN", "Songs", "AS", "T3", "ON", "T3.SongId", "=", "T1.SongId", "WHERE", "T2.firstname", "=", "``", "Marianne", "''"], "query_toks_no_value": ["select", "t3", ".", "title", "from", "performance", "as", "t1", "join", "band", "as", "t2", "on", "t1", ".", "bandmate", "=", "t2", ".", "id", "join", "songs", "as", "t3", "on", "t3", ".", "songid", "=", "t1", ".", "songid", "where", "t2", ".", "firstname", "=", "value"], "question": "Find all the songs produced by artists with first name \"Marianne\".", "question_toks": ["Find", "all", "the", "songs", "produced", "by", "artists", "with", "first", "name", "``", "Marianne", "''", "."], "guid": 1837}}
{"text": "Songs: SongId, Title; Albums: AId, Title, Year, Label, Type; Band: Id, Firstname, Lastname; Instruments: SongId, BandmateId, Instrument; Performance: SongId, Bandmate, StagePosition; Tracklists: AlbumId, Position, SongId; Vocals: SongId, Bandmate, Type | How many vocal types are used in the song \"Le Pop\"?", "sql": "SELECT count(*) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Le Pop\"", "example": {"db_id": "music_2", "query": "SELECT count(*) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Le Pop\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "vocals", "AS", "T1", "JOIN", "songs", "AS", "T2", "ON", "T1.songid", "=", "T2.songid", "WHERE", "title", "=", "``", "Le", "Pop", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "vocals", "as", "t1", "join", "songs", "as", "t2", "on", "t1", ".", "songid", "=", "t2", ".", "songid", "where", "title", "=", "value"], "question": "How many vocal types are used in the song \"Le Pop\"?", "question_toks": ["How", "many", "vocal", "types", "are", "used", "in", "the", "song", "``", "Le", "Pop", "''", "?"], "guid": 1838}}
{"text": "genre: g_name, rating, most_popular_in; artist: artist_name, country, gender, preferred_genre; files: f_id, artist_name, file_size, duration, formats; song: song_name, artist_name, country, f_id, genre_is, rating, languages, releasedate, resolution | What is the name of the artist, for each language, that has the most songs with a higher resolution than 500?", "sql": "SELECT artist_name FROM song WHERE resolution  >  500 GROUP BY languages ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "music_1", "query": "SELECT artist_name FROM song WHERE resolution  >  500 GROUP BY languages ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "artist_name", "FROM", "song", "WHERE", "resolution", ">", "500", "GROUP", "BY", "languages", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "artist_name", "from", "song", "where", "resolution", ">", "value", "group", "by", "languages", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the name of the artist, for each language, that has the most songs with a higher resolution than 500?", "question_toks": ["What", "is", "the", "name", "of", "the", "artist", ",", "for", "each", "language", ",", "that", "has", "the", "most", "songs", "with", "a", "higher", "resolution", "than", "500", "?"], "guid": 1839}}
{"text": "genre: g_name, rating, most_popular_in; artist: artist_name, country, gender, preferred_genre; files: f_id, artist_name, file_size, duration, formats; song: song_name, artist_name, country, f_id, genre_is, rating, languages, releasedate, resolution | What is the number of artists for each gender?", "sql": "SELECT count(*) ,  gender FROM artist GROUP BY gender", "example": {"db_id": "music_1", "query": "SELECT count(*) ,  gender FROM artist GROUP BY gender", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "gender", "FROM", "artist", "GROUP", "BY", "gender"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "gender", "from", "artist", "group", "by", "gender"], "question": "What is the number of artists for each gender?", "question_toks": ["What", "is", "the", "number", "of", "artists", "for", "each", "gender", "?"], "guid": 1840}}
{"text": "Songs: SongId, Title; Albums: AId, Title, Year, Label, Type; Band: Id, Firstname, Lastname; Instruments: SongId, BandmateId, Instrument; Performance: SongId, Bandmate, StagePosition; Tracklists: AlbumId, Position, SongId; Vocals: SongId, Bandmate, Type | What is the label with the most albums?", "sql": "SELECT label FROM albums GROUP BY label ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "music_2", "query": "SELECT label FROM albums GROUP BY label ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "label", "FROM", "albums", "GROUP", "BY", "label", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "label", "from", "albums", "group", "by", "label", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the label with the most albums?", "question_toks": ["What", "is", "the", "label", "with", "the", "most", "albums", "?"], "guid": 1841}}
{"text": "musical: Musical_ID, Name, Year, Award, Category, Nominee, Result; actor: Actor_ID, Name, Musical_ID, Character, Duration, age | Count the number of actors.", "sql": "SELECT count(*) FROM actor", "example": {"db_id": "musical", "query": "SELECT count(*) FROM actor", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "actor"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "actor"], "question": "Count the number of actors.", "question_toks": ["Count", "the", "number", "of", "actors", "."], "guid": 1842}}
{"text": "singer: Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship; song: Song_ID, Title, Singer_ID, Sales, Highest_Position | Show the name of singers whose birth year is either 1948 or 1949?", "sql": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949", "example": {"db_id": "singer", "query": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949", "query_toks": ["SELECT", "Name", "FROM", "singer", "WHERE", "Birth_Year", "=", "1948", "OR", "Birth_Year", "=", "1949"], "query_toks_no_value": ["select", "name", "from", "singer", "where", "birth_year", "=", "value", "or", "birth_year", "=", "value"], "question": "Show the name of singers whose birth year is either 1948 or 1949?", "question_toks": ["Show", "the", "name", "of", "singers", "whose", "birth", "year", "is", "either", "1948", "or", "1949", "?"], "guid": 1843}}
{"text": "Songs: SongId, Title; Albums: AId, Title, Year, Label, Type; Band: Id, Firstname, Lastname; Instruments: SongId, BandmateId, Instrument; Performance: SongId, Bandmate, StagePosition; Tracklists: AlbumId, Position, SongId; Vocals: SongId, Bandmate, Type | What are the first and last names of the artist who perfomed the song \"Badlands\"?", "sql": "SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  \"Badlands\"", "example": {"db_id": "music_2", "query": "SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  \"Badlands\"", "query_toks": ["SELECT", "T2.firstname", ",", "T2.lastname", "FROM", "Performance", "AS", "T1", "JOIN", "Band", "AS", "T2", "ON", "T1.bandmate", "=", "T2.id", "JOIN", "Songs", "AS", "T3", "ON", "T3.SongId", "=", "T1.SongId", "WHERE", "T3.Title", "=", "``", "Badlands", "''"], "query_toks_no_value": ["select", "t2", ".", "firstname", ",", "t2", ".", "lastname", "from", "performance", "as", "t1", "join", "band", "as", "t2", "on", "t1", ".", "bandmate", "=", "t2", ".", "id", "join", "songs", "as", "t3", "on", "t3", ".", "songid", "=", "t1", ".", "songid", "where", "t3", ".", "title", "=", "value"], "question": "What are the first and last names of the artist who perfomed the song \"Badlands\"?", "question_toks": ["What", "are", "the", "first", "and", "last", "names", "of", "the", "artist", "who", "perfomed", "the", "song", "``", "Badlands", "''", "?"], "guid": 1844}}
{"text": "Songs: SongId, Title; Albums: AId, Title, Year, Label, Type; Band: Id, Firstname, Lastname; Instruments: SongId, BandmateId, Instrument; Performance: SongId, Bandmate, StagePosition; Tracklists: AlbumId, Position, SongId; Vocals: SongId, Bandmate, Type | What is the song with the most vocals?", "sql": "SELECT title FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid GROUP BY T1.songid ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "music_2", "query": "SELECT title FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid GROUP BY T1.songid ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "title", "FROM", "vocals", "AS", "T1", "JOIN", "songs", "AS", "T2", "ON", "T1.songid", "=", "T2.songid", "GROUP", "BY", "T1.songid", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "title", "from", "vocals", "as", "t1", "join", "songs", "as", "t2", "on", "t1", ".", "songid", "=", "t2", ".", "songid", "group", "by", "t1", ".", "songid", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the song with the most vocals?", "question_toks": ["What", "is", "the", "song", "with", "the", "most", "vocals", "?"], "guid": 1845}}
{"text": "artist: Artist_ID, Artist, Age, Famous_Title, Famous_Release_date; volume: Volume_ID, Volume_Issue, Issue_Date, Weeks_on_Top, Song, Artist_ID; music_festival: ID, Music_Festival, Date_of_ceremony, Category, Volume, Result | What are the famous titles of artists who have not only had volumes that spent more than 2 weeks on top but also volumes that spent less than 2 weeks on top?", "sql": "SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T2.Weeks_on_Top  >  2 INTERSECT SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T2.Weeks_on_Top  <  2", "example": {"db_id": "music_4", "query": "SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T2.Weeks_on_Top  >  2 INTERSECT SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T2.Weeks_on_Top  <  2", "query_toks": ["SELECT", "T1.Famous_Title", "FROM", "artist", "AS", "T1", "JOIN", "volume", "AS", "T2", "ON", "T1.Artist_ID", "=", "T2.Artist_ID", "WHERE", "T2.Weeks_on_Top", ">", "2", "INTERSECT", "SELECT", "T1.Famous_Title", "FROM", "artist", "AS", "T1", "JOIN", "volume", "AS", "T2", "ON", "T1.Artist_ID", "=", "T2.Artist_ID", "WHERE", "T2.Weeks_on_Top", "<", "2"], "query_toks_no_value": ["select", "t1", ".", "famous_title", "from", "artist", "as", "t1", "join", "volume", "as", "t2", "on", "t1", ".", "artist_id", "=", "t2", ".", "artist_id", "where", "t2", ".", "weeks_on_top", ">", "value", "intersect", "select", "t1", ".", "famous_title", "from", "artist", "as", "t1", "join", "volume", "as", "t2", "on", "t1", ".", "artist_id", "=", "t2", ".", "artist_id", "where", "t2", ".", "weeks_on_top", "<", "value"], "question": "What are the famous titles of artists who have not only had volumes that spent more than 2 weeks on top but also volumes that spent less than 2 weeks on top?", "question_toks": ["What", "are", "the", "famous", "titles", "of", "artists", "who", "have", "not", "only", "had", "volumes", "that", "spent", "more", "than", "2", "weeks", "on", "top", "but", "also", "volumes", "that", "spent", "less", "than", "2", "weeks", "on", "top", "?"], "guid": 1846}}
{"text": "genre: g_name, rating, most_popular_in; artist: artist_name, country, gender, preferred_genre; files: f_id, artist_name, file_size, duration, formats; song: song_name, artist_name, country, f_id, genre_is, rating, languages, releasedate, resolution | What are the maximum and minimum resolution of songs whose duration is 3 minutes?", "sql": "SELECT max(T2.resolution) ,  min(T2.resolution) FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.duration LIKE \"3:%\"", "example": {"db_id": "music_1", "query": "SELECT max(T2.resolution) ,  min(T2.resolution) FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.duration LIKE \"3:%\"", "query_toks": ["SELECT", "max", "(", "T2.resolution", ")", ",", "min", "(", "T2.resolution", ")", "FROM", "files", "AS", "T1", "JOIN", "song", "AS", "T2", "ON", "T1.f_id", "=", "T2.f_id", "WHERE", "T1.duration", "LIKE", "``", "3", ":", "%", "''"], "query_toks_no_value": ["select", "max", "(", "t2", ".", "resolution", ")", ",", "min", "(", "t2", ".", "resolution", ")", "from", "files", "as", "t1", "join", "song", "as", "t2", "on", "t1", ".", "f_id", "=", "t2", ".", "f_id", "where", "t1", ".", "duration", "like", "value"], "question": "What are the maximum and minimum resolution of songs whose duration is 3 minutes?", "question_toks": ["What", "are", "the", "maximum", "and", "minimum", "resolution", "of", "songs", "whose", "duration", "is", "3", "minutes", "?"], "guid": 1847}}
{"text": "Songs: SongId, Title; Albums: AId, Title, Year, Label, Type; Band: Id, Firstname, Lastname; Instruments: SongId, BandmateId, Instrument; Performance: SongId, Bandmate, StagePosition; Tracklists: AlbumId, Position, SongId; Vocals: SongId, Bandmate, Type | Who performed the song named \"Le Pop\"?", "sql": "SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  \"Le Pop\"", "example": {"db_id": "music_2", "query": "SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  \"Le Pop\"", "query_toks": ["SELECT", "T2.firstname", ",", "T2.lastname", "FROM", "Performance", "AS", "T1", "JOIN", "Band", "AS", "T2", "ON", "T1.bandmate", "=", "T2.id", "JOIN", "Songs", "AS", "T3", "ON", "T3.SongId", "=", "T1.SongId", "WHERE", "T3.Title", "=", "``", "Le", "Pop", "''"], "query_toks_no_value": ["select", "t2", ".", "firstname", ",", "t2", ".", "lastname", "from", "performance", "as", "t1", "join", "band", "as", "t2", "on", "t1", ".", "bandmate", "=", "t2", ".", "id", "join", "songs", "as", "t3", "on", "t3", ".", "songid", "=", "t1", ".", "songid", "where", "t3", ".", "title", "=", "value"], "question": "Who performed the song named \"Le Pop\"?", "question_toks": ["Who", "performed", "the", "song", "named", "``", "Le", "Pop", "''", "?"], "guid": 1848}}
{"text": "conductor: Conductor_ID, Name, Age, Nationality, Year_of_Work; orchestra: Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format; performance: Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share; show: Show_ID, Performance_ID, If_first_show, Result, Attendance | What is the record company used by the greatest number of orchestras?", "sql": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1", "example": {"db_id": "orchestra", "query": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "Record_Company", "FROM", "orchestra", "GROUP", "BY", "Record_Company", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "record_company", "from", "orchestra", "group", "by", "record_company", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the record company used by the greatest number of orchestras?", "question_toks": ["What", "is", "the", "record", "company", "used", "by", "the", "greatest", "number", "of", "orchestras", "?"], "guid": 1849}}
{"text": "conductor: Conductor_ID, Name, Age, Nationality, Year_of_Work; orchestra: Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format; performance: Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share; show: Show_ID, Performance_ID, If_first_show, Result, Attendance | What is the average attendance of shows?", "sql": "SELECT avg(Attendance) FROM SHOW", "example": {"db_id": "orchestra", "query": "SELECT avg(Attendance) FROM SHOW", "query_toks": ["SELECT", "avg", "(", "Attendance", ")", "FROM", "SHOW"], "query_toks_no_value": ["select", "avg", "(", "attendance", ")", "from", "show"], "question": "What is the average attendance of shows?", "question_toks": ["What", "is", "the", "average", "attendance", "of", "shows", "?"], "guid": 1850}}
{"text": "genre: g_name, rating, most_popular_in; artist: artist_name, country, gender, preferred_genre; files: f_id, artist_name, file_size, duration, formats; song: song_name, artist_name, country, f_id, genre_is, rating, languages, releasedate, resolution | Find the names of songs whose genre is modern or language is English.", "sql": "SELECT song_name FROM song WHERE genre_is  =  \"modern\" OR languages  =  \"english\"", "example": {"db_id": "music_1", "query": "SELECT song_name FROM song WHERE genre_is  =  \"modern\" OR languages  =  \"english\"", "query_toks": ["SELECT", "song_name", "FROM", "song", "WHERE", "genre_is", "=", "``", "modern", "''", "OR", "languages", "=", "``", "english", "''"], "query_toks_no_value": ["select", "song_name", "from", "song", "where", "genre_is", "=", "value", "or", "languages", "=", "value"], "question": "Find the names of songs whose genre is modern or language is English.", "question_toks": ["Find", "the", "names", "of", "songs", "whose", "genre", "is", "modern", "or", "language", "is", "English", "."], "guid": 1851}}
{"text": "Songs: SongId, Title; Albums: AId, Title, Year, Label, Type; Band: Id, Firstname, Lastname; Instruments: SongId, BandmateId, Instrument; Performance: SongId, Bandmate, StagePosition; Tracklists: AlbumId, Position, SongId; Vocals: SongId, Bandmate, Type | Find all the songs whose name contains the word \"the\".", "sql": "SELECT title FROM songs WHERE title LIKE '% the %'", "example": {"db_id": "music_2", "query": "SELECT title FROM songs WHERE title LIKE '% the %'", "query_toks": ["SELECT", "title", "FROM", "songs", "WHERE", "title", "LIKE", "'", "%", "the", "%", "'"], "query_toks_no_value": ["select", "title", "from", "songs", "where", "title", "like", "value"], "question": "Find all the songs whose name contains the word \"the\".", "question_toks": ["Find", "all", "the", "songs", "whose", "name", "contains", "the", "word", "``", "the", "''", "."], "guid": 1852}}
{"text": "Songs: SongId, Title; Albums: AId, Title, Year, Label, Type; Band: Id, Firstname, Lastname; Instruments: SongId, BandmateId, Instrument; Performance: SongId, Bandmate, StagePosition; Tracklists: AlbumId, Position, SongId; Vocals: SongId, Bandmate, Type | What is the most used instrument?", "sql": "SELECT instrument FROM instruments GROUP BY instrument ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "music_2", "query": "SELECT instrument FROM instruments GROUP BY instrument ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "instrument", "FROM", "instruments", "GROUP", "BY", "instrument", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "instrument", "from", "instruments", "group", "by", "instrument", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the most used instrument?", "question_toks": ["What", "is", "the", "most", "used", "instrument", "?"], "guid": 1853}}
{"text": "stadium: Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average; singer: Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male; concert: concert_ID, concert_Name, Theme, Stadium_ID, Year; singer_in_concert: concert_ID, Singer_ID | What is the average, minimum, and maximum age for all French singers?", "sql": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'", "example": {"db_id": "concert_singer", "query": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'", "query_toks": ["SELECT", "avg", "(", "age", ")", ",", "min", "(", "age", ")", ",", "max", "(", "age", ")", "FROM", "singer", "WHERE", "country", "=", "'France", "'"], "query_toks_no_value": ["select", "avg", "(", "age", ")", ",", "min", "(", "age", ")", ",", "max", "(", "age", ")", "from", "singer", "where", "country", "=", "value"], "question": "What is the average, minimum, and maximum age for all French singers?", "question_toks": ["What", "is", "the", "average", ",", "minimum", ",", "and", "maximum", "age", "for", "all", "French", "singers", "?"], "guid": 1854}}
{"text": "genre: g_name, rating, most_popular_in; artist: artist_name, country, gender, preferred_genre; files: f_id, artist_name, file_size, duration, formats; song: song_name, artist_name, country, f_id, genre_is, rating, languages, releasedate, resolution | What is the id, genre, and name of the artist for every English song ordered by ascending rating?", "sql": "SELECT f_id ,  genre_is ,  artist_name FROM song WHERE languages  =   \"english\" ORDER BY rating", "example": {"db_id": "music_1", "query": "SELECT f_id ,  genre_is ,  artist_name FROM song WHERE languages  =   \"english\" ORDER BY rating", "query_toks": ["SELECT", "f_id", ",", "genre_is", ",", "artist_name", "FROM", "song", "WHERE", "languages", "=", "``", "english", "''", "ORDER", "BY", "rating"], "query_toks_no_value": ["select", "f_id", ",", "genre_is", ",", "artist_name", "from", "song", "where", "languages", "=", "value", "order", "by", "rating"], "question": "What is the id, genre, and name of the artist for every English song ordered by ascending rating?", "question_toks": ["What", "is", "the", "id", ",", "genre", ",", "and", "name", "of", "the", "artist", "for", "every", "English", "song", "ordered", "by", "ascending", "rating", "?"], "guid": 1855}}
{"text": "genre: g_name, rating, most_popular_in; artist: artist_name, country, gender, preferred_genre; files: f_id, artist_name, file_size, duration, formats; song: song_name, artist_name, country, f_id, genre_is, rating, languages, releasedate, resolution | What are the maximum duration and resolution of songs grouped and ordered by languages?", "sql": "SELECT max(T1.duration) ,  max(T2.resolution) ,  T2.languages FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id GROUP BY T2.languages ORDER BY T2.languages", "example": {"db_id": "music_1", "query": "SELECT max(T1.duration) ,  max(T2.resolution) ,  T2.languages FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id GROUP BY T2.languages ORDER BY T2.languages", "query_toks": ["SELECT", "max", "(", "T1.duration", ")", ",", "max", "(", "T2.resolution", ")", ",", "T2.languages", "FROM", "files", "AS", "T1", "JOIN", "song", "AS", "T2", "ON", "T1.f_id", "=", "T2.f_id", "GROUP", "BY", "T2.languages", "ORDER", "BY", "T2.languages"], "query_toks_no_value": ["select", "max", "(", "t1", ".", "duration", ")", ",", "max", "(", "t2", ".", "resolution", ")", ",", "t2", ".", "languages", "from", "files", "as", "t1", "join", "song", "as", "t2", "on", "t1", ".", "f_id", "=", "t2", ".", "f_id", "group", "by", "t2", ".", "languages", "order", "by", "t2", ".", "languages"], "question": "What are the maximum duration and resolution of songs grouped and ordered by languages?", "question_toks": ["What", "are", "the", "maximum", "duration", "and", "resolution", "of", "songs", "grouped", "and", "ordered", "by", "languages", "?"], "guid": 1856}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | acl 2016 authors", "sql": "SELECT DISTINCT t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2016 AND t3.venuename  =  \"acl\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2016 AND t3.venuename  =  \"acl\";", "query_toks": ["SELECT", "DISTINCT", "t1.authorid", "FROM", "venue", "AS", "t3", "JOIN", "paper", "AS", "t2", "ON", "t3.venueid", "=", "t2.venueid", "JOIN", "writes", "AS", "t1", "ON", "t1.paperid", "=", "t2.paperid", "WHERE", "t2.year", "=", "2016", "AND", "t3.venuename", "=", "``", "acl", "''", ";"], "query_toks_no_value": ["select", "distinct", "t1", ".", "authorid", "from", "venue", "as", "t3", "join", "paper", "as", "t2", "on", "t3", ".", "venueid", "=", "t2", ".", "venueid", "join", "writes", "as", "t1", "on", "t1", ".", "paperid", "=", "t2", ".", "paperid", "where", "t2", ".", "year", "=", "value", "and", "t3", ".", "venuename", "=", "value"], "question": "acl 2016 authors", "question_toks": ["acl", "2016", "authors"], "guid": 4560}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | which papers in acl 2012 had Parsing in them ?", "sql": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Parsing\" AND t3.year  =  2012 AND t4.venuename  =  \"acl\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Parsing\" AND t3.year  =  2012 AND t4.venuename  =  \"acl\";", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "JOIN", "venue", "AS", "t4", "ON", "t4.venueid", "=", "t3.venueid", "WHERE", "t1.keyphrasename", "=", "``", "Parsing", "''", "AND", "t3.year", "=", "2012", "AND", "t4.venuename", "=", "``", "acl", "''", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "join", "venue", "as", "t4", "on", "t4", ".", "venueid", "=", "t3", ".", "venueid", "where", "t1", ".", "keyphrasename", "=", "value", "and", "t3", ".", "year", "=", "value", "and", "t4", ".", "venuename", "=", "value"], "question": "which papers in acl 2012 had Parsing in them ?", "question_toks": ["which", "papers", "in", "acl", "2012", "had", "Parsing", "in", "them", "?"], "guid": 4561}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | sharon goldwater papers", "sql": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";", "query_toks": ["SELECT", "DISTINCT", "t2.paperid", "FROM", "writes", "AS", "t2", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "WHERE", "t1.authorname", "=", "``", "sharon", "goldwater", "''", ";"], "query_toks_no_value": ["select", "distinct", "t2", ".", "paperid", "from", "writes", "as", "t2", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "where", "t1", ".", "authorname", "=", "value"], "question": "sharon goldwater papers", "question_toks": ["sharon", "goldwater", "papers"], "guid": 4562}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the number of papers in PVLDB in \" University of Michigan \" .", "sql": "SELECT COUNT ( DISTINCT t5.title ) FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid JOIN writes AS t4 ON t4.aid  =  t1.aid JOIN publication AS t5 ON t4.pid  =  t5.pid JOIN journal AS t3 ON t5.jid  =  t3.jid WHERE t3.name  =  \"PVLDB\" AND t2.name  =  \"University of Michigan\";", "example": {"db_id": "academic", "query": "SELECT COUNT ( DISTINCT t5.title ) FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid JOIN writes AS t4 ON t4.aid  =  t1.aid JOIN publication AS t5 ON t4.pid  =  t5.pid JOIN journal AS t3 ON t5.jid  =  t3.jid WHERE t3.name  =  \"PVLDB\" AND t2.name  =  \"University of Michigan\";", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "t5.title", ")", "FROM", "organization", "AS", "t2", "JOIN", "author", "AS", "t1", "ON", "t2.oid", "=", "t1.oid", "JOIN", "writes", "AS", "t4", "ON", "t4.aid", "=", "t1.aid", "JOIN", "publication", "AS", "t5", "ON", "t4.pid", "=", "t5.pid", "JOIN", "journal", "AS", "t3", "ON", "t5.jid", "=", "t3.jid", "WHERE", "t3.name", "=", "``", "PVLDB", "''", "AND", "t2.name", "=", "``", "University", "of", "Michigan", "''", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "t5", ".", "title", ")", "from", "organization", "as", "t2", "join", "author", "as", "t1", "on", "t2", ".", "oid", "=", "t1", ".", "oid", "join", "writes", "as", "t4", "on", "t4", ".", "aid", "=", "t1", ".", "aid", "join", "publication", "as", "t5", "on", "t4", ".", "pid", "=", "t5", ".", "pid", "join", "journal", "as", "t3", "on", "t5", ".", "jid", "=", "t3", ".", "jid", "where", "t3", ".", "name", "=", "value", "and", "t2", ".", "name", "=", "value"], "question": "return me the number of papers in PVLDB in \" University of Michigan \" .", "question_toks": ["return", "me", "the", "number", "of", "papers", "in", "PVLDB", "in", "``", "University", "of", "Michigan", "``", "."], "guid": 4563}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | what papers did chi publish ?", "sql": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"chi\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"chi\";", "query_toks": ["SELECT", "DISTINCT", "t1.paperid", "FROM", "venue", "AS", "t2", "JOIN", "paper", "AS", "t1", "ON", "t2.venueid", "=", "t1.venueid", "WHERE", "t2.venuename", "=", "``", "chi", "''", ";"], "query_toks_no_value": ["select", "distinct", "t1", ".", "paperid", "from", "venue", "as", "t2", "join", "paper", "as", "t1", "on", "t2", ".", "venueid", "=", "t1", ".", "venueid", "where", "t2", ".", "venuename", "=", "value"], "question": "what papers did chi publish ?", "question_toks": ["what", "papers", "did", "chi", "publish", "?"], "guid": 4564}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | papers at NIPS related to TAIL", "sql": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"TAIL\" AND t4.venuename  =  \"NIPS\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"TAIL\" AND t4.venuename  =  \"NIPS\";", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "JOIN", "venue", "AS", "t4", "ON", "t4.venueid", "=", "t3.venueid", "WHERE", "t1.keyphrasename", "=", "``", "TAIL", "''", "AND", "t4.venuename", "=", "``", "NIPS", "''", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "join", "venue", "as", "t4", "on", "t4", ".", "venueid", "=", "t3", ".", "venueid", "where", "t1", ".", "keyphrasename", "=", "value", "and", "t4", ".", "venuename", "=", "value"], "question": "papers at NIPS related to TAIL", "question_toks": ["papers", "at", "NIPS", "related", "to", "TAIL"], "guid": 4565}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the papers written by \" H. V. Jagadish \" and \" Yunyao Li \" on PVLDB .", "sql": "SELECT t6.title FROM publication AS t6 JOIN journal AS t4 ON t6.jid  =  t4.jid JOIN writes AS t3 ON t3.pid  =  t6.pid JOIN writes AS t5 ON t5.pid  =  t6.pid JOIN author AS t1 ON t5.aid  =  t1.aid JOIN author AS t2 ON t3.aid  =  t2.aid WHERE t2.name  =  \"H. V. Jagadish\" AND t1.name  =  \"Yunyao Li\" AND t4.name  =  \"PVLDB\";", "example": {"db_id": "academic", "query": "SELECT t6.title FROM publication AS t6 JOIN journal AS t4 ON t6.jid  =  t4.jid JOIN writes AS t3 ON t3.pid  =  t6.pid JOIN writes AS t5 ON t5.pid  =  t6.pid JOIN author AS t1 ON t5.aid  =  t1.aid JOIN author AS t2 ON t3.aid  =  t2.aid WHERE t2.name  =  \"H. V. Jagadish\" AND t1.name  =  \"Yunyao Li\" AND t4.name  =  \"PVLDB\";", "query_toks": ["SELECT", "t6.title", "FROM", "publication", "AS", "t6", "JOIN", "journal", "AS", "t4", "ON", "t6.jid", "=", "t4.jid", "JOIN", "writes", "AS", "t3", "ON", "t3.pid", "=", "t6.pid", "JOIN", "writes", "AS", "t5", "ON", "t5.pid", "=", "t6.pid", "JOIN", "author", "AS", "t1", "ON", "t5.aid", "=", "t1.aid", "JOIN", "author", "AS", "t2", "ON", "t3.aid", "=", "t2.aid", "WHERE", "t2.name", "=", "``", "H.", "V.", "Jagadish", "''", "AND", "t1.name", "=", "``", "Yunyao", "Li", "''", "AND", "t4.name", "=", "``", "PVLDB", "''", ";"], "query_toks_no_value": ["select", "t6", ".", "title", "from", "publication", "as", "t6", "join", "journal", "as", "t4", "on", "t6", ".", "jid", "=", "t4", ".", "jid", "join", "writes", "as", "t3", "on", "t3", ".", "pid", "=", "t6", ".", "pid", "join", "writes", "as", "t5", "on", "t5", ".", "pid", "=", "t6", ".", "pid", "join", "author", "as", "t1", "on", "t5", ".", "aid", "=", "t1", ".", "aid", "join", "author", "as", "t2", "on", "t3", ".", "aid", "=", "t2", ".", "aid", "where", "t2", ".", "name", "=", "value", "and", "t1", ".", "name", "=", "value", "and", "t4", ".", "name", "=", "value"], "question": "return me the papers written by \" H. V. Jagadish \" and \" Yunyao Li \" on PVLDB .", "question_toks": ["return", "me", "the", "papers", "written", "by", "``", "H.", "V.", "Jagadish", "``", "and", "``", "Yunyao", "Li", "``", "on", "PVLDB", "."], "guid": 4566}}
{"text": "Document_Types: document_type_code, document_description; Documents: document_id, document_type_code, grant_id, sent_date, response_received_date, other_details; Grants: grant_id, organisation_id, grant_amount, grant_start_date, grant_end_date, other_details; Organisation_Types: organisation_type, organisation_type_description; Organisations: organisation_id, organisation_type, organisation_details; Project_Outcomes: project_id, outcome_code, outcome_details; Project_Staff: staff_id, project_id, role_code, date_from, date_to, other_details; Projects: project_id, organisation_id, project_details; Research_Outcomes: outcome_code, outcome_description; Research_Staff: staff_id, employer_organisation_id, staff_details | When did researchers start and stop working?", "sql": "SELECT date_from ,  date_to FROM Project_Staff WHERE role_code  =  'researcher'", "example": {"db_id": "tracking_grants_for_research", "query": "SELECT date_from ,  date_to FROM Project_Staff WHERE role_code  =  'researcher'", "query_toks": ["SELECT", "date_from", ",", "date_to", "FROM", "Project_Staff", "WHERE", "role_code", "=", "'researcher", "'"], "query_toks_no_value": ["select", "date_from", ",", "date_to", "from", "project_staff", "where", "role_code", "=", "value"], "question": "When did researchers start and stop working?", "question_toks": ["When", "did", "researchers", "start", "and", "stop", "working", "?"], "guid": 4567}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | how many ACL papers by author", "sql": "SELECT DISTINCT COUNT ( t2.paperid )  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  \"ACL\" GROUP BY t1.authorid;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( t2.paperid )  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  \"ACL\" GROUP BY t1.authorid;", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "t2.paperid", ")", ",", "t1.authorid", "FROM", "venue", "AS", "t3", "JOIN", "paper", "AS", "t2", "ON", "t3.venueid", "=", "t2.venueid", "JOIN", "writes", "AS", "t1", "ON", "t1.paperid", "=", "t2.paperid", "WHERE", "t3.venuename", "=", "``", "ACL", "''", "GROUP", "BY", "t1.authorid", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "t2", ".", "paperid", ")", ",", "t1", ".", "authorid", "from", "venue", "as", "t3", "join", "paper", "as", "t2", "on", "t3", ".", "venueid", "=", "t2", ".", "venueid", "join", "writes", "as", "t1", "on", "t1", ".", "paperid", "=", "t2", ".", "paperid", "where", "t3", ".", "venuename", "=", "value", "group", "by", "t1", ".", "authorid"], "question": "how many ACL papers by author", "question_toks": ["how", "many", "ACL", "papers", "by", "author"], "guid": 4568}}
{"text": "Inst: instID, name, country; Authors: authID, lname, fname; Papers: paperID, title; Authorship: authID, instID, paperID, authOrder | Find the last name of the author with first name \"Amal\".", "sql": "SELECT lname FROM authors WHERE fname  =  \"Amal\"", "example": {"db_id": "icfp_1", "query": "SELECT lname FROM authors WHERE fname  =  \"Amal\"", "query_toks": ["SELECT", "lname", "FROM", "authors", "WHERE", "fname", "=", "``", "Amal", "''"], "query_toks_no_value": ["select", "lname", "from", "authors", "where", "fname", "=", "value"], "question": "Find the last name of the author with first name \"Amal\".", "question_toks": ["Find", "the", "last", "name", "of", "the", "author", "with", "first", "name", "``", "Amal", "''", "."], "guid": 4569}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | What papers were published in acl in 2012 about Parsing ?", "sql": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Parsing\" AND t3.year  =  2012 AND t4.venuename  =  \"acl\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Parsing\" AND t3.year  =  2012 AND t4.venuename  =  \"acl\";", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "JOIN", "venue", "AS", "t4", "ON", "t4.venueid", "=", "t3.venueid", "WHERE", "t1.keyphrasename", "=", "``", "Parsing", "''", "AND", "t3.year", "=", "2012", "AND", "t4.venuename", "=", "``", "acl", "''", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "join", "venue", "as", "t4", "on", "t4", ".", "venueid", "=", "t3", ".", "venueid", "where", "t1", ".", "keyphrasename", "=", "value", "and", "t3", ".", "year", "=", "value", "and", "t4", ".", "venuename", "=", "value"], "question": "What papers were published in acl in 2012 about Parsing ?", "question_toks": ["What", "papers", "were", "published", "in", "acl", "in", "2012", "about", "Parsing", "?"], "guid": 4570}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | who wrote the most papers for CVPR 2007", "sql": "SELECT DISTINCT COUNT ( t2.paperid )  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2007 AND t3.venuename  =  \"CVPR\" GROUP BY t1.authorid ORDER BY COUNT ( t2.paperid ) DESC;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( t2.paperid )  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2007 AND t3.venuename  =  \"CVPR\" GROUP BY t1.authorid ORDER BY COUNT ( t2.paperid ) DESC;", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "t2.paperid", ")", ",", "t1.authorid", "FROM", "venue", "AS", "t3", "JOIN", "paper", "AS", "t2", "ON", "t3.venueid", "=", "t2.venueid", "JOIN", "writes", "AS", "t1", "ON", "t1.paperid", "=", "t2.paperid", "WHERE", "t2.year", "=", "2007", "AND", "t3.venuename", "=", "``", "CVPR", "''", "GROUP", "BY", "t1.authorid", "ORDER", "BY", "COUNT", "(", "t2.paperid", ")", "DESC", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "t2", ".", "paperid", ")", ",", "t1", ".", "authorid", "from", "venue", "as", "t3", "join", "paper", "as", "t2", "on", "t3", ".", "venueid", "=", "t2", ".", "venueid", "join", "writes", "as", "t1", "on", "t1", ".", "paperid", "=", "t2", ".", "paperid", "where", "t2", ".", "year", "=", "value", "and", "t3", ".", "venuename", "=", "value", "group", "by", "t1", ".", "authorid", "order", "by", "count", "(", "t2", ".", "paperid", ")", "desc"], "question": "who wrote the most papers for CVPR 2007", "question_toks": ["who", "wrote", "the", "most", "papers", "for", "CVPR", "2007"], "guid": 4571}}
{"text": "workshop: Workshop_ID, Date, Venue, Name; submission: Submission_ID, Scores, Author, College; Acceptance: Submission_ID, Workshop_ID, Result | What is the author of the submission with the highest score?", "sql": "SELECT Author FROM submission ORDER BY Scores DESC LIMIT 1", "example": {"db_id": "workshop_paper", "query": "SELECT Author FROM submission ORDER BY Scores DESC LIMIT 1", "query_toks": ["SELECT", "Author", "FROM", "submission", "ORDER", "BY", "Scores", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "author", "from", "submission", "order", "by", "scores", "desc", "limit", "value"], "question": "What is the author of the submission with the highest score?", "question_toks": ["What", "is", "the", "author", "of", "the", "submission", "with", "the", "highest", "score", "?"], "guid": 4572}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | Papers about TAIL in NIPS", "sql": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"TAIL\" AND t4.venuename  =  \"NIPS\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"TAIL\" AND t4.venuename  =  \"NIPS\";", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "JOIN", "venue", "AS", "t4", "ON", "t4.venueid", "=", "t3.venueid", "WHERE", "t1.keyphrasename", "=", "``", "TAIL", "''", "AND", "t4.venuename", "=", "``", "NIPS", "''", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "join", "venue", "as", "t4", "on", "t4", ".", "venueid", "=", "t3", ".", "venueid", "where", "t1", ".", "keyphrasename", "=", "value", "and", "t4", ".", "venuename", "=", "value"], "question": "Papers about TAIL in NIPS", "question_toks": ["Papers", "about", "TAIL", "in", "NIPS"], "guid": 4573}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the keyword, which have been contained by the most number of papers in VLDB conference .", "sql": "SELECT t1.keyword FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t4.pid JOIN conference AS t2 ON t3.cid  =  t2.cid WHERE t2.name  =  \"VLDB\" GROUP BY t1.keyword ORDER BY COUNT ( DISTINCT t3.title ) DESC LIMIT 1;", "example": {"db_id": "academic", "query": "SELECT t1.keyword FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t4.pid JOIN conference AS t2 ON t3.cid  =  t2.cid WHERE t2.name  =  \"VLDB\" GROUP BY t1.keyword ORDER BY COUNT ( DISTINCT t3.title ) DESC LIMIT 1;", "query_toks": ["SELECT", "t1.keyword", "FROM", "publication_keyword", "AS", "t4", "JOIN", "keyword", "AS", "t1", "ON", "t4.kid", "=", "t1.kid", "JOIN", "publication", "AS", "t3", "ON", "t3.pid", "=", "t4.pid", "JOIN", "conference", "AS", "t2", "ON", "t3.cid", "=", "t2.cid", "WHERE", "t2.name", "=", "``", "VLDB", "''", "GROUP", "BY", "t1.keyword", "ORDER", "BY", "COUNT", "(", "DISTINCT", "t3.title", ")", "DESC", "LIMIT", "1", ";"], "query_toks_no_value": ["select", "t1", ".", "keyword", "from", "publication_keyword", "as", "t4", "join", "keyword", "as", "t1", "on", "t4", ".", "kid", "=", "t1", ".", "kid", "join", "publication", "as", "t3", "on", "t3", ".", "pid", "=", "t4", ".", "pid", "join", "conference", "as", "t2", "on", "t3", ".", "cid", "=", "t2", ".", "cid", "where", "t2", ".", "name", "=", "value", "group", "by", "t1", ".", "keyword", "order", "by", "count", "(", "distinct", "t3", ".", "title", ")", "desc", "limit", "value"], "question": "return me the keyword, which have been contained by the most number of papers in VLDB conference .", "question_toks": ["return", "me", "the", "keyword", ",", "which", "have", "been", "contained", "by", "the", "most", "number", "of", "papers", "in", "VLDB", "conference", "."], "guid": 4574}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | How many papers are related to deep learning ?", "sql": "SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\";", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "DISTINCT", "t3.paperid", ")", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "WHERE", "t1.keyphrasename", "=", "``", "deep", "learning", "''", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "distinct", "t3", ".", "paperid", ")", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "where", "t1", ".", "keyphrasename", "=", "value"], "question": "How many papers are related to deep learning ?", "question_toks": ["How", "many", "papers", "are", "related", "to", "deep", "learning", "?"], "guid": 4575}}
{"text": "event: Event_ID, Date, Venue, Name, Event_Attendance; journalist: journalist_ID, Name, Nationality, Age, Years_working; news_report: journalist_ID, Event_ID, Work_Type | Show the nations that have both journalists with more than 10 years of working and journalists with less than 3 years of working.", "sql": "SELECT Nationality FROM journalist WHERE Years_working  >  10 INTERSECT SELECT Nationality FROM journalist WHERE Years_working  <  3", "example": {"db_id": "news_report", "query": "SELECT Nationality FROM journalist WHERE Years_working  >  10 INTERSECT SELECT Nationality FROM journalist WHERE Years_working  <  3", "query_toks": ["SELECT", "Nationality", "FROM", "journalist", "WHERE", "Years_working", ">", "10", "INTERSECT", "SELECT", "Nationality", "FROM", "journalist", "WHERE", "Years_working", "<", "3"], "query_toks_no_value": ["select", "nationality", "from", "journalist", "where", "years_working", ">", "value", "intersect", "select", "nationality", "from", "journalist", "where", "years_working", "<", "value"], "question": "Show the nations that have both journalists with more than 10 years of working and journalists with less than 3 years of working.", "question_toks": ["Show", "the", "nations", "that", "have", "both", "journalists", "with", "more", "than", "10", "years", "of", "working", "and", "journalists", "with", "less", "than", "3", "years", "of", "working", "."], "guid": 4576}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | what are the papers that have Peter Mertens and Dina Barbian as co-authors", "sql": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "writes", "AS", "t3", "JOIN", "author", "AS", "t2", "ON", "t3.authorid", "=", "t2.authorid", "JOIN", "writes", "AS", "t4", "ON", "t4.paperid", "=", "t3.paperid", "JOIN", "author", "AS", "t1", "ON", "t4.authorid", "=", "t1.authorid", "WHERE", "t2.authorname", "=", "``", "Peter", "Mertens", "''", "AND", "t1.authorname", "=", "``", "Dina", "Barbian", "''", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "writes", "as", "t3", "join", "author", "as", "t2", "on", "t3", ".", "authorid", "=", "t2", ".", "authorid", "join", "writes", "as", "t4", "on", "t4", ".", "paperid", "=", "t3", ".", "paperid", "join", "author", "as", "t1", "on", "t4", ".", "authorid", "=", "t1", ".", "authorid", "where", "t2", ".", "authorname", "=", "value", "and", "t1", ".", "authorname", "=", "value"], "question": "what are the papers that have Peter Mertens and Dina Barbian as co-authors", "question_toks": ["what", "are", "the", "papers", "that", "have", "Peter", "Mertens", "and", "Dina", "Barbian", "as", "co-authors"], "guid": 4577}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | What are all the publication titles by Donald E Knuth ?", "sql": "SELECT DISTINCT t3.title FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Donald E Knuth\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.title FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Donald E Knuth\";", "query_toks": ["SELECT", "DISTINCT", "t3.title", "FROM", "writes", "AS", "t2", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "JOIN", "paper", "AS", "t3", "ON", "t2.paperid", "=", "t3.paperid", "WHERE", "t1.authorname", "=", "``", "Donald", "E", "Knuth", "''", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "title", "from", "writes", "as", "t2", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "join", "paper", "as", "t3", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "where", "t1", ".", "authorname", "=", "value"], "question": "What are all the publication titles by Donald E Knuth ?", "question_toks": ["What", "are", "all", "the", "publication", "titles", "by", "Donald", "E", "Knuth", "?"], "guid": 4578}}
{"text": "book_club: book_club_id, Year, Author_or_Editor, Book_Title, Publisher, Category, Result; movie: movie_id, Title, Year, Director, Budget_million, Gross_worldwide; culture_company: Company_name, Type, Incorporated_in, Group_Equity_Shareholding, book_club_id, movie_id | Show all director names who have a movie in both year 1999 and 2000.", "sql": "SELECT director FROM movie WHERE YEAR  =  2000 INTERSECT SELECT director FROM movie WHERE YEAR  =  1999", "example": {"db_id": "culture_company", "query": "SELECT director FROM movie WHERE YEAR  =  2000 INTERSECT SELECT director FROM movie WHERE YEAR  =  1999", "query_toks": ["SELECT", "director", "FROM", "movie", "WHERE", "YEAR", "=", "2000", "INTERSECT", "SELECT", "director", "FROM", "movie", "WHERE", "YEAR", "=", "1999"], "query_toks_no_value": ["select", "director", "from", "movie", "where", "year", "=", "value", "intersect", "select", "director", "from", "movie", "where", "year", "=", "value"], "question": "Show all director names who have a movie in both year 1999 and 2000.", "question_toks": ["Show", "all", "director", "names", "who", "have", "a", "movie", "in", "both", "year", "1999", "and", "2000", "."], "guid": 4579}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | How many publications were added to the Cell journal this year ?", "sql": "SELECT DISTINCT COUNT ( t3.paperid ) FROM paper AS t3 JOIN journal AS t2 ON t3.journalid  =  t2.journalid JOIN paperkeyphrase AS t1 ON t3.paperid  =  t1.paperid WHERE t2.journalname  =  \"Cell\" AND t3.year  =  2015;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( t3.paperid ) FROM paper AS t3 JOIN journal AS t2 ON t3.journalid  =  t2.journalid JOIN paperkeyphrase AS t1 ON t3.paperid  =  t1.paperid WHERE t2.journalname  =  \"Cell\" AND t3.year  =  2015;", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "t3.paperid", ")", "FROM", "paper", "AS", "t3", "JOIN", "journal", "AS", "t2", "ON", "t3.journalid", "=", "t2.journalid", "JOIN", "paperkeyphrase", "AS", "t1", "ON", "t3.paperid", "=", "t1.paperid", "WHERE", "t2.journalname", "=", "``", "Cell", "''", "AND", "t3.year", "=", "2015", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "t3", ".", "paperid", ")", "from", "paper", "as", "t3", "join", "journal", "as", "t2", "on", "t3", ".", "journalid", "=", "t2", ".", "journalid", "join", "paperkeyphrase", "as", "t1", "on", "t3", ".", "paperid", "=", "t1", ".", "paperid", "where", "t2", ".", "journalname", "=", "value", "and", "t3", ".", "year", "=", "value"], "question": "How many publications were added to the Cell journal this year ?", "question_toks": ["How", "many", "publications", "were", "added", "to", "the", "Cell", "journal", "this", "year", "?"], "guid": 4580}}
{"text": "Inst: instID, name, country; Authors: authID, lname, fname; Papers: paperID, title; Authorship: authID, instID, paperID, authOrder | Which paper has the most authors? Give me the paper title.", "sql": "SELECT t2.title FROM authorship AS t1 JOIN papers AS t2 ON t1.paperid  =  t2.paperid WHERE t1.authorder  =  (SELECT max(authorder) FROM authorship)", "example": {"db_id": "icfp_1", "query": "SELECT t2.title FROM authorship AS t1 JOIN papers AS t2 ON t1.paperid  =  t2.paperid WHERE t1.authorder  =  (SELECT max(authorder) FROM authorship)", "query_toks": ["SELECT", "t2.title", "FROM", "authorship", "AS", "t1", "JOIN", "papers", "AS", "t2", "ON", "t1.paperid", "=", "t2.paperid", "WHERE", "t1.authorder", "=", "(", "SELECT", "max", "(", "authorder", ")", "FROM", "authorship", ")"], "query_toks_no_value": ["select", "t2", ".", "title", "from", "authorship", "as", "t1", "join", "papers", "as", "t2", "on", "t1", ".", "paperid", "=", "t2", ".", "paperid", "where", "t1", ".", "authorder", "=", "(", "select", "max", "(", "authorder", ")", "from", "authorship", ")"], "question": "Which paper has the most authors? Give me the paper title.", "question_toks": ["Which", "paper", "has", "the", "most", "authors", "?", "Give", "me", "the", "paper", "title", "."], "guid": 4581}}
{"text": "Document_Types: document_type_code, document_description; Documents: document_id, document_type_code, grant_id, sent_date, response_received_date, other_details; Grants: grant_id, organisation_id, grant_amount, grant_start_date, grant_end_date, other_details; Organisation_Types: organisation_type, organisation_type_description; Organisations: organisation_id, organisation_type, organisation_details; Project_Outcomes: project_id, outcome_code, outcome_details; Project_Staff: staff_id, project_id, role_code, date_from, date_to, other_details; Projects: project_id, organisation_id, project_details; Research_Outcomes: outcome_code, outcome_description; Research_Staff: staff_id, employer_organisation_id, staff_details | From what date and to what date do the staff work on a project that has the most staff and has staff in a leader role?", "sql": "SELECT date_from ,  date_to FROM Project_Staff WHERE project_id IN( SELECT project_id FROM Project_Staff GROUP BY project_id ORDER BY count(*) DESC LIMIT 1 ) UNION SELECT date_from ,  date_to FROM Project_Staff WHERE role_code  =  'leader'", "example": {"db_id": "tracking_grants_for_research", "query": "SELECT date_from ,  date_to FROM Project_Staff WHERE project_id IN( SELECT project_id FROM Project_Staff GROUP BY project_id ORDER BY count(*) DESC LIMIT 1 ) UNION SELECT date_from ,  date_to FROM Project_Staff WHERE role_code  =  'leader'", "query_toks": ["SELECT", "date_from", ",", "date_to", "FROM", "Project_Staff", "WHERE", "project_id", "IN", "(", "SELECT", "project_id", "FROM", "Project_Staff", "GROUP", "BY", "project_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1", ")", "UNION", "SELECT", "date_from", ",", "date_to", "FROM", "Project_Staff", "WHERE", "role_code", "=", "'leader", "'"], "query_toks_no_value": ["select", "date_from", ",", "date_to", "from", "project_staff", "where", "project_id", "in", "(", "select", "project_id", "from", "project_staff", "group", "by", "project_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value", ")", "union", "select", "date_from", ",", "date_to", "from", "project_staff", "where", "role_code", "=", "value"], "question": "From what date and to what date do the staff work on a project that has the most staff and has staff in a leader role?", "question_toks": ["From", "what", "date", "and", "to", "what", "date", "do", "the", "staff", "work", "on", "a", "project", "that", "has", "the", "most", "staff", "and", "has", "staff", "in", "a", "leader", "role", "?"], "guid": 4582}}
{"text": "Document_Types: document_type_code, document_description; Documents: document_id, document_type_code, grant_id, sent_date, response_received_date, other_details; Grants: grant_id, organisation_id, grant_amount, grant_start_date, grant_end_date, other_details; Organisation_Types: organisation_type, organisation_type_description; Organisations: organisation_id, organisation_type, organisation_details; Project_Outcomes: project_id, outcome_code, outcome_details; Project_Staff: staff_id, project_id, role_code, date_from, date_to, other_details; Projects: project_id, organisation_id, project_details; Research_Outcomes: outcome_code, outcome_description; Research_Staff: staff_id, employer_organisation_id, staff_details | What are the distinct grant amount for the grants where the documents were sent before '1986-08-26 20:49:27' and grant were ended after '1989-03-16 18:27:16'?", "sql": "SELECT T1.grant_amount FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id  =  T2.grant_id WHERE T2.sent_date  <  '1986-08-26 20:49:27' INTERSECT SELECT grant_amount FROM grants WHERE grant_end_date  >  '1989-03-16 18:27:16'", "example": {"db_id": "tracking_grants_for_research", "query": "SELECT T1.grant_amount FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id  =  T2.grant_id WHERE T2.sent_date  <  '1986-08-26 20:49:27' INTERSECT SELECT grant_amount FROM grants WHERE grant_end_date  >  '1989-03-16 18:27:16'", "query_toks": ["SELECT", "T1.grant_amount", "FROM", "Grants", "AS", "T1", "JOIN", "Documents", "AS", "T2", "ON", "T1.grant_id", "=", "T2.grant_id", "WHERE", "T2.sent_date", "<", "'1986-08-26", "20:49:27", "'", "INTERSECT", "SELECT", "grant_amount", "FROM", "grants", "WHERE", "grant_end_date", ">", "'1989-03-16", "18:27:16", "'"], "query_toks_no_value": ["select", "t1", ".", "grant_amount", "from", "grants", "as", "t1", "join", "documents", "as", "t2", "on", "t1", ".", "grant_id", "=", "t2", ".", "grant_id", "where", "t2", ".", "sent_date", "<", "value", "intersect", "select", "grant_amount", "from", "grants", "where", "grant_end_date", ">", "value"], "question": "What are the distinct grant amount for the grants where the documents were sent before '1986-08-26 20:49:27' and grant were ended after '1989-03-16 18:27:16'?", "question_toks": ["What", "are", "the", "distinct", "grant", "amount", "for", "the", "grants", "where", "the", "documents", "were", "sent", "before", "'1986-08-26", "20:49:27", "'", "and", "grant", "were", "ended", "after", "'1989-03-16", "18:27:16", "'", "?"], "guid": 4583}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | What articles have been published since 2006 about the effects of juicing for cancer patients ?", "sql": "SELECT DISTINCT paperid  ,  title FROM paper WHERE title LIKE \"the effects of juicing for cancer patients\" AND YEAR  >  2006;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT paperid  ,  title FROM paper WHERE title LIKE \"the effects of juicing for cancer patients\" AND YEAR  >  2006;", "query_toks": ["SELECT", "DISTINCT", "paperid", ",", "title", "FROM", "paper", "WHERE", "title", "LIKE", "``", "the", "effects", "of", "juicing", "for", "cancer", "patients", "''", "AND", "YEAR", ">", "2006", ";"], "query_toks_no_value": ["select", "distinct", "paperid", ",", "title", "from", "paper", "where", "title", "like", "value", "and", "year", ">", "value"], "question": "What articles have been published since 2006 about the effects of juicing for cancer patients ?", "question_toks": ["What", "articles", "have", "been", "published", "since", "2006", "about", "the", "effects", "of", "juicing", "for", "cancer", "patients", "?"], "guid": 4584}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | who wrote the most CVPR papers in 2007", "sql": "SELECT DISTINCT COUNT ( t2.paperid )  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2007 AND t3.venuename  =  \"CVPR\" GROUP BY t1.authorid ORDER BY COUNT ( t2.paperid ) DESC;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( t2.paperid )  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2007 AND t3.venuename  =  \"CVPR\" GROUP BY t1.authorid ORDER BY COUNT ( t2.paperid ) DESC;", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "t2.paperid", ")", ",", "t1.authorid", "FROM", "venue", "AS", "t3", "JOIN", "paper", "AS", "t2", "ON", "t3.venueid", "=", "t2.venueid", "JOIN", "writes", "AS", "t1", "ON", "t1.paperid", "=", "t2.paperid", "WHERE", "t2.year", "=", "2007", "AND", "t3.venuename", "=", "``", "CVPR", "''", "GROUP", "BY", "t1.authorid", "ORDER", "BY", "COUNT", "(", "t2.paperid", ")", "DESC", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "t2", ".", "paperid", ")", ",", "t1", ".", "authorid", "from", "venue", "as", "t3", "join", "paper", "as", "t2", "on", "t3", ".", "venueid", "=", "t2", ".", "venueid", "join", "writes", "as", "t1", "on", "t1", ".", "paperid", "=", "t2", ".", "paperid", "where", "t2", ".", "year", "=", "value", "and", "t3", ".", "venuename", "=", "value", "group", "by", "t1", ".", "authorid", "order", "by", "count", "(", "t2", ".", "paperid", ")", "desc"], "question": "who wrote the most CVPR papers in 2007", "question_toks": ["who", "wrote", "the", "most", "CVPR", "papers", "in", "2007"], "guid": 4585}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | Who has published more papers in chi ?", "sql": "SELECT DISTINCT COUNT ( DISTINCT t2.paperid )  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  \"chi\" GROUP BY t1.authorid ORDER BY COUNT ( DISTINCT t2.paperid ) DESC;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( DISTINCT t2.paperid )  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  \"chi\" GROUP BY t1.authorid ORDER BY COUNT ( DISTINCT t2.paperid ) DESC;", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "DISTINCT", "t2.paperid", ")", ",", "t1.authorid", "FROM", "venue", "AS", "t3", "JOIN", "paper", "AS", "t2", "ON", "t3.venueid", "=", "t2.venueid", "JOIN", "writes", "AS", "t1", "ON", "t1.paperid", "=", "t2.paperid", "WHERE", "t3.venuename", "=", "``", "chi", "''", "GROUP", "BY", "t1.authorid", "ORDER", "BY", "COUNT", "(", "DISTINCT", "t2.paperid", ")", "DESC", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "distinct", "t2", ".", "paperid", ")", ",", "t1", ".", "authorid", "from", "venue", "as", "t3", "join", "paper", "as", "t2", "on", "t3", ".", "venueid", "=", "t2", ".", "venueid", "join", "writes", "as", "t1", "on", "t1", ".", "paperid", "=", "t2", ".", "paperid", "where", "t3", ".", "venuename", "=", "value", "group", "by", "t1", ".", "authorid", "order", "by", "count", "(", "distinct", "t2", ".", "paperid", ")", "desc"], "question": "Who has published more papers in chi ?", "question_toks": ["Who", "has", "published", "more", "papers", "in", "chi", "?"], "guid": 4586}}
{"text": "Document_Types: document_type_code, document_description; Documents: document_id, document_type_code, grant_id, sent_date, response_received_date, other_details; Grants: grant_id, organisation_id, grant_amount, grant_start_date, grant_end_date, other_details; Organisation_Types: organisation_type, organisation_type_description; Organisations: organisation_id, organisation_type, organisation_details; Project_Outcomes: project_id, outcome_code, outcome_details; Project_Staff: staff_id, project_id, role_code, date_from, date_to, other_details; Projects: project_id, organisation_id, project_details; Research_Outcomes: outcome_code, outcome_description; Research_Staff: staff_id, employer_organisation_id, staff_details | What is the total amount of grant money given to each organization and what is its id?", "sql": "SELECT sum(grant_amount) ,  organisation_id FROM Grants GROUP BY organisation_id", "example": {"db_id": "tracking_grants_for_research", "query": "SELECT sum(grant_amount) ,  organisation_id FROM Grants GROUP BY organisation_id", "query_toks": ["SELECT", "sum", "(", "grant_amount", ")", ",", "organisation_id", "FROM", "Grants", "GROUP", "BY", "organisation_id"], "query_toks_no_value": ["select", "sum", "(", "grant_amount", ")", ",", "organisation_id", "from", "grants", "group", "by", "organisation_id"], "question": "What is the total amount of grant money given to each organization and what is its id?", "question_toks": ["What", "is", "the", "total", "amount", "of", "grant", "money", "given", "to", "each", "organization", "and", "what", "is", "its", "id", "?"], "guid": 4587}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | what topics does oren etzioni write about most ?", "sql": "SELECT DISTINCT COUNT ( t2.keyphraseid )  ,  t2.keyphraseid FROM paper AS t3 JOIN paperkeyphrase AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"oren etzioni\" GROUP BY t2.keyphraseid ORDER BY COUNT ( t2.keyphraseid ) DESC;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( t2.keyphraseid )  ,  t2.keyphraseid FROM paper AS t3 JOIN paperkeyphrase AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"oren etzioni\" GROUP BY t2.keyphraseid ORDER BY COUNT ( t2.keyphraseid ) DESC;", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "t2.keyphraseid", ")", ",", "t2.keyphraseid", "FROM", "paper", "AS", "t3", "JOIN", "paperkeyphrase", "AS", "t2", "ON", "t3.paperid", "=", "t2.paperid", "JOIN", "writes", "AS", "t4", "ON", "t4.paperid", "=", "t3.paperid", "JOIN", "author", "AS", "t1", "ON", "t4.authorid", "=", "t1.authorid", "WHERE", "t1.authorname", "=", "``", "oren", "etzioni", "''", "GROUP", "BY", "t2.keyphraseid", "ORDER", "BY", "COUNT", "(", "t2.keyphraseid", ")", "DESC", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "t2", ".", "keyphraseid", ")", ",", "t2", ".", "keyphraseid", "from", "paper", "as", "t3", "join", "paperkeyphrase", "as", "t2", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "join", "writes", "as", "t4", "on", "t4", ".", "paperid", "=", "t3", ".", "paperid", "join", "author", "as", "t1", "on", "t4", ".", "authorid", "=", "t1", ".", "authorid", "where", "t1", ".", "authorname", "=", "value", "group", "by", "t2", ".", "keyphraseid", "order", "by", "count", "(", "t2", ".", "keyphraseid", ")", "desc"], "question": "what topics does oren etzioni write about most ?", "question_toks": ["what", "topics", "does", "oren", "etzioni", "write", "about", "most", "?"], "guid": 4588}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | who has the most publications in syntactic parsing ?", "sql": "SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  \"syntactic parsing\" GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  \"syntactic parsing\" GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "t4.paperid", ")", ",", "t3.authorid", "FROM", "paperkeyphrase", "AS", "t1", "JOIN", "keyphrase", "AS", "t2", "ON", "t1.keyphraseid", "=", "t2.keyphraseid", "JOIN", "paper", "AS", "t4", "ON", "t4.paperid", "=", "t1.paperid", "JOIN", "writes", "AS", "t3", "ON", "t3.paperid", "=", "t4.paperid", "WHERE", "t2.keyphrasename", "=", "``", "syntactic", "parsing", "''", "GROUP", "BY", "t3.authorid", "ORDER", "BY", "COUNT", "(", "t4.paperid", ")", "DESC", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "t4", ".", "paperid", ")", ",", "t3", ".", "authorid", "from", "paperkeyphrase", "as", "t1", "join", "keyphrase", "as", "t2", "on", "t1", ".", "keyphraseid", "=", "t2", ".", "keyphraseid", "join", "paper", "as", "t4", "on", "t4", ".", "paperid", "=", "t1", ".", "paperid", "join", "writes", "as", "t3", "on", "t3", ".", "paperid", "=", "t4", ".", "paperid", "where", "t2", ".", "keyphrasename", "=", "value", "group", "by", "t3", ".", "authorid", "order", "by", "count", "(", "t4", ".", "paperid", ")", "desc"], "question": "who has the most publications in syntactic parsing ?", "question_toks": ["who", "has", "the", "most", "publications", "in", "syntactic", "parsing", "?"], "guid": 4589}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the papers written by \" H. V. Jagadish \" and \" Divesh Srivastava \" with more than 200 citations .", "sql": "SELECT t5.title FROM writes AS t3 JOIN author AS t2 ON t3.aid  =  t2.aid JOIN publication AS t5 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t5.pid JOIN author AS t1 ON t4.aid  =  t1.aid WHERE t2.name  =  \"H. V. Jagadish\" AND t1.name  =  \"Divesh Srivastava\" AND t5.citation_num  >  200;", "example": {"db_id": "academic", "query": "SELECT t5.title FROM writes AS t3 JOIN author AS t2 ON t3.aid  =  t2.aid JOIN publication AS t5 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t5.pid JOIN author AS t1 ON t4.aid  =  t1.aid WHERE t2.name  =  \"H. V. Jagadish\" AND t1.name  =  \"Divesh Srivastava\" AND t5.citation_num  >  200;", "query_toks": ["SELECT", "t5.title", "FROM", "writes", "AS", "t3", "JOIN", "author", "AS", "t2", "ON", "t3.aid", "=", "t2.aid", "JOIN", "publication", "AS", "t5", "ON", "t3.pid", "=", "t5.pid", "JOIN", "writes", "AS", "t4", "ON", "t4.pid", "=", "t5.pid", "JOIN", "author", "AS", "t1", "ON", "t4.aid", "=", "t1.aid", "WHERE", "t2.name", "=", "``", "H.", "V.", "Jagadish", "''", "AND", "t1.name", "=", "``", "Divesh", "Srivastava", "''", "AND", "t5.citation_num", ">", "200", ";"], "query_toks_no_value": ["select", "t5", ".", "title", "from", "writes", "as", "t3", "join", "author", "as", "t2", "on", "t3", ".", "aid", "=", "t2", ".", "aid", "join", "publication", "as", "t5", "on", "t3", ".", "pid", "=", "t5", ".", "pid", "join", "writes", "as", "t4", "on", "t4", ".", "pid", "=", "t5", ".", "pid", "join", "author", "as", "t1", "on", "t4", ".", "aid", "=", "t1", ".", "aid", "where", "t2", ".", "name", "=", "value", "and", "t1", ".", "name", "=", "value", "and", "t5", ".", "citation_num", ">", "value"], "question": "return me the papers written by \" H. V. Jagadish \" and \" Divesh Srivastava \" with more than 200 citations .", "question_toks": ["return", "me", "the", "papers", "written", "by", "``", "H.", "V.", "Jagadish", "``", "and", "``", "Divesh", "Srivastava", "``", "with", "more", "than", "200", "citations", "."], "guid": 4590}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the papers by \" H. V. Jagadish \" .", "sql": "SELECT t3.title FROM writes AS t2 JOIN author AS t1 ON t2.aid  =  t1.aid JOIN publication AS t3 ON t2.pid  =  t3.pid WHERE t1.name  =  \"H. V. Jagadish\";", "example": {"db_id": "academic", "query": "SELECT t3.title FROM writes AS t2 JOIN author AS t1 ON t2.aid  =  t1.aid JOIN publication AS t3 ON t2.pid  =  t3.pid WHERE t1.name  =  \"H. V. Jagadish\";", "query_toks": ["SELECT", "t3.title", "FROM", "writes", "AS", "t2", "JOIN", "author", "AS", "t1", "ON", "t2.aid", "=", "t1.aid", "JOIN", "publication", "AS", "t3", "ON", "t2.pid", "=", "t3.pid", "WHERE", "t1.name", "=", "``", "H.", "V.", "Jagadish", "''", ";"], "query_toks_no_value": ["select", "t3", ".", "title", "from", "writes", "as", "t2", "join", "author", "as", "t1", "on", "t2", ".", "aid", "=", "t1", ".", "aid", "join", "publication", "as", "t3", "on", "t2", ".", "pid", "=", "t3", ".", "pid", "where", "t1", ".", "name", "=", "value"], "question": "return me the papers by \" H. V. Jagadish \" .", "question_toks": ["return", "me", "the", "papers", "by", "``", "H.", "V.", "Jagadish", "``", "."], "guid": 4591}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the total citations of papers in the VLDB conference in each year .", "sql": "SELECT t2.year  ,  SUM ( t2.citation_num ) FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\" GROUP BY t2.year;", "example": {"db_id": "academic", "query": "SELECT t2.year  ,  SUM ( t2.citation_num ) FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\" GROUP BY t2.year;", "query_toks": ["SELECT", "t2.year", ",", "SUM", "(", "t2.citation_num", ")", "FROM", "publication", "AS", "t2", "JOIN", "conference", "AS", "t1", "ON", "t2.cid", "=", "t1.cid", "WHERE", "t1.name", "=", "``", "VLDB", "''", "GROUP", "BY", "t2.year", ";"], "query_toks_no_value": ["select", "t2", ".", "year", ",", "sum", "(", "t2", ".", "citation_num", ")", "from", "publication", "as", "t2", "join", "conference", "as", "t1", "on", "t2", ".", "cid", "=", "t1", ".", "cid", "where", "t1", ".", "name", "=", "value", "group", "by", "t2", ".", "year"], "question": "return me the total citations of papers in the VLDB conference in each year .", "question_toks": ["return", "me", "the", "total", "citations", "of", "papers", "in", "the", "VLDB", "conference", "in", "each", "year", "."], "guid": 4592}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | papers on Parsing appeared at acl last year", "sql": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Parsing\" AND t3.year  =  2012 AND t4.venuename  =  \"acl\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Parsing\" AND t3.year  =  2012 AND t4.venuename  =  \"acl\";", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "JOIN", "venue", "AS", "t4", "ON", "t4.venueid", "=", "t3.venueid", "WHERE", "t1.keyphrasename", "=", "``", "Parsing", "''", "AND", "t3.year", "=", "2012", "AND", "t4.venuename", "=", "``", "acl", "''", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "join", "venue", "as", "t4", "on", "t4", ".", "venueid", "=", "t3", ".", "venueid", "where", "t1", ".", "keyphrasename", "=", "value", "and", "t3", ".", "year", "=", "value", "and", "t4", ".", "venuename", "=", "value"], "question": "papers on Parsing appeared at acl last year", "question_toks": ["papers", "on", "Parsing", "appeared", "at", "acl", "last", "year"], "guid": 4593}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | datasets used for semantic parsing", "sql": "SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  \"semantic parsing\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  \"semantic parsing\";", "query_toks": ["SELECT", "DISTINCT", "t2.datasetid", "FROM", "paperdataset", "AS", "t3", "JOIN", "dataset", "AS", "t2", "ON", "t3.datasetid", "=", "t2.datasetid", "JOIN", "paperkeyphrase", "AS", "t1", "ON", "t1.paperid", "=", "t3.paperid", "JOIN", "keyphrase", "AS", "t4", "ON", "t1.keyphraseid", "=", "t4.keyphraseid", "WHERE", "t4.keyphrasename", "=", "``", "semantic", "parsing", "''", ";"], "query_toks_no_value": ["select", "distinct", "t2", ".", "datasetid", "from", "paperdataset", "as", "t3", "join", "dataset", "as", "t2", "on", "t3", ".", "datasetid", "=", "t2", ".", "datasetid", "join", "paperkeyphrase", "as", "t1", "on", "t1", ".", "paperid", "=", "t3", ".", "paperid", "join", "keyphrase", "as", "t4", "on", "t1", ".", "keyphraseid", "=", "t4", ".", "keyphraseid", "where", "t4", ".", "keyphrasename", "=", "value"], "question": "datasets used for semantic parsing", "question_toks": ["datasets", "used", "for", "semantic", "parsing"], "guid": 4594}}
{"text": "workshop: Workshop_ID, Date, Venue, Name; submission: Submission_ID, Scores, Author, College; Acceptance: Submission_ID, Workshop_ID, Result | Find the author who achieved the highest score in a submission.", "sql": "SELECT Author FROM submission ORDER BY Scores DESC LIMIT 1", "example": {"db_id": "workshop_paper", "query": "SELECT Author FROM submission ORDER BY Scores DESC LIMIT 1", "query_toks": ["SELECT", "Author", "FROM", "submission", "ORDER", "BY", "Scores", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "author", "from", "submission", "order", "by", "scores", "desc", "limit", "value"], "question": "Find the author who achieved the highest score in a submission.", "question_toks": ["Find", "the", "author", "who", "achieved", "the", "highest", "score", "in", "a", "submission", "."], "guid": 4595}}
{"text": "Document_Types: document_type_code, document_description; Documents: document_id, document_type_code, grant_id, sent_date, response_received_date, other_details; Grants: grant_id, organisation_id, grant_amount, grant_start_date, grant_end_date, other_details; Organisation_Types: organisation_type, organisation_type_description; Organisations: organisation_id, organisation_type, organisation_details; Project_Outcomes: project_id, outcome_code, outcome_details; Project_Staff: staff_id, project_id, role_code, date_from, date_to, other_details; Projects: project_id, organisation_id, project_details; Research_Outcomes: outcome_code, outcome_description; Research_Staff: staff_id, employer_organisation_id, staff_details | How many Patent outcomes are generated from all the projects?", "sql": "SELECT count(*) FROM Project_outcomes WHERE outcome_code  =  'Patent'", "example": {"db_id": "tracking_grants_for_research", "query": "SELECT count(*) FROM Project_outcomes WHERE outcome_code  =  'Patent'", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Project_outcomes", "WHERE", "outcome_code", "=", "'Patent", "'"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "project_outcomes", "where", "outcome_code", "=", "value"], "question": "How many Patent outcomes are generated from all the projects?", "question_toks": ["How", "many", "Patent", "outcomes", "are", "generated", "from", "all", "the", "projects", "?"], "guid": 4596}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | Has Christopher D. Manning published any papers ?", "sql": "SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christopher D. Manning\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christopher D. Manning\";", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "DISTINCT", "t2.paperid", ")", "FROM", "writes", "AS", "t2", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "WHERE", "t1.authorname", "=", "``", "Christopher", "D.", "Manning", "''", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "distinct", "t2", ".", "paperid", ")", "from", "writes", "as", "t2", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "where", "t1", ".", "authorname", "=", "value"], "question": "Has Christopher D. Manning published any papers ?", "question_toks": ["Has", "Christopher", "D.", "Manning", "published", "any", "papers", "?"], "guid": 4597}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | datasets in papers about semantic parsing", "sql": "SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  \"semantic parsing\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  \"semantic parsing\";", "query_toks": ["SELECT", "DISTINCT", "t2.datasetid", "FROM", "paperdataset", "AS", "t3", "JOIN", "dataset", "AS", "t2", "ON", "t3.datasetid", "=", "t2.datasetid", "JOIN", "paperkeyphrase", "AS", "t1", "ON", "t1.paperid", "=", "t3.paperid", "JOIN", "keyphrase", "AS", "t4", "ON", "t1.keyphraseid", "=", "t4.keyphraseid", "WHERE", "t4.keyphrasename", "=", "``", "semantic", "parsing", "''", ";"], "query_toks_no_value": ["select", "distinct", "t2", ".", "datasetid", "from", "paperdataset", "as", "t3", "join", "dataset", "as", "t2", "on", "t3", ".", "datasetid", "=", "t2", ".", "datasetid", "join", "paperkeyphrase", "as", "t1", "on", "t1", ".", "paperid", "=", "t3", ".", "paperid", "join", "keyphrase", "as", "t4", "on", "t1", ".", "keyphraseid", "=", "t4", ".", "keyphraseid", "where", "t4", ".", "keyphrasename", "=", "value"], "question": "datasets in papers about semantic parsing", "question_toks": ["datasets", "in", "papers", "about", "semantic", "parsing"], "guid": 4598}}
{"text": "book_club: book_club_id, Year, Author_or_Editor, Book_Title, Publisher, Category, Result; movie: movie_id, Title, Year, Director, Budget_million, Gross_worldwide; culture_company: Company_name, Type, Incorporated_in, Group_Equity_Shareholding, book_club_id, movie_id | Which directors had a movie both in the year 1999 and 2000?", "sql": "SELECT director FROM movie WHERE YEAR  =  2000 INTERSECT SELECT director FROM movie WHERE YEAR  =  1999", "example": {"db_id": "culture_company", "query": "SELECT director FROM movie WHERE YEAR  =  2000 INTERSECT SELECT director FROM movie WHERE YEAR  =  1999", "query_toks": ["SELECT", "director", "FROM", "movie", "WHERE", "YEAR", "=", "2000", "INTERSECT", "SELECT", "director", "FROM", "movie", "WHERE", "YEAR", "=", "1999"], "query_toks_no_value": ["select", "director", "from", "movie", "where", "year", "=", "value", "intersect", "select", "director", "from", "movie", "where", "year", "=", "value"], "question": "Which directors had a movie both in the year 1999 and 2000?", "question_toks": ["Which", "directors", "had", "a", "movie", "both", "in", "the", "year", "1999", "and", "2000", "?"], "guid": 4599}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | What is the most cited paper by ohad shamir ?", "sql": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"ohad shamir\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"ohad shamir\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;", "query_toks": ["SELECT", "DISTINCT", "t4.citedpaperid", ",", "COUNT", "(", "t4.citedpaperid", ")", "FROM", "paper", "AS", "t3", "JOIN", "cite", "AS", "t4", "ON", "t3.paperid", "=", "t4.citedpaperid", "JOIN", "writes", "AS", "t2", "ON", "t2.paperid", "=", "t3.paperid", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "WHERE", "t1.authorname", "=", "``", "ohad", "shamir", "''", "GROUP", "BY", "t4.citedpaperid", "ORDER", "BY", "COUNT", "(", "t4.citedpaperid", ")", "DESC", ";"], "query_toks_no_value": ["select", "distinct", "t4", ".", "citedpaperid", ",", "count", "(", "t4", ".", "citedpaperid", ")", "from", "paper", "as", "t3", "join", "cite", "as", "t4", "on", "t3", ".", "paperid", "=", "t4", ".", "citedpaperid", "join", "writes", "as", "t2", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "where", "t1", ".", "authorname", "=", "value", "group", "by", "t4", ".", "citedpaperid", "order", "by", "count", "(", "t4", ".", "citedpaperid", ")", "desc"], "question": "What is the most cited paper by ohad shamir ?", "question_toks": ["What", "is", "the", "most", "cited", "paper", "by", "ohad", "shamir", "?"], "guid": 4600}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | brian curless 's papers on convolution", "sql": "SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";", "query_toks": ["SELECT", "DISTINCT", "t1.authorid", ",", "t3.paperid", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t5", "ON", "t2.keyphraseid", "=", "t5.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "JOIN", "writes", "AS", "t4", "ON", "t4.paperid", "=", "t3.paperid", "JOIN", "author", "AS", "t1", "ON", "t4.authorid", "=", "t1.authorid", "WHERE", "t1.authorname", "=", "``", "brian", "curless", "''", "AND", "t5.keyphrasename", "=", "``", "convolution", "''", ";"], "query_toks_no_value": ["select", "distinct", "t1", ".", "authorid", ",", "t3", ".", "paperid", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t5", "on", "t2", ".", "keyphraseid", "=", "t5", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "join", "writes", "as", "t4", "on", "t4", ".", "paperid", "=", "t3", ".", "paperid", "join", "author", "as", "t1", "on", "t4", ".", "authorid", "=", "t1", ".", "authorid", "where", "t1", ".", "authorname", "=", "value", "and", "t5", ".", "keyphrasename", "=", "value"], "question": "brian curless 's papers on convolution", "question_toks": ["brian", "curless", "'s", "papers", "on", "convolution"], "guid": 4601}}
{"text": "publication: Publication_ID, Book_ID, Publisher, Publication_Date, Price; book: Book_ID, Title, Issues, Writer | Show different publishers together with the number of publications they have.", "sql": "SELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher", "example": {"db_id": "book_2", "query": "SELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher", "query_toks": ["SELECT", "Publisher", ",", "COUNT", "(", "*", ")", "FROM", "publication", "GROUP", "BY", "Publisher"], "query_toks_no_value": ["select", "publisher", ",", "count", "(", "*", ")", "from", "publication", "group", "by", "publisher"], "question": "Show different publishers together with the number of publications they have.", "question_toks": ["Show", "different", "publishers", "together", "with", "the", "number", "of", "publications", "they", "have", "."], "guid": 4602}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the number of papers on PVLDB after 2000 .", "sql": "SELECT COUNT ( DISTINCT t2.title ) FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\" AND t2.year  >  2000;", "example": {"db_id": "academic", "query": "SELECT COUNT ( DISTINCT t2.title ) FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\" AND t2.year  >  2000;", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "t2.title", ")", "FROM", "publication", "AS", "t2", "JOIN", "journal", "AS", "t1", "ON", "t2.jid", "=", "t1.jid", "WHERE", "t1.name", "=", "``", "PVLDB", "''", "AND", "t2.year", ">", "2000", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "t2", ".", "title", ")", "from", "publication", "as", "t2", "join", "journal", "as", "t1", "on", "t2", ".", "jid", "=", "t1", ".", "jid", "where", "t1", ".", "name", "=", "value", "and", "t2", ".", "year", ">", "value"], "question": "return me the number of papers on PVLDB after 2000 .", "question_toks": ["return", "me", "the", "number", "of", "papers", "on", "PVLDB", "after", "2000", "."], "guid": 4603}}
{"text": "Document_Types: document_type_code, document_description; Documents: document_id, document_type_code, grant_id, sent_date, response_received_date, other_details; Grants: grant_id, organisation_id, grant_amount, grant_start_date, grant_end_date, other_details; Organisation_Types: organisation_type, organisation_type_description; Organisations: organisation_id, organisation_type, organisation_details; Project_Outcomes: project_id, outcome_code, outcome_details; Project_Staff: staff_id, project_id, role_code, date_from, date_to, other_details; Projects: project_id, organisation_id, project_details; Research_Outcomes: outcome_code, outcome_description; Research_Staff: staff_id, employer_organisation_id, staff_details | What are the task details, task ids, and project ids for the progrects that are detailed as 'omnis' or have at least 3 outcomes?", "sql": "SELECT T1.task_details ,  T1.task_id ,  T2.project_id FROM Tasks AS T1 JOIN Projects AS T2 ON T1.project_id  =  T2.project_id WHERE T2.project_details  =  'omnis' UNION SELECT T1.task_details ,  T1.task_id ,  T2.project_id FROM Tasks AS T1 JOIN Projects AS T2 ON T1.project_id  =  T2.project_id JOIN Project_outcomes AS T3 ON T2.project_id  =  T3.project_id GROUP BY T2.project_id HAVING count(*)  >  2", "example": {"db_id": "tracking_grants_for_research", "query": "SELECT T1.task_details ,  T1.task_id ,  T2.project_id FROM Tasks AS T1 JOIN Projects AS T2 ON T1.project_id  =  T2.project_id WHERE T2.project_details  =  'omnis' UNION SELECT T1.task_details ,  T1.task_id ,  T2.project_id FROM Tasks AS T1 JOIN Projects AS T2 ON T1.project_id  =  T2.project_id JOIN Project_outcomes AS T3 ON T2.project_id  =  T3.project_id GROUP BY T2.project_id HAVING count(*)  >  2", "query_toks": ["SELECT", "T1.task_details", ",", "T1.task_id", ",", "T2.project_id", "FROM", "Tasks", "AS", "T1", "JOIN", "Projects", "AS", "T2", "ON", "T1.project_id", "=", "T2.project_id", "WHERE", "T2.project_details", "=", "'omnis", "'", "UNION", "SELECT", "T1.task_details", ",", "T1.task_id", ",", "T2.project_id", "FROM", "Tasks", "AS", "T1", "JOIN", "Projects", "AS", "T2", "ON", "T1.project_id", "=", "T2.project_id", "JOIN", "Project_outcomes", "AS", "T3", "ON", "T2.project_id", "=", "T3.project_id", "GROUP", "BY", "T2.project_id", "HAVING", "count", "(", "*", ")", ">", "2"], "query_toks_no_value": ["select", "t1", ".", "task_details", ",", "t1", ".", "task_id", ",", "t2", ".", "project_id", "from", "tasks", "as", "t1", "join", "projects", "as", "t2", "on", "t1", ".", "project_id", "=", "t2", ".", "project_id", "where", "t2", ".", "project_details", "=", "value", "union", "select", "t1", ".", "task_details", ",", "t1", ".", "task_id", ",", "t2", ".", "project_id", "from", "tasks", "as", "t1", "join", "projects", "as", "t2", "on", "t1", ".", "project_id", "=", "t2", ".", "project_id", "join", "project_outcomes", "as", "t3", "on", "t2", ".", "project_id", "=", "t3", ".", "project_id", "group", "by", "t2", ".", "project_id", "having", "count", "(", "*", ")", ">", "value"], "question": "What are the task details, task ids, and project ids for the progrects that are detailed as 'omnis' or have at least 3 outcomes?", "question_toks": ["What", "are", "the", "task", "details", ",", "task", "ids", ",", "and", "project", "ids", "for", "the", "progrects", "that", "are", "detailed", "as", "'omnis", "'", "or", "have", "at", "least", "3", "outcomes", "?"], "guid": 4604}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | new deep learning papers", "sql": "SELECT DISTINCT t3.paperid  ,  t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\" ORDER BY t3.year DESC;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid  ,  t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\" ORDER BY t3.year DESC;", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", ",", "t3.year", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "WHERE", "t1.keyphrasename", "=", "``", "deep", "learning", "''", "ORDER", "BY", "t3.year", "DESC", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", ",", "t3", ".", "year", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "where", "t1", ".", "keyphrasename", "=", "value", "order", "by", "t3", ".", "year", "desc"], "question": "new deep learning papers", "question_toks": ["new", "deep", "learning", "papers"], "guid": 4605}}
{"text": "Document_Types: document_type_code, document_description; Documents: document_id, document_type_code, grant_id, sent_date, response_received_date, other_details; Grants: grant_id, organisation_id, grant_amount, grant_start_date, grant_end_date, other_details; Organisation_Types: organisation_type, organisation_type_description; Organisations: organisation_id, organisation_type, organisation_details; Project_Outcomes: project_id, outcome_code, outcome_details; Project_Staff: staff_id, project_id, role_code, date_from, date_to, other_details; Projects: project_id, organisation_id, project_details; Research_Outcomes: outcome_code, outcome_description; Research_Staff: staff_id, employer_organisation_id, staff_details | How many kinds of roles are there for the staff?", "sql": "SELECT count(DISTINCT role_code) FROM Project_Staff", "example": {"db_id": "tracking_grants_for_research", "query": "SELECT count(DISTINCT role_code) FROM Project_Staff", "query_toks": ["SELECT", "count", "(", "DISTINCT", "role_code", ")", "FROM", "Project_Staff"], "query_toks_no_value": ["select", "count", "(", "distinct", "role_code", ")", "from", "project_staff"], "question": "How many kinds of roles are there for the staff?", "question_toks": ["How", "many", "kinds", "of", "roles", "are", "there", "for", "the", "staff", "?"], "guid": 4606}}
{"text": "Document_Types: document_type_code, document_description; Documents: document_id, document_type_code, grant_id, sent_date, response_received_date, other_details; Grants: grant_id, organisation_id, grant_amount, grant_start_date, grant_end_date, other_details; Organisation_Types: organisation_type, organisation_type_description; Organisations: organisation_id, organisation_type, organisation_details; Project_Outcomes: project_id, outcome_code, outcome_details; Project_Staff: staff_id, project_id, role_code, date_from, date_to, other_details; Projects: project_id, organisation_id, project_details; Research_Outcomes: outcome_code, outcome_description; Research_Staff: staff_id, employer_organisation_id, staff_details | List from which date and to which date these staff work: project staff of the project which hires the most staffs", "sql": "SELECT date_from ,  date_to FROM Project_Staff WHERE project_id IN( SELECT project_id FROM Project_Staff GROUP BY project_id ORDER BY count(*) DESC LIMIT 1 ) UNION SELECT date_from ,  date_to FROM Project_Staff WHERE role_code  =  'leader'", "example": {"db_id": "tracking_grants_for_research", "query": "SELECT date_from ,  date_to FROM Project_Staff WHERE project_id IN( SELECT project_id FROM Project_Staff GROUP BY project_id ORDER BY count(*) DESC LIMIT 1 ) UNION SELECT date_from ,  date_to FROM Project_Staff WHERE role_code  =  'leader'", "query_toks": ["SELECT", "date_from", ",", "date_to", "FROM", "Project_Staff", "WHERE", "project_id", "IN", "(", "SELECT", "project_id", "FROM", "Project_Staff", "GROUP", "BY", "project_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1", ")", "UNION", "SELECT", "date_from", ",", "date_to", "FROM", "Project_Staff", "WHERE", "role_code", "=", "'leader", "'"], "query_toks_no_value": ["select", "date_from", ",", "date_to", "from", "project_staff", "where", "project_id", "in", "(", "select", "project_id", "from", "project_staff", "group", "by", "project_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value", ")", "union", "select", "date_from", ",", "date_to", "from", "project_staff", "where", "role_code", "=", "value"], "question": "List from which date and to which date these staff work: project staff of the project which hires the most staffs", "question_toks": ["List", "from", "which", "date", "and", "to", "which", "date", "these", "staff", "work", ":", "project", "staff", "of", "the", "project", "which", "hires", "the", "most", "staffs"], "guid": 4607}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | who published the most papers in syntactic parsing ?", "sql": "SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  \"syntactic parsing\" GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  \"syntactic parsing\" GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "t4.paperid", ")", ",", "t3.authorid", "FROM", "paperkeyphrase", "AS", "t1", "JOIN", "keyphrase", "AS", "t2", "ON", "t1.keyphraseid", "=", "t2.keyphraseid", "JOIN", "paper", "AS", "t4", "ON", "t4.paperid", "=", "t1.paperid", "JOIN", "writes", "AS", "t3", "ON", "t3.paperid", "=", "t4.paperid", "WHERE", "t2.keyphrasename", "=", "``", "syntactic", "parsing", "''", "GROUP", "BY", "t3.authorid", "ORDER", "BY", "COUNT", "(", "t4.paperid", ")", "DESC", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "t4", ".", "paperid", ")", ",", "t3", ".", "authorid", "from", "paperkeyphrase", "as", "t1", "join", "keyphrase", "as", "t2", "on", "t1", ".", "keyphraseid", "=", "t2", ".", "keyphraseid", "join", "paper", "as", "t4", "on", "t4", ".", "paperid", "=", "t1", ".", "paperid", "join", "writes", "as", "t3", "on", "t3", ".", "paperid", "=", "t4", ".", "paperid", "where", "t2", ".", "keyphrasename", "=", "value", "group", "by", "t3", ".", "authorid", "order", "by", "count", "(", "t4", ".", "paperid", ")", "desc"], "question": "who published the most papers in syntactic parsing ?", "question_toks": ["who", "published", "the", "most", "papers", "in", "syntactic", "parsing", "?"], "guid": 4608}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | How many papers has David M. Blei published in AISTATS ?", "sql": "SELECT DISTINCT COUNT ( t3.paperid ) FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"David M. Blei\" AND t4.venuename  =  \"AISTATS\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( t3.paperid ) FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"David M. Blei\" AND t4.venuename  =  \"AISTATS\";", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "t3.paperid", ")", "FROM", "venue", "AS", "t4", "JOIN", "paper", "AS", "t3", "ON", "t4.venueid", "=", "t3.venueid", "JOIN", "writes", "AS", "t2", "ON", "t2.paperid", "=", "t3.paperid", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "WHERE", "t1.authorname", "=", "``", "David", "M.", "Blei", "''", "AND", "t4.venuename", "=", "``", "AISTATS", "''", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "t3", ".", "paperid", ")", "from", "venue", "as", "t4", "join", "paper", "as", "t3", "on", "t4", ".", "venueid", "=", "t3", ".", "venueid", "join", "writes", "as", "t2", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "where", "t1", ".", "authorname", "=", "value", "and", "t4", ".", "venuename", "=", "value"], "question": "How many papers has David M. Blei published in AISTATS ?", "question_toks": ["How", "many", "papers", "has", "David", "M.", "Blei", "published", "in", "AISTATS", "?"], "guid": 4609}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | brian curless 's paper about convolution", "sql": "SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";", "query_toks": ["SELECT", "DISTINCT", "t1.authorid", ",", "t3.paperid", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t5", "ON", "t2.keyphraseid", "=", "t5.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "JOIN", "writes", "AS", "t4", "ON", "t4.paperid", "=", "t3.paperid", "JOIN", "author", "AS", "t1", "ON", "t4.authorid", "=", "t1.authorid", "WHERE", "t1.authorname", "=", "``", "brian", "curless", "''", "AND", "t5.keyphrasename", "=", "``", "convolution", "''", ";"], "query_toks_no_value": ["select", "distinct", "t1", ".", "authorid", ",", "t3", ".", "paperid", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t5", "on", "t2", ".", "keyphraseid", "=", "t5", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "join", "writes", "as", "t4", "on", "t4", ".", "paperid", "=", "t3", ".", "paperid", "join", "author", "as", "t1", "on", "t4", ".", "authorid", "=", "t1", ".", "authorid", "where", "t1", ".", "authorname", "=", "value", "and", "t5", ".", "keyphrasename", "=", "value"], "question": "brian curless 's paper about convolution", "question_toks": ["brian", "curless", "'s", "paper", "about", "convolution"], "guid": 4610}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | chi papers", "sql": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"chi\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"chi\";", "query_toks": ["SELECT", "DISTINCT", "t1.paperid", "FROM", "venue", "AS", "t2", "JOIN", "paper", "AS", "t1", "ON", "t2.venueid", "=", "t1.venueid", "WHERE", "t2.venuename", "=", "``", "chi", "''", ";"], "query_toks_no_value": ["select", "distinct", "t1", ".", "paperid", "from", "venue", "as", "t2", "join", "paper", "as", "t1", "on", "t2", ".", "venueid", "=", "t1", ".", "venueid", "where", "t2", ".", "venuename", "=", "value"], "question": "chi papers", "question_toks": ["chi", "papers"], "guid": 4611}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | What is the paper with the most citation about Artificial Intelligence ?", "sql": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citingpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"Artificial Intelligence\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citingpaperid ) DESC;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citingpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"Artificial Intelligence\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citingpaperid ) DESC;", "query_toks": ["SELECT", "DISTINCT", "t4.citedpaperid", ",", "COUNT", "(", "t4.citingpaperid", ")", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "JOIN", "cite", "AS", "t4", "ON", "t3.paperid", "=", "t4.citedpaperid", "WHERE", "t1.keyphrasename", "=", "``", "Artificial", "Intelligence", "''", "GROUP", "BY", "t4.citedpaperid", "ORDER", "BY", "COUNT", "(", "t4.citingpaperid", ")", "DESC", ";"], "query_toks_no_value": ["select", "distinct", "t4", ".", "citedpaperid", ",", "count", "(", "t4", ".", "citingpaperid", ")", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "join", "cite", "as", "t4", "on", "t3", ".", "paperid", "=", "t4", ".", "citedpaperid", "where", "t1", ".", "keyphrasename", "=", "value", "group", "by", "t4", ".", "citedpaperid", "order", "by", "count", "(", "t4", ".", "citingpaperid", ")", "desc"], "question": "What is the paper with the most citation about Artificial Intelligence ?", "question_toks": ["What", "is", "the", "paper", "with", "the", "most", "citation", "about", "Artificial", "Intelligence", "?"], "guid": 4612}}
{"text": "Document_Types: document_type_code, document_description; Documents: document_id, document_type_code, grant_id, sent_date, response_received_date, other_details; Grants: grant_id, organisation_id, grant_amount, grant_start_date, grant_end_date, other_details; Organisation_Types: organisation_type, organisation_type_description; Organisations: organisation_id, organisation_type, organisation_details; Project_Outcomes: project_id, outcome_code, outcome_details; Project_Staff: staff_id, project_id, role_code, date_from, date_to, other_details; Projects: project_id, organisation_id, project_details; Research_Outcomes: outcome_code, outcome_description; Research_Staff: staff_id, employer_organisation_id, staff_details | What are the response received dates for the documents described as 'Regular' or granted with more than 100?", "sql": "SELECT T1.response_received_date FROM Documents AS T1 JOIN Document_Types AS T2 ON T1.document_type_code  =  T2.document_type_code JOIN Grants AS T3 ON T1.grant_id  =  T3.grant_id WHERE T2.document_description  =  'Regular' OR T3.grant_amount  >  100", "example": {"db_id": "tracking_grants_for_research", "query": "SELECT T1.response_received_date FROM Documents AS T1 JOIN Document_Types AS T2 ON T1.document_type_code  =  T2.document_type_code JOIN Grants AS T3 ON T1.grant_id  =  T3.grant_id WHERE T2.document_description  =  'Regular' OR T3.grant_amount  >  100", "query_toks": ["SELECT", "T1.response_received_date", "FROM", "Documents", "AS", "T1", "JOIN", "Document_Types", "AS", "T2", "ON", "T1.document_type_code", "=", "T2.document_type_code", "JOIN", "Grants", "AS", "T3", "ON", "T1.grant_id", "=", "T3.grant_id", "WHERE", "T2.document_description", "=", "'Regular", "'", "OR", "T3.grant_amount", ">", "100"], "query_toks_no_value": ["select", "t1", ".", "response_received_date", "from", "documents", "as", "t1", "join", "document_types", "as", "t2", "on", "t1", ".", "document_type_code", "=", "t2", ".", "document_type_code", "join", "grants", "as", "t3", "on", "t1", ".", "grant_id", "=", "t3", ".", "grant_id", "where", "t2", ".", "document_description", "=", "value", "or", "t3", ".", "grant_amount", ">", "value"], "question": "What are the response received dates for the documents described as 'Regular' or granted with more than 100?", "question_toks": ["What", "are", "the", "response", "received", "dates", "for", "the", "documents", "described", "as", "'Regular", "'", "or", "granted", "with", "more", "than", "100", "?"], "guid": 4613}}
{"text": "item: i_id, title; review: a_id, u_id, i_id, rating, rank; useracct: u_id, name; trust: source_u_id, target_u_id, trust | Find the id of the item whose title is \"orange\".", "sql": "SELECT i_id FROM item WHERE title  =  \"orange\"", "example": {"db_id": "epinions_1", "query": "SELECT i_id FROM item WHERE title  =  \"orange\"", "query_toks": ["SELECT", "i_id", "FROM", "item", "WHERE", "title", "=", "``", "orange", "''"], "query_toks_no_value": ["select", "i_id", "from", "item", "where", "title", "=", "value"], "question": "Find the id of the item whose title is \"orange\".", "question_toks": ["Find", "the", "id", "of", "the", "item", "whose", "title", "is", "``", "orange", "''", "."], "guid": 4614}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | Question Answering research papers", "sql": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "WHERE", "t1.keyphrasename", "=", "``", "Question", "Answering", "''", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "where", "t1", ".", "keyphrasename", "=", "value"], "question": "Question Answering research papers", "question_toks": ["Question", "Answering", "research", "papers"], "guid": 4615}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | Who published the most papers in 2007 at CVPR ?", "sql": "SELECT DISTINCT COUNT ( t2.paperid )  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2007 AND t3.venuename  =  \"CVPR\" GROUP BY t1.authorid ORDER BY COUNT ( t2.paperid ) DESC;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( t2.paperid )  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2007 AND t3.venuename  =  \"CVPR\" GROUP BY t1.authorid ORDER BY COUNT ( t2.paperid ) DESC;", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "t2.paperid", ")", ",", "t1.authorid", "FROM", "venue", "AS", "t3", "JOIN", "paper", "AS", "t2", "ON", "t3.venueid", "=", "t2.venueid", "JOIN", "writes", "AS", "t1", "ON", "t1.paperid", "=", "t2.paperid", "WHERE", "t2.year", "=", "2007", "AND", "t3.venuename", "=", "``", "CVPR", "''", "GROUP", "BY", "t1.authorid", "ORDER", "BY", "COUNT", "(", "t2.paperid", ")", "DESC", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "t2", ".", "paperid", ")", ",", "t1", ".", "authorid", "from", "venue", "as", "t3", "join", "paper", "as", "t2", "on", "t3", ".", "venueid", "=", "t2", ".", "venueid", "join", "writes", "as", "t1", "on", "t1", ".", "paperid", "=", "t2", ".", "paperid", "where", "t2", ".", "year", "=", "value", "and", "t3", ".", "venuename", "=", "value", "group", "by", "t1", ".", "authorid", "order", "by", "count", "(", "t2", ".", "paperid", ")", "desc"], "question": "Who published the most papers in 2007 at CVPR ?", "question_toks": ["Who", "published", "the", "most", "papers", "in", "2007", "at", "CVPR", "?"], "guid": 4616}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the total citations of all the papers in PVLDB .", "sql": "SELECT SUM ( t2.citation_num ) FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\";", "example": {"db_id": "academic", "query": "SELECT SUM ( t2.citation_num ) FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\";", "query_toks": ["SELECT", "SUM", "(", "t2.citation_num", ")", "FROM", "publication", "AS", "t2", "JOIN", "journal", "AS", "t1", "ON", "t2.jid", "=", "t1.jid", "WHERE", "t1.name", "=", "``", "PVLDB", "''", ";"], "query_toks_no_value": ["select", "sum", "(", "t2", ".", "citation_num", ")", "from", "publication", "as", "t2", "join", "journal", "as", "t1", "on", "t2", ".", "jid", "=", "t1", ".", "jid", "where", "t1", ".", "name", "=", "value"], "question": "return me the total citations of all the papers in PVLDB .", "question_toks": ["return", "me", "the", "total", "citations", "of", "all", "the", "papers", "in", "PVLDB", "."], "guid": 4617}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | what papers have fewer than 5 citations by ACL papers", "sql": "SELECT DISTINCT t3.citingpaperid FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"ACL\" GROUP BY t3.citingpaperid HAVING COUNT ( DISTINCT t3.citedpaperid )  <  5;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.citingpaperid FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"ACL\" GROUP BY t3.citingpaperid HAVING COUNT ( DISTINCT t3.citedpaperid )  <  5;", "query_toks": ["SELECT", "DISTINCT", "t3.citingpaperid", "FROM", "paper", "AS", "t1", "JOIN", "cite", "AS", "t3", "ON", "t1.paperid", "=", "t3.citedpaperid", "JOIN", "venue", "AS", "t2", "ON", "t2.venueid", "=", "t1.venueid", "WHERE", "t2.venuename", "=", "``", "ACL", "''", "GROUP", "BY", "t3.citingpaperid", "HAVING", "COUNT", "(", "DISTINCT", "t3.citedpaperid", ")", "<", "5", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "citingpaperid", "from", "paper", "as", "t1", "join", "cite", "as", "t3", "on", "t1", ".", "paperid", "=", "t3", ".", "citedpaperid", "join", "venue", "as", "t2", "on", "t2", ".", "venueid", "=", "t1", ".", "venueid", "where", "t2", ".", "venuename", "=", "value", "group", "by", "t3", ".", "citingpaperid", "having", "count", "(", "distinct", "t3", ".", "citedpaperid", ")", "<", "value"], "question": "what papers have fewer than 5 citations by ACL papers", "question_toks": ["what", "papers", "have", "fewer", "than", "5", "citations", "by", "ACL", "papers"], "guid": 4618}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the paper by \" H. V. Jagadish \" with the most citations .", "sql": "SELECT t3.title FROM writes AS t2 JOIN author AS t1 ON t2.aid  =  t1.aid JOIN publication AS t3 ON t2.pid  =  t3.pid WHERE t1.name  =  \"H. V. Jagadish\" ORDER BY t3.citation_num DESC LIMIT 1;", "example": {"db_id": "academic", "query": "SELECT t3.title FROM writes AS t2 JOIN author AS t1 ON t2.aid  =  t1.aid JOIN publication AS t3 ON t2.pid  =  t3.pid WHERE t1.name  =  \"H. V. Jagadish\" ORDER BY t3.citation_num DESC LIMIT 1;", "query_toks": ["SELECT", "t3.title", "FROM", "writes", "AS", "t2", "JOIN", "author", "AS", "t1", "ON", "t2.aid", "=", "t1.aid", "JOIN", "publication", "AS", "t3", "ON", "t2.pid", "=", "t3.pid", "WHERE", "t1.name", "=", "``", "H.", "V.", "Jagadish", "''", "ORDER", "BY", "t3.citation_num", "DESC", "LIMIT", "1", ";"], "query_toks_no_value": ["select", "t3", ".", "title", "from", "writes", "as", "t2", "join", "author", "as", "t1", "on", "t2", ".", "aid", "=", "t1", ".", "aid", "join", "publication", "as", "t3", "on", "t2", ".", "pid", "=", "t3", ".", "pid", "where", "t1", ".", "name", "=", "value", "order", "by", "t3", ".", "citation_num", "desc", "limit", "value"], "question": "return me the paper by \" H. V. Jagadish \" with the most citations .", "question_toks": ["return", "me", "the", "paper", "by", "``", "H.", "V.", "Jagadish", "``", "with", "the", "most", "citations", "."], "guid": 4619}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | keyphrases used by Luke Zettlemoyer .", "sql": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";", "query_toks": ["SELECT", "DISTINCT", "t1.keyphraseid", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "JOIN", "writes", "AS", "t4", "ON", "t4.paperid", "=", "t3.paperid", "JOIN", "author", "AS", "t5", "ON", "t4.authorid", "=", "t5.authorid", "WHERE", "t5.authorname", "=", "``", "Luke", "Zettlemoyer", "''", ";"], "query_toks_no_value": ["select", "distinct", "t1", ".", "keyphraseid", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "join", "writes", "as", "t4", "on", "t4", ".", "paperid", "=", "t3", ".", "paperid", "join", "author", "as", "t5", "on", "t4", ".", "authorid", "=", "t5", ".", "authorid", "where", "t5", ".", "authorname", "=", "value"], "question": "keyphrases used by Luke Zettlemoyer .", "question_toks": ["keyphrases", "used", "by", "Luke", "Zettlemoyer", "."], "guid": 4620}}
{"text": "Inst: instID, name, country; Authors: authID, lname, fname; Papers: paperID, title; Authorship: authID, instID, paperID, authOrder | What is the first name of the author with last name \"Ueno\"?", "sql": "SELECT fname FROM authors WHERE lname  =  \"Ueno\"", "example": {"db_id": "icfp_1", "query": "SELECT fname FROM authors WHERE lname  =  \"Ueno\"", "query_toks": ["SELECT", "fname", "FROM", "authors", "WHERE", "lname", "=", "``", "Ueno", "''"], "query_toks_no_value": ["select", "fname", "from", "authors", "where", "lname", "=", "value"], "question": "What is the first name of the author with last name \"Ueno\"?", "question_toks": ["What", "is", "the", "first", "name", "of", "the", "author", "with", "last", "name", "``", "Ueno", "''", "?"], "guid": 4621}}
{"text": "publication: Publication_ID, Book_ID, Publisher, Publication_Date, Price; book: Book_ID, Title, Issues, Writer | Please show the most common publication date.", "sql": "SELECT Publication_Date FROM publication GROUP BY Publication_Date ORDER BY COUNT(*) DESC LIMIT 1", "example": {"db_id": "book_2", "query": "SELECT Publication_Date FROM publication GROUP BY Publication_Date ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "Publication_Date", "FROM", "publication", "GROUP", "BY", "Publication_Date", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "publication_date", "from", "publication", "group", "by", "publication_date", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Please show the most common publication date.", "question_toks": ["Please", "show", "the", "most", "common", "publication", "date", "."], "guid": 4622}}
{"text": "journal: Journal_ID, Date, Theme, Sales; editor: Editor_ID, Name, Age; journal_committee: Editor_ID, Journal_ID, Work_Type | List the names of editors who are older than 25.", "sql": "SELECT Name FROM editor WHERE Age  >  25", "example": {"db_id": "journal_committee", "query": "SELECT Name FROM editor WHERE Age  >  25", "query_toks": ["SELECT", "Name", "FROM", "editor", "WHERE", "Age", ">", "25"], "query_toks_no_value": ["select", "name", "from", "editor", "where", "age", ">", "value"], "question": "List the names of editors who are older than 25.", "question_toks": ["List", "the", "names", "of", "editors", "who", "are", "older", "than", "25", "."], "guid": 4623}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | papers by Peter Mertens and Dina Barbian", "sql": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "writes", "AS", "t3", "JOIN", "author", "AS", "t2", "ON", "t3.authorid", "=", "t2.authorid", "JOIN", "writes", "AS", "t4", "ON", "t4.paperid", "=", "t3.paperid", "JOIN", "author", "AS", "t1", "ON", "t4.authorid", "=", "t1.authorid", "WHERE", "t2.authorname", "=", "``", "Peter", "Mertens", "''", "AND", "t1.authorname", "=", "``", "Dina", "Barbian", "''", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "writes", "as", "t3", "join", "author", "as", "t2", "on", "t3", ".", "authorid", "=", "t2", ".", "authorid", "join", "writes", "as", "t4", "on", "t4", ".", "paperid", "=", "t3", ".", "paperid", "join", "author", "as", "t1", "on", "t4", ".", "authorid", "=", "t1", ".", "authorid", "where", "t2", ".", "authorname", "=", "value", "and", "t1", ".", "authorname", "=", "value"], "question": "papers by Peter Mertens and Dina Barbian", "question_toks": ["papers", "by", "Peter", "Mertens", "and", "Dina", "Barbian"], "guid": 4624}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | What papers have been written by Peter Mertens and Dina Barbian ?", "sql": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "writes", "AS", "t3", "JOIN", "author", "AS", "t2", "ON", "t3.authorid", "=", "t2.authorid", "JOIN", "writes", "AS", "t4", "ON", "t4.paperid", "=", "t3.paperid", "JOIN", "author", "AS", "t1", "ON", "t4.authorid", "=", "t1.authorid", "WHERE", "t2.authorname", "=", "``", "Peter", "Mertens", "''", "AND", "t1.authorname", "=", "``", "Dina", "Barbian", "''", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "writes", "as", "t3", "join", "author", "as", "t2", "on", "t3", ".", "authorid", "=", "t2", ".", "authorid", "join", "writes", "as", "t4", "on", "t4", ".", "paperid", "=", "t3", ".", "paperid", "join", "author", "as", "t1", "on", "t4", ".", "authorid", "=", "t1", ".", "authorid", "where", "t2", ".", "authorname", "=", "value", "and", "t1", ".", "authorname", "=", "value"], "question": "What papers have been written by Peter Mertens and Dina Barbian ?", "question_toks": ["What", "papers", "have", "been", "written", "by", "Peter", "Mertens", "and", "Dina", "Barbian", "?"], "guid": 4625}}
{"text": "Inst: instID, name, country; Authors: authID, lname, fname; Papers: paperID, title; Authorship: authID, instID, paperID, authOrder | Retrieve the title of the paper that has the largest number of authors.", "sql": "SELECT t2.title FROM authorship AS t1 JOIN papers AS t2 ON t1.paperid  =  t2.paperid WHERE t1.authorder  =  (SELECT max(authorder) FROM authorship)", "example": {"db_id": "icfp_1", "query": "SELECT t2.title FROM authorship AS t1 JOIN papers AS t2 ON t1.paperid  =  t2.paperid WHERE t1.authorder  =  (SELECT max(authorder) FROM authorship)", "query_toks": ["SELECT", "t2.title", "FROM", "authorship", "AS", "t1", "JOIN", "papers", "AS", "t2", "ON", "t1.paperid", "=", "t2.paperid", "WHERE", "t1.authorder", "=", "(", "SELECT", "max", "(", "authorder", ")", "FROM", "authorship", ")"], "query_toks_no_value": ["select", "t2", ".", "title", "from", "authorship", "as", "t1", "join", "papers", "as", "t2", "on", "t1", ".", "paperid", "=", "t2", ".", "paperid", "where", "t1", ".", "authorder", "=", "(", "select", "max", "(", "authorder", ")", "from", "authorship", ")"], "question": "Retrieve the title of the paper that has the largest number of authors.", "question_toks": ["Retrieve", "the", "title", "of", "the", "paper", "that", "has", "the", "largest", "number", "of", "authors", "."], "guid": 4626}}
{"text": "Inst: instID, name, country; Authors: authID, lname, fname; Papers: paperID, title; Authorship: authID, instID, paperID, authOrder | Which institution is the author \"Matthias Blume\" belong to? Give me the name of the institution.", "sql": "SELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t1.fname  =  \"Matthias\" AND t1.lname  =  \"Blume\"", "example": {"db_id": "icfp_1", "query": "SELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t1.fname  =  \"Matthias\" AND t1.lname  =  \"Blume\"", "query_toks": ["SELECT", "DISTINCT", "t3.name", "FROM", "authors", "AS", "t1", "JOIN", "authorship", "AS", "t2", "ON", "t1.authid", "=", "t2.authid", "JOIN", "inst", "AS", "t3", "ON", "t2.instid", "=", "t3.instid", "WHERE", "t1.fname", "=", "``", "Matthias", "''", "AND", "t1.lname", "=", "``", "Blume", "''"], "query_toks_no_value": ["select", "distinct", "t3", ".", "name", "from", "authors", "as", "t1", "join", "authorship", "as", "t2", "on", "t1", ".", "authid", "=", "t2", ".", "authid", "join", "inst", "as", "t3", "on", "t2", ".", "instid", "=", "t3", ".", "instid", "where", "t1", ".", "fname", "=", "value", "and", "t1", ".", "lname", "=", "value"], "question": "Which institution is the author \"Matthias Blume\" belong to? Give me the name of the institution.", "question_toks": ["Which", "institution", "is", "the", "author", "``", "Matthias", "Blume", "''", "belong", "to", "?", "Give", "me", "the", "name", "of", "the", "institution", "."], "guid": 4627}}
{"text": "book_club: book_club_id, Year, Author_or_Editor, Book_Title, Publisher, Category, Result; movie: movie_id, Title, Year, Director, Budget_million, Gross_worldwide; culture_company: Company_name, Type, Incorporated_in, Group_Equity_Shareholding, book_club_id, movie_id | What are the publishers who have published a book in both 1989 and 1990?", "sql": "SELECT publisher FROM book_club WHERE YEAR  =  1989 INTERSECT SELECT publisher FROM book_club WHERE YEAR  =  1990", "example": {"db_id": "culture_company", "query": "SELECT publisher FROM book_club WHERE YEAR  =  1989 INTERSECT SELECT publisher FROM book_club WHERE YEAR  =  1990", "query_toks": ["SELECT", "publisher", "FROM", "book_club", "WHERE", "YEAR", "=", "1989", "INTERSECT", "SELECT", "publisher", "FROM", "book_club", "WHERE", "YEAR", "=", "1990"], "query_toks_no_value": ["select", "publisher", "from", "book_club", "where", "year", "=", "value", "intersect", "select", "publisher", "from", "book_club", "where", "year", "=", "value"], "question": "What are the publishers who have published a book in both 1989 and 1990?", "question_toks": ["What", "are", "the", "publishers", "who", "have", "published", "a", "book", "in", "both", "1989", "and", "1990", "?"], "guid": 4628}}
{"text": "Inst: instID, name, country; Authors: authID, lname, fname; Papers: paperID, title; Authorship: authID, instID, paperID, authOrder | What is the last name of the author that has published the most papers?", "sql": "SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid GROUP BY t1.fname ,  t1.lname ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "icfp_1", "query": "SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid GROUP BY t1.fname ,  t1.lname ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "t1.lname", "FROM", "authors", "AS", "t1", "JOIN", "authorship", "AS", "t2", "ON", "t1.authid", "=", "t2.authid", "JOIN", "papers", "AS", "t3", "ON", "t2.paperid", "=", "t3.paperid", "GROUP", "BY", "t1.fname", ",", "t1.lname", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "lname", "from", "authors", "as", "t1", "join", "authorship", "as", "t2", "on", "t1", ".", "authid", "=", "t2", ".", "authid", "join", "papers", "as", "t3", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "group", "by", "t1", ".", "fname", ",", "t1", ".", "lname", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the last name of the author that has published the most papers?", "question_toks": ["What", "is", "the", "last", "name", "of", "the", "author", "that", "has", "published", "the", "most", "papers", "?"], "guid": 4629}}
{"text": "Inst: instID, name, country; Authors: authID, lname, fname; Papers: paperID, title; Authorship: authID, instID, paperID, authOrder | Find the titles of all the papers written by \"Jeremy Gibbons\"", "sql": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  \"Jeremy\" AND t1.lname  =  \"Gibbons\"", "example": {"db_id": "icfp_1", "query": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  \"Jeremy\" AND t1.lname  =  \"Gibbons\"", "query_toks": ["SELECT", "t3.title", "FROM", "authors", "AS", "t1", "JOIN", "authorship", "AS", "t2", "ON", "t1.authid", "=", "t2.authid", "JOIN", "papers", "AS", "t3", "ON", "t2.paperid", "=", "t3.paperid", "WHERE", "t1.fname", "=", "``", "Jeremy", "''", "AND", "t1.lname", "=", "``", "Gibbons", "''"], "query_toks_no_value": ["select", "t3", ".", "title", "from", "authors", "as", "t1", "join", "authorship", "as", "t2", "on", "t1", ".", "authid", "=", "t2", ".", "authid", "join", "papers", "as", "t3", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "where", "t1", ".", "fname", "=", "value", "and", "t1", ".", "lname", "=", "value"], "question": "Find the titles of all the papers written by \"Jeremy Gibbons\"", "question_toks": ["Find", "the", "titles", "of", "all", "the", "papers", "written", "by", "``", "Jeremy", "Gibbons", "''"], "guid": 4630}}
{"text": "Scientists: SSN, Name; Projects: Code, Name, Hours; AssignedTo: Scientist, Project | What is the name of the project that has a scientist assigned to it whose name contains 'Smith'?", "sql": "SELECT T2.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T3.name LIKE '%Smith%'", "example": {"db_id": "scientist_1", "query": "SELECT T2.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T3.name LIKE '%Smith%'", "query_toks": ["SELECT", "T2.name", "FROM", "assignedto", "AS", "T1", "JOIN", "projects", "AS", "T2", "ON", "T1.project", "=", "T2.code", "JOIN", "scientists", "AS", "T3", "ON", "T1.scientist", "=", "T3.SSN", "WHERE", "T3.name", "LIKE", "'", "%", "Smith", "%", "'"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "assignedto", "as", "t1", "join", "projects", "as", "t2", "on", "t1", ".", "project", "=", "t2", ".", "code", "join", "scientists", "as", "t3", "on", "t1", ".", "scientist", "=", "t3", ".", "ssn", "where", "t3", ".", "name", "like", "value"], "question": "What is the name of the project that has a scientist assigned to it whose name contains 'Smith'?", "question_toks": ["What", "is", "the", "name", "of", "the", "project", "that", "has", "a", "scientist", "assigned", "to", "it", "whose", "name", "contains", "'Smith", "'", "?"], "guid": 4631}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | List the journals published in March , 2011", "sql": "SELECT DISTINCT journalid FROM paper WHERE YEAR  =  2011 GROUP BY journalid;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT journalid FROM paper WHERE YEAR  =  2011 GROUP BY journalid;", "query_toks": ["SELECT", "DISTINCT", "journalid", "FROM", "paper", "WHERE", "YEAR", "=", "2011", "GROUP", "BY", "journalid", ";"], "query_toks_no_value": ["select", "distinct", "journalid", "from", "paper", "where", "year", "=", "value", "group", "by", "journalid"], "question": "List the journals published in March , 2011", "question_toks": ["List", "the", "journals", "published", "in", "March", ",", "2011"], "guid": 4632}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | List the popular publications on dependent types", "sql": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"dependent types\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"dependent types\";", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "WHERE", "t1.keyphrasename", "=", "``", "dependent", "types", "''", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "where", "t1", ".", "keyphrasename", "=", "value"], "question": "List the popular publications on dependent types", "question_toks": ["List", "the", "popular", "publications", "on", "dependent", "types"], "guid": 4633}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | What paper by ohad shamir has the most citation ?", "sql": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"ohad shamir\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"ohad shamir\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;", "query_toks": ["SELECT", "DISTINCT", "t4.citedpaperid", ",", "COUNT", "(", "t4.citedpaperid", ")", "FROM", "paper", "AS", "t3", "JOIN", "cite", "AS", "t4", "ON", "t3.paperid", "=", "t4.citedpaperid", "JOIN", "writes", "AS", "t2", "ON", "t2.paperid", "=", "t3.paperid", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "WHERE", "t1.authorname", "=", "``", "ohad", "shamir", "''", "GROUP", "BY", "t4.citedpaperid", "ORDER", "BY", "COUNT", "(", "t4.citedpaperid", ")", "DESC", ";"], "query_toks_no_value": ["select", "distinct", "t4", ".", "citedpaperid", ",", "count", "(", "t4", ".", "citedpaperid", ")", "from", "paper", "as", "t3", "join", "cite", "as", "t4", "on", "t3", ".", "paperid", "=", "t4", ".", "citedpaperid", "join", "writes", "as", "t2", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "where", "t1", ".", "authorname", "=", "value", "group", "by", "t4", ".", "citedpaperid", "order", "by", "count", "(", "t4", ".", "citedpaperid", ")", "desc"], "question": "What paper by ohad shamir has the most citation ?", "question_toks": ["What", "paper", "by", "ohad", "shamir", "has", "the", "most", "citation", "?"], "guid": 4634}}
{"text": "workshop: Workshop_ID, Date, Venue, Name; submission: Submission_ID, Scores, Author, College; Acceptance: Submission_ID, Workshop_ID, Result | Which authors did not submit to any workshop?", "sql": "SELECT Author FROM submission WHERE Submission_ID NOT IN (SELECT Submission_ID FROM acceptance)", "example": {"db_id": "workshop_paper", "query": "SELECT Author FROM submission WHERE Submission_ID NOT IN (SELECT Submission_ID FROM acceptance)", "query_toks": ["SELECT", "Author", "FROM", "submission", "WHERE", "Submission_ID", "NOT", "IN", "(", "SELECT", "Submission_ID", "FROM", "acceptance", ")"], "query_toks_no_value": ["select", "author", "from", "submission", "where", "submission_id", "not", "in", "(", "select", "submission_id", "from", "acceptance", ")"], "question": "Which authors did not submit to any workshop?", "question_toks": ["Which", "authors", "did", "not", "submit", "to", "any", "workshop", "?"], "guid": 4635}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | Euclidean Distance papers citing NIPS papers", "sql": "SELECT DISTINCT t5.citingpaperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN cite AS t5 ON t2.paperid  =  t5.citingpaperid JOIN paper AS t3 ON t3.paperid  =  t5.citedpaperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Euclidean Distance\" AND t4.venuename  =  \"NIPS\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t5.citingpaperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN cite AS t5 ON t2.paperid  =  t5.citingpaperid JOIN paper AS t3 ON t3.paperid  =  t5.citedpaperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Euclidean Distance\" AND t4.venuename  =  \"NIPS\";", "query_toks": ["SELECT", "DISTINCT", "t5.citingpaperid", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "cite", "AS", "t5", "ON", "t2.paperid", "=", "t5.citingpaperid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t5.citedpaperid", "JOIN", "venue", "AS", "t4", "ON", "t4.venueid", "=", "t3.venueid", "WHERE", "t1.keyphrasename", "=", "``", "Euclidean", "Distance", "''", "AND", "t4.venuename", "=", "``", "NIPS", "''", ";"], "query_toks_no_value": ["select", "distinct", "t5", ".", "citingpaperid", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "cite", "as", "t5", "on", "t2", ".", "paperid", "=", "t5", ".", "citingpaperid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t5", ".", "citedpaperid", "join", "venue", "as", "t4", "on", "t4", ".", "venueid", "=", "t3", ".", "venueid", "where", "t1", ".", "keyphrasename", "=", "value", "and", "t4", ".", "venuename", "=", "value"], "question": "Euclidean Distance papers citing NIPS papers", "question_toks": ["Euclidean", "Distance", "papers", "citing", "NIPS", "papers"], "guid": 4636}}
{"text": "Inst: instID, name, country; Authors: authID, lname, fname; Papers: paperID, title; Authorship: authID, instID, paperID, authOrder | Find papers whose second author has last name \"Turon\" and is affiliated with an institution in the country \"USA\".", "sql": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid JOIN inst AS t4 ON t2.instid  =  t4.instid WHERE t4.country  =  \"USA\" AND t2.authorder  =  2 AND t1.lname  =  \"Turon\"", "example": {"db_id": "icfp_1", "query": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid JOIN inst AS t4 ON t2.instid  =  t4.instid WHERE t4.country  =  \"USA\" AND t2.authorder  =  2 AND t1.lname  =  \"Turon\"", "query_toks": ["SELECT", "t3.title", "FROM", "authors", "AS", "t1", "JOIN", "authorship", "AS", "t2", "ON", "t1.authid", "=", "t2.authid", "JOIN", "papers", "AS", "t3", "ON", "t2.paperid", "=", "t3.paperid", "JOIN", "inst", "AS", "t4", "ON", "t2.instid", "=", "t4.instid", "WHERE", "t4.country", "=", "``", "USA", "''", "AND", "t2.authorder", "=", "2", "AND", "t1.lname", "=", "``", "Turon", "''"], "query_toks_no_value": ["select", "t3", ".", "title", "from", "authors", "as", "t1", "join", "authorship", "as", "t2", "on", "t1", ".", "authid", "=", "t2", ".", "authid", "join", "papers", "as", "t3", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "join", "inst", "as", "t4", "on", "t2", ".", "instid", "=", "t4", ".", "instid", "where", "t4", ".", "country", "=", "value", "and", "t2", ".", "authorder", "=", "value", "and", "t1", ".", "lname", "=", "value"], "question": "Find papers whose second author has last name \"Turon\" and is affiliated with an institution in the country \"USA\".", "question_toks": ["Find", "papers", "whose", "second", "author", "has", "last", "name", "``", "Turon", "''", "and", "is", "affiliated", "with", "an", "institution", "in", "the", "country", "``", "USA", "''", "."], "guid": 4637}}
{"text": "item: i_id, title; review: a_id, u_id, i_id, rating, rank; useracct: u_id, name; trust: source_u_id, target_u_id, trust | Find the titles of items that received any rating below 5.", "sql": "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id WHERE T2.rating  <  5", "example": {"db_id": "epinions_1", "query": "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id WHERE T2.rating  <  5", "query_toks": ["SELECT", "T1.title", "FROM", "item", "AS", "T1", "JOIN", "review", "AS", "T2", "ON", "T1.i_id", "=", "T2.i_id", "WHERE", "T2.rating", "<", "5"], "query_toks_no_value": ["select", "t1", ".", "title", "from", "item", "as", "t1", "join", "review", "as", "t2", "on", "t1", ".", "i_id", "=", "t2", ".", "i_id", "where", "t2", ".", "rating", "<", "value"], "question": "Find the titles of items that received any rating below 5.", "question_toks": ["Find", "the", "titles", "of", "items", "that", "received", "any", "rating", "below", "5", "."], "guid": 4638}}
{"text": "Document_Types: document_type_code, document_description; Documents: document_id, document_type_code, grant_id, sent_date, response_received_date, other_details; Grants: grant_id, organisation_id, grant_amount, grant_start_date, grant_end_date, other_details; Organisation_Types: organisation_type, organisation_type_description; Organisations: organisation_id, organisation_type, organisation_details; Project_Outcomes: project_id, outcome_code, outcome_details; Project_Staff: staff_id, project_id, role_code, date_from, date_to, other_details; Projects: project_id, organisation_id, project_details; Research_Outcomes: outcome_code, outcome_description; Research_Staff: staff_id, employer_organisation_id, staff_details | List the description of the outcomes for all projects.", "sql": "SELECT T1.outcome_description FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code  =  T2.outcome_code", "example": {"db_id": "tracking_grants_for_research", "query": "SELECT T1.outcome_description FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code  =  T2.outcome_code", "query_toks": ["SELECT", "T1.outcome_description", "FROM", "Research_outcomes", "AS", "T1", "JOIN", "Project_outcomes", "AS", "T2", "ON", "T1.outcome_code", "=", "T2.outcome_code"], "query_toks_no_value": ["select", "t1", ".", "outcome_description", "from", "research_outcomes", "as", "t1", "join", "project_outcomes", "as", "t2", "on", "t1", ".", "outcome_code", "=", "t2", ".", "outcome_code"], "question": "List the description of the outcomes for all projects.", "question_toks": ["List", "the", "description", "of", "the", "outcomes", "for", "all", "projects", "."], "guid": 4639}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | Who writes a lot of papers in Machine Learning ?", "sql": "SELECT DISTINCT t1.authorname FROM paperkeyphrase AS t2 JOIN keyphrase AS t4 ON t2.keyphraseid  =  t4.keyphraseid JOIN writes AS t3 ON t3.paperid  =  t2.paperid JOIN author AS t1 ON t3.authorid  =  t1.authorid WHERE t4.keyphrasename  =  \"Machine Learning\" GROUP BY t1.authorname ORDER BY COUNT ( DISTINCT t3.paperid ) DESC;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t1.authorname FROM paperkeyphrase AS t2 JOIN keyphrase AS t4 ON t2.keyphraseid  =  t4.keyphraseid JOIN writes AS t3 ON t3.paperid  =  t2.paperid JOIN author AS t1 ON t3.authorid  =  t1.authorid WHERE t4.keyphrasename  =  \"Machine Learning\" GROUP BY t1.authorname ORDER BY COUNT ( DISTINCT t3.paperid ) DESC;", "query_toks": ["SELECT", "DISTINCT", "t1.authorname", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t4", "ON", "t2.keyphraseid", "=", "t4.keyphraseid", "JOIN", "writes", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "JOIN", "author", "AS", "t1", "ON", "t3.authorid", "=", "t1.authorid", "WHERE", "t4.keyphrasename", "=", "``", "Machine", "Learning", "''", "GROUP", "BY", "t1.authorname", "ORDER", "BY", "COUNT", "(", "DISTINCT", "t3.paperid", ")", "DESC", ";"], "query_toks_no_value": ["select", "distinct", "t1", ".", "authorname", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t4", "on", "t2", ".", "keyphraseid", "=", "t4", ".", "keyphraseid", "join", "writes", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "join", "author", "as", "t1", "on", "t3", ".", "authorid", "=", "t1", ".", "authorid", "where", "t4", ".", "keyphrasename", "=", "value", "group", "by", "t1", ".", "authorname", "order", "by", "count", "(", "distinct", "t3", ".", "paperid", ")", "desc"], "question": "Who writes a lot of papers in Machine Learning ?", "question_toks": ["Who", "writes", "a", "lot", "of", "papers", "in", "Machine", "Learning", "?"], "guid": 4640}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me all the papers in VLDB conference in \" University of Michigan \" .", "sql": "SELECT t5.title FROM organization AS t3 JOIN author AS t1 ON t3.oid  =  t1.oid JOIN writes AS t4 ON t4.aid  =  t1.aid JOIN publication AS t5 ON t4.pid  =  t5.pid JOIN conference AS t2 ON t5.cid  =  t2.cid WHERE t2.name  =  \"VLDB\" AND t3.name  =  \"University of Michigan\";", "example": {"db_id": "academic", "query": "SELECT t5.title FROM organization AS t3 JOIN author AS t1 ON t3.oid  =  t1.oid JOIN writes AS t4 ON t4.aid  =  t1.aid JOIN publication AS t5 ON t4.pid  =  t5.pid JOIN conference AS t2 ON t5.cid  =  t2.cid WHERE t2.name  =  \"VLDB\" AND t3.name  =  \"University of Michigan\";", "query_toks": ["SELECT", "t5.title", "FROM", "organization", "AS", "t3", "JOIN", "author", "AS", "t1", "ON", "t3.oid", "=", "t1.oid", "JOIN", "writes", "AS", "t4", "ON", "t4.aid", "=", "t1.aid", "JOIN", "publication", "AS", "t5", "ON", "t4.pid", "=", "t5.pid", "JOIN", "conference", "AS", "t2", "ON", "t5.cid", "=", "t2.cid", "WHERE", "t2.name", "=", "``", "VLDB", "''", "AND", "t3.name", "=", "``", "University", "of", "Michigan", "''", ";"], "query_toks_no_value": ["select", "t5", ".", "title", "from", "organization", "as", "t3", "join", "author", "as", "t1", "on", "t3", ".", "oid", "=", "t1", ".", "oid", "join", "writes", "as", "t4", "on", "t4", ".", "aid", "=", "t1", ".", "aid", "join", "publication", "as", "t5", "on", "t4", ".", "pid", "=", "t5", ".", "pid", "join", "conference", "as", "t2", "on", "t5", ".", "cid", "=", "t2", ".", "cid", "where", "t2", ".", "name", "=", "value", "and", "t3", ".", "name", "=", "value"], "question": "return me all the papers in VLDB conference in \" University of Michigan \" .", "question_toks": ["return", "me", "all", "the", "papers", "in", "VLDB", "conference", "in", "``", "University", "of", "Michigan", "``", "."], "guid": 4641}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the number of papers in VLDB conference in \" University of Michigan \" .", "sql": "SELECT COUNT ( DISTINCT t5.title ) FROM organization AS t3 JOIN author AS t1 ON t3.oid  =  t1.oid JOIN writes AS t4 ON t4.aid  =  t1.aid JOIN publication AS t5 ON t4.pid  =  t5.pid JOIN conference AS t2 ON t5.cid  =  t2.cid WHERE t2.name  =  \"VLDB\" AND t3.name  =  \"University of Michigan\";", "example": {"db_id": "academic", "query": "SELECT COUNT ( DISTINCT t5.title ) FROM organization AS t3 JOIN author AS t1 ON t3.oid  =  t1.oid JOIN writes AS t4 ON t4.aid  =  t1.aid JOIN publication AS t5 ON t4.pid  =  t5.pid JOIN conference AS t2 ON t5.cid  =  t2.cid WHERE t2.name  =  \"VLDB\" AND t3.name  =  \"University of Michigan\";", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "t5.title", ")", "FROM", "organization", "AS", "t3", "JOIN", "author", "AS", "t1", "ON", "t3.oid", "=", "t1.oid", "JOIN", "writes", "AS", "t4", "ON", "t4.aid", "=", "t1.aid", "JOIN", "publication", "AS", "t5", "ON", "t4.pid", "=", "t5.pid", "JOIN", "conference", "AS", "t2", "ON", "t5.cid", "=", "t2.cid", "WHERE", "t2.name", "=", "``", "VLDB", "''", "AND", "t3.name", "=", "``", "University", "of", "Michigan", "''", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "t5", ".", "title", ")", "from", "organization", "as", "t3", "join", "author", "as", "t1", "on", "t3", ".", "oid", "=", "t1", ".", "oid", "join", "writes", "as", "t4", "on", "t4", ".", "aid", "=", "t1", ".", "aid", "join", "publication", "as", "t5", "on", "t4", ".", "pid", "=", "t5", ".", "pid", "join", "conference", "as", "t2", "on", "t5", ".", "cid", "=", "t2", ".", "cid", "where", "t2", ".", "name", "=", "value", "and", "t3", ".", "name", "=", "value"], "question": "return me the number of papers in VLDB conference in \" University of Michigan \" .", "question_toks": ["return", "me", "the", "number", "of", "papers", "in", "VLDB", "conference", "in", "``", "University", "of", "Michigan", "``", "."], "guid": 4642}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the keywords of \" Making database systems usable \" .", "sql": "SELECT t1.keyword FROM publication_keyword AS t3 JOIN keyword AS t1 ON t3.kid  =  t1.kid JOIN publication AS t2 ON t2.pid  =  t3.pid WHERE t2.title  =  \"Making database systems usable\";", "example": {"db_id": "academic", "query": "SELECT t1.keyword FROM publication_keyword AS t3 JOIN keyword AS t1 ON t3.kid  =  t1.kid JOIN publication AS t2 ON t2.pid  =  t3.pid WHERE t2.title  =  \"Making database systems usable\";", "query_toks": ["SELECT", "t1.keyword", "FROM", "publication_keyword", "AS", "t3", "JOIN", "keyword", "AS", "t1", "ON", "t3.kid", "=", "t1.kid", "JOIN", "publication", "AS", "t2", "ON", "t2.pid", "=", "t3.pid", "WHERE", "t2.title", "=", "``", "Making", "database", "systems", "usable", "''", ";"], "query_toks_no_value": ["select", "t1", ".", "keyword", "from", "publication_keyword", "as", "t3", "join", "keyword", "as", "t1", "on", "t3", ".", "kid", "=", "t1", ".", "kid", "join", "publication", "as", "t2", "on", "t2", ".", "pid", "=", "t3", ".", "pid", "where", "t2", ".", "title", "=", "value"], "question": "return me the keywords of \" Making database systems usable \" .", "question_toks": ["return", "me", "the", "keywords", "of", "``", "Making", "database", "systems", "usable", "``", "."], "guid": 4643}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | convolution papers by brian curless", "sql": "SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";", "query_toks": ["SELECT", "DISTINCT", "t1.authorid", ",", "t3.paperid", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t5", "ON", "t2.keyphraseid", "=", "t5.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "JOIN", "writes", "AS", "t4", "ON", "t4.paperid", "=", "t3.paperid", "JOIN", "author", "AS", "t1", "ON", "t4.authorid", "=", "t1.authorid", "WHERE", "t1.authorname", "=", "``", "brian", "curless", "''", "AND", "t5.keyphrasename", "=", "``", "convolution", "''", ";"], "query_toks_no_value": ["select", "distinct", "t1", ".", "authorid", ",", "t3", ".", "paperid", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t5", "on", "t2", ".", "keyphraseid", "=", "t5", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "join", "writes", "as", "t4", "on", "t4", ".", "paperid", "=", "t3", ".", "paperid", "join", "author", "as", "t1", "on", "t4", ".", "authorid", "=", "t1", ".", "authorid", "where", "t1", ".", "authorname", "=", "value", "and", "t5", ".", "keyphrasename", "=", "value"], "question": "convolution papers by brian curless", "question_toks": ["convolution", "papers", "by", "brian", "curless"], "guid": 4644}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | datasets used by semantic parsing papers", "sql": "SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  \"semantic parsing\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  \"semantic parsing\";", "query_toks": ["SELECT", "DISTINCT", "t2.datasetid", "FROM", "paperdataset", "AS", "t3", "JOIN", "dataset", "AS", "t2", "ON", "t3.datasetid", "=", "t2.datasetid", "JOIN", "paperkeyphrase", "AS", "t1", "ON", "t1.paperid", "=", "t3.paperid", "JOIN", "keyphrase", "AS", "t4", "ON", "t1.keyphraseid", "=", "t4.keyphraseid", "WHERE", "t4.keyphrasename", "=", "``", "semantic", "parsing", "''", ";"], "query_toks_no_value": ["select", "distinct", "t2", ".", "datasetid", "from", "paperdataset", "as", "t3", "join", "dataset", "as", "t2", "on", "t3", ".", "datasetid", "=", "t2", ".", "datasetid", "join", "paperkeyphrase", "as", "t1", "on", "t1", ".", "paperid", "=", "t3", ".", "paperid", "join", "keyphrase", "as", "t4", "on", "t1", ".", "keyphraseid", "=", "t4", ".", "keyphraseid", "where", "t4", ".", "keyphrasename", "=", "value"], "question": "datasets used by semantic parsing papers", "question_toks": ["datasets", "used", "by", "semantic", "parsing", "papers"], "guid": 4645}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | datasets with semantic parsing", "sql": "SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  \"semantic parsing\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  \"semantic parsing\";", "query_toks": ["SELECT", "DISTINCT", "t2.datasetid", "FROM", "paperdataset", "AS", "t3", "JOIN", "dataset", "AS", "t2", "ON", "t3.datasetid", "=", "t2.datasetid", "JOIN", "paperkeyphrase", "AS", "t1", "ON", "t1.paperid", "=", "t3.paperid", "JOIN", "keyphrase", "AS", "t4", "ON", "t1.keyphraseid", "=", "t4.keyphraseid", "WHERE", "t4.keyphrasename", "=", "``", "semantic", "parsing", "''", ";"], "query_toks_no_value": ["select", "distinct", "t2", ".", "datasetid", "from", "paperdataset", "as", "t3", "join", "dataset", "as", "t2", "on", "t3", ".", "datasetid", "=", "t2", ".", "datasetid", "join", "paperkeyphrase", "as", "t1", "on", "t1", ".", "paperid", "=", "t3", ".", "paperid", "join", "keyphrase", "as", "t4", "on", "t1", ".", "keyphraseid", "=", "t4", ".", "keyphraseid", "where", "t4", ".", "keyphrasename", "=", "value"], "question": "datasets with semantic parsing", "question_toks": ["datasets", "with", "semantic", "parsing"], "guid": 4646}}
{"text": "book_club: book_club_id, Year, Author_or_Editor, Book_Title, Publisher, Category, Result; movie: movie_id, Title, Year, Director, Budget_million, Gross_worldwide; culture_company: Company_name, Type, Incorporated_in, Group_Equity_Shareholding, book_club_id, movie_id | What are all the company names that have a book published by Alyson?", "sql": "SELECT T1.company_name FROM culture_company AS T1 JOIN book_club AS T2 ON T1.book_club_id  =  T2.book_club_id WHERE T2.publisher  =  'Alyson'", "example": {"db_id": "culture_company", "query": "SELECT T1.company_name FROM culture_company AS T1 JOIN book_club AS T2 ON T1.book_club_id  =  T2.book_club_id WHERE T2.publisher  =  'Alyson'", "query_toks": ["SELECT", "T1.company_name", "FROM", "culture_company", "AS", "T1", "JOIN", "book_club", "AS", "T2", "ON", "T1.book_club_id", "=", "T2.book_club_id", "WHERE", "T2.publisher", "=", "'Alyson", "'"], "query_toks_no_value": ["select", "t1", ".", "company_name", "from", "culture_company", "as", "t1", "join", "book_club", "as", "t2", "on", "t1", ".", "book_club_id", "=", "t2", ".", "book_club_id", "where", "t2", ".", "publisher", "=", "value"], "question": "What are all the company names that have a book published by Alyson?", "question_toks": ["What", "are", "all", "the", "company", "names", "that", "have", "a", "book", "published", "by", "Alyson", "?"], "guid": 4647}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the papers by \" H. V. Jagadish \" on VLDB conference .", "sql": "SELECT t4.title FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\" AND t2.name  =  \"VLDB\";", "example": {"db_id": "academic", "query": "SELECT t4.title FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\" AND t2.name  =  \"VLDB\";", "query_toks": ["SELECT", "t4.title", "FROM", "publication", "AS", "t4", "JOIN", "conference", "AS", "t2", "ON", "t4.cid", "=", "t2.cid", "JOIN", "writes", "AS", "t3", "ON", "t3.pid", "=", "t4.pid", "JOIN", "author", "AS", "t1", "ON", "t3.aid", "=", "t1.aid", "WHERE", "t1.name", "=", "``", "H.", "V.", "Jagadish", "''", "AND", "t2.name", "=", "``", "VLDB", "''", ";"], "query_toks_no_value": ["select", "t4", ".", "title", "from", "publication", "as", "t4", "join", "conference", "as", "t2", "on", "t4", ".", "cid", "=", "t2", ".", "cid", "join", "writes", "as", "t3", "on", "t3", ".", "pid", "=", "t4", ".", "pid", "join", "author", "as", "t1", "on", "t3", ".", "aid", "=", "t1", ".", "aid", "where", "t1", ".", "name", "=", "value", "and", "t2", ".", "name", "=", "value"], "question": "return me the papers by \" H. V. Jagadish \" on VLDB conference .", "question_toks": ["return", "me", "the", "papers", "by", "``", "H.", "V.", "Jagadish", "``", "on", "VLDB", "conference", "."], "guid": 4648}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | What journals are Takashi Matsumoto 's articles published in ?", "sql": "SELECT DISTINCT t3.journalid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Takashi Matsumoto\" GROUP BY t3.journalid;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.journalid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Takashi Matsumoto\" GROUP BY t3.journalid;", "query_toks": ["SELECT", "DISTINCT", "t3.journalid", "FROM", "writes", "AS", "t2", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "JOIN", "paper", "AS", "t3", "ON", "t2.paperid", "=", "t3.paperid", "WHERE", "t1.authorname", "=", "``", "Takashi", "Matsumoto", "''", "GROUP", "BY", "t3.journalid", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "journalid", "from", "writes", "as", "t2", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "join", "paper", "as", "t3", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "where", "t1", ".", "authorname", "=", "value", "group", "by", "t3", ".", "journalid"], "question": "What journals are Takashi Matsumoto 's articles published in ?", "question_toks": ["What", "journals", "are", "Takashi", "Matsumoto", "'s", "articles", "published", "in", "?"], "guid": 4649}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | How many papers did Mirella Lapata cite ?", "sql": "SELECT DISTINCT COUNT ( t3.citedpaperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN cite AS t3 ON t2.paperid  =  t3.citingpaperid WHERE t1.authorname  =  \"Mirella Lapata\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( t3.citedpaperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN cite AS t3 ON t2.paperid  =  t3.citingpaperid WHERE t1.authorname  =  \"Mirella Lapata\";", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "t3.citedpaperid", ")", "FROM", "writes", "AS", "t2", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "JOIN", "cite", "AS", "t3", "ON", "t2.paperid", "=", "t3.citingpaperid", "WHERE", "t1.authorname", "=", "``", "Mirella", "Lapata", "''", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "t3", ".", "citedpaperid", ")", "from", "writes", "as", "t2", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "join", "cite", "as", "t3", "on", "t2", ".", "paperid", "=", "t3", ".", "citingpaperid", "where", "t1", ".", "authorname", "=", "value"], "question": "How many papers did Mirella Lapata cite ?", "question_toks": ["How", "many", "papers", "did", "Mirella", "Lapata", "cite", "?"], "guid": 4650}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | How many papers related to deep learning cited the dataset ImageNet ?", "sql": "SELECT DISTINCT COUNT ( t4.paperid ) FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paper AS t4 ON t4.paperid  =  t3.paperid JOIN paperkeyphrase AS t1 ON t4.paperid  =  t1.paperid JOIN keyphrase AS t5 ON t1.keyphraseid  =  t5.keyphraseid WHERE t2.datasetname  =  \"ImageNet\" AND t5.keyphrasename  =  \"deep learning\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( t4.paperid ) FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paper AS t4 ON t4.paperid  =  t3.paperid JOIN paperkeyphrase AS t1 ON t4.paperid  =  t1.paperid JOIN keyphrase AS t5 ON t1.keyphraseid  =  t5.keyphraseid WHERE t2.datasetname  =  \"ImageNet\" AND t5.keyphrasename  =  \"deep learning\";", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "t4.paperid", ")", "FROM", "paperdataset", "AS", "t3", "JOIN", "dataset", "AS", "t2", "ON", "t3.datasetid", "=", "t2.datasetid", "JOIN", "paper", "AS", "t4", "ON", "t4.paperid", "=", "t3.paperid", "JOIN", "paperkeyphrase", "AS", "t1", "ON", "t4.paperid", "=", "t1.paperid", "JOIN", "keyphrase", "AS", "t5", "ON", "t1.keyphraseid", "=", "t5.keyphraseid", "WHERE", "t2.datasetname", "=", "``", "ImageNet", "''", "AND", "t5.keyphrasename", "=", "``", "deep", "learning", "''", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "t4", ".", "paperid", ")", "from", "paperdataset", "as", "t3", "join", "dataset", "as", "t2", "on", "t3", ".", "datasetid", "=", "t2", ".", "datasetid", "join", "paper", "as", "t4", "on", "t4", ".", "paperid", "=", "t3", ".", "paperid", "join", "paperkeyphrase", "as", "t1", "on", "t4", ".", "paperid", "=", "t1", ".", "paperid", "join", "keyphrase", "as", "t5", "on", "t1", ".", "keyphraseid", "=", "t5", ".", "keyphraseid", "where", "t2", ".", "datasetname", "=", "value", "and", "t5", ".", "keyphrasename", "=", "value"], "question": "How many papers related to deep learning cited the dataset ImageNet ?", "question_toks": ["How", "many", "papers", "related", "to", "deep", "learning", "cited", "the", "dataset", "ImageNet", "?"], "guid": 4651}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the conference, which published \" Making database systems usable \" .", "sql": "SELECT t1.name FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t2.title  =  \"Making database systems usable\";", "example": {"db_id": "academic", "query": "SELECT t1.name FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t2.title  =  \"Making database systems usable\";", "query_toks": ["SELECT", "t1.name", "FROM", "publication", "AS", "t2", "JOIN", "conference", "AS", "t1", "ON", "t2.cid", "=", "t1.cid", "WHERE", "t2.title", "=", "``", "Making", "database", "systems", "usable", "''", ";"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "publication", "as", "t2", "join", "conference", "as", "t1", "on", "t2", ".", "cid", "=", "t1", ".", "cid", "where", "t2", ".", "title", "=", "value"], "question": "return me the conference, which published \" Making database systems usable \" .", "question_toks": ["return", "me", "the", "conference", ",", "which", "published", "``", "Making", "database", "systems", "usable", "``", "."], "guid": 4652}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | who does Noah A Smith collaborate with ?", "sql": "SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Noah A Smith\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Noah A Smith\";", "query_toks": ["SELECT", "DISTINCT", "t1.authorid", "FROM", "writes", "AS", "t3", "JOIN", "author", "AS", "t2", "ON", "t3.authorid", "=", "t2.authorid", "JOIN", "writes", "AS", "t4", "ON", "t4.paperid", "=", "t3.paperid", "JOIN", "author", "AS", "t1", "ON", "t4.authorid", "=", "t1.authorid", "WHERE", "t2.authorname", "=", "``", "Noah", "A", "Smith", "''", ";"], "query_toks_no_value": ["select", "distinct", "t1", ".", "authorid", "from", "writes", "as", "t3", "join", "author", "as", "t2", "on", "t3", ".", "authorid", "=", "t2", ".", "authorid", "join", "writes", "as", "t4", "on", "t4", ".", "paperid", "=", "t3", ".", "paperid", "join", "author", "as", "t1", "on", "t4", ".", "authorid", "=", "t1", ".", "authorid", "where", "t2", ".", "authorname", "=", "value"], "question": "who does Noah A Smith collaborate with ?", "question_toks": ["who", "does", "Noah", "A", "Smith", "collaborate", "with", "?"], "guid": 4653}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | Does ali farhadi have a paper in eccv in 2016 ?", "sql": "SELECT DISTINCT t3.paperid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"ali farhadi\" AND t3.year  =  2016 AND t4.venuename  =  \"eccv\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"ali farhadi\" AND t3.year  =  2016 AND t4.venuename  =  \"eccv\";", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "venue", "AS", "t4", "JOIN", "paper", "AS", "t3", "ON", "t4.venueid", "=", "t3.venueid", "JOIN", "writes", "AS", "t2", "ON", "t2.paperid", "=", "t3.paperid", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "WHERE", "t1.authorname", "=", "``", "ali", "farhadi", "''", "AND", "t3.year", "=", "2016", "AND", "t4.venuename", "=", "``", "eccv", "''", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "venue", "as", "t4", "join", "paper", "as", "t3", "on", "t4", ".", "venueid", "=", "t3", ".", "venueid", "join", "writes", "as", "t2", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "where", "t1", ".", "authorname", "=", "value", "and", "t3", ".", "year", "=", "value", "and", "t4", ".", "venuename", "=", "value"], "question": "Does ali farhadi have a paper in eccv in 2016 ?", "question_toks": ["Does", "ali", "farhadi", "have", "a", "paper", "in", "eccv", "in", "2016", "?"], "guid": 4654}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | Where did li dong publish in 2016 ?", "sql": "SELECT DISTINCT t3.venueid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"li dong\" AND t3.year  =  2016;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.venueid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"li dong\" AND t3.year  =  2016;", "query_toks": ["SELECT", "DISTINCT", "t3.venueid", "FROM", "writes", "AS", "t2", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "JOIN", "paper", "AS", "t3", "ON", "t2.paperid", "=", "t3.paperid", "WHERE", "t1.authorname", "=", "``", "li", "dong", "''", "AND", "t3.year", "=", "2016", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "venueid", "from", "writes", "as", "t2", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "join", "paper", "as", "t3", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "where", "t1", ".", "authorname", "=", "value", "and", "t3", ".", "year", "=", "value"], "question": "Where did li dong publish in 2016 ?", "question_toks": ["Where", "did", "li", "dong", "publish", "in", "2016", "?"], "guid": 4655}}
{"text": "Inst: instID, name, country; Authors: authID, lname, fname; Papers: paperID, title; Authorship: authID, instID, paperID, authOrder | How many papers are published in total?", "sql": "SELECT count(*) FROM papers", "example": {"db_id": "icfp_1", "query": "SELECT count(*) FROM papers", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "papers"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "papers"], "question": "How many papers are published in total?", "question_toks": ["How", "many", "papers", "are", "published", "in", "total", "?"], "guid": 4656}}
{"text": "item: i_id, title; review: a_id, u_id, i_id, rating, rank; useracct: u_id, name; trust: source_u_id, target_u_id, trust | Find the names of users who did not leave any review.", "sql": "SELECT name FROM useracct WHERE u_id NOT IN (SELECT u_id FROM review)", "example": {"db_id": "epinions_1", "query": "SELECT name FROM useracct WHERE u_id NOT IN (SELECT u_id FROM review)", "query_toks": ["SELECT", "name", "FROM", "useracct", "WHERE", "u_id", "NOT", "IN", "(", "SELECT", "u_id", "FROM", "review", ")"], "query_toks_no_value": ["select", "name", "from", "useracct", "where", "u_id", "not", "in", "(", "select", "u_id", "from", "review", ")"], "question": "Find the names of users who did not leave any review.", "question_toks": ["Find", "the", "names", "of", "users", "who", "did", "not", "leave", "any", "review", "."], "guid": 4657}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | pldi papers 2015", "sql": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"pldi\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"pldi\";", "query_toks": ["SELECT", "DISTINCT", "t1.paperid", "FROM", "venue", "AS", "t2", "JOIN", "paper", "AS", "t1", "ON", "t2.venueid", "=", "t1.venueid", "WHERE", "t1.year", "=", "2015", "AND", "t2.venuename", "=", "``", "pldi", "''", ";"], "query_toks_no_value": ["select", "distinct", "t1", ".", "paperid", "from", "venue", "as", "t2", "join", "paper", "as", "t1", "on", "t2", ".", "venueid", "=", "t1", ".", "venueid", "where", "t1", ".", "year", "=", "value", "and", "t2", ".", "venuename", "=", "value"], "question": "pldi papers 2015", "question_toks": ["pldi", "papers", "2015"], "guid": 4658}}
{"text": "Scientists: SSN, Name; Projects: Code, Name, Hours; AssignedTo: Scientist, Project | What are the names of projects that require more than 300 hours, and how many scientists are assigned to each?", "sql": "SELECT count(*) ,  T1.name FROM projects AS T1 JOIN assignedto AS T2 ON T1.code  =  T2.project WHERE T1.hours  >  300 GROUP BY T1.name", "example": {"db_id": "scientist_1", "query": "SELECT count(*) ,  T1.name FROM projects AS T1 JOIN assignedto AS T2 ON T1.code  =  T2.project WHERE T1.hours  >  300 GROUP BY T1.name", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "T1.name", "FROM", "projects", "AS", "T1", "JOIN", "assignedto", "AS", "T2", "ON", "T1.code", "=", "T2.project", "WHERE", "T1.hours", ">", "300", "GROUP", "BY", "T1.name"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "t1", ".", "name", "from", "projects", "as", "t1", "join", "assignedto", "as", "t2", "on", "t1", ".", "code", "=", "t2", ".", "project", "where", "t1", ".", "hours", ">", "value", "group", "by", "t1", ".", "name"], "question": "What are the names of projects that require more than 300 hours, and how many scientists are assigned to each?", "question_toks": ["What", "are", "the", "names", "of", "projects", "that", "require", "more", "than", "300", "hours", ",", "and", "how", "many", "scientists", "are", "assigned", "to", "each", "?"], "guid": 4659}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | which year had the most NIPS papers ?", "sql": "SELECT DISTINCT COUNT ( t1.paperid )  ,  t1.year FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"NIPS\" GROUP BY t1.year ORDER BY COUNT ( t1.paperid ) DESC;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( t1.paperid )  ,  t1.year FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"NIPS\" GROUP BY t1.year ORDER BY COUNT ( t1.paperid ) DESC;", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "t1.paperid", ")", ",", "t1.year", "FROM", "venue", "AS", "t2", "JOIN", "paper", "AS", "t1", "ON", "t2.venueid", "=", "t1.venueid", "WHERE", "t2.venuename", "=", "``", "NIPS", "''", "GROUP", "BY", "t1.year", "ORDER", "BY", "COUNT", "(", "t1.paperid", ")", "DESC", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "t1", ".", "paperid", ")", ",", "t1", ".", "year", "from", "venue", "as", "t2", "join", "paper", "as", "t1", "on", "t2", ".", "venueid", "=", "t1", ".", "venueid", "where", "t2", ".", "venuename", "=", "value", "group", "by", "t1", ".", "year", "order", "by", "count", "(", "t1", ".", "paperid", ")", "desc"], "question": "which year had the most NIPS papers ?", "question_toks": ["which", "year", "had", "the", "most", "NIPS", "papers", "?"], "guid": 4660}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the paper with the most citations .", "sql": "SELECT title FROM publication ORDER BY citation_num DESC LIMIT 1;", "example": {"db_id": "academic", "query": "SELECT title FROM publication ORDER BY citation_num DESC LIMIT 1;", "query_toks": ["SELECT", "title", "FROM", "publication", "ORDER", "BY", "citation_num", "DESC", "LIMIT", "1", ";"], "query_toks_no_value": ["select", "title", "from", "publication", "order", "by", "citation_num", "desc", "limit", "value"], "question": "return me the paper with the most citations .", "question_toks": ["return", "me", "the", "paper", "with", "the", "most", "citations", "."], "guid": 4661}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | papers typically cited by parsing papers", "sql": "SELECT DISTINCT t4.citedpaperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citingpaperid WHERE t1.keyphrasename  =  \"parsing\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t4.citedpaperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citingpaperid WHERE t1.keyphrasename  =  \"parsing\";", "query_toks": ["SELECT", "DISTINCT", "t4.citedpaperid", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "JOIN", "cite", "AS", "t4", "ON", "t3.paperid", "=", "t4.citingpaperid", "WHERE", "t1.keyphrasename", "=", "``", "parsing", "''", ";"], "query_toks_no_value": ["select", "distinct", "t4", ".", "citedpaperid", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "join", "cite", "as", "t4", "on", "t3", ".", "paperid", "=", "t4", ".", "citingpaperid", "where", "t1", ".", "keyphrasename", "=", "value"], "question": "papers typically cited by parsing papers", "question_toks": ["papers", "typically", "cited", "by", "parsing", "papers"], "guid": 4662}}
{"text": "Document_Types: document_type_code, document_description; Documents: document_id, document_type_code, grant_id, sent_date, response_received_date, other_details; Grants: grant_id, organisation_id, grant_amount, grant_start_date, grant_end_date, other_details; Organisation_Types: organisation_type, organisation_type_description; Organisations: organisation_id, organisation_type, organisation_details; Project_Outcomes: project_id, outcome_code, outcome_details; Project_Staff: staff_id, project_id, role_code, date_from, date_to, other_details; Projects: project_id, organisation_id, project_details; Research_Outcomes: outcome_code, outcome_description; Research_Staff: staff_id, employer_organisation_id, staff_details | What are the details and id of the project with the most outcomes?", "sql": "SELECT T1.project_details ,  T1.project_id FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "tracking_grants_for_research", "query": "SELECT T1.project_details ,  T1.project_id FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.project_details", ",", "T1.project_id", "FROM", "Projects", "AS", "T1", "JOIN", "Project_outcomes", "AS", "T2", "ON", "T1.project_id", "=", "T2.project_id", "GROUP", "BY", "T1.project_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "project_details", ",", "t1", ".", "project_id", "from", "projects", "as", "t1", "join", "project_outcomes", "as", "t2", "on", "t1", ".", "project_id", "=", "t2", ".", "project_id", "group", "by", "t1", ".", "project_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What are the details and id of the project with the most outcomes?", "question_toks": ["What", "are", "the", "details", "and", "id", "of", "the", "project", "with", "the", "most", "outcomes", "?"], "guid": 4663}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | Keyphrases used by Christof Dallermassl in 2000", "sql": "SELECT DISTINCT t2.keyphraseid FROM paper AS t3 JOIN paperkeyphrase AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christof Dallermassl\" AND t3.year  =  2000;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t2.keyphraseid FROM paper AS t3 JOIN paperkeyphrase AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christof Dallermassl\" AND t3.year  =  2000;", "query_toks": ["SELECT", "DISTINCT", "t2.keyphraseid", "FROM", "paper", "AS", "t3", "JOIN", "paperkeyphrase", "AS", "t2", "ON", "t3.paperid", "=", "t2.paperid", "JOIN", "writes", "AS", "t4", "ON", "t4.paperid", "=", "t3.paperid", "JOIN", "author", "AS", "t1", "ON", "t4.authorid", "=", "t1.authorid", "WHERE", "t1.authorname", "=", "``", "Christof", "Dallermassl", "''", "AND", "t3.year", "=", "2000", ";"], "query_toks_no_value": ["select", "distinct", "t2", ".", "keyphraseid", "from", "paper", "as", "t3", "join", "paperkeyphrase", "as", "t2", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "join", "writes", "as", "t4", "on", "t4", ".", "paperid", "=", "t3", ".", "paperid", "join", "author", "as", "t1", "on", "t4", ".", "authorid", "=", "t1", ".", "authorid", "where", "t1", ".", "authorname", "=", "value", "and", "t3", ".", "year", "=", "value"], "question": "Keyphrases used by Christof Dallermassl in 2000", "question_toks": ["Keyphrases", "used", "by", "Christof", "Dallermassl", "in", "2000"], "guid": 4664}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the conference, which has the most number of papers containing keyword \" Relational Database \" .", "sql": "SELECT t2.name FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t4.pid JOIN conference AS t2 ON t3.cid  =  t2.cid WHERE t1.keyword  =  \"Relational Database\" GROUP BY t2.name ORDER BY COUNT ( DISTINCT t3.title ) DESC LIMIT 1;", "example": {"db_id": "academic", "query": "SELECT t2.name FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t4.pid JOIN conference AS t2 ON t3.cid  =  t2.cid WHERE t1.keyword  =  \"Relational Database\" GROUP BY t2.name ORDER BY COUNT ( DISTINCT t3.title ) DESC LIMIT 1;", "query_toks": ["SELECT", "t2.name", "FROM", "publication_keyword", "AS", "t4", "JOIN", "keyword", "AS", "t1", "ON", "t4.kid", "=", "t1.kid", "JOIN", "publication", "AS", "t3", "ON", "t3.pid", "=", "t4.pid", "JOIN", "conference", "AS", "t2", "ON", "t3.cid", "=", "t2.cid", "WHERE", "t1.keyword", "=", "``", "Relational", "Database", "''", "GROUP", "BY", "t2.name", "ORDER", "BY", "COUNT", "(", "DISTINCT", "t3.title", ")", "DESC", "LIMIT", "1", ";"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "publication_keyword", "as", "t4", "join", "keyword", "as", "t1", "on", "t4", ".", "kid", "=", "t1", ".", "kid", "join", "publication", "as", "t3", "on", "t3", ".", "pid", "=", "t4", ".", "pid", "join", "conference", "as", "t2", "on", "t3", ".", "cid", "=", "t2", ".", "cid", "where", "t1", ".", "keyword", "=", "value", "group", "by", "t2", ".", "name", "order", "by", "count", "(", "distinct", "t3", ".", "title", ")", "desc", "limit", "value"], "question": "return me the conference, which has the most number of papers containing keyword \" Relational Database \" .", "question_toks": ["return", "me", "the", "conference", ",", "which", "has", "the", "most", "number", "of", "papers", "containing", "keyword", "``", "Relational", "Database", "``", "."], "guid": 4665}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | which journal did Donald E Knuth publish his last paper ?", "sql": "SELECT DISTINCT t3.journalid  ,  t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Donald E Knuth\" GROUP BY t3.journalid  ,  t3.year ORDER BY t3.year DESC;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.journalid  ,  t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Donald E Knuth\" GROUP BY t3.journalid  ,  t3.year ORDER BY t3.year DESC;", "query_toks": ["SELECT", "DISTINCT", "t3.journalid", ",", "t3.year", "FROM", "writes", "AS", "t2", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "JOIN", "paper", "AS", "t3", "ON", "t2.paperid", "=", "t3.paperid", "WHERE", "t1.authorname", "=", "``", "Donald", "E", "Knuth", "''", "GROUP", "BY", "t3.journalid", ",", "t3.year", "ORDER", "BY", "t3.year", "DESC", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "journalid", ",", "t3", ".", "year", "from", "writes", "as", "t2", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "join", "paper", "as", "t3", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "where", "t1", ".", "authorname", "=", "value", "group", "by", "t3", ".", "journalid", ",", "t3", ".", "year", "order", "by", "t3", ".", "year", "desc"], "question": "which journal did Donald E Knuth publish his last paper ?", "question_toks": ["which", "journal", "did", "Donald", "E", "Knuth", "publish", "his", "last", "paper", "?"], "guid": 4666}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | conference papers of subhasis chaudhuri", "sql": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"subhasis chaudhuri\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"subhasis chaudhuri\";", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "writes", "AS", "t2", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "JOIN", "paper", "AS", "t3", "ON", "t2.paperid", "=", "t3.paperid", "WHERE", "t1.authorname", "=", "``", "subhasis", "chaudhuri", "''", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "writes", "as", "t2", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "join", "paper", "as", "t3", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "where", "t1", ".", "authorname", "=", "value"], "question": "conference papers of subhasis chaudhuri", "question_toks": ["conference", "papers", "of", "subhasis", "chaudhuri"], "guid": 4667}}
{"text": "Inst: instID, name, country; Authors: authID, lname, fname; Papers: paperID, title; Authorship: authID, instID, paperID, authOrder | Find the name of the organization that has published the largest number of papers.", "sql": "SELECT t1.name FROM inst AS t1 JOIN authorship AS t2 ON t1.instid  =  t2.instid JOIN papers AS t3 ON t2.paperid  =  t3.paperid GROUP BY t1.name ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "icfp_1", "query": "SELECT t1.name FROM inst AS t1 JOIN authorship AS t2 ON t1.instid  =  t2.instid JOIN papers AS t3 ON t2.paperid  =  t3.paperid GROUP BY t1.name ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "t1.name", "FROM", "inst", "AS", "t1", "JOIN", "authorship", "AS", "t2", "ON", "t1.instid", "=", "t2.instid", "JOIN", "papers", "AS", "t3", "ON", "t2.paperid", "=", "t3.paperid", "GROUP", "BY", "t1.name", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "inst", "as", "t1", "join", "authorship", "as", "t2", "on", "t1", ".", "instid", "=", "t2", ".", "instid", "join", "papers", "as", "t3", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "group", "by", "t1", ".", "name", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Find the name of the organization that has published the largest number of papers.", "question_toks": ["Find", "the", "name", "of", "the", "organization", "that", "has", "published", "the", "largest", "number", "of", "papers", "."], "guid": 4668}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | jamie callan 's publications by year", "sql": "SELECT DISTINCT t3.paperid  ,  t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"jamie callan\" ORDER BY t3.year;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid  ,  t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"jamie callan\" ORDER BY t3.year;", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", ",", "t3.year", "FROM", "writes", "AS", "t2", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "JOIN", "paper", "AS", "t3", "ON", "t2.paperid", "=", "t3.paperid", "WHERE", "t1.authorname", "=", "``", "jamie", "callan", "''", "ORDER", "BY", "t3.year", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", ",", "t3", ".", "year", "from", "writes", "as", "t2", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "join", "paper", "as", "t3", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "where", "t1", ".", "authorname", "=", "value", "order", "by", "t3", ".", "year"], "question": "jamie callan 's publications by year", "question_toks": ["jamie", "callan", "'s", "publications", "by", "year"], "guid": 4669}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the papers by \" H. V. Jagadish \" on PVLDB with more than 200 citations .", "sql": "SELECT t4.title FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\" AND t2.name  =  \"PVLDB\" AND t4.citation_num  >  200;", "example": {"db_id": "academic", "query": "SELECT t4.title FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\" AND t2.name  =  \"PVLDB\" AND t4.citation_num  >  200;", "query_toks": ["SELECT", "t4.title", "FROM", "publication", "AS", "t4", "JOIN", "journal", "AS", "t2", "ON", "t4.jid", "=", "t2.jid", "JOIN", "writes", "AS", "t3", "ON", "t3.pid", "=", "t4.pid", "JOIN", "author", "AS", "t1", "ON", "t3.aid", "=", "t1.aid", "WHERE", "t1.name", "=", "``", "H.", "V.", "Jagadish", "''", "AND", "t2.name", "=", "``", "PVLDB", "''", "AND", "t4.citation_num", ">", "200", ";"], "query_toks_no_value": ["select", "t4", ".", "title", "from", "publication", "as", "t4", "join", "journal", "as", "t2", "on", "t4", ".", "jid", "=", "t2", ".", "jid", "join", "writes", "as", "t3", "on", "t3", ".", "pid", "=", "t4", ".", "pid", "join", "author", "as", "t1", "on", "t3", ".", "aid", "=", "t1", ".", "aid", "where", "t1", ".", "name", "=", "value", "and", "t2", ".", "name", "=", "value", "and", "t4", ".", "citation_num", ">", "value"], "question": "return me the papers by \" H. V. Jagadish \" on PVLDB with more than 200 citations .", "question_toks": ["return", "me", "the", "papers", "by", "``", "H.", "V.", "Jagadish", "``", "on", "PVLDB", "with", "more", "than", "200", "citations", "."], "guid": 4670}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | When did Peter Mertens and Dina Barbian collaborate ?", "sql": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "writes", "AS", "t3", "JOIN", "author", "AS", "t2", "ON", "t3.authorid", "=", "t2.authorid", "JOIN", "writes", "AS", "t4", "ON", "t4.paperid", "=", "t3.paperid", "JOIN", "author", "AS", "t1", "ON", "t4.authorid", "=", "t1.authorid", "WHERE", "t2.authorname", "=", "``", "Peter", "Mertens", "''", "AND", "t1.authorname", "=", "``", "Dina", "Barbian", "''", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "writes", "as", "t3", "join", "author", "as", "t2", "on", "t3", ".", "authorid", "=", "t2", ".", "authorid", "join", "writes", "as", "t4", "on", "t4", ".", "paperid", "=", "t3", ".", "paperid", "join", "author", "as", "t1", "on", "t4", ".", "authorid", "=", "t1", ".", "authorid", "where", "t2", ".", "authorname", "=", "value", "and", "t1", ".", "authorname", "=", "value"], "question": "When did Peter Mertens and Dina Barbian collaborate ?", "question_toks": ["When", "did", "Peter", "Mertens", "and", "Dina", "Barbian", "collaborate", "?"], "guid": 4671}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | What is the paper about parsing of the most citation ?", "sql": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"parsing\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"parsing\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;", "query_toks": ["SELECT", "DISTINCT", "t4.citedpaperid", ",", "COUNT", "(", "t4.citedpaperid", ")", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "JOIN", "cite", "AS", "t4", "ON", "t3.paperid", "=", "t4.citedpaperid", "WHERE", "t1.keyphrasename", "=", "``", "parsing", "''", "GROUP", "BY", "t4.citedpaperid", "ORDER", "BY", "COUNT", "(", "t4.citedpaperid", ")", "DESC", ";"], "query_toks_no_value": ["select", "distinct", "t4", ".", "citedpaperid", ",", "count", "(", "t4", ".", "citedpaperid", ")", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "join", "cite", "as", "t4", "on", "t3", ".", "paperid", "=", "t4", ".", "citedpaperid", "where", "t1", ".", "keyphrasename", "=", "value", "group", "by", "t4", ".", "citedpaperid", "order", "by", "count", "(", "t4", ".", "citedpaperid", ")", "desc"], "question": "What is the paper about parsing of the most citation ?", "question_toks": ["What", "is", "the", "paper", "about", "parsing", "of", "the", "most", "citation", "?"], "guid": 4672}}
{"text": "Document_Types: document_type_code, document_description; Documents: document_id, document_type_code, grant_id, sent_date, response_received_date, other_details; Grants: grant_id, organisation_id, grant_amount, grant_start_date, grant_end_date, other_details; Organisation_Types: organisation_type, organisation_type_description; Organisations: organisation_id, organisation_type, organisation_details; Project_Outcomes: project_id, outcome_code, outcome_details; Project_Staff: staff_id, project_id, role_code, date_from, date_to, other_details; Projects: project_id, organisation_id, project_details; Research_Outcomes: outcome_code, outcome_description; Research_Staff: staff_id, employer_organisation_id, staff_details | How many patents outcomes were listed for all the projects?", "sql": "SELECT count(*) FROM Project_outcomes WHERE outcome_code  =  'Patent'", "example": {"db_id": "tracking_grants_for_research", "query": "SELECT count(*) FROM Project_outcomes WHERE outcome_code  =  'Patent'", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Project_outcomes", "WHERE", "outcome_code", "=", "'Patent", "'"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "project_outcomes", "where", "outcome_code", "=", "value"], "question": "How many patents outcomes were listed for all the projects?", "question_toks": ["How", "many", "patents", "outcomes", "were", "listed", "for", "all", "the", "projects", "?"], "guid": 4673}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the journal that has the most number of papers containing keyword \" Relational Database \" .", "sql": "SELECT t3.name FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t2 ON t2.pid  =  t4.pid JOIN journal AS t3 ON t2.jid  =  t3.jid WHERE t1.keyword  =  \"Relational Database\" GROUP BY t3.name ORDER BY COUNT ( DISTINCT t2.title ) DESC LIMIT 1;", "example": {"db_id": "academic", "query": "SELECT t3.name FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t2 ON t2.pid  =  t4.pid JOIN journal AS t3 ON t2.jid  =  t3.jid WHERE t1.keyword  =  \"Relational Database\" GROUP BY t3.name ORDER BY COUNT ( DISTINCT t2.title ) DESC LIMIT 1;", "query_toks": ["SELECT", "t3.name", "FROM", "publication_keyword", "AS", "t4", "JOIN", "keyword", "AS", "t1", "ON", "t4.kid", "=", "t1.kid", "JOIN", "publication", "AS", "t2", "ON", "t2.pid", "=", "t4.pid", "JOIN", "journal", "AS", "t3", "ON", "t2.jid", "=", "t3.jid", "WHERE", "t1.keyword", "=", "``", "Relational", "Database", "''", "GROUP", "BY", "t3.name", "ORDER", "BY", "COUNT", "(", "DISTINCT", "t2.title", ")", "DESC", "LIMIT", "1", ";"], "query_toks_no_value": ["select", "t3", ".", "name", "from", "publication_keyword", "as", "t4", "join", "keyword", "as", "t1", "on", "t4", ".", "kid", "=", "t1", ".", "kid", "join", "publication", "as", "t2", "on", "t2", ".", "pid", "=", "t4", ".", "pid", "join", "journal", "as", "t3", "on", "t2", ".", "jid", "=", "t3", ".", "jid", "where", "t1", ".", "keyword", "=", "value", "group", "by", "t3", ".", "name", "order", "by", "count", "(", "distinct", "t2", ".", "title", ")", "desc", "limit", "value"], "question": "return me the journal that has the most number of papers containing keyword \" Relational Database \" .", "question_toks": ["return", "me", "the", "journal", "that", "has", "the", "most", "number", "of", "papers", "containing", "keyword", "``", "Relational", "Database", "``", "."], "guid": 4674}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | number of papers by year from jamie callan", "sql": "SELECT DISTINCT COUNT ( t3.paperid )  ,  t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"jamie callan\" GROUP BY t3.year;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( t3.paperid )  ,  t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"jamie callan\" GROUP BY t3.year;", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "t3.paperid", ")", ",", "t3.year", "FROM", "writes", "AS", "t2", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "JOIN", "paper", "AS", "t3", "ON", "t2.paperid", "=", "t3.paperid", "WHERE", "t1.authorname", "=", "``", "jamie", "callan", "''", "GROUP", "BY", "t3.year", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "t3", ".", "paperid", ")", ",", "t3", ".", "year", "from", "writes", "as", "t2", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "join", "paper", "as", "t3", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "where", "t1", ".", "authorname", "=", "value", "group", "by", "t3", ".", "year"], "question": "number of papers by year from jamie callan", "question_toks": ["number", "of", "papers", "by", "year", "from", "jamie", "callan"], "guid": 4675}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the number of papers by \" H. V. Jagadish \" on VLDB conference .", "sql": "SELECT COUNT ( DISTINCT t4.title ) FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\" AND t2.name  =  \"VLDB\";", "example": {"db_id": "academic", "query": "SELECT COUNT ( DISTINCT t4.title ) FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\" AND t2.name  =  \"VLDB\";", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "t4.title", ")", "FROM", "publication", "AS", "t4", "JOIN", "conference", "AS", "t2", "ON", "t4.cid", "=", "t2.cid", "JOIN", "writes", "AS", "t3", "ON", "t3.pid", "=", "t4.pid", "JOIN", "author", "AS", "t1", "ON", "t3.aid", "=", "t1.aid", "WHERE", "t1.name", "=", "``", "H.", "V.", "Jagadish", "''", "AND", "t2.name", "=", "``", "VLDB", "''", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "t4", ".", "title", ")", "from", "publication", "as", "t4", "join", "conference", "as", "t2", "on", "t4", ".", "cid", "=", "t2", ".", "cid", "join", "writes", "as", "t3", "on", "t3", ".", "pid", "=", "t4", ".", "pid", "join", "author", "as", "t1", "on", "t3", ".", "aid", "=", "t1", ".", "aid", "where", "t1", ".", "name", "=", "value", "and", "t2", ".", "name", "=", "value"], "question": "return me the number of papers by \" H. V. Jagadish \" on VLDB conference .", "question_toks": ["return", "me", "the", "number", "of", "papers", "by", "``", "H.", "V.", "Jagadish", "``", "on", "VLDB", "conference", "."], "guid": 4676}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | datasets for semantic parsing", "sql": "SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  \"semantic parsing\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  \"semantic parsing\";", "query_toks": ["SELECT", "DISTINCT", "t2.datasetid", "FROM", "paperdataset", "AS", "t3", "JOIN", "dataset", "AS", "t2", "ON", "t3.datasetid", "=", "t2.datasetid", "JOIN", "paperkeyphrase", "AS", "t1", "ON", "t1.paperid", "=", "t3.paperid", "JOIN", "keyphrase", "AS", "t4", "ON", "t1.keyphraseid", "=", "t4.keyphraseid", "WHERE", "t4.keyphrasename", "=", "``", "semantic", "parsing", "''", ";"], "query_toks_no_value": ["select", "distinct", "t2", ".", "datasetid", "from", "paperdataset", "as", "t3", "join", "dataset", "as", "t2", "on", "t3", ".", "datasetid", "=", "t2", ".", "datasetid", "join", "paperkeyphrase", "as", "t1", "on", "t1", ".", "paperid", "=", "t3", ".", "paperid", "join", "keyphrase", "as", "t4", "on", "t1", ".", "keyphraseid", "=", "t4", ".", "keyphraseid", "where", "t4", ".", "keyphrasename", "=", "value"], "question": "datasets for semantic parsing", "question_toks": ["datasets", "for", "semantic", "parsing"], "guid": 4677}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | How many papers are about deep learning ?", "sql": "SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\";", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "DISTINCT", "t3.paperid", ")", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "WHERE", "t1.keyphrasename", "=", "``", "deep", "learning", "''", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "distinct", "t3", ".", "paperid", ")", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "where", "t1", ".", "keyphrasename", "=", "value"], "question": "How many papers are about deep learning ?", "question_toks": ["How", "many", "papers", "are", "about", "deep", "learning", "?"], "guid": 4678}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | Papers about chi", "sql": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"chi\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"chi\";", "query_toks": ["SELECT", "DISTINCT", "t1.paperid", "FROM", "venue", "AS", "t2", "JOIN", "paper", "AS", "t1", "ON", "t2.venueid", "=", "t1.venueid", "WHERE", "t2.venuename", "=", "``", "chi", "''", ";"], "query_toks_no_value": ["select", "distinct", "t1", ".", "paperid", "from", "venue", "as", "t2", "join", "paper", "as", "t1", "on", "t2", ".", "venueid", "=", "t1", ".", "venueid", "where", "t2", ".", "venuename", "=", "value"], "question": "Papers about chi", "question_toks": ["Papers", "about", "chi"], "guid": 4679}}
{"text": "Inst: instID, name, country; Authors: authID, lname, fname; Papers: paperID, title; Authorship: authID, instID, paperID, authOrder | Find the number of papers published by authors from the institution \"Tokohu University\".", "sql": "SELECT count(DISTINCT t1.title) FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Tokohu University\"", "example": {"db_id": "icfp_1", "query": "SELECT count(DISTINCT t1.title) FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Tokohu University\"", "query_toks": ["SELECT", "count", "(", "DISTINCT", "t1.title", ")", "FROM", "papers", "AS", "t1", "JOIN", "authorship", "AS", "t2", "ON", "t1.paperid", "=", "t2.paperid", "JOIN", "inst", "AS", "t3", "ON", "t2.instid", "=", "t3.instid", "WHERE", "t3.name", "=", "``", "Tokohu", "University", "''"], "query_toks_no_value": ["select", "count", "(", "distinct", "t1", ".", "title", ")", "from", "papers", "as", "t1", "join", "authorship", "as", "t2", "on", "t1", ".", "paperid", "=", "t2", ".", "paperid", "join", "inst", "as", "t3", "on", "t2", ".", "instid", "=", "t3", ".", "instid", "where", "t3", ".", "name", "=", "value"], "question": "Find the number of papers published by authors from the institution \"Tokohu University\".", "question_toks": ["Find", "the", "number", "of", "papers", "published", "by", "authors", "from", "the", "institution", "``", "Tokohu", "University", "''", "."], "guid": 4680}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | Have Peter Mertens and Dina Barbian written a paper together ?", "sql": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "writes", "AS", "t3", "JOIN", "author", "AS", "t2", "ON", "t3.authorid", "=", "t2.authorid", "JOIN", "writes", "AS", "t4", "ON", "t4.paperid", "=", "t3.paperid", "JOIN", "author", "AS", "t1", "ON", "t4.authorid", "=", "t1.authorid", "WHERE", "t2.authorname", "=", "``", "Peter", "Mertens", "''", "AND", "t1.authorname", "=", "``", "Dina", "Barbian", "''", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "writes", "as", "t3", "join", "author", "as", "t2", "on", "t3", ".", "authorid", "=", "t2", ".", "authorid", "join", "writes", "as", "t4", "on", "t4", ".", "paperid", "=", "t3", ".", "paperid", "join", "author", "as", "t1", "on", "t4", ".", "authorid", "=", "t1", ".", "authorid", "where", "t2", ".", "authorname", "=", "value", "and", "t1", ".", "authorname", "=", "value"], "question": "Have Peter Mertens and Dina Barbian written a paper together ?", "question_toks": ["Have", "Peter", "Mertens", "and", "Dina", "Barbian", "written", "a", "paper", "together", "?"], "guid": 4681}}
{"text": "book_club: book_club_id, Year, Author_or_Editor, Book_Title, Publisher, Category, Result; movie: movie_id, Title, Year, Director, Budget_million, Gross_worldwide; culture_company: Company_name, Type, Incorporated_in, Group_Equity_Shareholding, book_club_id, movie_id | Show the years, book titles, and publishers for all books, in descending order by year.", "sql": "SELECT YEAR ,  book_title ,  publisher FROM book_club ORDER BY YEAR DESC", "example": {"db_id": "culture_company", "query": "SELECT YEAR ,  book_title ,  publisher FROM book_club ORDER BY YEAR DESC", "query_toks": ["SELECT", "YEAR", ",", "book_title", ",", "publisher", "FROM", "book_club", "ORDER", "BY", "YEAR", "DESC"], "query_toks_no_value": ["select", "year", ",", "book_title", ",", "publisher", "from", "book_club", "order", "by", "year", "desc"], "question": "Show the years, book titles, and publishers for all books, in descending order by year.", "question_toks": ["Show", "the", "years", ",", "book", "titles", ",", "and", "publishers", "for", "all", "books", ",", "in", "descending", "order", "by", "year", "."], "guid": 4682}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | show me papers by sharon goldwater .", "sql": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";", "query_toks": ["SELECT", "DISTINCT", "t2.paperid", "FROM", "writes", "AS", "t2", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "WHERE", "t1.authorname", "=", "``", "sharon", "goldwater", "''", ";"], "query_toks_no_value": ["select", "distinct", "t2", ".", "paperid", "from", "writes", "as", "t2", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "where", "t1", ".", "authorname", "=", "value"], "question": "show me papers by sharon goldwater .", "question_toks": ["show", "me", "papers", "by", "sharon", "goldwater", "."], "guid": 4683}}
{"text": "event: Event_ID, Date, Venue, Name, Event_Attendance; journalist: journalist_ID, Name, Nationality, Age, Years_working; news_report: journalist_ID, Event_ID, Work_Type | What are the nationalities and ages of journalists?", "sql": "SELECT Nationality ,  Age FROM journalist", "example": {"db_id": "news_report", "query": "SELECT Nationality ,  Age FROM journalist", "query_toks": ["SELECT", "Nationality", ",", "Age", "FROM", "journalist"], "query_toks_no_value": ["select", "nationality", ",", "age", "from", "journalist"], "question": "What are the nationalities and ages of journalists?", "question_toks": ["What", "are", "the", "nationalities", "and", "ages", "of", "journalists", "?"], "guid": 4684}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the number of papers published on PVLDB before 2000 .", "sql": "SELECT COUNT ( DISTINCT t2.title ) FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\" AND t2.year  <  2000;", "example": {"db_id": "academic", "query": "SELECT COUNT ( DISTINCT t2.title ) FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\" AND t2.year  <  2000;", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "t2.title", ")", "FROM", "publication", "AS", "t2", "JOIN", "journal", "AS", "t1", "ON", "t2.jid", "=", "t1.jid", "WHERE", "t1.name", "=", "``", "PVLDB", "''", "AND", "t2.year", "<", "2000", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "t2", ".", "title", ")", "from", "publication", "as", "t2", "join", "journal", "as", "t1", "on", "t2", ".", "jid", "=", "t1", ".", "jid", "where", "t1", ".", "name", "=", "value", "and", "t2", ".", "year", "<", "value"], "question": "return me the number of papers published on PVLDB before 2000 .", "question_toks": ["return", "me", "the", "number", "of", "papers", "published", "on", "PVLDB", "before", "2000", "."], "guid": 4685}}
{"text": "book_club: book_club_id, Year, Author_or_Editor, Book_Title, Publisher, Category, Result; movie: movie_id, Title, Year, Director, Budget_million, Gross_worldwide; culture_company: Company_name, Type, Incorporated_in, Group_Equity_Shareholding, book_club_id, movie_id | What are the titles, years, and directors of all movies, ordered by budget in millions?", "sql": "SELECT title ,  YEAR ,  director FROM movie ORDER BY budget_million", "example": {"db_id": "culture_company", "query": "SELECT title ,  YEAR ,  director FROM movie ORDER BY budget_million", "query_toks": ["SELECT", "title", ",", "YEAR", ",", "director", "FROM", "movie", "ORDER", "BY", "budget_million"], "query_toks_no_value": ["select", "title", ",", "year", ",", "director", "from", "movie", "order", "by", "budget_million"], "question": "What are the titles, years, and directors of all movies, ordered by budget in millions?", "question_toks": ["What", "are", "the", "titles", ",", "years", ",", "and", "directors", "of", "all", "movies", ",", "ordered", "by", "budget", "in", "millions", "?"], "guid": 4686}}
{"text": "journal: Journal_ID, Date, Theme, Sales; editor: Editor_ID, Name, Age; journal_committee: Editor_ID, Journal_ID, Work_Type | Show the id, name of each editor and the number of journal committees they are on.", "sql": "SELECT T1.editor_id ,  T1.Name ,  COUNT(*) FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID  =  T2.Editor_ID GROUP BY T1.editor_id", "example": {"db_id": "journal_committee", "query": "SELECT T1.editor_id ,  T1.Name ,  COUNT(*) FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID  =  T2.Editor_ID GROUP BY T1.editor_id", "query_toks": ["SELECT", "T1.editor_id", ",", "T1.Name", ",", "COUNT", "(", "*", ")", "FROM", "editor", "AS", "T1", "JOIN", "journal_committee", "AS", "T2", "ON", "T1.Editor_ID", "=", "T2.Editor_ID", "GROUP", "BY", "T1.editor_id"], "query_toks_no_value": ["select", "t1", ".", "editor_id", ",", "t1", ".", "name", ",", "count", "(", "*", ")", "from", "editor", "as", "t1", "join", "journal_committee", "as", "t2", "on", "t1", ".", "editor_id", "=", "t2", ".", "editor_id", "group", "by", "t1", ".", "editor_id"], "question": "Show the id, name of each editor and the number of journal committees they are on.", "question_toks": ["Show", "the", "id", ",", "name", "of", "each", "editor", "and", "the", "number", "of", "journal", "committees", "they", "are", "on", "."], "guid": 4687}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | who has the most papers in semantic parsing after 2005 ?", "sql": "SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  \"semantic parsing\" AND t4.year  >  2005 GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  \"semantic parsing\" AND t4.year  >  2005 GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "t4.paperid", ")", ",", "t3.authorid", "FROM", "paperkeyphrase", "AS", "t1", "JOIN", "keyphrase", "AS", "t2", "ON", "t1.keyphraseid", "=", "t2.keyphraseid", "JOIN", "paper", "AS", "t4", "ON", "t4.paperid", "=", "t1.paperid", "JOIN", "writes", "AS", "t3", "ON", "t3.paperid", "=", "t4.paperid", "WHERE", "t2.keyphrasename", "=", "``", "semantic", "parsing", "''", "AND", "t4.year", ">", "2005", "GROUP", "BY", "t3.authorid", "ORDER", "BY", "COUNT", "(", "t4.paperid", ")", "DESC", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "t4", ".", "paperid", ")", ",", "t3", ".", "authorid", "from", "paperkeyphrase", "as", "t1", "join", "keyphrase", "as", "t2", "on", "t1", ".", "keyphraseid", "=", "t2", ".", "keyphraseid", "join", "paper", "as", "t4", "on", "t4", ".", "paperid", "=", "t1", ".", "paperid", "join", "writes", "as", "t3", "on", "t3", ".", "paperid", "=", "t4", ".", "paperid", "where", "t2", ".", "keyphrasename", "=", "value", "and", "t4", ".", "year", ">", "value", "group", "by", "t3", ".", "authorid", "order", "by", "count", "(", "t4", ".", "paperid", ")", "desc"], "question": "who has the most papers in semantic parsing after 2005 ?", "question_toks": ["who", "has", "the", "most", "papers", "in", "semantic", "parsing", "after", "2005", "?"], "guid": 4688}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | are there any monte carlo simulation papers since 2011 ?", "sql": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"monte carlo simulation\" AND t3.year  >  2011;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"monte carlo simulation\" AND t3.year  >  2011;", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "WHERE", "t1.keyphrasename", "=", "``", "monte", "carlo", "simulation", "''", "AND", "t3.year", ">", "2011", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "where", "t1", ".", "keyphrasename", "=", "value", "and", "t3", ".", "year", ">", "value"], "question": "are there any monte carlo simulation papers since 2011 ?", "question_toks": ["are", "there", "any", "monte", "carlo", "simulation", "papers", "since", "2011", "?"], "guid": 4689}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | Liwen Xiong 's papers in 2015 ?", "sql": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Liwen Xiong\" AND t3.year  =  2015;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Liwen Xiong\" AND t3.year  =  2015;", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "writes", "AS", "t2", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "JOIN", "paper", "AS", "t3", "ON", "t2.paperid", "=", "t3.paperid", "WHERE", "t1.authorname", "=", "``", "Liwen", "Xiong", "''", "AND", "t3.year", "=", "2015", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "writes", "as", "t2", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "join", "paper", "as", "t3", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "where", "t1", ".", "authorname", "=", "value", "and", "t3", ".", "year", "=", "value"], "question": "Liwen Xiong 's papers in 2015 ?", "question_toks": ["Liwen", "Xiong", "'s", "papers", "in", "2015", "?"], "guid": 4690}}
{"text": "Inst: instID, name, country; Authors: authID, lname, fname; Papers: paperID, title; Authorship: authID, instID, paperID, authOrder | Which papers did the author \"Olin Shivers\" write? Give me the paper titles.", "sql": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t1.fname  =  \"Olin\" AND t1.lname  =  \"Shivers\"", "example": {"db_id": "icfp_1", "query": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t1.fname  =  \"Olin\" AND t1.lname  =  \"Shivers\"", "query_toks": ["SELECT", "t3.title", "FROM", "authors", "AS", "t1", "JOIN", "authorship", "AS", "t2", "ON", "t1.authid", "=", "t2.authid", "JOIN", "papers", "AS", "t3", "ON", "t2.paperid", "=", "t3.paperid", "WHERE", "t1.fname", "=", "``", "Olin", "''", "AND", "t1.lname", "=", "``", "Shivers", "''"], "query_toks_no_value": ["select", "t3", ".", "title", "from", "authors", "as", "t1", "join", "authorship", "as", "t2", "on", "t1", ".", "authid", "=", "t2", ".", "authid", "join", "papers", "as", "t3", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "where", "t1", ".", "fname", "=", "value", "and", "t1", ".", "lname", "=", "value"], "question": "Which papers did the author \"Olin Shivers\" write? Give me the paper titles.", "question_toks": ["Which", "papers", "did", "the", "author", "``", "Olin", "Shivers", "''", "write", "?", "Give", "me", "the", "paper", "titles", "."], "guid": 4691}}
{"text": "Inst: instID, name, country; Authors: authID, lname, fname; Papers: paperID, title; Authorship: authID, instID, paperID, authOrder | Find the first names and last names of the authors whose institution affiliation is \"University of Oxford\".", "sql": "SELECT DISTINCT t1.fname ,  t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"University of Oxford\"", "example": {"db_id": "icfp_1", "query": "SELECT DISTINCT t1.fname ,  t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"University of Oxford\"", "query_toks": ["SELECT", "DISTINCT", "t1.fname", ",", "t1.lname", "FROM", "authors", "AS", "t1", "JOIN", "authorship", "AS", "t2", "ON", "t1.authid", "=", "t2.authid", "JOIN", "inst", "AS", "t3", "ON", "t2.instid", "=", "t3.instid", "WHERE", "t3.name", "=", "``", "University", "of", "Oxford", "''"], "query_toks_no_value": ["select", "distinct", "t1", ".", "fname", ",", "t1", ".", "lname", "from", "authors", "as", "t1", "join", "authorship", "as", "t2", "on", "t1", ".", "authid", "=", "t2", ".", "authid", "join", "inst", "as", "t3", "on", "t2", ".", "instid", "=", "t3", ".", "instid", "where", "t3", ".", "name", "=", "value"], "question": "Find the first names and last names of the authors whose institution affiliation is \"University of Oxford\".", "question_toks": ["Find", "the", "first", "names", "and", "last", "names", "of", "the", "authors", "whose", "institution", "affiliation", "is", "``", "University", "of", "Oxford", "''", "."], "guid": 4692}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | How many papers were written on convolutional neural networks in the past year ?", "sql": "SELECT DISTINCT COUNT ( t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"convolutional neural networks\" AND t3.year  =  2016;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"convolutional neural networks\" AND t3.year  =  2016;", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "t3.paperid", ")", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "WHERE", "t1.keyphrasename", "=", "``", "convolutional", "neural", "networks", "''", "AND", "t3.year", "=", "2016", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "t3", ".", "paperid", ")", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "where", "t1", ".", "keyphrasename", "=", "value", "and", "t3", ".", "year", "=", "value"], "question": "How many papers were written on convolutional neural networks in the past year ?", "question_toks": ["How", "many", "papers", "were", "written", "on", "convolutional", "neural", "networks", "in", "the", "past", "year", "?"], "guid": 4693}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | Papers by Peter Mertens and Dina Barbian", "sql": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "writes", "AS", "t3", "JOIN", "author", "AS", "t2", "ON", "t3.authorid", "=", "t2.authorid", "JOIN", "writes", "AS", "t4", "ON", "t4.paperid", "=", "t3.paperid", "JOIN", "author", "AS", "t1", "ON", "t4.authorid", "=", "t1.authorid", "WHERE", "t2.authorname", "=", "``", "Peter", "Mertens", "''", "AND", "t1.authorname", "=", "``", "Dina", "Barbian", "''", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "writes", "as", "t3", "join", "author", "as", "t2", "on", "t3", ".", "authorid", "=", "t2", ".", "authorid", "join", "writes", "as", "t4", "on", "t4", ".", "paperid", "=", "t3", ".", "paperid", "join", "author", "as", "t1", "on", "t4", ".", "authorid", "=", "t1", ".", "authorid", "where", "t2", ".", "authorname", "=", "value", "and", "t1", ".", "authorname", "=", "value"], "question": "Papers by Peter Mertens and Dina Barbian", "question_toks": ["Papers", "by", "Peter", "Mertens", "and", "Dina", "Barbian"], "guid": 4694}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | which venue publishes the most papers about deep learning", "sql": "SELECT DISTINCT COUNT ( t3.paperid )  ,  t4.venueid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"deep learning\" GROUP BY t4.venueid ORDER BY COUNT ( t3.paperid ) DESC;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( t3.paperid )  ,  t4.venueid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"deep learning\" GROUP BY t4.venueid ORDER BY COUNT ( t3.paperid ) DESC;", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "t3.paperid", ")", ",", "t4.venueid", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "JOIN", "venue", "AS", "t4", "ON", "t4.venueid", "=", "t3.venueid", "WHERE", "t1.keyphrasename", "=", "``", "deep", "learning", "''", "GROUP", "BY", "t4.venueid", "ORDER", "BY", "COUNT", "(", "t3.paperid", ")", "DESC", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "t3", ".", "paperid", ")", ",", "t4", ".", "venueid", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "join", "venue", "as", "t4", "on", "t4", ".", "venueid", "=", "t3", ".", "venueid", "where", "t1", ".", "keyphrasename", "=", "value", "group", "by", "t4", ".", "venueid", "order", "by", "count", "(", "t3", ".", "paperid", ")", "desc"], "question": "which venue publishes the most papers about deep learning", "question_toks": ["which", "venue", "publishes", "the", "most", "papers", "about", "deep", "learning"], "guid": 4695}}
{"text": "Inst: instID, name, country; Authors: authID, lname, fname; Papers: paperID, title; Authorship: authID, instID, paperID, authOrder | Find the first names of all the authors who have written a paper with title containing the word \"Functional\".", "sql": "SELECT t1.fname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title LIKE \"%Functional%\"", "example": {"db_id": "icfp_1", "query": "SELECT t1.fname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title LIKE \"%Functional%\"", "query_toks": ["SELECT", "t1.fname", "FROM", "authors", "AS", "t1", "JOIN", "authorship", "AS", "t2", "ON", "t1.authid", "=", "t2.authid", "JOIN", "papers", "AS", "t3", "ON", "t2.paperid", "=", "t3.paperid", "WHERE", "t3.title", "LIKE", "``", "%", "Functional", "%", "''"], "query_toks_no_value": ["select", "t1", ".", "fname", "from", "authors", "as", "t1", "join", "authorship", "as", "t2", "on", "t1", ".", "authid", "=", "t2", ".", "authid", "join", "papers", "as", "t3", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "where", "t3", ".", "title", "like", "value"], "question": "Find the first names of all the authors who have written a paper with title containing the word \"Functional\".", "question_toks": ["Find", "the", "first", "names", "of", "all", "the", "authors", "who", "have", "written", "a", "paper", "with", "title", "containing", "the", "word", "``", "Functional", "''", "."], "guid": 4696}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | Which papers cite Daniel Jurafsky ?", "sql": "SELECT DISTINCT t3.paperid FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citingpaperid JOIN writes AS t2 ON t2.paperid  =  t4.citedpaperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Daniel Jurafsky\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citingpaperid JOIN writes AS t2 ON t2.paperid  =  t4.citedpaperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Daniel Jurafsky\";", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "paper", "AS", "t3", "JOIN", "cite", "AS", "t4", "ON", "t3.paperid", "=", "t4.citingpaperid", "JOIN", "writes", "AS", "t2", "ON", "t2.paperid", "=", "t4.citedpaperid", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "WHERE", "t1.authorname", "=", "``", "Daniel", "Jurafsky", "''", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "paper", "as", "t3", "join", "cite", "as", "t4", "on", "t3", ".", "paperid", "=", "t4", ".", "citingpaperid", "join", "writes", "as", "t2", "on", "t2", ".", "paperid", "=", "t4", ".", "citedpaperid", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "where", "t1", ".", "authorname", "=", "value"], "question": "Which papers cite Daniel Jurafsky ?", "question_toks": ["Which", "papers", "cite", "Daniel", "Jurafsky", "?"], "guid": 4697}}
{"text": "Scientists: SSN, Name; Projects: Code, Name, Hours; AssignedTo: Scientist, Project | Count the number of different scientists assigned to any project.", "sql": "SELECT count(DISTINCT scientist) FROM assignedto", "example": {"db_id": "scientist_1", "query": "SELECT count(DISTINCT scientist) FROM assignedto", "query_toks": ["SELECT", "count", "(", "DISTINCT", "scientist", ")", "FROM", "assignedto"], "query_toks_no_value": ["select", "count", "(", "distinct", "scientist", ")", "from", "assignedto"], "question": "Count the number of different scientists assigned to any project.", "question_toks": ["Count", "the", "number", "of", "different", "scientists", "assigned", "to", "any", "project", "."], "guid": 4698}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | who are the authors at NIPS ?", "sql": "SELECT DISTINCT t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  \"NIPS\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  \"NIPS\";", "query_toks": ["SELECT", "DISTINCT", "t1.authorid", "FROM", "venue", "AS", "t3", "JOIN", "paper", "AS", "t2", "ON", "t3.venueid", "=", "t2.venueid", "JOIN", "writes", "AS", "t1", "ON", "t1.paperid", "=", "t2.paperid", "WHERE", "t3.venuename", "=", "``", "NIPS", "''", ";"], "query_toks_no_value": ["select", "distinct", "t1", ".", "authorid", "from", "venue", "as", "t3", "join", "paper", "as", "t2", "on", "t3", ".", "venueid", "=", "t2", ".", "venueid", "join", "writes", "as", "t1", "on", "t1", ".", "paperid", "=", "t2", ".", "paperid", "where", "t3", ".", "venuename", "=", "value"], "question": "who are the authors at NIPS ?", "question_toks": ["who", "are", "the", "authors", "at", "NIPS", "?"], "guid": 4699}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the number of researchers in Databases area in \" University of Michigan \" .", "sql": "SELECT COUNT ( DISTINCT t1.name ) FROM domain_author AS t4 JOIN author AS t1 ON t4.aid  =  t1.aid JOIN DOMAIN AS t3 ON t3.did  =  t4.did JOIN organization AS t2 ON t2.oid  =  t1.oid WHERE t3.name  =  \"Databases\" AND t2.name  =  \"University of Michigan\";", "example": {"db_id": "academic", "query": "SELECT COUNT ( DISTINCT t1.name ) FROM domain_author AS t4 JOIN author AS t1 ON t4.aid  =  t1.aid JOIN DOMAIN AS t3 ON t3.did  =  t4.did JOIN organization AS t2 ON t2.oid  =  t1.oid WHERE t3.name  =  \"Databases\" AND t2.name  =  \"University of Michigan\";", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "t1.name", ")", "FROM", "domain_author", "AS", "t4", "JOIN", "author", "AS", "t1", "ON", "t4.aid", "=", "t1.aid", "JOIN", "DOMAIN", "AS", "t3", "ON", "t3.did", "=", "t4.did", "JOIN", "organization", "AS", "t2", "ON", "t2.oid", "=", "t1.oid", "WHERE", "t3.name", "=", "``", "Databases", "''", "AND", "t2.name", "=", "``", "University", "of", "Michigan", "''", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "t1", ".", "name", ")", "from", "domain_author", "as", "t4", "join", "author", "as", "t1", "on", "t4", ".", "aid", "=", "t1", ".", "aid", "join", "domain", "as", "t3", "on", "t3", ".", "did", "=", "t4", ".", "did", "join", "organization", "as", "t2", "on", "t2", ".", "oid", "=", "t1", ".", "oid", "where", "t3", ".", "name", "=", "value", "and", "t2", ".", "name", "=", "value"], "question": "return me the number of researchers in Databases area in \" University of Michigan \" .", "question_toks": ["return", "me", "the", "number", "of", "researchers", "in", "Databases", "area", "in", "``", "University", "of", "Michigan", "``", "."], "guid": 4700}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the author who has the most number of papers containing keyword \" Relational Database \" .", "sql": "SELECT t2.name FROM publication_keyword AS t5 JOIN keyword AS t1 ON t5.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t3.pid JOIN author AS t2 ON t4.aid  =  t2.aid WHERE t1.keyword  =  \"Relational Database\" GROUP BY t2.name ORDER BY COUNT ( DISTINCT t3.title ) DESC LIMIT 1;", "example": {"db_id": "academic", "query": "SELECT t2.name FROM publication_keyword AS t5 JOIN keyword AS t1 ON t5.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t3.pid JOIN author AS t2 ON t4.aid  =  t2.aid WHERE t1.keyword  =  \"Relational Database\" GROUP BY t2.name ORDER BY COUNT ( DISTINCT t3.title ) DESC LIMIT 1;", "query_toks": ["SELECT", "t2.name", "FROM", "publication_keyword", "AS", "t5", "JOIN", "keyword", "AS", "t1", "ON", "t5.kid", "=", "t1.kid", "JOIN", "publication", "AS", "t3", "ON", "t3.pid", "=", "t5.pid", "JOIN", "writes", "AS", "t4", "ON", "t4.pid", "=", "t3.pid", "JOIN", "author", "AS", "t2", "ON", "t4.aid", "=", "t2.aid", "WHERE", "t1.keyword", "=", "``", "Relational", "Database", "''", "GROUP", "BY", "t2.name", "ORDER", "BY", "COUNT", "(", "DISTINCT", "t3.title", ")", "DESC", "LIMIT", "1", ";"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "publication_keyword", "as", "t5", "join", "keyword", "as", "t1", "on", "t5", ".", "kid", "=", "t1", ".", "kid", "join", "publication", "as", "t3", "on", "t3", ".", "pid", "=", "t5", ".", "pid", "join", "writes", "as", "t4", "on", "t4", ".", "pid", "=", "t3", ".", "pid", "join", "author", "as", "t2", "on", "t4", ".", "aid", "=", "t2", ".", "aid", "where", "t1", ".", "keyword", "=", "value", "group", "by", "t2", ".", "name", "order", "by", "count", "(", "distinct", "t3", ".", "title", ")", "desc", "limit", "value"], "question": "return me the author who has the most number of papers containing keyword \" Relational Database \" .", "question_toks": ["return", "me", "the", "author", "who", "has", "the", "most", "number", "of", "papers", "containing", "keyword", "``", "Relational", "Database", "``", "."], "guid": 4701}}
{"text": "Document_Types: document_type_code, document_description; Documents: document_id, document_type_code, grant_id, sent_date, response_received_date, other_details; Grants: grant_id, organisation_id, grant_amount, grant_start_date, grant_end_date, other_details; Organisation_Types: organisation_type, organisation_type_description; Organisations: organisation_id, organisation_type, organisation_details; Project_Outcomes: project_id, outcome_code, outcome_details; Project_Staff: staff_id, project_id, role_code, date_from, date_to, other_details; Projects: project_id, organisation_id, project_details; Research_Outcomes: outcome_code, outcome_description; Research_Staff: staff_id, employer_organisation_id, staff_details | What is the type description of the organization whose detail is listed as 'quo'?", "sql": "SELECT T1.organisation_type_description FROM organisation_Types AS T1 JOIN Organisations AS T2 ON T1.organisation_type  =  T2.organisation_type WHERE T2.organisation_details  =  'quo'", "example": {"db_id": "tracking_grants_for_research", "query": "SELECT T1.organisation_type_description FROM organisation_Types AS T1 JOIN Organisations AS T2 ON T1.organisation_type  =  T2.organisation_type WHERE T2.organisation_details  =  'quo'", "query_toks": ["SELECT", "T1.organisation_type_description", "FROM", "organisation_Types", "AS", "T1", "JOIN", "Organisations", "AS", "T2", "ON", "T1.organisation_type", "=", "T2.organisation_type", "WHERE", "T2.organisation_details", "=", "'quo", "'"], "query_toks_no_value": ["select", "t1", ".", "organisation_type_description", "from", "organisation_types", "as", "t1", "join", "organisations", "as", "t2", "on", "t1", ".", "organisation_type", "=", "t2", ".", "organisation_type", "where", "t2", ".", "organisation_details", "=", "value"], "question": "What is the type description of the organization whose detail is listed as 'quo'?", "question_toks": ["What", "is", "the", "type", "description", "of", "the", "organization", "whose", "detail", "is", "listed", "as", "'quo", "'", "?"], "guid": 4702}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | who is the most cited author at CVPR ?", "sql": "SELECT DISTINCT COUNT ( DISTINCT t4.citingpaperid )  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid JOIN cite AS t4 ON t1.paperid  =  t4.citedpaperid WHERE t3.venuename  =  \"CVPR\" GROUP BY t1.authorid ORDER BY COUNT ( DISTINCT t4.citingpaperid ) DESC;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( DISTINCT t4.citingpaperid )  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid JOIN cite AS t4 ON t1.paperid  =  t4.citedpaperid WHERE t3.venuename  =  \"CVPR\" GROUP BY t1.authorid ORDER BY COUNT ( DISTINCT t4.citingpaperid ) DESC;", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "DISTINCT", "t4.citingpaperid", ")", ",", "t1.authorid", "FROM", "venue", "AS", "t3", "JOIN", "paper", "AS", "t2", "ON", "t3.venueid", "=", "t2.venueid", "JOIN", "writes", "AS", "t1", "ON", "t1.paperid", "=", "t2.paperid", "JOIN", "cite", "AS", "t4", "ON", "t1.paperid", "=", "t4.citedpaperid", "WHERE", "t3.venuename", "=", "``", "CVPR", "''", "GROUP", "BY", "t1.authorid", "ORDER", "BY", "COUNT", "(", "DISTINCT", "t4.citingpaperid", ")", "DESC", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "distinct", "t4", ".", "citingpaperid", ")", ",", "t1", ".", "authorid", "from", "venue", "as", "t3", "join", "paper", "as", "t2", "on", "t3", ".", "venueid", "=", "t2", ".", "venueid", "join", "writes", "as", "t1", "on", "t1", ".", "paperid", "=", "t2", ".", "paperid", "join", "cite", "as", "t4", "on", "t1", ".", "paperid", "=", "t4", ".", "citedpaperid", "where", "t3", ".", "venuename", "=", "value", "group", "by", "t1", ".", "authorid", "order", "by", "count", "(", "distinct", "t4", ".", "citingpaperid", ")", "desc"], "question": "who is the most cited author at CVPR ?", "question_toks": ["who", "is", "the", "most", "cited", "author", "at", "CVPR", "?"], "guid": 4703}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | papers brian curless wrote about convolution", "sql": "SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";", "query_toks": ["SELECT", "DISTINCT", "t1.authorid", ",", "t3.paperid", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t5", "ON", "t2.keyphraseid", "=", "t5.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "JOIN", "writes", "AS", "t4", "ON", "t4.paperid", "=", "t3.paperid", "JOIN", "author", "AS", "t1", "ON", "t4.authorid", "=", "t1.authorid", "WHERE", "t1.authorname", "=", "``", "brian", "curless", "''", "AND", "t5.keyphrasename", "=", "``", "convolution", "''", ";"], "query_toks_no_value": ["select", "distinct", "t1", ".", "authorid", ",", "t3", ".", "paperid", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t5", "on", "t2", ".", "keyphraseid", "=", "t5", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "join", "writes", "as", "t4", "on", "t4", ".", "paperid", "=", "t3", ".", "paperid", "join", "author", "as", "t1", "on", "t4", ".", "authorid", "=", "t1", ".", "authorid", "where", "t1", ".", "authorname", "=", "value", "and", "t5", ".", "keyphrasename", "=", "value"], "question": "papers brian curless wrote about convolution", "question_toks": ["papers", "brian", "curless", "wrote", "about", "convolution"], "guid": 4704}}
{"text": "Inst: instID, name, country; Authors: authID, lname, fname; Papers: paperID, title; Authorship: authID, instID, paperID, authOrder | Find the number of papers published by the institution \"University of Pennsylvania\".", "sql": "SELECT count(DISTINCT t1.title) FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"University of Pennsylvania\"", "example": {"db_id": "icfp_1", "query": "SELECT count(DISTINCT t1.title) FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"University of Pennsylvania\"", "query_toks": ["SELECT", "count", "(", "DISTINCT", "t1.title", ")", "FROM", "papers", "AS", "t1", "JOIN", "authorship", "AS", "t2", "ON", "t1.paperid", "=", "t2.paperid", "JOIN", "inst", "AS", "t3", "ON", "t2.instid", "=", "t3.instid", "WHERE", "t3.name", "=", "``", "University", "of", "Pennsylvania", "''"], "query_toks_no_value": ["select", "count", "(", "distinct", "t1", ".", "title", ")", "from", "papers", "as", "t1", "join", "authorship", "as", "t2", "on", "t1", ".", "paperid", "=", "t2", ".", "paperid", "join", "inst", "as", "t3", "on", "t2", ".", "instid", "=", "t3", ".", "instid", "where", "t3", ".", "name", "=", "value"], "question": "Find the number of papers published by the institution \"University of Pennsylvania\".", "question_toks": ["Find", "the", "number", "of", "papers", "published", "by", "the", "institution", "``", "University", "of", "Pennsylvania", "''", "."], "guid": 4705}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | What is ohad shamir 's highest cited paper ?", "sql": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"ohad shamir\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"ohad shamir\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;", "query_toks": ["SELECT", "DISTINCT", "t4.citedpaperid", ",", "COUNT", "(", "t4.citedpaperid", ")", "FROM", "paper", "AS", "t3", "JOIN", "cite", "AS", "t4", "ON", "t3.paperid", "=", "t4.citedpaperid", "JOIN", "writes", "AS", "t2", "ON", "t2.paperid", "=", "t3.paperid", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "WHERE", "t1.authorname", "=", "``", "ohad", "shamir", "''", "GROUP", "BY", "t4.citedpaperid", "ORDER", "BY", "COUNT", "(", "t4.citedpaperid", ")", "DESC", ";"], "query_toks_no_value": ["select", "distinct", "t4", ".", "citedpaperid", ",", "count", "(", "t4", ".", "citedpaperid", ")", "from", "paper", "as", "t3", "join", "cite", "as", "t4", "on", "t3", ".", "paperid", "=", "t4", ".", "citedpaperid", "join", "writes", "as", "t2", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "where", "t1", ".", "authorname", "=", "value", "group", "by", "t4", ".", "citedpaperid", "order", "by", "count", "(", "t4", ".", "citedpaperid", ")", "desc"], "question": "What is ohad shamir 's highest cited paper ?", "question_toks": ["What", "is", "ohad", "shamir", "'s", "highest", "cited", "paper", "?"], "guid": 4706}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | How many papers by Ed Desmond contain the keyphrases Semantic Parsing ?", "sql": "SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperkeyphrase AS t1 JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid JOIN writes AS t3 ON t3.paperid  =  t1.paperid JOIN author AS t2 ON t3.authorid  =  t2.authorid WHERE t2.authorname  =  \"Ed Desmond\" AND t4.keyphrasename  =  \"Semantic Parsing\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperkeyphrase AS t1 JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid JOIN writes AS t3 ON t3.paperid  =  t1.paperid JOIN author AS t2 ON t3.authorid  =  t2.authorid WHERE t2.authorname  =  \"Ed Desmond\" AND t4.keyphrasename  =  \"Semantic Parsing\";", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "DISTINCT", "t3.paperid", ")", "FROM", "paperkeyphrase", "AS", "t1", "JOIN", "keyphrase", "AS", "t4", "ON", "t1.keyphraseid", "=", "t4.keyphraseid", "JOIN", "writes", "AS", "t3", "ON", "t3.paperid", "=", "t1.paperid", "JOIN", "author", "AS", "t2", "ON", "t3.authorid", "=", "t2.authorid", "WHERE", "t2.authorname", "=", "``", "Ed", "Desmond", "''", "AND", "t4.keyphrasename", "=", "``", "Semantic", "Parsing", "''", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "distinct", "t3", ".", "paperid", ")", "from", "paperkeyphrase", "as", "t1", "join", "keyphrase", "as", "t4", "on", "t1", ".", "keyphraseid", "=", "t4", ".", "keyphraseid", "join", "writes", "as", "t3", "on", "t3", ".", "paperid", "=", "t1", ".", "paperid", "join", "author", "as", "t2", "on", "t3", ".", "authorid", "=", "t2", ".", "authorid", "where", "t2", ".", "authorname", "=", "value", "and", "t4", ".", "keyphrasename", "=", "value"], "question": "How many papers by Ed Desmond contain the keyphrases Semantic Parsing ?", "question_toks": ["How", "many", "papers", "by", "Ed", "Desmond", "contain", "the", "keyphrases", "Semantic", "Parsing", "?"], "guid": 4707}}
{"text": "Inst: instID, name, country; Authors: authID, lname, fname; Papers: paperID, title; Authorship: authID, instID, paperID, authOrder | Find the first names and last names of the authors whose institution affiliation is \"Google\".", "sql": "SELECT DISTINCT t1.fname ,  t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Google\"", "example": {"db_id": "icfp_1", "query": "SELECT DISTINCT t1.fname ,  t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Google\"", "query_toks": ["SELECT", "DISTINCT", "t1.fname", ",", "t1.lname", "FROM", "authors", "AS", "t1", "JOIN", "authorship", "AS", "t2", "ON", "t1.authid", "=", "t2.authid", "JOIN", "inst", "AS", "t3", "ON", "t2.instid", "=", "t3.instid", "WHERE", "t3.name", "=", "``", "Google", "''"], "query_toks_no_value": ["select", "distinct", "t1", ".", "fname", ",", "t1", ".", "lname", "from", "authors", "as", "t1", "join", "authorship", "as", "t2", "on", "t1", ".", "authid", "=", "t2", ".", "authid", "join", "inst", "as", "t3", "on", "t2", ".", "instid", "=", "t3", ".", "instid", "where", "t3", ".", "name", "=", "value"], "question": "Find the first names and last names of the authors whose institution affiliation is \"Google\".", "question_toks": ["Find", "the", "first", "names", "and", "last", "names", "of", "the", "authors", "whose", "institution", "affiliation", "is", "``", "Google", "''", "."], "guid": 4708}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | who has written the most papers on syntactic parsing ?", "sql": "SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  \"syntactic parsing\" GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  \"syntactic parsing\" GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "t4.paperid", ")", ",", "t3.authorid", "FROM", "paperkeyphrase", "AS", "t1", "JOIN", "keyphrase", "AS", "t2", "ON", "t1.keyphraseid", "=", "t2.keyphraseid", "JOIN", "paper", "AS", "t4", "ON", "t4.paperid", "=", "t1.paperid", "JOIN", "writes", "AS", "t3", "ON", "t3.paperid", "=", "t4.paperid", "WHERE", "t2.keyphrasename", "=", "``", "syntactic", "parsing", "''", "GROUP", "BY", "t3.authorid", "ORDER", "BY", "COUNT", "(", "t4.paperid", ")", "DESC", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "t4", ".", "paperid", ")", ",", "t3", ".", "authorid", "from", "paperkeyphrase", "as", "t1", "join", "keyphrase", "as", "t2", "on", "t1", ".", "keyphraseid", "=", "t2", ".", "keyphraseid", "join", "paper", "as", "t4", "on", "t4", ".", "paperid", "=", "t1", ".", "paperid", "join", "writes", "as", "t3", "on", "t3", ".", "paperid", "=", "t4", ".", "paperid", "where", "t2", ".", "keyphrasename", "=", "value", "group", "by", "t3", ".", "authorid", "order", "by", "count", "(", "t4", ".", "paperid", ")", "desc"], "question": "who has written the most papers on syntactic parsing ?", "question_toks": ["who", "has", "written", "the", "most", "papers", "on", "syntactic", "parsing", "?"], "guid": 4709}}
{"text": "publication: Publication_ID, Book_ID, Publisher, Publication_Date, Price; book: Book_ID, Title, Issues, Writer | Show the publishers that have publications with price higher than 10000000 and publications with price lower than 5000000.", "sql": "SELECT Publisher FROM publication WHERE Price  >  10000000 INTERSECT SELECT Publisher FROM publication WHERE Price  <  5000000", "example": {"db_id": "book_2", "query": "SELECT Publisher FROM publication WHERE Price  >  10000000 INTERSECT SELECT Publisher FROM publication WHERE Price  <  5000000", "query_toks": ["SELECT", "Publisher", "FROM", "publication", "WHERE", "Price", ">", "10000000", "INTERSECT", "SELECT", "Publisher", "FROM", "publication", "WHERE", "Price", "<", "5000000"], "query_toks_no_value": ["select", "publisher", "from", "publication", "where", "price", ">", "value", "intersect", "select", "publisher", "from", "publication", "where", "price", "<", "value"], "question": "Show the publishers that have publications with price higher than 10000000 and publications with price lower than 5000000.", "question_toks": ["Show", "the", "publishers", "that", "have", "publications", "with", "price", "higher", "than", "10000000", "and", "publications", "with", "price", "lower", "than", "5000000", "."], "guid": 4710}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the keywords, which have been contained by more than 100 papers in VLDB conference .", "sql": "SELECT t1.keyword FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t4.pid JOIN conference AS t2 ON t3.cid  =  t2.cid WHERE t2.name  =  \"VLDB\" GROUP BY t1.keyword HAVING COUNT ( DISTINCT t3.title )  >  100;", "example": {"db_id": "academic", "query": "SELECT t1.keyword FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t4.pid JOIN conference AS t2 ON t3.cid  =  t2.cid WHERE t2.name  =  \"VLDB\" GROUP BY t1.keyword HAVING COUNT ( DISTINCT t3.title )  >  100;", "query_toks": ["SELECT", "t1.keyword", "FROM", "publication_keyword", "AS", "t4", "JOIN", "keyword", "AS", "t1", "ON", "t4.kid", "=", "t1.kid", "JOIN", "publication", "AS", "t3", "ON", "t3.pid", "=", "t4.pid", "JOIN", "conference", "AS", "t2", "ON", "t3.cid", "=", "t2.cid", "WHERE", "t2.name", "=", "``", "VLDB", "''", "GROUP", "BY", "t1.keyword", "HAVING", "COUNT", "(", "DISTINCT", "t3.title", ")", ">", "100", ";"], "query_toks_no_value": ["select", "t1", ".", "keyword", "from", "publication_keyword", "as", "t4", "join", "keyword", "as", "t1", "on", "t4", ".", "kid", "=", "t1", ".", "kid", "join", "publication", "as", "t3", "on", "t3", ".", "pid", "=", "t4", ".", "pid", "join", "conference", "as", "t2", "on", "t3", ".", "cid", "=", "t2", ".", "cid", "where", "t2", ".", "name", "=", "value", "group", "by", "t1", ".", "keyword", "having", "count", "(", "distinct", "t3", ".", "title", ")", ">", "value"], "question": "return me the keywords, which have been contained by more than 100 papers in VLDB conference .", "question_toks": ["return", "me", "the", "keywords", ",", "which", "have", "been", "contained", "by", "more", "than", "100", "papers", "in", "VLDB", "conference", "."], "guid": 4711}}
{"text": "Scientists: SSN, Name; Projects: Code, Name, Hours; AssignedTo: Scientist, Project | What are the names of projects that require between 100 and 300 hours?", "sql": "SELECT name FROM projects WHERE hours BETWEEN 100 AND 300", "example": {"db_id": "scientist_1", "query": "SELECT name FROM projects WHERE hours BETWEEN 100 AND 300", "query_toks": ["SELECT", "name", "FROM", "projects", "WHERE", "hours", "BETWEEN", "100", "AND", "300"], "query_toks_no_value": ["select", "name", "from", "projects", "where", "hours", "between", "value", "and", "value"], "question": "What are the names of projects that require between 100 and 300 hours?", "question_toks": ["What", "are", "the", "names", "of", "projects", "that", "require", "between", "100", "and", "300", "hours", "?"], "guid": 4712}}
{"text": "Document_Types: document_type_code, document_description; Documents: document_id, document_type_code, grant_id, sent_date, response_received_date, other_details; Grants: grant_id, organisation_id, grant_amount, grant_start_date, grant_end_date, other_details; Organisation_Types: organisation_type, organisation_type_description; Organisations: organisation_id, organisation_type, organisation_details; Project_Outcomes: project_id, outcome_code, outcome_details; Project_Staff: staff_id, project_id, role_code, date_from, date_to, other_details; Projects: project_id, organisation_id, project_details; Research_Outcomes: outcome_code, outcome_description; Research_Staff: staff_id, employer_organisation_id, staff_details | Which document type is described with the prefix 'Initial'?", "sql": "SELECT document_type_code FROM Document_Types WHERE document_description LIKE 'Initial%'", "example": {"db_id": "tracking_grants_for_research", "query": "SELECT document_type_code FROM Document_Types WHERE document_description LIKE 'Initial%'", "query_toks": ["SELECT", "document_type_code", "FROM", "Document_Types", "WHERE", "document_description", "LIKE", "'Initial", "%", "'"], "query_toks_no_value": ["select", "document_type_code", "from", "document_types", "where", "document_description", "like", "value"], "question": "Which document type is described with the prefix 'Initial'?", "question_toks": ["Which", "document", "type", "is", "described", "with", "the", "prefix", "'Initial", "'", "?"], "guid": 4713}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | What is the most cited paper of ohad shamir ?", "sql": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"ohad shamir\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"ohad shamir\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;", "query_toks": ["SELECT", "DISTINCT", "t4.citedpaperid", ",", "COUNT", "(", "t4.citedpaperid", ")", "FROM", "paper", "AS", "t3", "JOIN", "cite", "AS", "t4", "ON", "t3.paperid", "=", "t4.citedpaperid", "JOIN", "writes", "AS", "t2", "ON", "t2.paperid", "=", "t3.paperid", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "WHERE", "t1.authorname", "=", "``", "ohad", "shamir", "''", "GROUP", "BY", "t4.citedpaperid", "ORDER", "BY", "COUNT", "(", "t4.citedpaperid", ")", "DESC", ";"], "query_toks_no_value": ["select", "distinct", "t4", ".", "citedpaperid", ",", "count", "(", "t4", ".", "citedpaperid", ")", "from", "paper", "as", "t3", "join", "cite", "as", "t4", "on", "t3", ".", "paperid", "=", "t4", ".", "citedpaperid", "join", "writes", "as", "t2", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "where", "t1", ".", "authorname", "=", "value", "group", "by", "t4", ".", "citedpaperid", "order", "by", "count", "(", "t4", ".", "citedpaperid", ")", "desc"], "question": "What is the most cited paper of ohad shamir ?", "question_toks": ["What", "is", "the", "most", "cited", "paper", "of", "ohad", "shamir", "?"], "guid": 4714}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | parsing papers with most citations", "sql": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"parsing\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"parsing\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;", "query_toks": ["SELECT", "DISTINCT", "t4.citedpaperid", ",", "COUNT", "(", "t4.citedpaperid", ")", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "JOIN", "cite", "AS", "t4", "ON", "t3.paperid", "=", "t4.citedpaperid", "WHERE", "t1.keyphrasename", "=", "``", "parsing", "''", "GROUP", "BY", "t4.citedpaperid", "ORDER", "BY", "COUNT", "(", "t4.citedpaperid", ")", "DESC", ";"], "query_toks_no_value": ["select", "distinct", "t4", ".", "citedpaperid", ",", "count", "(", "t4", ".", "citedpaperid", ")", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "join", "cite", "as", "t4", "on", "t3", ".", "paperid", "=", "t4", ".", "citedpaperid", "where", "t1", ".", "keyphrasename", "=", "value", "group", "by", "t4", ".", "citedpaperid", "order", "by", "count", "(", "t4", ".", "citedpaperid", ")", "desc"], "question": "parsing papers with most citations", "question_toks": ["parsing", "papers", "with", "most", "citations"], "guid": 4715}}
{"text": "program: Program_ID, Name, Origin, Launch, Owner; channel: Channel_ID, Name, Owner, Share_in_percent, Rating_in_percent; broadcast: Channel_ID, Program_ID, Time_of_day; broadcast_share: Channel_ID, Program_ID, Date, Share_in_percent | Count the number of programs.", "sql": "SELECT count(*) FROM program", "example": {"db_id": "program_share", "query": "SELECT count(*) FROM program", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "program"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "program"], "question": "Count the number of programs.", "question_toks": ["Count", "the", "number", "of", "programs", "."], "guid": 7929}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | What is the id of the reviewer whose name has substring \u201cMike\u201d?", "sql": "SELECT rID FROM Reviewer WHERE name LIKE \"%Mike%\"", "example": {"db_id": "movie_1", "query": "SELECT rID FROM Reviewer WHERE name LIKE \"%Mike%\"", "query_toks": ["SELECT", "rID", "FROM", "Reviewer", "WHERE", "name", "LIKE", "``", "%", "Mike", "%", "''"], "query_toks_no_value": ["select", "rid", "from", "reviewer", "where", "name", "like", "value"], "question": "What is the id of the reviewer whose name has substring \u201cMike\u201d?", "question_toks": ["What", "is", "the", "id", "of", "the", "reviewer", "whose", "name", "has", "substring", "\u201cMike\u201d", "?"], "guid": 7930}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | Find the names of all reviewers who have contributed three or more ratings.", "sql": "SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T1.rID HAVING COUNT(*)  >=  3", "example": {"db_id": "movie_1", "query": "SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T1.rID HAVING COUNT(*)  >=  3", "query_toks": ["SELECT", "T2.name", "FROM", "Rating", "AS", "T1", "JOIN", "Reviewer", "AS", "T2", "ON", "T1.rID", "=", "T2.rID", "GROUP", "BY", "T1.rID", "HAVING", "COUNT", "(", "*", ")", ">", "=", "3"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "rating", "as", "t1", "join", "reviewer", "as", "t2", "on", "t1", ".", "rid", "=", "t2", ".", "rid", "group", "by", "t1", ".", "rid", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "Find the names of all reviewers who have contributed three or more ratings.", "question_toks": ["Find", "the", "names", "of", "all", "reviewers", "who", "have", "contributed", "three", "or", "more", "ratings", "."], "guid": 7931}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | Find all actors who acted in the same movie as \" Tom Hanks \"", "sql": "SELECT t1.name FROM CAST AS t4 JOIN actor AS t1 ON t4.aid  =  t1.aid JOIN movie AS t5 ON t5.mid  =  t4.msid JOIN CAST AS t3 ON t5.mid  =  t3.msid JOIN actor AS t2 ON t3.aid  =  t2.aid WHERE t2.name  =  \"Tom Hanks\";", "example": {"db_id": "imdb", "query": "SELECT t1.name FROM CAST AS t4 JOIN actor AS t1 ON t4.aid  =  t1.aid JOIN movie AS t5 ON t5.mid  =  t4.msid JOIN CAST AS t3 ON t5.mid  =  t3.msid JOIN actor AS t2 ON t3.aid  =  t2.aid WHERE t2.name  =  \"Tom Hanks\";", "query_toks": ["SELECT", "t1.name", "FROM", "CAST", "AS", "t4", "JOIN", "actor", "AS", "t1", "ON", "t4.aid", "=", "t1.aid", "JOIN", "movie", "AS", "t5", "ON", "t5.mid", "=", "t4.msid", "JOIN", "CAST", "AS", "t3", "ON", "t5.mid", "=", "t3.msid", "JOIN", "actor", "AS", "t2", "ON", "t3.aid", "=", "t2.aid", "WHERE", "t2.name", "=", "``", "Tom", "Hanks", "''", ";"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "cast", "as", "t4", "join", "actor", "as", "t1", "on", "t4", ".", "aid", "=", "t1", ".", "aid", "join", "movie", "as", "t5", "on", "t5", ".", "mid", "=", "t4", ".", "msid", "join", "cast", "as", "t3", "on", "t5", ".", "mid", "=", "t3", ".", "msid", "join", "actor", "as", "t2", "on", "t3", ".", "aid", "=", "t2", ".", "aid", "where", "t2", ".", "name", "=", "value"], "question": "Find all actors who acted in the same movie as \" Tom Hanks \"", "question_toks": ["Find", "all", "actors", "who", "acted", "in", "the", "same", "movie", "as", "``", "Tom", "Hanks", "``"], "guid": 7932}}
{"text": "TV_Channel: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option; TV_series: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel; Cartoon: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel | What are the ids of all tv channels that have more than 2 TV channels?", "sql": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2", "example": {"db_id": "tvshow", "query": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2", "query_toks": ["SELECT", "id", "FROM", "tv_channel", "GROUP", "BY", "country", "HAVING", "count", "(", "*", ")", ">", "2"], "query_toks_no_value": ["select", "id", "from", "tv_channel", "group", "by", "country", "having", "count", "(", "*", ")", ">", "value"], "question": "What are the ids of all tv channels that have more than 2 TV channels?", "question_toks": ["What", "are", "the", "ids", "of", "all", "tv", "channels", "that", "have", "more", "than", "2", "TV", "channels", "?"], "guid": 7933}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | What movies have the same director as the movie \" Revolutionary Road \" ?", "sql": "SELECT t3.title FROM director AS t5 JOIN directed_by AS t2 ON t5.did  =  t2.did JOIN directed_by AS t1 ON t5.did  =  t1.did JOIN movie AS t4 ON t4.mid  =  t2.msid JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t4.title  =  \"Revolutionary Road\";", "example": {"db_id": "imdb", "query": "SELECT t3.title FROM director AS t5 JOIN directed_by AS t2 ON t5.did  =  t2.did JOIN directed_by AS t1 ON t5.did  =  t1.did JOIN movie AS t4 ON t4.mid  =  t2.msid JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t4.title  =  \"Revolutionary Road\";", "query_toks": ["SELECT", "t3.title", "FROM", "director", "AS", "t5", "JOIN", "directed_by", "AS", "t2", "ON", "t5.did", "=", "t2.did", "JOIN", "directed_by", "AS", "t1", "ON", "t5.did", "=", "t1.did", "JOIN", "movie", "AS", "t4", "ON", "t4.mid", "=", "t2.msid", "JOIN", "movie", "AS", "t3", "ON", "t3.mid", "=", "t1.msid", "WHERE", "t4.title", "=", "``", "Revolutionary", "Road", "''", ";"], "query_toks_no_value": ["select", "t3", ".", "title", "from", "director", "as", "t5", "join", "directed_by", "as", "t2", "on", "t5", ".", "did", "=", "t2", ".", "did", "join", "directed_by", "as", "t1", "on", "t5", ".", "did", "=", "t1", ".", "did", "join", "movie", "as", "t4", "on", "t4", ".", "mid", "=", "t2", ".", "msid", "join", "movie", "as", "t3", "on", "t3", ".", "mid", "=", "t1", ".", "msid", "where", "t4", ".", "title", "=", "value"], "question": "What movies have the same director as the movie \" Revolutionary Road \" ?", "question_toks": ["What", "movies", "have", "the", "same", "director", "as", "the", "movie", "``", "Revolutionary", "Road", "``", "?"], "guid": 7934}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | Find the titles of all movies not reviewed by Chris Jackson.", "sql": "SELECT DISTINCT title FROM Movie EXCEPT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Chris Jackson'", "example": {"db_id": "movie_1", "query": "SELECT DISTINCT title FROM Movie EXCEPT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Chris Jackson'", "query_toks": ["SELECT", "DISTINCT", "title", "FROM", "Movie", "EXCEPT", "SELECT", "T2.title", "FROM", "Rating", "AS", "T1", "JOIN", "Movie", "AS", "T2", "ON", "T1.mID", "=", "T2.mID", "JOIN", "Reviewer", "AS", "T3", "ON", "T1.rID", "=", "T3.rID", "WHERE", "T3.name", "=", "'Chris", "Jackson", "'"], "query_toks_no_value": ["select", "distinct", "title", "from", "movie", "except", "select", "t2", ".", "title", "from", "rating", "as", "t1", "join", "movie", "as", "t2", "on", "t1", ".", "mid", "=", "t2", ".", "mid", "join", "reviewer", "as", "t3", "on", "t1", ".", "rid", "=", "t3", ".", "rid", "where", "t3", ".", "name", "=", "value"], "question": "Find the titles of all movies not reviewed by Chris Jackson.", "question_toks": ["Find", "the", "titles", "of", "all", "movies", "not", "reviewed", "by", "Chris", "Jackson", "."], "guid": 7935}}
{"text": "program: Program_ID, Name, Origin, Launch, Owner; channel: Channel_ID, Name, Owner, Share_in_percent, Rating_in_percent; broadcast: Channel_ID, Program_ID, Time_of_day; broadcast_share: Channel_ID, Program_ID, Date, Share_in_percent | find the total percentage share of all channels owned by CCTV.", "sql": "SELECT sum(Share_in_percent) FROM channel WHERE OWNER  =  'CCTV'", "example": {"db_id": "program_share", "query": "SELECT sum(Share_in_percent) FROM channel WHERE OWNER  =  'CCTV'", "query_toks": ["SELECT", "sum", "(", "Share_in_percent", ")", "FROM", "channel", "WHERE", "OWNER", "=", "'CCTV", "'"], "query_toks_no_value": ["select", "sum", "(", "share_in_percent", ")", "from", "channel", "where", "owner", "=", "value"], "question": "find the total percentage share of all channels owned by CCTV.", "question_toks": ["find", "the", "total", "percentage", "share", "of", "all", "channels", "owned", "by", "CCTV", "."], "guid": 7936}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | Find the directors of all movies featuring \" Kate Winslet \"", "sql": "SELECT t3.name FROM CAST AS t4 JOIN actor AS t1 ON t4.aid  =  t1.aid JOIN movie AS t5 ON t5.mid  =  t4.msid JOIN directed_by AS t2 ON t5.mid  =  t2.msid JOIN director AS t3 ON t3.did  =  t2.did WHERE t1.name  =  \"Kate Winslet\";", "example": {"db_id": "imdb", "query": "SELECT t3.name FROM CAST AS t4 JOIN actor AS t1 ON t4.aid  =  t1.aid JOIN movie AS t5 ON t5.mid  =  t4.msid JOIN directed_by AS t2 ON t5.mid  =  t2.msid JOIN director AS t3 ON t3.did  =  t2.did WHERE t1.name  =  \"Kate Winslet\";", "query_toks": ["SELECT", "t3.name", "FROM", "CAST", "AS", "t4", "JOIN", "actor", "AS", "t1", "ON", "t4.aid", "=", "t1.aid", "JOIN", "movie", "AS", "t5", "ON", "t5.mid", "=", "t4.msid", "JOIN", "directed_by", "AS", "t2", "ON", "t5.mid", "=", "t2.msid", "JOIN", "director", "AS", "t3", "ON", "t3.did", "=", "t2.did", "WHERE", "t1.name", "=", "``", "Kate", "Winslet", "''", ";"], "query_toks_no_value": ["select", "t3", ".", "name", "from", "cast", "as", "t4", "join", "actor", "as", "t1", "on", "t4", ".", "aid", "=", "t1", ".", "aid", "join", "movie", "as", "t5", "on", "t5", ".", "mid", "=", "t4", ".", "msid", "join", "directed_by", "as", "t2", "on", "t5", ".", "mid", "=", "t2", ".", "msid", "join", "director", "as", "t3", "on", "t3", ".", "did", "=", "t2", ".", "did", "where", "t1", ".", "name", "=", "value"], "question": "Find the directors of all movies featuring \" Kate Winslet \"", "question_toks": ["Find", "the", "directors", "of", "all", "movies", "featuring", "``", "Kate", "Winslet", "``"], "guid": 7937}}
{"text": "film: Film_ID, Title, Studio, Director, Gross_in_dollar; market: Market_ID, Country, Number_cities; film_market_estimation: Estimation_ID, Low_Estimate, High_Estimate, Film_ID, Type, Market_ID, Year | What are the titles and directors of the films were never presented in China?", "sql": "SELECT title ,  director FROM film WHERE film_id NOT IN (SELECT film_id FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.market_id  =  T2.Market_ID WHERE country  =  'China')", "example": {"db_id": "film_rank", "query": "SELECT title ,  director FROM film WHERE film_id NOT IN (SELECT film_id FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.market_id  =  T2.Market_ID WHERE country  =  'China')", "query_toks": ["SELECT", "title", ",", "director", "FROM", "film", "WHERE", "film_id", "NOT", "IN", "(", "SELECT", "film_id", "FROM", "film_market_estimation", "AS", "T1", "JOIN", "market", "AS", "T2", "ON", "T1.market_id", "=", "T2.Market_ID", "WHERE", "country", "=", "'China", "'", ")"], "query_toks_no_value": ["select", "title", ",", "director", "from", "film", "where", "film_id", "not", "in", "(", "select", "film_id", "from", "film_market_estimation", "as", "t1", "join", "market", "as", "t2", "on", "t1", ".", "market_id", "=", "t2", ".", "market_id", "where", "country", "=", "value", ")"], "question": "What are the titles and directors of the films were never presented in China?", "question_toks": ["What", "are", "the", "titles", "and", "directors", "of", "the", "films", "were", "never", "presented", "in", "China", "?"], "guid": 7938}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | List all the directors of movies about nuclear weapons", "sql": "SELECT t3.name FROM director AS t3 JOIN directed_by AS t2 ON t3.did  =  t2.did JOIN movie AS t4 ON t4.mid  =  t2.msid JOIN tags AS t5 ON t5.msid  =  t4.mid JOIN keyword AS t1 ON t5.kid  =  t1.id WHERE t1.keyword  =  \"nuclear weapons\";", "example": {"db_id": "imdb", "query": "SELECT t3.name FROM director AS t3 JOIN directed_by AS t2 ON t3.did  =  t2.did JOIN movie AS t4 ON t4.mid  =  t2.msid JOIN tags AS t5 ON t5.msid  =  t4.mid JOIN keyword AS t1 ON t5.kid  =  t1.id WHERE t1.keyword  =  \"nuclear weapons\";", "query_toks": ["SELECT", "t3.name", "FROM", "director", "AS", "t3", "JOIN", "directed_by", "AS", "t2", "ON", "t3.did", "=", "t2.did", "JOIN", "movie", "AS", "t4", "ON", "t4.mid", "=", "t2.msid", "JOIN", "tags", "AS", "t5", "ON", "t5.msid", "=", "t4.mid", "JOIN", "keyword", "AS", "t1", "ON", "t5.kid", "=", "t1.id", "WHERE", "t1.keyword", "=", "``", "nuclear", "weapons", "''", ";"], "query_toks_no_value": ["select", "t3", ".", "name", "from", "director", "as", "t3", "join", "directed_by", "as", "t2", "on", "t3", ".", "did", "=", "t2", ".", "did", "join", "movie", "as", "t4", "on", "t4", ".", "mid", "=", "t2", ".", "msid", "join", "tags", "as", "t5", "on", "t5", ".", "msid", "=", "t4", ".", "mid", "join", "keyword", "as", "t1", "on", "t5", ".", "kid", "=", "t1", ".", "id", "where", "t1", ".", "keyword", "=", "value"], "question": "List all the directors of movies about nuclear weapons", "question_toks": ["List", "all", "the", "directors", "of", "movies", "about", "nuclear", "weapons"], "guid": 7939}}
{"text": "festival_detail: Festival_ID, Festival_Name, Chair_Name, Location, Year, Num_of_Audience; artwork: Artwork_ID, Type, Name; nomination: Artwork_ID, Festival_ID, Result | Show the names of festivals that have nominated artworks of type \"Program Talent Show\".", "sql": "SELECT T3.Festival_Name FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID WHERE T2.Type  =  \"Program Talent Show\"", "example": {"db_id": "entertainment_awards", "query": "SELECT T3.Festival_Name FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID WHERE T2.Type  =  \"Program Talent Show\"", "query_toks": ["SELECT", "T3.Festival_Name", "FROM", "nomination", "AS", "T1", "JOIN", "artwork", "AS", "T2", "ON", "T1.Artwork_ID", "=", "T2.Artwork_ID", "JOIN", "festival_detail", "AS", "T3", "ON", "T1.Festival_ID", "=", "T3.Festival_ID", "WHERE", "T2.Type", "=", "``", "Program", "Talent", "Show", "''"], "query_toks_no_value": ["select", "t3", ".", "festival_name", "from", "nomination", "as", "t1", "join", "artwork", "as", "t2", "on", "t1", ".", "artwork_id", "=", "t2", ".", "artwork_id", "join", "festival_detail", "as", "t3", "on", "t1", ".", "festival_id", "=", "t3", ".", "festival_id", "where", "t2", ".", "type", "=", "value"], "question": "Show the names of festivals that have nominated artworks of type \"Program Talent Show\".", "question_toks": ["Show", "the", "names", "of", "festivals", "that", "have", "nominated", "artworks", "of", "type", "``", "Program", "Talent", "Show", "''", "."], "guid": 7940}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | How many movies did \" Quentin Tarantino \" direct after 2010 ?", "sql": "SELECT COUNT ( DISTINCT t3.title  ) FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.name  =  \"Quentin Tarantino\" AND t3.release_year  >  2010;", "example": {"db_id": "imdb", "query": "SELECT COUNT ( DISTINCT t3.title  ) FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.name  =  \"Quentin Tarantino\" AND t3.release_year  >  2010;", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "t3.title", ")", "FROM", "director", "AS", "t2", "JOIN", "directed_by", "AS", "t1", "ON", "t2.did", "=", "t1.did", "JOIN", "movie", "AS", "t3", "ON", "t3.mid", "=", "t1.msid", "WHERE", "t2.name", "=", "``", "Quentin", "Tarantino", "''", "AND", "t3.release_year", ">", "2010", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "t3", ".", "title", ")", "from", "director", "as", "t2", "join", "directed_by", "as", "t1", "on", "t2", ".", "did", "=", "t1", ".", "did", "join", "movie", "as", "t3", "on", "t3", ".", "mid", "=", "t1", ".", "msid", "where", "t2", ".", "name", "=", "value", "and", "t3", ".", "release_year", ">", "value"], "question": "How many movies did \" Quentin Tarantino \" direct after 2010 ?", "question_toks": ["How", "many", "movies", "did", "``", "Quentin", "Tarantino", "``", "direct", "after", "2010", "?"], "guid": 7941}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | What are the ids of all moviest hat have not been reviewed by Britanny Harris?", "sql": "SELECT mID FROM Rating EXCEPT SELECT T1.mID FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T2.name  =  \"Brittany Harris\"", "example": {"db_id": "movie_1", "query": "SELECT mID FROM Rating EXCEPT SELECT T1.mID FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T2.name  =  \"Brittany Harris\"", "query_toks": ["SELECT", "mID", "FROM", "Rating", "EXCEPT", "SELECT", "T1.mID", "FROM", "Rating", "AS", "T1", "JOIN", "Reviewer", "AS", "T2", "ON", "T1.rID", "=", "T2.rID", "WHERE", "T2.name", "=", "``", "Brittany", "Harris", "''"], "query_toks_no_value": ["select", "mid", "from", "rating", "except", "select", "t1", ".", "mid", "from", "rating", "as", "t1", "join", "reviewer", "as", "t2", "on", "t1", ".", "rid", "=", "t2", ".", "rid", "where", "t2", ".", "name", "=", "value"], "question": "What are the ids of all moviest hat have not been reviewed by Britanny Harris?", "question_toks": ["What", "are", "the", "ids", "of", "all", "moviest", "hat", "have", "not", "been", "reviewed", "by", "Britanny", "Harris", "?"], "guid": 7942}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | What is the nationality of the actor \" Christoph Waltz \" ?", "sql": "SELECT nationality FROM actor WHERE name  =  \"Christoph Waltz\";", "example": {"db_id": "imdb", "query": "SELECT nationality FROM actor WHERE name  =  \"Christoph Waltz\";", "query_toks": ["SELECT", "nationality", "FROM", "actor", "WHERE", "name", "=", "``", "Christoph", "Waltz", "''", ";"], "query_toks_no_value": ["select", "nationality", "from", "actor", "where", "name", "=", "value"], "question": "What is the nationality of the actor \" Christoph Waltz \" ?", "question_toks": ["What", "is", "the", "nationality", "of", "the", "actor", "``", "Christoph", "Waltz", "``", "?"], "guid": 7943}}
{"text": "film: Film_ID, Title, Studio, Director, Gross_in_dollar; market: Market_ID, Country, Number_cities; film_market_estimation: Estimation_ID, Low_Estimate, High_Estimate, Film_ID, Type, Market_ID, Year | Please list the years of film market estimations when the market is in country \"Japan\" in descending order.", "sql": "SELECT T1.Year FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID WHERE T2.Country  =  \"Japan\" ORDER BY T1.Year DESC", "example": {"db_id": "film_rank", "query": "SELECT T1.Year FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID WHERE T2.Country  =  \"Japan\" ORDER BY T1.Year DESC", "query_toks": ["SELECT", "T1.Year", "FROM", "film_market_estimation", "AS", "T1", "JOIN", "market", "AS", "T2", "ON", "T1.Market_ID", "=", "T2.Market_ID", "WHERE", "T2.Country", "=", "``", "Japan", "''", "ORDER", "BY", "T1.Year", "DESC"], "query_toks_no_value": ["select", "t1", ".", "year", "from", "film_market_estimation", "as", "t1", "join", "market", "as", "t2", "on", "t1", ".", "market_id", "=", "t2", ".", "market_id", "where", "t2", ".", "country", "=", "value", "order", "by", "t1", ".", "year", "desc"], "question": "Please list the years of film market estimations when the market is in country \"Japan\" in descending order.", "question_toks": ["Please", "list", "the", "years", "of", "film", "market", "estimations", "when", "the", "market", "is", "in", "country", "``", "Japan", "''", "in", "descending", "order", "."], "guid": 7944}}
{"text": "festival_detail: Festival_ID, Festival_Name, Chair_Name, Location, Year, Num_of_Audience; artwork: Artwork_ID, Type, Name; nomination: Artwork_ID, Festival_ID, Result | List the name of artworks in ascending alphabetical order.", "sql": "SELECT Name FROM artwork ORDER BY Name ASC", "example": {"db_id": "entertainment_awards", "query": "SELECT Name FROM artwork ORDER BY Name ASC", "query_toks": ["SELECT", "Name", "FROM", "artwork", "ORDER", "BY", "Name", "ASC"], "query_toks_no_value": ["select", "name", "from", "artwork", "order", "by", "name", "asc"], "question": "List the name of artworks in ascending alphabetical order.", "question_toks": ["List", "the", "name", "of", "artworks", "in", "ascending", "alphabetical", "order", "."], "guid": 7945}}
{"text": "film: Film_ID, Rank_in_series, Number_in_season, Title, Directed_by, Original_air_date, Production_code; cinema: Cinema_ID, Name, Openning_year, Capacity, Location; schedule: Cinema_ID, Film_ID, Date, Show_times_per_day, Price | In which locations are there more than one movie theater with capacity above 300?", "sql": "SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >  1", "example": {"db_id": "cinema", "query": "SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >  1", "query_toks": ["SELECT", "LOCATION", "FROM", "cinema", "WHERE", "capacity", ">", "300", "GROUP", "BY", "LOCATION", "HAVING", "count", "(", "*", ")", ">", "1"], "query_toks_no_value": ["select", "location", "from", "cinema", "where", "capacity", ">", "value", "group", "by", "location", "having", "count", "(", "*", ")", ">", "value"], "question": "In which locations are there more than one movie theater with capacity above 300?", "question_toks": ["In", "which", "locations", "are", "there", "more", "than", "one", "movie", "theater", "with", "capacity", "above", "300", "?"], "guid": 7946}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | What was the budget of the movie Juno from 2007 ?", "sql": "SELECT budget FROM movie WHERE release_year  =  2007 AND title  =  \"Juno\";", "example": {"db_id": "imdb", "query": "SELECT budget FROM movie WHERE release_year  =  2007 AND title  =  \"Juno\";", "query_toks": ["SELECT", "budget", "FROM", "movie", "WHERE", "release_year", "=", "2007", "AND", "title", "=", "``", "Juno", "''", ";"], "query_toks_no_value": ["select", "budget", "from", "movie", "where", "release_year", "=", "value", "and", "title", "=", "value"], "question": "What was the budget of the movie Juno from 2007 ?", "question_toks": ["What", "was", "the", "budget", "of", "the", "movie", "Juno", "from", "2007", "?"], "guid": 7947}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | What are the major roles in the movie \" Daddy Long Legs \"", "sql": "SELECT t2.role FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t3.title  =  \"Daddy Long Legs\";", "example": {"db_id": "imdb", "query": "SELECT t2.role FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t3.title  =  \"Daddy Long Legs\";", "query_toks": ["SELECT", "t2.role", "FROM", "CAST", "AS", "t2", "JOIN", "actor", "AS", "t1", "ON", "t2.aid", "=", "t1.aid", "JOIN", "movie", "AS", "t3", "ON", "t3.mid", "=", "t2.msid", "WHERE", "t3.title", "=", "``", "Daddy", "Long", "Legs", "''", ";"], "query_toks_no_value": ["select", "t2", ".", "role", "from", "cast", "as", "t2", "join", "actor", "as", "t1", "on", "t2", ".", "aid", "=", "t1", ".", "aid", "join", "movie", "as", "t3", "on", "t3", ".", "mid", "=", "t2", ".", "msid", "where", "t3", ".", "title", "=", "value"], "question": "What are the major roles in the movie \" Daddy Long Legs \"", "question_toks": ["What", "are", "the", "major", "roles", "in", "the", "movie", "``", "Daddy", "Long", "Legs", "``"], "guid": 7948}}
{"text": "program: Program_ID, Name, Origin, Launch, Owner; channel: Channel_ID, Name, Owner, Share_in_percent, Rating_in_percent; broadcast: Channel_ID, Program_ID, Time_of_day; broadcast_share: Channel_ID, Program_ID, Date, Share_in_percent | Show me the owner of the channel with the highest rating.", "sql": "SELECT OWNER FROM channel ORDER BY rating_in_percent DESC LIMIT 1", "example": {"db_id": "program_share", "query": "SELECT OWNER FROM channel ORDER BY rating_in_percent DESC LIMIT 1", "query_toks": ["SELECT", "OWNER", "FROM", "channel", "ORDER", "BY", "rating_in_percent", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "owner", "from", "channel", "order", "by", "rating_in_percent", "desc", "limit", "value"], "question": "Show me the owner of the channel with the highest rating.", "question_toks": ["Show", "me", "the", "owner", "of", "the", "channel", "with", "the", "highest", "rating", "."], "guid": 7949}}
{"text": "TV_Channel: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option; TV_series: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel; Cartoon: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel | What are the package options and the name of the series for the TV Channel that supports high definition TV?", "sql": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"", "example": {"db_id": "tvshow", "query": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"", "query_toks": ["SELECT", "package_option", ",", "series_name", "FROM", "TV_Channel", "WHERE", "hight_definition_TV", "=", "``", "yes", "''"], "query_toks_no_value": ["select", "package_option", ",", "series_name", "from", "tv_channel", "where", "hight_definition_tv", "=", "value"], "question": "What are the package options and the name of the series for the TV Channel that supports high definition TV?", "question_toks": ["What", "are", "the", "package", "options", "and", "the", "name", "of", "the", "series", "for", "the", "TV", "Channel", "that", "supports", "high", "definition", "TV", "?"], "guid": 7950}}
{"text": "TV_Channel: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option; TV_series: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel; Cartoon: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel | Find the package choice and series name of the TV channel that has high definition TV.", "sql": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"", "example": {"db_id": "tvshow", "query": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"", "query_toks": ["SELECT", "package_option", ",", "series_name", "FROM", "TV_Channel", "WHERE", "hight_definition_TV", "=", "``", "yes", "''"], "query_toks_no_value": ["select", "package_option", ",", "series_name", "from", "tv_channel", "where", "hight_definition_tv", "=", "value"], "question": "Find the package choice and series name of the TV channel that has high definition TV.", "question_toks": ["Find", "the", "package", "choice", "and", "series", "name", "of", "the", "TV", "channel", "that", "has", "high", "definition", "TV", "."], "guid": 7951}}
{"text": "program: Program_ID, Name, Origin, Launch, Owner; channel: Channel_ID, Name, Owner, Share_in_percent, Rating_in_percent; broadcast: Channel_ID, Program_ID, Time_of_day; broadcast_share: Channel_ID, Program_ID, Date, Share_in_percent | List all program origins in the alphabetical order.", "sql": "SELECT origin FROM program ORDER BY origin", "example": {"db_id": "program_share", "query": "SELECT origin FROM program ORDER BY origin", "query_toks": ["SELECT", "origin", "FROM", "program", "ORDER", "BY", "origin"], "query_toks_no_value": ["select", "origin", "from", "program", "order", "by", "origin"], "question": "List all program origins in the alphabetical order.", "question_toks": ["List", "all", "program", "origins", "in", "the", "alphabetical", "order", "."], "guid": 7952}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | Who was the actor that played \" Alan Turing \" in the movie \" The Imitation Game \" ?", "sql": "SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t2.role  =  \"Alan Turing\" AND t3.title  =  \"The Imitation Game\";", "example": {"db_id": "imdb", "query": "SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t2.role  =  \"Alan Turing\" AND t3.title  =  \"The Imitation Game\";", "query_toks": ["SELECT", "t1.name", "FROM", "CAST", "AS", "t2", "JOIN", "actor", "AS", "t1", "ON", "t2.aid", "=", "t1.aid", "JOIN", "movie", "AS", "t3", "ON", "t3.mid", "=", "t2.msid", "WHERE", "t2.role", "=", "``", "Alan", "Turing", "''", "AND", "t3.title", "=", "``", "The", "Imitation", "Game", "''", ";"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "cast", "as", "t2", "join", "actor", "as", "t1", "on", "t2", ".", "aid", "=", "t1", ".", "aid", "join", "movie", "as", "t3", "on", "t3", ".", "mid", "=", "t2", ".", "msid", "where", "t2", ".", "role", "=", "value", "and", "t3", ".", "title", "=", "value"], "question": "Who was the actor that played \" Alan Turing \" in the movie \" The Imitation Game \" ?", "question_toks": ["Who", "was", "the", "actor", "that", "played", "``", "Alan", "Turing", "``", "in", "the", "movie", "``", "The", "Imitation", "Game", "``", "?"], "guid": 7953}}
{"text": "film: Film_ID, Title, Studio, Director, Gross_in_dollar; market: Market_ID, Country, Number_cities; film_market_estimation: Estimation_ID, Low_Estimate, High_Estimate, Film_ID, Type, Market_ID, Year | What are the different film Directors?", "sql": "SELECT DISTINCT Director FROM film", "example": {"db_id": "film_rank", "query": "SELECT DISTINCT Director FROM film", "query_toks": ["SELECT", "DISTINCT", "Director", "FROM", "film"], "query_toks_no_value": ["select", "distinct", "director", "from", "film"], "question": "What are the different film Directors?", "question_toks": ["What", "are", "the", "different", "film", "Directors", "?"], "guid": 7954}}
{"text": "film: Film_ID, Title, Studio, Director, Gross_in_dollar; market: Market_ID, Country, Number_cities; film_market_estimation: Estimation_ID, Low_Estimate, High_Estimate, Film_ID, Type, Market_ID, Year | Return the types of film market estimations in 1995.", "sql": "SELECT TYPE FROM film_market_estimation WHERE YEAR  =  1995", "example": {"db_id": "film_rank", "query": "SELECT TYPE FROM film_market_estimation WHERE YEAR  =  1995", "query_toks": ["SELECT", "TYPE", "FROM", "film_market_estimation", "WHERE", "YEAR", "=", "1995"], "query_toks_no_value": ["select", "type", "from", "film_market_estimation", "where", "year", "=", "value"], "question": "Return the types of film market estimations in 1995.", "question_toks": ["Return", "the", "types", "of", "film", "market", "estimations", "in", "1995", "."], "guid": 7955}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | How many movies did \" Quentin Tarantino \" direct before 2010 ?", "sql": "SELECT COUNT ( DISTINCT t3.title  ) FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.name  =  \"Quentin Tarantino\" AND t3.release_year  <  2010;", "example": {"db_id": "imdb", "query": "SELECT COUNT ( DISTINCT t3.title  ) FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.name  =  \"Quentin Tarantino\" AND t3.release_year  <  2010;", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "t3.title", ")", "FROM", "director", "AS", "t2", "JOIN", "directed_by", "AS", "t1", "ON", "t2.did", "=", "t1.did", "JOIN", "movie", "AS", "t3", "ON", "t3.mid", "=", "t1.msid", "WHERE", "t2.name", "=", "``", "Quentin", "Tarantino", "''", "AND", "t3.release_year", "<", "2010", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "t3", ".", "title", ")", "from", "director", "as", "t2", "join", "directed_by", "as", "t1", "on", "t2", ".", "did", "=", "t1", ".", "did", "join", "movie", "as", "t3", "on", "t3", ".", "mid", "=", "t1", ".", "msid", "where", "t2", ".", "name", "=", "value", "and", "t3", ".", "release_year", "<", "value"], "question": "How many movies did \" Quentin Tarantino \" direct before 2010 ?", "question_toks": ["How", "many", "movies", "did", "``", "Quentin", "Tarantino", "``", "direct", "before", "2010", "?"], "guid": 7956}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | What is the maximum stars and year for the most recent movie?", "sql": "SELECT max(T1.stars) ,  T2.year FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.year  =  (SELECT max(YEAR) FROM Movie)", "example": {"db_id": "movie_1", "query": "SELECT max(T1.stars) ,  T2.year FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.year  =  (SELECT max(YEAR) FROM Movie)", "query_toks": ["SELECT", "max", "(", "T1.stars", ")", ",", "T2.year", "FROM", "Rating", "AS", "T1", "JOIN", "Movie", "AS", "T2", "ON", "T1.mID", "=", "T2.mID", "WHERE", "T2.year", "=", "(", "SELECT", "max", "(", "YEAR", ")", "FROM", "Movie", ")"], "query_toks_no_value": ["select", "max", "(", "t1", ".", "stars", ")", ",", "t2", ".", "year", "from", "rating", "as", "t1", "join", "movie", "as", "t2", "on", "t1", ".", "mid", "=", "t2", ".", "mid", "where", "t2", ".", "year", "=", "(", "select", "max", "(", "year", ")", "from", "movie", ")"], "question": "What is the maximum stars and year for the most recent movie?", "question_toks": ["What", "is", "the", "maximum", "stars", "and", "year", "for", "the", "most", "recent", "movie", "?"], "guid": 7957}}
{"text": "TV_Channel: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option; TV_series: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel; Cartoon: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel | List top 3 highest Rating  TV series. List the TV series's Episode and Rating.", "sql": "SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;", "example": {"db_id": "tvshow", "query": "SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;", "query_toks": ["SELECT", "Episode", ",", "Rating", "FROM", "TV_series", "ORDER", "BY", "Rating", "DESC", "LIMIT", "3", ";"], "query_toks_no_value": ["select", "episode", ",", "rating", "from", "tv_series", "order", "by", "rating", "desc", "limit", "value"], "question": "List top 3 highest Rating  TV series. List the TV series's Episode and Rating.", "question_toks": ["List", "top", "3", "highest", "Rating", "TV", "series", ".", "List", "the", "TV", "series", "'s", "Episode", "and", "Rating", "."], "guid": 7958}}
{"text": "festival_detail: Festival_ID, Festival_Name, Chair_Name, Location, Year, Num_of_Audience; artwork: Artwork_ID, Type, Name; nomination: Artwork_ID, Festival_ID, Result | What are the names of the chairs of festivals, sorted in ascending order of the year held?", "sql": "SELECT Chair_Name FROM festival_detail ORDER BY YEAR ASC", "example": {"db_id": "entertainment_awards", "query": "SELECT Chair_Name FROM festival_detail ORDER BY YEAR ASC", "query_toks": ["SELECT", "Chair_Name", "FROM", "festival_detail", "ORDER", "BY", "YEAR", "ASC"], "query_toks_no_value": ["select", "chair_name", "from", "festival_detail", "order", "by", "year", "asc"], "question": "What are the names of the chairs of festivals, sorted in ascending order of the year held?", "question_toks": ["What", "are", "the", "names", "of", "the", "chairs", "of", "festivals", ",", "sorted", "in", "ascending", "order", "of", "the", "year", "held", "?"], "guid": 7959}}
{"text": "TV_Channel: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option; TV_series: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel; Cartoon: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel | What is the weekly rank for the episode \"A Love of a Lifetime\"?", "sql": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";", "example": {"db_id": "tvshow", "query": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";", "query_toks": ["SELECT", "Weekly_Rank", "FROM", "TV_series", "WHERE", "Episode", "=", "``", "A", "Love", "of", "a", "Lifetime", "''", ";"], "query_toks_no_value": ["select", "weekly_rank", "from", "tv_series", "where", "episode", "=", "value"], "question": "What is the weekly rank for the episode \"A Love of a Lifetime\"?", "question_toks": ["What", "is", "the", "weekly", "rank", "for", "the", "episode", "``", "A", "Love", "of", "a", "Lifetime", "''", "?"], "guid": 7960}}
{"text": "film: Film_ID, Rank_in_series, Number_in_season, Title, Directed_by, Original_air_date, Production_code; cinema: Cinema_ID, Name, Openning_year, Capacity, Location; schedule: Cinema_ID, Film_ID, Date, Show_times_per_day, Price | Show the cinema name and location for cinemas with capacity above average.", "sql": "SELECT name ,  LOCATION FROM cinema WHERE capacity  >  (SELECT avg(capacity) FROM cinema)", "example": {"db_id": "cinema", "query": "SELECT name ,  LOCATION FROM cinema WHERE capacity  >  (SELECT avg(capacity) FROM cinema)", "query_toks": ["SELECT", "name", ",", "LOCATION", "FROM", "cinema", "WHERE", "capacity", ">", "(", "SELECT", "avg", "(", "capacity", ")", "FROM", "cinema", ")"], "query_toks_no_value": ["select", "name", ",", "location", "from", "cinema", "where", "capacity", ">", "(", "select", "avg", "(", "capacity", ")", "from", "cinema", ")"], "question": "Show the cinema name and location for cinemas with capacity above average.", "question_toks": ["Show", "the", "cinema", "name", "and", "location", "for", "cinemas", "with", "capacity", "above", "average", "."], "guid": 7961}}
{"text": "TV_Channel: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option; TV_series: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel; Cartoon: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel | Find the number of cartoons directed by each of the listed directors.", "sql": "SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by", "example": {"db_id": "tvshow", "query": "SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "Directed_by", "FROM", "cartoon", "GROUP", "BY", "Directed_by"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "directed_by", "from", "cartoon", "group", "by", "directed_by"], "question": "Find the number of cartoons directed by each of the listed directors.", "question_toks": ["Find", "the", "number", "of", "cartoons", "directed", "by", "each", "of", "the", "listed", "directors", "."], "guid": 7962}}
{"text": "film: Film_ID, Title, Studio, Director, Gross_in_dollar; market: Market_ID, Country, Number_cities; film_market_estimation: Estimation_ID, Low_Estimate, High_Estimate, Film_ID, Type, Market_ID, Year | What are the titles of films that do not have a film market estimation?", "sql": "SELECT Title FROM film WHERE Film_ID NOT IN (SELECT Film_ID FROM film_market_estimation)", "example": {"db_id": "film_rank", "query": "SELECT Title FROM film WHERE Film_ID NOT IN (SELECT Film_ID FROM film_market_estimation)", "query_toks": ["SELECT", "Title", "FROM", "film", "WHERE", "Film_ID", "NOT", "IN", "(", "SELECT", "Film_ID", "FROM", "film_market_estimation", ")"], "query_toks_no_value": ["select", "title", "from", "film", "where", "film_id", "not", "in", "(", "select", "film_id", "from", "film_market_estimation", ")"], "question": "What are the titles of films that do not have a film market estimation?", "question_toks": ["What", "are", "the", "titles", "of", "films", "that", "do", "not", "have", "a", "film", "market", "estimation", "?"], "guid": 7963}}
{"text": "festival_detail: Festival_ID, Festival_Name, Chair_Name, Location, Year, Num_of_Audience; artwork: Artwork_ID, Type, Name; nomination: Artwork_ID, Festival_ID, Result | How many artworks are there?", "sql": "SELECT count(*) FROM artwork", "example": {"db_id": "entertainment_awards", "query": "SELECT count(*) FROM artwork", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "artwork"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "artwork"], "question": "How many artworks are there?", "question_toks": ["How", "many", "artworks", "are", "there", "?"], "guid": 7964}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | Find all movies directed by \" Steven Spielberg \" after 2006", "sql": "SELECT t3.title FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.name  =  \"Steven Spielberg\" AND t3.release_year  >  2006;", "example": {"db_id": "imdb", "query": "SELECT t3.title FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.name  =  \"Steven Spielberg\" AND t3.release_year  >  2006;", "query_toks": ["SELECT", "t3.title", "FROM", "director", "AS", "t2", "JOIN", "directed_by", "AS", "t1", "ON", "t2.did", "=", "t1.did", "JOIN", "movie", "AS", "t3", "ON", "t3.mid", "=", "t1.msid", "WHERE", "t2.name", "=", "``", "Steven", "Spielberg", "''", "AND", "t3.release_year", ">", "2006", ";"], "query_toks_no_value": ["select", "t3", ".", "title", "from", "director", "as", "t2", "join", "directed_by", "as", "t1", "on", "t2", ".", "did", "=", "t1", ".", "did", "join", "movie", "as", "t3", "on", "t3", ".", "mid", "=", "t1", ".", "msid", "where", "t2", ".", "name", "=", "value", "and", "t3", ".", "release_year", ">", "value"], "question": "Find all movies directed by \" Steven Spielberg \" after 2006", "question_toks": ["Find", "all", "movies", "directed", "by", "``", "Steven", "Spielberg", "``", "after", "2006"], "guid": 7965}}
{"text": "festival_detail: Festival_ID, Festival_Name, Chair_Name, Location, Year, Num_of_Audience; artwork: Artwork_ID, Type, Name; nomination: Artwork_ID, Festival_ID, Result | Show the names of the three most recent festivals.", "sql": "SELECT Festival_Name FROM festival_detail ORDER BY YEAR DESC LIMIT 3", "example": {"db_id": "entertainment_awards", "query": "SELECT Festival_Name FROM festival_detail ORDER BY YEAR DESC LIMIT 3", "query_toks": ["SELECT", "Festival_Name", "FROM", "festival_detail", "ORDER", "BY", "YEAR", "DESC", "LIMIT", "3"], "query_toks_no_value": ["select", "festival_name", "from", "festival_detail", "order", "by", "year", "desc", "limit", "value"], "question": "Show the names of the three most recent festivals.", "question_toks": ["Show", "the", "names", "of", "the", "three", "most", "recent", "festivals", "."], "guid": 7966}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | Who is the director of the tv series \" House of Cards \" from 2013 ?", "sql": "SELECT t2.name FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN tv_series AS t3 ON t3.sid  =  t1.msid WHERE t3.release_year  =  2013 AND t3.title  =  \"House of Cards\";", "example": {"db_id": "imdb", "query": "SELECT t2.name FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN tv_series AS t3 ON t3.sid  =  t1.msid WHERE t3.release_year  =  2013 AND t3.title  =  \"House of Cards\";", "query_toks": ["SELECT", "t2.name", "FROM", "director", "AS", "t2", "JOIN", "directed_by", "AS", "t1", "ON", "t2.did", "=", "t1.did", "JOIN", "tv_series", "AS", "t3", "ON", "t3.sid", "=", "t1.msid", "WHERE", "t3.release_year", "=", "2013", "AND", "t3.title", "=", "``", "House", "of", "Cards", "''", ";"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "director", "as", "t2", "join", "directed_by", "as", "t1", "on", "t2", ".", "did", "=", "t1", ".", "did", "join", "tv_series", "as", "t3", "on", "t3", ".", "sid", "=", "t1", ".", "msid", "where", "t3", ".", "release_year", "=", "value", "and", "t3", ".", "title", "=", "value"], "question": "Who is the director of the tv series \" House of Cards \" from 2013 ?", "question_toks": ["Who", "is", "the", "director", "of", "the", "tv", "series", "``", "House", "of", "Cards", "``", "from", "2013", "?"], "guid": 7967}}
{"text": "TV_Channel: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option; TV_series: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel; Cartoon: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel | find the pixel aspect ratio and nation of the tv channels that do not use English.", "sql": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'", "example": {"db_id": "tvshow", "query": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'", "query_toks": ["SELECT", "Pixel_aspect_ratio_PAR", ",", "country", "FROM", "tv_channel", "WHERE", "LANGUAGE", "!", "=", "'English", "'"], "query_toks_no_value": ["select", "pixel_aspect_ratio_par", ",", "country", "from", "tv_channel", "where", "language", "!", "=", "value"], "question": "find the pixel aspect ratio and nation of the tv channels that do not use English.", "question_toks": ["find", "the", "pixel", "aspect", "ratio", "and", "nation", "of", "the", "tv", "channels", "that", "do", "not", "use", "English", "."], "guid": 7968}}
{"text": "TV_Channel: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option; TV_series: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel; Cartoon: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel | How many TV Channel using language English?", "sql": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";", "example": {"db_id": "tvshow", "query": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "TV_Channel", "WHERE", "LANGUAGE", "=", "``", "English", "''", ";"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "tv_channel", "where", "language", "=", "value"], "question": "How many TV Channel using language English?", "question_toks": ["How", "many", "TV", "Channel", "using", "language", "English", "?"], "guid": 7969}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | What is the id of the reviewer named Daniel Lewis?", "sql": "SELECT rID FROM Reviewer WHERE name  =  \"Daniel Lewis\"", "example": {"db_id": "movie_1", "query": "SELECT rID FROM Reviewer WHERE name  =  \"Daniel Lewis\"", "query_toks": ["SELECT", "rID", "FROM", "Reviewer", "WHERE", "name", "=", "``", "Daniel", "Lewis", "''"], "query_toks_no_value": ["select", "rid", "from", "reviewer", "where", "name", "=", "value"], "question": "What is the id of the reviewer named Daniel Lewis?", "question_toks": ["What", "is", "the", "id", "of", "the", "reviewer", "named", "Daniel", "Lewis", "?"], "guid": 7970}}
{"text": "TV_Channel: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option; TV_series: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel; Cartoon: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel | What is the maximum and minimum share for the TV series?", "sql": "SELECT max(SHARE) , min(SHARE) FROM TV_series;", "example": {"db_id": "tvshow", "query": "SELECT max(SHARE) , min(SHARE) FROM TV_series;", "query_toks": ["SELECT", "max", "(", "SHARE", ")", ",", "min", "(", "SHARE", ")", "FROM", "TV_series", ";"], "query_toks_no_value": ["select", "max", "(", "share", ")", ",", "min", "(", "share", ")", "from", "tv_series"], "question": "What is the maximum and minimum share for the TV series?", "question_toks": ["What", "is", "the", "maximum", "and", "minimum", "share", "for", "the", "TV", "series", "?"], "guid": 7971}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | Who is the actor playing \" Alan Turing \" in \" The Imitation Game \" ?", "sql": "SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t2.role  =  \"Alan Turing\" AND t3.title  =  \"The Imitation Game\";", "example": {"db_id": "imdb", "query": "SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t2.role  =  \"Alan Turing\" AND t3.title  =  \"The Imitation Game\";", "query_toks": ["SELECT", "t1.name", "FROM", "CAST", "AS", "t2", "JOIN", "actor", "AS", "t1", "ON", "t2.aid", "=", "t1.aid", "JOIN", "movie", "AS", "t3", "ON", "t3.mid", "=", "t2.msid", "WHERE", "t2.role", "=", "``", "Alan", "Turing", "''", "AND", "t3.title", "=", "``", "The", "Imitation", "Game", "''", ";"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "cast", "as", "t2", "join", "actor", "as", "t1", "on", "t2", ".", "aid", "=", "t1", ".", "aid", "join", "movie", "as", "t3", "on", "t3", ".", "mid", "=", "t2", ".", "msid", "where", "t2", ".", "role", "=", "value", "and", "t3", ".", "title", "=", "value"], "question": "Who is the actor playing \" Alan Turing \" in \" The Imitation Game \" ?", "question_toks": ["Who", "is", "the", "actor", "playing", "``", "Alan", "Turing", "``", "in", "``", "The", "Imitation", "Game", "``", "?"], "guid": 7972}}
{"text": "film: Film_ID, Title, Studio, Director, Gross_in_dollar; market: Market_ID, Country, Number_cities; film_market_estimation: Estimation_ID, Low_Estimate, High_Estimate, Film_ID, Type, Market_ID, Year | What are the maximum and minimum number of cities in all markets.", "sql": "SELECT max(Number_cities) ,  min(Number_cities) FROM market", "example": {"db_id": "film_rank", "query": "SELECT max(Number_cities) ,  min(Number_cities) FROM market", "query_toks": ["SELECT", "max", "(", "Number_cities", ")", ",", "min", "(", "Number_cities", ")", "FROM", "market"], "query_toks_no_value": ["select", "max", "(", "number_cities", ")", ",", "min", "(", "number_cities", ")", "from", "market"], "question": "What are the maximum and minimum number of cities in all markets.", "question_toks": ["What", "are", "the", "maximum", "and", "minimum", "number", "of", "cities", "in", "all", "markets", "."], "guid": 7973}}
{"text": "film: Film_ID, Rank_in_series, Number_in_season, Title, Directed_by, Original_air_date, Production_code; cinema: Cinema_ID, Name, Openning_year, Capacity, Location; schedule: Cinema_ID, Film_ID, Date, Show_times_per_day, Price | Which locations have 2 or more cinemas with capacity over 300?", "sql": "SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >=  2", "example": {"db_id": "cinema", "query": "SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >=  2", "query_toks": ["SELECT", "LOCATION", "FROM", "cinema", "WHERE", "capacity", ">", "300", "GROUP", "BY", "LOCATION", "HAVING", "count", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "location", "from", "cinema", "where", "capacity", ">", "value", "group", "by", "location", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "Which locations have 2 or more cinemas with capacity over 300?", "question_toks": ["Which", "locations", "have", "2", "or", "more", "cinemas", "with", "capacity", "over", "300", "?"], "guid": 7974}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | How many actors from China have acted in \" Rush Hour 3 \"", "sql": "SELECT COUNT ( DISTINCT t1.name  ) FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t1.nationality  =  \"China\" AND t3.title  =  \"Rush Hour 3\";", "example": {"db_id": "imdb", "query": "SELECT COUNT ( DISTINCT t1.name  ) FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t1.nationality  =  \"China\" AND t3.title  =  \"Rush Hour 3\";", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "t1.name", ")", "FROM", "CAST", "AS", "t2", "JOIN", "actor", "AS", "t1", "ON", "t2.aid", "=", "t1.aid", "JOIN", "movie", "AS", "t3", "ON", "t3.mid", "=", "t2.msid", "WHERE", "t1.nationality", "=", "``", "China", "''", "AND", "t3.title", "=", "``", "Rush", "Hour", "3", "''", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "t1", ".", "name", ")", "from", "cast", "as", "t2", "join", "actor", "as", "t1", "on", "t2", ".", "aid", "=", "t1", ".", "aid", "join", "movie", "as", "t3", "on", "t3", ".", "mid", "=", "t2", ".", "msid", "where", "t1", ".", "nationality", "=", "value", "and", "t3", ".", "title", "=", "value"], "question": "How many actors from China have acted in \" Rush Hour 3 \"", "question_toks": ["How", "many", "actors", "from", "China", "have", "acted", "in", "``", "Rush", "Hour", "3", "``"], "guid": 7975}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | How many movies were made before 2000?", "sql": "SELECT count(*) FROM Movie WHERE YEAR  <  2000", "example": {"db_id": "movie_1", "query": "SELECT count(*) FROM Movie WHERE YEAR  <  2000", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Movie", "WHERE", "YEAR", "<", "2000"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "movie", "where", "year", "<", "value"], "question": "How many movies were made before 2000?", "question_toks": ["How", "many", "movies", "were", "made", "before", "2000", "?"], "guid": 7976}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | For each director, how many reviews have they received?", "sql": "SELECT count(*) ,  T1.director FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID GROUP BY T1.director", "example": {"db_id": "movie_1", "query": "SELECT count(*) ,  T1.director FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID GROUP BY T1.director", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "T1.director", "FROM", "Movie", "AS", "T1", "JOIN", "Rating", "AS", "T2", "ON", "T1.mID", "=", "T2.mID", "GROUP", "BY", "T1.director"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "t1", ".", "director", "from", "movie", "as", "t1", "join", "rating", "as", "t2", "on", "t1", ".", "mid", "=", "t2", ".", "mid", "group", "by", "t1", ".", "director"], "question": "For each director, how many reviews have they received?", "question_toks": ["For", "each", "director", ",", "how", "many", "reviews", "have", "they", "received", "?"], "guid": 7977}}
{"text": "film: Film_ID, Title, Studio, Director, Gross_in_dollar; market: Market_ID, Country, Number_cities; film_market_estimation: Estimation_ID, Low_Estimate, High_Estimate, Film_ID, Type, Market_ID, Year | How many markets have number of cities smaller than 300?", "sql": "SELECT count(*) FROM market WHERE Number_cities  <  300", "example": {"db_id": "film_rank", "query": "SELECT count(*) FROM market WHERE Number_cities  <  300", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "market", "WHERE", "Number_cities", "<", "300"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "market", "where", "number_cities", "<", "value"], "question": "How many markets have number of cities smaller than 300?", "question_toks": ["How", "many", "markets", "have", "number", "of", "cities", "smaller", "than", "300", "?"], "guid": 7978}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | Find all actors from Italy born after 1980", "sql": "SELECT name FROM actor WHERE birth_year  >  1980 AND nationality  =  \"Italy\";", "example": {"db_id": "imdb", "query": "SELECT name FROM actor WHERE birth_year  >  1980 AND nationality  =  \"Italy\";", "query_toks": ["SELECT", "name", "FROM", "actor", "WHERE", "birth_year", ">", "1980", "AND", "nationality", "=", "``", "Italy", "''", ";"], "query_toks_no_value": ["select", "name", "from", "actor", "where", "birth_year", ">", "value", "and", "nationality", "=", "value"], "question": "Find all actors from Italy born after 1980", "question_toks": ["Find", "all", "actors", "from", "Italy", "born", "after", "1980"], "guid": 7979}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | For directors who had more than one movie, return the titles and produced years of all movies directed by them.", "sql": "SELECT T1.title ,  T1.year FROM Movie AS T1 JOIN Movie AS T2 ON T1.director  =  T2.director WHERE T1.title != T2.title", "example": {"db_id": "movie_1", "query": "SELECT T1.title ,  T1.year FROM Movie AS T1 JOIN Movie AS T2 ON T1.director  =  T2.director WHERE T1.title != T2.title", "query_toks": ["SELECT", "T1.title", ",", "T1.year", "FROM", "Movie", "AS", "T1", "JOIN", "Movie", "AS", "T2", "ON", "T1.director", "=", "T2.director", "WHERE", "T1.title", "!", "=", "T2.title"], "query_toks_no_value": ["select", "t1", ".", "title", ",", "t1", ".", "year", "from", "movie", "as", "t1", "join", "movie", "as", "t2", "on", "t1", ".", "director", "=", "t2", ".", "director", "where", "t1", ".", "title", "!", "=", "t2", ".", "title"], "question": "For directors who had more than one movie, return the titles and produced years of all movies directed by them.", "question_toks": ["For", "directors", "who", "had", "more", "than", "one", "movie", ",", "return", "the", "titles", "and", "produced", "years", "of", "all", "movies", "directed", "by", "them", "."], "guid": 7980}}
{"text": "TV_Channel: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option; TV_series: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel; Cartoon: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel | How many cartoons did each director create?", "sql": "SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by", "example": {"db_id": "tvshow", "query": "SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "Directed_by", "FROM", "cartoon", "GROUP", "BY", "Directed_by"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "directed_by", "from", "cartoon", "group", "by", "directed_by"], "question": "How many cartoons did each director create?", "question_toks": ["How", "many", "cartoons", "did", "each", "director", "create", "?"], "guid": 7981}}
{"text": "TV_Channel: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option; TV_series: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel; Cartoon: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel | What are the Package Options of the TV Channels whose series names are Sky Radio?", "sql": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";", "example": {"db_id": "tvshow", "query": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";", "query_toks": ["SELECT", "Package_Option", "FROM", "TV_Channel", "WHERE", "series_name", "=", "``", "Sky", "Radio", "''", ";"], "query_toks_no_value": ["select", "package_option", "from", "tv_channel", "where", "series_name", "=", "value"], "question": "What are the Package Options of the TV Channels whose series names are Sky Radio?", "question_toks": ["What", "are", "the", "Package", "Options", "of", "the", "TV", "Channels", "whose", "series", "names", "are", "Sky", "Radio", "?"], "guid": 7982}}
{"text": "program: Program_ID, Name, Origin, Launch, Owner; channel: Channel_ID, Name, Owner, Share_in_percent, Rating_in_percent; broadcast: Channel_ID, Program_ID, Time_of_day; broadcast_share: Channel_ID, Program_ID, Date, Share_in_percent | What are the name, origin and owner of each program?", "sql": "SELECT name ,  origin ,  OWNER FROM program", "example": {"db_id": "program_share", "query": "SELECT name ,  origin ,  OWNER FROM program", "query_toks": ["SELECT", "name", ",", "origin", ",", "OWNER", "FROM", "program"], "query_toks_no_value": ["select", "name", ",", "origin", ",", "owner", "from", "program"], "question": "What are the name, origin and owner of each program?", "question_toks": ["What", "are", "the", "name", ",", "origin", "and", "owner", "of", "each", "program", "?"], "guid": 7983}}
{"text": "film: Film_ID, Title, Studio, Director, Gross_in_dollar; market: Market_ID, Country, Number_cities; film_market_estimation: Estimation_ID, Low_Estimate, High_Estimate, Film_ID, Type, Market_ID, Year | How films are produced by each studio?", "sql": "SELECT Studio ,  COUNT(*) FROM film GROUP BY Studio", "example": {"db_id": "film_rank", "query": "SELECT Studio ,  COUNT(*) FROM film GROUP BY Studio", "query_toks": ["SELECT", "Studio", ",", "COUNT", "(", "*", ")", "FROM", "film", "GROUP", "BY", "Studio"], "query_toks_no_value": ["select", "studio", ",", "count", "(", "*", ")", "from", "film", "group", "by", "studio"], "question": "How films are produced by each studio?", "question_toks": ["How", "films", "are", "produced", "by", "each", "studio", "?"], "guid": 7984}}
{"text": "TV_Channel: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option; TV_series: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel; Cartoon: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel | What are 3 most highly rated episodes in the TV series table and what were those ratings?", "sql": "SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;", "example": {"db_id": "tvshow", "query": "SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;", "query_toks": ["SELECT", "Episode", ",", "Rating", "FROM", "TV_series", "ORDER", "BY", "Rating", "DESC", "LIMIT", "3", ";"], "query_toks_no_value": ["select", "episode", ",", "rating", "from", "tv_series", "order", "by", "rating", "desc", "limit", "value"], "question": "What are 3 most highly rated episodes in the TV series table and what were those ratings?", "question_toks": ["What", "are", "3", "most", "highly", "rated", "episodes", "in", "the", "TV", "series", "table", "and", "what", "were", "those", "ratings", "?"], "guid": 7985}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | Find all movies directed by \" Asghar Farhadi \" and featuring \" Taraneh Alidoosti \"", "sql": "SELECT t4.title FROM CAST AS t5 JOIN actor AS t1 ON t5.aid  =  t1.aid JOIN movie AS t4 ON t4.mid  =  t5.msid JOIN directed_by AS t2 ON t4.mid  =  t2.msid JOIN director AS t3 ON t3.did  =  t2.did WHERE t1.name  =  \"Taraneh Alidoosti\" AND t3.name  =  \"Asghar Farhadi\";", "example": {"db_id": "imdb", "query": "SELECT t4.title FROM CAST AS t5 JOIN actor AS t1 ON t5.aid  =  t1.aid JOIN movie AS t4 ON t4.mid  =  t5.msid JOIN directed_by AS t2 ON t4.mid  =  t2.msid JOIN director AS t3 ON t3.did  =  t2.did WHERE t1.name  =  \"Taraneh Alidoosti\" AND t3.name  =  \"Asghar Farhadi\";", "query_toks": ["SELECT", "t4.title", "FROM", "CAST", "AS", "t5", "JOIN", "actor", "AS", "t1", "ON", "t5.aid", "=", "t1.aid", "JOIN", "movie", "AS", "t4", "ON", "t4.mid", "=", "t5.msid", "JOIN", "directed_by", "AS", "t2", "ON", "t4.mid", "=", "t2.msid", "JOIN", "director", "AS", "t3", "ON", "t3.did", "=", "t2.did", "WHERE", "t1.name", "=", "``", "Taraneh", "Alidoosti", "''", "AND", "t3.name", "=", "``", "Asghar", "Farhadi", "''", ";"], "query_toks_no_value": ["select", "t4", ".", "title", "from", "cast", "as", "t5", "join", "actor", "as", "t1", "on", "t5", ".", "aid", "=", "t1", ".", "aid", "join", "movie", "as", "t4", "on", "t4", ".", "mid", "=", "t5", ".", "msid", "join", "directed_by", "as", "t2", "on", "t4", ".", "mid", "=", "t2", ".", "msid", "join", "director", "as", "t3", "on", "t3", ".", "did", "=", "t2", ".", "did", "where", "t1", ".", "name", "=", "value", "and", "t3", ".", "name", "=", "value"], "question": "Find all movies directed by \" Asghar Farhadi \" and featuring \" Taraneh Alidoosti \"", "question_toks": ["Find", "all", "movies", "directed", "by", "``", "Asghar", "Farhadi", "``", "and", "featuring", "``", "Taraneh", "Alidoosti", "``"], "guid": 7986}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Dorm: dormid, dorm_name, student_capacity, gender; Dorm_amenity: amenid, amenity_name; Has_amenity: dormid, amenid; Lives_in: stuid, dormid, room_number | Find the name of amenities Smith Hall dorm have. ordered the results by amenity names.", "sql": "SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T1.dorm_name  =  'Smith Hall' ORDER BY T3.amenity_name", "example": {"db_id": "dorm_1", "query": "SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T1.dorm_name  =  'Smith Hall' ORDER BY T3.amenity_name", "query_toks": ["SELECT", "T3.amenity_name", "FROM", "dorm", "AS", "T1", "JOIN", "has_amenity", "AS", "T2", "ON", "T1.dormid", "=", "T2.dormid", "JOIN", "dorm_amenity", "AS", "T3", "ON", "T2.amenid", "=", "T3.amenid", "WHERE", "T1.dorm_name", "=", "'Smith", "Hall", "'", "ORDER", "BY", "T3.amenity_name"], "query_toks_no_value": ["select", "t3", ".", "amenity_name", "from", "dorm", "as", "t1", "join", "has_amenity", "as", "t2", "on", "t1", ".", "dormid", "=", "t2", ".", "dormid", "join", "dorm_amenity", "as", "t3", "on", "t2", ".", "amenid", "=", "t3", ".", "amenid", "where", "t1", ".", "dorm_name", "=", "value", "order", "by", "t3", ".", "amenity_name"], "question": "Find the name of amenities Smith Hall dorm have. ordered the results by amenity names.", "question_toks": ["Find", "the", "name", "of", "amenities", "Smith", "Hall", "dorm", "have", ".", "ordered", "the", "results", "by", "amenity", "names", "."], "guid": 1311}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Dorm: dormid, dorm_name, student_capacity, gender; Dorm_amenity: amenid, amenity_name; Has_amenity: dormid, amenid; Lives_in: stuid, dormid, room_number | What are the amenities in alphabetical order that Anonymous Donor Hall has?", "sql": "SELECT T1.amenity_name FROM dorm_amenity AS T1 JOIN has_amenity AS T2 ON T2.amenid  =  T1.amenid JOIN dorm AS T3 ON T2.dormid  =  T3.dormid WHERE T3.dorm_name  =  'Anonymous Donor Hall' ORDER BY T1.amenity_name", "example": {"db_id": "dorm_1", "query": "SELECT T1.amenity_name FROM dorm_amenity AS T1 JOIN has_amenity AS T2 ON T2.amenid  =  T1.amenid JOIN dorm AS T3 ON T2.dormid  =  T3.dormid WHERE T3.dorm_name  =  'Anonymous Donor Hall' ORDER BY T1.amenity_name", "query_toks": ["SELECT", "T1.amenity_name", "FROM", "dorm_amenity", "AS", "T1", "JOIN", "has_amenity", "AS", "T2", "ON", "T2.amenid", "=", "T1.amenid", "JOIN", "dorm", "AS", "T3", "ON", "T2.dormid", "=", "T3.dormid", "WHERE", "T3.dorm_name", "=", "'Anonymous", "Donor", "Hall", "'", "ORDER", "BY", "T1.amenity_name"], "query_toks_no_value": ["select", "t1", ".", "amenity_name", "from", "dorm_amenity", "as", "t1", "join", "has_amenity", "as", "t2", "on", "t2", ".", "amenid", "=", "t1", ".", "amenid", "join", "dorm", "as", "t3", "on", "t2", ".", "dormid", "=", "t3", ".", "dormid", "where", "t3", ".", "dorm_name", "=", "value", "order", "by", "t1", ".", "amenity_name"], "question": "What are the amenities in alphabetical order that Anonymous Donor Hall has?", "question_toks": ["What", "are", "the", "amenities", "in", "alphabetical", "order", "that", "Anonymous", "Donor", "Hall", "has", "?"], "guid": 1312}}
{"text": "Activity: actid, activity_name; Participates_in: stuid, actid; Faculty_Participates_in: FacID, actid; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building | List all the activities we have.", "sql": "SELECT activity_name FROM Activity", "example": {"db_id": "activity_1", "query": "SELECT activity_name FROM Activity", "query_toks": ["SELECT", "activity_name", "FROM", "Activity"], "query_toks_no_value": ["select", "activity_name", "from", "activity"], "question": "List all the activities we have.", "question_toks": ["List", "all", "the", "activities", "we", "have", "."], "guid": 1313}}
{"text": "list: LastName, FirstName, Grade, Classroom; teachers: LastName, FirstName, Classroom | Which teachers teach in classroom 110? Give me their first names.", "sql": "SELECT firstname FROM teachers WHERE classroom  =  110", "example": {"db_id": "student_1", "query": "SELECT firstname FROM teachers WHERE classroom  =  110", "query_toks": ["SELECT", "firstname", "FROM", "teachers", "WHERE", "classroom", "=", "110"], "query_toks_no_value": ["select", "firstname", "from", "teachers", "where", "classroom", "=", "value"], "question": "Which teachers teach in classroom 110? Give me their first names.", "question_toks": ["Which", "teachers", "teach", "in", "classroom", "110", "?", "Give", "me", "their", "first", "names", "."], "guid": 1314}}
{"text": "list: LastName, FirstName, Grade, Classroom; teachers: LastName, FirstName, Classroom | Which classrooms are used by grade 5?", "sql": "SELECT DISTINCT classroom FROM list WHERE grade  =  5", "example": {"db_id": "student_1", "query": "SELECT DISTINCT classroom FROM list WHERE grade  =  5", "query_toks": ["SELECT", "DISTINCT", "classroom", "FROM", "list", "WHERE", "grade", "=", "5"], "query_toks_no_value": ["select", "distinct", "classroom", "from", "list", "where", "grade", "=", "value"], "question": "Which classrooms are used by grade 5?", "question_toks": ["Which", "classrooms", "are", "used", "by", "grade", "5", "?"], "guid": 1315}}
{"text": "Course_Authors_and_Tutors: author_id, author_tutor_ATB, login_name, password, personal_name, middle_name, family_name, gender_mf, address_line_1; Students: student_id, date_of_registration, date_of_latest_logon, login_name, password, personal_name, middle_name, family_name; Subjects: subject_id, subject_name; Courses: course_id, author_id, subject_id, course_name, course_description; Student_Course_Enrolment: registration_id, student_id, course_id, date_of_enrolment, date_of_completion; Student_Tests_Taken: registration_id, date_test_taken, test_result | Find the latest logon date of the students whose family name is \"Jaskolski\" or \"Langosh\".", "sql": "SELECT date_of_latest_logon FROM Students WHERE family_name  =  \"Jaskolski\" OR family_name  =  \"Langosh\"", "example": {"db_id": "e_learning", "query": "SELECT date_of_latest_logon FROM Students WHERE family_name  =  \"Jaskolski\" OR family_name  =  \"Langosh\"", "query_toks": ["SELECT", "date_of_latest_logon", "FROM", "Students", "WHERE", "family_name", "=", "``", "Jaskolski", "''", "OR", "family_name", "=", "``", "Langosh", "''"], "query_toks_no_value": ["select", "date_of_latest_logon", "from", "students", "where", "family_name", "=", "value", "or", "family_name", "=", "value"], "question": "Find the latest logon date of the students whose family name is \"Jaskolski\" or \"Langosh\".", "question_toks": ["Find", "the", "latest", "logon", "date", "of", "the", "students", "whose", "family", "name", "is", "``", "Jaskolski", "''", "or", "``", "Langosh", "''", "."], "guid": 1316}}
{"text": "Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Courses: course_id, course_name, course_description, other_details; Departments: department_id, department_name, department_description, other_details; Degree_Programs: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details; Sections: section_id, course_id, section_name, section_description, other_details; Semesters: semester_id, semester_name, semester_description, other_details; Students: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered; Student_Enrolment: student_enrolment_id, degree_program_id, semester_id, student_id, other_details; Student_Enrolment_Courses: student_course_id, course_id, student_enrolment_id; Transcripts: transcript_id, transcript_date, other_details | What is the degree summary name that has the most number of students enrolled?", "sql": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "student_transcripts_tracking", "query": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.degree_summary_name", "FROM", "Degree_Programs", "AS", "T1", "JOIN", "Student_Enrolment", "AS", "T2", "ON", "T1.degree_program_id", "=", "T2.degree_program_id", "GROUP", "BY", "T1.degree_summary_name", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "degree_summary_name", "from", "degree_programs", "as", "t1", "join", "student_enrolment", "as", "t2", "on", "t1", ".", "degree_program_id", "=", "t2", ".", "degree_program_id", "group", "by", "t1", ".", "degree_summary_name", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the degree summary name that has the most number of students enrolled?", "question_toks": ["What", "is", "the", "degree", "summary", "name", "that", "has", "the", "most", "number", "of", "students", "enrolled", "?"], "guid": 1317}}
{"text": "Activity: actid, activity_name; Participates_in: stuid, actid; Faculty_Participates_in: FacID, actid; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building | What are ids of the faculty members who not only participate in an activity but also advise a student.", "sql": "SELECT FacID FROM Faculty_participates_in INTERSECT SELECT advisor FROM Student", "example": {"db_id": "activity_1", "query": "SELECT FacID FROM Faculty_participates_in INTERSECT SELECT advisor FROM Student", "query_toks": ["SELECT", "FacID", "FROM", "Faculty_participates_in", "INTERSECT", "SELECT", "advisor", "FROM", "Student"], "query_toks_no_value": ["select", "facid", "from", "faculty_participates_in", "intersect", "select", "advisor", "from", "student"], "question": "What are ids of the faculty members who not only participate in an activity but also advise a student.", "question_toks": ["What", "are", "ids", "of", "the", "faculty", "members", "who", "not", "only", "participate", "in", "an", "activity", "but", "also", "advise", "a", "student", "."], "guid": 1318}}
{"text": "Activity: actid, activity_name; Participates_in: stuid, actid; Faculty_Participates_in: FacID, actid; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building | What is the first and last name of the faculty members who participated in at least one activity? For each of them, also show the number of activities they participated in.", "sql": "SELECT  T1.fname ,  T1.lname ,  count(*) ,  T1.FacID FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID GROUP BY T1.FacID", "example": {"db_id": "activity_1", "query": "SELECT  T1.fname ,  T1.lname ,  count(*) ,  T1.FacID FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID GROUP BY T1.FacID", "query_toks": ["SELECT", "T1.fname", ",", "T1.lname", ",", "count", "(", "*", ")", ",", "T1.FacID", "FROM", "Faculty", "AS", "T1", "JOIN", "Faculty_participates_in", "AS", "T2", "ON", "T1.facID", "=", "T2.facID", "GROUP", "BY", "T1.FacID"], "query_toks_no_value": ["select", "t1", ".", "fname", ",", "t1", ".", "lname", ",", "count", "(", "*", ")", ",", "t1", ".", "facid", "from", "faculty", "as", "t1", "join", "faculty_participates_in", "as", "t2", "on", "t1", ".", "facid", "=", "t2", ".", "facid", "group", "by", "t1", ".", "facid"], "question": "What is the first and last name of the faculty members who participated in at least one activity? For each of them, also show the number of activities they participated in.", "question_toks": ["What", "is", "the", "first", "and", "last", "name", "of", "the", "faculty", "members", "who", "participated", "in", "at", "least", "one", "activity", "?", "For", "each", "of", "them", ",", "also", "show", "the", "number", "of", "activities", "they", "participated", "in", "."], "guid": 1319}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Dorm: dormid, dorm_name, student_capacity, gender; Dorm_amenity: amenid, amenity_name; Has_amenity: dormid, amenid; Lives_in: stuid, dormid, room_number | How many students are from each city, and which cities have more than one cities?", "sql": "SELECT count(*) ,  city_code FROM student GROUP BY city_code HAVING count(*)  >  1", "example": {"db_id": "dorm_1", "query": "SELECT count(*) ,  city_code FROM student GROUP BY city_code HAVING count(*)  >  1", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "city_code", "FROM", "student", "GROUP", "BY", "city_code", "HAVING", "count", "(", "*", ")", ">", "1"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "city_code", "from", "student", "group", "by", "city_code", "having", "count", "(", "*", ")", ">", "value"], "question": "How many students are from each city, and which cities have more than one cities?", "question_toks": ["How", "many", "students", "are", "from", "each", "city", ",", "and", "which", "cities", "have", "more", "than", "one", "cities", "?"], "guid": 1320}}
{"text": "list: LastName, FirstName, Grade, Classroom; teachers: LastName, FirstName, Classroom | Which teachers teach the student named EVELINA BROMLEY? Give me the first and last name  of the teachers.", "sql": "SELECT T2.firstname ,  T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"EVELINA\" AND T1.lastname  =  \"BROMLEY\"", "example": {"db_id": "student_1", "query": "SELECT T2.firstname ,  T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"EVELINA\" AND T1.lastname  =  \"BROMLEY\"", "query_toks": ["SELECT", "T2.firstname", ",", "T2.lastname", "FROM", "list", "AS", "T1", "JOIN", "teachers", "AS", "T2", "ON", "T1.classroom", "=", "T2.classroom", "WHERE", "T1.firstname", "=", "``", "EVELINA", "''", "AND", "T1.lastname", "=", "``", "BROMLEY", "''"], "query_toks_no_value": ["select", "t2", ".", "firstname", ",", "t2", ".", "lastname", "from", "list", "as", "t1", "join", "teachers", "as", "t2", "on", "t1", ".", "classroom", "=", "t2", ".", "classroom", "where", "t1", ".", "firstname", "=", "value", "and", "t1", ".", "lastname", "=", "value"], "question": "Which teachers teach the student named EVELINA BROMLEY? Give me the first and last name  of the teachers.", "question_toks": ["Which", "teachers", "teach", "the", "student", "named", "EVELINA", "BROMLEY", "?", "Give", "me", "the", "first", "and", "last", "name", "of", "the", "teachers", "."], "guid": 1321}}
{"text": "Activity: actid, activity_name; Participates_in: stuid, actid; Faculty_Participates_in: FacID, actid; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building | Show the first and last name of all the faculty members who participated in some activity, together with the number of activities they participated in.", "sql": "SELECT  T1.fname ,  T1.lname ,  count(*) ,  T1.FacID FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID GROUP BY T1.FacID", "example": {"db_id": "activity_1", "query": "SELECT  T1.fname ,  T1.lname ,  count(*) ,  T1.FacID FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID GROUP BY T1.FacID", "query_toks": ["SELECT", "T1.fname", ",", "T1.lname", ",", "count", "(", "*", ")", ",", "T1.FacID", "FROM", "Faculty", "AS", "T1", "JOIN", "Faculty_participates_in", "AS", "T2", "ON", "T1.facID", "=", "T2.facID", "GROUP", "BY", "T1.FacID"], "query_toks_no_value": ["select", "t1", ".", "fname", ",", "t1", ".", "lname", ",", "count", "(", "*", ")", ",", "t1", ".", "facid", "from", "faculty", "as", "t1", "join", "faculty_participates_in", "as", "t2", "on", "t1", ".", "facid", "=", "t2", ".", "facid", "group", "by", "t1", ".", "facid"], "question": "Show the first and last name of all the faculty members who participated in some activity, together with the number of activities they participated in.", "question_toks": ["Show", "the", "first", "and", "last", "name", "of", "all", "the", "faculty", "members", "who", "participated", "in", "some", "activity", ",", "together", "with", "the", "number", "of", "activities", "they", "participated", "in", "."], "guid": 1322}}
{"text": "Activity: actid, activity_name; Participates_in: stuid, actid; Faculty_Participates_in: FacID, actid; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building | Find the name of the activity that has the largest number of student participants.", "sql": "SELECT T1.activity_name FROM Activity AS T1 JOIN Participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "activity_1", "query": "SELECT T1.activity_name FROM Activity AS T1 JOIN Participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.activity_name", "FROM", "Activity", "AS", "T1", "JOIN", "Participates_in", "AS", "T2", "ON", "T1.actID", "=", "T2.actID", "GROUP", "BY", "T1.actID", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "activity_name", "from", "activity", "as", "t1", "join", "participates_in", "as", "t2", "on", "t1", ".", "actid", "=", "t2", ".", "actid", "group", "by", "t1", ".", "actid", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Find the name of the activity that has the largest number of student participants.", "question_toks": ["Find", "the", "name", "of", "the", "activity", "that", "has", "the", "largest", "number", "of", "student", "participants", "."], "guid": 1323}}
{"text": "Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Courses: course_id, course_name, course_description, other_details; Departments: department_id, department_name, department_description, other_details; Degree_Programs: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details; Sections: section_id, course_id, section_name, section_description, other_details; Semesters: semester_id, semester_name, semester_description, other_details; Students: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered; Student_Enrolment: student_enrolment_id, degree_program_id, semester_id, student_id, other_details; Student_Enrolment_Courses: student_course_id, course_id, student_enrolment_id; Transcripts: transcript_id, transcript_date, other_details | Find the kind of program which most number of students are enrolled in?", "sql": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "student_transcripts_tracking", "query": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.degree_summary_name", "FROM", "Degree_Programs", "AS", "T1", "JOIN", "Student_Enrolment", "AS", "T2", "ON", "T1.degree_program_id", "=", "T2.degree_program_id", "GROUP", "BY", "T1.degree_summary_name", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "degree_summary_name", "from", "degree_programs", "as", "t1", "join", "student_enrolment", "as", "t2", "on", "t1", ".", "degree_program_id", "=", "t2", ".", "degree_program_id", "group", "by", "t1", ".", "degree_summary_name", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Find the kind of program which most number of students are enrolled in?", "question_toks": ["Find", "the", "kind", "of", "program", "which", "most", "number", "of", "students", "are", "enrolled", "in", "?"], "guid": 1324}}
{"text": "Addresses: address_id, line_1, line_2, city, zip_postcode, state_province_county, country; People: person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password; Students: student_id, student_details; Courses: course_id, course_name, course_description, other_details; People_Addresses: person_address_id, person_id, address_id, date_from, date_to; Student_Course_Registrations: student_id, course_id, registration_date; Student_Course_Attendance: student_id, course_id, date_of_attendance; Candidates: candidate_id, candidate_details; Candidate_Assessments: candidate_id, qualification, assessment_date, asessment_outcome_code | What is detail of the student who most recently registered course?", "sql": "SELECT T2.student_details FROM student_course_registrations AS T1 JOIN students AS T2 ON T1.student_id = T2.student_id ORDER BY T1.registration_date DESC LIMIT 1", "example": {"db_id": "student_assessment", "query": "SELECT T2.student_details FROM student_course_registrations AS T1 JOIN students AS T2 ON T1.student_id = T2.student_id ORDER BY T1.registration_date DESC LIMIT 1", "query_toks": ["SELECT", "T2.student_details", "FROM", "student_course_registrations", "AS", "T1", "JOIN", "students", "AS", "T2", "ON", "T1.student_id", "=", "T2.student_id", "ORDER", "BY", "T1.registration_date", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "student_details", "from", "student_course_registrations", "as", "t1", "join", "students", "as", "t2", "on", "t1", ".", "student_id", "=", "t2", ".", "student_id", "order", "by", "t1", ".", "registration_date", "desc", "limit", "value"], "question": "What is detail of the student who most recently registered course?", "question_toks": ["What", "is", "detail", "of", "the", "student", "who", "most", "recently", "registered", "course", "?"], "guid": 1325}}
{"text": "Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Courses: course_id, course_name, course_description, other_details; Departments: department_id, department_name, department_description, other_details; Degree_Programs: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details; Sections: section_id, course_id, section_name, section_description, other_details; Semesters: semester_id, semester_name, semester_description, other_details; Students: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered; Student_Enrolment: student_enrolment_id, degree_program_id, semester_id, student_id, other_details; Student_Enrolment_Courses: student_course_id, course_id, student_enrolment_id; Transcripts: transcript_id, transcript_date, other_details | How many transcripts are listed?", "sql": "SELECT count(*) FROM Transcripts", "example": {"db_id": "student_transcripts_tracking", "query": "SELECT count(*) FROM Transcripts", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Transcripts"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "transcripts"], "question": "How many transcripts are listed?", "question_toks": ["How", "many", "transcripts", "are", "listed", "?"], "guid": 1326}}
{"text": "Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Courses: course_id, course_name, course_description, other_details; Departments: department_id, department_name, department_description, other_details; Degree_Programs: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details; Sections: section_id, course_id, section_name, section_description, other_details; Semesters: semester_id, semester_name, semester_description, other_details; Students: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered; Student_Enrolment: student_enrolment_id, degree_program_id, semester_id, student_id, other_details; Student_Enrolment_Courses: student_course_id, course_id, student_enrolment_id; Transcripts: transcript_id, transcript_date, other_details | what are all the addresses including line 1 and line 2?", "sql": "SELECT line_1 ,  line_2 FROM addresses", "example": {"db_id": "student_transcripts_tracking", "query": "SELECT line_1 ,  line_2 FROM addresses", "query_toks": ["SELECT", "line_1", ",", "line_2", "FROM", "addresses"], "query_toks_no_value": ["select", "line_1", ",", "line_2", "from", "addresses"], "question": "what are all the addresses including line 1 and line 2?", "question_toks": ["what", "are", "all", "the", "addresses", "including", "line", "1", "and", "line", "2", "?"], "guid": 1327}}
{"text": "list: LastName, FirstName, Grade, Classroom; teachers: LastName, FirstName, Classroom | List the first names of all the students in room 107.", "sql": "SELECT DISTINCT firstname FROM list WHERE classroom  =  107", "example": {"db_id": "student_1", "query": "SELECT DISTINCT firstname FROM list WHERE classroom  =  107", "query_toks": ["SELECT", "DISTINCT", "firstname", "FROM", "list", "WHERE", "classroom", "=", "107"], "query_toks_no_value": ["select", "distinct", "firstname", "from", "list", "where", "classroom", "=", "value"], "question": "List the first names of all the students in room 107.", "question_toks": ["List", "the", "first", "names", "of", "all", "the", "students", "in", "room", "107", "."], "guid": 1328}}
{"text": "course: Course_ID, Staring_Date, Course; teacher: Teacher_ID, Name, Age, Hometown; course_arrange: Course_ID, Teacher_ID, Grade | What are the towns from which at least two teachers come from?", "sql": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2", "example": {"db_id": "course_teach", "query": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2", "query_toks": ["SELECT", "Hometown", "FROM", "teacher", "GROUP", "BY", "Hometown", "HAVING", "COUNT", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "hometown", "from", "teacher", "group", "by", "hometown", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "What are the towns from which at least two teachers come from?", "question_toks": ["What", "are", "the", "towns", "from", "which", "at", "least", "two", "teachers", "come", "from", "?"], "guid": 1329}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Dorm: dormid, dorm_name, student_capacity, gender; Dorm_amenity: amenid, amenity_name; Has_amenity: dormid, amenid; Lives_in: stuid, dormid, room_number | What is the last name of every student who is either female or living in a city with the code BAL or male and under 20?", "sql": "SELECT lname FROM student WHERE sex  =  'F' AND city_code  =  'BAL' UNION SELECT lname FROM student WHERE sex  =  'M' AND age  <  20", "example": {"db_id": "dorm_1", "query": "SELECT lname FROM student WHERE sex  =  'F' AND city_code  =  'BAL' UNION SELECT lname FROM student WHERE sex  =  'M' AND age  <  20", "query_toks": ["SELECT", "lname", "FROM", "student", "WHERE", "sex", "=", "'F", "'", "AND", "city_code", "=", "'BAL", "'", "UNION", "SELECT", "lname", "FROM", "student", "WHERE", "sex", "=", "'M", "'", "AND", "age", "<", "20"], "query_toks_no_value": ["select", "lname", "from", "student", "where", "sex", "=", "value", "and", "city_code", "=", "value", "union", "select", "lname", "from", "student", "where", "sex", "=", "value", "and", "age", "<", "value"], "question": "What is the last name of every student who is either female or living in a city with the code BAL or male and under 20?", "question_toks": ["What", "is", "the", "last", "name", "of", "every", "student", "who", "is", "either", "female", "or", "living", "in", "a", "city", "with", "the", "code", "BAL", "or", "male", "and", "under", "20", "?"], "guid": 1330}}
{"text": "Course_Authors_and_Tutors: author_id, author_tutor_ATB, login_name, password, personal_name, middle_name, family_name, gender_mf, address_line_1; Students: student_id, date_of_registration, date_of_latest_logon, login_name, password, personal_name, middle_name, family_name; Subjects: subject_id, subject_name; Courses: course_id, author_id, subject_id, course_name, course_description; Student_Course_Enrolment: registration_id, student_id, course_id, date_of_enrolment, date_of_completion; Student_Tests_Taken: registration_id, date_test_taken, test_result | Find the addresses and author IDs of the course authors that teach at least two courses.", "sql": "SELECT T1.address_line_1 ,  T2.author_id FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id GROUP BY T2.author_id HAVING Count(*)  >=  2", "example": {"db_id": "e_learning", "query": "SELECT T1.address_line_1 ,  T2.author_id FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id GROUP BY T2.author_id HAVING Count(*)  >=  2", "query_toks": ["SELECT", "T1.address_line_1", ",", "T2.author_id", "FROM", "Course_Authors_and_Tutors", "AS", "T1", "JOIN", "Courses", "AS", "T2", "ON", "T1.author_id", "=", "T2.author_id", "GROUP", "BY", "T2.author_id", "HAVING", "Count", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "t1", ".", "address_line_1", ",", "t2", ".", "author_id", "from", "course_authors_and_tutors", "as", "t1", "join", "courses", "as", "t2", "on", "t1", ".", "author_id", "=", "t2", ".", "author_id", "group", "by", "t2", ".", "author_id", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "Find the addresses and author IDs of the course authors that teach at least two courses.", "question_toks": ["Find", "the", "addresses", "and", "author", "IDs", "of", "the", "course", "authors", "that", "teach", "at", "least", "two", "courses", "."], "guid": 1331}}
{"text": "list: LastName, FirstName, Grade, Classroom; teachers: LastName, FirstName, Classroom | Find all students taught by MARROTTE KIRK. Output first and last names of students.", "sql": "SELECT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"MARROTTE\" AND T2.lastname  =  \"KIRK\"", "example": {"db_id": "student_1", "query": "SELECT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"MARROTTE\" AND T2.lastname  =  \"KIRK\"", "query_toks": ["SELECT", "T1.firstname", ",", "T1.lastname", "FROM", "list", "AS", "T1", "JOIN", "teachers", "AS", "T2", "ON", "T1.classroom", "=", "T2.classroom", "WHERE", "T2.firstname", "=", "``", "MARROTTE", "''", "AND", "T2.lastname", "=", "``", "KIRK", "''"], "query_toks_no_value": ["select", "t1", ".", "firstname", ",", "t1", ".", "lastname", "from", "list", "as", "t1", "join", "teachers", "as", "t2", "on", "t1", ".", "classroom", "=", "t2", ".", "classroom", "where", "t2", ".", "firstname", "=", "value", "and", "t2", ".", "lastname", "=", "value"], "question": "Find all students taught by MARROTTE KIRK. Output first and last names of students.", "question_toks": ["Find", "all", "students", "taught", "by", "MARROTTE", "KIRK", ".", "Output", "first", "and", "last", "names", "of", "students", "."], "guid": 1332}}
{"text": "course: Course_ID, Staring_Date, Course; teacher: Teacher_ID, Name, Age, Hometown; course_arrange: Course_ID, Teacher_ID, Grade | Show names of teachers that teach at least two courses.", "sql": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2", "example": {"db_id": "course_teach", "query": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2", "query_toks": ["SELECT", "T2.Name", "FROM", "course_arrange", "AS", "T1", "JOIN", "teacher", "AS", "T2", "ON", "T1.Teacher_ID", "=", "T2.Teacher_ID", "GROUP", "BY", "T2.Name", "HAVING", "COUNT", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "course_arrange", "as", "t1", "join", "teacher", "as", "t2", "on", "t1", ".", "teacher_id", "=", "t2", ".", "teacher_id", "group", "by", "t2", ".", "name", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "Show names of teachers that teach at least two courses.", "question_toks": ["Show", "names", "of", "teachers", "that", "teach", "at", "least", "two", "courses", "."], "guid": 1333}}
{"text": "Addresses: address_id, line_1, line_2, city, zip_postcode, state_province_county, country; People: person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password; Students: student_id, student_details; Courses: course_id, course_name, course_description, other_details; People_Addresses: person_address_id, person_id, address_id, date_from, date_to; Student_Course_Registrations: student_id, course_id, registration_date; Student_Course_Attendance: student_id, course_id, date_of_attendance; Candidates: candidate_id, candidate_details; Candidate_Assessments: candidate_id, qualification, assessment_date, asessment_outcome_code | What are the details of the student who registered for the most number of courses?", "sql": "SELECT T1.student_details FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "student_assessment", "query": "SELECT T1.student_details FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.student_details", "FROM", "students", "AS", "T1", "JOIN", "student_course_registrations", "AS", "T2", "ON", "T1.student_id", "=", "T2.student_id", "GROUP", "BY", "T1.student_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "student_details", "from", "students", "as", "t1", "join", "student_course_registrations", "as", "t2", "on", "t1", ".", "student_id", "=", "t2", ".", "student_id", "group", "by", "t1", ".", "student_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What are the details of the student who registered for the most number of courses?", "question_toks": ["What", "are", "the", "details", "of", "the", "student", "who", "registered", "for", "the", "most", "number", "of", "courses", "?"], "guid": 1334}}
{"text": "Course_Authors_and_Tutors: author_id, author_tutor_ATB, login_name, password, personal_name, middle_name, family_name, gender_mf, address_line_1; Students: student_id, date_of_registration, date_of_latest_logon, login_name, password, personal_name, middle_name, family_name; Subjects: subject_id, subject_name; Courses: course_id, author_id, subject_id, course_name, course_description; Student_Course_Enrolment: registration_id, student_id, course_id, date_of_enrolment, date_of_completion; Student_Tests_Taken: registration_id, date_test_taken, test_result | List the name and the number of enrolled student for each course.", "sql": "SELECT T1.course_name ,  COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name", "example": {"db_id": "e_learning", "query": "SELECT T1.course_name ,  COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name", "query_toks": ["SELECT", "T1.course_name", ",", "COUNT", "(", "*", ")", "FROM", "Courses", "AS", "T1", "JOIN", "Student_Course_Enrolment", "AS", "T2", "ON", "T1.course_id", "=", "T2.course_id", "GROUP", "BY", "T1.course_name"], "query_toks_no_value": ["select", "t1", ".", "course_name", ",", "count", "(", "*", ")", "from", "courses", "as", "t1", "join", "student_course_enrolment", "as", "t2", "on", "t1", ".", "course_id", "=", "t2", ".", "course_id", "group", "by", "t1", ".", "course_name"], "question": "List the name and the number of enrolled student for each course.", "question_toks": ["List", "the", "name", "and", "the", "number", "of", "enrolled", "student", "for", "each", "course", "."], "guid": 1335}}
{"text": "Addresses: address_id, line_1, line_2, city, zip_postcode, state_province_county, country; People: person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password; Students: student_id, student_details; Courses: course_id, course_name, course_description, other_details; People_Addresses: person_address_id, person_id, address_id, date_from, date_to; Student_Course_Registrations: student_id, course_id, registration_date; Student_Course_Attendance: student_id, course_id, date_of_attendance; Candidates: candidate_id, candidate_details; Candidate_Assessments: candidate_id, qualification, assessment_date, asessment_outcome_code | List the id of students who never attends courses?", "sql": "SELECT student_id FROM students WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)", "example": {"db_id": "student_assessment", "query": "SELECT student_id FROM students WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)", "query_toks": ["SELECT", "student_id", "FROM", "students", "WHERE", "student_id", "NOT", "IN", "(", "SELECT", "student_id", "FROM", "student_course_attendance", ")"], "query_toks_no_value": ["select", "student_id", "from", "students", "where", "student_id", "not", "in", "(", "select", "student_id", "from", "student_course_attendance", ")"], "question": "List the id of students who never attends courses?", "question_toks": ["List", "the", "id", "of", "students", "who", "never", "attends", "courses", "?"], "guid": 1336}}
{"text": "list: LastName, FirstName, Grade, Classroom; teachers: LastName, FirstName, Classroom | Find the first and last name of all the teachers that teach EVELINA BROMLEY.", "sql": "SELECT T2.firstname ,  T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"EVELINA\" AND T1.lastname  =  \"BROMLEY\"", "example": {"db_id": "student_1", "query": "SELECT T2.firstname ,  T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"EVELINA\" AND T1.lastname  =  \"BROMLEY\"", "query_toks": ["SELECT", "T2.firstname", ",", "T2.lastname", "FROM", "list", "AS", "T1", "JOIN", "teachers", "AS", "T2", "ON", "T1.classroom", "=", "T2.classroom", "WHERE", "T1.firstname", "=", "``", "EVELINA", "''", "AND", "T1.lastname", "=", "``", "BROMLEY", "''"], "query_toks_no_value": ["select", "t2", ".", "firstname", ",", "t2", ".", "lastname", "from", "list", "as", "t1", "join", "teachers", "as", "t2", "on", "t1", ".", "classroom", "=", "t2", ".", "classroom", "where", "t1", ".", "firstname", "=", "value", "and", "t1", ".", "lastname", "=", "value"], "question": "Find the first and last name of all the teachers that teach EVELINA BROMLEY.", "question_toks": ["Find", "the", "first", "and", "last", "name", "of", "all", "the", "teachers", "that", "teach", "EVELINA", "BROMLEY", "."], "guid": 1337}}
{"text": "Course_Authors_and_Tutors: author_id, author_tutor_ATB, login_name, password, personal_name, middle_name, family_name, gender_mf, address_line_1; Students: student_id, date_of_registration, date_of_latest_logon, login_name, password, personal_name, middle_name, family_name; Subjects: subject_id, subject_name; Courses: course_id, author_id, subject_id, course_name, course_description; Student_Course_Enrolment: registration_id, student_id, course_id, date_of_enrolment, date_of_completion; Student_Tests_Taken: registration_id, date_test_taken, test_result | What is the name of each course and the corresponding number of student enrollment?", "sql": "SELECT T1.course_name ,  COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name", "example": {"db_id": "e_learning", "query": "SELECT T1.course_name ,  COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name", "query_toks": ["SELECT", "T1.course_name", ",", "COUNT", "(", "*", ")", "FROM", "Courses", "AS", "T1", "JOIN", "Student_Course_Enrolment", "AS", "T2", "ON", "T1.course_id", "=", "T2.course_id", "GROUP", "BY", "T1.course_name"], "query_toks_no_value": ["select", "t1", ".", "course_name", ",", "count", "(", "*", ")", "from", "courses", "as", "t1", "join", "student_course_enrolment", "as", "t2", "on", "t1", ".", "course_id", "=", "t2", ".", "course_id", "group", "by", "t1", ".", "course_name"], "question": "What is the name of each course and the corresponding number of student enrollment?", "question_toks": ["What", "is", "the", "name", "of", "each", "course", "and", "the", "corresponding", "number", "of", "student", "enrollment", "?"], "guid": 1338}}
{"text": "list: LastName, FirstName, Grade, Classroom; teachers: LastName, FirstName, Classroom | How many students are there?", "sql": "SELECT count(*) FROM list", "example": {"db_id": "student_1", "query": "SELECT count(*) FROM list", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "list"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "list"], "question": "How many students are there?", "question_toks": ["How", "many", "students", "are", "there", "?"], "guid": 1339}}
{"text": "school: School_ID, School, Location, Enrollment, Founded, Denomination, Boys_or_Girls, Day_or_Boarding, Year_Entered_Competition, School_Colors; school_details: School_ID, Nickname, Colors, League, Class, Division; school_performance: School_Id, School_Year, Class_A, Class_AA; player: Player_ID, Player, Team, Age, Position, School_ID | Which schools do not have any player? Give me the school locations.", "sql": "SELECT LOCATION FROM school WHERE School_ID NOT IN (SELECT School_ID FROM Player)", "example": {"db_id": "school_player", "query": "SELECT LOCATION FROM school WHERE School_ID NOT IN (SELECT School_ID FROM Player)", "query_toks": ["SELECT", "LOCATION", "FROM", "school", "WHERE", "School_ID", "NOT", "IN", "(", "SELECT", "School_ID", "FROM", "Player", ")"], "query_toks_no_value": ["select", "location", "from", "school", "where", "school_id", "not", "in", "(", "select", "school_id", "from", "player", ")"], "question": "Which schools do not have any player? Give me the school locations.", "question_toks": ["Which", "schools", "do", "not", "have", "any", "player", "?", "Give", "me", "the", "school", "locations", "."], "guid": 1340}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Dorm: dormid, dorm_name, student_capacity, gender; Dorm_amenity: amenid, amenity_name; Has_amenity: dormid, amenid; Lives_in: stuid, dormid, room_number | How many students are there?", "sql": "SELECT count(*) FROM student", "example": {"db_id": "dorm_1", "query": "SELECT count(*) FROM student", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "student"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "student"], "question": "How many students are there?", "question_toks": ["How", "many", "students", "are", "there", "?"], "guid": 1341}}
{"text": "list: LastName, FirstName, Grade, Classroom; teachers: LastName, FirstName, Classroom | Find the number of students in one classroom.", "sql": "SELECT count(*) ,  classroom FROM list GROUP BY classroom", "example": {"db_id": "student_1", "query": "SELECT count(*) ,  classroom FROM list GROUP BY classroom", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "classroom", "FROM", "list", "GROUP", "BY", "classroom"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "classroom", "from", "list", "group", "by", "classroom"], "question": "Find the number of students in one classroom.", "question_toks": ["Find", "the", "number", "of", "students", "in", "one", "classroom", "."], "guid": 1342}}
{"text": "school: School_ID, School, Location, Enrollment, Founded, Denomination, Boys_or_Girls, Day_or_Boarding, Year_Entered_Competition, School_Colors; school_details: School_ID, Nickname, Colors, League, Class, Division; school_performance: School_Id, School_Year, Class_A, Class_AA; player: Player_ID, Player, Team, Age, Position, School_ID | What are the nicknames of schools whose division is not 1?", "sql": "SELECT Nickname FROM school_details WHERE Division != \"Division 1\"", "example": {"db_id": "school_player", "query": "SELECT Nickname FROM school_details WHERE Division != \"Division 1\"", "query_toks": ["SELECT", "Nickname", "FROM", "school_details", "WHERE", "Division", "!", "=", "``", "Division", "1", "''"], "query_toks_no_value": ["select", "nickname", "from", "school_details", "where", "division", "!", "=", "value"], "question": "What are the nicknames of schools whose division is not 1?", "question_toks": ["What", "are", "the", "nicknames", "of", "schools", "whose", "division", "is", "not", "1", "?"], "guid": 1343}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Dorm: dormid, dorm_name, student_capacity, gender; Dorm_amenity: amenid, amenity_name; Has_amenity: dormid, amenid; Lives_in: stuid, dormid, room_number | What are the names of the dorm that does not have a TV Lounge?", "sql": "SELECT dorm_name FROM dorm EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge'", "example": {"db_id": "dorm_1", "query": "SELECT dorm_name FROM dorm EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge'", "query_toks": ["SELECT", "dorm_name", "FROM", "dorm", "EXCEPT", "SELECT", "T1.dorm_name", "FROM", "dorm", "AS", "T1", "JOIN", "has_amenity", "AS", "T2", "ON", "T1.dormid", "=", "T2.dormid", "JOIN", "dorm_amenity", "AS", "T3", "ON", "T2.amenid", "=", "T3.amenid", "WHERE", "T3.amenity_name", "=", "'TV", "Lounge", "'"], "query_toks_no_value": ["select", "dorm_name", "from", "dorm", "except", "select", "t1", ".", "dorm_name", "from", "dorm", "as", "t1", "join", "has_amenity", "as", "t2", "on", "t1", ".", "dormid", "=", "t2", ".", "dormid", "join", "dorm_amenity", "as", "t3", "on", "t2", ".", "amenid", "=", "t3", ".", "amenid", "where", "t3", ".", "amenity_name", "=", "value"], "question": "What are the names of the dorm that does not have a TV Lounge?", "question_toks": ["What", "are", "the", "names", "of", "the", "dorm", "that", "does", "not", "have", "a", "TV", "Lounge", "?"], "guid": 1344}}
{"text": "Course_Authors_and_Tutors: author_id, author_tutor_ATB, login_name, password, personal_name, middle_name, family_name, gender_mf, address_line_1; Students: student_id, date_of_registration, date_of_latest_logon, login_name, password, personal_name, middle_name, family_name; Subjects: subject_id, subject_name; Courses: course_id, author_id, subject_id, course_name, course_description; Student_Course_Enrolment: registration_id, student_id, course_id, date_of_enrolment, date_of_completion; Student_Tests_Taken: registration_id, date_test_taken, test_result | For each distinct test result, find the number of students who got the result.", "sql": "SELECT test_result ,  COUNT(*) FROM Student_Tests_Taken GROUP BY test_result ORDER BY COUNT(*) DESC", "example": {"db_id": "e_learning", "query": "SELECT test_result ,  COUNT(*) FROM Student_Tests_Taken GROUP BY test_result ORDER BY COUNT(*) DESC", "query_toks": ["SELECT", "test_result", ",", "COUNT", "(", "*", ")", "FROM", "Student_Tests_Taken", "GROUP", "BY", "test_result", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC"], "query_toks_no_value": ["select", "test_result", ",", "count", "(", "*", ")", "from", "student_tests_taken", "group", "by", "test_result", "order", "by", "count", "(", "*", ")", "desc"], "question": "For each distinct test result, find the number of students who got the result.", "question_toks": ["For", "each", "distinct", "test", "result", ",", "find", "the", "number", "of", "students", "who", "got", "the", "result", "."], "guid": 1345}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Dorm: dormid, dorm_name, student_capacity, gender; Dorm_amenity: amenid, amenity_name; Has_amenity: dormid, amenid; Lives_in: stuid, dormid, room_number | How many dorms are there and what is the total capacity for each gender?", "sql": "SELECT count(*) ,  sum(student_capacity) ,  gender FROM dorm GROUP BY gender", "example": {"db_id": "dorm_1", "query": "SELECT count(*) ,  sum(student_capacity) ,  gender FROM dorm GROUP BY gender", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "sum", "(", "student_capacity", ")", ",", "gender", "FROM", "dorm", "GROUP", "BY", "gender"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "sum", "(", "student_capacity", ")", ",", "gender", "from", "dorm", "group", "by", "gender"], "question": "How many dorms are there and what is the total capacity for each gender?", "question_toks": ["How", "many", "dorms", "are", "there", "and", "what", "is", "the", "total", "capacity", "for", "each", "gender", "?"], "guid": 1346}}
{"text": "Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Courses: course_id, course_name, course_description, other_details; Departments: department_id, department_name, department_description, other_details; Degree_Programs: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details; Sections: section_id, course_id, section_name, section_description, other_details; Semesters: semester_id, semester_name, semester_description, other_details; Students: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered; Student_Enrolment: student_enrolment_id, degree_program_id, semester_id, student_id, other_details; Student_Enrolment_Courses: student_course_id, course_id, student_enrolment_id; Transcripts: transcript_id, transcript_date, other_details | What other details can you tell me about students in reverse alphabetical order?", "sql": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC", "example": {"db_id": "student_transcripts_tracking", "query": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC", "query_toks": ["SELECT", "other_student_details", "FROM", "Students", "ORDER", "BY", "other_student_details", "DESC"], "query_toks_no_value": ["select", "other_student_details", "from", "students", "order", "by", "other_student_details", "desc"], "question": "What other details can you tell me about students in reverse alphabetical order?", "question_toks": ["What", "other", "details", "can", "you", "tell", "me", "about", "students", "in", "reverse", "alphabetical", "order", "?"], "guid": 1347}}
{"text": "school: School_ID, School, Location, Enrollment, Founded, Denomination, Boys_or_Girls, Day_or_Boarding, Year_Entered_Competition, School_Colors; school_details: School_ID, Nickname, Colors, League, Class, Division; school_performance: School_Id, School_Year, Class_A, Class_AA; player: Player_ID, Player, Team, Age, Position, School_ID | Which team has the oldest player?", "sql": "SELECT Team FROM player ORDER BY Age DESC LIMIT 1", "example": {"db_id": "school_player", "query": "SELECT Team FROM player ORDER BY Age DESC LIMIT 1", "query_toks": ["SELECT", "Team", "FROM", "player", "ORDER", "BY", "Age", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "team", "from", "player", "order", "by", "age", "desc", "limit", "value"], "question": "Which team has the oldest player?", "question_toks": ["Which", "team", "has", "the", "oldest", "player", "?"], "guid": 1348}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Dorm: dormid, dorm_name, student_capacity, gender; Dorm_amenity: amenid, amenity_name; Has_amenity: dormid, amenid; Lives_in: stuid, dormid, room_number | What are the total number of students who are living in a male dorm?", "sql": "SELECT count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.gender  =  'M'", "example": {"db_id": "dorm_1", "query": "SELECT count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.gender  =  'M'", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "student", "AS", "T1", "JOIN", "lives_in", "AS", "T2", "ON", "T1.stuid", "=", "T2.stuid", "JOIN", "dorm", "AS", "T3", "ON", "T3.dormid", "=", "T2.dormid", "WHERE", "T3.gender", "=", "'M", "'"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "student", "as", "t1", "join", "lives_in", "as", "t2", "on", "t1", ".", "stuid", "=", "t2", ".", "stuid", "join", "dorm", "as", "t3", "on", "t3", ".", "dormid", "=", "t2", ".", "dormid", "where", "t3", ".", "gender", "=", "value"], "question": "What are the total number of students who are living in a male dorm?", "question_toks": ["What", "are", "the", "total", "number", "of", "students", "who", "are", "living", "in", "a", "male", "dorm", "?"], "guid": 1349}}
{"text": "Course_Authors_and_Tutors: author_id, author_tutor_ATB, login_name, password, personal_name, middle_name, family_name, gender_mf, address_line_1; Students: student_id, date_of_registration, date_of_latest_logon, login_name, password, personal_name, middle_name, family_name; Subjects: subject_id, subject_name; Courses: course_id, author_id, subject_id, course_name, course_description; Student_Course_Enrolment: registration_id, student_id, course_id, date_of_enrolment, date_of_completion; Student_Tests_Taken: registration_id, date_test_taken, test_result | Sort the information about course authors and tutors in alphabetical order of the personal name.", "sql": "SELECT * FROM Course_Authors_and_Tutors ORDER BY personal_name", "example": {"db_id": "e_learning", "query": "SELECT * FROM Course_Authors_and_Tutors ORDER BY personal_name", "query_toks": ["SELECT", "*", "FROM", "Course_Authors_and_Tutors", "ORDER", "BY", "personal_name"], "query_toks_no_value": ["select", "*", "from", "course_authors_and_tutors", "order", "by", "personal_name"], "question": "Sort the information about course authors and tutors in alphabetical order of the personal name.", "question_toks": ["Sort", "the", "information", "about", "course", "authors", "and", "tutors", "in", "alphabetical", "order", "of", "the", "personal", "name", "."], "guid": 1350}}
{"text": "course: Course_ID, Staring_Date, Course; teacher: Teacher_ID, Name, Age, Hometown; course_arrange: Course_ID, Teacher_ID, Grade | What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?", "sql": "select name from teacher where hometown != \"little lever urban district\"", "example": {"db_id": "course_teach", "query": "select name from teacher where hometown != \"little lever urban district\"", "query_toks": ["select", "name", "from", "teacher", "where", "hometown", "!=", "\"little lever urban district\""], "query_toks_no_value": ["select", "name", "from", "teacher", "where", "hometown", "!", "=", "value"], "question": "What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?", "question_toks": ["What", "are", "the", "names", "of", "the", "teachers", "whose", "hometown", "is", "not", "``", "Little", "Lever", "Urban", "District", "''", "?"], "guid": 1351}}
{"text": "list: LastName, FirstName, Grade, Classroom; teachers: LastName, FirstName, Classroom | Which teachers teach in classroom 109? Give me their last names.", "sql": "SELECT lastname FROM teachers WHERE classroom  =  109", "example": {"db_id": "student_1", "query": "SELECT lastname FROM teachers WHERE classroom  =  109", "query_toks": ["SELECT", "lastname", "FROM", "teachers", "WHERE", "classroom", "=", "109"], "query_toks_no_value": ["select", "lastname", "from", "teachers", "where", "classroom", "=", "value"], "question": "Which teachers teach in classroom 109? Give me their last names.", "question_toks": ["Which", "teachers", "teach", "in", "classroom", "109", "?", "Give", "me", "their", "last", "names", "."], "guid": 1352}}
{"text": "Course_Authors_and_Tutors: author_id, author_tutor_ATB, login_name, password, personal_name, middle_name, family_name, gender_mf, address_line_1; Students: student_id, date_of_registration, date_of_latest_logon, login_name, password, personal_name, middle_name, family_name; Subjects: subject_id, subject_name; Courses: course_id, author_id, subject_id, course_name, course_description; Student_Course_Enrolment: registration_id, student_id, course_id, date_of_enrolment, date_of_completion; Student_Tests_Taken: registration_id, date_test_taken, test_result | Find the subject ID, name of subject and the corresponding number of courses for each subject, and sort by the course count in ascending order.", "sql": "SELECT T1.subject_id ,  T2.subject_name ,  COUNT(*) FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id  =  T2.subject_id GROUP BY T1.subject_id ORDER BY COUNT(*) ASC", "example": {"db_id": "e_learning", "query": "SELECT T1.subject_id ,  T2.subject_name ,  COUNT(*) FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id  =  T2.subject_id GROUP BY T1.subject_id ORDER BY COUNT(*) ASC", "query_toks": ["SELECT", "T1.subject_id", ",", "T2.subject_name", ",", "COUNT", "(", "*", ")", "FROM", "Courses", "AS", "T1", "JOIN", "Subjects", "AS", "T2", "ON", "T1.subject_id", "=", "T2.subject_id", "GROUP", "BY", "T1.subject_id", "ORDER", "BY", "COUNT", "(", "*", ")", "ASC"], "query_toks_no_value": ["select", "t1", ".", "subject_id", ",", "t2", ".", "subject_name", ",", "count", "(", "*", ")", "from", "courses", "as", "t1", "join", "subjects", "as", "t2", "on", "t1", ".", "subject_id", "=", "t2", ".", "subject_id", "group", "by", "t1", ".", "subject_id", "order", "by", "count", "(", "*", ")", "asc"], "question": "Find the subject ID, name of subject and the corresponding number of courses for each subject, and sort by the course count in ascending order.", "question_toks": ["Find", "the", "subject", "ID", ",", "name", "of", "subject", "and", "the", "corresponding", "number", "of", "courses", "for", "each", "subject", ",", "and", "sort", "by", "the", "course", "count", "in", "ascending", "order", "."], "guid": 1353}}
{"text": "Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Courses: course_id, course_name, course_description, other_details; Departments: department_id, department_name, department_description, other_details; Degree_Programs: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details; Sections: section_id, course_id, section_name, section_description, other_details; Semesters: semester_id, semester_name, semester_description, other_details; Students: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered; Student_Enrolment: student_enrolment_id, degree_program_id, semester_id, student_id, other_details; Student_Enrolment_Courses: student_course_id, course_id, student_enrolment_id; Transcripts: transcript_id, transcript_date, other_details | What are the different addresses that have students living there?", "sql": "SELECT count(DISTINCT current_address_id) FROM Students", "example": {"db_id": "student_transcripts_tracking", "query": "SELECT count(DISTINCT current_address_id) FROM Students", "query_toks": ["SELECT", "count", "(", "DISTINCT", "current_address_id", ")", "FROM", "Students"], "query_toks_no_value": ["select", "count", "(", "distinct", "current_address_id", ")", "from", "students"], "question": "What are the different addresses that have students living there?", "question_toks": ["What", "are", "the", "different", "addresses", "that", "have", "students", "living", "there", "?"], "guid": 1354}}
{"text": "Activity: actid, activity_name; Participates_in: stuid, actid; Faculty_Participates_in: FacID, actid; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building | What are the ids of the students who are not involved in any activity", "sql": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Participates_in", "example": {"db_id": "activity_1", "query": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Participates_in", "query_toks": ["SELECT", "StuID", "FROM", "Student", "EXCEPT", "SELECT", "StuID", "FROM", "Participates_in"], "query_toks_no_value": ["select", "stuid", "from", "student", "except", "select", "stuid", "from", "participates_in"], "question": "What are the ids of the students who are not involved in any activity", "question_toks": ["What", "are", "the", "ids", "of", "the", "students", "who", "are", "not", "involved", "in", "any", "activity"], "guid": 1355}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Dorm: dormid, dorm_name, student_capacity, gender; Dorm_amenity: amenid, amenity_name; Has_amenity: dormid, amenid; Lives_in: stuid, dormid, room_number | What are the names of all the dorms that don't have any amenities?", "sql": "SELECT dorm_name FROM dorm WHERE dormid NOT IN (SELECT dormid FROM has_amenity)", "example": {"db_id": "dorm_1", "query": "SELECT dorm_name FROM dorm WHERE dormid NOT IN (SELECT dormid FROM has_amenity)", "query_toks": ["SELECT", "dorm_name", "FROM", "dorm", "WHERE", "dormid", "NOT", "IN", "(", "SELECT", "dormid", "FROM", "has_amenity", ")"], "query_toks_no_value": ["select", "dorm_name", "from", "dorm", "where", "dormid", "not", "in", "(", "select", "dormid", "from", "has_amenity", ")"], "question": "What are the names of all the dorms that don't have any amenities?", "question_toks": ["What", "are", "the", "names", "of", "all", "the", "dorms", "that", "do", "n't", "have", "any", "amenities", "?"], "guid": 1356}}
{"text": "driver: Driver_ID, Name, Party, Home_city, Age; school: School_ID, Grade, School, Location, Type; school_bus: School_ID, Driver_ID, Years_Working, If_full_time | How many drivers are from Hartford city or younger than 40?", "sql": "SELECT count(*) FROM driver WHERE home_city  =  'Hartford' OR age  <  40", "example": {"db_id": "school_bus", "query": "SELECT count(*) FROM driver WHERE home_city  =  'Hartford' OR age  <  40", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "driver", "WHERE", "home_city", "=", "'Hartford", "'", "OR", "age", "<", "40"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "driver", "where", "home_city", "=", "value", "or", "age", "<", "value"], "question": "How many drivers are from Hartford city or younger than 40?", "question_toks": ["How", "many", "drivers", "are", "from", "Hartford", "city", "or", "younger", "than", "40", "?"], "guid": 1357}}
{"text": "school: School_ID, School, Location, Enrollment, Founded, Denomination, Boys_or_Girls, Day_or_Boarding, Year_Entered_Competition, School_Colors; school_details: School_ID, Nickname, Colors, League, Class, Division; school_performance: School_Id, School_Year, Class_A, Class_AA; player: Player_ID, Player, Team, Age, Position, School_ID | How many schools are there?", "sql": "SELECT count(*) FROM school", "example": {"db_id": "school_player", "query": "SELECT count(*) FROM school", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "school"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "school"], "question": "How many schools are there?", "question_toks": ["How", "many", "schools", "are", "there", "?"], "guid": 1358}}
{"text": "Addresses: address_id, line_1, line_2, city, zip_postcode, state_province_county, country; People: person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password; Students: student_id, student_details; Courses: course_id, course_name, course_description, other_details; People_Addresses: person_address_id, person_id, address_id, date_from, date_to; Student_Course_Registrations: student_id, course_id, registration_date; Student_Course_Attendance: student_id, course_id, date_of_attendance; Candidates: candidate_id, candidate_details; Candidate_Assessments: candidate_id, qualification, assessment_date, asessment_outcome_code | List the id of students who attended  statistics courses in the order of attendance date.", "sql": "SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"statistics\" ORDER BY T2.date_of_attendance", "example": {"db_id": "student_assessment", "query": "SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"statistics\" ORDER BY T2.date_of_attendance", "query_toks": ["SELECT", "T2.student_id", "FROM", "courses", "AS", "T1", "JOIN", "student_course_attendance", "AS", "T2", "ON", "T1.course_id", "=", "T2.course_id", "WHERE", "T1.course_name", "=", "``", "statistics", "''", "ORDER", "BY", "T2.date_of_attendance"], "query_toks_no_value": ["select", "t2", ".", "student_id", "from", "courses", "as", "t1", "join", "student_course_attendance", "as", "t2", "on", "t1", ".", "course_id", "=", "t2", ".", "course_id", "where", "t1", ".", "course_name", "=", "value", "order", "by", "t2", ".", "date_of_attendance"], "question": "List the id of students who attended  statistics courses in the order of attendance date.", "question_toks": ["List", "the", "id", "of", "students", "who", "attended", "statistics", "courses", "in", "the", "order", "of", "attendance", "date", "."], "guid": 1359}}
{"text": "Course_Authors_and_Tutors: author_id, author_tutor_ATB, login_name, password, personal_name, middle_name, family_name, gender_mf, address_line_1; Students: student_id, date_of_registration, date_of_latest_logon, login_name, password, personal_name, middle_name, family_name; Subjects: subject_id, subject_name; Courses: course_id, author_id, subject_id, course_name, course_description; Student_Course_Enrolment: registration_id, student_id, course_id, date_of_enrolment, date_of_completion; Student_Tests_Taken: registration_id, date_test_taken, test_result | Find the common login name of course authors and students.", "sql": "SELECT login_name FROM Course_Authors_and_Tutors INTERSECT SELECT login_name FROM Students", "example": {"db_id": "e_learning", "query": "SELECT login_name FROM Course_Authors_and_Tutors INTERSECT SELECT login_name FROM Students", "query_toks": ["SELECT", "login_name", "FROM", "Course_Authors_and_Tutors", "INTERSECT", "SELECT", "login_name", "FROM", "Students"], "query_toks_no_value": ["select", "login_name", "from", "course_authors_and_tutors", "intersect", "select", "login_name", "from", "students"], "question": "Find the common login name of course authors and students.", "question_toks": ["Find", "the", "common", "login", "name", "of", "course", "authors", "and", "students", "."], "guid": 1360}}
{"text": "list: LastName, FirstName, Grade, Classroom; teachers: LastName, FirstName, Classroom | Find the number of students taught by the teacher KAWA GORDON.", "sql": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"KAWA\" AND T2.lastname  =  \"GORDON\"", "example": {"db_id": "student_1", "query": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"KAWA\" AND T2.lastname  =  \"GORDON\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "list", "AS", "T1", "JOIN", "teachers", "AS", "T2", "ON", "T1.classroom", "=", "T2.classroom", "WHERE", "T2.firstname", "=", "``", "KAWA", "''", "AND", "T2.lastname", "=", "``", "GORDON", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "list", "as", "t1", "join", "teachers", "as", "t2", "on", "t1", ".", "classroom", "=", "t2", ".", "classroom", "where", "t2", ".", "firstname", "=", "value", "and", "t2", ".", "lastname", "=", "value"], "question": "Find the number of students taught by the teacher KAWA GORDON.", "question_toks": ["Find", "the", "number", "of", "students", "taught", "by", "the", "teacher", "KAWA", "GORDON", "."], "guid": 1361}}
{"text": "Course_Authors_and_Tutors: author_id, author_tutor_ATB, login_name, password, personal_name, middle_name, family_name, gender_mf, address_line_1; Students: student_id, date_of_registration, date_of_latest_logon, login_name, password, personal_name, middle_name, family_name; Subjects: subject_id, subject_name; Courses: course_id, author_id, subject_id, course_name, course_description; Student_Course_Enrolment: registration_id, student_id, course_id, date_of_enrolment, date_of_completion; Student_Tests_Taken: registration_id, date_test_taken, test_result | What are all the dates of enrollment and completion in record?", "sql": "SELECT date_of_enrolment ,  date_of_completion FROM Student_Course_Enrolment", "example": {"db_id": "e_learning", "query": "SELECT date_of_enrolment ,  date_of_completion FROM Student_Course_Enrolment", "query_toks": ["SELECT", "date_of_enrolment", ",", "date_of_completion", "FROM", "Student_Course_Enrolment"], "query_toks_no_value": ["select", "date_of_enrolment", ",", "date_of_completion", "from", "student_course_enrolment"], "question": "What are all the dates of enrollment and completion in record?", "question_toks": ["What", "are", "all", "the", "dates", "of", "enrollment", "and", "completion", "in", "record", "?"], "guid": 1362}}
{"text": "Addresses: address_id, line_1, line_2, city, zip_postcode, state_province_county, country; People: person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password; Students: student_id, student_details; Courses: course_id, course_name, course_description, other_details; People_Addresses: person_address_id, person_id, address_id, date_from, date_to; Student_Course_Registrations: student_id, course_id, registration_date; Student_Course_Attendance: student_id, course_id, date_of_attendance; Candidates: candidate_id, candidate_details; Candidate_Assessments: candidate_id, qualification, assessment_date, asessment_outcome_code | List the first names of people in alphabetical order?", "sql": "SELECT first_name FROM people ORDER BY first_name", "example": {"db_id": "student_assessment", "query": "SELECT first_name FROM people ORDER BY first_name", "query_toks": ["SELECT", "first_name", "FROM", "people", "ORDER", "BY", "first_name"], "query_toks_no_value": ["select", "first_name", "from", "people", "order", "by", "first_name"], "question": "List the first names of people in alphabetical order?", "question_toks": ["List", "the", "first", "names", "of", "people", "in", "alphabetical", "order", "?"], "guid": 1363}}
{"text": "Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Courses: course_id, course_name, course_description, other_details; Departments: department_id, department_name, department_description, other_details; Degree_Programs: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details; Sections: section_id, course_id, section_name, section_description, other_details; Semesters: semester_id, semester_name, semester_description, other_details; Students: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered; Student_Enrolment: student_enrolment_id, degree_program_id, semester_id, student_id, other_details; Student_Enrolment_Courses: student_course_id, course_id, student_enrolment_id; Transcripts: transcript_id, transcript_date, other_details | What is the first, middle, and last name, along with the id and number of enrollments, for the student who enrolled the most in any program?", "sql": "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "student_transcripts_tracking", "query": "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.student_id", ",", "T1.first_name", ",", "T1.middle_name", ",", "T1.last_name", ",", "count", "(", "*", ")", ",", "T1.student_id", "FROM", "Students", "AS", "T1", "JOIN", "Student_Enrolment", "AS", "T2", "ON", "T1.student_id", "=", "T2.student_id", "GROUP", "BY", "T1.student_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "student_id", ",", "t1", ".", "first_name", ",", "t1", ".", "middle_name", ",", "t1", ".", "last_name", ",", "count", "(", "*", ")", ",", "t1", ".", "student_id", "from", "students", "as", "t1", "join", "student_enrolment", "as", "t2", "on", "t1", ".", "student_id", "=", "t2", ".", "student_id", "group", "by", "t1", ".", "student_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the first, middle, and last name, along with the id and number of enrollments, for the student who enrolled the most in any program?", "question_toks": ["What", "is", "the", "first", ",", "middle", ",", "and", "last", "name", ",", "along", "with", "the", "id", "and", "number", "of", "enrollments", ",", "for", "the", "student", "who", "enrolled", "the", "most", "in", "any", "program", "?"], "guid": 1364}}
{"text": "school: School_ID, School, Location, Enrollment, Founded, Denomination, Boys_or_Girls, Day_or_Boarding, Year_Entered_Competition, School_Colors; school_details: School_ID, Nickname, Colors, League, Class, Division; school_performance: School_Id, School_Year, Class_A, Class_AA; player: Player_ID, Player, Team, Age, Position, School_ID | Show locations and nicknames of schools.", "sql": "SELECT T1.Location ,  T2.Nickname FROM school AS T1 JOIN school_details AS T2 ON T1.School_ID  =  T2.School_ID", "example": {"db_id": "school_player", "query": "SELECT T1.Location ,  T2.Nickname FROM school AS T1 JOIN school_details AS T2 ON T1.School_ID  =  T2.School_ID", "query_toks": ["SELECT", "T1.Location", ",", "T2.Nickname", "FROM", "school", "AS", "T1", "JOIN", "school_details", "AS", "T2", "ON", "T1.School_ID", "=", "T2.School_ID"], "query_toks_no_value": ["select", "t1", ".", "location", ",", "t2", ".", "nickname", "from", "school", "as", "t1", "join", "school_details", "as", "t2", "on", "t1", ".", "school_id", "=", "t2", ".", "school_id"], "question": "Show locations and nicknames of schools.", "question_toks": ["Show", "locations", "and", "nicknames", "of", "schools", "."], "guid": 1365}}
{"text": "driver: Driver_ID, Name, Party, Home_city, Age; school: School_ID, Grade, School, Location, Type; school_bus: School_ID, Driver_ID, Years_Working, If_full_time | What is the maximum, minimum and average years spent working on a school bus?", "sql": "SELECT max(years_working) ,  min(years_working) ,  avg(years_working) FROM school_bus", "example": {"db_id": "school_bus", "query": "SELECT max(years_working) ,  min(years_working) ,  avg(years_working) FROM school_bus", "query_toks": ["SELECT", "max", "(", "years_working", ")", ",", "min", "(", "years_working", ")", ",", "avg", "(", "years_working", ")", "FROM", "school_bus"], "query_toks_no_value": ["select", "max", "(", "years_working", ")", ",", "min", "(", "years_working", ")", ",", "avg", "(", "years_working", ")", "from", "school_bus"], "question": "What is the maximum, minimum and average years spent working on a school bus?", "question_toks": ["What", "is", "the", "maximum", ",", "minimum", "and", "average", "years", "spent", "working", "on", "a", "school", "bus", "?"], "guid": 1366}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Dorm: dormid, dorm_name, student_capacity, gender; Dorm_amenity: amenid, amenity_name; Has_amenity: dormid, amenid; Lives_in: stuid, dormid, room_number | Find the number of students whose age is older than the average age for each gender.", "sql": "SELECT count(*) ,  sex FROM student WHERE age  >  (SELECT avg(age) FROM student) GROUP BY sex", "example": {"db_id": "dorm_1", "query": "SELECT count(*) ,  sex FROM student WHERE age  >  (SELECT avg(age) FROM student) GROUP BY sex", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "sex", "FROM", "student", "WHERE", "age", ">", "(", "SELECT", "avg", "(", "age", ")", "FROM", "student", ")", "GROUP", "BY", "sex"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "sex", "from", "student", "where", "age", ">", "(", "select", "avg", "(", "age", ")", "from", "student", ")", "group", "by", "sex"], "question": "Find the number of students whose age is older than the average age for each gender.", "question_toks": ["Find", "the", "number", "of", "students", "whose", "age", "is", "older", "than", "the", "average", "age", "for", "each", "gender", "."], "guid": 1367}}
{"text": "driver: Driver_ID, Name, Party, Home_city, Age; school: School_ID, Grade, School, Location, Type; school_bus: School_ID, Driver_ID, Years_Working, If_full_time | Show the names of the drivers without a school bus.", "sql": "SELECT name FROM driver WHERE driver_id NOT IN (SELECT driver_id FROM school_bus)", "example": {"db_id": "school_bus", "query": "SELECT name FROM driver WHERE driver_id NOT IN (SELECT driver_id FROM school_bus)", "query_toks": ["SELECT", "name", "FROM", "driver", "WHERE", "driver_id", "NOT", "IN", "(", "SELECT", "driver_id", "FROM", "school_bus", ")"], "query_toks_no_value": ["select", "name", "from", "driver", "where", "driver_id", "not", "in", "(", "select", "driver_id", "from", "school_bus", ")"], "question": "Show the names of the drivers without a school bus.", "question_toks": ["Show", "the", "names", "of", "the", "drivers", "without", "a", "school", "bus", "."], "guid": 1368}}
{"text": "Addresses: address_id, line_1, line_2, city, zip_postcode, state_province_county, country; People: person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password; Students: student_id, student_details; Courses: course_id, course_name, course_description, other_details; People_Addresses: person_address_id, person_id, address_id, date_from, date_to; Student_Course_Registrations: student_id, course_id, registration_date; Student_Course_Attendance: student_id, course_id, date_of_attendance; Candidates: candidate_id, candidate_details; Candidate_Assessments: candidate_id, qualification, assessment_date, asessment_outcome_code | Find id of the candidate whose email is stanley.monahan@example.org?", "sql": "SELECT T2.candidate_id FROM people AS T1 JOIN candidates AS T2 ON T1.person_id = T2.candidate_id WHERE T1.email_address = \"stanley.monahan@example.org\"", "example": {"db_id": "student_assessment", "query": "SELECT T2.candidate_id FROM people AS T1 JOIN candidates AS T2 ON T1.person_id = T2.candidate_id WHERE T1.email_address = \"stanley.monahan@example.org\"", "query_toks": ["SELECT", "T2.candidate_id", "FROM", "people", "AS", "T1", "JOIN", "candidates", "AS", "T2", "ON", "T1.person_id", "=", "T2.candidate_id", "WHERE", "T1.email_address", "=", "``", "stanley.monahan", "@", "example.org", "''"], "query_toks_no_value": ["select", "t2", ".", "candidate_id", "from", "people", "as", "t1", "join", "candidates", "as", "t2", "on", "t1", ".", "person_id", "=", "t2", ".", "candidate_id", "where", "t1", ".", "email_address", "=", "value"], "question": "Find id of the candidate whose email is stanley.monahan@example.org?", "question_toks": ["Find", "id", "of", "the", "candidate", "whose", "email", "is", "stanley.monahan", "@", "example.org", "?"], "guid": 1369}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Dorm: dormid, dorm_name, student_capacity, gender; Dorm_amenity: amenid, amenity_name; Has_amenity: dormid, amenid; Lives_in: stuid, dormid, room_number | Find the name of dorms which have both TV Lounge and Study Room as amenities.", "sql": "SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge' INTERSECT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'Study Room'", "example": {"db_id": "dorm_1", "query": "SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge' INTERSECT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'Study Room'", "query_toks": ["SELECT", "T1.dorm_name", "FROM", "dorm", "AS", "T1", "JOIN", "has_amenity", "AS", "T2", "ON", "T1.dormid", "=", "T2.dormid", "JOIN", "dorm_amenity", "AS", "T3", "ON", "T2.amenid", "=", "T3.amenid", "WHERE", "T3.amenity_name", "=", "'TV", "Lounge", "'", "INTERSECT", "SELECT", "T1.dorm_name", "FROM", "dorm", "AS", "T1", "JOIN", "has_amenity", "AS", "T2", "ON", "T1.dormid", "=", "T2.dormid", "JOIN", "dorm_amenity", "AS", "T3", "ON", "T2.amenid", "=", "T3.amenid", "WHERE", "T3.amenity_name", "=", "'Study", "Room", "'"], "query_toks_no_value": ["select", "t1", ".", "dorm_name", "from", "dorm", "as", "t1", "join", "has_amenity", "as", "t2", "on", "t1", ".", "dormid", "=", "t2", ".", "dormid", "join", "dorm_amenity", "as", "t3", "on", "t2", ".", "amenid", "=", "t3", ".", "amenid", "where", "t3", ".", "amenity_name", "=", "value", "intersect", "select", "t1", ".", "dorm_name", "from", "dorm", "as", "t1", "join", "has_amenity", "as", "t2", "on", "t1", ".", "dormid", "=", "t2", ".", "dormid", "join", "dorm_amenity", "as", "t3", "on", "t2", ".", "amenid", "=", "t3", ".", "amenid", "where", "t3", ".", "amenity_name", "=", "value"], "question": "Find the name of dorms which have both TV Lounge and Study Room as amenities.", "question_toks": ["Find", "the", "name", "of", "dorms", "which", "have", "both", "TV", "Lounge", "and", "Study", "Room", "as", "amenities", "."], "guid": 1370}}
{"text": "School: School_id, School_name, Location, Mascot, Enrollment, IHSAA_Class, IHSAA_Football_Class, County; budget: School_id, Year, Budgeted, total_budget_percent_budgeted, Invested, total_budget_percent_invested, Budget_invested_percent; endowment: endowment_id, School_id, donator_name, amount | Show all donor names.", "sql": "SELECT DISTINCT donator_name FROM endowment", "example": {"db_id": "school_finance", "query": "SELECT DISTINCT donator_name FROM endowment", "query_toks": ["SELECT", "DISTINCT", "donator_name", "FROM", "endowment"], "query_toks_no_value": ["select", "distinct", "donator_name", "from", "endowment"], "question": "Show all donor names.", "question_toks": ["Show", "all", "donor", "names", "."], "guid": 1371}}
{"text": "list: LastName, FirstName, Grade, Classroom; teachers: LastName, FirstName, Classroom | For each classroom report the grade that is taught in it. Report just the classroom number and the grade number.", "sql": "SELECT DISTINCT classroom ,  grade FROM list", "example": {"db_id": "student_1", "query": "SELECT DISTINCT classroom ,  grade FROM list", "query_toks": ["SELECT", "DISTINCT", "classroom", ",", "grade", "FROM", "list"], "query_toks_no_value": ["select", "distinct", "classroom", ",", "grade", "from", "list"], "question": "For each classroom report the grade that is taught in it. Report just the classroom number and the grade number.", "question_toks": ["For", "each", "classroom", "report", "the", "grade", "that", "is", "taught", "in", "it", ".", "Report", "just", "the", "classroom", "number", "and", "the", "grade", "number", "."], "guid": 1372}}
{"text": "Activity: actid, activity_name; Participates_in: stuid, actid; Faculty_Participates_in: FacID, actid; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building | What are the ids of the students who are under 20 years old and are involved in at least one activity.", "sql": "SELECT StuID FROM Participates_in INTERSECT SELECT StuID FROM Student WHERE age  <  20", "example": {"db_id": "activity_1", "query": "SELECT StuID FROM Participates_in INTERSECT SELECT StuID FROM Student WHERE age  <  20", "query_toks": ["SELECT", "StuID", "FROM", "Participates_in", "INTERSECT", "SELECT", "StuID", "FROM", "Student", "WHERE", "age", "<", "20"], "query_toks_no_value": ["select", "stuid", "from", "participates_in", "intersect", "select", "stuid", "from", "student", "where", "age", "<", "value"], "question": "What are the ids of the students who are under 20 years old and are involved in at least one activity.", "question_toks": ["What", "are", "the", "ids", "of", "the", "students", "who", "are", "under", "20", "years", "old", "and", "are", "involved", "in", "at", "least", "one", "activity", "."], "guid": 1373}}
{"text": "Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Courses: course_id, course_name, course_description, other_details; Departments: department_id, department_name, department_description, other_details; Degree_Programs: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details; Sections: section_id, course_id, section_name, section_description, other_details; Semesters: semester_id, semester_name, semester_description, other_details; Students: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered; Student_Enrolment: student_enrolment_id, degree_program_id, semester_id, student_id, other_details; Student_Enrolment_Courses: student_course_id, course_id, student_enrolment_id; Transcripts: transcript_id, transcript_date, other_details | What is the first, middle, and last name of the first student to register?", "sql": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1", "example": {"db_id": "student_transcripts_tracking", "query": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1", "query_toks": ["SELECT", "first_name", ",", "middle_name", ",", "last_name", "FROM", "Students", "ORDER", "BY", "date_first_registered", "ASC", "LIMIT", "1"], "query_toks_no_value": ["select", "first_name", ",", "middle_name", ",", "last_name", "from", "students", "order", "by", "date_first_registered", "asc", "limit", "value"], "question": "What is the first, middle, and last name of the first student to register?", "question_toks": ["What", "is", "the", "first", ",", "middle", ",", "and", "last", "name", "of", "the", "first", "student", "to", "register", "?"], "guid": 1374}}
{"text": "school: School_ID, School, Location, Enrollment, Founded, Denomination, Boys_or_Girls, Day_or_Boarding, Year_Entered_Competition, School_Colors; school_details: School_ID, Nickname, Colors, League, Class, Division; school_performance: School_Id, School_Year, Class_A, Class_AA; player: Player_ID, Player, Team, Age, Position, School_ID | Show the locations of schools that have more than 1 player.", "sql": "SELECT T2.Location FROM player AS T1 JOIN school AS T2 ON T1.School_ID  =  T2.School_ID GROUP BY T1.School_ID HAVING COUNT(*)  >  1", "example": {"db_id": "school_player", "query": "SELECT T2.Location FROM player AS T1 JOIN school AS T2 ON T1.School_ID  =  T2.School_ID GROUP BY T1.School_ID HAVING COUNT(*)  >  1", "query_toks": ["SELECT", "T2.Location", "FROM", "player", "AS", "T1", "JOIN", "school", "AS", "T2", "ON", "T1.School_ID", "=", "T2.School_ID", "GROUP", "BY", "T1.School_ID", "HAVING", "COUNT", "(", "*", ")", ">", "1"], "query_toks_no_value": ["select", "t2", ".", "location", "from", "player", "as", "t1", "join", "school", "as", "t2", "on", "t1", ".", "school_id", "=", "t2", ".", "school_id", "group", "by", "t1", ".", "school_id", "having", "count", "(", "*", ")", ">", "value"], "question": "Show the locations of schools that have more than 1 player.", "question_toks": ["Show", "the", "locations", "of", "schools", "that", "have", "more", "than", "1", "player", "."], "guid": 1375}}
{"text": "Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Courses: course_id, course_name, course_description, other_details; Departments: department_id, department_name, department_description, other_details; Degree_Programs: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details; Sections: section_id, course_id, section_name, section_description, other_details; Semesters: semester_id, semester_name, semester_description, other_details; Students: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered; Student_Enrolment: student_enrolment_id, degree_program_id, semester_id, student_id, other_details; Student_Enrolment_Courses: student_course_id, course_id, student_enrolment_id; Transcripts: transcript_id, transcript_date, other_details | Find the semester when both Master students and Bachelor students got enrolled in.", "sql": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'", "example": {"db_id": "student_transcripts_tracking", "query": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'", "query_toks": ["SELECT", "DISTINCT", "T2.semester_id", "FROM", "Degree_Programs", "AS", "T1", "JOIN", "Student_Enrolment", "AS", "T2", "ON", "T1.degree_program_id", "=", "T2.degree_program_id", "WHERE", "degree_summary_name", "=", "'Master", "'", "INTERSECT", "SELECT", "DISTINCT", "T2.semester_id", "FROM", "Degree_Programs", "AS", "T1", "JOIN", "Student_Enrolment", "AS", "T2", "ON", "T1.degree_program_id", "=", "T2.degree_program_id", "WHERE", "degree_summary_name", "=", "'Bachelor", "'"], "query_toks_no_value": ["select", "distinct", "t2", ".", "semester_id", "from", "degree_programs", "as", "t1", "join", "student_enrolment", "as", "t2", "on", "t1", ".", "degree_program_id", "=", "t2", ".", "degree_program_id", "where", "degree_summary_name", "=", "value", "intersect", "select", "distinct", "t2", ".", "semester_id", "from", "degree_programs", "as", "t1", "join", "student_enrolment", "as", "t2", "on", "t1", ".", "degree_program_id", "=", "t2", ".", "degree_program_id", "where", "degree_summary_name", "=", "value"], "question": "Find the semester when both Master students and Bachelor students got enrolled in.", "question_toks": ["Find", "the", "semester", "when", "both", "Master", "students", "and", "Bachelor", "students", "got", "enrolled", "in", "."], "guid": 1376}}
{"text": "Addresses: address_id, line_1, line_2, city, zip_postcode, state_province_county, country; People: person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password; Students: student_id, student_details; Courses: course_id, course_name, course_description, other_details; People_Addresses: person_address_id, person_id, address_id, date_from, date_to; Student_Course_Registrations: student_id, course_id, registration_date; Student_Course_Attendance: student_id, course_id, date_of_attendance; Candidates: candidate_id, candidate_details; Candidate_Assessments: candidate_id, qualification, assessment_date, asessment_outcome_code | What are the ids of the courses that are registered or attended by the student whose id is 121?", "sql": "SELECT course_id FROM student_course_registrations WHERE student_id = 121 UNION SELECT course_id FROM student_course_attendance WHERE student_id = 121", "example": {"db_id": "student_assessment", "query": "SELECT course_id FROM student_course_registrations WHERE student_id = 121 UNION SELECT course_id FROM student_course_attendance WHERE student_id = 121", "query_toks": ["SELECT", "course_id", "FROM", "student_course_registrations", "WHERE", "student_id", "=", "121", "UNION", "SELECT", "course_id", "FROM", "student_course_attendance", "WHERE", "student_id", "=", "121"], "query_toks_no_value": ["select", "course_id", "from", "student_course_registrations", "where", "student_id", "=", "value", "union", "select", "course_id", "from", "student_course_attendance", "where", "student_id", "=", "value"], "question": "What are the ids of the courses that are registered or attended by the student whose id is 121?", "question_toks": ["What", "are", "the", "ids", "of", "the", "courses", "that", "are", "registered", "or", "attended", "by", "the", "student", "whose", "id", "is", "121", "?"], "guid": 1377}}
{"text": "school: School_ID, School, Location, Enrollment, Founded, Denomination, Boys_or_Girls, Day_or_Boarding, Year_Entered_Competition, School_Colors; school_details: School_ID, Nickname, Colors, League, Class, Division; school_performance: School_Id, School_Year, Class_A, Class_AA; player: Player_ID, Player, Team, Age, Position, School_ID | For each player, show the team and the location of school they belong to.", "sql": "SELECT T1.Team ,  T2.Location FROM player AS T1 JOIN school AS T2 ON T1.School_ID  =  T2.School_ID", "example": {"db_id": "school_player", "query": "SELECT T1.Team ,  T2.Location FROM player AS T1 JOIN school AS T2 ON T1.School_ID  =  T2.School_ID", "query_toks": ["SELECT", "T1.Team", ",", "T2.Location", "FROM", "player", "AS", "T1", "JOIN", "school", "AS", "T2", "ON", "T1.School_ID", "=", "T2.School_ID"], "query_toks_no_value": ["select", "t1", ".", "team", ",", "t2", ".", "location", "from", "player", "as", "t1", "join", "school", "as", "t2", "on", "t1", ".", "school_id", "=", "t2", ".", "school_id"], "question": "For each player, show the team and the location of school they belong to.", "question_toks": ["For", "each", "player", ",", "show", "the", "team", "and", "the", "location", "of", "school", "they", "belong", "to", "."], "guid": 1378}}
{"text": "School: School_id, School_name, Location, Mascot, Enrollment, IHSAA_Class, IHSAA_Football_Class, County; budget: School_id, Year, Budgeted, total_budget_percent_budgeted, Invested, total_budget_percent_invested, Budget_invested_percent; endowment: endowment_id, School_id, donator_name, amount | Show the names of schools with a total budget amount greater than 100 or a total endowment greater than 10.", "sql": "SELECT T2.school_name FROM budget AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id JOIN endowment AS T3 ON T2.school_id  =  T3.school_id GROUP BY T2.school_name HAVING sum(T1.budgeted)  >  100 OR sum(T3.amount)  >  10", "example": {"db_id": "school_finance", "query": "SELECT T2.school_name FROM budget AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id JOIN endowment AS T3 ON T2.school_id  =  T3.school_id GROUP BY T2.school_name HAVING sum(T1.budgeted)  >  100 OR sum(T3.amount)  >  10", "query_toks": ["SELECT", "T2.school_name", "FROM", "budget", "AS", "T1", "JOIN", "school", "AS", "T2", "ON", "T1.school_id", "=", "T2.school_id", "JOIN", "endowment", "AS", "T3", "ON", "T2.school_id", "=", "T3.school_id", "GROUP", "BY", "T2.school_name", "HAVING", "sum", "(", "T1.budgeted", ")", ">", "100", "OR", "sum", "(", "T3.amount", ")", ">", "10"], "query_toks_no_value": ["select", "t2", ".", "school_name", "from", "budget", "as", "t1", "join", "school", "as", "t2", "on", "t1", ".", "school_id", "=", "t2", ".", "school_id", "join", "endowment", "as", "t3", "on", "t2", ".", "school_id", "=", "t3", ".", "school_id", "group", "by", "t2", ".", "school_name", "having", "sum", "(", "t1", ".", "budgeted", ")", ">", "value", "or", "sum", "(", "t3", ".", "amount", ")", ">", "value"], "question": "Show the names of schools with a total budget amount greater than 100 or a total endowment greater than 10.", "question_toks": ["Show", "the", "names", "of", "schools", "with", "a", "total", "budget", "amount", "greater", "than", "100", "or", "a", "total", "endowment", "greater", "than", "10", "."], "guid": 1379}}
{"text": "school: School_ID, School, Location, Enrollment, Founded, Denomination, Boys_or_Girls, Day_or_Boarding, Year_Entered_Competition, School_Colors; school_details: School_ID, Nickname, Colors, League, Class, Division; school_performance: School_Id, School_Year, Class_A, Class_AA; player: Player_ID, Player, Team, Age, Position, School_ID | How many different positions of players are there?", "sql": "SELECT count(DISTINCT POSITION) FROM player", "example": {"db_id": "school_player", "query": "SELECT count(DISTINCT POSITION) FROM player", "query_toks": ["SELECT", "count", "(", "DISTINCT", "POSITION", ")", "FROM", "player"], "query_toks_no_value": ["select", "count", "(", "distinct", "position", ")", "from", "player"], "question": "How many different positions of players are there?", "question_toks": ["How", "many", "different", "positions", "of", "players", "are", "there", "?"], "guid": 1380}}
{"text": "list: LastName, FirstName, Grade, Classroom; teachers: LastName, FirstName, Classroom | For each grade, report the grade, the number of classrooms in which it is taught and the total number of students in the grade.", "sql": "SELECT grade ,  count(DISTINCT classroom) ,  count(*) FROM list GROUP BY grade", "example": {"db_id": "student_1", "query": "SELECT grade ,  count(DISTINCT classroom) ,  count(*) FROM list GROUP BY grade", "query_toks": ["SELECT", "grade", ",", "count", "(", "DISTINCT", "classroom", ")", ",", "count", "(", "*", ")", "FROM", "list", "GROUP", "BY", "grade"], "query_toks_no_value": ["select", "grade", ",", "count", "(", "distinct", "classroom", ")", ",", "count", "(", "*", ")", "from", "list", "group", "by", "grade"], "question": "For each grade, report the grade, the number of classrooms in which it is taught and the total number of students in the grade.", "question_toks": ["For", "each", "grade", ",", "report", "the", "grade", ",", "the", "number", "of", "classrooms", "in", "which", "it", "is", "taught", "and", "the", "total", "number", "of", "students", "in", "the", "grade", "."], "guid": 1381}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Dorm: dormid, dorm_name, student_capacity, gender; Dorm_amenity: amenid, amenity_name; Has_amenity: dormid, amenid; Lives_in: stuid, dormid, room_number | How many dorms have amenities?", "sql": "SELECT count(DISTINCT dormid) FROM has_amenity", "example": {"db_id": "dorm_1", "query": "SELECT count(DISTINCT dormid) FROM has_amenity", "query_toks": ["SELECT", "count", "(", "DISTINCT", "dormid", ")", "FROM", "has_amenity"], "query_toks_no_value": ["select", "count", "(", "distinct", "dormid", ")", "from", "has_amenity"], "question": "How many dorms have amenities?", "question_toks": ["How", "many", "dorms", "have", "amenities", "?"], "guid": 1382}}
{"text": "Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Courses: course_id, course_name, course_description, other_details; Departments: department_id, department_name, department_description, other_details; Degree_Programs: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details; Sections: section_id, course_id, section_name, section_description, other_details; Semesters: semester_id, semester_name, semester_description, other_details; Students: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered; Student_Enrolment: student_enrolment_id, degree_program_id, semester_id, student_id, other_details; Student_Enrolment_Courses: student_course_id, course_id, student_enrolment_id; Transcripts: transcript_id, transcript_date, other_details | What is the zip code of the address in the city Port Chelsea?", "sql": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'", "example": {"db_id": "student_transcripts_tracking", "query": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'", "query_toks": ["SELECT", "zip_postcode", "FROM", "Addresses", "WHERE", "city", "=", "'Port", "Chelsea", "'"], "query_toks_no_value": ["select", "zip_postcode", "from", "addresses", "where", "city", "=", "value"], "question": "What is the zip code of the address in the city Port Chelsea?", "question_toks": ["What", "is", "the", "zip", "code", "of", "the", "address", "in", "the", "city", "Port", "Chelsea", "?"], "guid": 1383}}
{"text": "school: School_ID, School, Location, Enrollment, Founded, Denomination, Boys_or_Girls, Day_or_Boarding, Year_Entered_Competition, School_Colors; school_details: School_ID, Nickname, Colors, League, Class, Division; school_performance: School_Id, School_Year, Class_A, Class_AA; player: Player_ID, Player, Team, Age, Position, School_ID | What is the school color of the school with the largest enrollment?", "sql": "SELECT School_Colors FROM school ORDER BY Enrollment DESC LIMIT 1", "example": {"db_id": "school_player", "query": "SELECT School_Colors FROM school ORDER BY Enrollment DESC LIMIT 1", "query_toks": ["SELECT", "School_Colors", "FROM", "school", "ORDER", "BY", "Enrollment", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "school_colors", "from", "school", "order", "by", "enrollment", "desc", "limit", "value"], "question": "What is the school color of the school with the largest enrollment?", "question_toks": ["What", "is", "the", "school", "color", "of", "the", "school", "with", "the", "largest", "enrollment", "?"], "guid": 1384}}
{"text": "School: School_id, School_name, Location, Mascot, Enrollment, IHSAA_Class, IHSAA_Football_Class, County; budget: School_id, Year, Budgeted, total_budget_percent_budgeted, Invested, total_budget_percent_invested, Budget_invested_percent; endowment: endowment_id, School_id, donator_name, amount | Find the names of schools that have more than one donator with donation amount above 8.5.", "sql": "SELECT T2.School_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T1.amount  >  8.5 GROUP BY T1.school_id HAVING count(*)  >  1", "example": {"db_id": "school_finance", "query": "SELECT T2.School_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T1.amount  >  8.5 GROUP BY T1.school_id HAVING count(*)  >  1", "query_toks": ["SELECT", "T2.School_name", "FROM", "endowment", "AS", "T1", "JOIN", "school", "AS", "T2", "ON", "T1.school_id", "=", "T2.school_id", "WHERE", "T1.amount", ">", "8.5", "GROUP", "BY", "T1.school_id", "HAVING", "count", "(", "*", ")", ">", "1"], "query_toks_no_value": ["select", "t2", ".", "school_name", "from", "endowment", "as", "t1", "join", "school", "as", "t2", "on", "t1", ".", "school_id", "=", "t2", ".", "school_id", "where", "t1", ".", "amount", ">", "value", "group", "by", "t1", ".", "school_id", "having", "count", "(", "*", ")", ">", "value"], "question": "Find the names of schools that have more than one donator with donation amount above 8.5.", "question_toks": ["Find", "the", "names", "of", "schools", "that", "have", "more", "than", "one", "donator", "with", "donation", "amount", "above", "8.5", "."], "guid": 1385}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Dorm: dormid, dorm_name, student_capacity, gender; Dorm_amenity: amenid, amenity_name; Has_amenity: dormid, amenid; Lives_in: stuid, dormid, room_number | What are the first and last names of all students who are living in a dorm with a TV Lounge?", "sql": "SELECT T1.fname ,  T1.lname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid WHERE T2.dormid IN (SELECT T3.dormid FROM has_amenity AS T3 JOIN dorm_amenity AS T4 ON T3.amenid  =  T4.amenid WHERE T4.amenity_name  =  'TV Lounge')", "example": {"db_id": "dorm_1", "query": "SELECT T1.fname ,  T1.lname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid WHERE T2.dormid IN (SELECT T3.dormid FROM has_amenity AS T3 JOIN dorm_amenity AS T4 ON T3.amenid  =  T4.amenid WHERE T4.amenity_name  =  'TV Lounge')", "query_toks": ["SELECT", "T1.fname", ",", "T1.lname", "FROM", "student", "AS", "T1", "JOIN", "lives_in", "AS", "T2", "ON", "T1.stuid", "=", "T2.stuid", "WHERE", "T2.dormid", "IN", "(", "SELECT", "T3.dormid", "FROM", "has_amenity", "AS", "T3", "JOIN", "dorm_amenity", "AS", "T4", "ON", "T3.amenid", "=", "T4.amenid", "WHERE", "T4.amenity_name", "=", "'TV", "Lounge", "'", ")"], "query_toks_no_value": ["select", "t1", ".", "fname", ",", "t1", ".", "lname", "from", "student", "as", "t1", "join", "lives_in", "as", "t2", "on", "t1", ".", "stuid", "=", "t2", ".", "stuid", "where", "t2", ".", "dormid", "in", "(", "select", "t3", ".", "dormid", "from", "has_amenity", "as", "t3", "join", "dorm_amenity", "as", "t4", "on", "t3", ".", "amenid", "=", "t4", ".", "amenid", "where", "t4", ".", "amenity_name", "=", "value", ")"], "question": "What are the first and last names of all students who are living in a dorm with a TV Lounge?", "question_toks": ["What", "are", "the", "first", "and", "last", "names", "of", "all", "students", "who", "are", "living", "in", "a", "dorm", "with", "a", "TV", "Lounge", "?"], "guid": 1386}}
{"text": "school: School_ID, School, Location, Enrollment, Founded, Denomination, Boys_or_Girls, Day_or_Boarding, Year_Entered_Competition, School_Colors; school_details: School_ID, Nickname, Colors, League, Class, Division; school_performance: School_Id, School_Year, Class_A, Class_AA; player: Player_ID, Player, Team, Age, Position, School_ID | What is the average enrollment of schools?", "sql": "SELECT avg(Enrollment) FROM school", "example": {"db_id": "school_player", "query": "SELECT avg(Enrollment) FROM school", "query_toks": ["SELECT", "avg", "(", "Enrollment", ")", "FROM", "school"], "query_toks_no_value": ["select", "avg", "(", "enrollment", ")", "from", "school"], "question": "What is the average enrollment of schools?", "question_toks": ["What", "is", "the", "average", "enrollment", "of", "schools", "?"], "guid": 1387}}
{"text": "driver: Driver_ID, Name, Party, Home_city, Age; school: School_ID, Grade, School, Location, Type; school_bus: School_ID, Driver_ID, Years_Working, If_full_time | List names for drivers from Hartford city and younger than 40.", "sql": "SELECT name FROM driver WHERE home_city  =  'Hartford' AND age  <  40", "example": {"db_id": "school_bus", "query": "SELECT name FROM driver WHERE home_city  =  'Hartford' AND age  <  40", "query_toks": ["SELECT", "name", "FROM", "driver", "WHERE", "home_city", "=", "'Hartford", "'", "AND", "age", "<", "40"], "query_toks_no_value": ["select", "name", "from", "driver", "where", "home_city", "=", "value", "and", "age", "<", "value"], "question": "List names for drivers from Hartford city and younger than 40.", "question_toks": ["List", "names", "for", "drivers", "from", "Hartford", "city", "and", "younger", "than", "40", "."], "guid": 1388}}
{"text": "school: School_ID, School, Location, Enrollment, Founded, Denomination, Boys_or_Girls, Day_or_Boarding, Year_Entered_Competition, School_Colors; school_details: School_ID, Nickname, Colors, League, Class, Division; school_performance: School_Id, School_Year, Class_A, Class_AA; player: Player_ID, Player, Team, Age, Position, School_ID | What are the teams that have the 5 oldest players?", "sql": "SELECT Team FROM player ORDER BY Age DESC LIMIT 5", "example": {"db_id": "school_player", "query": "SELECT Team FROM player ORDER BY Age DESC LIMIT 5", "query_toks": ["SELECT", "Team", "FROM", "player", "ORDER", "BY", "Age", "DESC", "LIMIT", "5"], "query_toks_no_value": ["select", "team", "from", "player", "order", "by", "age", "desc", "limit", "value"], "question": "What are the teams that have the 5 oldest players?", "question_toks": ["What", "are", "the", "teams", "that", "have", "the", "5", "oldest", "players", "?"], "guid": 1389}}
{"text": "Activity: actid, activity_name; Participates_in: stuid, actid; Faculty_Participates_in: FacID, actid; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building | Show the first name, last name, and phone number for all female faculty members.", "sql": "SELECT Fname ,  Lname ,  phone FROM Faculty WHERE Sex  =  'F'", "example": {"db_id": "activity_1", "query": "SELECT Fname ,  Lname ,  phone FROM Faculty WHERE Sex  =  'F'", "query_toks": ["SELECT", "Fname", ",", "Lname", ",", "phone", "FROM", "Faculty", "WHERE", "Sex", "=", "'F", "'"], "query_toks_no_value": ["select", "fname", ",", "lname", ",", "phone", "from", "faculty", "where", "sex", "=", "value"], "question": "Show the first name, last name, and phone number for all female faculty members.", "question_toks": ["Show", "the", "first", "name", ",", "last", "name", ",", "and", "phone", "number", "for", "all", "female", "faculty", "members", "."], "guid": 1390}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Dorm: dormid, dorm_name, student_capacity, gender; Dorm_amenity: amenid, amenity_name; Has_amenity: dormid, amenid; Lives_in: stuid, dormid, room_number | Find the first and last name of students who are living in the dorms that have amenity TV Lounge.", "sql": "SELECT T1.fname ,  T1.lname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid WHERE T2.dormid IN (SELECT T3.dormid FROM has_amenity AS T3 JOIN dorm_amenity AS T4 ON T3.amenid  =  T4.amenid WHERE T4.amenity_name  =  'TV Lounge')", "example": {"db_id": "dorm_1", "query": "SELECT T1.fname ,  T1.lname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid WHERE T2.dormid IN (SELECT T3.dormid FROM has_amenity AS T3 JOIN dorm_amenity AS T4 ON T3.amenid  =  T4.amenid WHERE T4.amenity_name  =  'TV Lounge')", "query_toks": ["SELECT", "T1.fname", ",", "T1.lname", "FROM", "student", "AS", "T1", "JOIN", "lives_in", "AS", "T2", "ON", "T1.stuid", "=", "T2.stuid", "WHERE", "T2.dormid", "IN", "(", "SELECT", "T3.dormid", "FROM", "has_amenity", "AS", "T3", "JOIN", "dorm_amenity", "AS", "T4", "ON", "T3.amenid", "=", "T4.amenid", "WHERE", "T4.amenity_name", "=", "'TV", "Lounge", "'", ")"], "query_toks_no_value": ["select", "t1", ".", "fname", ",", "t1", ".", "lname", "from", "student", "as", "t1", "join", "lives_in", "as", "t2", "on", "t1", ".", "stuid", "=", "t2", ".", "stuid", "where", "t2", ".", "dormid", "in", "(", "select", "t3", ".", "dormid", "from", "has_amenity", "as", "t3", "join", "dorm_amenity", "as", "t4", "on", "t3", ".", "amenid", "=", "t4", ".", "amenid", "where", "t4", ".", "amenity_name", "=", "value", ")"], "question": "Find the first and last name of students who are living in the dorms that have amenity TV Lounge.", "question_toks": ["Find", "the", "first", "and", "last", "name", "of", "students", "who", "are", "living", "in", "the", "dorms", "that", "have", "amenity", "TV", "Lounge", "."], "guid": 1391}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Dorm: dormid, dorm_name, student_capacity, gender; Dorm_amenity: amenid, amenity_name; Has_amenity: dormid, amenid; Lives_in: stuid, dormid, room_number | Find the name of dorms that do not have any amenity", "sql": "SELECT dorm_name FROM dorm WHERE dormid NOT IN (SELECT dormid FROM has_amenity)", "example": {"db_id": "dorm_1", "query": "SELECT dorm_name FROM dorm WHERE dormid NOT IN (SELECT dormid FROM has_amenity)", "query_toks": ["SELECT", "dorm_name", "FROM", "dorm", "WHERE", "dormid", "NOT", "IN", "(", "SELECT", "dormid", "FROM", "has_amenity", ")"], "query_toks_no_value": ["select", "dorm_name", "from", "dorm", "where", "dormid", "not", "in", "(", "select", "dormid", "from", "has_amenity", ")"], "question": "Find the name of dorms that do not have any amenity", "question_toks": ["Find", "the", "name", "of", "dorms", "that", "do", "not", "have", "any", "amenity"], "guid": 1392}}
{"text": "Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Courses: course_id, course_name, course_description, other_details; Departments: department_id, department_name, department_description, other_details; Degree_Programs: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details; Sections: section_id, course_id, section_name, section_description, other_details; Semesters: semester_id, semester_name, semester_description, other_details; Students: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered; Student_Enrolment: student_enrolment_id, degree_program_id, semester_id, student_id, other_details; Student_Enrolment_Courses: student_course_id, course_id, student_enrolment_id; Transcripts: transcript_id, transcript_date, other_details | What is the name of the course with the most students enrolled?", "sql": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "student_transcripts_tracking", "query": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.course_name", "FROM", "Courses", "AS", "T1", "JOIN", "Student_Enrolment_Courses", "AS", "T2", "ON", "T1.course_id", "=", "T2.course_id", "GROUP", "BY", "T1.course_name", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "course_name", "from", "courses", "as", "t1", "join", "student_enrolment_courses", "as", "t2", "on", "t1", ".", "course_id", "=", "t2", ".", "course_id", "group", "by", "t1", ".", "course_name", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the name of the course with the most students enrolled?", "question_toks": ["What", "is", "the", "name", "of", "the", "course", "with", "the", "most", "students", "enrolled", "?"], "guid": 1393}}