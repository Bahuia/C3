{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | What is the total amount of money loaned by banks in New York state?", "sql": "SELECT sum(T2.amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.state  =  'New York'", "example": {"db_id": "loan_1", "query": "SELECT sum(T2.amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.state  =  'New York'", "query_toks": ["SELECT", "sum", "(", "T2.amount", ")", "FROM", "bank", "AS", "T1", "JOIN", "loan", "AS", "T2", "ON", "T1.branch_id", "=", "T2.branch_id", "WHERE", "T1.state", "=", "'New", "York", "'"], "query_toks_no_value": ["select", "sum", "(", "t2", ".", "amount", ")", "from", "bank", "as", "t1", "join", "loan", "as", "t2", "on", "t1", ".", "branch_id", "=", "t2", ".", "branch_id", "where", "t1", ".", "state", "=", "value"], "question": "What is the total amount of money loaned by banks in New York state?", "question_toks": ["What", "is", "the", "total", "amount", "of", "money", "loaned", "by", "banks", "in", "New", "York", "state", "?"], "guid": 7615}}
{"text": "ACCOUNTS: custid, name; SAVINGS: custid, balance; CHECKING: custid, balance | What are the names of customers with a higher checking balance than savings balance?", "sql": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T2.balance  >  T3.balance", "example": {"db_id": "small_bank_1", "query": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T2.balance  >  T3.balance", "query_toks": ["SELECT", "T1.name", "FROM", "accounts", "AS", "T1", "JOIN", "checking", "AS", "T2", "ON", "T1.custid", "=", "T2.custid", "JOIN", "savings", "AS", "T3", "ON", "T1.custid", "=", "T3.custid", "WHERE", "T2.balance", ">", "T3.balance"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "accounts", "as", "t1", "join", "checking", "as", "t2", "on", "t1", ".", "custid", "=", "t2", ".", "custid", "join", "savings", "as", "t3", "on", "t1", ".", "custid", "=", "t3", ".", "custid", "where", "t2", ".", "balance", ">", "t3", ".", "balance"], "question": "What are the names of customers with a higher checking balance than savings balance?", "question_toks": ["What", "are", "the", "names", "of", "customers", "with", "a", "higher", "checking", "balance", "than", "savings", "balance", "?"], "guid": 7616}}
{"text": "Customers: Customer_ID, Customer_Details; Staff: Staff_ID, Staff_Details; Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claim_Headers: Claim_Header_ID, Claim_Status_Code, Claim_Type_Code, Policy_ID, Date_of_Claim, Date_of_Settlement, Amount_Claimed, Amount_Piad; Claims_Documents: Claim_ID, Document_Type_Code, Created_by_Staff_ID, Created_Date; Claims_Processing_Stages: Claim_Stage_ID, Next_Claim_Stage_ID, Claim_Status_Name, Claim_Status_Description; Claims_Processing: Claim_Processing_ID, Claim_ID, Claim_Outcome_Code, Claim_Stage_ID, Staff_ID | What is the name of the customer who has made the minimum amount of payment in one claim?", "sql": "SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id  =  t2.policy_id JOIN customers AS t3 ON t2.customer_id  =  t3.customer_id WHERE t1.amount_piad  =  (SELECT min(amount_piad) FROM claim_headers)", "example": {"db_id": "insurance_and_eClaims", "query": "SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id  =  t2.policy_id JOIN customers AS t3 ON t2.customer_id  =  t3.customer_id WHERE t1.amount_piad  =  (SELECT min(amount_piad) FROM claim_headers)", "query_toks": ["SELECT", "t3.customer_details", "FROM", "claim_headers", "AS", "t1", "JOIN", "policies", "AS", "t2", "ON", "t1.policy_id", "=", "t2.policy_id", "JOIN", "customers", "AS", "t3", "ON", "t2.customer_id", "=", "t3.customer_id", "WHERE", "t1.amount_piad", "=", "(", "SELECT", "min", "(", "amount_piad", ")", "FROM", "claim_headers", ")"], "query_toks_no_value": ["select", "t3", ".", "customer_details", "from", "claim_headers", "as", "t1", "join", "policies", "as", "t2", "on", "t1", ".", "policy_id", "=", "t2", ".", "policy_id", "join", "customers", "as", "t3", "on", "t2", ".", "customer_id", "=", "t3", ".", "customer_id", "where", "t1", ".", "amount_piad", "=", "(", "select", "min", "(", "amount_piad", ")", "from", "claim_headers", ")"], "question": "What is the name of the customer who has made the minimum amount of payment in one claim?", "question_toks": ["What", "is", "the", "name", "of", "the", "customer", "who", "has", "made", "the", "minimum", "amount", "of", "payment", "in", "one", "claim", "?"], "guid": 7617}}
{"text": "ACCOUNTS: custid, name; SAVINGS: custid, balance; CHECKING: custid, balance | What are the names and balances of checking accounts belonging to the customer with the lowest savings balance?", "sql": "SELECT T1.name ,  T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT 1", "example": {"db_id": "small_bank_1", "query": "SELECT T1.name ,  T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT 1", "query_toks": ["SELECT", "T1.name", ",", "T2.balance", "FROM", "accounts", "AS", "T1", "JOIN", "checking", "AS", "T2", "ON", "T1.custid", "=", "T2.custid", "JOIN", "savings", "AS", "T3", "ON", "T1.custid", "=", "T3.custid", "ORDER", "BY", "T3.balance", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "t2", ".", "balance", "from", "accounts", "as", "t1", "join", "checking", "as", "t2", "on", "t1", ".", "custid", "=", "t2", ".", "custid", "join", "savings", "as", "t3", "on", "t1", ".", "custid", "=", "t3", ".", "custid", "order", "by", "t3", ".", "balance", "limit", "value"], "question": "What are the names and balances of checking accounts belonging to the customer with the lowest savings balance?", "question_toks": ["What", "are", "the", "names", "and", "balances", "of", "checking", "accounts", "belonging", "to", "the", "customer", "with", "the", "lowest", "savings", "balance", "?"], "guid": 7618}}
{"text": "Customers: Customer_ID, Customer_Details; Staff: Staff_ID, Staff_Details; Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claim_Headers: Claim_Header_ID, Claim_Status_Code, Claim_Type_Code, Policy_ID, Date_of_Claim, Date_of_Settlement, Amount_Claimed, Amount_Piad; Claims_Documents: Claim_ID, Document_Type_Code, Created_by_Staff_ID, Created_Date; Claims_Processing_Stages: Claim_Stage_ID, Next_Claim_Stage_ID, Claim_Status_Name, Claim_Status_Description; Claims_Processing: Claim_Processing_ID, Claim_ID, Claim_Outcome_Code, Claim_Stage_ID, Staff_ID | What are the type codes of the policies used by the customer \"Dayana Robel\"?", "sql": "SELECT policy_type_code FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t2.customer_details  =  \"Dayana Robel\"", "example": {"db_id": "insurance_and_eClaims", "query": "SELECT policy_type_code FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t2.customer_details  =  \"Dayana Robel\"", "query_toks": ["SELECT", "policy_type_code", "FROM", "policies", "AS", "t1", "JOIN", "customers", "AS", "t2", "ON", "t1.customer_id", "=", "t2.customer_id", "WHERE", "t2.customer_details", "=", "``", "Dayana", "Robel", "''"], "query_toks_no_value": ["select", "policy_type_code", "from", "policies", "as", "t1", "join", "customers", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "where", "t2", ".", "customer_details", "=", "value"], "question": "What are the type codes of the policies used by the customer \"Dayana Robel\"?", "question_toks": ["What", "are", "the", "type", "codes", "of", "the", "policies", "used", "by", "the", "customer", "``", "Dayana", "Robel", "''", "?"], "guid": 7619}}
{"text": "Customers: Customer_ID, Customer_Details; Staff: Staff_ID, Staff_Details; Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claim_Headers: Claim_Header_ID, Claim_Status_Code, Claim_Type_Code, Policy_ID, Date_of_Claim, Date_of_Settlement, Amount_Claimed, Amount_Piad; Claims_Documents: Claim_ID, Document_Type_Code, Created_by_Staff_ID, Created_Date; Claims_Processing_Stages: Claim_Stage_ID, Next_Claim_Stage_ID, Claim_Status_Name, Claim_Status_Description; Claims_Processing: Claim_Processing_ID, Claim_ID, Claim_Outcome_Code, Claim_Stage_ID, Staff_ID | Find the names of all the customers and staff members.", "sql": "SELECT customer_details FROM customers UNION SELECT staff_details FROM staff", "example": {"db_id": "insurance_and_eClaims", "query": "SELECT customer_details FROM customers UNION SELECT staff_details FROM staff", "query_toks": ["SELECT", "customer_details", "FROM", "customers", "UNION", "SELECT", "staff_details", "FROM", "staff"], "query_toks_no_value": ["select", "customer_details", "from", "customers", "union", "select", "staff_details", "from", "staff"], "question": "Find the names of all the customers and staff members.", "question_toks": ["Find", "the", "names", "of", "all", "the", "customers", "and", "staff", "members", "."], "guid": 7620}}
{"text": "Customers: Customer_ID, Customer_Details; Staff: Staff_ID, Staff_Details; Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claim_Headers: Claim_Header_ID, Claim_Status_Code, Claim_Type_Code, Policy_ID, Date_of_Claim, Date_of_Settlement, Amount_Claimed, Amount_Piad; Claims_Documents: Claim_ID, Document_Type_Code, Created_by_Staff_ID, Created_Date; Claims_Processing_Stages: Claim_Stage_ID, Next_Claim_Stage_ID, Claim_Status_Name, Claim_Status_Description; Claims_Processing: Claim_Processing_ID, Claim_ID, Claim_Outcome_Code, Claim_Stage_ID, Staff_ID | Which customer is associated with the latest policy?", "sql": "SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.start_date  =  (SELECT max(start_date) FROM policies)", "example": {"db_id": "insurance_and_eClaims", "query": "SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.start_date  =  (SELECT max(start_date) FROM policies)", "query_toks": ["SELECT", "t2.customer_details", "FROM", "policies", "AS", "t1", "JOIN", "customers", "AS", "t2", "ON", "t1.customer_id", "=", "t2.customer_id", "WHERE", "t1.start_date", "=", "(", "SELECT", "max", "(", "start_date", ")", "FROM", "policies", ")"], "query_toks_no_value": ["select", "t2", ".", "customer_details", "from", "policies", "as", "t1", "join", "customers", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "where", "t1", ".", "start_date", "=", "(", "select", "max", "(", "start_date", ")", "from", "policies", ")"], "question": "Which customer is associated with the latest policy?", "question_toks": ["Which", "customer", "is", "associated", "with", "the", "latest", "policy", "?"], "guid": 7621}}
{"text": "ACCOUNTS: custid, name; SAVINGS: custid, balance; CHECKING: custid, balance | What are the names of customers with accounts, and how many checking accounts do each of them have?", "sql": "SELECT count(*) ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name", "example": {"db_id": "small_bank_1", "query": "SELECT count(*) ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "T1.name", "FROM", "accounts", "AS", "T1", "JOIN", "checking", "AS", "T2", "ON", "T1.custid", "=", "T2.custid", "GROUP", "BY", "T1.name"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "t1", ".", "name", "from", "accounts", "as", "t1", "join", "checking", "as", "t2", "on", "t1", ".", "custid", "=", "t2", ".", "custid", "group", "by", "t1", ".", "name"], "question": "What are the names of customers with accounts, and how many checking accounts do each of them have?", "question_toks": ["What", "are", "the", "names", "of", "customers", "with", "accounts", ",", "and", "how", "many", "checking", "accounts", "do", "each", "of", "them", "have", "?"], "guid": 7622}}
{"text": "Customers: Customer_ID, Customer_Details; Customer_Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claims: Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled; Settlements: Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID; Payments: Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment | Which claim incurred the most number of settlements? List the claim id, the date the claim was made, and the number.", "sql": "SELECT T1.claim_id ,  T1.date_claim_made ,  count(*) FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id  =  T2.claim_id GROUP BY T1.claim_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "insurance_policies", "query": "SELECT T1.claim_id ,  T1.date_claim_made ,  count(*) FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id  =  T2.claim_id GROUP BY T1.claim_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.claim_id", ",", "T1.date_claim_made", ",", "count", "(", "*", ")", "FROM", "Claims", "AS", "T1", "JOIN", "Settlements", "AS", "T2", "ON", "T1.claim_id", "=", "T2.claim_id", "GROUP", "BY", "T1.claim_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "claim_id", ",", "t1", ".", "date_claim_made", ",", "count", "(", "*", ")", "from", "claims", "as", "t1", "join", "settlements", "as", "t2", "on", "t1", ".", "claim_id", "=", "t2", ".", "claim_id", "group", "by", "t1", ".", "claim_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which claim incurred the most number of settlements? List the claim id, the date the claim was made, and the number.", "question_toks": ["Which", "claim", "incurred", "the", "most", "number", "of", "settlements", "?", "List", "the", "claim", "id", ",", "the", "date", "the", "claim", "was", "made", ",", "and", "the", "number", "."], "guid": 7623}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | What are the names and account balances for customers who have taken a total amount of more than 5000 in loans?", "sql": "SELECT T1.cust_name ,  T1.acc_type FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING sum(T2.amount)  >  5000", "example": {"db_id": "loan_1", "query": "SELECT T1.cust_name ,  T1.acc_type FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING sum(T2.amount)  >  5000", "query_toks": ["SELECT", "T1.cust_name", ",", "T1.acc_type", "FROM", "customer", "AS", "T1", "JOIN", "loan", "AS", "T2", "ON", "T1.cust_id", "=", "T2.cust_id", "GROUP", "BY", "T1.cust_name", "HAVING", "sum", "(", "T2.amount", ")", ">", "5000"], "query_toks_no_value": ["select", "t1", ".", "cust_name", ",", "t1", ".", "acc_type", "from", "customer", "as", "t1", "join", "loan", "as", "t2", "on", "t1", ".", "cust_id", "=", "t2", ".", "cust_id", "group", "by", "t1", ".", "cust_name", "having", "sum", "(", "t2", ".", "amount", ")", ">", "value"], "question": "What are the names and account balances for customers who have taken a total amount of more than 5000 in loans?", "question_toks": ["What", "are", "the", "names", "and", "account", "balances", "for", "customers", "who", "have", "taken", "a", "total", "amount", "of", "more", "than", "5000", "in", "loans", "?"], "guid": 7624}}
{"text": "Customers: Customer_ID, Customer_name; Services: Service_ID, Service_name; Available_Policies: Policy_ID, policy_type_code, Customer_Phone; Customers_Policies: Customer_ID, Policy_ID, Date_Opened, Date_Closed; First_Notification_of_Loss: FNOL_ID, Customer_ID, Policy_ID, Service_ID; Claims: Claim_ID, FNOL_ID, Effective_Date; Settlements: Settlement_ID, Claim_ID, Effective_Date, Settlement_Amount | Which customers have used the service named \"Close a policy\" or \"Upgrade a policy\"? Give me the customer names.", "sql": "SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  \"Close a policy\" OR t3.service_name  =  \"Upgrade a policy\"", "example": {"db_id": "insurance_fnol", "query": "SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  \"Close a policy\" OR t3.service_name  =  \"Upgrade a policy\"", "query_toks": ["SELECT", "t1.customer_name", "FROM", "customers", "AS", "t1", "JOIN", "first_notification_of_loss", "AS", "t2", "ON", "t1.customer_id", "=", "t2.customer_id", "JOIN", "services", "AS", "t3", "ON", "t2.service_id", "=", "t3.service_id", "WHERE", "t3.service_name", "=", "``", "Close", "a", "policy", "''", "OR", "t3.service_name", "=", "``", "Upgrade", "a", "policy", "''"], "query_toks_no_value": ["select", "t1", ".", "customer_name", "from", "customers", "as", "t1", "join", "first_notification_of_loss", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "join", "services", "as", "t3", "on", "t2", ".", "service_id", "=", "t3", ".", "service_id", "where", "t3", ".", "service_name", "=", "value", "or", "t3", ".", "service_name", "=", "value"], "question": "Which customers have used the service named \"Close a policy\" or \"Upgrade a policy\"? Give me the customer names.", "question_toks": ["Which", "customers", "have", "used", "the", "service", "named", "``", "Close", "a", "policy", "''", "or", "``", "Upgrade", "a", "policy", "''", "?", "Give", "me", "the", "customer", "names", "."], "guid": 7625}}
{"text": "ACCOUNTS: custid, name; SAVINGS: custid, balance; CHECKING: custid, balance | What is the total balance of savings accounts not belonging to someone with the name Brown?", "sql": "SELECT sum(T2.balance) FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T1.name != 'Brown'", "example": {"db_id": "small_bank_1", "query": "SELECT sum(T2.balance) FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T1.name != 'Brown'", "query_toks": ["SELECT", "sum", "(", "T2.balance", ")", "FROM", "accounts", "AS", "T1", "JOIN", "savings", "AS", "T2", "ON", "T1.custid", "=", "T2.custid", "WHERE", "T1.name", "!", "=", "'Brown", "'"], "query_toks_no_value": ["select", "sum", "(", "t2", ".", "balance", ")", "from", "accounts", "as", "t1", "join", "savings", "as", "t2", "on", "t1", ".", "custid", "=", "t2", ".", "custid", "where", "t1", ".", "name", "!", "=", "value"], "question": "What is the total balance of savings accounts not belonging to someone with the name Brown?", "question_toks": ["What", "is", "the", "total", "balance", "of", "savings", "accounts", "not", "belonging", "to", "someone", "with", "the", "name", "Brown", "?"], "guid": 7626}}
{"text": "ACCOUNTS: custid, name; SAVINGS: custid, balance; CHECKING: custid, balance | What is the checking balance of the account whose owner\u2019s name contains the substring \u2018ee\u2019?", "sql": "SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T1.name LIKE '%ee%'", "example": {"db_id": "small_bank_1", "query": "SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T1.name LIKE '%ee%'", "query_toks": ["SELECT", "T2.balance", "FROM", "accounts", "AS", "T1", "JOIN", "checking", "AS", "T2", "ON", "T1.custid", "=", "T2.custid", "WHERE", "T1.name", "LIKE", "'", "%", "ee", "%", "'"], "query_toks_no_value": ["select", "t2", ".", "balance", "from", "accounts", "as", "t1", "join", "checking", "as", "t2", "on", "t1", ".", "custid", "=", "t2", ".", "custid", "where", "t1", ".", "name", "like", "value"], "question": "What is the checking balance of the account whose owner\u2019s name contains the substring \u2018ee\u2019?", "question_toks": ["What", "is", "the", "checking", "balance", "of", "the", "account", "whose", "owner\u2019s", "name", "contains", "the", "substring", "\u2018ee\u2019", "?"], "guid": 7627}}
{"text": "ACCOUNTS: custid, name; SAVINGS: custid, balance; CHECKING: custid, balance | What are the names of all the customers in alphabetical order?", "sql": "SELECT name FROM accounts ORDER BY name", "example": {"db_id": "small_bank_1", "query": "SELECT name FROM accounts ORDER BY name", "query_toks": ["SELECT", "name", "FROM", "accounts", "ORDER", "BY", "name"], "query_toks_no_value": ["select", "name", "from", "accounts", "order", "by", "name"], "question": "What are the names of all the customers in alphabetical order?", "question_toks": ["What", "are", "the", "names", "of", "all", "the", "customers", "in", "alphabetical", "order", "?"], "guid": 7628}}
{"text": "Ref_Feature_Types: feature_type_code, feature_type_name; Ref_Property_Types: property_type_code, property_type_description; Other_Available_Features: feature_id, feature_type_code, feature_name, feature_description; Properties: property_id, property_type_code, date_on_market, date_sold, property_name, property_address, room_count, vendor_requested_price, buyer_offered_price, agreed_selling_price; Other_Property_Features: property_id, feature_id, property_feature_description | Show the property type descriptions of properties belonging to that code.", "sql": "SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code  =  T2.property_type_code GROUP BY T1.property_type_code", "example": {"db_id": "real_estate_properties", "query": "SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code  =  T2.property_type_code GROUP BY T1.property_type_code", "query_toks": ["SELECT", "T2.property_type_description", "FROM", "Properties", "AS", "T1", "JOIN", "Ref_Property_Types", "AS", "T2", "ON", "T1.property_type_code", "=", "T2.property_type_code", "GROUP", "BY", "T1.property_type_code"], "query_toks_no_value": ["select", "t2", ".", "property_type_description", "from", "properties", "as", "t1", "join", "ref_property_types", "as", "t2", "on", "t1", ".", "property_type_code", "=", "t2", ".", "property_type_code", "group", "by", "t1", ".", "property_type_code"], "question": "Show the property type descriptions of properties belonging to that code.", "question_toks": ["Show", "the", "property", "type", "descriptions", "of", "properties", "belonging", "to", "that", "code", "."], "guid": 7629}}
{"text": "Customers: Customer_ID, Customer_Details; Staff: Staff_ID, Staff_Details; Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claim_Headers: Claim_Header_ID, Claim_Status_Code, Claim_Type_Code, Policy_ID, Date_of_Claim, Date_of_Settlement, Amount_Claimed, Amount_Piad; Claims_Documents: Claim_ID, Document_Type_Code, Created_by_Staff_ID, Created_Date; Claims_Processing_Stages: Claim_Stage_ID, Next_Claim_Stage_ID, Claim_Status_Name, Claim_Status_Description; Claims_Processing: Claim_Processing_ID, Claim_ID, Claim_Outcome_Code, Claim_Stage_ID, Staff_ID | Find the type code of the most frequently used policy.", "sql": "SELECT policy_type_code FROM policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "insurance_and_eClaims", "query": "SELECT policy_type_code FROM policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "policy_type_code", "FROM", "policies", "GROUP", "BY", "policy_type_code", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "policy_type_code", "from", "policies", "group", "by", "policy_type_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Find the type code of the most frequently used policy.", "question_toks": ["Find", "the", "type", "code", "of", "the", "most", "frequently", "used", "policy", "."], "guid": 7630}}
{"text": "Customers: Customer_ID, Customer_name; Services: Service_ID, Service_name; Available_Policies: Policy_ID, policy_type_code, Customer_Phone; Customers_Policies: Customer_ID, Policy_ID, Date_Opened, Date_Closed; First_Notification_of_Loss: FNOL_ID, Customer_ID, Policy_ID, Service_ID; Claims: Claim_ID, FNOL_ID, Effective_Date; Settlements: Settlement_ID, Claim_ID, Effective_Date, Settlement_Amount | What are the maximum and minimum settlement amount on record?", "sql": "SELECT max(settlement_amount) ,  min(settlement_amount) FROM settlements", "example": {"db_id": "insurance_fnol", "query": "SELECT max(settlement_amount) ,  min(settlement_amount) FROM settlements", "query_toks": ["SELECT", "max", "(", "settlement_amount", ")", ",", "min", "(", "settlement_amount", ")", "FROM", "settlements"], "query_toks_no_value": ["select", "max", "(", "settlement_amount", ")", ",", "min", "(", "settlement_amount", ")", "from", "settlements"], "question": "What are the maximum and minimum settlement amount on record?", "question_toks": ["What", "are", "the", "maximum", "and", "minimum", "settlement", "amount", "on", "record", "?"], "guid": 7631}}
{"text": "ACCOUNTS: custid, name; SAVINGS: custid, balance; CHECKING: custid, balance | List all customers\u2019 names in the alphabetical order.", "sql": "SELECT name FROM accounts ORDER BY name", "example": {"db_id": "small_bank_1", "query": "SELECT name FROM accounts ORDER BY name", "query_toks": ["SELECT", "name", "FROM", "accounts", "ORDER", "BY", "name"], "query_toks_no_value": ["select", "name", "from", "accounts", "order", "by", "name"], "question": "List all customers\u2019 names in the alphabetical order.", "question_toks": ["List", "all", "customers\u2019", "names", "in", "the", "alphabetical", "order", "."], "guid": 7632}}
{"text": "Customers: Customer_ID, Customer_name; Services: Service_ID, Service_name; Available_Policies: Policy_ID, policy_type_code, Customer_Phone; Customers_Policies: Customer_ID, Policy_ID, Date_Opened, Date_Closed; First_Notification_of_Loss: FNOL_ID, Customer_ID, Policy_ID, Service_ID; Claims: Claim_ID, FNOL_ID, Effective_Date; Settlements: Settlement_ID, Claim_ID, Effective_Date, Settlement_Amount | Count the total number of available services.", "sql": "SELECT count(*) FROM services", "example": {"db_id": "insurance_fnol", "query": "SELECT count(*) FROM services", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "services"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "services"], "question": "Count the total number of available services.", "question_toks": ["Count", "the", "total", "number", "of", "available", "services", "."], "guid": 7633}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | Find the name and account balance of the customers who have loans with a total amount of more than 5000.", "sql": "SELECT T1.cust_name ,  T1.acc_type FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING sum(T2.amount)  >  5000", "example": {"db_id": "loan_1", "query": "SELECT T1.cust_name ,  T1.acc_type FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING sum(T2.amount)  >  5000", "query_toks": ["SELECT", "T1.cust_name", ",", "T1.acc_type", "FROM", "customer", "AS", "T1", "JOIN", "loan", "AS", "T2", "ON", "T1.cust_id", "=", "T2.cust_id", "GROUP", "BY", "T1.cust_name", "HAVING", "sum", "(", "T2.amount", ")", ">", "5000"], "query_toks_no_value": ["select", "t1", ".", "cust_name", ",", "t1", ".", "acc_type", "from", "customer", "as", "t1", "join", "loan", "as", "t2", "on", "t1", ".", "cust_id", "=", "t2", ".", "cust_id", "group", "by", "t1", ".", "cust_name", "having", "sum", "(", "t2", ".", "amount", ")", ">", "value"], "question": "Find the name and account balance of the customers who have loans with a total amount of more than 5000.", "question_toks": ["Find", "the", "name", "and", "account", "balance", "of", "the", "customers", "who", "have", "loans", "with", "a", "total", "amount", "of", "more", "than", "5000", "."], "guid": 7634}}
{"text": "ACCOUNTS: custid, name; SAVINGS: custid, balance; CHECKING: custid, balance | Find the number of accounts with a savings balance that is higher than the average savings balance.", "sql": "SELECT count(*) FROM savings WHERE balance  >  (SELECT avg(balance) FROM savings)", "example": {"db_id": "small_bank_1", "query": "SELECT count(*) FROM savings WHERE balance  >  (SELECT avg(balance) FROM savings)", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "savings", "WHERE", "balance", ">", "(", "SELECT", "avg", "(", "balance", ")", "FROM", "savings", ")"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "savings", "where", "balance", ">", "(", "select", "avg", "(", "balance", ")", "from", "savings", ")"], "question": "Find the number of accounts with a savings balance that is higher than the average savings balance.", "question_toks": ["Find", "the", "number", "of", "accounts", "with", "a", "savings", "balance", "that", "is", "higher", "than", "the", "average", "savings", "balance", "."], "guid": 7635}}
{"text": "Customers: Customer_ID, Customer_Details; Staff: Staff_ID, Staff_Details; Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claim_Headers: Claim_Header_ID, Claim_Status_Code, Claim_Type_Code, Policy_ID, Date_of_Claim, Date_of_Settlement, Amount_Claimed, Amount_Piad; Claims_Documents: Claim_ID, Document_Type_Code, Created_by_Staff_ID, Created_Date; Claims_Processing_Stages: Claim_Stage_ID, Next_Claim_Stage_ID, Claim_Status_Name, Claim_Status_Description; Claims_Processing: Claim_Processing_ID, Claim_ID, Claim_Outcome_Code, Claim_Stage_ID, Staff_ID | Which customer have the most policies? Give me the customer details.", "sql": "SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t2.customer_details ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "insurance_and_eClaims", "query": "SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t2.customer_details ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "t2.customer_details", "FROM", "policies", "AS", "t1", "JOIN", "customers", "AS", "t2", "ON", "t1.customer_id", "=", "t2.customer_id", "GROUP", "BY", "t2.customer_details", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "customer_details", "from", "policies", "as", "t1", "join", "customers", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "group", "by", "t2", ".", "customer_details", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which customer have the most policies? Give me the customer details.", "question_toks": ["Which", "customer", "have", "the", "most", "policies", "?", "Give", "me", "the", "customer", "details", "."], "guid": 7636}}
{"text": "Customers: Customer_ID, Customer_Details; Staff: Staff_ID, Staff_Details; Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claim_Headers: Claim_Header_ID, Claim_Status_Code, Claim_Type_Code, Policy_ID, Date_of_Claim, Date_of_Settlement, Amount_Claimed, Amount_Piad; Claims_Documents: Claim_ID, Document_Type_Code, Created_by_Staff_ID, Created_Date; Claims_Processing_Stages: Claim_Stage_ID, Next_Claim_Stage_ID, Claim_Status_Name, Claim_Status_Description; Claims_Processing: Claim_Processing_ID, Claim_ID, Claim_Outcome_Code, Claim_Stage_ID, Staff_ID | Find the customer who started a policy most recently.", "sql": "SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.start_date  =  (SELECT max(start_date) FROM policies)", "example": {"db_id": "insurance_and_eClaims", "query": "SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.start_date  =  (SELECT max(start_date) FROM policies)", "query_toks": ["SELECT", "t2.customer_details", "FROM", "policies", "AS", "t1", "JOIN", "customers", "AS", "t2", "ON", "t1.customer_id", "=", "t2.customer_id", "WHERE", "t1.start_date", "=", "(", "SELECT", "max", "(", "start_date", ")", "FROM", "policies", ")"], "query_toks_no_value": ["select", "t2", ".", "customer_details", "from", "policies", "as", "t1", "join", "customers", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "where", "t1", ".", "start_date", "=", "(", "select", "max", "(", "start_date", ")", "from", "policies", ")"], "question": "Find the customer who started a policy most recently.", "question_toks": ["Find", "the", "customer", "who", "started", "a", "policy", "most", "recently", "."], "guid": 7637}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | What are the names of customers with credit score less than the average credit score across customers?", "sql": "SELECT cust_name FROM customer WHERE credit_score  <  (SELECT avg(credit_score) FROM customer)", "example": {"db_id": "loan_1", "query": "SELECT cust_name FROM customer WHERE credit_score  <  (SELECT avg(credit_score) FROM customer)", "query_toks": ["SELECT", "cust_name", "FROM", "customer", "WHERE", "credit_score", "<", "(", "SELECT", "avg", "(", "credit_score", ")", "FROM", "customer", ")"], "query_toks_no_value": ["select", "cust_name", "from", "customer", "where", "credit_score", "<", "(", "select", "avg", "(", "credit_score", ")", "from", "customer", ")"], "question": "What are the names of customers with credit score less than the average credit score across customers?", "question_toks": ["What", "are", "the", "names", "of", "customers", "with", "credit", "score", "less", "than", "the", "average", "credit", "score", "across", "customers", "?"], "guid": 7638}}
{"text": "Customers: Customer_ID, Customer_Details; Customer_Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claims: Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled; Settlements: Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID; Payments: Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment | Among all the claims, what is the settlement amount of the claim with the largest claim amount? List both the settlement amount and claim amount.", "sql": "SELECT Amount_Settled ,  Amount_Claimed FROM Claims ORDER BY Amount_Claimed DESC LIMIT 1", "example": {"db_id": "insurance_policies", "query": "SELECT Amount_Settled ,  Amount_Claimed FROM Claims ORDER BY Amount_Claimed DESC LIMIT 1", "query_toks": ["SELECT", "Amount_Settled", ",", "Amount_Claimed", "FROM", "Claims", "ORDER", "BY", "Amount_Claimed", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "amount_settled", ",", "amount_claimed", "from", "claims", "order", "by", "amount_claimed", "desc", "limit", "value"], "question": "Among all the claims, what is the settlement amount of the claim with the largest claim amount? List both the settlement amount and claim amount.", "question_toks": ["Among", "all", "the", "claims", ",", "what", "is", "the", "settlement", "amount", "of", "the", "claim", "with", "the", "largest", "claim", "amount", "?", "List", "both", "the", "settlement", "amount", "and", "claim", "amount", "."], "guid": 7639}}
{"text": "ACCOUNTS: custid, name; SAVINGS: custid, balance; CHECKING: custid, balance | What are the names of customers who have a savings balance lower than their checking balance, and what is the total of their checking and savings balances?", "sql": "SELECT T1.name ,  T3.balance + T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T3.balance  <  T2.balance", "example": {"db_id": "small_bank_1", "query": "SELECT T1.name ,  T3.balance + T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T3.balance  <  T2.balance", "query_toks": ["SELECT", "T1.name", ",", "T3.balance", "+", "T2.balance", "FROM", "accounts", "AS", "T1", "JOIN", "checking", "AS", "T2", "ON", "T1.custid", "=", "T2.custid", "JOIN", "savings", "AS", "T3", "ON", "T1.custid", "=", "T3.custid", "WHERE", "T3.balance", "<", "T2.balance"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "t3", ".", "balance", "+", "t2", ".", "balance", "from", "accounts", "as", "t1", "join", "checking", "as", "t2", "on", "t1", ".", "custid", "=", "t2", ".", "custid", "join", "savings", "as", "t3", "on", "t1", ".", "custid", "=", "t3", ".", "custid", "where", "t3", ".", "balance", "<", "t2", ".", "balance"], "question": "What are the names of customers who have a savings balance lower than their checking balance, and what is the total of their checking and savings balances?", "question_toks": ["What", "are", "the", "names", "of", "customers", "who", "have", "a", "savings", "balance", "lower", "than", "their", "checking", "balance", ",", "and", "what", "is", "the", "total", "of", "their", "checking", "and", "savings", "balances", "?"], "guid": 7640}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | What are the names of the different bank branches, and what are their total loan amounts?", "sql": "SELECT sum(amount) ,  T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id GROUP BY T1.bname", "example": {"db_id": "loan_1", "query": "SELECT sum(amount) ,  T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id GROUP BY T1.bname", "query_toks": ["SELECT", "sum", "(", "amount", ")", ",", "T1.bname", "FROM", "bank", "AS", "T1", "JOIN", "loan", "AS", "T2", "ON", "T1.branch_id", "=", "T2.branch_id", "GROUP", "BY", "T1.bname"], "query_toks_no_value": ["select", "sum", "(", "amount", ")", ",", "t1", ".", "bname", "from", "bank", "as", "t1", "join", "loan", "as", "t2", "on", "t1", ".", "branch_id", "=", "t2", ".", "branch_id", "group", "by", "t1", ".", "bname"], "question": "What are the names of the different bank branches, and what are their total loan amounts?", "question_toks": ["What", "are", "the", "names", "of", "the", "different", "bank", "branches", ",", "and", "what", "are", "their", "total", "loan", "amounts", "?"], "guid": 7641}}
{"text": "Customers: Customer_ID, Customer_Details; Customer_Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claims: Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled; Settlements: Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID; Payments: Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment | Return the claim start date for the claims whose claimed amount is no more than the average", "sql": "SELECT Date_Claim_Made FROM Claims WHERE Amount_Settled  <=  ( SELECT avg(Amount_Settled) FROM Claims )", "example": {"db_id": "insurance_policies", "query": "SELECT Date_Claim_Made FROM Claims WHERE Amount_Settled  <=  ( SELECT avg(Amount_Settled) FROM Claims )", "query_toks": ["SELECT", "Date_Claim_Made", "FROM", "Claims", "WHERE", "Amount_Settled", "<", "=", "(", "SELECT", "avg", "(", "Amount_Settled", ")", "FROM", "Claims", ")"], "query_toks_no_value": ["select", "date_claim_made", "from", "claims", "where", "amount_settled", "<", "=", "(", "select", "avg", "(", "amount_settled", ")", "from", "claims", ")"], "question": "Return the claim start date for the claims whose claimed amount is no more than the average", "question_toks": ["Return", "the", "claim", "start", "date", "for", "the", "claims", "whose", "claimed", "amount", "is", "no", "more", "than", "the", "average"], "guid": 7642}}
{"text": "ACCOUNTS: custid, name; SAVINGS: custid, balance; CHECKING: custid, balance | Find the checking balance and saving balance in the Brown\u2019s account.", "sql": "SELECT T2.balance ,  T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T1.name  =  'Brown'", "example": {"db_id": "small_bank_1", "query": "SELECT T2.balance ,  T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T1.name  =  'Brown'", "query_toks": ["SELECT", "T2.balance", ",", "T3.balance", "FROM", "accounts", "AS", "T1", "JOIN", "checking", "AS", "T2", "ON", "T1.custid", "=", "T2.custid", "JOIN", "savings", "AS", "T3", "ON", "T1.custid", "=", "T3.custid", "WHERE", "T1.name", "=", "'Brown", "'"], "query_toks_no_value": ["select", "t2", ".", "balance", ",", "t3", ".", "balance", "from", "accounts", "as", "t1", "join", "checking", "as", "t2", "on", "t1", ".", "custid", "=", "t2", ".", "custid", "join", "savings", "as", "t3", "on", "t1", ".", "custid", "=", "t3", ".", "custid", "where", "t1", ".", "name", "=", "value"], "question": "Find the checking balance and saving balance in the Brown\u2019s account.", "question_toks": ["Find", "the", "checking", "balance", "and", "saving", "balance", "in", "the", "Brown\u2019s", "account", "."], "guid": 7643}}
{"text": "Addresses: Address_ID, address_details; Locations: Location_ID, Other_Details; Products: Product_ID, Product_Type_Code, Product_Name, Product_Price; Parties: Party_ID, Party_Details; Assets: Asset_ID, Other_Details; Channels: Channel_ID, Other_Details; Finances: Finance_ID, Other_Details; Events: Event_ID, Address_ID, Channel_ID, Event_Type_Code, Finance_ID, Location_ID; Products_in_Events: Product_in_Event_ID, Event_ID, Product_ID; Parties_in_Events: Party_ID, Event_ID, Role_Code | How many products are there?", "sql": "SELECT count(*) FROM Products", "example": {"db_id": "solvency_ii", "query": "SELECT count(*) FROM Products", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Products"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "products"], "question": "How many products are there?", "question_toks": ["How", "many", "products", "are", "there", "?"], "guid": 7644}}
{"text": "Customers: Customer_ID, Customer_name; Services: Service_ID, Service_name; Available_Policies: Policy_ID, policy_type_code, Customer_Phone; Customers_Policies: Customer_ID, Policy_ID, Date_Opened, Date_Closed; First_Notification_of_Loss: FNOL_ID, Customer_ID, Policy_ID, Service_ID; Claims: Claim_ID, FNOL_ID, Effective_Date; Settlements: Settlement_ID, Claim_ID, Effective_Date, Settlement_Amount | Find the claim that has the largest total settlement amount. Return the effective date of the claim.", "sql": "SELECT t1.Effective_Date FROM claims AS t1 JOIN settlements AS t2 ON t1.claim_id  =  t2.claim_id GROUP BY t1.claim_id ORDER BY sum(t2.settlement_amount) DESC LIMIT 1", "example": {"db_id": "insurance_fnol", "query": "SELECT t1.Effective_Date FROM claims AS t1 JOIN settlements AS t2 ON t1.claim_id  =  t2.claim_id GROUP BY t1.claim_id ORDER BY sum(t2.settlement_amount) DESC LIMIT 1", "query_toks": ["SELECT", "t1.Effective_Date", "FROM", "claims", "AS", "t1", "JOIN", "settlements", "AS", "t2", "ON", "t1.claim_id", "=", "t2.claim_id", "GROUP", "BY", "t1.claim_id", "ORDER", "BY", "sum", "(", "t2.settlement_amount", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "effective_date", "from", "claims", "as", "t1", "join", "settlements", "as", "t2", "on", "t1", ".", "claim_id", "=", "t2", ".", "claim_id", "group", "by", "t1", ".", "claim_id", "order", "by", "sum", "(", "t2", ".", "settlement_amount", ")", "desc", "limit", "value"], "question": "Find the claim that has the largest total settlement amount. Return the effective date of the claim.", "question_toks": ["Find", "the", "claim", "that", "has", "the", "largest", "total", "settlement", "amount", ".", "Return", "the", "effective", "date", "of", "the", "claim", "."], "guid": 7645}}
{"text": "Customers: Customer_ID, Customer_Details; Customer_Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claims: Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled; Settlements: Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID; Payments: Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment | Give me the the customer details and id for the customers who had two or more policies but did not file any claims.", "sql": "SELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2 EXCEPT SELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.customer_id JOIN Claims AS T3 ON T2.policy_id  =  T3.policy_id", "example": {"db_id": "insurance_policies", "query": "SELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2 EXCEPT SELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.customer_id JOIN Claims AS T3 ON T2.policy_id  =  T3.policy_id", "query_toks": ["SELECT", "T1.customer_details", ",", "T1.customer_id", "FROM", "Customers", "AS", "T1", "JOIN", "Customer_Policies", "AS", "T2", "ON", "T1.Customer_id", "=", "T2.customer_id", "GROUP", "BY", "T1.customer_id", "HAVING", "count", "(", "*", ")", ">", "=", "2", "EXCEPT", "SELECT", "T1.customer_details", ",", "T1.customer_id", "FROM", "Customers", "AS", "T1", "JOIN", "Customer_Policies", "AS", "T2", "ON", "T1.Customer_id", "=", "T2.customer_id", "JOIN", "Claims", "AS", "T3", "ON", "T2.policy_id", "=", "T3.policy_id"], "query_toks_no_value": ["select", "t1", ".", "customer_details", ",", "t1", ".", "customer_id", "from", "customers", "as", "t1", "join", "customer_policies", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "group", "by", "t1", ".", "customer_id", "having", "count", "(", "*", ")", ">", "=", "value", "except", "select", "t1", ".", "customer_details", ",", "t1", ".", "customer_id", "from", "customers", "as", "t1", "join", "customer_policies", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "join", "claims", "as", "t3", "on", "t2", ".", "policy_id", "=", "t3", ".", "policy_id"], "question": "Give me the the customer details and id for the customers who had two or more policies but did not file any claims.", "question_toks": ["Give", "me", "the", "the", "customer", "details", "and", "id", "for", "the", "customers", "who", "had", "two", "or", "more", "policies", "but", "did", "not", "file", "any", "claims", "."], "guid": 7646}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | Find the number of different states which banks are located at.", "sql": "SELECT count(DISTINCT state) FROM bank", "example": {"db_id": "loan_1", "query": "SELECT count(DISTINCT state) FROM bank", "query_toks": ["SELECT", "count", "(", "DISTINCT", "state", ")", "FROM", "bank"], "query_toks_no_value": ["select", "count", "(", "distinct", "state", ")", "from", "bank"], "question": "Find the number of different states which banks are located at.", "question_toks": ["Find", "the", "number", "of", "different", "states", "which", "banks", "are", "located", "at", "."], "guid": 7647}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | Find the name of customer who has the highest amount of loans.", "sql": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name ORDER BY sum(T2.amount) DESC LIMIT 1", "example": {"db_id": "loan_1", "query": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name ORDER BY sum(T2.amount) DESC LIMIT 1", "query_toks": ["SELECT", "T1.cust_name", "FROM", "customer", "AS", "T1", "JOIN", "loan", "AS", "T2", "ON", "T1.cust_id", "=", "T2.cust_id", "GROUP", "BY", "T1.cust_name", "ORDER", "BY", "sum", "(", "T2.amount", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "cust_name", "from", "customer", "as", "t1", "join", "loan", "as", "t2", "on", "t1", ".", "cust_id", "=", "t2", ".", "cust_id", "group", "by", "t1", ".", "cust_name", "order", "by", "sum", "(", "t2", ".", "amount", ")", "desc", "limit", "value"], "question": "Find the name of customer who has the highest amount of loans.", "question_toks": ["Find", "the", "name", "of", "customer", "who", "has", "the", "highest", "amount", "of", "loans", "."], "guid": 7648}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | Find the name of bank branch that provided the greatest total amount of loans.", "sql": "SELECT T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id GROUP BY T1.bname ORDER BY sum(T2.amount) DESC LIMIT 1", "example": {"db_id": "loan_1", "query": "SELECT T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id GROUP BY T1.bname ORDER BY sum(T2.amount) DESC LIMIT 1", "query_toks": ["SELECT", "T1.bname", "FROM", "bank", "AS", "T1", "JOIN", "loan", "AS", "T2", "ON", "T1.branch_id", "=", "T2.branch_id", "GROUP", "BY", "T1.bname", "ORDER", "BY", "sum", "(", "T2.amount", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "bname", "from", "bank", "as", "t1", "join", "loan", "as", "t2", "on", "t1", ".", "branch_id", "=", "t2", ".", "branch_id", "group", "by", "t1", ".", "bname", "order", "by", "sum", "(", "t2", ".", "amount", ")", "desc", "limit", "value"], "question": "Find the name of bank branch that provided the greatest total amount of loans.", "question_toks": ["Find", "the", "name", "of", "bank", "branch", "that", "provided", "the", "greatest", "total", "amount", "of", "loans", "."], "guid": 7649}}
{"text": "Customers: Customer_ID, Customer_Details; Customer_Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claims: Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled; Settlements: Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID; Payments: Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment | Which customer had at least 2 policies but did not file any claims? List the customer details and id.", "sql": "SELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2 EXCEPT SELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.customer_id JOIN Claims AS T3 ON T2.policy_id  =  T3.policy_id", "example": {"db_id": "insurance_policies", "query": "SELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2 EXCEPT SELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.customer_id JOIN Claims AS T3 ON T2.policy_id  =  T3.policy_id", "query_toks": ["SELECT", "T1.customer_details", ",", "T1.customer_id", "FROM", "Customers", "AS", "T1", "JOIN", "Customer_Policies", "AS", "T2", "ON", "T1.Customer_id", "=", "T2.customer_id", "GROUP", "BY", "T1.customer_id", "HAVING", "count", "(", "*", ")", ">", "=", "2", "EXCEPT", "SELECT", "T1.customer_details", ",", "T1.customer_id", "FROM", "Customers", "AS", "T1", "JOIN", "Customer_Policies", "AS", "T2", "ON", "T1.Customer_id", "=", "T2.customer_id", "JOIN", "Claims", "AS", "T3", "ON", "T2.policy_id", "=", "T3.policy_id"], "query_toks_no_value": ["select", "t1", ".", "customer_details", ",", "t1", ".", "customer_id", "from", "customers", "as", "t1", "join", "customer_policies", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "group", "by", "t1", ".", "customer_id", "having", "count", "(", "*", ")", ">", "=", "value", "except", "select", "t1", ".", "customer_details", ",", "t1", ".", "customer_id", "from", "customers", "as", "t1", "join", "customer_policies", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "join", "claims", "as", "t3", "on", "t2", ".", "policy_id", "=", "t3", ".", "policy_id"], "question": "Which customer had at least 2 policies but did not file any claims? List the customer details and id.", "question_toks": ["Which", "customer", "had", "at", "least", "2", "policies", "but", "did", "not", "file", "any", "claims", "?", "List", "the", "customer", "details", "and", "id", "."], "guid": 7650}}
{"text": "Customers: Customer_ID, Customer_Details; Customer_Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claims: Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled; Settlements: Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID; Payments: Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment | Among all the claims, what is the amount claimed in the claim with the least amount settled? List both the settlement amount and claim amount.", "sql": "SELECT Amount_Settled ,  Amount_Claimed FROM Claims ORDER BY Amount_Settled ASC LIMIT 1", "example": {"db_id": "insurance_policies", "query": "SELECT Amount_Settled ,  Amount_Claimed FROM Claims ORDER BY Amount_Settled ASC LIMIT 1", "query_toks": ["SELECT", "Amount_Settled", ",", "Amount_Claimed", "FROM", "Claims", "ORDER", "BY", "Amount_Settled", "ASC", "LIMIT", "1"], "query_toks_no_value": ["select", "amount_settled", ",", "amount_claimed", "from", "claims", "order", "by", "amount_settled", "asc", "limit", "value"], "question": "Among all the claims, what is the amount claimed in the claim with the least amount settled? List both the settlement amount and claim amount.", "question_toks": ["Among", "all", "the", "claims", ",", "what", "is", "the", "amount", "claimed", "in", "the", "claim", "with", "the", "least", "amount", "settled", "?", "List", "both", "the", "settlement", "amount", "and", "claim", "amount", "."], "guid": 7651}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | Find the average number of customers in all banks of Utah state.", "sql": "SELECT avg(no_of_customers) FROM bank WHERE state  =  'Utah'", "example": {"db_id": "loan_1", "query": "SELECT avg(no_of_customers) FROM bank WHERE state  =  'Utah'", "query_toks": ["SELECT", "avg", "(", "no_of_customers", ")", "FROM", "bank", "WHERE", "state", "=", "'Utah", "'"], "query_toks_no_value": ["select", "avg", "(", "no_of_customers", ")", "from", "bank", "where", "state", "=", "value"], "question": "Find the average number of customers in all banks of Utah state.", "question_toks": ["Find", "the", "average", "number", "of", "customers", "in", "all", "banks", "of", "Utah", "state", "."], "guid": 7652}}
{"text": "ACCOUNTS: custid, name; SAVINGS: custid, balance; CHECKING: custid, balance | Count the number of accounts.", "sql": "SELECT count(*) FROM accounts", "example": {"db_id": "small_bank_1", "query": "SELECT count(*) FROM accounts", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "accounts"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "accounts"], "question": "Count the number of accounts.", "question_toks": ["Count", "the", "number", "of", "accounts", "."], "guid": 7653}}
{"text": "Customers: Customer_ID, Customer_Details; Customer_Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claims: Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled; Settlements: Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID; Payments: Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment | Count the total number of settlements made.", "sql": "SELECT count(*) FROM Settlements", "example": {"db_id": "insurance_policies", "query": "SELECT count(*) FROM Settlements", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Settlements"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "settlements"], "question": "Count the total number of settlements made.", "question_toks": ["Count", "the", "total", "number", "of", "settlements", "made", "."], "guid": 7654}}
{"text": "Customers: Customer_ID, Customer_Details; Customer_Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claims: Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled; Settlements: Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID; Payments: Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment | Which claims caused more than 2 settlements or have the maximum claim value? List the date the claim was made and the claim id.", "sql": "SELECT T1.Date_Claim_Made ,  T1.Claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id  =  T2.Claim_id GROUP BY T1.Claim_id HAVING count(*)  >  2 UNION SELECT T1.Date_Claim_Made ,  T1.Claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id  =  T2.Claim_id WHERE T1.Amount_Claimed  =  ( SELECT max(Amount_Claimed) FROM Claims )", "example": {"db_id": "insurance_policies", "query": "SELECT T1.Date_Claim_Made ,  T1.Claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id  =  T2.Claim_id GROUP BY T1.Claim_id HAVING count(*)  >  2 UNION SELECT T1.Date_Claim_Made ,  T1.Claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id  =  T2.Claim_id WHERE T1.Amount_Claimed  =  ( SELECT max(Amount_Claimed) FROM Claims )", "query_toks": ["SELECT", "T1.Date_Claim_Made", ",", "T1.Claim_id", "FROM", "Claims", "AS", "T1", "JOIN", "Settlements", "AS", "T2", "ON", "T1.Claim_id", "=", "T2.Claim_id", "GROUP", "BY", "T1.Claim_id", "HAVING", "count", "(", "*", ")", ">", "2", "UNION", "SELECT", "T1.Date_Claim_Made", ",", "T1.Claim_id", "FROM", "Claims", "AS", "T1", "JOIN", "Settlements", "AS", "T2", "ON", "T1.Claim_id", "=", "T2.Claim_id", "WHERE", "T1.Amount_Claimed", "=", "(", "SELECT", "max", "(", "Amount_Claimed", ")", "FROM", "Claims", ")"], "query_toks_no_value": ["select", "t1", ".", "date_claim_made", ",", "t1", ".", "claim_id", "from", "claims", "as", "t1", "join", "settlements", "as", "t2", "on", "t1", ".", "claim_id", "=", "t2", ".", "claim_id", "group", "by", "t1", ".", "claim_id", "having", "count", "(", "*", ")", ">", "value", "union", "select", "t1", ".", "date_claim_made", ",", "t1", ".", "claim_id", "from", "claims", "as", "t1", "join", "settlements", "as", "t2", "on", "t1", ".", "claim_id", "=", "t2", ".", "claim_id", "where", "t1", ".", "amount_claimed", "=", "(", "select", "max", "(", "amount_claimed", ")", "from", "claims", ")"], "question": "Which claims caused more than 2 settlements or have the maximum claim value? List the date the claim was made and the claim id.", "question_toks": ["Which", "claims", "caused", "more", "than", "2", "settlements", "or", "have", "the", "maximum", "claim", "value", "?", "List", "the", "date", "the", "claim", "was", "made", "and", "the", "claim", "id", "."], "guid": 7655}}
{"text": "Customers: Customer_ID, Customer_Details; Customer_Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claims: Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled; Settlements: Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID; Payments: Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment | What is total amount claimed summed across all the claims?", "sql": "SELECT sum(Amount_Claimed) FROM Claims", "example": {"db_id": "insurance_policies", "query": "SELECT sum(Amount_Claimed) FROM Claims", "query_toks": ["SELECT", "sum", "(", "Amount_Claimed", ")", "FROM", "Claims"], "query_toks_no_value": ["select", "sum", "(", "amount_claimed", ")", "from", "claims"], "question": "What is total amount claimed summed across all the claims?", "question_toks": ["What", "is", "total", "amount", "claimed", "summed", "across", "all", "the", "claims", "?"], "guid": 7656}}
{"text": "Customers: Customer_ID, Customer_Details; Staff: Staff_ID, Staff_Details; Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claim_Headers: Claim_Header_ID, Claim_Status_Code, Claim_Type_Code, Policy_ID, Date_of_Claim, Date_of_Settlement, Amount_Claimed, Amount_Piad; Claims_Documents: Claim_ID, Document_Type_Code, Created_by_Staff_ID, Created_Date; Claims_Processing_Stages: Claim_Stage_ID, Next_Claim_Stage_ID, Claim_Status_Name, Claim_Status_Description; Claims_Processing: Claim_Processing_ID, Claim_ID, Claim_Outcome_Code, Claim_Stage_ID, Staff_ID | Find the description of the claim status \"Open\".", "sql": "SELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name  =  \"Open\"", "example": {"db_id": "insurance_and_eClaims", "query": "SELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name  =  \"Open\"", "query_toks": ["SELECT", "claim_status_description", "FROM", "claims_processing_stages", "WHERE", "claim_status_name", "=", "``", "Open", "''"], "query_toks_no_value": ["select", "claim_status_description", "from", "claims_processing_stages", "where", "claim_status_name", "=", "value"], "question": "Find the description of the claim status \"Open\".", "question_toks": ["Find", "the", "description", "of", "the", "claim", "status", "``", "Open", "''", "."], "guid": 7657}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | What is the name of the bank branch that has lended the largest total amount in loans, specifically to customers with credit scores below 100?", "sql": "SELECT T2.bname FROM loan AS T1 JOIN bank AS T2 ON T1.branch_id  =  T2.branch_id JOIN customer AS T3 ON T1.cust_id  =  T3.cust_id WHERE T3.credit_score  <  100 GROUP BY T2.bname ORDER BY sum(T1.amount) DESC LIMIT 1", "example": {"db_id": "loan_1", "query": "SELECT T2.bname FROM loan AS T1 JOIN bank AS T2 ON T1.branch_id  =  T2.branch_id JOIN customer AS T3 ON T1.cust_id  =  T3.cust_id WHERE T3.credit_score  <  100 GROUP BY T2.bname ORDER BY sum(T1.amount) DESC LIMIT 1", "query_toks": ["SELECT", "T2.bname", "FROM", "loan", "AS", "T1", "JOIN", "bank", "AS", "T2", "ON", "T1.branch_id", "=", "T2.branch_id", "JOIN", "customer", "AS", "T3", "ON", "T1.cust_id", "=", "T3.cust_id", "WHERE", "T3.credit_score", "<", "100", "GROUP", "BY", "T2.bname", "ORDER", "BY", "sum", "(", "T1.amount", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "bname", "from", "loan", "as", "t1", "join", "bank", "as", "t2", "on", "t1", ".", "branch_id", "=", "t2", ".", "branch_id", "join", "customer", "as", "t3", "on", "t1", ".", "cust_id", "=", "t3", ".", "cust_id", "where", "t3", ".", "credit_score", "<", "value", "group", "by", "t2", ".", "bname", "order", "by", "sum", "(", "t1", ".", "amount", ")", "desc", "limit", "value"], "question": "What is the name of the bank branch that has lended the largest total amount in loans, specifically to customers with credit scores below 100?", "question_toks": ["What", "is", "the", "name", "of", "the", "bank", "branch", "that", "has", "lended", "the", "largest", "total", "amount", "in", "loans", ",", "specifically", "to", "customers", "with", "credit", "scores", "below", "100", "?"], "guid": 7658}}
{"text": "Customers: Customer_ID, Customer_Details; Staff: Staff_ID, Staff_Details; Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claim_Headers: Claim_Header_ID, Claim_Status_Code, Claim_Type_Code, Policy_ID, Date_of_Claim, Date_of_Settlement, Amount_Claimed, Amount_Piad; Claims_Documents: Claim_ID, Document_Type_Code, Created_by_Staff_ID, Created_Date; Claims_Processing_Stages: Claim_Stage_ID, Next_Claim_Stage_ID, Claim_Status_Name, Claim_Status_Description; Claims_Processing: Claim_Processing_ID, Claim_ID, Claim_Outcome_Code, Claim_Stage_ID, Staff_ID | Which types of policy are chosen by more than 2 customers? Give me the policy type codes.", "sql": "SELECT policy_type_code FROM policies GROUP BY policy_type_code HAVING count(*)  >  2", "example": {"db_id": "insurance_and_eClaims", "query": "SELECT policy_type_code FROM policies GROUP BY policy_type_code HAVING count(*)  >  2", "query_toks": ["SELECT", "policy_type_code", "FROM", "policies", "GROUP", "BY", "policy_type_code", "HAVING", "count", "(", "*", ")", ">", "2"], "query_toks_no_value": ["select", "policy_type_code", "from", "policies", "group", "by", "policy_type_code", "having", "count", "(", "*", ")", ">", "value"], "question": "Which types of policy are chosen by more than 2 customers? Give me the policy type codes.", "question_toks": ["Which", "types", "of", "policy", "are", "chosen", "by", "more", "than", "2", "customers", "?", "Give", "me", "the", "policy", "type", "codes", "."], "guid": 7659}}
{"text": "ACCOUNTS: custid, name; SAVINGS: custid, balance; CHECKING: custid, balance | Find the total savings balance of all accounts except the account with name \u2018Brown\u2019.", "sql": "SELECT sum(T2.balance) FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T1.name != 'Brown'", "example": {"db_id": "small_bank_1", "query": "SELECT sum(T2.balance) FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T1.name != 'Brown'", "query_toks": ["SELECT", "sum", "(", "T2.balance", ")", "FROM", "accounts", "AS", "T1", "JOIN", "savings", "AS", "T2", "ON", "T1.custid", "=", "T2.custid", "WHERE", "T1.name", "!", "=", "'Brown", "'"], "query_toks_no_value": ["select", "sum", "(", "t2", ".", "balance", ")", "from", "accounts", "as", "t1", "join", "savings", "as", "t2", "on", "t1", ".", "custid", "=", "t2", ".", "custid", "where", "t1", ".", "name", "!", "=", "value"], "question": "Find the total savings balance of all accounts except the account with name \u2018Brown\u2019.", "question_toks": ["Find", "the", "total", "savings", "balance", "of", "all", "accounts", "except", "the", "account", "with", "name", "\u2018Brown\u2019", "."], "guid": 7660}}
{"text": "Customers: Customer_ID, Customer_name; Services: Service_ID, Service_name; Available_Policies: Policy_ID, policy_type_code, Customer_Phone; Customers_Policies: Customer_ID, Policy_ID, Date_Opened, Date_Closed; First_Notification_of_Loss: FNOL_ID, Customer_ID, Policy_ID, Service_ID; Claims: Claim_ID, FNOL_ID, Effective_Date; Settlements: Settlement_ID, Claim_ID, Effective_Date, Settlement_Amount | List all the customers in increasing order of IDs.", "sql": "SELECT customer_id ,  customer_name FROM customers ORDER BY customer_id ASC", "example": {"db_id": "insurance_fnol", "query": "SELECT customer_id ,  customer_name FROM customers ORDER BY customer_id ASC", "query_toks": ["SELECT", "customer_id", ",", "customer_name", "FROM", "customers", "ORDER", "BY", "customer_id", "ASC"], "query_toks_no_value": ["select", "customer_id", ",", "customer_name", "from", "customers", "order", "by", "customer_id", "asc"], "question": "List all the customers in increasing order of IDs.", "question_toks": ["List", "all", "the", "customers", "in", "increasing", "order", "of", "IDs", "."], "guid": 7661}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | What is the average number of bank customers?", "sql": "SELECT avg(no_of_customers) FROM bank", "example": {"db_id": "loan_1", "query": "SELECT avg(no_of_customers) FROM bank", "query_toks": ["SELECT", "avg", "(", "no_of_customers", ")", "FROM", "bank"], "query_toks_no_value": ["select", "avg", "(", "no_of_customers", ")", "from", "bank"], "question": "What is the average number of bank customers?", "question_toks": ["What", "is", "the", "average", "number", "of", "bank", "customers", "?"], "guid": 7662}}
{"text": "Customers: Customer_ID, Customer_name; Services: Service_ID, Service_name; Available_Policies: Policy_ID, policy_type_code, Customer_Phone; Customers_Policies: Customer_ID, Policy_ID, Date_Opened, Date_Closed; First_Notification_of_Loss: FNOL_ID, Customer_ID, Policy_ID, Service_ID; Claims: Claim_ID, FNOL_ID, Effective_Date; Settlements: Settlement_ID, Claim_ID, Effective_Date, Settlement_Amount | What is the effective date of the claim that has the largest amount of total settlement?", "sql": "SELECT t1.Effective_Date FROM claims AS t1 JOIN settlements AS t2 ON t1.claim_id  =  t2.claim_id GROUP BY t1.claim_id ORDER BY sum(t2.settlement_amount) DESC LIMIT 1", "example": {"db_id": "insurance_fnol", "query": "SELECT t1.Effective_Date FROM claims AS t1 JOIN settlements AS t2 ON t1.claim_id  =  t2.claim_id GROUP BY t1.claim_id ORDER BY sum(t2.settlement_amount) DESC LIMIT 1", "query_toks": ["SELECT", "t1.Effective_Date", "FROM", "claims", "AS", "t1", "JOIN", "settlements", "AS", "t2", "ON", "t1.claim_id", "=", "t2.claim_id", "GROUP", "BY", "t1.claim_id", "ORDER", "BY", "sum", "(", "t2.settlement_amount", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "effective_date", "from", "claims", "as", "t1", "join", "settlements", "as", "t2", "on", "t1", ".", "claim_id", "=", "t2", ".", "claim_id", "group", "by", "t1", ".", "claim_id", "order", "by", "sum", "(", "t2", ".", "settlement_amount", ")", "desc", "limit", "value"], "question": "What is the effective date of the claim that has the largest amount of total settlement?", "question_toks": ["What", "is", "the", "effective", "date", "of", "the", "claim", "that", "has", "the", "largest", "amount", "of", "total", "settlement", "?"], "guid": 7663}}
{"text": "Customers: Customer_ID, Customer_Details; Customer_Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claims: Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled; Settlements: Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID; Payments: Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment | Give me the claim date, settlement date for all the claims whose claimed amount is larger than the average.", "sql": "SELECT Date_Claim_Made ,  Date_Claim_Settled FROM Claims WHERE Amount_Claimed  >  ( SELECT avg(Amount_Claimed) FROM Claims )", "example": {"db_id": "insurance_policies", "query": "SELECT Date_Claim_Made ,  Date_Claim_Settled FROM Claims WHERE Amount_Claimed  >  ( SELECT avg(Amount_Claimed) FROM Claims )", "query_toks": ["SELECT", "Date_Claim_Made", ",", "Date_Claim_Settled", "FROM", "Claims", "WHERE", "Amount_Claimed", ">", "(", "SELECT", "avg", "(", "Amount_Claimed", ")", "FROM", "Claims", ")"], "query_toks_no_value": ["select", "date_claim_made", ",", "date_claim_settled", "from", "claims", "where", "amount_claimed", ">", "(", "select", "avg", "(", "amount_claimed", ")", "from", "claims", ")"], "question": "Give me the claim date, settlement date for all the claims whose claimed amount is larger than the average.", "question_toks": ["Give", "me", "the", "claim", "date", ",", "settlement", "date", "for", "all", "the", "claims", "whose", "claimed", "amount", "is", "larger", "than", "the", "average", "."], "guid": 7664}}
{"text": "Customers: Customer_ID, Customer_Details; Staff: Staff_ID, Staff_Details; Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claim_Headers: Claim_Header_ID, Claim_Status_Code, Claim_Type_Code, Policy_ID, Date_of_Claim, Date_of_Settlement, Amount_Claimed, Amount_Piad; Claims_Documents: Claim_ID, Document_Type_Code, Created_by_Staff_ID, Created_Date; Claims_Processing_Stages: Claim_Stage_ID, Next_Claim_Stage_ID, Claim_Status_Name, Claim_Status_Description; Claims_Processing: Claim_Processing_ID, Claim_ID, Claim_Outcome_Code, Claim_Stage_ID, Staff_ID | For each policy type, return its type code and its count in the record.", "sql": "SELECT policy_type_code ,  count(*) FROM policies GROUP BY policy_type_code", "example": {"db_id": "insurance_and_eClaims", "query": "SELECT policy_type_code ,  count(*) FROM policies GROUP BY policy_type_code", "query_toks": ["SELECT", "policy_type_code", ",", "count", "(", "*", ")", "FROM", "policies", "GROUP", "BY", "policy_type_code"], "query_toks_no_value": ["select", "policy_type_code", ",", "count", "(", "*", ")", "from", "policies", "group", "by", "policy_type_code"], "question": "For each policy type, return its type code and its count in the record.", "question_toks": ["For", "each", "policy", "type", ",", "return", "its", "type", "code", "and", "its", "count", "in", "the", "record", "."], "guid": 7665}}
{"text": "Addresses: Address_ID, address_details; Locations: Location_ID, Other_Details; Products: Product_ID, Product_Type_Code, Product_Name, Product_Price; Parties: Party_ID, Party_Details; Assets: Asset_ID, Other_Details; Channels: Channel_ID, Other_Details; Finances: Finance_ID, Other_Details; Events: Event_ID, Address_ID, Channel_ID, Event_Type_Code, Finance_ID, Location_ID; Products_in_Events: Product_in_Event_ID, Event_ID, Product_ID; Parties_in_Events: Party_ID, Event_ID, Role_Code | Show the names of products that are in at least two events.", "sql": "SELECT T1.Product_Name FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID  =  T2.Product_ID GROUP BY T1.Product_Name HAVING COUNT(*)  >=  2", "example": {"db_id": "solvency_ii", "query": "SELECT T1.Product_Name FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID  =  T2.Product_ID GROUP BY T1.Product_Name HAVING COUNT(*)  >=  2", "query_toks": ["SELECT", "T1.Product_Name", "FROM", "Products", "AS", "T1", "JOIN", "Products_in_Events", "AS", "T2", "ON", "T1.Product_ID", "=", "T2.Product_ID", "GROUP", "BY", "T1.Product_Name", "HAVING", "COUNT", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "t1", ".", "product_name", "from", "products", "as", "t1", "join", "products_in_events", "as", "t2", "on", "t1", ".", "product_id", "=", "t2", ".", "product_id", "group", "by", "t1", ".", "product_name", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "Show the names of products that are in at least two events.", "question_toks": ["Show", "the", "names", "of", "products", "that", "are", "in", "at", "least", "two", "events", "."], "guid": 7666}}
{"text": "Customers: Customer_ID, Customer_Details; Customer_Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claims: Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled; Settlements: Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID; Payments: Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment | Which kind of policy type was chosen by the most customers?", "sql": "SELECT Policy_Type_Code FROM Customer_Policies GROUP BY Policy_Type_Code ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "insurance_policies", "query": "SELECT Policy_Type_Code FROM Customer_Policies GROUP BY Policy_Type_Code ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "Policy_Type_Code", "FROM", "Customer_Policies", "GROUP", "BY", "Policy_Type_Code", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "policy_type_code", "from", "customer_policies", "group", "by", "policy_type_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which kind of policy type was chosen by the most customers?", "question_toks": ["Which", "kind", "of", "policy", "type", "was", "chosen", "by", "the", "most", "customers", "?"], "guid": 7667}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | Find the state, account type, and credit score of the customer whose number of loan is 0.", "sql": "SELECT state ,  acc_type ,  credit_score FROM customer WHERE no_of_loans  =  0", "example": {"db_id": "loan_1", "query": "SELECT state ,  acc_type ,  credit_score FROM customer WHERE no_of_loans  =  0", "query_toks": ["SELECT", "state", ",", "acc_type", ",", "credit_score", "FROM", "customer", "WHERE", "no_of_loans", "=", "0"], "query_toks_no_value": ["select", "state", ",", "acc_type", ",", "credit_score", "from", "customer", "where", "no_of_loans", "=", "value"], "question": "Find the state, account type, and credit score of the customer whose number of loan is 0.", "question_toks": ["Find", "the", "state", ",", "account", "type", ",", "and", "credit", "score", "of", "the", "customer", "whose", "number", "of", "loan", "is", "0", "."], "guid": 7668}}
{"text": "Customers: Customer_ID, Customer_Details; Customer_Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claims: Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled; Settlements: Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID; Payments: Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment | How many settlements does each claim correspond to? List the claim id and the number of settlements.", "sql": "SELECT T1.Claim_id ,  count(*) FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id  =  T2.claim_id GROUP BY T1.claim_id", "example": {"db_id": "insurance_policies", "query": "SELECT T1.Claim_id ,  count(*) FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id  =  T2.claim_id GROUP BY T1.claim_id", "query_toks": ["SELECT", "T1.Claim_id", ",", "count", "(", "*", ")", "FROM", "Claims", "AS", "T1", "JOIN", "Settlements", "AS", "T2", "ON", "T1.claim_id", "=", "T2.claim_id", "GROUP", "BY", "T1.claim_id"], "query_toks_no_value": ["select", "t1", ".", "claim_id", ",", "count", "(", "*", ")", "from", "claims", "as", "t1", "join", "settlements", "as", "t2", "on", "t1", ".", "claim_id", "=", "t2", ".", "claim_id", "group", "by", "t1", ".", "claim_id"], "question": "How many settlements does each claim correspond to? List the claim id and the number of settlements.", "question_toks": ["How", "many", "settlements", "does", "each", "claim", "correspond", "to", "?", "List", "the", "claim", "id", "and", "the", "number", "of", "settlements", "."], "guid": 7669}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | Find the number of different cities which banks are located at.", "sql": "SELECT count(DISTINCT city) FROM bank", "example": {"db_id": "loan_1", "query": "SELECT count(DISTINCT city) FROM bank", "query_toks": ["SELECT", "count", "(", "DISTINCT", "city", ")", "FROM", "bank"], "query_toks_no_value": ["select", "count", "(", "distinct", "city", ")", "from", "bank"], "question": "Find the number of different cities which banks are located at.", "question_toks": ["Find", "the", "number", "of", "different", "cities", "which", "banks", "are", "located", "at", "."], "guid": 7670}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | What is the total number of customers who use banks in New York City?", "sql": "SELECT sum(no_of_customers) FROM bank WHERE city  =  'New York City'", "example": {"db_id": "loan_1", "query": "SELECT sum(no_of_customers) FROM bank WHERE city  =  'New York City'", "query_toks": ["SELECT", "sum", "(", "no_of_customers", ")", "FROM", "bank", "WHERE", "city", "=", "'New", "York", "City", "'"], "query_toks_no_value": ["select", "sum", "(", "no_of_customers", ")", "from", "bank", "where", "city", "=", "value"], "question": "What is the total number of customers who use banks in New York City?", "question_toks": ["What", "is", "the", "total", "number", "of", "customers", "who", "use", "banks", "in", "New", "York", "City", "?"], "guid": 7671}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | Find the name of bank branches that provided some loans.", "sql": "SELECT DISTINCT T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id", "example": {"db_id": "loan_1", "query": "SELECT DISTINCT T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id", "query_toks": ["SELECT", "DISTINCT", "T1.bname", "FROM", "bank", "AS", "T1", "JOIN", "loan", "AS", "T2", "ON", "T1.branch_id", "=", "T2.branch_id"], "query_toks_no_value": ["select", "distinct", "t1", ".", "bname", "from", "bank", "as", "t1", "join", "loan", "as", "t2", "on", "t1", ".", "branch_id", "=", "t2", ".", "branch_id"], "question": "Find the name of bank branches that provided some loans.", "question_toks": ["Find", "the", "name", "of", "bank", "branches", "that", "provided", "some", "loans", "."], "guid": 7672}}
{"text": "ACCOUNTS: custid, name; SAVINGS: custid, balance; CHECKING: custid, balance | What is the total checking balance in all accounts?", "sql": "SELECT sum(balance) FROM checking", "example": {"db_id": "small_bank_1", "query": "SELECT sum(balance) FROM checking", "query_toks": ["SELECT", "sum", "(", "balance", ")", "FROM", "checking"], "query_toks_no_value": ["select", "sum", "(", "balance", ")", "from", "checking"], "question": "What is the total checking balance in all accounts?", "question_toks": ["What", "is", "the", "total", "checking", "balance", "in", "all", "accounts", "?"], "guid": 7673}}
{"text": "Addresses: Address_ID, address_details; Locations: Location_ID, Other_Details; Products: Product_ID, Product_Type_Code, Product_Name, Product_Price; Parties: Party_ID, Party_Details; Assets: Asset_ID, Other_Details; Channels: Channel_ID, Other_Details; Finances: Finance_ID, Other_Details; Events: Event_ID, Address_ID, Channel_ID, Event_Type_Code, Finance_ID, Location_ID; Products_in_Events: Product_in_Event_ID, Event_ID, Product_ID; Parties_in_Events: Party_ID, Event_ID, Role_Code | Show the prices of the products named \"Dining\" or \"Trading Policy\".", "sql": "SELECT Product_Price FROM Products WHERE Product_Name  =  \"Dining\" OR Product_Name  =  \"Trading Policy\"", "example": {"db_id": "solvency_ii", "query": "SELECT Product_Price FROM Products WHERE Product_Name  =  \"Dining\" OR Product_Name  =  \"Trading Policy\"", "query_toks": ["SELECT", "Product_Price", "FROM", "Products", "WHERE", "Product_Name", "=", "``", "Dining", "''", "OR", "Product_Name", "=", "``", "Trading", "Policy", "''"], "query_toks_no_value": ["select", "product_price", "from", "products", "where", "product_name", "=", "value", "or", "product_name", "=", "value"], "question": "Show the prices of the products named \"Dining\" or \"Trading Policy\".", "question_toks": ["Show", "the", "prices", "of", "the", "products", "named", "``", "Dining", "''", "or", "``", "Trading", "Policy", "''", "."], "guid": 7674}}
{"text": "Addresses: Address_ID, address_details; Locations: Location_ID, Other_Details; Products: Product_ID, Product_Type_Code, Product_Name, Product_Price; Parties: Party_ID, Party_Details; Assets: Asset_ID, Other_Details; Channels: Channel_ID, Other_Details; Finances: Finance_ID, Other_Details; Events: Event_ID, Address_ID, Channel_ID, Event_Type_Code, Finance_ID, Location_ID; Products_in_Events: Product_in_Event_ID, Event_ID, Product_ID; Parties_in_Events: Party_ID, Event_ID, Role_Code | What is the name of the product with the highest price?", "sql": "SELECT Product_Name FROM Products ORDER BY Product_Price DESC LIMIT 1", "example": {"db_id": "solvency_ii", "query": "SELECT Product_Name FROM Products ORDER BY Product_Price DESC LIMIT 1", "query_toks": ["SELECT", "Product_Name", "FROM", "Products", "ORDER", "BY", "Product_Price", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "product_name", "from", "products", "order", "by", "product_price", "desc", "limit", "value"], "question": "What is the name of the product with the highest price?", "question_toks": ["What", "is", "the", "name", "of", "the", "product", "with", "the", "highest", "price", "?"], "guid": 7675}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | What are the names of customers who have both savings and checking accounts?", "sql": "SELECT cust_name FROM customer WHERE acc_type  =  'saving' INTERSECT SELECT cust_name FROM customer WHERE acc_type  =  'checking'", "example": {"db_id": "loan_1", "query": "SELECT cust_name FROM customer WHERE acc_type  =  'saving' INTERSECT SELECT cust_name FROM customer WHERE acc_type  =  'checking'", "query_toks": ["SELECT", "cust_name", "FROM", "customer", "WHERE", "acc_type", "=", "'saving", "'", "INTERSECT", "SELECT", "cust_name", "FROM", "customer", "WHERE", "acc_type", "=", "'checking", "'"], "query_toks_no_value": ["select", "cust_name", "from", "customer", "where", "acc_type", "=", "value", "intersect", "select", "cust_name", "from", "customer", "where", "acc_type", "=", "value"], "question": "What are the names of customers who have both savings and checking accounts?", "question_toks": ["What", "are", "the", "names", "of", "customers", "who", "have", "both", "savings", "and", "checking", "accounts", "?"], "guid": 7676}}
{"text": "ACCOUNTS: custid, name; SAVINGS: custid, balance; CHECKING: custid, balance | What are names and savings balances of the three accounts with the highest savings balances?", "sql": "SELECT T1.name ,  T2.balance FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid ORDER BY T2.balance DESC LIMIT 3", "example": {"db_id": "small_bank_1", "query": "SELECT T1.name ,  T2.balance FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid ORDER BY T2.balance DESC LIMIT 3", "query_toks": ["SELECT", "T1.name", ",", "T2.balance", "FROM", "accounts", "AS", "T1", "JOIN", "savings", "AS", "T2", "ON", "T1.custid", "=", "T2.custid", "ORDER", "BY", "T2.balance", "DESC", "LIMIT", "3"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "t2", ".", "balance", "from", "accounts", "as", "t1", "join", "savings", "as", "t2", "on", "t1", ".", "custid", "=", "t2", ".", "custid", "order", "by", "t2", ".", "balance", "desc", "limit", "value"], "question": "What are names and savings balances of the three accounts with the highest savings balances?", "question_toks": ["What", "are", "names", "and", "savings", "balances", "of", "the", "three", "accounts", "with", "the", "highest", "savings", "balances", "?"], "guid": 7677}}
{"text": "Customers: Customer_ID, Customer_name; Services: Service_ID, Service_name; Available_Policies: Policy_ID, policy_type_code, Customer_Phone; Customers_Policies: Customer_ID, Policy_ID, Date_Opened, Date_Closed; First_Notification_of_Loss: FNOL_ID, Customer_ID, Policy_ID, Service_ID; Claims: Claim_ID, FNOL_ID, Effective_Date; Settlements: Settlement_ID, Claim_ID, Effective_Date, Settlement_Amount | Find the IDs of customers whose name contains \"Diana\".", "sql": "SELECT customer_id FROM customers WHERE customer_name LIKE \"%Diana%\"", "example": {"db_id": "insurance_fnol", "query": "SELECT customer_id FROM customers WHERE customer_name LIKE \"%Diana%\"", "query_toks": ["SELECT", "customer_id", "FROM", "customers", "WHERE", "customer_name", "LIKE", "``", "%", "Diana", "%", "''"], "query_toks_no_value": ["select", "customer_id", "from", "customers", "where", "customer_name", "like", "value"], "question": "Find the IDs of customers whose name contains \"Diana\".", "question_toks": ["Find", "the", "IDs", "of", "customers", "whose", "name", "contains", "``", "Diana", "''", "."], "guid": 7678}}
{"text": "Customers: Customer_ID, Customer_Details; Staff: Staff_ID, Staff_Details; Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claim_Headers: Claim_Header_ID, Claim_Status_Code, Claim_Type_Code, Policy_ID, Date_of_Claim, Date_of_Settlement, Amount_Claimed, Amount_Piad; Claims_Documents: Claim_ID, Document_Type_Code, Created_by_Staff_ID, Created_Date; Claims_Processing_Stages: Claim_Stage_ID, Next_Claim_Stage_ID, Claim_Status_Name, Claim_Status_Description; Claims_Processing: Claim_Processing_ID, Claim_ID, Claim_Outcome_Code, Claim_Stage_ID, Staff_ID | How much amount in total were claimed in the most recently created document?", "sql": "SELECT sum(t1.amount_claimed) FROM claim_headers AS t1 JOIN claims_documents AS t2 ON t1.claim_header_id  =  t2.claim_id WHERE t2.created_date  =  (SELECT created_date FROM claims_documents ORDER BY created_date LIMIT 1)", "example": {"db_id": "insurance_and_eClaims", "query": "SELECT sum(t1.amount_claimed) FROM claim_headers AS t1 JOIN claims_documents AS t2 ON t1.claim_header_id  =  t2.claim_id WHERE t2.created_date  =  (SELECT created_date FROM claims_documents ORDER BY created_date LIMIT 1)", "query_toks": ["SELECT", "sum", "(", "t1.amount_claimed", ")", "FROM", "claim_headers", "AS", "t1", "JOIN", "claims_documents", "AS", "t2", "ON", "t1.claim_header_id", "=", "t2.claim_id", "WHERE", "t2.created_date", "=", "(", "SELECT", "created_date", "FROM", "claims_documents", "ORDER", "BY", "created_date", "LIMIT", "1", ")"], "query_toks_no_value": ["select", "sum", "(", "t1", ".", "amount_claimed", ")", "from", "claim_headers", "as", "t1", "join", "claims_documents", "as", "t2", "on", "t1", ".", "claim_header_id", "=", "t2", ".", "claim_id", "where", "t2", ".", "created_date", "=", "(", "select", "created_date", "from", "claims_documents", "order", "by", "created_date", "limit", "value", ")"], "question": "How much amount in total were claimed in the most recently created document?", "question_toks": ["How", "much", "amount", "in", "total", "were", "claimed", "in", "the", "most", "recently", "created", "document", "?"], "guid": 7679}}
{"text": "Customers: Customer_ID, Customer_Details; Customer_Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claims: Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled; Settlements: Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID; Payments: Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment | Find the claim id and the number of settlements made for the claim with the most recent settlement date.", "sql": "SELECT count(*) ,  T1.claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id  =  T2.claim_id GROUP BY T1.claim_id ORDER BY T1.Date_Claim_Settled DESC LIMIT 1", "example": {"db_id": "insurance_policies", "query": "SELECT count(*) ,  T1.claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id  =  T2.claim_id GROUP BY T1.claim_id ORDER BY T1.Date_Claim_Settled DESC LIMIT 1", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "T1.claim_id", "FROM", "Claims", "AS", "T1", "JOIN", "Settlements", "AS", "T2", "ON", "T1.claim_id", "=", "T2.claim_id", "GROUP", "BY", "T1.claim_id", "ORDER", "BY", "T1.Date_Claim_Settled", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "t1", ".", "claim_id", "from", "claims", "as", "t1", "join", "settlements", "as", "t2", "on", "t1", ".", "claim_id", "=", "t2", ".", "claim_id", "group", "by", "t1", ".", "claim_id", "order", "by", "t1", ".", "date_claim_settled", "desc", "limit", "value"], "question": "Find the claim id and the number of settlements made for the claim with the most recent settlement date.", "question_toks": ["Find", "the", "claim", "id", "and", "the", "number", "of", "settlements", "made", "for", "the", "claim", "with", "the", "most", "recent", "settlement", "date", "."], "guid": 7680}}
{"text": "Customers: Customer_ID, Customer_name; Services: Service_ID, Service_name; Available_Policies: Policy_ID, policy_type_code, Customer_Phone; Customers_Policies: Customer_ID, Policy_ID, Date_Opened, Date_Closed; First_Notification_of_Loss: FNOL_ID, Customer_ID, Policy_ID, Service_ID; Claims: Claim_ID, FNOL_ID, Effective_Date; Settlements: Settlement_ID, Claim_ID, Effective_Date, Settlement_Amount | List all the policy types used by the customer enrolled in the most policies.", "sql": "SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  (SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1)", "example": {"db_id": "insurance_fnol", "query": "SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  (SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1)", "query_toks": ["SELECT", "DISTINCT", "t3.policy_type_code", "FROM", "customers", "AS", "t1", "JOIN", "customers_policies", "AS", "t2", "ON", "t1.customer_id", "=", "t2.customer_id", "JOIN", "available_policies", "AS", "t3", "ON", "t2.policy_id", "=", "t3.policy_id", "WHERE", "t1.customer_name", "=", "(", "SELECT", "t1.customer_name", "FROM", "customers", "AS", "t1", "JOIN", "customers_policies", "AS", "t2", "ON", "t1.customer_id", "=", "t2.customer_id", "GROUP", "BY", "t1.customer_name", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1", ")"], "query_toks_no_value": ["select", "distinct", "t3", ".", "policy_type_code", "from", "customers", "as", "t1", "join", "customers_policies", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "join", "available_policies", "as", "t3", "on", "t2", ".", "policy_id", "=", "t3", ".", "policy_id", "where", "t1", ".", "customer_name", "=", "(", "select", "t1", ".", "customer_name", "from", "customers", "as", "t1", "join", "customers_policies", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "group", "by", "t1", ".", "customer_name", "order", "by", "count", "(", "*", ")", "desc", "limit", "value", ")"], "question": "List all the policy types used by the customer enrolled in the most policies.", "question_toks": ["List", "all", "the", "policy", "types", "used", "by", "the", "customer", "enrolled", "in", "the", "most", "policies", "."], "guid": 7681}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | Find the name, account type, and account balance of the customer who has the highest credit score.", "sql": "SELECT cust_name ,  acc_type ,  acc_bal FROM customer ORDER BY credit_score DESC LIMIT 1", "example": {"db_id": "loan_1", "query": "SELECT cust_name ,  acc_type ,  acc_bal FROM customer ORDER BY credit_score DESC LIMIT 1", "query_toks": ["SELECT", "cust_name", ",", "acc_type", ",", "acc_bal", "FROM", "customer", "ORDER", "BY", "credit_score", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "cust_name", ",", "acc_type", ",", "acc_bal", "from", "customer", "order", "by", "credit_score", "desc", "limit", "value"], "question": "Find the name, account type, and account balance of the customer who has the highest credit score.", "question_toks": ["Find", "the", "name", ",", "account", "type", ",", "and", "account", "balance", "of", "the", "customer", "who", "has", "the", "highest", "credit", "score", "."], "guid": 7682}}
{"text": "Customers: Customer_ID, Customer_Details; Customer_Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claims: Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled; Settlements: Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID; Payments: Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment | Which claims had exactly one settlement? For each, tell me the the date the claim was made, the date it was settled and the amount settled.", "sql": "SELECT T1.claim_id ,  T1.date_claim_made ,  T1.Date_Claim_Settled FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id  =  T2.Claim_id GROUP BY T1.claim_id HAVING count(*)  =  1", "example": {"db_id": "insurance_policies", "query": "SELECT T1.claim_id ,  T1.date_claim_made ,  T1.Date_Claim_Settled FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id  =  T2.Claim_id GROUP BY T1.claim_id HAVING count(*)  =  1", "query_toks": ["SELECT", "T1.claim_id", ",", "T1.date_claim_made", ",", "T1.Date_Claim_Settled", "FROM", "Claims", "AS", "T1", "JOIN", "Settlements", "AS", "T2", "ON", "T1.Claim_id", "=", "T2.Claim_id", "GROUP", "BY", "T1.claim_id", "HAVING", "count", "(", "*", ")", "=", "1"], "query_toks_no_value": ["select", "t1", ".", "claim_id", ",", "t1", ".", "date_claim_made", ",", "t1", ".", "date_claim_settled", "from", "claims", "as", "t1", "join", "settlements", "as", "t2", "on", "t1", ".", "claim_id", "=", "t2", ".", "claim_id", "group", "by", "t1", ".", "claim_id", "having", "count", "(", "*", ")", "=", "value"], "question": "Which claims had exactly one settlement? For each, tell me the the date the claim was made, the date it was settled and the amount settled.", "question_toks": ["Which", "claims", "had", "exactly", "one", "settlement", "?", "For", "each", ",", "tell", "me", "the", "the", "date", "the", "claim", "was", "made", ",", "the", "date", "it", "was", "settled", "and", "the", "amount", "settled", "."], "guid": 7683}}
{"text": "Addresses: Address_ID, address_details; Locations: Location_ID, Other_Details; Products: Product_ID, Product_Type_Code, Product_Name, Product_Price; Parties: Party_ID, Party_Details; Assets: Asset_ID, Other_Details; Channels: Channel_ID, Other_Details; Finances: Finance_ID, Other_Details; Events: Event_ID, Address_ID, Channel_ID, Event_Type_Code, Finance_ID, Location_ID; Products_in_Events: Product_in_Event_ID, Event_ID, Product_ID; Parties_in_Events: Party_ID, Event_ID, Role_Code | Show the names of products that are in at least two events in ascending alphabetical order of product name.", "sql": "SELECT T1.Product_Name FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID  =  T2.Product_ID GROUP BY T1.Product_Name HAVING COUNT(*)  >=  2 ORDER BY T1.Product_Name", "example": {"db_id": "solvency_ii", "query": "SELECT T1.Product_Name FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID  =  T2.Product_ID GROUP BY T1.Product_Name HAVING COUNT(*)  >=  2 ORDER BY T1.Product_Name", "query_toks": ["SELECT", "T1.Product_Name", "FROM", "Products", "AS", "T1", "JOIN", "Products_in_Events", "AS", "T2", "ON", "T1.Product_ID", "=", "T2.Product_ID", "GROUP", "BY", "T1.Product_Name", "HAVING", "COUNT", "(", "*", ")", ">", "=", "2", "ORDER", "BY", "T1.Product_Name"], "query_toks_no_value": ["select", "t1", ".", "product_name", "from", "products", "as", "t1", "join", "products_in_events", "as", "t2", "on", "t1", ".", "product_id", "=", "t2", ".", "product_id", "group", "by", "t1", ".", "product_name", "having", "count", "(", "*", ")", ">", "=", "value", "order", "by", "t1", ".", "product_name"], "question": "Show the names of products that are in at least two events in ascending alphabetical order of product name.", "question_toks": ["Show", "the", "names", "of", "products", "that", "are", "in", "at", "least", "two", "events", "in", "ascending", "alphabetical", "order", "of", "product", "name", "."], "guid": 7684}}
{"text": "Customers: Customer_ID, Customer_name; Services: Service_ID, Service_name; Available_Policies: Policy_ID, policy_type_code, Customer_Phone; Customers_Policies: Customer_ID, Policy_ID, Date_Opened, Date_Closed; First_Notification_of_Loss: FNOL_ID, Customer_ID, Policy_ID, Service_ID; Claims: Claim_ID, FNOL_ID, Effective_Date; Settlements: Settlement_ID, Claim_ID, Effective_Date, Settlement_Amount | What is the name of the customer who has the most policies listed?", "sql": "SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "insurance_fnol", "query": "SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "t1.customer_name", "FROM", "customers", "AS", "t1", "JOIN", "customers_policies", "AS", "t2", "ON", "t1.customer_id", "=", "t2.customer_id", "GROUP", "BY", "t1.customer_name", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "customer_name", "from", "customers", "as", "t1", "join", "customers_policies", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "group", "by", "t1", ".", "customer_name", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the name of the customer who has the most policies listed?", "question_toks": ["What", "is", "the", "name", "of", "the", "customer", "who", "has", "the", "most", "policies", "listed", "?"], "guid": 7685}}
{"text": "ACCOUNTS: custid, name; SAVINGS: custid, balance; CHECKING: custid, balance | Find the checking balance of the accounts whose savings balance is higher than the average savings balance.", "sql": "SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T1.name IN (SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  >  (SELECT avg(balance) FROM savings))", "example": {"db_id": "small_bank_1", "query": "SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T1.name IN (SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  >  (SELECT avg(balance) FROM savings))", "query_toks": ["SELECT", "T2.balance", "FROM", "accounts", "AS", "T1", "JOIN", "checking", "AS", "T2", "ON", "T1.custid", "=", "T2.custid", "WHERE", "T1.name", "IN", "(", "SELECT", "T1.name", "FROM", "accounts", "AS", "T1", "JOIN", "savings", "AS", "T2", "ON", "T1.custid", "=", "T2.custid", "WHERE", "T2.balance", ">", "(", "SELECT", "avg", "(", "balance", ")", "FROM", "savings", ")", ")"], "query_toks_no_value": ["select", "t2", ".", "balance", "from", "accounts", "as", "t1", "join", "checking", "as", "t2", "on", "t1", ".", "custid", "=", "t2", ".", "custid", "where", "t1", ".", "name", "in", "(", "select", "t1", ".", "name", "from", "accounts", "as", "t1", "join", "savings", "as", "t2", "on", "t1", ".", "custid", "=", "t2", ".", "custid", "where", "t2", ".", "balance", ">", "(", "select", "avg", "(", "balance", ")", "from", "savings", ")", ")"], "question": "Find the checking balance of the accounts whose savings balance is higher than the average savings balance.", "question_toks": ["Find", "the", "checking", "balance", "of", "the", "accounts", "whose", "savings", "balance", "is", "higher", "than", "the", "average", "savings", "balance", "."], "guid": 7686}}
{"text": "Customers: Customer_ID, Customer_name; Services: Service_ID, Service_name; Available_Policies: Policy_ID, policy_type_code, Customer_Phone; Customers_Policies: Customer_ID, Policy_ID, Date_Opened, Date_Closed; First_Notification_of_Loss: FNOL_ID, Customer_ID, Policy_ID, Service_ID; Claims: Claim_ID, FNOL_ID, Effective_Date; Settlements: Settlement_ID, Claim_ID, Effective_Date, Settlement_Amount | Which customer uses the most policies? Give me the customer name.", "sql": "SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "insurance_fnol", "query": "SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "t1.customer_name", "FROM", "customers", "AS", "t1", "JOIN", "customers_policies", "AS", "t2", "ON", "t1.customer_id", "=", "t2.customer_id", "GROUP", "BY", "t1.customer_name", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "customer_name", "from", "customers", "as", "t1", "join", "customers_policies", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "group", "by", "t1", ".", "customer_name", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which customer uses the most policies? Give me the customer name.", "question_toks": ["Which", "customer", "uses", "the", "most", "policies", "?", "Give", "me", "the", "customer", "name", "."], "guid": 7687}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | What is the name of the customer who has greatest total loan amount?", "sql": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name ORDER BY sum(T2.amount) DESC LIMIT 1", "example": {"db_id": "loan_1", "query": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name ORDER BY sum(T2.amount) DESC LIMIT 1", "query_toks": ["SELECT", "T1.cust_name", "FROM", "customer", "AS", "T1", "JOIN", "loan", "AS", "T2", "ON", "T1.cust_id", "=", "T2.cust_id", "GROUP", "BY", "T1.cust_name", "ORDER", "BY", "sum", "(", "T2.amount", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "cust_name", "from", "customer", "as", "t1", "join", "loan", "as", "t2", "on", "t1", ".", "cust_id", "=", "t2", ".", "cust_id", "group", "by", "t1", ".", "cust_name", "order", "by", "sum", "(", "t2", ".", "amount", ")", "desc", "limit", "value"], "question": "What is the name of the customer who has greatest total loan amount?", "question_toks": ["What", "is", "the", "name", "of", "the", "customer", "who", "has", "greatest", "total", "loan", "amount", "?"], "guid": 7688}}
{"text": "Customers: Customer_ID, Customer_Details; Customer_Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claims: Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled; Settlements: Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID; Payments: Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment | What are the claim dates and settlement dates of all the settlements?", "sql": "SELECT Date_Claim_Made ,  Date_Claim_Settled FROM Settlements", "example": {"db_id": "insurance_policies", "query": "SELECT Date_Claim_Made ,  Date_Claim_Settled FROM Settlements", "query_toks": ["SELECT", "Date_Claim_Made", ",", "Date_Claim_Settled", "FROM", "Settlements"], "query_toks_no_value": ["select", "date_claim_made", ",", "date_claim_settled", "from", "settlements"], "question": "What are the claim dates and settlement dates of all the settlements?", "question_toks": ["What", "are", "the", "claim", "dates", "and", "settlement", "dates", "of", "all", "the", "settlements", "?"], "guid": 7689}}
{"text": "ACCOUNTS: custid, name; SAVINGS: custid, balance; CHECKING: custid, balance | What are the names, checking balances, and savings balances of customers, ordered by the total of checking and savings balances descending?", "sql": "SELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance + T3.balance DESC", "example": {"db_id": "small_bank_1", "query": "SELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance + T3.balance DESC", "query_toks": ["SELECT", "T2.balance", ",", "T3.balance", ",", "T1.name", "FROM", "accounts", "AS", "T1", "JOIN", "checking", "AS", "T2", "ON", "T1.custid", "=", "T2.custid", "JOIN", "savings", "AS", "T3", "ON", "T1.custid", "=", "T3.custid", "ORDER", "BY", "T2.balance", "+", "T3.balance", "DESC"], "query_toks_no_value": ["select", "t2", ".", "balance", ",", "t3", ".", "balance", ",", "t1", ".", "name", "from", "accounts", "as", "t1", "join", "checking", "as", "t2", "on", "t1", ".", "custid", "=", "t2", ".", "custid", "join", "savings", "as", "t3", "on", "t1", ".", "custid", "=", "t3", ".", "custid", "order", "by", "t2", ".", "balance", "+", "t3", ".", "balance", "desc"], "question": "What are the names, checking balances, and savings balances of customers, ordered by the total of checking and savings balances descending?", "question_toks": ["What", "are", "the", "names", ",", "checking", "balances", ",", "and", "savings", "balances", "of", "customers", ",", "ordered", "by", "the", "total", "of", "checking", "and", "savings", "balances", "descending", "?"], "guid": 7690}}
{"text": "Customers: Customer_ID, Customer_Details; Customer_Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claims: Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled; Settlements: Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID; Payments: Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment | What is the total amount of payment?", "sql": "SELECT sum(Amount_Payment) FROM Payments", "example": {"db_id": "insurance_policies", "query": "SELECT sum(Amount_Payment) FROM Payments", "query_toks": ["SELECT", "sum", "(", "Amount_Payment", ")", "FROM", "Payments"], "query_toks_no_value": ["select", "sum", "(", "amount_payment", ")", "from", "payments"], "question": "What is the total amount of payment?", "question_toks": ["What", "is", "the", "total", "amount", "of", "payment", "?"], "guid": 7691}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | List the name of all different customers who have some loan sorted by their total loan amount.", "sql": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name ORDER BY sum(T2.amount)", "example": {"db_id": "loan_1", "query": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name ORDER BY sum(T2.amount)", "query_toks": ["SELECT", "T1.cust_name", "FROM", "customer", "AS", "T1", "JOIN", "loan", "AS", "T2", "ON", "T1.cust_id", "=", "T2.cust_id", "GROUP", "BY", "T1.cust_name", "ORDER", "BY", "sum", "(", "T2.amount", ")"], "query_toks_no_value": ["select", "t1", ".", "cust_name", "from", "customer", "as", "t1", "join", "loan", "as", "t2", "on", "t1", ".", "cust_id", "=", "t2", ".", "cust_id", "group", "by", "t1", ".", "cust_name", "order", "by", "sum", "(", "t2", ".", "amount", ")"], "question": "List the name of all different customers who have some loan sorted by their total loan amount.", "question_toks": ["List", "the", "name", "of", "all", "different", "customers", "who", "have", "some", "loan", "sorted", "by", "their", "total", "loan", "amount", "."], "guid": 7692}}
{"text": "Customers: Customer_ID, Customer_Details; Staff: Staff_ID, Staff_Details; Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claim_Headers: Claim_Header_ID, Claim_Status_Code, Claim_Type_Code, Policy_ID, Date_of_Claim, Date_of_Settlement, Amount_Claimed, Amount_Piad; Claims_Documents: Claim_ID, Document_Type_Code, Created_by_Staff_ID, Created_Date; Claims_Processing_Stages: Claim_Stage_ID, Next_Claim_Stage_ID, Claim_Status_Name, Claim_Status_Description; Claims_Processing: Claim_Processing_ID, Claim_ID, Claim_Outcome_Code, Claim_Stage_ID, Staff_ID | Which customer made the smallest amount of claim in one claim? Return the customer details.", "sql": "SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id  =  t2.policy_id JOIN customers AS t3 ON t2.customer_id  =  t3.customer_id WHERE t1.amount_piad  =  (SELECT min(amount_piad) FROM claim_headers)", "example": {"db_id": "insurance_and_eClaims", "query": "SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id  =  t2.policy_id JOIN customers AS t3 ON t2.customer_id  =  t3.customer_id WHERE t1.amount_piad  =  (SELECT min(amount_piad) FROM claim_headers)", "query_toks": ["SELECT", "t3.customer_details", "FROM", "claim_headers", "AS", "t1", "JOIN", "policies", "AS", "t2", "ON", "t1.policy_id", "=", "t2.policy_id", "JOIN", "customers", "AS", "t3", "ON", "t2.customer_id", "=", "t3.customer_id", "WHERE", "t1.amount_piad", "=", "(", "SELECT", "min", "(", "amount_piad", ")", "FROM", "claim_headers", ")"], "query_toks_no_value": ["select", "t3", ".", "customer_details", "from", "claim_headers", "as", "t1", "join", "policies", "as", "t2", "on", "t1", ".", "policy_id", "=", "t2", ".", "policy_id", "join", "customers", "as", "t3", "on", "t2", ".", "customer_id", "=", "t3", ".", "customer_id", "where", "t1", ".", "amount_piad", "=", "(", "select", "min", "(", "amount_piad", ")", "from", "claim_headers", ")"], "question": "Which customer made the smallest amount of claim in one claim? Return the customer details.", "question_toks": ["Which", "customer", "made", "the", "smallest", "amount", "of", "claim", "in", "one", "claim", "?", "Return", "the", "customer", "details", "."], "guid": 7693}}
{"text": "Customers: Customer_ID, Customer_name; Services: Service_ID, Service_name; Available_Policies: Policy_ID, policy_type_code, Customer_Phone; Customers_Policies: Customer_ID, Policy_ID, Date_Opened, Date_Closed; First_Notification_of_Loss: FNOL_ID, Customer_ID, Policy_ID, Service_ID; Claims: Claim_ID, FNOL_ID, Effective_Date; Settlements: Settlement_ID, Claim_ID, Effective_Date, Settlement_Amount | Count the total number of policies used by the customer named \"Dayana Robel\".", "sql": "SELECT count(*) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  \"Dayana Robel\"", "example": {"db_id": "insurance_fnol", "query": "SELECT count(*) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  \"Dayana Robel\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "customers", "AS", "t1", "JOIN", "customers_policies", "AS", "t2", "ON", "t1.customer_id", "=", "t2.customer_id", "WHERE", "t1.customer_name", "=", "``", "Dayana", "Robel", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "customers", "as", "t1", "join", "customers_policies", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "where", "t1", ".", "customer_name", "=", "value"], "question": "Count the total number of policies used by the customer named \"Dayana Robel\".", "question_toks": ["Count", "the", "total", "number", "of", "policies", "used", "by", "the", "customer", "named", "``", "Dayana", "Robel", "''", "."], "guid": 7694}}
{"text": "Customers: Customer_ID, Customer_Details; Staff: Staff_ID, Staff_Details; Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claim_Headers: Claim_Header_ID, Claim_Status_Code, Claim_Type_Code, Policy_ID, Date_of_Claim, Date_of_Settlement, Amount_Claimed, Amount_Piad; Claims_Documents: Claim_ID, Document_Type_Code, Created_by_Staff_ID, Created_Date; Claims_Processing_Stages: Claim_Stage_ID, Next_Claim_Stage_ID, Claim_Status_Name, Claim_Status_Description; Claims_Processing: Claim_Processing_ID, Claim_ID, Claim_Outcome_Code, Claim_Stage_ID, Staff_ID | Find the total amount claimed in the most recently created document.", "sql": "SELECT sum(t1.amount_claimed) FROM claim_headers AS t1 JOIN claims_documents AS t2 ON t1.claim_header_id  =  t2.claim_id WHERE t2.created_date  =  (SELECT created_date FROM claims_documents ORDER BY created_date LIMIT 1)", "example": {"db_id": "insurance_and_eClaims", "query": "SELECT sum(t1.amount_claimed) FROM claim_headers AS t1 JOIN claims_documents AS t2 ON t1.claim_header_id  =  t2.claim_id WHERE t2.created_date  =  (SELECT created_date FROM claims_documents ORDER BY created_date LIMIT 1)", "query_toks": ["SELECT", "sum", "(", "t1.amount_claimed", ")", "FROM", "claim_headers", "AS", "t1", "JOIN", "claims_documents", "AS", "t2", "ON", "t1.claim_header_id", "=", "t2.claim_id", "WHERE", "t2.created_date", "=", "(", "SELECT", "created_date", "FROM", "claims_documents", "ORDER", "BY", "created_date", "LIMIT", "1", ")"], "query_toks_no_value": ["select", "sum", "(", "t1", ".", "amount_claimed", ")", "from", "claim_headers", "as", "t1", "join", "claims_documents", "as", "t2", "on", "t1", ".", "claim_header_id", "=", "t2", ".", "claim_id", "where", "t2", ".", "created_date", "=", "(", "select", "created_date", "from", "claims_documents", "order", "by", "created_date", "limit", "value", ")"], "question": "Find the total amount claimed in the most recently created document.", "question_toks": ["Find", "the", "total", "amount", "claimed", "in", "the", "most", "recently", "created", "document", "."], "guid": 7695}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | Find the states of the colleges that have students in the tryout who played in striker position.", "sql": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'striker'", "example": {"db_id": "soccer_2", "query": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'striker'", "query_toks": ["SELECT", "T1.state", "FROM", "college", "AS", "T1", "JOIN", "tryout", "AS", "T2", "ON", "T1.cName", "=", "T2.cName", "WHERE", "T2.pPos", "=", "'striker", "'"], "query_toks_no_value": ["select", "t1", ".", "state", "from", "college", "as", "t1", "join", "tryout", "as", "t2", "on", "t1", ".", "cname", "=", "t2", ".", "cname", "where", "t2", ".", "ppos", "=", "value"], "question": "Find the states of the colleges that have students in the tryout who played in striker position.", "question_toks": ["Find", "the", "states", "of", "the", "colleges", "that", "have", "students", "in", "the", "tryout", "who", "played", "in", "striker", "position", "."], "guid": 3334}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | What are the first names of all the different drivers in alphabetical order?", "sql": "SELECT DISTINCT forename FROM drivers ORDER BY forename ASC", "example": {"db_id": "formula_1", "query": "SELECT DISTINCT forename FROM drivers ORDER BY forename ASC", "query_toks": ["SELECT", "DISTINCT", "forename", "FROM", "drivers", "ORDER", "BY", "forename", "ASC"], "query_toks_no_value": ["select", "distinct", "forename", "from", "drivers", "order", "by", "forename", "asc"], "question": "What are the first names of all the different drivers in alphabetical order?", "question_toks": ["What", "are", "the", "first", "names", "of", "all", "the", "different", "drivers", "in", "alphabetical", "order", "?"], "guid": 3335}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | Find the names of states that have some college students playing in the mid position but not in the goalie position.", "sql": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid' EXCEPT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie'", "example": {"db_id": "soccer_2", "query": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid' EXCEPT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie'", "query_toks": ["SELECT", "T1.state", "FROM", "college", "AS", "T1", "JOIN", "tryout", "AS", "T2", "ON", "T1.cName", "=", "T2.cName", "WHERE", "T2.pPos", "=", "'mid", "'", "EXCEPT", "SELECT", "T1.state", "FROM", "college", "AS", "T1", "JOIN", "tryout", "AS", "T2", "ON", "T1.cName", "=", "T2.cName", "WHERE", "T2.pPos", "=", "'goalie", "'"], "query_toks_no_value": ["select", "t1", ".", "state", "from", "college", "as", "t1", "join", "tryout", "as", "t2", "on", "t1", ".", "cname", "=", "t2", ".", "cname", "where", "t2", ".", "ppos", "=", "value", "except", "select", "t1", ".", "state", "from", "college", "as", "t1", "join", "tryout", "as", "t2", "on", "t1", ".", "cname", "=", "t2", ".", "cname", "where", "t2", ".", "ppos", "=", "value"], "question": "Find the names of states that have some college students playing in the mid position but not in the goalie position.", "question_toks": ["Find", "the", "names", "of", "states", "that", "have", "some", "college", "students", "playing", "in", "the", "mid", "position", "but", "not", "in", "the", "goalie", "position", "."], "guid": 3336}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | Count the number of members in club \"Bootup Baltimore\" whose age is above 18.", "sql": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t3.age  >  18", "example": {"db_id": "club_1", "query": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t3.age  >  18", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "club", "AS", "t1", "JOIN", "member_of_club", "AS", "t2", "ON", "t1.clubid", "=", "t2.clubid", "JOIN", "student", "AS", "t3", "ON", "t2.stuid", "=", "t3.stuid", "WHERE", "t1.clubname", "=", "``", "Bootup", "Baltimore", "''", "AND", "t3.age", ">", "18"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "club", "as", "t1", "join", "member_of_club", "as", "t2", "on", "t1", ".", "clubid", "=", "t2", ".", "clubid", "join", "student", "as", "t3", "on", "t2", ".", "stuid", "=", "t3", ".", "stuid", "where", "t1", ".", "clubname", "=", "value", "and", "t3", ".", "age", ">", "value"], "question": "Count the number of members in club \"Bootup Baltimore\" whose age is above 18.", "question_toks": ["Count", "the", "number", "of", "members", "in", "club", "``", "Bootup", "Baltimore", "''", "whose", "age", "is", "above", "18", "."], "guid": 3337}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | What are the name, latitude, and city of the station with the lowest latitude?", "sql": "SELECT name ,  lat ,  city FROM station ORDER BY lat LIMIT 1", "example": {"db_id": "bike_1", "query": "SELECT name ,  lat ,  city FROM station ORDER BY lat LIMIT 1", "query_toks": ["SELECT", "name", ",", "lat", ",", "city", "FROM", "station", "ORDER", "BY", "lat", "LIMIT", "1"], "query_toks_no_value": ["select", "name", ",", "lat", ",", "city", "from", "station", "order", "by", "lat", "limit", "value"], "question": "What are the name, latitude, and city of the station with the lowest latitude?", "question_toks": ["What", "are", "the", "name", ",", "latitude", ",", "and", "city", "of", "the", "station", "with", "the", "lowest", "latitude", "?"], "guid": 3338}}
{"text": "poker_player: Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings; people: People_ID, Nationality, Name, Birth_Date, Height | How many distinct nationalities are there?", "sql": "SELECT count(DISTINCT Nationality) FROM people", "example": {"db_id": "poker_player", "query": "SELECT count(DISTINCT Nationality) FROM people", "query_toks": ["SELECT", "count", "(", "DISTINCT", "Nationality", ")", "FROM", "people"], "query_toks_no_value": ["select", "count", "(", "distinct", "nationality", ")", "from", "people"], "question": "How many distinct nationalities are there?", "question_toks": ["How", "many", "distinct", "nationalities", "are", "there", "?"], "guid": 3339}}
{"text": "poker_player: Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings; people: People_ID, Nationality, Name, Birth_Date, Height | Return the money rank of the player with the greatest earnings.", "sql": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1", "example": {"db_id": "poker_player", "query": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1", "query_toks": ["SELECT", "Money_Rank", "FROM", "poker_player", "ORDER", "BY", "Earnings", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "money_rank", "from", "poker_player", "order", "by", "earnings", "desc", "limit", "value"], "question": "Return the money rank of the player with the greatest earnings.", "question_toks": ["Return", "the", "money", "rank", "of", "the", "player", "with", "the", "greatest", "earnings", "."], "guid": 3340}}
{"text": "player: Player_ID, Sponsor_name, Player_name, Gender, Residence, Occupation, Votes, Rank; club: Club_ID, Club_name, Region, Start_year; coach: Coach_ID, Coach_name, Gender, Club_ID, Rank; player_coach: Player_ID, Coach_ID, Starting_year; match_result: Rank, Club_ID, Gold, Big_Silver, Small_Silver, Bronze, Points | Show the names of players and names of their coaches.", "sql": "SELECT T3.Player_name ,  T2.coach_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID  =  T2.Coach_ID JOIN player AS T3 ON T1.Player_ID  =  T3.Player_ID", "example": {"db_id": "riding_club", "query": "SELECT T3.Player_name ,  T2.coach_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID  =  T2.Coach_ID JOIN player AS T3 ON T1.Player_ID  =  T3.Player_ID", "query_toks": ["SELECT", "T3.Player_name", ",", "T2.coach_name", "FROM", "player_coach", "AS", "T1", "JOIN", "coach", "AS", "T2", "ON", "T1.Coach_ID", "=", "T2.Coach_ID", "JOIN", "player", "AS", "T3", "ON", "T1.Player_ID", "=", "T3.Player_ID"], "query_toks_no_value": ["select", "t3", ".", "player_name", ",", "t2", ".", "coach_name", "from", "player_coach", "as", "t1", "join", "coach", "as", "t2", "on", "t1", ".", "coach_id", "=", "t2", ".", "coach_id", "join", "player", "as", "t3", "on", "t1", ".", "player_id", "=", "t3", ".", "player_id"], "question": "Show the names of players and names of their coaches.", "question_toks": ["Show", "the", "names", "of", "players", "and", "names", "of", "their", "coaches", "."], "guid": 3341}}
{"text": "country: Country_id, Country_name, Capital, Official_native_language; team: Team_id, Name; match_season: Season, Player, Position, Country, Team, Draft_Pick_Number, Draft_Class, College; player: Player_ID, Player, Years_Played, Total_WL, Singles_WL, Doubles_WL, Team | Which players are from Indonesia?", "sql": "SELECT T2.Player FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Country_name  =  \"Indonesia\"", "example": {"db_id": "match_season", "query": "SELECT T2.Player FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Country_name  =  \"Indonesia\"", "query_toks": ["SELECT", "T2.Player", "FROM", "country", "AS", "T1", "JOIN", "match_season", "AS", "T2", "ON", "T1.Country_id", "=", "T2.Country", "WHERE", "T1.Country_name", "=", "``", "Indonesia", "''"], "query_toks_no_value": ["select", "t2", ".", "player", "from", "country", "as", "t1", "join", "match_season", "as", "t2", "on", "t1", ".", "country_id", "=", "t2", ".", "country", "where", "t1", ".", "country_name", "=", "value"], "question": "Which players are from Indonesia?", "question_toks": ["Which", "players", "are", "from", "Indonesia", "?"], "guid": 3342}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | What are the drivers' last names and id who had 11 pit stops and participated in more than 5 race results?", "sql": "SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  =  11 INTERSECT SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  5", "example": {"db_id": "formula_1", "query": "SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  =  11 INTERSECT SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  5", "query_toks": ["SELECT", "T1.surname", ",", "T1.driverid", "FROM", "drivers", "AS", "T1", "JOIN", "pitstops", "AS", "T2", "ON", "T1.driverid", "=", "T2.driverid", "GROUP", "BY", "T1.driverid", "HAVING", "count", "(", "*", ")", "=", "11", "INTERSECT", "SELECT", "T1.surname", ",", "T1.driverid", "FROM", "drivers", "AS", "T1", "JOIN", "results", "AS", "T2", "ON", "T1.driverid", "=", "T2.driverid", "GROUP", "BY", "T1.driverid", "HAVING", "count", "(", "*", ")", ">", "5"], "query_toks_no_value": ["select", "t1", ".", "surname", ",", "t1", ".", "driverid", "from", "drivers", "as", "t1", "join", "pitstops", "as", "t2", "on", "t1", ".", "driverid", "=", "t2", ".", "driverid", "group", "by", "t1", ".", "driverid", "having", "count", "(", "*", ")", "=", "value", "intersect", "select", "t1", ".", "surname", ",", "t1", ".", "driverid", "from", "drivers", "as", "t1", "join", "results", "as", "t2", "on", "t1", ".", "driverid", "=", "t2", ".", "driverid", "group", "by", "t1", ".", "driverid", "having", "count", "(", "*", ")", ">", "value"], "question": "What are the drivers' last names and id who had 11 pit stops and participated in more than 5 race results?", "question_toks": ["What", "are", "the", "drivers", "'", "last", "names", "and", "id", "who", "had", "11", "pit", "stops", "and", "participated", "in", "more", "than", "5", "race", "results", "?"], "guid": 3343}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | Which bike traveled the most often in zip code 94002?", "sql": "SELECT bike_id FROM trip WHERE zip_code  =  94002 GROUP BY bike_id ORDER BY COUNT(*) DESC LIMIT 1", "example": {"db_id": "bike_1", "query": "SELECT bike_id FROM trip WHERE zip_code  =  94002 GROUP BY bike_id ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "bike_id", "FROM", "trip", "WHERE", "zip_code", "=", "94002", "GROUP", "BY", "bike_id", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "bike_id", "from", "trip", "where", "zip_code", "=", "value", "group", "by", "bike_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which bike traveled the most often in zip code 94002?", "question_toks": ["Which", "bike", "traveled", "the", "most", "often", "in", "zip", "code", "94002", "?"], "guid": 3344}}
{"text": "wrestler: Wrestler_ID, Name, Reign, Days_held, Location, Event; Elimination: Elimination_ID, Wrestler_ID, Team, Eliminated_By, Elimination_Move, Time | What are the names of wrestlers and their teams in elimination, ordered descending by days held?", "sql": "SELECT T2.Name ,  T1.Team FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID ORDER BY T2.Days_held DESC", "example": {"db_id": "wrestler", "query": "SELECT T2.Name ,  T1.Team FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID ORDER BY T2.Days_held DESC", "query_toks": ["SELECT", "T2.Name", ",", "T1.Team", "FROM", "elimination", "AS", "T1", "JOIN", "wrestler", "AS", "T2", "ON", "T1.Wrestler_ID", "=", "T2.Wrestler_ID", "ORDER", "BY", "T2.Days_held", "DESC"], "query_toks_no_value": ["select", "t2", ".", "name", ",", "t1", ".", "team", "from", "elimination", "as", "t1", "join", "wrestler", "as", "t2", "on", "t1", ".", "wrestler_id", "=", "t2", ".", "wrestler_id", "order", "by", "t2", ".", "days_held", "desc"], "question": "What are the names of wrestlers and their teams in elimination, ordered descending by days held?", "question_toks": ["What", "are", "the", "names", "of", "wrestlers", "and", "their", "teams", "in", "elimination", ",", "ordered", "descending", "by", "days", "held", "?"], "guid": 3345}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | What are the different states that have students trying out?", "sql": "SELECT DISTINCT state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName", "example": {"db_id": "soccer_2", "query": "SELECT DISTINCT state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName", "query_toks": ["SELECT", "DISTINCT", "state", "FROM", "college", "AS", "T1", "JOIN", "tryout", "AS", "T2", "ON", "T1.cName", "=", "T2.cName"], "query_toks_no_value": ["select", "distinct", "state", "from", "college", "as", "t1", "join", "tryout", "as", "t2", "on", "t1", ".", "cname", "=", "t2", ".", "cname"], "question": "What are the different states that have students trying out?", "question_toks": ["What", "are", "the", "different", "states", "that", "have", "students", "trying", "out", "?"], "guid": 3346}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | What is the average, maximum, and minimum for the number of hours spent training?", "sql": "SELECT avg(HS) ,  max(HS) ,  min(HS) FROM Player", "example": {"db_id": "soccer_2", "query": "SELECT avg(HS) ,  max(HS) ,  min(HS) FROM Player", "query_toks": ["SELECT", "avg", "(", "HS", ")", ",", "max", "(", "HS", ")", ",", "min", "(", "HS", ")", "FROM", "Player"], "query_toks_no_value": ["select", "avg", "(", "hs", ")", ",", "max", "(", "hs", ")", ",", "min", "(", "hs", ")", "from", "player"], "question": "What is the average, maximum, and minimum for the number of hours spent training?", "question_toks": ["What", "is", "the", "average", ",", "maximum", ",", "and", "minimum", "for", "the", "number", "of", "hours", "spent", "training", "?"], "guid": 3347}}
{"text": "race: Race_ID, Name, Class, Date, Track_ID; track: Track_ID, Name, Location, Seating, Year_Opened | Show the name and location of track with 1 race.", "sql": "SELECT T2.name ,  T2.location FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id HAVING count(*)  =  1", "example": {"db_id": "race_track", "query": "SELECT T2.name ,  T2.location FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id HAVING count(*)  =  1", "query_toks": ["SELECT", "T2.name", ",", "T2.location", "FROM", "race", "AS", "T1", "JOIN", "track", "AS", "T2", "ON", "T1.track_id", "=", "T2.track_id", "GROUP", "BY", "T1.track_id", "HAVING", "count", "(", "*", ")", "=", "1"], "query_toks_no_value": ["select", "t2", ".", "name", ",", "t2", ".", "location", "from", "race", "as", "t1", "join", "track", "as", "t2", "on", "t1", ".", "track_id", "=", "t2", ".", "track_id", "group", "by", "t1", ".", "track_id", "having", "count", "(", "*", ")", "=", "value"], "question": "Show the name and location of track with 1 race.", "question_toks": ["Show", "the", "name", "and", "location", "of", "track", "with", "1", "race", "."], "guid": 3348}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | For each city, return the highest latitude among its stations.", "sql": "SELECT city ,  max(lat) FROM station GROUP BY city", "example": {"db_id": "bike_1", "query": "SELECT city ,  max(lat) FROM station GROUP BY city", "query_toks": ["SELECT", "city", ",", "max", "(", "lat", ")", "FROM", "station", "GROUP", "BY", "city"], "query_toks_no_value": ["select", "city", ",", "max", "(", "lat", ")", "from", "station", "group", "by", "city"], "question": "For each city, return the highest latitude among its stations.", "question_toks": ["For", "each", "city", ",", "return", "the", "highest", "latitude", "among", "its", "stations", "."], "guid": 3349}}
{"text": "college: College_ID, Name, Leader_Name, College_Location; member: Member_ID, Name, Country, College_ID; round: Round_ID, Member_ID, Decoration_Theme, Rank_in_Round | Show the names of members whose country is \"United States\" or \"Canada\".", "sql": "SELECT Name FROM member WHERE Country  =  \"United States\" OR Country  =  \"Canada\"", "example": {"db_id": "decoration_competition", "query": "SELECT Name FROM member WHERE Country  =  \"United States\" OR Country  =  \"Canada\"", "query_toks": ["SELECT", "Name", "FROM", "member", "WHERE", "Country", "=", "``", "United", "States", "''", "OR", "Country", "=", "``", "Canada", "''"], "query_toks_no_value": ["select", "name", "from", "member", "where", "country", "=", "value", "or", "country", "=", "value"], "question": "Show the names of members whose country is \"United States\" or \"Canada\".", "question_toks": ["Show", "the", "names", "of", "members", "whose", "country", "is", "``", "United", "States", "''", "or", "``", "Canada", "''", "."], "guid": 3350}}
{"text": "college: College_ID, Name, Leader_Name, College_Location; member: Member_ID, Name, Country, College_ID; round: Round_ID, Member_ID, Decoration_Theme, Rank_in_Round | Show the names of members and the locations of colleges they go to in ascending alphabetical order of member names.", "sql": "SELECT T2.Name ,  T1.College_Location FROM college AS T1 JOIN member AS T2 ON T1.College_ID  =  T2.College_ID ORDER BY T2.Name ASC", "example": {"db_id": "decoration_competition", "query": "SELECT T2.Name ,  T1.College_Location FROM college AS T1 JOIN member AS T2 ON T1.College_ID  =  T2.College_ID ORDER BY T2.Name ASC", "query_toks": ["SELECT", "T2.Name", ",", "T1.College_Location", "FROM", "college", "AS", "T1", "JOIN", "member", "AS", "T2", "ON", "T1.College_ID", "=", "T2.College_ID", "ORDER", "BY", "T2.Name", "ASC"], "query_toks_no_value": ["select", "t2", ".", "name", ",", "t1", ".", "college_location", "from", "college", "as", "t1", "join", "member", "as", "t2", "on", "t1", ".", "college_id", "=", "t2", ".", "college_id", "order", "by", "t2", ".", "name", "asc"], "question": "Show the names of members and the locations of colleges they go to in ascending alphabetical order of member names.", "question_toks": ["Show", "the", "names", "of", "members", "and", "the", "locations", "of", "colleges", "they", "go", "to", "in", "ascending", "alphabetical", "order", "of", "member", "names", "."], "guid": 3351}}
{"text": "players: player_id, first_name, last_name, hand, birth_date, country_code; matches: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank; rankings: ranking_date, ranking, player_id, ranking_points, tours | Find the number of distinct name of losers.", "sql": "SELECT count(DISTINCT loser_name) FROM matches", "example": {"db_id": "wta_1", "query": "SELECT count(DISTINCT loser_name) FROM matches", "query_toks": ["SELECT", "count", "(", "DISTINCT", "loser_name", ")", "FROM", "matches"], "query_toks_no_value": ["select", "count", "(", "distinct", "loser_name", ")", "from", "matches"], "question": "Find the number of distinct name of losers.", "question_toks": ["Find", "the", "number", "of", "distinct", "name", "of", "losers", "."], "guid": 3352}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | How many students received a yes from tryouts?", "sql": "SELECT count(*) FROM tryout WHERE decision  =  'yes'", "example": {"db_id": "soccer_2", "query": "SELECT count(*) FROM tryout WHERE decision  =  'yes'", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "tryout", "WHERE", "decision", "=", "'yes", "'"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "tryout", "where", "decision", "=", "value"], "question": "How many students received a yes from tryouts?", "question_toks": ["How", "many", "students", "received", "a", "yes", "from", "tryouts", "?"], "guid": 3353}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | What is the number of distinct cities the stations are located at?", "sql": "SELECT count(DISTINCT city) FROM station", "example": {"db_id": "bike_1", "query": "SELECT count(DISTINCT city) FROM station", "query_toks": ["SELECT", "count", "(", "DISTINCT", "city", ")", "FROM", "station"], "query_toks_no_value": ["select", "count", "(", "distinct", "city", ")", "from", "station"], "question": "What is the number of distinct cities the stations are located at?", "question_toks": ["What", "is", "the", "number", "of", "distinct", "cities", "the", "stations", "are", "located", "at", "?"], "guid": 3354}}
{"text": "gymnast: Gymnast_ID, Floor_Exercise_Points, Pommel_Horse_Points, Rings_Points, Vault_Points, Parallel_Bars_Points, Horizontal_Bar_Points, Total_Points; people: People_ID, Name, Age, Height, Hometown | How many gymnasts are from each hometown?", "sql": "SELECT T2.Hometown ,  COUNT(*) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown", "example": {"db_id": "gymnast", "query": "SELECT T2.Hometown ,  COUNT(*) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown", "query_toks": ["SELECT", "T2.Hometown", ",", "COUNT", "(", "*", ")", "FROM", "gymnast", "AS", "T1", "JOIN", "people", "AS", "T2", "ON", "T1.Gymnast_ID", "=", "T2.People_ID", "GROUP", "BY", "T2.Hometown"], "query_toks_no_value": ["select", "t2", ".", "hometown", ",", "count", "(", "*", ")", "from", "gymnast", "as", "t1", "join", "people", "as", "t2", "on", "t1", ".", "gymnast_id", "=", "t2", ".", "people_id", "group", "by", "t2", ".", "hometown"], "question": "How many gymnasts are from each hometown?", "question_toks": ["How", "many", "gymnasts", "are", "from", "each", "hometown", "?"], "guid": 3355}}
{"text": "country: Country_id, Country_name, Capital, Official_native_language; team: Team_id, Name; match_season: Season, Player, Position, Country, Team, Draft_Pick_Number, Draft_Class, College; player: Player_ID, Player, Years_Played, Total_WL, Singles_WL, Doubles_WL, Team | Return all players sorted by college in ascending alphabetical order.", "sql": "SELECT player FROM match_season ORDER BY College ASC", "example": {"db_id": "match_season", "query": "SELECT player FROM match_season ORDER BY College ASC", "query_toks": ["SELECT", "player", "FROM", "match_season", "ORDER", "BY", "College", "ASC"], "query_toks_no_value": ["select", "player", "from", "match_season", "order", "by", "college", "asc"], "question": "Return all players sorted by college in ascending alphabetical order.", "question_toks": ["Return", "all", "players", "sorted", "by", "college", "in", "ascending", "alphabetical", "order", "."], "guid": 3356}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | What are the names of all races that occurred after 12:00:00 or before 09:00:00?", "sql": "SELECT name FROM races WHERE TIME > \"12:00:00\" OR TIME < \"09:00:00\"", "example": {"db_id": "formula_1", "query": "SELECT name FROM races WHERE TIME > \"12:00:00\" OR TIME < \"09:00:00\"", "query_toks": ["SELECT", "name", "FROM", "races", "WHERE", "TIME", ">", "``", "12:00:00", "''", "OR", "TIME", "<", "``", "09:00:00", "''"], "query_toks_no_value": ["select", "name", "from", "races", "where", "time", ">", "value", "or", "time", "<", "value"], "question": "What are the names of all races that occurred after 12:00:00 or before 09:00:00?", "question_toks": ["What", "are", "the", "names", "of", "all", "races", "that", "occurred", "after", "12:00:00", "or", "before", "09:00:00", "?"], "guid": 3357}}
{"text": "country: Country_id, Country_name, Capital, Official_native_language; team: Team_id, Name; match_season: Season, Player, Position, Country, Team, Draft_Pick_Number, Draft_Class, College; player: Player_ID, Player, Years_Played, Total_WL, Singles_WL, Doubles_WL, Team | Show all distinct positions of matches.", "sql": "SELECT DISTINCT POSITION FROM match_season", "example": {"db_id": "match_season", "query": "SELECT DISTINCT POSITION FROM match_season", "query_toks": ["SELECT", "DISTINCT", "POSITION", "FROM", "match_season"], "query_toks_no_value": ["select", "distinct", "position", "from", "match_season"], "question": "Show all distinct positions of matches.", "question_toks": ["Show", "all", "distinct", "positions", "of", "matches", "."], "guid": 3358}}
{"text": "club: Club_ID, name, Region, Start_year; club_rank: Rank, Club_ID, Gold, Silver, Bronze, Total; player: Player_ID, name, Position, Club_ID, Apps, Tries, Goals, Points; competition: Competition_ID, Year, Competition_type, Country; competition_result: Competition_ID, Club_ID_1, Club_ID_2, Score | What are the names of all the clubs starting with the oldest?", "sql": "SELECT name FROM club ORDER BY Start_year ASC", "example": {"db_id": "sports_competition", "query": "SELECT name FROM club ORDER BY Start_year ASC", "query_toks": ["SELECT", "name", "FROM", "club", "ORDER", "BY", "Start_year", "ASC"], "query_toks_no_value": ["select", "name", "from", "club", "order", "by", "start_year", "asc"], "question": "What are the names of all the clubs starting with the oldest?", "question_toks": ["What", "are", "the", "names", "of", "all", "the", "clubs", "starting", "with", "the", "oldest", "?"], "guid": 3359}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | Find the name, enrollment of the colleges whose size is bigger than 10000 and location is in state LA.", "sql": "SELECT cName ,  enr FROM College WHERE enr  >  10000 AND state = \"LA\"", "example": {"db_id": "soccer_2", "query": "SELECT cName ,  enr FROM College WHERE enr  >  10000 AND state = \"LA\"", "query_toks": ["SELECT", "cName", ",", "enr", "FROM", "College", "WHERE", "enr", ">", "10000", "AND", "state", "=", "``", "LA", "''"], "query_toks_no_value": ["select", "cname", ",", "enr", "from", "college", "where", "enr", ">", "value", "and", "state", "=", "value"], "question": "Find the name, enrollment of the colleges whose size is bigger than 10000 and location is in state LA.", "question_toks": ["Find", "the", "name", ",", "enrollment", "of", "the", "colleges", "whose", "size", "is", "bigger", "than", "10000", "and", "location", "is", "in", "state", "LA", "."], "guid": 3360}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | What are the ids of stations that are located in San Francisco and have average bike availability above 10.", "sql": "SELECT id FROM station WHERE city  =  \"San Francisco\" INTERSECT SELECT station_id FROM status GROUP BY station_id HAVING avg(bikes_available)  >  10", "example": {"db_id": "bike_1", "query": "SELECT id FROM station WHERE city  =  \"San Francisco\" INTERSECT SELECT station_id FROM status GROUP BY station_id HAVING avg(bikes_available)  >  10", "query_toks": ["SELECT", "id", "FROM", "station", "WHERE", "city", "=", "``", "San", "Francisco", "''", "INTERSECT", "SELECT", "station_id", "FROM", "status", "GROUP", "BY", "station_id", "HAVING", "avg", "(", "bikes_available", ")", ">", "10"], "query_toks_no_value": ["select", "id", "from", "station", "where", "city", "=", "value", "intersect", "select", "station_id", "from", "status", "group", "by", "station_id", "having", "avg", "(", "bikes_available", ")", ">", "value"], "question": "What are the ids of stations that are located in San Francisco and have average bike availability above 10.", "question_toks": ["What", "are", "the", "ids", "of", "stations", "that", "are", "located", "in", "San", "Francisco", "and", "have", "average", "bike", "availability", "above", "10", "."], "guid": 3361}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | List the clubs having \"Davis Steven\" as a member.", "sql": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Davis\" AND t3.lname  =  \"Steven\"", "example": {"db_id": "club_1", "query": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Davis\" AND t3.lname  =  \"Steven\"", "query_toks": ["SELECT", "DISTINCT", "t1.clubname", "FROM", "club", "AS", "t1", "JOIN", "member_of_club", "AS", "t2", "ON", "t1.clubid", "=", "t2.clubid", "JOIN", "student", "AS", "t3", "ON", "t2.stuid", "=", "t3.stuid", "WHERE", "t3.fname", "=", "``", "Davis", "''", "AND", "t3.lname", "=", "``", "Steven", "''"], "query_toks_no_value": ["select", "distinct", "t1", ".", "clubname", "from", "club", "as", "t1", "join", "member_of_club", "as", "t2", "on", "t1", ".", "clubid", "=", "t2", ".", "clubid", "join", "student", "as", "t3", "on", "t2", ".", "stuid", "=", "t3", ".", "stuid", "where", "t3", ".", "fname", "=", "value", "and", "t3", ".", "lname", "=", "value"], "question": "List the clubs having \"Davis Steven\" as a member.", "question_toks": ["List", "the", "clubs", "having", "``", "Davis", "Steven", "''", "as", "a", "member", "."], "guid": 3362}}
{"text": "club: Club_ID, name, Region, Start_year; club_rank: Rank, Club_ID, Gold, Silver, Bronze, Total; player: Player_ID, name, Position, Club_ID, Apps, Tries, Goals, Points; competition: Competition_ID, Year, Competition_type, Country; competition_result: Competition_ID, Club_ID_1, Club_ID_2, Score | What is the average number of gold medals for clubs?", "sql": "SELECT avg(Gold) FROM club_rank", "example": {"db_id": "sports_competition", "query": "SELECT avg(Gold) FROM club_rank", "query_toks": ["SELECT", "avg", "(", "Gold", ")", "FROM", "club_rank"], "query_toks_no_value": ["select", "avg", "(", "gold", ")", "from", "club_rank"], "question": "What is the average number of gold medals for clubs?", "question_toks": ["What", "is", "the", "average", "number", "of", "gold", "medals", "for", "clubs", "?"], "guid": 3363}}
{"text": "player: Player_ID, Sponsor_name, Player_name, Gender, Residence, Occupation, Votes, Rank; club: Club_ID, Club_name, Region, Start_year; coach: Coach_ID, Coach_name, Gender, Club_ID, Rank; player_coach: Player_ID, Coach_ID, Starting_year; match_result: Rank, Club_ID, Gold, Big_Silver, Small_Silver, Bronze, Points | Show different occupations along with the number of players in each occupation.", "sql": "SELECT Occupation ,  COUNT(*) FROM player GROUP BY Occupation", "example": {"db_id": "riding_club", "query": "SELECT Occupation ,  COUNT(*) FROM player GROUP BY Occupation", "query_toks": ["SELECT", "Occupation", ",", "COUNT", "(", "*", ")", "FROM", "player", "GROUP", "BY", "Occupation"], "query_toks_no_value": ["select", "occupation", ",", "count", "(", "*", ")", "from", "player", "group", "by", "occupation"], "question": "Show different occupations along with the number of players in each occupation.", "question_toks": ["Show", "different", "occupations", "along", "with", "the", "number", "of", "players", "in", "each", "occupation", "."], "guid": 3364}}
{"text": "country: Country_id, Country_name, Capital, Official_native_language; team: Team_id, Name; match_season: Season, Player, Position, Country, Team, Draft_Pick_Number, Draft_Class, College; player: Player_ID, Player, Years_Played, Total_WL, Singles_WL, Doubles_WL, Team | What are all the players who played in match season, sorted by college in ascending alphabetical order?", "sql": "SELECT player FROM match_season ORDER BY College ASC", "example": {"db_id": "match_season", "query": "SELECT player FROM match_season ORDER BY College ASC", "query_toks": ["SELECT", "player", "FROM", "match_season", "ORDER", "BY", "College", "ASC"], "query_toks_no_value": ["select", "player", "from", "match_season", "order", "by", "college", "asc"], "question": "What are all the players who played in match season, sorted by college in ascending alphabetical order?", "question_toks": ["What", "are", "all", "the", "players", "who", "played", "in", "match", "season", ",", "sorted", "by", "college", "in", "ascending", "alphabetical", "order", "?"], "guid": 3365}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | What are the name of the players who received a card in descending order of the hours of training?", "sql": "SELECT pName FROM Player WHERE yCard  =  'yes' ORDER BY HS DESC", "example": {"db_id": "soccer_2", "query": "SELECT pName FROM Player WHERE yCard  =  'yes' ORDER BY HS DESC", "query_toks": ["SELECT", "pName", "FROM", "Player", "WHERE", "yCard", "=", "'yes", "'", "ORDER", "BY", "HS", "DESC"], "query_toks_no_value": ["select", "pname", "from", "player", "where", "ycard", "=", "value", "order", "by", "hs", "desc"], "question": "What are the name of the players who received a card in descending order of the hours of training?", "question_toks": ["What", "are", "the", "name", "of", "the", "players", "who", "received", "a", "card", "in", "descending", "order", "of", "the", "hours", "of", "training", "?"], "guid": 3366}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | What is the average number of hours spent practicing for students who got rejected?", "sql": "SELECT avg(T1.HS) FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'no'", "example": {"db_id": "soccer_2", "query": "SELECT avg(T1.HS) FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'no'", "query_toks": ["SELECT", "avg", "(", "T1.HS", ")", "FROM", "player", "AS", "T1", "JOIN", "tryout", "AS", "T2", "ON", "T1.pID", "=", "T2.pID", "WHERE", "T2.decision", "=", "'no", "'"], "query_toks_no_value": ["select", "avg", "(", "t1", ".", "hs", ")", "from", "player", "as", "t1", "join", "tryout", "as", "t2", "on", "t1", ".", "pid", "=", "t2", ".", "pid", "where", "t2", ".", "decision", "=", "value"], "question": "What is the average number of hours spent practicing for students who got rejected?", "question_toks": ["What", "is", "the", "average", "number", "of", "hours", "spent", "practicing", "for", "students", "who", "got", "rejected", "?"], "guid": 3367}}
{"text": "body_builder: Body_Builder_ID, People_ID, Snatch, Clean_Jerk, Total; people: People_ID, Name, Height, Weight, Birth_Date, Birth_Place | What are the names of body builders whose total score is higher than 300?", "sql": "SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Total  >  300", "example": {"db_id": "body_builder", "query": "SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Total  >  300", "query_toks": ["SELECT", "T2.Name", "FROM", "body_builder", "AS", "T1", "JOIN", "people", "AS", "T2", "ON", "T1.People_ID", "=", "T2.People_ID", "WHERE", "T1.Total", ">", "300"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "body_builder", "as", "t1", "join", "people", "as", "t2", "on", "t1", ".", "people_id", "=", "t2", ".", "people_id", "where", "t1", ".", "total", ">", "value"], "question": "What are the names of body builders whose total score is higher than 300?", "question_toks": ["What", "are", "the", "names", "of", "body", "builders", "whose", "total", "score", "is", "higher", "than", "300", "?"], "guid": 3368}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | What is the description of the club named \"Tennis Club\"?", "sql": "SELECT clubdesc FROM club WHERE clubname  =  \"Tennis Club\"", "example": {"db_id": "club_1", "query": "SELECT clubdesc FROM club WHERE clubname  =  \"Tennis Club\"", "query_toks": ["SELECT", "clubdesc", "FROM", "club", "WHERE", "clubname", "=", "``", "Tennis", "Club", "''"], "query_toks_no_value": ["select", "clubdesc", "from", "club", "where", "clubname", "=", "value"], "question": "What is the description of the club named \"Tennis Club\"?", "question_toks": ["What", "is", "the", "description", "of", "the", "club", "named", "``", "Tennis", "Club", "''", "?"], "guid": 3369}}
{"text": "country: Country_id, Country_name, Capital, Official_native_language; team: Team_id, Name; match_season: Season, Player, Position, Country, Team, Draft_Pick_Number, Draft_Class, College; player: Player_ID, Player, Years_Played, Total_WL, Singles_WL, Doubles_WL, Team | What are the players who played for Columbus Crew, and how many years did each play for?", "sql": "SELECT T1.Player , T1.Years_Played FROM player AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  \"Columbus Crew\"", "example": {"db_id": "match_season", "query": "SELECT T1.Player , T1.Years_Played FROM player AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  \"Columbus Crew\"", "query_toks": ["SELECT", "T1.Player", ",", "T1.Years_Played", "FROM", "player", "AS", "T1", "JOIN", "team", "AS", "T2", "ON", "T1.Team", "=", "T2.Team_id", "WHERE", "T2.Name", "=", "``", "Columbus", "Crew", "''"], "query_toks_no_value": ["select", "t1", ".", "player", ",", "t1", ".", "years_played", "from", "player", "as", "t1", "join", "team", "as", "t2", "on", "t1", ".", "team", "=", "t2", ".", "team_id", "where", "t2", ".", "name", "=", "value"], "question": "What are the players who played for Columbus Crew, and how many years did each play for?", "question_toks": ["What", "are", "the", "players", "who", "played", "for", "Columbus", "Crew", ",", "and", "how", "many", "years", "did", "each", "play", "for", "?"], "guid": 3370}}
{"text": "gymnast: Gymnast_ID, Floor_Exercise_Points, Pommel_Horse_Points, Rings_Points, Vault_Points, Parallel_Bars_Points, Horizontal_Bar_Points, Total_Points; people: People_ID, Name, Age, Height, Hometown | What is the average horizontal bar points for all gymnasts?", "sql": "SELECT avg(Horizontal_Bar_Points) FROM gymnast", "example": {"db_id": "gymnast", "query": "SELECT avg(Horizontal_Bar_Points) FROM gymnast", "query_toks": ["SELECT", "avg", "(", "Horizontal_Bar_Points", ")", "FROM", "gymnast"], "query_toks_no_value": ["select", "avg", "(", "horizontal_bar_points", ")", "from", "gymnast"], "question": "What is the average horizontal bar points for all gymnasts?", "question_toks": ["What", "is", "the", "average", "horizontal", "bar", "points", "for", "all", "gymnasts", "?"], "guid": 3371}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | For each start station id, what is its name, longitude and average duration of trips started there?", "sql": "SELECT T1.name ,  T1.long ,  avg(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id GROUP BY T2.start_station_id", "example": {"db_id": "bike_1", "query": "SELECT T1.name ,  T1.long ,  avg(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id GROUP BY T2.start_station_id", "query_toks": ["SELECT", "T1.name", ",", "T1.long", ",", "avg", "(", "T2.duration", ")", "FROM", "station", "AS", "T1", "JOIN", "trip", "AS", "T2", "ON", "T1.id", "=", "T2.start_station_id", "GROUP", "BY", "T2.start_station_id"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "t1", ".", "long", ",", "avg", "(", "t2", ".", "duration", ")", "from", "station", "as", "t1", "join", "trip", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "start_station_id", "group", "by", "t2", ".", "start_station_id"], "question": "For each start station id, what is its name, longitude and average duration of trips started there?", "question_toks": ["For", "each", "start", "station", "id", ",", "what", "is", "its", "name", ",", "longitude", "and", "average", "duration", "of", "trips", "started", "there", "?"], "guid": 3372}}
{"text": "players: player_id, first_name, last_name, hand, birth_date, country_code; matches: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank; rankings: ranking_date, ranking, player_id, ranking_points, tours | What are the names of tournaments that have more than 10 matches?", "sql": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10", "example": {"db_id": "wta_1", "query": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10", "query_toks": ["SELECT", "tourney_name", "FROM", "matches", "GROUP", "BY", "tourney_name", "HAVING", "count", "(", "*", ")", ">", "10"], "query_toks_no_value": ["select", "tourney_name", "from", "matches", "group", "by", "tourney_name", "having", "count", "(", "*", ")", ">", "value"], "question": "What are the names of tournaments that have more than 10 matches?", "question_toks": ["What", "are", "the", "names", "of", "tournaments", "that", "have", "more", "than", "10", "matches", "?"], "guid": 3373}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | Count the total number of clubs.", "sql": "SELECT count(*) FROM club", "example": {"db_id": "club_1", "query": "SELECT count(*) FROM club", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "club"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "club"], "question": "Count the total number of clubs.", "question_toks": ["Count", "the", "total", "number", "of", "clubs", "."], "guid": 3374}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | For each station, find its latitude and the minimum duration of trips that ended at the station.", "sql": "SELECT T1.name ,  T1.lat ,  min(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.end_station_id GROUP BY T2.end_station_id", "example": {"db_id": "bike_1", "query": "SELECT T1.name ,  T1.lat ,  min(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.end_station_id GROUP BY T2.end_station_id", "query_toks": ["SELECT", "T1.name", ",", "T1.lat", ",", "min", "(", "T2.duration", ")", "FROM", "station", "AS", "T1", "JOIN", "trip", "AS", "T2", "ON", "T1.id", "=", "T2.end_station_id", "GROUP", "BY", "T2.end_station_id"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "t1", ".", "lat", ",", "min", "(", "t2", ".", "duration", ")", "from", "station", "as", "t1", "join", "trip", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "end_station_id", "group", "by", "t2", ".", "end_station_id"], "question": "For each station, find its latitude and the minimum duration of trips that ended at the station.", "question_toks": ["For", "each", "station", ",", "find", "its", "latitude", "and", "the", "minimum", "duration", "of", "trips", "that", "ended", "at", "the", "station", "."], "guid": 3375}}
{"text": "club: Club_ID, name, Region, Start_year; club_rank: Rank, Club_ID, Gold, Silver, Bronze, Total; player: Player_ID, name, Position, Club_ID, Apps, Tries, Goals, Points; competition: Competition_ID, Year, Competition_type, Country; competition_result: Competition_ID, Club_ID_1, Club_ID_2, Score | what is the name of the country that participated in the most tournament competitions?", "sql": "SELECT country FROM competition WHERE competition_type  =  'Tournament' GROUP BY country ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "sports_competition", "query": "SELECT country FROM competition WHERE competition_type  =  'Tournament' GROUP BY country ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "country", "FROM", "competition", "WHERE", "competition_type", "=", "'Tournament", "'", "GROUP", "BY", "country", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "country", "from", "competition", "where", "competition_type", "=", "value", "group", "by", "country", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "what is the name of the country that participated in the most tournament competitions?", "question_toks": ["what", "is", "the", "name", "of", "the", "country", "that", "participated", "in", "the", "most", "tournament", "competitions", "?"], "guid": 3376}}
{"text": "player: Player_ID, Sponsor_name, Player_name, Gender, Residence, Occupation, Votes, Rank; club: Club_ID, Club_name, Region, Start_year; coach: Coach_ID, Coach_name, Gender, Club_ID, Rank; player_coach: Player_ID, Coach_ID, Starting_year; match_result: Rank, Club_ID, Gold, Big_Silver, Small_Silver, Bronze, Points | List the names of players that do not have coaches.", "sql": "SELECT Player_name FROM player WHERE Player_ID NOT IN (SELECT Player_ID FROM player_coach)", "example": {"db_id": "riding_club", "query": "SELECT Player_name FROM player WHERE Player_ID NOT IN (SELECT Player_ID FROM player_coach)", "query_toks": ["SELECT", "Player_name", "FROM", "player", "WHERE", "Player_ID", "NOT", "IN", "(", "SELECT", "Player_ID", "FROM", "player_coach", ")"], "query_toks_no_value": ["select", "player_name", "from", "player", "where", "player_id", "not", "in", "(", "select", "player_id", "from", "player_coach", ")"], "question": "List the names of players that do not have coaches.", "question_toks": ["List", "the", "names", "of", "players", "that", "do", "not", "have", "coaches", "."], "guid": 3377}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | What are all the different first names of the drivers who are in position as standing and won?", "sql": "SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1", "example": {"db_id": "formula_1", "query": "SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1", "query_toks": ["SELECT", "DISTINCT", "T1.forename", "FROM", "drivers", "AS", "T1", "JOIN", "driverstandings", "AS", "T2", "ON", "T1.driverid", "=", "T2.driverid", "WHERE", "T2.position", "=", "1", "AND", "T2.wins", "=", "1"], "query_toks_no_value": ["select", "distinct", "t1", ".", "forename", "from", "drivers", "as", "t1", "join", "driverstandings", "as", "t2", "on", "t1", ".", "driverid", "=", "t2", ".", "driverid", "where", "t2", ".", "position", "=", "value", "and", "t2", ".", "wins", "=", "value"], "question": "What are all the different first names of the drivers who are in position as standing and won?", "question_toks": ["What", "are", "all", "the", "different", "first", "names", "of", "the", "drivers", "who", "are", "in", "position", "as", "standing", "and", "won", "?"], "guid": 3378}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | What are the different names for each station that has ever had 7 bikes available?", "sql": "SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  =  7", "example": {"db_id": "bike_1", "query": "SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  =  7", "query_toks": ["SELECT", "DISTINCT", "T1.name", "FROM", "station", "AS", "T1", "JOIN", "status", "AS", "T2", "ON", "T1.id", "=", "T2.station_id", "WHERE", "T2.bikes_available", "=", "7"], "query_toks_no_value": ["select", "distinct", "t1", ".", "name", "from", "station", "as", "t1", "join", "status", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "station_id", "where", "t2", ".", "bikes_available", "=", "value"], "question": "What are the different names for each station that has ever had 7 bikes available?", "question_toks": ["What", "are", "the", "different", "names", "for", "each", "station", "that", "has", "ever", "had", "7", "bikes", "available", "?"], "guid": 3379}}
{"text": "club: Club_ID, name, Region, Start_year; club_rank: Rank, Club_ID, Gold, Silver, Bronze, Total; player: Player_ID, name, Position, Club_ID, Apps, Tries, Goals, Points; competition: Competition_ID, Year, Competition_type, Country; competition_result: Competition_ID, Club_ID_1, Club_ID_2, Score | what are the name of players who get more than the average points.", "sql": "SELECT name FROM player WHERE points  >  (SELECT avg(points) FROM player)", "example": {"db_id": "sports_competition", "query": "SELECT name FROM player WHERE points  >  (SELECT avg(points) FROM player)", "query_toks": ["SELECT", "name", "FROM", "player", "WHERE", "points", ">", "(", "SELECT", "avg", "(", "points", ")", "FROM", "player", ")"], "query_toks_no_value": ["select", "name", "from", "player", "where", "points", ">", "(", "select", "avg", "(", "points", ")", "from", "player", ")"], "question": "what are the name of players who get more than the average points.", "question_toks": ["what", "are", "the", "name", "of", "players", "who", "get", "more", "than", "the", "average", "points", "."], "guid": 3380}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | What are the first name and last name of each male member in club \"Hopkins Student Enterprises\"?", "sql": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Hopkins Student Enterprises\" AND t3.sex  =  \"M\"", "example": {"db_id": "club_1", "query": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Hopkins Student Enterprises\" AND t3.sex  =  \"M\"", "query_toks": ["SELECT", "t3.fname", ",", "t3.lname", "FROM", "club", "AS", "t1", "JOIN", "member_of_club", "AS", "t2", "ON", "t1.clubid", "=", "t2.clubid", "JOIN", "student", "AS", "t3", "ON", "t2.stuid", "=", "t3.stuid", "WHERE", "t1.clubname", "=", "``", "Hopkins", "Student", "Enterprises", "''", "AND", "t3.sex", "=", "``", "M", "''"], "query_toks_no_value": ["select", "t3", ".", "fname", ",", "t3", ".", "lname", "from", "club", "as", "t1", "join", "member_of_club", "as", "t2", "on", "t1", ".", "clubid", "=", "t2", ".", "clubid", "join", "student", "as", "t3", "on", "t2", ".", "stuid", "=", "t3", ".", "stuid", "where", "t1", ".", "clubname", "=", "value", "and", "t3", ".", "sex", "=", "value"], "question": "What are the first name and last name of each male member in club \"Hopkins Student Enterprises\"?", "question_toks": ["What", "are", "the", "first", "name", "and", "last", "name", "of", "each", "male", "member", "in", "club", "``", "Hopkins", "Student", "Enterprises", "''", "?"], "guid": 3381}}
{"text": "players: player_id, first_name, last_name, hand, birth_date, country_code; matches: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank; rankings: ranking_date, ranking, player_id, ranking_points, tours | How many players are there?", "sql": "SELECT count(*) FROM players", "example": {"db_id": "wta_1", "query": "SELECT count(*) FROM players", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "players"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "players"], "question": "How many players are there?", "question_toks": ["How", "many", "players", "are", "there", "?"], "guid": 3382}}
{"text": "club: Club_ID, name, Region, Start_year; club_rank: Rank, Club_ID, Gold, Silver, Bronze, Total; player: Player_ID, name, Position, Club_ID, Apps, Tries, Goals, Points; competition: Competition_ID, Year, Competition_type, Country; competition_result: Competition_ID, Club_ID_1, Club_ID_2, Score | What is the most common competition type?", "sql": "SELECT Competition_type FROM competition GROUP BY Competition_type ORDER BY COUNT(*) DESC LIMIT 1", "example": {"db_id": "sports_competition", "query": "SELECT Competition_type FROM competition GROUP BY Competition_type ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "Competition_type", "FROM", "competition", "GROUP", "BY", "Competition_type", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "competition_type", "from", "competition", "group", "by", "competition_type", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the most common competition type?", "question_toks": ["What", "is", "the", "most", "common", "competition", "type", "?"], "guid": 3383}}
{"text": "swimmer: ID, name, Nationality, meter_100, meter_200, meter_300, meter_400, meter_500, meter_600, meter_700; stadium: ID, name, Capacity, City, Country, Opening_year; event: ID, Name, Stadium_ID, Year; record: ID, Result, Swimmer_ID, Event_ID | Find the name and nationality of the swimmer who has won (i.e., has a result of \"win\") more than 1 time.", "sql": "SELECT t1.name ,  t1.nationality FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id WHERE RESULT  =  'Win' GROUP BY t2.swimmer_id HAVING count(*)  >  1", "example": {"db_id": "swimming", "query": "SELECT t1.name ,  t1.nationality FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id WHERE RESULT  =  'Win' GROUP BY t2.swimmer_id HAVING count(*)  >  1", "query_toks": ["SELECT", "t1.name", ",", "t1.nationality", "FROM", "swimmer", "AS", "t1", "JOIN", "record", "AS", "t2", "ON", "t1.id", "=", "t2.swimmer_id", "WHERE", "RESULT", "=", "'Win", "'", "GROUP", "BY", "t2.swimmer_id", "HAVING", "count", "(", "*", ")", ">", "1"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "t1", ".", "nationality", "from", "swimmer", "as", "t1", "join", "record", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "swimmer_id", "where", "result", "=", "value", "group", "by", "t2", ".", "swimmer_id", "having", "count", "(", "*", ")", ">", "value"], "question": "Find the name and nationality of the swimmer who has won (i.e., has a result of \"win\") more than 1 time.", "question_toks": ["Find", "the", "name", "and", "nationality", "of", "the", "swimmer", "who", "has", "won", "(", "i.e.", ",", "has", "a", "result", "of", "``", "win", "''", ")", "more", "than", "1", "time", "."], "guid": 3384}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | What is the average fastest lap speed in race named 'Monaco Grand Prix' in 2008 ?", "sql": "SELECT avg(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = \"Monaco Grand Prix\"", "example": {"db_id": "formula_1", "query": "SELECT avg(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = \"Monaco Grand Prix\"", "query_toks": ["SELECT", "avg", "(", "T2.fastestlapspeed", ")", "FROM", "races", "AS", "T1", "JOIN", "results", "AS", "T2", "ON", "T1.raceid", "=", "T2.raceid", "WHERE", "T1.year", "=", "2008", "AND", "T1.name", "=", "``", "Monaco", "Grand", "Prix", "''"], "query_toks_no_value": ["select", "avg", "(", "t2", ".", "fastestlapspeed", ")", "from", "races", "as", "t1", "join", "results", "as", "t2", "on", "t1", ".", "raceid", "=", "t2", ".", "raceid", "where", "t1", ".", "year", "=", "value", "and", "t1", ".", "name", "=", "value"], "question": "What is the average fastest lap speed in race named 'Monaco Grand Prix' in 2008 ?", "question_toks": ["What", "is", "the", "average", "fastest", "lap", "speed", "in", "race", "named", "'Monaco", "Grand", "Prix", "'", "in", "2008", "?"], "guid": 3385}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | What are the ids of the stations in San Francisco that normally have more than 10 bikes available?", "sql": "SELECT id FROM station WHERE city  =  \"San Francisco\" INTERSECT SELECT station_id FROM status GROUP BY station_id HAVING avg(bikes_available)  >  10", "example": {"db_id": "bike_1", "query": "SELECT id FROM station WHERE city  =  \"San Francisco\" INTERSECT SELECT station_id FROM status GROUP BY station_id HAVING avg(bikes_available)  >  10", "query_toks": ["SELECT", "id", "FROM", "station", "WHERE", "city", "=", "``", "San", "Francisco", "''", "INTERSECT", "SELECT", "station_id", "FROM", "status", "GROUP", "BY", "station_id", "HAVING", "avg", "(", "bikes_available", ")", ">", "10"], "query_toks_no_value": ["select", "id", "from", "station", "where", "city", "=", "value", "intersect", "select", "station_id", "from", "status", "group", "by", "station_id", "having", "avg", "(", "bikes_available", ")", ">", "value"], "question": "What are the ids of the stations in San Francisco that normally have more than 10 bikes available?", "question_toks": ["What", "are", "the", "ids", "of", "the", "stations", "in", "San", "Francisco", "that", "normally", "have", "more", "than", "10", "bikes", "available", "?"], "guid": 3386}}
{"text": "body_builder: Body_Builder_ID, People_ID, Snatch, Clean_Jerk, Total; people: People_ID, Name, Height, Weight, Birth_Date, Birth_Place | List the weight of the body builders who have snatch score higher than 140 or have the height greater than 200.", "sql": "SELECT T2.weight FROM body_builder AS T1 JOIN people AS T2 ON T1.people_id  =  T2.people_id WHERE T1.snatch  >  140 OR T2.height  >  200;", "example": {"db_id": "body_builder", "query": "SELECT T2.weight FROM body_builder AS T1 JOIN people AS T2 ON T1.people_id  =  T2.people_id WHERE T1.snatch  >  140 OR T2.height  >  200;", "query_toks": ["SELECT", "T2.weight", "FROM", "body_builder", "AS", "T1", "JOIN", "people", "AS", "T2", "ON", "T1.people_id", "=", "T2.people_id", "WHERE", "T1.snatch", ">", "140", "OR", "T2.height", ">", "200", ";"], "query_toks_no_value": ["select", "t2", ".", "weight", "from", "body_builder", "as", "t1", "join", "people", "as", "t2", "on", "t1", ".", "people_id", "=", "t2", ".", "people_id", "where", "t1", ".", "snatch", ">", "value", "or", "t2", ".", "height", ">", "value"], "question": "List the weight of the body builders who have snatch score higher than 140 or have the height greater than 200.", "question_toks": ["List", "the", "weight", "of", "the", "body", "builders", "who", "have", "snatch", "score", "higher", "than", "140", "or", "have", "the", "height", "greater", "than", "200", "."], "guid": 3387}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | What information do you have on colleges sorted by increasing enrollment numbers?", "sql": "SELECT * FROM College ORDER BY enr", "example": {"db_id": "soccer_2", "query": "SELECT * FROM College ORDER BY enr", "query_toks": ["SELECT", "*", "FROM", "College", "ORDER", "BY", "enr"], "query_toks_no_value": ["select", "*", "from", "college", "order", "by", "enr"], "question": "What information do you have on colleges sorted by increasing enrollment numbers?", "question_toks": ["What", "information", "do", "you", "have", "on", "colleges", "sorted", "by", "increasing", "enrollment", "numbers", "?"], "guid": 3388}}
{"text": "college: College_ID, Name, Leader_Name, College_Location; member: Member_ID, Name, Country, College_ID; round: Round_ID, Member_ID, Decoration_Theme, Rank_in_Round | Show the different countries and the number of members from each.", "sql": "SELECT Country ,  COUNT(*) FROM member GROUP BY Country", "example": {"db_id": "decoration_competition", "query": "SELECT Country ,  COUNT(*) FROM member GROUP BY Country", "query_toks": ["SELECT", "Country", ",", "COUNT", "(", "*", ")", "FROM", "member", "GROUP", "BY", "Country"], "query_toks_no_value": ["select", "country", ",", "count", "(", "*", ")", "from", "member", "group", "by", "country"], "question": "Show the different countries and the number of members from each.", "question_toks": ["Show", "the", "different", "countries", "and", "the", "number", "of", "members", "from", "each", "."], "guid": 3389}}
{"text": "club: Club_ID, name, Region, Start_year; club_rank: Rank, Club_ID, Gold, Silver, Bronze, Total; player: Player_ID, name, Position, Club_ID, Apps, Tries, Goals, Points; competition: Competition_ID, Year, Competition_type, Country; competition_result: Competition_ID, Club_ID_1, Club_ID_2, Score | What is the total number of clubs that have less than 10 medals in total?", "sql": "SELECT count(*) FROM club_rank WHERE Total  <  10", "example": {"db_id": "sports_competition", "query": "SELECT count(*) FROM club_rank WHERE Total  <  10", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "club_rank", "WHERE", "Total", "<", "10"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "club_rank", "where", "total", "<", "value"], "question": "What is the total number of clubs that have less than 10 medals in total?", "question_toks": ["What", "is", "the", "total", "number", "of", "clubs", "that", "have", "less", "than", "10", "medals", "in", "total", "?"], "guid": 3390}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | What are the names of all the races that occurred in the year 2017?", "sql": "SELECT name FROM races WHERE YEAR = 2017", "example": {"db_id": "formula_1", "query": "SELECT name FROM races WHERE YEAR = 2017", "query_toks": ["SELECT", "name", "FROM", "races", "WHERE", "YEAR", "=", "2017"], "query_toks_no_value": ["select", "name", "from", "races", "where", "year", "=", "value"], "question": "What are the names of all the races that occurred in the year 2017?", "question_toks": ["What", "are", "the", "names", "of", "all", "the", "races", "that", "occurred", "in", "the", "year", "2017", "?"], "guid": 3391}}
{"text": "players: player_id, first_name, last_name, hand, birth_date, country_code; matches: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank; rankings: ranking_date, ranking, player_id, ranking_points, tours | Find the average age of losers and winners of all matches.", "sql": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches", "example": {"db_id": "wta_1", "query": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches", "query_toks": ["SELECT", "avg", "(", "loser_age", ")", ",", "avg", "(", "winner_age", ")", "FROM", "matches"], "query_toks_no_value": ["select", "avg", "(", "loser_age", ")", ",", "avg", "(", "winner_age", ")", "from", "matches"], "question": "Find the average age of losers and winners of all matches.", "question_toks": ["Find", "the", "average", "age", "of", "losers", "and", "winners", "of", "all", "matches", "."], "guid": 3392}}
{"text": "club: Club_ID, name, Region, Start_year; club_rank: Rank, Club_ID, Gold, Silver, Bronze, Total; player: Player_ID, name, Position, Club_ID, Apps, Tries, Goals, Points; competition: Competition_ID, Year, Competition_type, Country; competition_result: Competition_ID, Club_ID_1, Club_ID_2, Score | List the types of competition that have at most five competitions of that type.", "sql": "SELECT Competition_type FROM competition GROUP BY Competition_type HAVING COUNT(*)  <=  5", "example": {"db_id": "sports_competition", "query": "SELECT Competition_type FROM competition GROUP BY Competition_type HAVING COUNT(*)  <=  5", "query_toks": ["SELECT", "Competition_type", "FROM", "competition", "GROUP", "BY", "Competition_type", "HAVING", "COUNT", "(", "*", ")", "<", "=", "5"], "query_toks_no_value": ["select", "competition_type", "from", "competition", "group", "by", "competition_type", "having", "count", "(", "*", ")", "<", "=", "value"], "question": "List the types of competition that have at most five competitions of that type.", "question_toks": ["List", "the", "types", "of", "competition", "that", "have", "at", "most", "five", "competitions", "of", "that", "type", "."], "guid": 3393}}
{"text": "players: player_id, first_name, last_name, hand, birth_date, country_code; matches: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank; rankings: ranking_date, ranking, player_id, ranking_points, tours | What are the names and ranks of the three youngest winners across all matches?", "sql": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3", "example": {"db_id": "wta_1", "query": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3", "query_toks": ["SELECT", "DISTINCT", "winner_name", ",", "winner_rank", "FROM", "matches", "ORDER", "BY", "winner_age", "LIMIT", "3"], "query_toks_no_value": ["select", "distinct", "winner_name", ",", "winner_rank", "from", "matches", "order", "by", "winner_age", "limit", "value"], "question": "What are the names and ranks of the three youngest winners across all matches?", "question_toks": ["What", "are", "the", "names", "and", "ranks", "of", "the", "three", "youngest", "winners", "across", "all", "matches", "?"], "guid": 3394}}
{"text": "poker_player: Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings; people: People_ID, Nationality, Name, Birth_Date, Height | What are the earnings of poker players, ordered descending by value?", "sql": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC", "example": {"db_id": "poker_player", "query": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC", "query_toks": ["SELECT", "Earnings", "FROM", "poker_player", "ORDER", "BY", "Earnings", "DESC"], "query_toks_no_value": ["select", "earnings", "from", "poker_player", "order", "by", "earnings", "desc"], "question": "What are the earnings of poker players, ordered descending by value?", "question_toks": ["What", "are", "the", "earnings", "of", "poker", "players", ",", "ordered", "descending", "by", "value", "?"], "guid": 3395}}
{"text": "wrestler: Wrestler_ID, Name, Reign, Days_held, Location, Event; Elimination: Elimination_ID, Wrestler_ID, Team, Eliminated_By, Elimination_Move, Time | What are the times of elimination for wrestlers with over 50 days held?", "sql": "SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID WHERE T2.Days_held  >  50", "example": {"db_id": "wrestler", "query": "SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID WHERE T2.Days_held  >  50", "query_toks": ["SELECT", "T1.Time", "FROM", "elimination", "AS", "T1", "JOIN", "wrestler", "AS", "T2", "ON", "T1.Wrestler_ID", "=", "T2.Wrestler_ID", "WHERE", "T2.Days_held", ">", "50"], "query_toks_no_value": ["select", "t1", ".", "time", "from", "elimination", "as", "t1", "join", "wrestler", "as", "t2", "on", "t1", ".", "wrestler_id", "=", "t2", ".", "wrestler_id", "where", "t2", ".", "days_held", ">", "value"], "question": "What are the times of elimination for wrestlers with over 50 days held?", "question_toks": ["What", "are", "the", "times", "of", "elimination", "for", "wrestlers", "with", "over", "50", "days", "held", "?"], "guid": 3396}}
{"text": "race: Race_ID, Name, Class, Date, Track_ID; track: Track_ID, Name, Location, Seating, Year_Opened | What are the names, classes, and dates for all races?", "sql": "SELECT name ,  CLASS ,  date FROM race", "example": {"db_id": "race_track", "query": "SELECT name ,  CLASS ,  date FROM race", "query_toks": ["SELECT", "name", ",", "CLASS", ",", "date", "FROM", "race"], "query_toks_no_value": ["select", "name", ",", "class", ",", "date", "from", "race"], "question": "What are the names, classes, and dates for all races?", "question_toks": ["What", "are", "the", "names", ",", "classes", ",", "and", "dates", "for", "all", "races", "?"], "guid": 3397}}
{"text": "country: Country_id, Country_name, Capital, Official_native_language; team: Team_id, Name; match_season: Season, Player, Position, Country, Team, Draft_Pick_Number, Draft_Class, College; player: Player_ID, Player, Years_Played, Total_WL, Singles_WL, Doubles_WL, Team | Show the name of colleges that have at least two players.", "sql": "SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  2", "example": {"db_id": "match_season", "query": "SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  2", "query_toks": ["SELECT", "College", "FROM", "match_season", "GROUP", "BY", "College", "HAVING", "count", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "college", "from", "match_season", "group", "by", "college", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "Show the name of colleges that have at least two players.", "question_toks": ["Show", "the", "name", "of", "colleges", "that", "have", "at", "least", "two", "players", "."], "guid": 3398}}
{"text": "players: player_id, first_name, last_name, hand, birth_date, country_code; matches: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank; rankings: ranking_date, ranking, player_id, ranking_points, tours | Find the number of players for each hand type.", "sql": "SELECT count(*) ,  hand FROM players GROUP BY hand", "example": {"db_id": "wta_1", "query": "SELECT count(*) ,  hand FROM players GROUP BY hand", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "hand", "FROM", "players", "GROUP", "BY", "hand"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "hand", "from", "players", "group", "by", "hand"], "question": "Find the number of players for each hand type.", "question_toks": ["Find", "the", "number", "of", "players", "for", "each", "hand", "type", "."], "guid": 3399}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | List the name and the number of stations for all the cities that have at least 15 stations.", "sql": "SELECT city ,  COUNT(*) FROM station GROUP BY city HAVING COUNT(*)  >=  15", "example": {"db_id": "bike_1", "query": "SELECT city ,  COUNT(*) FROM station GROUP BY city HAVING COUNT(*)  >=  15", "query_toks": ["SELECT", "city", ",", "COUNT", "(", "*", ")", "FROM", "station", "GROUP", "BY", "city", "HAVING", "COUNT", "(", "*", ")", ">", "=", "15"], "query_toks_no_value": ["select", "city", ",", "count", "(", "*", ")", "from", "station", "group", "by", "city", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "List the name and the number of stations for all the cities that have at least 15 stations.", "question_toks": ["List", "the", "name", "and", "the", "number", "of", "stations", "for", "all", "the", "cities", "that", "have", "at", "least", "15", "stations", "."], "guid": 3400}}
{"text": "poker_player: Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings; people: People_ID, Nationality, Name, Birth_Date, Height | Return the money rank of the poker player with the greatest height.", "sql": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1", "example": {"db_id": "poker_player", "query": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1", "query_toks": ["SELECT", "T2.Money_Rank", "FROM", "people", "AS", "T1", "JOIN", "poker_player", "AS", "T2", "ON", "T1.People_ID", "=", "T2.People_ID", "ORDER", "BY", "T1.Height", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "money_rank", "from", "people", "as", "t1", "join", "poker_player", "as", "t2", "on", "t1", ".", "people_id", "=", "t2", ".", "people_id", "order", "by", "t1", ".", "height", "desc", "limit", "value"], "question": "Return the money rank of the poker player with the greatest height.", "question_toks": ["Return", "the", "money", "rank", "of", "the", "poker", "player", "with", "the", "greatest", "height", "."], "guid": 3401}}
{"text": "college: College_ID, Name, Leader_Name, College_Location; member: Member_ID, Name, Country, College_ID; round: Round_ID, Member_ID, Decoration_Theme, Rank_in_Round | How many members are there?", "sql": "SELECT count(*) FROM member", "example": {"db_id": "decoration_competition", "query": "SELECT count(*) FROM member", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "member"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "member"], "question": "How many members are there?", "question_toks": ["How", "many", "members", "are", "there", "?"], "guid": 3402}}
{"text": "mountain: Mountain_ID, Name, Height, Prominence, Range, Country; climber: Climber_ID, Name, Country, Time, Points, Mountain_ID | Which range contains the most mountains?", "sql": "SELECT Range FROM mountain GROUP BY Range ORDER BY COUNT(*) DESC LIMIT 1", "example": {"db_id": "climbing", "query": "SELECT Range FROM mountain GROUP BY Range ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "Range", "FROM", "mountain", "GROUP", "BY", "Range", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "range", "from", "mountain", "group", "by", "range", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which range contains the most mountains?", "question_toks": ["Which", "range", "contains", "the", "most", "mountains", "?"], "guid": 3403}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | What is the total enrollment number of all colleges?", "sql": "SELECT sum(enr) FROM College", "example": {"db_id": "soccer_2", "query": "SELECT sum(enr) FROM College", "query_toks": ["SELECT", "sum", "(", "enr", ")", "FROM", "College"], "query_toks_no_value": ["select", "sum", "(", "enr", ")", "from", "college"], "question": "What is the total enrollment number of all colleges?", "question_toks": ["What", "is", "the", "total", "enrollment", "number", "of", "all", "colleges", "?"], "guid": 3404}}
{"text": "poker_player: Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings; people: People_ID, Nationality, Name, Birth_Date, Height | What are the names of poker players?", "sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID", "example": {"db_id": "poker_player", "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID", "query_toks": ["SELECT", "T1.Name", "FROM", "people", "AS", "T1", "JOIN", "poker_player", "AS", "T2", "ON", "T1.People_ID", "=", "T2.People_ID"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "people", "as", "t1", "join", "poker_player", "as", "t2", "on", "t1", ".", "people_id", "=", "t2", ".", "people_id"], "question": "What are the names of poker players?", "question_toks": ["What", "are", "the", "names", "of", "poker", "players", "?"], "guid": 3405}}
{"text": "player: Player_ID, Sponsor_name, Player_name, Gender, Residence, Occupation, Votes, Rank; club: Club_ID, Club_name, Region, Start_year; coach: Coach_ID, Coach_name, Gender, Club_ID, Rank; player_coach: Player_ID, Coach_ID, Starting_year; match_result: Rank, Club_ID, Gold, Big_Silver, Small_Silver, Bronze, Points | Show the residences that have both a player of gender \"M\" and a player of gender \"F\".", "sql": "SELECT Residence FROM player WHERE gender  =  \"M\" INTERSECT SELECT Residence FROM player WHERE gender  =  \"F\"", "example": {"db_id": "riding_club", "query": "SELECT Residence FROM player WHERE gender  =  \"M\" INTERSECT SELECT Residence FROM player WHERE gender  =  \"F\"", "query_toks": ["SELECT", "Residence", "FROM", "player", "WHERE", "gender", "=", "``", "M", "''", "INTERSECT", "SELECT", "Residence", "FROM", "player", "WHERE", "gender", "=", "``", "F", "''"], "query_toks_no_value": ["select", "residence", "from", "player", "where", "gender", "=", "value", "intersect", "select", "residence", "from", "player", "where", "gender", "=", "value"], "question": "Show the residences that have both a player of gender \"M\" and a player of gender \"F\".", "question_toks": ["Show", "the", "residences", "that", "have", "both", "a", "player", "of", "gender", "``", "M", "''", "and", "a", "player", "of", "gender", "``", "F", "''", "."], "guid": 3406}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | Where us the club named \"Tennis Club\" located?", "sql": "SELECT clublocation FROM club WHERE clubname  =  \"Tennis Club\"", "example": {"db_id": "club_1", "query": "SELECT clublocation FROM club WHERE clubname  =  \"Tennis Club\"", "query_toks": ["SELECT", "clublocation", "FROM", "club", "WHERE", "clubname", "=", "``", "Tennis", "Club", "''"], "query_toks_no_value": ["select", "clublocation", "from", "club", "where", "clubname", "=", "value"], "question": "Where us the club named \"Tennis Club\" located?", "question_toks": ["Where", "us", "the", "club", "named", "``", "Tennis", "Club", "''", "located", "?"], "guid": 3407}}
{"text": "club: Club_ID, name, Region, Start_year; club_rank: Rank, Club_ID, Gold, Silver, Bronze, Total; player: Player_ID, name, Position, Club_ID, Apps, Tries, Goals, Points; competition: Competition_ID, Year, Competition_type, Country; competition_result: Competition_ID, Club_ID_1, Club_ID_2, Score | List the types of competition and the number of competitions of each type.", "sql": "SELECT Competition_type ,  COUNT(*) FROM competition GROUP BY Competition_type", "example": {"db_id": "sports_competition", "query": "SELECT Competition_type ,  COUNT(*) FROM competition GROUP BY Competition_type", "query_toks": ["SELECT", "Competition_type", ",", "COUNT", "(", "*", ")", "FROM", "competition", "GROUP", "BY", "Competition_type"], "query_toks_no_value": ["select", "competition_type", ",", "count", "(", "*", ")", "from", "competition", "group", "by", "competition_type"], "question": "List the types of competition and the number of competitions of each type.", "question_toks": ["List", "the", "types", "of", "competition", "and", "the", "number", "of", "competitions", "of", "each", "type", "."], "guid": 3408}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | Which club has the most members majoring in \"600\"?", "sql": "SELECT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.major  =  \"600\" GROUP BY t1.clubname ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "club_1", "query": "SELECT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.major  =  \"600\" GROUP BY t1.clubname ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "t1.clubname", "FROM", "club", "AS", "t1", "JOIN", "member_of_club", "AS", "t2", "ON", "t1.clubid", "=", "t2.clubid", "JOIN", "student", "AS", "t3", "ON", "t2.stuid", "=", "t3.stuid", "WHERE", "t3.major", "=", "``", "600", "''", "GROUP", "BY", "t1.clubname", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "clubname", "from", "club", "as", "t1", "join", "member_of_club", "as", "t2", "on", "t1", ".", "clubid", "=", "t2", ".", "clubid", "join", "student", "as", "t3", "on", "t2", ".", "stuid", "=", "t3", ".", "stuid", "where", "t3", ".", "major", "=", "value", "group", "by", "t1", ".", "clubname", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which club has the most members majoring in \"600\"?", "question_toks": ["Which", "club", "has", "the", "most", "members", "majoring", "in", "``", "600", "''", "?"], "guid": 3409}}
{"text": "wrestler: Wrestler_ID, Name, Reign, Days_held, Location, Event; Elimination: Elimination_ID, Wrestler_ID, Team, Eliminated_By, Elimination_Move, Time | What are the elimination moves of wrestlers whose team is \"Team Orton\"?", "sql": "SELECT Elimination_Move FROM Elimination WHERE Team  =  \"Team Orton\"", "example": {"db_id": "wrestler", "query": "SELECT Elimination_Move FROM Elimination WHERE Team  =  \"Team Orton\"", "query_toks": ["SELECT", "Elimination_Move", "FROM", "Elimination", "WHERE", "Team", "=", "``", "Team", "Orton", "''"], "query_toks_no_value": ["select", "elimination_move", "from", "elimination", "where", "team", "=", "value"], "question": "What are the elimination moves of wrestlers whose team is \"Team Orton\"?", "question_toks": ["What", "are", "the", "elimination", "moves", "of", "wrestlers", "whose", "team", "is", "``", "Team", "Orton", "''", "?"], "guid": 3410}}
{"text": "gymnast: Gymnast_ID, Floor_Exercise_Points, Pommel_Horse_Points, Rings_Points, Vault_Points, Parallel_Bars_Points, Horizontal_Bar_Points, Total_Points; people: People_ID, Name, Age, Height, Hometown | Show the hometowns shared by people older than 23 and younger than 20.", "sql": "SELECT Hometown FROM people WHERE Age  >  23 INTERSECT SELECT Hometown FROM people WHERE Age  <  20", "example": {"db_id": "gymnast", "query": "SELECT Hometown FROM people WHERE Age  >  23 INTERSECT SELECT Hometown FROM people WHERE Age  <  20", "query_toks": ["SELECT", "Hometown", "FROM", "people", "WHERE", "Age", ">", "23", "INTERSECT", "SELECT", "Hometown", "FROM", "people", "WHERE", "Age", "<", "20"], "query_toks_no_value": ["select", "hometown", "from", "people", "where", "age", ">", "value", "intersect", "select", "hometown", "from", "people", "where", "age", "<", "value"], "question": "Show the hometowns shared by people older than 23 and younger than 20.", "question_toks": ["Show", "the", "hometowns", "shared", "by", "people", "older", "than", "23", "and", "younger", "than", "20", "."], "guid": 3411}}
{"text": "club: Club_ID, name, Region, Start_year; club_rank: Rank, Club_ID, Gold, Silver, Bronze, Total; player: Player_ID, name, Position, Club_ID, Apps, Tries, Goals, Points; competition: Competition_ID, Year, Competition_type, Country; competition_result: Competition_ID, Club_ID_1, Club_ID_2, Score | What are the countries that participated in both friendly and tournament type competitions?", "sql": "SELECT country FROM competition WHERE competition_type  =  'Friendly' INTERSECT SELECT country FROM competition WHERE competition_type  =  'Tournament'", "example": {"db_id": "sports_competition", "query": "SELECT country FROM competition WHERE competition_type  =  'Friendly' INTERSECT SELECT country FROM competition WHERE competition_type  =  'Tournament'", "query_toks": ["SELECT", "country", "FROM", "competition", "WHERE", "competition_type", "=", "'Friendly", "'", "INTERSECT", "SELECT", "country", "FROM", "competition", "WHERE", "competition_type", "=", "'Tournament", "'"], "query_toks_no_value": ["select", "country", "from", "competition", "where", "competition_type", "=", "value", "intersect", "select", "country", "from", "competition", "where", "competition_type", "=", "value"], "question": "What are the countries that participated in both friendly and tournament type competitions?", "question_toks": ["What", "are", "the", "countries", "that", "participated", "in", "both", "friendly", "and", "tournament", "type", "competitions", "?"], "guid": 3412}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | For each end station id, what is its name, latitude, and minimum duration for trips ended there?", "sql": "SELECT T1.name ,  T1.lat ,  min(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.end_station_id GROUP BY T2.end_station_id", "example": {"db_id": "bike_1", "query": "SELECT T1.name ,  T1.lat ,  min(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.end_station_id GROUP BY T2.end_station_id", "query_toks": ["SELECT", "T1.name", ",", "T1.lat", ",", "min", "(", "T2.duration", ")", "FROM", "station", "AS", "T1", "JOIN", "trip", "AS", "T2", "ON", "T1.id", "=", "T2.end_station_id", "GROUP", "BY", "T2.end_station_id"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "t1", ".", "lat", ",", "min", "(", "t2", ".", "duration", ")", "from", "station", "as", "t1", "join", "trip", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "end_station_id", "group", "by", "t2", ".", "end_station_id"], "question": "For each end station id, what is its name, latitude, and minimum duration for trips ended there?", "question_toks": ["For", "each", "end", "station", "id", ",", "what", "is", "its", "name", ",", "latitude", ",", "and", "minimum", "duration", "for", "trips", "ended", "there", "?"], "guid": 3413}}
{"text": "basketball_match: Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home; university: School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference | What is the total and minimum enrollment of all schools?", "sql": "SELECT sum(enrollment) ,  min(enrollment) FROM university", "example": {"db_id": "university_basketball", "query": "SELECT sum(enrollment) ,  min(enrollment) FROM university", "query_toks": ["SELECT", "sum", "(", "enrollment", ")", ",", "min", "(", "enrollment", ")", "FROM", "university"], "query_toks_no_value": ["select", "sum", "(", "enrollment", ")", ",", "min", "(", "enrollment", ")", "from", "university"], "question": "What is the total and minimum enrollment of all schools?", "question_toks": ["What", "is", "the", "total", "and", "minimum", "enrollment", "of", "all", "schools", "?"], "guid": 3414}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | Count the number of members in club \"Bootup Baltimore\" whose age is below 18.", "sql": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t3.age  <  18", "example": {"db_id": "club_1", "query": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t3.age  <  18", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "club", "AS", "t1", "JOIN", "member_of_club", "AS", "t2", "ON", "t1.clubid", "=", "t2.clubid", "JOIN", "student", "AS", "t3", "ON", "t2.stuid", "=", "t3.stuid", "WHERE", "t1.clubname", "=", "``", "Bootup", "Baltimore", "''", "AND", "t3.age", "<", "18"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "club", "as", "t1", "join", "member_of_club", "as", "t2", "on", "t1", ".", "clubid", "=", "t2", ".", "clubid", "join", "student", "as", "t3", "on", "t2", ".", "stuid", "=", "t3", ".", "stuid", "where", "t1", ".", "clubname", "=", "value", "and", "t3", ".", "age", "<", "value"], "question": "Count the number of members in club \"Bootup Baltimore\" whose age is below 18.", "question_toks": ["Count", "the", "number", "of", "members", "in", "club", "``", "Bootup", "Baltimore", "''", "whose", "age", "is", "below", "18", "."], "guid": 3415}}
{"text": "race: Race_ID, Name, Class, Date, Track_ID; track: Track_ID, Name, Location, Seating, Year_Opened | What is the race class with most number of races.", "sql": "SELECT CLASS FROM race GROUP BY CLASS ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "race_track", "query": "SELECT CLASS FROM race GROUP BY CLASS ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "CLASS", "FROM", "race", "GROUP", "BY", "CLASS", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "class", "from", "race", "group", "by", "class", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the race class with most number of races.", "question_toks": ["What", "is", "the", "race", "class", "with", "most", "number", "of", "races", "."], "guid": 3416}}
{"text": "swimmer: ID, name, Nationality, meter_100, meter_200, meter_300, meter_400, meter_500, meter_600, meter_700; stadium: ID, name, Capacity, City, Country, Opening_year; event: ID, Name, Stadium_ID, Year; record: ID, Result, Swimmer_ID, Event_ID | Which country has both stadiums with capacity greater than 60000 and stadiums with capacity less than 50000?", "sql": "SELECT country FROM stadium WHERE capacity  >  60000 INTERSECT SELECT country FROM stadium WHERE capacity  <  50000", "example": {"db_id": "swimming", "query": "SELECT country FROM stadium WHERE capacity  >  60000 INTERSECT SELECT country FROM stadium WHERE capacity  <  50000", "query_toks": ["SELECT", "country", "FROM", "stadium", "WHERE", "capacity", ">", "60000", "INTERSECT", "SELECT", "country", "FROM", "stadium", "WHERE", "capacity", "<", "50000"], "query_toks_no_value": ["select", "country", "from", "stadium", "where", "capacity", ">", "value", "intersect", "select", "country", "from", "stadium", "where", "capacity", "<", "value"], "question": "Which country has both stadiums with capacity greater than 60000 and stadiums with capacity less than 50000?", "question_toks": ["Which", "country", "has", "both", "stadiums", "with", "capacity", "greater", "than", "60000", "and", "stadiums", "with", "capacity", "less", "than", "50000", "?"], "guid": 3417}}
{"text": "players: player_id, first_name, last_name, hand, birth_date, country_code; matches: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank; rankings: ranking_date, ranking, player_id, ranking_points, tours | find the names of loser and winner who played in the match with greatest number of minutes.", "sql": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1", "example": {"db_id": "wta_1", "query": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1", "query_toks": ["SELECT", "winner_name", ",", "loser_name", "FROM", "matches", "ORDER", "BY", "minutes", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "winner_name", ",", "loser_name", "from", "matches", "order", "by", "minutes", "desc", "limit", "value"], "question": "find the names of loser and winner who played in the match with greatest number of minutes.", "question_toks": ["find", "the", "names", "of", "loser", "and", "winner", "who", "played", "in", "the", "match", "with", "greatest", "number", "of", "minutes", "."], "guid": 3418}}
{"text": "swimmer: ID, name, Nationality, meter_100, meter_200, meter_300, meter_400, meter_500, meter_600, meter_700; stadium: ID, name, Capacity, City, Country, Opening_year; event: ID, Name, Stadium_ID, Year; record: ID, Result, Swimmer_ID, Event_ID | Find the names of stadiums whose capacity is smaller than the average capacity.", "sql": "SELECT name FROM stadium WHERE capacity  <  (SELECT avg(capacity) FROM stadium)", "example": {"db_id": "swimming", "query": "SELECT name FROM stadium WHERE capacity  <  (SELECT avg(capacity) FROM stadium)", "query_toks": ["SELECT", "name", "FROM", "stadium", "WHERE", "capacity", "<", "(", "SELECT", "avg", "(", "capacity", ")", "FROM", "stadium", ")"], "query_toks_no_value": ["select", "name", "from", "stadium", "where", "capacity", "<", "(", "select", "avg", "(", "capacity", ")", "from", "stadium", ")"], "question": "Find the names of stadiums whose capacity is smaller than the average capacity.", "question_toks": ["Find", "the", "names", "of", "stadiums", "whose", "capacity", "is", "smaller", "than", "the", "average", "capacity", "."], "guid": 3419}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | What are the different types of player positions?", "sql": "SELECT count(DISTINCT pPos) FROM tryout", "example": {"db_id": "soccer_2", "query": "SELECT count(DISTINCT pPos) FROM tryout", "query_toks": ["SELECT", "count", "(", "DISTINCT", "pPos", ")", "FROM", "tryout"], "query_toks_no_value": ["select", "count", "(", "distinct", "ppos", ")", "from", "tryout"], "question": "What are the different types of player positions?", "question_toks": ["What", "are", "the", "different", "types", "of", "player", "positions", "?"], "guid": 3420}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | Which club has the most female students as their members? Give me the name of the club.", "sql": "SELECT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.sex  =  \"F\" GROUP BY t1.clubname ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "club_1", "query": "SELECT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.sex  =  \"F\" GROUP BY t1.clubname ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "t1.clubname", "FROM", "club", "AS", "t1", "JOIN", "member_of_club", "AS", "t2", "ON", "t1.clubid", "=", "t2.clubid", "JOIN", "student", "AS", "t3", "ON", "t2.stuid", "=", "t3.stuid", "WHERE", "t3.sex", "=", "``", "F", "''", "GROUP", "BY", "t1.clubname", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "clubname", "from", "club", "as", "t1", "join", "member_of_club", "as", "t2", "on", "t1", ".", "clubid", "=", "t2", ".", "clubid", "join", "student", "as", "t3", "on", "t2", ".", "stuid", "=", "t3", ".", "stuid", "where", "t3", ".", "sex", "=", "value", "group", "by", "t1", ".", "clubname", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which club has the most female students as their members? Give me the name of the club.", "question_toks": ["Which", "club", "has", "the", "most", "female", "students", "as", "their", "members", "?", "Give", "me", "the", "name", "of", "the", "club", "."], "guid": 3421}}
{"text": "wrestler: Wrestler_ID, Name, Reign, Days_held, Location, Event; Elimination: Elimination_ID, Wrestler_ID, Team, Eliminated_By, Elimination_Move, Time | Return the elimination movies of wrestlers on Team Orton.", "sql": "SELECT Elimination_Move FROM Elimination WHERE Team  =  \"Team Orton\"", "example": {"db_id": "wrestler", "query": "SELECT Elimination_Move FROM Elimination WHERE Team  =  \"Team Orton\"", "query_toks": ["SELECT", "Elimination_Move", "FROM", "Elimination", "WHERE", "Team", "=", "``", "Team", "Orton", "''"], "query_toks_no_value": ["select", "elimination_move", "from", "elimination", "where", "team", "=", "value"], "question": "Return the elimination movies of wrestlers on Team Orton.", "question_toks": ["Return", "the", "elimination", "movies", "of", "wrestlers", "on", "Team", "Orton", "."], "guid": 3422}}
{"text": "basketball_match: Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home; university: School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference | Return the total and minimum enrollments across all schools.", "sql": "SELECT sum(enrollment) ,  min(enrollment) FROM university", "example": {"db_id": "university_basketball", "query": "SELECT sum(enrollment) ,  min(enrollment) FROM university", "query_toks": ["SELECT", "sum", "(", "enrollment", ")", ",", "min", "(", "enrollment", ")", "FROM", "university"], "query_toks_no_value": ["select", "sum", "(", "enrollment", ")", ",", "min", "(", "enrollment", ")", "from", "university"], "question": "Return the total and minimum enrollments across all schools.", "question_toks": ["Return", "the", "total", "and", "minimum", "enrollments", "across", "all", "schools", "."], "guid": 3423}}
{"text": "players: player_id, first_name, last_name, hand, birth_date, country_code; matches: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank; rankings: ranking_date, ranking, player_id, ranking_points, tours | What is the first name and country code of the oldest player?", "sql": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1", "example": {"db_id": "wta_1", "query": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1", "query_toks": ["SELECT", "first_name", ",", "country_code", "FROM", "players", "ORDER", "BY", "birth_date", "LIMIT", "1"], "query_toks_no_value": ["select", "first_name", ",", "country_code", "from", "players", "order", "by", "birth_date", "limit", "value"], "question": "What is the first name and country code of the oldest player?", "question_toks": ["What", "is", "the", "first", "name", "and", "country", "code", "of", "the", "oldest", "player", "?"], "guid": 3424}}
{"text": "mountain: Mountain_ID, Name, Height, Prominence, Range, Country; climber: Climber_ID, Name, Country, Time, Points, Mountain_ID | Count the number of climbers.", "sql": "SELECT count(*) FROM climber", "example": {"db_id": "climbing", "query": "SELECT count(*) FROM climber", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "climber"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "climber"], "question": "Count the number of climbers.", "question_toks": ["Count", "the", "number", "of", "climbers", "."], "guid": 3425}}
{"text": "race: Race_ID, Name, Class, Date, Track_ID; track: Track_ID, Name, Location, Seating, Year_Opened | Give the names of tracks that do not have a race in the class 'GT'.", "sql": "SELECT name FROM track EXCEPT SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id WHERE T1.class  =  'GT'", "example": {"db_id": "race_track", "query": "SELECT name FROM track EXCEPT SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id WHERE T1.class  =  'GT'", "query_toks": ["SELECT", "name", "FROM", "track", "EXCEPT", "SELECT", "T2.name", "FROM", "race", "AS", "T1", "JOIN", "track", "AS", "T2", "ON", "T1.track_id", "=", "T2.track_id", "WHERE", "T1.class", "=", "'GT", "'"], "query_toks_no_value": ["select", "name", "from", "track", "except", "select", "t2", ".", "name", "from", "race", "as", "t1", "join", "track", "as", "t2", "on", "t1", ".", "track_id", "=", "t2", ".", "track_id", "where", "t1", ".", "class", "=", "value"], "question": "Give the names of tracks that do not have a race in the class 'GT'.", "question_toks": ["Give", "the", "names", "of", "tracks", "that", "do", "not", "have", "a", "race", "in", "the", "class", "'GT", "'", "."], "guid": 3426}}
{"text": "basketball_match: Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home; university: School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference | Count the number of different affiliation types.", "sql": "SELECT count(DISTINCT affiliation) FROM university", "example": {"db_id": "university_basketball", "query": "SELECT count(DISTINCT affiliation) FROM university", "query_toks": ["SELECT", "count", "(", "DISTINCT", "affiliation", ")", "FROM", "university"], "query_toks_no_value": ["select", "count", "(", "distinct", "affiliation", ")", "from", "university"], "question": "Count the number of different affiliation types.", "question_toks": ["Count", "the", "number", "of", "different", "affiliation", "types", "."], "guid": 3427}}
{"text": "college: College_ID, Name, Leader_Name, College_Location; member: Member_ID, Name, Country, College_ID; round: Round_ID, Member_ID, Decoration_Theme, Rank_in_Round | Show the names of members in ascending order of their rank in rounds.", "sql": "SELECT T1.Name FROM member AS T1 JOIN round AS T2 ON T1.Member_ID  =  T2.Member_ID ORDER BY Rank_in_Round ASC", "example": {"db_id": "decoration_competition", "query": "SELECT T1.Name FROM member AS T1 JOIN round AS T2 ON T1.Member_ID  =  T2.Member_ID ORDER BY Rank_in_Round ASC", "query_toks": ["SELECT", "T1.Name", "FROM", "member", "AS", "T1", "JOIN", "round", "AS", "T2", "ON", "T1.Member_ID", "=", "T2.Member_ID", "ORDER", "BY", "Rank_in_Round", "ASC"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "member", "as", "t1", "join", "round", "as", "t2", "on", "t1", ".", "member_id", "=", "t2", ".", "member_id", "order", "by", "rank_in_round", "asc"], "question": "Show the names of members in ascending order of their rank in rounds.", "question_toks": ["Show", "the", "names", "of", "members", "in", "ascending", "order", "of", "their", "rank", "in", "rounds", "."], "guid": 3428}}
{"text": "wrestler: Wrestler_ID, Name, Reign, Days_held, Location, Event; Elimination: Elimination_ID, Wrestler_ID, Team, Eliminated_By, Elimination_Move, Time | What are the names of wrestlers who have never been eliminated?", "sql": "SELECT Name FROM wrestler WHERE Wrestler_ID NOT IN (SELECT Wrestler_ID FROM elimination)", "example": {"db_id": "wrestler", "query": "SELECT Name FROM wrestler WHERE Wrestler_ID NOT IN (SELECT Wrestler_ID FROM elimination)", "query_toks": ["SELECT", "Name", "FROM", "wrestler", "WHERE", "Wrestler_ID", "NOT", "IN", "(", "SELECT", "Wrestler_ID", "FROM", "elimination", ")"], "query_toks_no_value": ["select", "name", "from", "wrestler", "where", "wrestler_id", "not", "in", "(", "select", "wrestler_id", "from", "elimination", ")"], "question": "What are the names of wrestlers who have never been eliminated?", "question_toks": ["What", "are", "the", "names", "of", "wrestlers", "who", "have", "never", "been", "eliminated", "?"], "guid": 3429}}
{"text": "race: Race_ID, Name, Class, Date, Track_ID; track: Track_ID, Name, Location, Seating, Year_Opened | Count the number of tracks.", "sql": "SELECT count(*) FROM track", "example": {"db_id": "race_track", "query": "SELECT count(*) FROM track", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "track"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "track"], "question": "Count the number of tracks.", "question_toks": ["Count", "the", "number", "of", "tracks", "."], "guid": 3430}}
{"text": "country: Country_id, Country_name, Capital, Official_native_language; team: Team_id, Name; match_season: Season, Player, Position, Country, Team, Draft_Pick_Number, Draft_Class, College; player: Player_ID, Player, Years_Played, Total_WL, Singles_WL, Doubles_WL, Team | Show the most common position of players in match seasons.", "sql": "SELECT POSITION FROM match_season GROUP BY POSITION ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "match_season", "query": "SELECT POSITION FROM match_season GROUP BY POSITION ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "POSITION", "FROM", "match_season", "GROUP", "BY", "POSITION", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "position", "from", "match_season", "group", "by", "position", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Show the most common position of players in match seasons.", "question_toks": ["Show", "the", "most", "common", "position", "of", "players", "in", "match", "seasons", "."], "guid": 3431}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | Count the number of clubs located at \"HHH\".", "sql": "SELECT count(*) FROM club WHERE clublocation  =  \"HHH\"", "example": {"db_id": "club_1", "query": "SELECT count(*) FROM club WHERE clublocation  =  \"HHH\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "club", "WHERE", "clublocation", "=", "``", "HHH", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "club", "where", "clublocation", "=", "value"], "question": "Count the number of clubs located at \"HHH\".", "question_toks": ["Count", "the", "number", "of", "clubs", "located", "at", "``", "HHH", "''", "."], "guid": 3432}}
{"text": "country: Country_id, Country_name, Capital, Official_native_language; team: Team_id, Name; match_season: Season, Player, Position, Country, Team, Draft_Pick_Number, Draft_Class, College; player: Player_ID, Player, Years_Played, Total_WL, Singles_WL, Doubles_WL, Team | Show the players and years played for players from team \"Columbus Crew\".", "sql": "SELECT T1.Player , T1.Years_Played FROM player AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  \"Columbus Crew\"", "example": {"db_id": "match_season", "query": "SELECT T1.Player , T1.Years_Played FROM player AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  \"Columbus Crew\"", "query_toks": ["SELECT", "T1.Player", ",", "T1.Years_Played", "FROM", "player", "AS", "T1", "JOIN", "team", "AS", "T2", "ON", "T1.Team", "=", "T2.Team_id", "WHERE", "T2.Name", "=", "``", "Columbus", "Crew", "''"], "query_toks_no_value": ["select", "t1", ".", "player", ",", "t1", ".", "years_played", "from", "player", "as", "t1", "join", "team", "as", "t2", "on", "t1", ".", "team", "=", "t2", ".", "team_id", "where", "t2", ".", "name", "=", "value"], "question": "Show the players and years played for players from team \"Columbus Crew\".", "question_toks": ["Show", "the", "players", "and", "years", "played", "for", "players", "from", "team", "``", "Columbus", "Crew", "''", "."], "guid": 3433}}
{"text": "basketball_match: Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home; university: School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference | Count the number of universities that do not participate in the baketball match.", "sql": "SELECT count(*) FROM university WHERE school_id NOT IN (SELECT school_id FROM basketball_match)", "example": {"db_id": "university_basketball", "query": "SELECT count(*) FROM university WHERE school_id NOT IN (SELECT school_id FROM basketball_match)", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "university", "WHERE", "school_id", "NOT", "IN", "(", "SELECT", "school_id", "FROM", "basketball_match", ")"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "university", "where", "school_id", "not", "in", "(", "select", "school_id", "from", "basketball_match", ")"], "question": "Count the number of universities that do not participate in the baketball match.", "question_toks": ["Count", "the", "number", "of", "universities", "that", "do", "not", "participate", "in", "the", "baketball", "match", "."], "guid": 3434}}
{"text": "wrestler: Wrestler_ID, Name, Reign, Days_held, Location, Event; Elimination: Elimination_ID, Wrestler_ID, Team, Eliminated_By, Elimination_Move, Time | What is the time of elimination for the wrestler with the most days held?", "sql": "SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID ORDER BY T2.Days_held DESC LIMIT 1", "example": {"db_id": "wrestler", "query": "SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID ORDER BY T2.Days_held DESC LIMIT 1", "query_toks": ["SELECT", "T1.Time", "FROM", "elimination", "AS", "T1", "JOIN", "wrestler", "AS", "T2", "ON", "T1.Wrestler_ID", "=", "T2.Wrestler_ID", "ORDER", "BY", "T2.Days_held", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "time", "from", "elimination", "as", "t1", "join", "wrestler", "as", "t2", "on", "t1", ".", "wrestler_id", "=", "t2", ".", "wrestler_id", "order", "by", "t2", ".", "days_held", "desc", "limit", "value"], "question": "What is the time of elimination for the wrestler with the most days held?", "question_toks": ["What", "is", "the", "time", "of", "elimination", "for", "the", "wrestler", "with", "the", "most", "days", "held", "?"], "guid": 3435}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | Find the number of students who participate in the tryout for each college ordered by descending count.", "sql": "SELECT count(*) ,  cName FROM tryout GROUP BY cName ORDER BY count(*) DESC", "example": {"db_id": "soccer_2", "query": "SELECT count(*) ,  cName FROM tryout GROUP BY cName ORDER BY count(*) DESC", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "cName", "FROM", "tryout", "GROUP", "BY", "cName", "ORDER", "BY", "count", "(", "*", ")", "DESC"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "cname", "from", "tryout", "group", "by", "cname", "order", "by", "count", "(", "*", ")", "desc"], "question": "Find the number of students who participate in the tryout for each college ordered by descending count.", "question_toks": ["Find", "the", "number", "of", "students", "who", "participate", "in", "the", "tryout", "for", "each", "college", "ordered", "by", "descending", "count", "."], "guid": 3436}}
{"text": "mountain: Mountain_ID, Name, Height, Prominence, Range, Country; climber: Climber_ID, Name, Country, Time, Points, Mountain_ID | Show the countries that have mountains with height more than 5600 stories and mountains with height less than 5200.", "sql": "SELECT Country FROM mountain WHERE Height  >  5600 INTERSECT SELECT Country FROM mountain WHERE Height  <  5200", "example": {"db_id": "climbing", "query": "SELECT Country FROM mountain WHERE Height  >  5600 INTERSECT SELECT Country FROM mountain WHERE Height  <  5200", "query_toks": ["SELECT", "Country", "FROM", "mountain", "WHERE", "Height", ">", "5600", "INTERSECT", "SELECT", "Country", "FROM", "mountain", "WHERE", "Height", "<", "5200"], "query_toks_no_value": ["select", "country", "from", "mountain", "where", "height", ">", "value", "intersect", "select", "country", "from", "mountain", "where", "height", "<", "value"], "question": "Show the countries that have mountains with height more than 5600 stories and mountains with height less than 5200.", "question_toks": ["Show", "the", "countries", "that", "have", "mountains", "with", "height", "more", "than", "5600", "stories", "and", "mountains", "with", "height", "less", "than", "5200", "."], "guid": 3437}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | What is the average bike availability in stations that are not located in Palo Alto?", "sql": "SELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city  =  \"Palo Alto\")", "example": {"db_id": "bike_1", "query": "SELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city  =  \"Palo Alto\")", "query_toks": ["SELECT", "avg", "(", "bikes_available", ")", "FROM", "status", "WHERE", "station_id", "NOT", "IN", "(", "SELECT", "id", "FROM", "station", "WHERE", "city", "=", "``", "Palo", "Alto", "''", ")"], "query_toks_no_value": ["select", "avg", "(", "bikes_available", ")", "from", "status", "where", "station_id", "not", "in", "(", "select", "id", "from", "station", "where", "city", "=", "value", ")"], "question": "What is the average bike availability in stations that are not located in Palo Alto?", "question_toks": ["What", "is", "the", "average", "bike", "availability", "in", "stations", "that", "are", "not", "located", "in", "Palo", "Alto", "?"], "guid": 3438}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | Which members of \"Bootup Baltimore\" major in \"600\"? Give me their first names and last names.", "sql": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t3.major  =  \"600\"", "example": {"db_id": "club_1", "query": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t3.major  =  \"600\"", "query_toks": ["SELECT", "t3.fname", ",", "t3.lname", "FROM", "club", "AS", "t1", "JOIN", "member_of_club", "AS", "t2", "ON", "t1.clubid", "=", "t2.clubid", "JOIN", "student", "AS", "t3", "ON", "t2.stuid", "=", "t3.stuid", "WHERE", "t1.clubname", "=", "``", "Bootup", "Baltimore", "''", "AND", "t3.major", "=", "``", "600", "''"], "query_toks_no_value": ["select", "t3", ".", "fname", ",", "t3", ".", "lname", "from", "club", "as", "t1", "join", "member_of_club", "as", "t2", "on", "t1", ".", "clubid", "=", "t2", ".", "clubid", "join", "student", "as", "t3", "on", "t2", ".", "stuid", "=", "t3", ".", "stuid", "where", "t1", ".", "clubname", "=", "value", "and", "t3", ".", "major", "=", "value"], "question": "Which members of \"Bootup Baltimore\" major in \"600\"? Give me their first names and last names.", "question_toks": ["Which", "members", "of", "``", "Bootup", "Baltimore", "''", "major", "in", "``", "600", "''", "?", "Give", "me", "their", "first", "names", "and", "last", "names", "."], "guid": 3439}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | How many students are enrolled in college?", "sql": "SELECT sum(enr) FROM College", "example": {"db_id": "soccer_2", "query": "SELECT sum(enr) FROM College", "query_toks": ["SELECT", "sum", "(", "enr", ")", "FROM", "College"], "query_toks_no_value": ["select", "sum", "(", "enr", ")", "from", "college"], "question": "How many students are enrolled in college?", "question_toks": ["How", "many", "students", "are", "enrolled", "in", "college", "?"], "guid": 3440}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | Find all members of \"Bootup Baltimore\" whose major is \"600\". Show the first name and last name.", "sql": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t3.major  =  \"600\"", "example": {"db_id": "club_1", "query": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t3.major  =  \"600\"", "query_toks": ["SELECT", "t3.fname", ",", "t3.lname", "FROM", "club", "AS", "t1", "JOIN", "member_of_club", "AS", "t2", "ON", "t1.clubid", "=", "t2.clubid", "JOIN", "student", "AS", "t3", "ON", "t2.stuid", "=", "t3.stuid", "WHERE", "t1.clubname", "=", "``", "Bootup", "Baltimore", "''", "AND", "t3.major", "=", "``", "600", "''"], "query_toks_no_value": ["select", "t3", ".", "fname", ",", "t3", ".", "lname", "from", "club", "as", "t1", "join", "member_of_club", "as", "t2", "on", "t1", ".", "clubid", "=", "t2", ".", "clubid", "join", "student", "as", "t3", "on", "t2", ".", "stuid", "=", "t3", ".", "stuid", "where", "t1", ".", "clubname", "=", "value", "and", "t3", ".", "major", "=", "value"], "question": "Find all members of \"Bootup Baltimore\" whose major is \"600\". Show the first name and last name.", "question_toks": ["Find", "all", "members", "of", "``", "Bootup", "Baltimore", "''", "whose", "major", "is", "``", "600", "''", ".", "Show", "the", "first", "name", "and", "last", "name", "."], "guid": 3441}}
{"text": "body_builder: Body_Builder_ID, People_ID, Snatch, Clean_Jerk, Total; people: People_ID, Name, Height, Weight, Birth_Date, Birth_Place | How many persons are not body builders?", "sql": "SELECT count(*) FROM people WHERE people_id NOT IN (SELECT People_ID FROM body_builder)", "example": {"db_id": "body_builder", "query": "SELECT count(*) FROM people WHERE people_id NOT IN (SELECT People_ID FROM body_builder)", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "people", "WHERE", "people_id", "NOT", "IN", "(", "SELECT", "People_ID", "FROM", "body_builder", ")"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "people", "where", "people_id", "not", "in", "(", "select", "people_id", "from", "body_builder", ")"], "question": "How many persons are not body builders?", "question_toks": ["How", "many", "persons", "are", "not", "body", "builders", "?"], "guid": 3442}}
{"text": "basketball_match: Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home; university: School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference | What are the different affiliations, and how many schools with each have an enrollment size of above 20000?", "sql": "SELECT count(*) ,  affiliation FROM university WHERE enrollment  >  20000 GROUP BY affiliation", "example": {"db_id": "university_basketball", "query": "SELECT count(*) ,  affiliation FROM university WHERE enrollment  >  20000 GROUP BY affiliation", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "affiliation", "FROM", "university", "WHERE", "enrollment", ">", "20000", "GROUP", "BY", "affiliation"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "affiliation", "from", "university", "where", "enrollment", ">", "value", "group", "by", "affiliation"], "question": "What are the different affiliations, and how many schools with each have an enrollment size of above 20000?", "question_toks": ["What", "are", "the", "different", "affiliations", ",", "and", "how", "many", "schools", "with", "each", "have", "an", "enrollment", "size", "of", "above", "20000", "?"], "guid": 3443}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | How many drivers did not race in 2009?", "sql": "SELECT count(DISTINCT driverId) FROM results WHERE raceId NOT IN( SELECT raceId FROM races WHERE YEAR != 2009 )", "example": {"db_id": "formula_1", "query": "SELECT count(DISTINCT driverId) FROM results WHERE raceId NOT IN( SELECT raceId FROM races WHERE YEAR != 2009 )", "query_toks": ["SELECT", "count", "(", "DISTINCT", "driverId", ")", "FROM", "results", "WHERE", "raceId", "NOT", "IN", "(", "SELECT", "raceId", "FROM", "races", "WHERE", "YEAR", "!", "=", "2009", ")"], "query_toks_no_value": ["select", "count", "(", "distinct", "driverid", ")", "from", "results", "where", "raceid", "not", "in", "(", "select", "raceid", "from", "races", "where", "year", "!", "=", "value", ")"], "question": "How many drivers did not race in 2009?", "question_toks": ["How", "many", "drivers", "did", "not", "race", "in", "2009", "?"], "guid": 3444}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | What is the id of the trip that started from the station with the highest dock count?", "sql": "SELECT T1.id FROM trip AS T1 JOIN station AS T2 ON T1.start_station_id  =  T2.id ORDER BY T2.dock_count DESC LIMIT 1", "example": {"db_id": "bike_1", "query": "SELECT T1.id FROM trip AS T1 JOIN station AS T2 ON T1.start_station_id  =  T2.id ORDER BY T2.dock_count DESC LIMIT 1", "query_toks": ["SELECT", "T1.id", "FROM", "trip", "AS", "T1", "JOIN", "station", "AS", "T2", "ON", "T1.start_station_id", "=", "T2.id", "ORDER", "BY", "T2.dock_count", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "id", "from", "trip", "as", "t1", "join", "station", "as", "t2", "on", "t1", ".", "start_station_id", "=", "t2", ".", "id", "order", "by", "t2", ".", "dock_count", "desc", "limit", "value"], "question": "What is the id of the trip that started from the station with the highest dock count?", "question_toks": ["What", "is", "the", "id", "of", "the", "trip", "that", "started", "from", "the", "station", "with", "the", "highest", "dock", "count", "?"], "guid": 3445}}
{"text": "swimmer: ID, name, Nationality, meter_100, meter_200, meter_300, meter_400, meter_500, meter_600, meter_700; stadium: ID, name, Capacity, City, Country, Opening_year; event: ID, Name, Stadium_ID, Year; record: ID, Result, Swimmer_ID, Event_ID | Which country has at most 3 stadiums listed?", "sql": "SELECT country FROM stadium GROUP BY country HAVING count(*)  <=  3", "example": {"db_id": "swimming", "query": "SELECT country FROM stadium GROUP BY country HAVING count(*)  <=  3", "query_toks": ["SELECT", "country", "FROM", "stadium", "GROUP", "BY", "country", "HAVING", "count", "(", "*", ")", "<", "=", "3"], "query_toks_no_value": ["select", "country", "from", "stadium", "group", "by", "country", "having", "count", "(", "*", ")", "<", "=", "value"], "question": "Which country has at most 3 stadiums listed?", "question_toks": ["Which", "country", "has", "at", "most", "3", "stadiums", "listed", "?"], "guid": 3446}}
{"text": "club: Club_ID, name, Region, Start_year; club_rank: Rank, Club_ID, Gold, Silver, Bronze, Total; player: Player_ID, name, Position, Club_ID, Apps, Tries, Goals, Points; competition: Competition_ID, Year, Competition_type, Country; competition_result: Competition_ID, Club_ID_1, Club_ID_2, Score | What is the average points of players from club with name \"AIB\".", "sql": "SELECT avg(T2.Points) FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID WHERE T1.name  =  \"AIB\"", "example": {"db_id": "sports_competition", "query": "SELECT avg(T2.Points) FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID WHERE T1.name  =  \"AIB\"", "query_toks": ["SELECT", "avg", "(", "T2.Points", ")", "FROM", "club", "AS", "T1", "JOIN", "player", "AS", "T2", "ON", "T1.Club_ID", "=", "T2.Club_ID", "WHERE", "T1.name", "=", "``", "AIB", "''"], "query_toks_no_value": ["select", "avg", "(", "t2", ".", "points", ")", "from", "club", "as", "t1", "join", "player", "as", "t2", "on", "t1", ".", "club_id", "=", "t2", ".", "club_id", "where", "t1", ".", "name", "=", "value"], "question": "What is the average points of players from club with name \"AIB\".", "question_toks": ["What", "is", "the", "average", "points", "of", "players", "from", "club", "with", "name", "``", "AIB", "''", "."], "guid": 3447}}
{"text": "basketball_match: Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home; university: School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference | List all information regarding the basketball match.", "sql": "SELECT * FROM basketball_match", "example": {"db_id": "university_basketball", "query": "SELECT * FROM basketball_match", "query_toks": ["SELECT", "*", "FROM", "basketball_match"], "query_toks_no_value": ["select", "*", "from", "basketball_match"], "question": "List all information regarding the basketball match.", "question_toks": ["List", "all", "information", "regarding", "the", "basketball", "match", "."], "guid": 3448}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | Retrieve the average age of members of the club \"Tennis Club\".", "sql": "SELECT avg(t3.age) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Tennis Club\"", "example": {"db_id": "club_1", "query": "SELECT avg(t3.age) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Tennis Club\"", "query_toks": ["SELECT", "avg", "(", "t3.age", ")", "FROM", "club", "AS", "t1", "JOIN", "member_of_club", "AS", "t2", "ON", "t1.clubid", "=", "t2.clubid", "JOIN", "student", "AS", "t3", "ON", "t2.stuid", "=", "t3.stuid", "WHERE", "t1.clubname", "=", "``", "Tennis", "Club", "''"], "query_toks_no_value": ["select", "avg", "(", "t3", ".", "age", ")", "from", "club", "as", "t1", "join", "member_of_club", "as", "t2", "on", "t1", ".", "clubid", "=", "t2", ".", "clubid", "join", "student", "as", "t3", "on", "t2", ".", "stuid", "=", "t3", ".", "stuid", "where", "t1", ".", "clubname", "=", "value"], "question": "Retrieve the average age of members of the club \"Tennis Club\".", "question_toks": ["Retrieve", "the", "average", "age", "of", "members", "of", "the", "club", "``", "Tennis", "Club", "''", "."], "guid": 3449}}
{"text": "club: Club_ID, name, Region, Start_year; club_rank: Rank, Club_ID, Gold, Silver, Bronze, Total; player: Player_ID, name, Position, Club_ID, Apps, Tries, Goals, Points; competition: Competition_ID, Year, Competition_type, Country; competition_result: Competition_ID, Club_ID_1, Club_ID_2, Score | What are the types of competition and number of competitions for that type?", "sql": "SELECT Competition_type ,  COUNT(*) FROM competition GROUP BY Competition_type", "example": {"db_id": "sports_competition", "query": "SELECT Competition_type ,  COUNT(*) FROM competition GROUP BY Competition_type", "query_toks": ["SELECT", "Competition_type", ",", "COUNT", "(", "*", ")", "FROM", "competition", "GROUP", "BY", "Competition_type"], "query_toks_no_value": ["select", "competition_type", ",", "count", "(", "*", ")", "from", "competition", "group", "by", "competition_type"], "question": "What are the types of competition and number of competitions for that type?", "question_toks": ["What", "are", "the", "types", "of", "competition", "and", "number", "of", "competitions", "for", "that", "type", "?"], "guid": 3450}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | What are the forenames and surnames of drivers who participated in the races named Australian Grand Prix but not the races named Chinese Grand Prix?", "sql": "SELECT T3.forename ,  T3.surname FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = \"Australian Grand Prix\" EXCEPT SELECT T3.forename ,  T3.surname FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = \"Chinese Grand Prix\"", "example": {"db_id": "formula_1", "query": "SELECT T3.forename ,  T3.surname FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = \"Australian Grand Prix\" EXCEPT SELECT T3.forename ,  T3.surname FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = \"Chinese Grand Prix\"", "query_toks": ["SELECT", "T3.forename", ",", "T3.surname", "FROM", "races", "AS", "T1", "JOIN", "results", "AS", "T2", "ON", "T1.raceid", "=", "T2.raceid", "JOIN", "drivers", "AS", "T3", "ON", "T2.driverid", "=", "T3.driverid", "WHERE", "T1.name", "=", "``", "Australian", "Grand", "Prix", "''", "EXCEPT", "SELECT", "T3.forename", ",", "T3.surname", "FROM", "races", "AS", "T1", "JOIN", "results", "AS", "T2", "ON", "T1.raceid", "=", "T2.raceid", "JOIN", "drivers", "AS", "T3", "ON", "T2.driverid", "=", "T3.driverid", "WHERE", "T1.name", "=", "``", "Chinese", "Grand", "Prix", "''"], "query_toks_no_value": ["select", "t3", ".", "forename", ",", "t3", ".", "surname", "from", "races", "as", "t1", "join", "results", "as", "t2", "on", "t1", ".", "raceid", "=", "t2", ".", "raceid", "join", "drivers", "as", "t3", "on", "t2", ".", "driverid", "=", "t3", ".", "driverid", "where", "t1", ".", "name", "=", "value", "except", "select", "t3", ".", "forename", ",", "t3", ".", "surname", "from", "races", "as", "t1", "join", "results", "as", "t2", "on", "t1", ".", "raceid", "=", "t2", ".", "raceid", "join", "drivers", "as", "t3", "on", "t2", ".", "driverid", "=", "t3", ".", "driverid", "where", "t1", ".", "name", "=", "value"], "question": "What are the forenames and surnames of drivers who participated in the races named Australian Grand Prix but not the races named Chinese Grand Prix?", "question_toks": ["What", "are", "the", "forenames", "and", "surnames", "of", "drivers", "who", "participated", "in", "the", "races", "named", "Australian", "Grand", "Prix", "but", "not", "the", "races", "named", "Chinese", "Grand", "Prix", "?"], "guid": 3451}}
{"text": "wrestler: Wrestler_ID, Name, Reign, Days_held, Location, Event; Elimination: Elimination_ID, Wrestler_ID, Team, Eliminated_By, Elimination_Move, Time | What are the distinct reigns of wrestlers whose location is not \"Tokyo,Japan\" ?", "sql": "SELECT DISTINCT Reign FROM wrestler WHERE LOCATION != \"Tokyo , Japan\"", "example": {"db_id": "wrestler", "query": "SELECT DISTINCT Reign FROM wrestler WHERE LOCATION != \"Tokyo , Japan\"", "query_toks": ["SELECT", "DISTINCT", "Reign", "FROM", "wrestler", "WHERE", "LOCATION", "!", "=", "``", "Tokyo", ",", "Japan", "''"], "query_toks_no_value": ["select", "distinct", "reign", "from", "wrestler", "where", "location", "!", "=", "value"], "question": "What are the distinct reigns of wrestlers whose location is not \"Tokyo,Japan\" ?", "question_toks": ["What", "are", "the", "distinct", "reigns", "of", "wrestlers", "whose", "location", "is", "not", "``", "Tokyo", ",", "Japan", "''", "?"], "guid": 3452}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | What are the names of stations that have latitude lower than 37.5?", "sql": "SELECT name FROM station WHERE lat  <  37.5", "example": {"db_id": "bike_1", "query": "SELECT name FROM station WHERE lat  <  37.5", "query_toks": ["SELECT", "name", "FROM", "station", "WHERE", "lat", "<", "37.5"], "query_toks_no_value": ["select", "name", "from", "station", "where", "lat", "<", "value"], "question": "What are the names of stations that have latitude lower than 37.5?", "question_toks": ["What", "are", "the", "names", "of", "stations", "that", "have", "latitude", "lower", "than", "37.5", "?"], "guid": 3453}}
{"text": "poker_player: Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings; people: People_ID, Nationality, Name, Birth_Date, Height | List the names of people that are not poker players.", "sql": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)", "example": {"db_id": "poker_player", "query": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)", "query_toks": ["SELECT", "Name", "FROM", "people", "WHERE", "People_ID", "NOT", "IN", "(", "SELECT", "People_ID", "FROM", "poker_player", ")"], "query_toks_no_value": ["select", "name", "from", "people", "where", "people_id", "not", "in", "(", "select", "people_id", "from", "poker_player", ")"], "question": "List the names of people that are not poker players.", "question_toks": ["List", "the", "names", "of", "people", "that", "are", "not", "poker", "players", "."], "guid": 3454}}
{"text": "country: Country_id, Country_name, Capital, Official_native_language; team: Team_id, Name; match_season: Season, Player, Position, Country, Team, Draft_Pick_Number, Draft_Class, College; player: Player_ID, Player, Years_Played, Total_WL, Singles_WL, Doubles_WL, Team | How many countries are there in total?", "sql": "SELECT count(*) FROM country", "example": {"db_id": "match_season", "query": "SELECT count(*) FROM country", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "country"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "country"], "question": "How many countries are there in total?", "question_toks": ["How", "many", "countries", "are", "there", "in", "total", "?"], "guid": 3455}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | List all the cities in a decreasing order of each city's stations' highest latitude.", "sql": "SELECT city FROM station GROUP BY city ORDER BY max(lat) DESC", "example": {"db_id": "bike_1", "query": "SELECT city FROM station GROUP BY city ORDER BY max(lat) DESC", "query_toks": ["SELECT", "city", "FROM", "station", "GROUP", "BY", "city", "ORDER", "BY", "max", "(", "lat", ")", "DESC"], "query_toks_no_value": ["select", "city", "from", "station", "group", "by", "city", "order", "by", "max", "(", "lat", ")", "desc"], "question": "List all the cities in a decreasing order of each city's stations' highest latitude.", "question_toks": ["List", "all", "the", "cities", "in", "a", "decreasing", "order", "of", "each", "city", "'s", "stations", "'", "highest", "latitude", "."], "guid": 3456}}
{"text": "players: player_id, first_name, last_name, hand, birth_date, country_code; matches: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank; rankings: ranking_date, ranking, player_id, ranking_points, tours | How many total tours were there for each ranking date?", "sql": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date", "example": {"db_id": "wta_1", "query": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date", "query_toks": ["SELECT", "sum", "(", "tours", ")", ",", "ranking_date", "FROM", "rankings", "GROUP", "BY", "ranking_date"], "query_toks_no_value": ["select", "sum", "(", "tours", ")", ",", "ranking_date", "from", "rankings", "group", "by", "ranking_date"], "question": "How many total tours were there for each ranking date?", "question_toks": ["How", "many", "total", "tours", "were", "there", "for", "each", "ranking", "date", "?"], "guid": 3457}}
{"text": "players: player_id, first_name, last_name, hand, birth_date, country_code; matches: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank; rankings: ranking_date, ranking, player_id, ranking_points, tours | Find the number of left handed winners who participated in the WTA Championships.", "sql": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'", "example": {"db_id": "wta_1", "query": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'", "query_toks": ["SELECT", "count", "(", "DISTINCT", "winner_name", ")", "FROM", "matches", "WHERE", "tourney_name", "=", "'WTA", "Championships", "'", "AND", "winner_hand", "=", "'L", "'"], "query_toks_no_value": ["select", "count", "(", "distinct", "winner_name", ")", "from", "matches", "where", "tourney_name", "=", "value", "and", "winner_hand", "=", "value"], "question": "Find the number of left handed winners who participated in the WTA Championships.", "question_toks": ["Find", "the", "number", "of", "left", "handed", "winners", "who", "participated", "in", "the", "WTA", "Championships", "."], "guid": 3458}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | What are the different ids and names of the stations that have had more than 12 bikes available?", "sql": "SELECT DISTINCT T1.id ,  T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  >  12", "example": {"db_id": "bike_1", "query": "SELECT DISTINCT T1.id ,  T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  >  12", "query_toks": ["SELECT", "DISTINCT", "T1.id", ",", "T1.name", "FROM", "station", "AS", "T1", "JOIN", "status", "AS", "T2", "ON", "T1.id", "=", "T2.station_id", "WHERE", "T2.bikes_available", ">", "12"], "query_toks_no_value": ["select", "distinct", "t1", ".", "id", ",", "t1", ".", "name", "from", "station", "as", "t1", "join", "status", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "station_id", "where", "t2", ".", "bikes_available", ">", "value"], "question": "What are the different ids and names of the stations that have had more than 12 bikes available?", "question_toks": ["What", "are", "the", "different", "ids", "and", "names", "of", "the", "stations", "that", "have", "had", "more", "than", "12", "bikes", "available", "?"], "guid": 3459}}
{"text": "mountain: Mountain_ID, Name, Height, Prominence, Range, Country; climber: Climber_ID, Name, Country, Time, Points, Mountain_ID | List the countries that have more than one mountain.", "sql": "SELECT Country FROM mountain GROUP BY Country HAVING COUNT(*)  >  1", "example": {"db_id": "climbing", "query": "SELECT Country FROM mountain GROUP BY Country HAVING COUNT(*)  >  1", "query_toks": ["SELECT", "Country", "FROM", "mountain", "GROUP", "BY", "Country", "HAVING", "COUNT", "(", "*", ")", ">", "1"], "query_toks_no_value": ["select", "country", "from", "mountain", "group", "by", "country", "having", "count", "(", "*", ")", ">", "value"], "question": "List the countries that have more than one mountain.", "question_toks": ["List", "the", "countries", "that", "have", "more", "than", "one", "mountain", "."], "guid": 3460}}
{"text": "race: Race_ID, Name, Class, Date, Track_ID; track: Track_ID, Name, Location, Seating, Year_Opened | Give the class of races that is most common.", "sql": "SELECT CLASS FROM race GROUP BY CLASS ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "race_track", "query": "SELECT CLASS FROM race GROUP BY CLASS ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "CLASS", "FROM", "race", "GROUP", "BY", "CLASS", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "class", "from", "race", "group", "by", "class", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Give the class of races that is most common.", "question_toks": ["Give", "the", "class", "of", "races", "that", "is", "most", "common", "."], "guid": 3461}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | Who is the \"CTO\" of club \"Hopkins Student Enterprises\"? Show the first name and last name.", "sql": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Hopkins Student Enterprises\" AND t2.position  =  \"CTO\"", "example": {"db_id": "club_1", "query": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Hopkins Student Enterprises\" AND t2.position  =  \"CTO\"", "query_toks": ["SELECT", "t3.fname", ",", "t3.lname", "FROM", "club", "AS", "t1", "JOIN", "member_of_club", "AS", "t2", "ON", "t1.clubid", "=", "t2.clubid", "JOIN", "student", "AS", "t3", "ON", "t2.stuid", "=", "t3.stuid", "WHERE", "t1.clubname", "=", "``", "Hopkins", "Student", "Enterprises", "''", "AND", "t2.position", "=", "``", "CTO", "''"], "query_toks_no_value": ["select", "t3", ".", "fname", ",", "t3", ".", "lname", "from", "club", "as", "t1", "join", "member_of_club", "as", "t2", "on", "t1", ".", "clubid", "=", "t2", ".", "clubid", "join", "student", "as", "t3", "on", "t2", ".", "stuid", "=", "t3", ".", "stuid", "where", "t1", ".", "clubname", "=", "value", "and", "t2", ".", "position", "=", "value"], "question": "Who is the \"CTO\" of club \"Hopkins Student Enterprises\"? Show the first name and last name.", "question_toks": ["Who", "is", "the", "``", "CTO", "''", "of", "club", "``", "Hopkins", "Student", "Enterprises", "''", "?", "Show", "the", "first", "name", "and", "last", "name", "."], "guid": 3462}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | What is the id and last name of the driver who participated in the most races after 2010?", "sql": "SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid WHERE T3.year > 2010 GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "formula_1", "query": "SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid WHERE T3.year > 2010 GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.driverid", ",", "T1.surname", "FROM", "drivers", "AS", "T1", "JOIN", "results", "AS", "T2", "ON", "T1.driverid", "=", "T2.driverid", "JOIN", "races", "AS", "T3", "ON", "T2.raceid", "=", "T3.raceid", "WHERE", "T3.year", ">", "2010", "GROUP", "BY", "T1.driverid", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "driverid", ",", "t1", ".", "surname", "from", "drivers", "as", "t1", "join", "results", "as", "t2", "on", "t1", ".", "driverid", "=", "t2", ".", "driverid", "join", "races", "as", "t3", "on", "t2", ".", "raceid", "=", "t3", ".", "raceid", "where", "t3", ".", "year", ">", "value", "group", "by", "t1", ".", "driverid", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the id and last name of the driver who participated in the most races after 2010?", "question_toks": ["What", "is", "the", "id", "and", "last", "name", "of", "the", "driver", "who", "participated", "in", "the", "most", "races", "after", "2010", "?"], "guid": 3463}}
{"text": "club: Club_ID, name, Region, Start_year; club_rank: Rank, Club_ID, Gold, Silver, Bronze, Total; player: Player_ID, name, Position, Club_ID, Apps, Tries, Goals, Points; competition: Competition_ID, Year, Competition_type, Country; competition_result: Competition_ID, Club_ID_1, Club_ID_2, Score | List the distinct region of clubs in ascending alphabetical order.", "sql": "SELECT DISTINCT Region FROM club ORDER BY Region ASC", "example": {"db_id": "sports_competition", "query": "SELECT DISTINCT Region FROM club ORDER BY Region ASC", "query_toks": ["SELECT", "DISTINCT", "Region", "FROM", "club", "ORDER", "BY", "Region", "ASC"], "query_toks_no_value": ["select", "distinct", "region", "from", "club", "order", "by", "region", "asc"], "question": "List the distinct region of clubs in ascending alphabetical order.", "question_toks": ["List", "the", "distinct", "region", "of", "clubs", "in", "ascending", "alphabetical", "order", "."], "guid": 3464}}
{"text": "gymnast: Gymnast_ID, Floor_Exercise_Points, Pommel_Horse_Points, Rings_Points, Vault_Points, Parallel_Bars_Points, Horizontal_Bar_Points, Total_Points; people: People_ID, Name, Age, Height, Hometown | What are the total points for all gymnasts, ordered by total points descending?", "sql": "SELECT Total_Points FROM gymnast ORDER BY Total_Points DESC", "example": {"db_id": "gymnast", "query": "SELECT Total_Points FROM gymnast ORDER BY Total_Points DESC", "query_toks": ["SELECT", "Total_Points", "FROM", "gymnast", "ORDER", "BY", "Total_Points", "DESC"], "query_toks_no_value": ["select", "total_points", "from", "gymnast", "order", "by", "total_points", "desc"], "question": "What are the total points for all gymnasts, ordered by total points descending?", "question_toks": ["What", "are", "the", "total", "points", "for", "all", "gymnasts", ",", "ordered", "by", "total", "points", "descending", "?"], "guid": 3465}}
{"text": "basketball_match: Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home; university: School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference | When was the school with the largest enrollment founded?", "sql": "SELECT founded FROM university ORDER BY enrollment DESC LIMIT 1", "example": {"db_id": "university_basketball", "query": "SELECT founded FROM university ORDER BY enrollment DESC LIMIT 1", "query_toks": ["SELECT", "founded", "FROM", "university", "ORDER", "BY", "enrollment", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "founded", "from", "university", "order", "by", "enrollment", "desc", "limit", "value"], "question": "When was the school with the largest enrollment founded?", "question_toks": ["When", "was", "the", "school", "with", "the", "largest", "enrollment", "founded", "?"], "guid": 3466}}
{"text": "players: player_id, first_name, last_name, hand, birth_date, country_code; matches: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank; rankings: ranking_date, ranking, player_id, ranking_points, tours | Find the total ranking points for each player and their first name.", "sql": "SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name", "example": {"db_id": "wta_1", "query": "SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name", "query_toks": ["SELECT", "sum", "(", "ranking_points", ")", ",", "T1.first_name", "FROM", "players", "AS", "T1", "JOIN", "rankings", "AS", "T2", "ON", "T1.player_id", "=", "T2.player_id", "GROUP", "BY", "T1.first_name"], "query_toks_no_value": ["select", "sum", "(", "ranking_points", ")", ",", "t1", ".", "first_name", "from", "players", "as", "t1", "join", "rankings", "as", "t2", "on", "t1", ".", "player_id", "=", "t2", ".", "player_id", "group", "by", "t1", ".", "first_name"], "question": "Find the total ranking points for each player and their first name.", "question_toks": ["Find", "the", "total", "ranking", "points", "for", "each", "player", "and", "their", "first", "name", "."], "guid": 3467}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | What are the ids of the trips that lasted the longest and how long did they last?", "sql": "SELECT id ,  duration FROM trip ORDER BY duration DESC LIMIT 3", "example": {"db_id": "bike_1", "query": "SELECT id ,  duration FROM trip ORDER BY duration DESC LIMIT 3", "query_toks": ["SELECT", "id", ",", "duration", "FROM", "trip", "ORDER", "BY", "duration", "DESC", "LIMIT", "3"], "query_toks_no_value": ["select", "id", ",", "duration", "from", "trip", "order", "by", "duration", "desc", "limit", "value"], "question": "What are the ids of the trips that lasted the longest and how long did they last?", "question_toks": ["What", "are", "the", "ids", "of", "the", "trips", "that", "lasted", "the", "longest", "and", "how", "long", "did", "they", "last", "?"], "guid": 3468}}
{"text": "swimmer: ID, name, Nationality, meter_100, meter_200, meter_300, meter_400, meter_500, meter_600, meter_700; stadium: ID, name, Capacity, City, Country, Opening_year; event: ID, Name, Stadium_ID, Year; record: ID, Result, Swimmer_ID, Event_ID | Find the names of the swimmers who have no record.", "sql": "SELECT name FROM swimmer WHERE id NOT IN (SELECT swimmer_id FROM record)", "example": {"db_id": "swimming", "query": "SELECT name FROM swimmer WHERE id NOT IN (SELECT swimmer_id FROM record)", "query_toks": ["SELECT", "name", "FROM", "swimmer", "WHERE", "id", "NOT", "IN", "(", "SELECT", "swimmer_id", "FROM", "record", ")"], "query_toks_no_value": ["select", "name", "from", "swimmer", "where", "id", "not", "in", "(", "select", "swimmer_id", "from", "record", ")"], "question": "Find the names of the swimmers who have no record.", "question_toks": ["Find", "the", "names", "of", "the", "swimmers", "who", "have", "no", "record", "."], "guid": 3469}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | For each zip code, return the average mean temperature of August there.", "sql": "SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE \"8/%\" GROUP BY zip_code", "example": {"db_id": "bike_1", "query": "SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE \"8/%\" GROUP BY zip_code", "query_toks": ["SELECT", "zip_code", ",", "avg", "(", "mean_temperature_f", ")", "FROM", "weather", "WHERE", "date", "LIKE", "``", "8/", "%", "''", "GROUP", "BY", "zip_code"], "query_toks_no_value": ["select", "zip_code", ",", "avg", "(", "mean_temperature_f", ")", "from", "weather", "where", "date", "like", "value", "group", "by", "zip_code"], "question": "For each zip code, return the average mean temperature of August there.", "question_toks": ["For", "each", "zip", "code", ",", "return", "the", "average", "mean", "temperature", "of", "August", "there", "."], "guid": 3470}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | For each station, return its longitude and the average duration of trips that started from the station.", "sql": "SELECT T1.name ,  T1.long ,  avg(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id GROUP BY T2.start_station_id", "example": {"db_id": "bike_1", "query": "SELECT T1.name ,  T1.long ,  avg(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id GROUP BY T2.start_station_id", "query_toks": ["SELECT", "T1.name", ",", "T1.long", ",", "avg", "(", "T2.duration", ")", "FROM", "station", "AS", "T1", "JOIN", "trip", "AS", "T2", "ON", "T1.id", "=", "T2.start_station_id", "GROUP", "BY", "T2.start_station_id"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "t1", ".", "long", ",", "avg", "(", "t2", ".", "duration", ")", "from", "station", "as", "t1", "join", "trip", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "start_station_id", "group", "by", "t2", ".", "start_station_id"], "question": "For each station, return its longitude and the average duration of trips that started from the station.", "question_toks": ["For", "each", "station", ",", "return", "its", "longitude", "and", "the", "average", "duration", "of", "trips", "that", "started", "from", "the", "station", "."], "guid": 3471}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | What is average number of students enrolled in Florida colleges?", "sql": "SELECT avg(enr) FROM College WHERE state  =  'FL'", "example": {"db_id": "soccer_2", "query": "SELECT avg(enr) FROM College WHERE state  =  'FL'", "query_toks": ["SELECT", "avg", "(", "enr", ")", "FROM", "College", "WHERE", "state", "=", "'FL", "'"], "query_toks_no_value": ["select", "avg", "(", "enr", ")", "from", "college", "where", "state", "=", "value"], "question": "What is average number of students enrolled in Florida colleges?", "question_toks": ["What", "is", "average", "number", "of", "students", "enrolled", "in", "Florida", "colleges", "?"], "guid": 3472}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | Find the description of the club called \"Tennis Club\".", "sql": "SELECT clubdesc FROM club WHERE clubname  =  \"Tennis Club\"", "example": {"db_id": "club_1", "query": "SELECT clubdesc FROM club WHERE clubname  =  \"Tennis Club\"", "query_toks": ["SELECT", "clubdesc", "FROM", "club", "WHERE", "clubname", "=", "``", "Tennis", "Club", "''"], "query_toks_no_value": ["select", "clubdesc", "from", "club", "where", "clubname", "=", "value"], "question": "Find the description of the club called \"Tennis Club\".", "question_toks": ["Find", "the", "description", "of", "the", "club", "called", "``", "Tennis", "Club", "''", "."], "guid": 3473}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | Find the name of different colleges involved in the tryout in alphabetical order.", "sql": "SELECT DISTINCT cName FROM tryout ORDER BY cName", "example": {"db_id": "soccer_2", "query": "SELECT DISTINCT cName FROM tryout ORDER BY cName", "query_toks": ["SELECT", "DISTINCT", "cName", "FROM", "tryout", "ORDER", "BY", "cName"], "query_toks_no_value": ["select", "distinct", "cname", "from", "tryout", "order", "by", "cname"], "question": "Find the name of different colleges involved in the tryout in alphabetical order.", "question_toks": ["Find", "the", "name", "of", "different", "colleges", "involved", "in", "the", "tryout", "in", "alphabetical", "order", "."], "guid": 3474}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | What are the names of all races held after 2000 in Spain?", "sql": "SELECT DISTINCT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = \"Spain\" AND T1.year > 2000", "example": {"db_id": "formula_1", "query": "SELECT DISTINCT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = \"Spain\" AND T1.year > 2000", "query_toks": ["SELECT", "DISTINCT", "T1.name", "FROM", "races", "AS", "T1", "JOIN", "circuits", "AS", "T2", "ON", "T1.circuitid", "=", "T2.circuitid", "WHERE", "T2.country", "=", "``", "Spain", "''", "AND", "T1.year", ">", "2000"], "query_toks_no_value": ["select", "distinct", "t1", ".", "name", "from", "races", "as", "t1", "join", "circuits", "as", "t2", "on", "t1", ".", "circuitid", "=", "t2", ".", "circuitid", "where", "t2", ".", "country", "=", "value", "and", "t1", ".", "year", ">", "value"], "question": "What are the names of all races held after 2000 in Spain?", "question_toks": ["What", "are", "the", "names", "of", "all", "races", "held", "after", "2000", "in", "Spain", "?"], "guid": 3475}}
{"text": "players: player_id, first_name, last_name, hand, birth_date, country_code; matches: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank; rankings: ranking_date, ranking, player_id, ranking_points, tours | List the first and last name of all players in the order of birth date.", "sql": "SELECT first_name ,  last_name FROM players ORDER BY birth_date", "example": {"db_id": "wta_1", "query": "SELECT first_name ,  last_name FROM players ORDER BY birth_date", "query_toks": ["SELECT", "first_name", ",", "last_name", "FROM", "players", "ORDER", "BY", "birth_date"], "query_toks_no_value": ["select", "first_name", ",", "last_name", "from", "players", "order", "by", "birth_date"], "question": "List the first and last name of all players in the order of birth date.", "question_toks": ["List", "the", "first", "and", "last", "name", "of", "all", "players", "in", "the", "order", "of", "birth", "date", "."], "guid": 3476}}
{"text": "players: player_id, first_name, last_name, hand, birth_date, country_code; matches: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank; rankings: ranking_date, ranking, player_id, ranking_points, tours | How many players are from each country?", "sql": "SELECT count(*) ,  country_code FROM players GROUP BY country_code", "example": {"db_id": "wta_1", "query": "SELECT count(*) ,  country_code FROM players GROUP BY country_code", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "country_code", "FROM", "players", "GROUP", "BY", "country_code"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "country_code", "from", "players", "group", "by", "country_code"], "question": "How many players are from each country?", "question_toks": ["How", "many", "players", "are", "from", "each", "country", "?"], "guid": 3477}}
{"text": "mountain: Mountain_ID, Name, Height, Prominence, Range, Country; climber: Climber_ID, Name, Country, Time, Points, Mountain_ID | Show the range that has the most number of mountains.", "sql": "SELECT Range FROM mountain GROUP BY Range ORDER BY COUNT(*) DESC LIMIT 1", "example": {"db_id": "climbing", "query": "SELECT Range FROM mountain GROUP BY Range ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "Range", "FROM", "mountain", "GROUP", "BY", "Range", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "range", "from", "mountain", "group", "by", "range", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Show the range that has the most number of mountains.", "question_toks": ["Show", "the", "range", "that", "has", "the", "most", "number", "of", "mountains", "."], "guid": 3478}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | Who are the members of the club named \"Hopkins Student Enterprises\"? Show the last name.", "sql": "SELECT t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Hopkins Student Enterprises\"", "example": {"db_id": "club_1", "query": "SELECT t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Hopkins Student Enterprises\"", "query_toks": ["SELECT", "t3.lname", "FROM", "club", "AS", "t1", "JOIN", "member_of_club", "AS", "t2", "ON", "t1.clubid", "=", "t2.clubid", "JOIN", "student", "AS", "t3", "ON", "t2.stuid", "=", "t3.stuid", "WHERE", "t1.clubname", "=", "``", "Hopkins", "Student", "Enterprises", "''"], "query_toks_no_value": ["select", "t3", ".", "lname", "from", "club", "as", "t1", "join", "member_of_club", "as", "t2", "on", "t1", ".", "clubid", "=", "t2", ".", "clubid", "join", "student", "as", "t3", "on", "t2", ".", "stuid", "=", "t3", ".", "stuid", "where", "t1", ".", "clubname", "=", "value"], "question": "Who are the members of the club named \"Hopkins Student Enterprises\"? Show the last name.", "question_toks": ["Who", "are", "the", "members", "of", "the", "club", "named", "``", "Hopkins", "Student", "Enterprises", "''", "?", "Show", "the", "last", "name", "."], "guid": 3479}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | Find all the male members of club \"Hopkins Student Enterprises\". Show the first name and last name.", "sql": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Hopkins Student Enterprises\" AND t3.sex  =  \"M\"", "example": {"db_id": "club_1", "query": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Hopkins Student Enterprises\" AND t3.sex  =  \"M\"", "query_toks": ["SELECT", "t3.fname", ",", "t3.lname", "FROM", "club", "AS", "t1", "JOIN", "member_of_club", "AS", "t2", "ON", "t1.clubid", "=", "t2.clubid", "JOIN", "student", "AS", "t3", "ON", "t2.stuid", "=", "t3.stuid", "WHERE", "t1.clubname", "=", "``", "Hopkins", "Student", "Enterprises", "''", "AND", "t3.sex", "=", "``", "M", "''"], "query_toks_no_value": ["select", "t3", ".", "fname", ",", "t3", ".", "lname", "from", "club", "as", "t1", "join", "member_of_club", "as", "t2", "on", "t1", ".", "clubid", "=", "t2", ".", "clubid", "join", "student", "as", "t3", "on", "t2", ".", "stuid", "=", "t3", ".", "stuid", "where", "t1", ".", "clubname", "=", "value", "and", "t3", ".", "sex", "=", "value"], "question": "Find all the male members of club \"Hopkins Student Enterprises\". Show the first name and last name.", "question_toks": ["Find", "all", "the", "male", "members", "of", "club", "``", "Hopkins", "Student", "Enterprises", "''", ".", "Show", "the", "first", "name", "and", "last", "name", "."], "guid": 3480}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | Find the id, forename and number of races of all drivers who have at least participated in two races?", "sql": "SELECT T1.driverid ,  T1.forename ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  >=  2", "example": {"db_id": "formula_1", "query": "SELECT T1.driverid ,  T1.forename ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  >=  2", "query_toks": ["SELECT", "T1.driverid", ",", "T1.forename", ",", "count", "(", "*", ")", "FROM", "drivers", "AS", "T1", "JOIN", "results", "AS", "T2", "ON", "T1.driverid", "=", "T2.driverid", "JOIN", "races", "AS", "T3", "ON", "T2.raceid", "=", "T3.raceid", "GROUP", "BY", "T1.driverid", "HAVING", "count", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "t1", ".", "driverid", ",", "t1", ".", "forename", ",", "count", "(", "*", ")", "from", "drivers", "as", "t1", "join", "results", "as", "t2", "on", "t1", ".", "driverid", "=", "t2", ".", "driverid", "join", "races", "as", "t3", "on", "t2", ".", "raceid", "=", "t3", ".", "raceid", "group", "by", "t1", ".", "driverid", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "Find the id, forename and number of races of all drivers who have at least participated in two races?", "question_toks": ["Find", "the", "id", ",", "forename", "and", "number", "of", "races", "of", "all", "drivers", "who", "have", "at", "least", "participated", "in", "two", "races", "?"], "guid": 3481}}
{"text": "poker_player: Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings; people: People_ID, Nationality, Name, Birth_Date, Height | What is the average earnings of poker players with height higher than 200?", "sql": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200", "example": {"db_id": "poker_player", "query": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200", "query_toks": ["SELECT", "avg", "(", "T2.Earnings", ")", "FROM", "people", "AS", "T1", "JOIN", "poker_player", "AS", "T2", "ON", "T1.People_ID", "=", "T2.People_ID", "WHERE", "T1.Height", ">", "200"], "query_toks_no_value": ["select", "avg", "(", "t2", ".", "earnings", ")", "from", "people", "as", "t1", "join", "poker_player", "as", "t2", "on", "t1", ".", "people_id", "=", "t2", ".", "people_id", "where", "t1", ".", "height", ">", "value"], "question": "What is the average earnings of poker players with height higher than 200?", "question_toks": ["What", "is", "the", "average", "earnings", "of", "poker", "players", "with", "height", "higher", "than", "200", "?"], "guid": 3482}}
{"text": "poker_player: Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings; people: People_ID, Nationality, Name, Birth_Date, Height | What is the money rank of the poker player with the highest earnings?", "sql": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1", "example": {"db_id": "poker_player", "query": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1", "query_toks": ["SELECT", "Money_Rank", "FROM", "poker_player", "ORDER", "BY", "Earnings", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "money_rank", "from", "poker_player", "order", "by", "earnings", "desc", "limit", "value"], "question": "What is the money rank of the poker player with the highest earnings?", "question_toks": ["What", "is", "the", "money", "rank", "of", "the", "poker", "player", "with", "the", "highest", "earnings", "?"], "guid": 3483}}
{"text": "basketball_match: Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home; university: School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference | What are the public schools and what are their locations?", "sql": "SELECT school ,  LOCATION FROM university WHERE affiliation  =  'Public'", "example": {"db_id": "university_basketball", "query": "SELECT school ,  LOCATION FROM university WHERE affiliation  =  'Public'", "query_toks": ["SELECT", "school", ",", "LOCATION", "FROM", "university", "WHERE", "affiliation", "=", "'Public", "'"], "query_toks_no_value": ["select", "school", ",", "location", "from", "university", "where", "affiliation", "=", "value"], "question": "What are the public schools and what are their locations?", "question_toks": ["What", "are", "the", "public", "schools", "and", "what", "are", "their", "locations", "?"], "guid": 3484}}
{"text": "country: Country_id, Country_name, Capital, Official_native_language; team: Team_id, Name; match_season: Season, Player, Position, Country, Team, Draft_Pick_Number, Draft_Class, College; player: Player_ID, Player, Years_Played, Total_WL, Singles_WL, Doubles_WL, Team | Show all team names.", "sql": "SELECT Name FROM Team", "example": {"db_id": "match_season", "query": "SELECT Name FROM Team", "query_toks": ["SELECT", "Name", "FROM", "Team"], "query_toks_no_value": ["select", "name", "from", "team"], "question": "Show all team names.", "question_toks": ["Show", "all", "team", "names", "."], "guid": 3485}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | How many states that have some college students playing in the mid position but not in the goalie position.", "sql": "SELECT COUNT(*) FROM (SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid' EXCEPT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie')", "example": {"db_id": "soccer_2", "query": "SELECT COUNT(*) FROM (SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid' EXCEPT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie')", "query_toks": ["SELECT", "COUNT", "(", "*", ")", "FROM", "(", "SELECT", "T1.state", "FROM", "college", "AS", "T1", "JOIN", "tryout", "AS", "T2", "ON", "T1.cName", "=", "T2.cName", "WHERE", "T2.pPos", "=", "'mid", "'", "EXCEPT", "SELECT", "T1.state", "FROM", "college", "AS", "T1", "JOIN", "tryout", "AS", "T2", "ON", "T1.cName", "=", "T2.cName", "WHERE", "T2.pPos", "=", "'goalie", "'", ")"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "(", "select", "t1", ".", "state", "from", "college", "as", "t1", "join", "tryout", "as", "t2", "on", "t1", ".", "cname", "=", "t2", ".", "cname", "where", "t2", ".", "ppos", "=", "value", "except", "select", "t1", ".", "state", "from", "college", "as", "t1", "join", "tryout", "as", "t2", "on", "t1", ".", "cname", "=", "t2", ".", "cname", "where", "t2", ".", "ppos", "=", "value", ")"], "question": "How many states that have some college students playing in the mid position but not in the goalie position.", "question_toks": ["How", "many", "states", "that", "have", "some", "college", "students", "playing", "in", "the", "mid", "position", "but", "not", "in", "the", "goalie", "position", "."], "guid": 3486}}
{"text": "gymnast: Gymnast_ID, Floor_Exercise_Points, Pommel_Horse_Points, Rings_Points, Vault_Points, Parallel_Bars_Points, Horizontal_Bar_Points, Total_Points; people: People_ID, Name, Age, Height, Hometown | What are the distinct hometowns of gymnasts with total points more than 57.5?", "sql": "SELECT DISTINCT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID WHERE T1.Total_Points  >  57.5", "example": {"db_id": "gymnast", "query": "SELECT DISTINCT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID WHERE T1.Total_Points  >  57.5", "query_toks": ["SELECT", "DISTINCT", "T2.Hometown", "FROM", "gymnast", "AS", "T1", "JOIN", "people", "AS", "T2", "ON", "T1.Gymnast_ID", "=", "T2.People_ID", "WHERE", "T1.Total_Points", ">", "57.5"], "query_toks_no_value": ["select", "distinct", "t2", ".", "hometown", "from", "gymnast", "as", "t1", "join", "people", "as", "t2", "on", "t1", ".", "gymnast_id", "=", "t2", ".", "people_id", "where", "t1", ".", "total_points", ">", "value"], "question": "What are the distinct hometowns of gymnasts with total points more than 57.5?", "question_toks": ["What", "are", "the", "distinct", "hometowns", "of", "gymnasts", "with", "total", "points", "more", "than", "57.5", "?"], "guid": 3487}}
{"text": "mountain: Mountain_ID, Name, Height, Prominence, Range, Country; climber: Climber_ID, Name, Country, Time, Points, Mountain_ID | Show the height of the mountain climbed by the climber with the maximum points.", "sql": "SELECT T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID ORDER BY T1.Points DESC LIMIT 1", "example": {"db_id": "climbing", "query": "SELECT T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID ORDER BY T1.Points DESC LIMIT 1", "query_toks": ["SELECT", "T2.Height", "FROM", "climber", "AS", "T1", "JOIN", "mountain", "AS", "T2", "ON", "T1.Mountain_ID", "=", "T2.Mountain_ID", "ORDER", "BY", "T1.Points", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "height", "from", "climber", "as", "t1", "join", "mountain", "as", "t2", "on", "t1", ".", "mountain_id", "=", "t2", ".", "mountain_id", "order", "by", "t1", ".", "points", "desc", "limit", "value"], "question": "Show the height of the mountain climbed by the climber with the maximum points.", "question_toks": ["Show", "the", "height", "of", "the", "mountain", "climbed", "by", "the", "climber", "with", "the", "maximum", "points", "."], "guid": 3488}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | What are the ids and durations of the trips with the top 3 durations?", "sql": "SELECT id ,  duration FROM trip ORDER BY duration DESC LIMIT 3", "example": {"db_id": "bike_1", "query": "SELECT id ,  duration FROM trip ORDER BY duration DESC LIMIT 3", "query_toks": ["SELECT", "id", ",", "duration", "FROM", "trip", "ORDER", "BY", "duration", "DESC", "LIMIT", "3"], "query_toks_no_value": ["select", "id", ",", "duration", "from", "trip", "order", "by", "duration", "desc", "limit", "value"], "question": "What are the ids and durations of the trips with the top 3 durations?", "question_toks": ["What", "are", "the", "ids", "and", "durations", "of", "the", "trips", "with", "the", "top", "3", "durations", "?"], "guid": 3489}}
{"text": "race: Race_ID, Name, Class, Date, Track_ID; track: Track_ID, Name, Location, Seating, Year_Opened | Return the name, location, and seating of the track that was opened in the most recent year.", "sql": "SELECT name ,  LOCATION ,  seating FROM track ORDER BY year_opened DESC LIMIT 1", "example": {"db_id": "race_track", "query": "SELECT name ,  LOCATION ,  seating FROM track ORDER BY year_opened DESC LIMIT 1", "query_toks": ["SELECT", "name", ",", "LOCATION", ",", "seating", "FROM", "track", "ORDER", "BY", "year_opened", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "name", ",", "location", ",", "seating", "from", "track", "order", "by", "year_opened", "desc", "limit", "value"], "question": "Return the name, location, and seating of the track that was opened in the most recent year.", "question_toks": ["Return", "the", "name", ",", "location", ",", "and", "seating", "of", "the", "track", "that", "was", "opened", "in", "the", "most", "recent", "year", "."], "guid": 3490}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | Who are the players that have names containing the letter a?", "sql": "SELECT DISTINCT pName FROM Player WHERE pName LIKE '%a%'", "example": {"db_id": "soccer_2", "query": "SELECT DISTINCT pName FROM Player WHERE pName LIKE '%a%'", "query_toks": ["SELECT", "DISTINCT", "pName", "FROM", "Player", "WHERE", "pName", "LIKE", "'", "%", "a", "%", "'"], "query_toks_no_value": ["select", "distinct", "pname", "from", "player", "where", "pname", "like", "value"], "question": "Who are the players that have names containing the letter a?", "question_toks": ["Who", "are", "the", "players", "that", "have", "names", "containing", "the", "letter", "a", "?"], "guid": 3491}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | List the name of the colleges whose enrollment is greater 18000 sorted by the college's name.", "sql": "SELECT cName FROM College WHERE enr  >  18000 ORDER BY cName", "example": {"db_id": "soccer_2", "query": "SELECT cName FROM College WHERE enr  >  18000 ORDER BY cName", "query_toks": ["SELECT", "cName", "FROM", "College", "WHERE", "enr", ">", "18000", "ORDER", "BY", "cName"], "query_toks_no_value": ["select", "cname", "from", "college", "where", "enr", ">", "value", "order", "by", "cname"], "question": "List the name of the colleges whose enrollment is greater 18000 sorted by the college's name.", "question_toks": ["List", "the", "name", "of", "the", "colleges", "whose", "enrollment", "is", "greater", "18000", "sorted", "by", "the", "college", "'s", "name", "."], "guid": 3492}}
{"text": "swimmer: ID, name, Nationality, meter_100, meter_200, meter_300, meter_400, meter_500, meter_600, meter_700; stadium: ID, name, Capacity, City, Country, Opening_year; event: ID, Name, Stadium_ID, Year; record: ID, Result, Swimmer_ID, Event_ID | List countries that have more than one swimmer.", "sql": "SELECT nationality ,  count(*) FROM swimmer GROUP BY nationality HAVING count(*)  >  1", "example": {"db_id": "swimming", "query": "SELECT nationality ,  count(*) FROM swimmer GROUP BY nationality HAVING count(*)  >  1", "query_toks": ["SELECT", "nationality", ",", "count", "(", "*", ")", "FROM", "swimmer", "GROUP", "BY", "nationality", "HAVING", "count", "(", "*", ")", ">", "1"], "query_toks_no_value": ["select", "nationality", ",", "count", "(", "*", ")", "from", "swimmer", "group", "by", "nationality", "having", "count", "(", "*", ")", ">", "value"], "question": "List countries that have more than one swimmer.", "question_toks": ["List", "countries", "that", "have", "more", "than", "one", "swimmer", "."], "guid": 3493}}
{"text": "mountain: Mountain_ID, Name, Height, Prominence, Range, Country; climber: Climber_ID, Name, Country, Time, Points, Mountain_ID | Return the name of the mountain with the greatest height.", "sql": "SELECT Name FROM mountain ORDER BY Height DESC LIMIT 1", "example": {"db_id": "climbing", "query": "SELECT Name FROM mountain ORDER BY Height DESC LIMIT 1", "query_toks": ["SELECT", "Name", "FROM", "mountain", "ORDER", "BY", "Height", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "name", "from", "mountain", "order", "by", "height", "desc", "limit", "value"], "question": "Return the name of the mountain with the greatest height.", "question_toks": ["Return", "the", "name", "of", "the", "mountain", "with", "the", "greatest", "height", "."], "guid": 3494}}
{"text": "player: Player_ID, Sponsor_name, Player_name, Gender, Residence, Occupation, Votes, Rank; club: Club_ID, Club_name, Region, Start_year; coach: Coach_ID, Coach_name, Gender, Club_ID, Rank; player_coach: Player_ID, Coach_ID, Starting_year; match_result: Rank, Club_ID, Gold, Big_Silver, Small_Silver, Bronze, Points | Show the names of players and names of their coaches in descending order of the votes of players.", "sql": "SELECT T3.Player_name ,  T2.coach_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID  =  T2.Coach_ID JOIN player AS T3 ON T1.Player_ID  =  T3.Player_ID ORDER BY T3.Votes DESC", "example": {"db_id": "riding_club", "query": "SELECT T3.Player_name ,  T2.coach_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID  =  T2.Coach_ID JOIN player AS T3 ON T1.Player_ID  =  T3.Player_ID ORDER BY T3.Votes DESC", "query_toks": ["SELECT", "T3.Player_name", ",", "T2.coach_name", "FROM", "player_coach", "AS", "T1", "JOIN", "coach", "AS", "T2", "ON", "T1.Coach_ID", "=", "T2.Coach_ID", "JOIN", "player", "AS", "T3", "ON", "T1.Player_ID", "=", "T3.Player_ID", "ORDER", "BY", "T3.Votes", "DESC"], "query_toks_no_value": ["select", "t3", ".", "player_name", ",", "t2", ".", "coach_name", "from", "player_coach", "as", "t1", "join", "coach", "as", "t2", "on", "t1", ".", "coach_id", "=", "t2", ".", "coach_id", "join", "player", "as", "t3", "on", "t1", ".", "player_id", "=", "t3", ".", "player_id", "order", "by", "t3", ".", "votes", "desc"], "question": "Show the names of players and names of their coaches in descending order of the votes of players.", "question_toks": ["Show", "the", "names", "of", "players", "and", "names", "of", "their", "coaches", "in", "descending", "order", "of", "the", "votes", "of", "players", "."], "guid": 3495}}
{"text": "body_builder: Body_Builder_ID, People_ID, Snatch, Clean_Jerk, Total; people: People_ID, Name, Height, Weight, Birth_Date, Birth_Place | What is the average total score of body builders with height bigger than 200?", "sql": "SELECT avg(T1.Total) FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Height  >  200", "example": {"db_id": "body_builder", "query": "SELECT avg(T1.Total) FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Height  >  200", "query_toks": ["SELECT", "avg", "(", "T1.Total", ")", "FROM", "body_builder", "AS", "T1", "JOIN", "people", "AS", "T2", "ON", "T1.People_ID", "=", "T2.People_ID", "WHERE", "T2.Height", ">", "200"], "query_toks_no_value": ["select", "avg", "(", "t1", ".", "total", ")", "from", "body_builder", "as", "t1", "join", "people", "as", "t2", "on", "t1", ".", "people_id", "=", "t2", ".", "people_id", "where", "t2", ".", "height", ">", "value"], "question": "What is the average total score of body builders with height bigger than 200?", "question_toks": ["What", "is", "the", "average", "total", "score", "of", "body", "builders", "with", "height", "bigger", "than", "200", "?"], "guid": 3496}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | Count the number of clubs for which the student named \"Eric Tai\" is a member.", "sql": "SELECT count(DISTINCT t1.clubname) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Eric\" AND t3.lname  =  \"Tai\"", "example": {"db_id": "club_1", "query": "SELECT count(DISTINCT t1.clubname) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Eric\" AND t3.lname  =  \"Tai\"", "query_toks": ["SELECT", "count", "(", "DISTINCT", "t1.clubname", ")", "FROM", "club", "AS", "t1", "JOIN", "member_of_club", "AS", "t2", "ON", "t1.clubid", "=", "t2.clubid", "JOIN", "student", "AS", "t3", "ON", "t2.stuid", "=", "t3.stuid", "WHERE", "t3.fname", "=", "``", "Eric", "''", "AND", "t3.lname", "=", "``", "Tai", "''"], "query_toks_no_value": ["select", "count", "(", "distinct", "t1", ".", "clubname", ")", "from", "club", "as", "t1", "join", "member_of_club", "as", "t2", "on", "t1", ".", "clubid", "=", "t2", ".", "clubid", "join", "student", "as", "t3", "on", "t2", ".", "stuid", "=", "t3", ".", "stuid", "where", "t3", ".", "fname", "=", "value", "and", "t3", ".", "lname", "=", "value"], "question": "Count the number of clubs for which the student named \"Eric Tai\" is a member.", "question_toks": ["Count", "the", "number", "of", "clubs", "for", "which", "the", "student", "named", "``", "Eric", "Tai", "''", "is", "a", "member", "."], "guid": 3497}}
{"text": "country: Country_id, Country_name, Capital, Official_native_language; team: Team_id, Name; match_season: Season, Player, Position, Country, Team, Draft_Pick_Number, Draft_Class, College; player: Player_ID, Player, Years_Played, Total_WL, Singles_WL, Doubles_WL, Team | Show the season, the player, and the name of the country that player belongs to.", "sql": "SELECT T2.Season ,  T2.Player ,  T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country", "example": {"db_id": "match_season", "query": "SELECT T2.Season ,  T2.Player ,  T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country", "query_toks": ["SELECT", "T2.Season", ",", "T2.Player", ",", "T1.Country_name", "FROM", "country", "AS", "T1", "JOIN", "match_season", "AS", "T2", "ON", "T1.Country_id", "=", "T2.Country"], "query_toks_no_value": ["select", "t2", ".", "season", ",", "t2", ".", "player", ",", "t1", ".", "country_name", "from", "country", "as", "t1", "join", "match_season", "as", "t2", "on", "t1", ".", "country_id", "=", "t2", ".", "country"], "question": "Show the season, the player, and the name of the country that player belongs to.", "question_toks": ["Show", "the", "season", ",", "the", "player", ",", "and", "the", "name", "of", "the", "country", "that", "player", "belongs", "to", "."], "guid": 3498}}
{"text": "gymnast: Gymnast_ID, Floor_Exercise_Points, Pommel_Horse_Points, Rings_Points, Vault_Points, Parallel_Bars_Points, Horizontal_Bar_Points, Total_Points; people: People_ID, Name, Age, Height, Hometown | Return the average age across all gymnasts.", "sql": "SELECT avg(T2.Age) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID", "example": {"db_id": "gymnast", "query": "SELECT avg(T2.Age) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID", "query_toks": ["SELECT", "avg", "(", "T2.Age", ")", "FROM", "gymnast", "AS", "T1", "JOIN", "people", "AS", "T2", "ON", "T1.Gymnast_ID", "=", "T2.People_ID"], "query_toks_no_value": ["select", "avg", "(", "t2", ".", "age", ")", "from", "gymnast", "as", "t1", "join", "people", "as", "t2", "on", "t1", ".", "gymnast_id", "=", "t2", ".", "people_id"], "question": "Return the average age across all gymnasts.", "question_toks": ["Return", "the", "average", "age", "across", "all", "gymnasts", "."], "guid": 3499}}
{"text": "mountain: Mountain_ID, Name, Height, Prominence, Range, Country; climber: Climber_ID, Name, Country, Time, Points, Mountain_ID | How many distinct countries are the climbers from?", "sql": "SELECT COUNT(DISTINCT Country) FROM climber", "example": {"db_id": "climbing", "query": "SELECT COUNT(DISTINCT Country) FROM climber", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "Country", ")", "FROM", "climber"], "query_toks_no_value": ["select", "count", "(", "distinct", "country", ")", "from", "climber"], "question": "How many distinct countries are the climbers from?", "question_toks": ["How", "many", "distinct", "countries", "are", "the", "climbers", "from", "?"], "guid": 3500}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | For each position, what is the maximum number of  hours for students who spent more than 1000 hours training?", "sql": "SELECT max(T1.HS) ,  pPos FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T1.HS  >  1000 GROUP BY T2.pPos", "example": {"db_id": "soccer_2", "query": "SELECT max(T1.HS) ,  pPos FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T1.HS  >  1000 GROUP BY T2.pPos", "query_toks": ["SELECT", "max", "(", "T1.HS", ")", ",", "pPos", "FROM", "player", "AS", "T1", "JOIN", "tryout", "AS", "T2", "ON", "T1.pID", "=", "T2.pID", "WHERE", "T1.HS", ">", "1000", "GROUP", "BY", "T2.pPos"], "query_toks_no_value": ["select", "max", "(", "t1", ".", "hs", ")", ",", "ppos", "from", "player", "as", "t1", "join", "tryout", "as", "t2", "on", "t1", ".", "pid", "=", "t2", ".", "pid", "where", "t1", ".", "hs", ">", "value", "group", "by", "t2", ".", "ppos"], "question": "For each position, what is the maximum number of  hours for students who spent more than 1000 hours training?", "question_toks": ["For", "each", "position", ",", "what", "is", "the", "maximum", "number", "of", "hours", "for", "students", "who", "spent", "more", "than", "1000", "hours", "training", "?"], "guid": 3501}}
{"text": "players: player_id, first_name, last_name, hand, birth_date, country_code; matches: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank; rankings: ranking_date, ranking, player_id, ranking_points, tours | What is the name of the winner with the most rank points who participated in the Australian Open tournament?", "sql": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1", "example": {"db_id": "wta_1", "query": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1", "query_toks": ["SELECT", "winner_name", "FROM", "matches", "WHERE", "tourney_name", "=", "'Australian", "Open", "'", "ORDER", "BY", "winner_rank_points", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "winner_name", "from", "matches", "where", "tourney_name", "=", "value", "order", "by", "winner_rank_points", "desc", "limit", "value"], "question": "What is the name of the winner with the most rank points who participated in the Australian Open tournament?", "question_toks": ["What", "is", "the", "name", "of", "the", "winner", "with", "the", "most", "rank", "points", "who", "participated", "in", "the", "Australian", "Open", "tournament", "?"], "guid": 3502}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | Find the distinct driver id of all drivers that have a longer stop duration than some drivers in the race whose id is 841?", "sql": "SELECT DISTINCT driverid ,  STOP FROM pitstops WHERE duration  >  (SELECT min(duration) FROM pitstops WHERE raceid  =  841)", "example": {"db_id": "formula_1", "query": "SELECT DISTINCT driverid ,  STOP FROM pitstops WHERE duration  >  (SELECT min(duration) FROM pitstops WHERE raceid  =  841)", "query_toks": ["SELECT", "DISTINCT", "driverid", ",", "STOP", "FROM", "pitstops", "WHERE", "duration", ">", "(", "SELECT", "min", "(", "duration", ")", "FROM", "pitstops", "WHERE", "raceid", "=", "841", ")"], "query_toks_no_value": ["select", "distinct", "driverid", ",", "stop", "from", "pitstops", "where", "duration", ">", "(", "select", "min", "(", "duration", ")", "from", "pitstops", "where", "raceid", "=", "value", ")"], "question": "Find the distinct driver id of all drivers that have a longer stop duration than some drivers in the race whose id is 841?", "question_toks": ["Find", "the", "distinct", "driver", "id", "of", "all", "drivers", "that", "have", "a", "longer", "stop", "duration", "than", "some", "drivers", "in", "the", "race", "whose", "id", "is", "841", "?"], "guid": 3503}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | What are the days that had the smallest temperature range, and what was that range?", "sql": "SELECT date ,  max_temperature_f - min_temperature_f FROM weather ORDER BY max_temperature_f - min_temperature_f LIMIT 1", "example": {"db_id": "bike_1", "query": "SELECT date ,  max_temperature_f - min_temperature_f FROM weather ORDER BY max_temperature_f - min_temperature_f LIMIT 1", "query_toks": ["SELECT", "date", ",", "max_temperature_f", "-", "min_temperature_f", "FROM", "weather", "ORDER", "BY", "max_temperature_f", "-", "min_temperature_f", "LIMIT", "1"], "query_toks_no_value": ["select", "date", ",", "max_temperature_f", "-", "min_temperature_f", "from", "weather", "order", "by", "max_temperature_f", "-", "min_temperature_f", "limit", "value"], "question": "What are the days that had the smallest temperature range, and what was that range?", "question_toks": ["What", "are", "the", "days", "that", "had", "the", "smallest", "temperature", "range", ",", "and", "what", "was", "that", "range", "?"], "guid": 3504}}
{"text": "mountain: Mountain_ID, Name, Height, Prominence, Range, Country; climber: Climber_ID, Name, Country, Time, Points, Mountain_ID | What are the countries that have both mountains that are higher than 5600 and lower than 5200?", "sql": "SELECT Country FROM mountain WHERE Height  >  5600 INTERSECT SELECT Country FROM mountain WHERE Height  <  5200", "example": {"db_id": "climbing", "query": "SELECT Country FROM mountain WHERE Height  >  5600 INTERSECT SELECT Country FROM mountain WHERE Height  <  5200", "query_toks": ["SELECT", "Country", "FROM", "mountain", "WHERE", "Height", ">", "5600", "INTERSECT", "SELECT", "Country", "FROM", "mountain", "WHERE", "Height", "<", "5200"], "query_toks_no_value": ["select", "country", "from", "mountain", "where", "height", ">", "value", "intersect", "select", "country", "from", "mountain", "where", "height", "<", "value"], "question": "What are the countries that have both mountains that are higher than 5600 and lower than 5200?", "question_toks": ["What", "are", "the", "countries", "that", "have", "both", "mountains", "that", "are", "higher", "than", "5600", "and", "lower", "than", "5200", "?"], "guid": 3505}}
{"text": "country: Country_id, Country_name, Capital, Official_native_language; team: Team_id, Name; match_season: Season, Player, Position, Country, Team, Draft_Pick_Number, Draft_Class, College; player: Player_ID, Player, Years_Played, Total_WL, Singles_WL, Doubles_WL, Team | Return the official native languages of countries who have players from Maryland or Duke colleges.", "sql": "SELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.College  =  \"Maryland\" OR T2.College  =  \"Duke\"", "example": {"db_id": "match_season", "query": "SELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.College  =  \"Maryland\" OR T2.College  =  \"Duke\"", "query_toks": ["SELECT", "T1.Official_native_language", "FROM", "country", "AS", "T1", "JOIN", "match_season", "AS", "T2", "ON", "T1.Country_id", "=", "T2.Country", "WHERE", "T2.College", "=", "``", "Maryland", "''", "OR", "T2.College", "=", "``", "Duke", "''"], "query_toks_no_value": ["select", "t1", ".", "official_native_language", "from", "country", "as", "t1", "join", "match_season", "as", "t2", "on", "t1", ".", "country_id", "=", "t2", ".", "country", "where", "t2", ".", "college", "=", "value", "or", "t2", ".", "college", "=", "value"], "question": "Return the official native languages of countries who have players from Maryland or Duke colleges.", "question_toks": ["Return", "the", "official", "native", "languages", "of", "countries", "who", "have", "players", "from", "Maryland", "or", "Duke", "colleges", "."], "guid": 3506}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | Count the number of trips that did not end in San Francisco city.", "sql": "SELECT count(*) FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id WHERE T2.city !=  \"San Francisco\"", "example": {"db_id": "bike_1", "query": "SELECT count(*) FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id WHERE T2.city !=  \"San Francisco\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "trip", "AS", "T1", "JOIN", "station", "AS", "T2", "ON", "T1.end_station_id", "=", "T2.id", "WHERE", "T2.city", "!", "=", "``", "San", "Francisco", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "trip", "as", "t1", "join", "station", "as", "t2", "on", "t1", ".", "end_station_id", "=", "t2", ".", "id", "where", "t2", ".", "city", "!", "=", "value"], "question": "Count the number of trips that did not end in San Francisco city.", "question_toks": ["Count", "the", "number", "of", "trips", "that", "did", "not", "end", "in", "San", "Francisco", "city", "."], "guid": 3507}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | What are the forenames and surnames of all unique drivers who had a lap time of less than 93000 milliseconds?", "sql": "SELECT DISTINCT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds < 93000", "example": {"db_id": "formula_1", "query": "SELECT DISTINCT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds < 93000", "query_toks": ["SELECT", "DISTINCT", "T1.forename", ",", "T1.surname", "FROM", "drivers", "AS", "T1", "JOIN", "laptimes", "AS", "T2", "ON", "T1.driverid", "=", "T2.driverid", "WHERE", "T2.milliseconds", "<", "93000"], "query_toks_no_value": ["select", "distinct", "t1", ".", "forename", ",", "t1", ".", "surname", "from", "drivers", "as", "t1", "join", "laptimes", "as", "t2", "on", "t1", ".", "driverid", "=", "t2", ".", "driverid", "where", "t2", ".", "milliseconds", "<", "value"], "question": "What are the forenames and surnames of all unique drivers who had a lap time of less than 93000 milliseconds?", "question_toks": ["What", "are", "the", "forenames", "and", "surnames", "of", "all", "unique", "drivers", "who", "had", "a", "lap", "time", "of", "less", "than", "93000", "milliseconds", "?"], "guid": 3508}}
{"text": "basketball_match: Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home; university: School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference | Find the team names of the universities whose enrollments are smaller than the average enrollment size.", "sql": "SELECT t2.team_name FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE enrollment  <  (SELECT avg(enrollment) FROM university)", "example": {"db_id": "university_basketball", "query": "SELECT t2.team_name FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE enrollment  <  (SELECT avg(enrollment) FROM university)", "query_toks": ["SELECT", "t2.team_name", "FROM", "university", "AS", "t1", "JOIN", "basketball_match", "AS", "t2", "ON", "t1.school_id", "=", "t2.school_id", "WHERE", "enrollment", "<", "(", "SELECT", "avg", "(", "enrollment", ")", "FROM", "university", ")"], "query_toks_no_value": ["select", "t2", ".", "team_name", "from", "university", "as", "t1", "join", "basketball_match", "as", "t2", "on", "t1", ".", "school_id", "=", "t2", ".", "school_id", "where", "enrollment", "<", "(", "select", "avg", "(", "enrollment", ")", "from", "university", ")"], "question": "Find the team names of the universities whose enrollments are smaller than the average enrollment size.", "question_toks": ["Find", "the", "team", "names", "of", "the", "universities", "whose", "enrollments", "are", "smaller", "than", "the", "average", "enrollment", "size", "."], "guid": 3509}}
{"text": "basketball_match: Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home; university: School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference | Return the maximum enrollment across all schools.", "sql": "SELECT max(Enrollment) FROM university", "example": {"db_id": "university_basketball", "query": "SELECT max(Enrollment) FROM university", "query_toks": ["SELECT", "max", "(", "Enrollment", ")", "FROM", "university"], "query_toks_no_value": ["select", "max", "(", "enrollment", ")", "from", "university"], "question": "Return the maximum enrollment across all schools.", "question_toks": ["Return", "the", "maximum", "enrollment", "across", "all", "schools", "."], "guid": 3510}}
{"text": "country: Country_id, Country_name, Capital, Official_native_language; team: Team_id, Name; match_season: Season, Player, Position, Country, Team, Draft_Pick_Number, Draft_Class, College; player: Player_ID, Player, Years_Played, Total_WL, Singles_WL, Doubles_WL, Team | Who are the players from UCLA?", "sql": "SELECT Player FROM match_season WHERE College  =  \"UCLA\"", "example": {"db_id": "match_season", "query": "SELECT Player FROM match_season WHERE College  =  \"UCLA\"", "query_toks": ["SELECT", "Player", "FROM", "match_season", "WHERE", "College", "=", "``", "UCLA", "''"], "query_toks_no_value": ["select", "player", "from", "match_season", "where", "college", "=", "value"], "question": "Who are the players from UCLA?", "question_toks": ["Who", "are", "the", "players", "from", "UCLA", "?"], "guid": 3511}}
{"text": "club: Club_ID, name, Region, Start_year; club_rank: Rank, Club_ID, Gold, Silver, Bronze, Total; player: Player_ID, name, Position, Club_ID, Apps, Tries, Goals, Points; competition: Competition_ID, Year, Competition_type, Country; competition_result: Competition_ID, Club_ID_1, Club_ID_2, Score | Find the countries that have never participated in any competition with Friendly type.", "sql": "SELECT country FROM competition EXCEPT SELECT country FROM competition WHERE competition_type  =  'Friendly'", "example": {"db_id": "sports_competition", "query": "SELECT country FROM competition EXCEPT SELECT country FROM competition WHERE competition_type  =  'Friendly'", "query_toks": ["SELECT", "country", "FROM", "competition", "EXCEPT", "SELECT", "country", "FROM", "competition", "WHERE", "competition_type", "=", "'Friendly", "'"], "query_toks_no_value": ["select", "country", "from", "competition", "except", "select", "country", "from", "competition", "where", "competition_type", "=", "value"], "question": "Find the countries that have never participated in any competition with Friendly type.", "question_toks": ["Find", "the", "countries", "that", "have", "never", "participated", "in", "any", "competition", "with", "Friendly", "type", "."], "guid": 3512}}
{"text": "basketball_match: Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home; university: School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference | Find the total student enrollment for different affiliation type schools.", "sql": "SELECT sum(enrollment) ,  affiliation FROM university GROUP BY affiliation", "example": {"db_id": "university_basketball", "query": "SELECT sum(enrollment) ,  affiliation FROM university GROUP BY affiliation", "query_toks": ["SELECT", "sum", "(", "enrollment", ")", ",", "affiliation", "FROM", "university", "GROUP", "BY", "affiliation"], "query_toks_no_value": ["select", "sum", "(", "enrollment", ")", ",", "affiliation", "from", "university", "group", "by", "affiliation"], "question": "Find the total student enrollment for different affiliation type schools.", "question_toks": ["Find", "the", "total", "student", "enrollment", "for", "different", "affiliation", "type", "schools", "."], "guid": 3513}}
{"text": "poker_player: Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings; people: People_ID, Nationality, Name, Birth_Date, Height | What are the final tables made and best finishes for all poker players?", "sql": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player", "example": {"db_id": "poker_player", "query": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player", "query_toks": ["SELECT", "Final_Table_Made", ",", "Best_Finish", "FROM", "poker_player"], "query_toks_no_value": ["select", "final_table_made", ",", "best_finish", "from", "poker_player"], "question": "What are the final tables made and best finishes for all poker players?", "question_toks": ["What", "are", "the", "final", "tables", "made", "and", "best", "finishes", "for", "all", "poker", "players", "?"], "guid": 3514}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | How many different cities have these stations?", "sql": "SELECT count(DISTINCT city) FROM station", "example": {"db_id": "bike_1", "query": "SELECT count(DISTINCT city) FROM station", "query_toks": ["SELECT", "count", "(", "DISTINCT", "city", ")", "FROM", "station"], "query_toks_no_value": ["select", "count", "(", "distinct", "city", ")", "from", "station"], "question": "How many different cities have these stations?", "question_toks": ["How", "many", "different", "cities", "have", "these", "stations", "?"], "guid": 3515}}
{"text": "player: Player_ID, Sponsor_name, Player_name, Gender, Residence, Occupation, Votes, Rank; club: Club_ID, Club_name, Region, Start_year; coach: Coach_ID, Coach_name, Gender, Club_ID, Rank; player_coach: Player_ID, Coach_ID, Starting_year; match_result: Rank, Club_ID, Gold, Big_Silver, Small_Silver, Bronze, Points | Show the residences that have at least two players.", "sql": "SELECT Residence FROM player GROUP BY Residence HAVING COUNT(*)  >=  2", "example": {"db_id": "riding_club", "query": "SELECT Residence FROM player GROUP BY Residence HAVING COUNT(*)  >=  2", "query_toks": ["SELECT", "Residence", "FROM", "player", "GROUP", "BY", "Residence", "HAVING", "COUNT", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "residence", "from", "player", "group", "by", "residence", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "Show the residences that have at least two players.", "question_toks": ["Show", "the", "residences", "that", "have", "at", "least", "two", "players", "."], "guid": 3516}}
{"text": "club: Club_ID, name, Region, Start_year; club_rank: Rank, Club_ID, Gold, Silver, Bronze, Total; player: Player_ID, name, Position, Club_ID, Apps, Tries, Goals, Points; competition: Competition_ID, Year, Competition_type, Country; competition_result: Competition_ID, Club_ID_1, Club_ID_2, Score | What is the average number of points for players from the \"AIB\" club?", "sql": "SELECT avg(T2.Points) FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID WHERE T1.name  =  \"AIB\"", "example": {"db_id": "sports_competition", "query": "SELECT avg(T2.Points) FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID WHERE T1.name  =  \"AIB\"", "query_toks": ["SELECT", "avg", "(", "T2.Points", ")", "FROM", "club", "AS", "T1", "JOIN", "player", "AS", "T2", "ON", "T1.Club_ID", "=", "T2.Club_ID", "WHERE", "T1.name", "=", "``", "AIB", "''"], "query_toks_no_value": ["select", "avg", "(", "t2", ".", "points", ")", "from", "club", "as", "t1", "join", "player", "as", "t2", "on", "t1", ".", "club_id", "=", "t2", ".", "club_id", "where", "t1", ".", "name", "=", "value"], "question": "What is the average number of points for players from the \"AIB\" club?", "question_toks": ["What", "is", "the", "average", "number", "of", "points", "for", "players", "from", "the", "``", "AIB", "''", "club", "?"], "guid": 3517}}
{"text": "country: Country_id, Country_name, Capital, Official_native_language; team: Team_id, Name; match_season: Season, Player, Position, Country, Team, Draft_Pick_Number, Draft_Class, College; player: Player_ID, Player, Years_Played, Total_WL, Singles_WL, Doubles_WL, Team | How many distinct teams are involved in match seasons?", "sql": "SELECT count(DISTINCT Team) FROM match_season", "example": {"db_id": "match_season", "query": "SELECT count(DISTINCT Team) FROM match_season", "query_toks": ["SELECT", "count", "(", "DISTINCT", "Team", ")", "FROM", "match_season"], "query_toks_no_value": ["select", "count", "(", "distinct", "team", ")", "from", "match_season"], "question": "How many distinct teams are involved in match seasons?", "question_toks": ["How", "many", "distinct", "teams", "are", "involved", "in", "match", "seasons", "?"], "guid": 3518}}
{"text": "basketball_match: Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home; university: School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference | Return the name of the team and the acc during the regular season for the school that was founded the earliest.", "sql": "SELECT t2.team_name ,  t2.ACC_Regular_Season FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t1.founded LIMIT 1", "example": {"db_id": "university_basketball", "query": "SELECT t2.team_name ,  t2.ACC_Regular_Season FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t1.founded LIMIT 1", "query_toks": ["SELECT", "t2.team_name", ",", "t2.ACC_Regular_Season", "FROM", "university", "AS", "t1", "JOIN", "basketball_match", "AS", "t2", "ON", "t1.school_id", "=", "t2.school_id", "ORDER", "BY", "t1.founded", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "team_name", ",", "t2", ".", "acc_regular_season", "from", "university", "as", "t1", "join", "basketball_match", "as", "t2", "on", "t1", ".", "school_id", "=", "t2", ".", "school_id", "order", "by", "t1", ".", "founded", "limit", "value"], "question": "Return the name of the team and the acc during the regular season for the school that was founded the earliest.", "question_toks": ["Return", "the", "name", "of", "the", "team", "and", "the", "acc", "during", "the", "regular", "season", "for", "the", "school", "that", "was", "founded", "the", "earliest", "."], "guid": 3519}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | List the names of all distinct races in reversed  lexicographic order?", "sql": "SELECT DISTINCT name FROM races ORDER BY name DESC", "example": {"db_id": "formula_1", "query": "SELECT DISTINCT name FROM races ORDER BY name DESC", "query_toks": ["SELECT", "DISTINCT", "name", "FROM", "races", "ORDER", "BY", "name", "DESC"], "query_toks_no_value": ["select", "distinct", "name", "from", "races", "order", "by", "name", "desc"], "question": "List the names of all distinct races in reversed  lexicographic order?", "question_toks": ["List", "the", "names", "of", "all", "distinct", "races", "in", "reversed", "lexicographic", "order", "?"], "guid": 3520}}
{"text": "college: College_ID, Name, Leader_Name, College_Location; member: Member_ID, Name, Country, College_ID; round: Round_ID, Member_ID, Decoration_Theme, Rank_in_Round | Show the names of members and the decoration themes they have.", "sql": "SELECT T1.Name ,  T2.Decoration_Theme FROM member AS T1 JOIN round AS T2 ON T1.Member_ID  =  T2.Member_ID", "example": {"db_id": "decoration_competition", "query": "SELECT T1.Name ,  T2.Decoration_Theme FROM member AS T1 JOIN round AS T2 ON T1.Member_ID  =  T2.Member_ID", "query_toks": ["SELECT", "T1.Name", ",", "T2.Decoration_Theme", "FROM", "member", "AS", "T1", "JOIN", "round", "AS", "T2", "ON", "T1.Member_ID", "=", "T2.Member_ID"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "t2", ".", "decoration_theme", "from", "member", "as", "t1", "join", "round", "as", "t2", "on", "t1", ".", "member_id", "=", "t2", ".", "member_id"], "question": "Show the names of members and the decoration themes they have.", "question_toks": ["Show", "the", "names", "of", "members", "and", "the", "decoration", "themes", "they", "have", "."], "guid": 3521}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | Find the id for the trips that lasted at least as long as the average duration of trips in zip code 94103.", "sql": "SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  94103)", "example": {"db_id": "bike_1", "query": "SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  94103)", "query_toks": ["SELECT", "id", "FROM", "trip", "WHERE", "duration", ">", "=", "(", "SELECT", "avg", "(", "duration", ")", "FROM", "trip", "WHERE", "zip_code", "=", "94103", ")"], "query_toks_no_value": ["select", "id", "from", "trip", "where", "duration", ">", "=", "(", "select", "avg", "(", "duration", ")", "from", "trip", "where", "zip_code", "=", "value", ")"], "question": "Find the id for the trips that lasted at least as long as the average duration of trips in zip code 94103.", "question_toks": ["Find", "the", "id", "for", "the", "trips", "that", "lasted", "at", "least", "as", "long", "as", "the", "average", "duration", "of", "trips", "in", "zip", "code", "94103", "."], "guid": 3522}}
{"text": "country: Country_id, Country_name, Capital, Official_native_language; team: Team_id, Name; match_season: Season, Player, Position, Country, Team, Draft_Pick_Number, Draft_Class, College; player: Player_ID, Player, Years_Played, Total_WL, Singles_WL, Doubles_WL, Team | Count the number of different official languages corresponding to countries that players who play Defender are from.", "sql": "SELECT count(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\"", "example": {"db_id": "match_season", "query": "SELECT count(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\"", "query_toks": ["SELECT", "count", "(", "DISTINCT", "T1.Official_native_language", ")", "FROM", "country", "AS", "T1", "JOIN", "match_season", "AS", "T2", "ON", "T1.Country_id", "=", "T2.Country", "WHERE", "T2.Position", "=", "``", "Defender", "''"], "query_toks_no_value": ["select", "count", "(", "distinct", "t1", ".", "official_native_language", ")", "from", "country", "as", "t1", "join", "match_season", "as", "t2", "on", "t1", ".", "country_id", "=", "t2", ".", "country", "where", "t2", ".", "position", "=", "value"], "question": "Count the number of different official languages corresponding to countries that players who play Defender are from.", "question_toks": ["Count", "the", "number", "of", "different", "official", "languages", "corresponding", "to", "countries", "that", "players", "who", "play", "Defender", "are", "from", "."], "guid": 3523}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | How many clubs does \"Linda Smith\" belong to?", "sql": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Linda\" AND t3.lname  =  \"Smith\"", "example": {"db_id": "club_1", "query": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Linda\" AND t3.lname  =  \"Smith\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "club", "AS", "t1", "JOIN", "member_of_club", "AS", "t2", "ON", "t1.clubid", "=", "t2.clubid", "JOIN", "student", "AS", "t3", "ON", "t2.stuid", "=", "t3.stuid", "WHERE", "t3.fname", "=", "``", "Linda", "''", "AND", "t3.lname", "=", "``", "Smith", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "club", "as", "t1", "join", "member_of_club", "as", "t2", "on", "t1", ".", "clubid", "=", "t2", ".", "clubid", "join", "student", "as", "t3", "on", "t2", ".", "stuid", "=", "t3", ".", "stuid", "where", "t3", ".", "fname", "=", "value", "and", "t3", ".", "lname", "=", "value"], "question": "How many clubs does \"Linda Smith\" belong to?", "question_toks": ["How", "many", "clubs", "does", "``", "Linda", "Smith", "''", "belong", "to", "?"], "guid": 3524}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | What is the name of school that has the smallest enrollment in each state?", "sql": "SELECT cName ,  state ,  min(enr) FROM college GROUP BY state", "example": {"db_id": "soccer_2", "query": "SELECT cName ,  state ,  min(enr) FROM college GROUP BY state", "query_toks": ["SELECT", "cName", ",", "state", ",", "min", "(", "enr", ")", "FROM", "college", "GROUP", "BY", "state"], "query_toks_no_value": ["select", "cname", ",", "state", ",", "min", "(", "enr", ")", "from", "college", "group", "by", "state"], "question": "What is the name of school that has the smallest enrollment in each state?", "question_toks": ["What", "is", "the", "name", "of", "school", "that", "has", "the", "smallest", "enrollment", "in", "each", "state", "?"], "guid": 3525}}
{"text": "wrestler: Wrestler_ID, Name, Reign, Days_held, Location, Event; Elimination: Elimination_ID, Wrestler_ID, Team, Eliminated_By, Elimination_Move, Time | List the names of wrestlers and the teams in elimination in descending order of days held.", "sql": "SELECT T2.Name ,  T1.Team FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID ORDER BY T2.Days_held DESC", "example": {"db_id": "wrestler", "query": "SELECT T2.Name ,  T1.Team FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID ORDER BY T2.Days_held DESC", "query_toks": ["SELECT", "T2.Name", ",", "T1.Team", "FROM", "elimination", "AS", "T1", "JOIN", "wrestler", "AS", "T2", "ON", "T1.Wrestler_ID", "=", "T2.Wrestler_ID", "ORDER", "BY", "T2.Days_held", "DESC"], "query_toks_no_value": ["select", "t2", ".", "name", ",", "t1", ".", "team", "from", "elimination", "as", "t1", "join", "wrestler", "as", "t2", "on", "t1", ".", "wrestler_id", "=", "t2", ".", "wrestler_id", "order", "by", "t2", ".", "days_held", "desc"], "question": "List the names of wrestlers and the teams in elimination in descending order of days held.", "question_toks": ["List", "the", "names", "of", "wrestlers", "and", "the", "teams", "in", "elimination", "in", "descending", "order", "of", "days", "held", "."], "guid": 3526}}
{"text": "basketball_match: Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home; university: School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference | What are the names of teams from universities that have a below average enrollment?", "sql": "SELECT t2.team_name FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE enrollment  <  (SELECT avg(enrollment) FROM university)", "example": {"db_id": "university_basketball", "query": "SELECT t2.team_name FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE enrollment  <  (SELECT avg(enrollment) FROM university)", "query_toks": ["SELECT", "t2.team_name", "FROM", "university", "AS", "t1", "JOIN", "basketball_match", "AS", "t2", "ON", "t1.school_id", "=", "t2.school_id", "WHERE", "enrollment", "<", "(", "SELECT", "avg", "(", "enrollment", ")", "FROM", "university", ")"], "query_toks_no_value": ["select", "t2", ".", "team_name", "from", "university", "as", "t1", "join", "basketball_match", "as", "t2", "on", "t1", ".", "school_id", "=", "t2", ".", "school_id", "where", "enrollment", "<", "(", "select", "avg", "(", "enrollment", ")", "from", "university", ")"], "question": "What are the names of teams from universities that have a below average enrollment?", "question_toks": ["What", "are", "the", "names", "of", "teams", "from", "universities", "that", "have", "a", "below", "average", "enrollment", "?"], "guid": 3527}}
{"text": "body_builder: Body_Builder_ID, People_ID, Snatch, Clean_Jerk, Total; people: People_ID, Name, Height, Weight, Birth_Date, Birth_Place | What are the heights of body builders with total score smaller than 315?", "sql": "SELECT T2.Height FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Total  <  315", "example": {"db_id": "body_builder", "query": "SELECT T2.Height FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Total  <  315", "query_toks": ["SELECT", "T2.Height", "FROM", "body_builder", "AS", "T1", "JOIN", "people", "AS", "T2", "ON", "T1.People_ID", "=", "T2.People_ID", "WHERE", "T1.Total", "<", "315"], "query_toks_no_value": ["select", "t2", ".", "height", "from", "body_builder", "as", "t1", "join", "people", "as", "t2", "on", "t1", ".", "people_id", "=", "t2", ".", "people_id", "where", "t1", ".", "total", "<", "value"], "question": "What are the heights of body builders with total score smaller than 315?", "question_toks": ["What", "are", "the", "heights", "of", "body", "builders", "with", "total", "score", "smaller", "than", "315", "?"], "guid": 3528}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | What are the unique names of all race held between 2014 and 2017?", "sql": "SELECT DISTINCT name FROM races WHERE YEAR BETWEEN 2014 AND 2017", "example": {"db_id": "formula_1", "query": "SELECT DISTINCT name FROM races WHERE YEAR BETWEEN 2014 AND 2017", "query_toks": ["SELECT", "DISTINCT", "name", "FROM", "races", "WHERE", "YEAR", "BETWEEN", "2014", "AND", "2017"], "query_toks_no_value": ["select", "distinct", "name", "from", "races", "where", "year", "between", "value", "and", "value"], "question": "What are the unique names of all race held between 2014 and 2017?", "question_toks": ["What", "are", "the", "unique", "names", "of", "all", "race", "held", "between", "2014", "and", "2017", "?"], "guid": 3529}}
{"text": "race: Race_ID, Name, Class, Date, Track_ID; track: Track_ID, Name, Location, Seating, Year_Opened | List the race class with at least two races.", "sql": "SELECT CLASS FROM race GROUP BY CLASS HAVING count(*)  >=  2", "example": {"db_id": "race_track", "query": "SELECT CLASS FROM race GROUP BY CLASS HAVING count(*)  >=  2", "query_toks": ["SELECT", "CLASS", "FROM", "race", "GROUP", "BY", "CLASS", "HAVING", "count", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "class", "from", "race", "group", "by", "class", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "List the race class with at least two races.", "question_toks": ["List", "the", "race", "class", "with", "at", "least", "two", "races", "."], "guid": 3530}}
{"text": "poker_player: Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings; people: People_ID, Nationality, Name, Birth_Date, Height | List the final tables made and the best finishes of poker players.", "sql": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player", "example": {"db_id": "poker_player", "query": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player", "query_toks": ["SELECT", "Final_Table_Made", ",", "Best_Finish", "FROM", "poker_player"], "query_toks_no_value": ["select", "final_table_made", ",", "best_finish", "from", "poker_player"], "question": "List the final tables made and the best finishes of poker players.", "question_toks": ["List", "the", "final", "tables", "made", "and", "the", "best", "finishes", "of", "poker", "players", "."], "guid": 3531}}
{"text": "mountain: Mountain_ID, Name, Height, Prominence, Range, Country; climber: Climber_ID, Name, Country, Time, Points, Mountain_ID | What are the different ranges of the 3 mountains with the highest prominence?", "sql": "SELECT DISTINCT Range FROM mountain ORDER BY Prominence DESC LIMIT 3", "example": {"db_id": "climbing", "query": "SELECT DISTINCT Range FROM mountain ORDER BY Prominence DESC LIMIT 3", "query_toks": ["SELECT", "DISTINCT", "Range", "FROM", "mountain", "ORDER", "BY", "Prominence", "DESC", "LIMIT", "3"], "query_toks_no_value": ["select", "distinct", "range", "from", "mountain", "order", "by", "prominence", "desc", "limit", "value"], "question": "What are the different ranges of the 3 mountains with the highest prominence?", "question_toks": ["What", "are", "the", "different", "ranges", "of", "the", "3", "mountains", "with", "the", "highest", "prominence", "?"], "guid": 3532}}
{"text": "club: Club_ID, name, Region, Start_year; club_rank: Rank, Club_ID, Gold, Silver, Bronze, Total; player: Player_ID, name, Position, Club_ID, Apps, Tries, Goals, Points; competition: Competition_ID, Year, Competition_type, Country; competition_result: Competition_ID, Club_ID_1, Club_ID_2, Score | What are the maximum and minimum number of silver medals for all the clubs?", "sql": "SELECT max(Silver) ,  min(Silver) FROM club_rank", "example": {"db_id": "sports_competition", "query": "SELECT max(Silver) ,  min(Silver) FROM club_rank", "query_toks": ["SELECT", "max", "(", "Silver", ")", ",", "min", "(", "Silver", ")", "FROM", "club_rank"], "query_toks_no_value": ["select", "max", "(", "silver", ")", ",", "min", "(", "silver", ")", "from", "club_rank"], "question": "What are the maximum and minimum number of silver medals for all the clubs?", "question_toks": ["What", "are", "the", "maximum", "and", "minimum", "number", "of", "silver", "medals", "for", "all", "the", "clubs", "?"], "guid": 3533}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | Find the id and surname of the driver who participated the most number of races?", "sql": "SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "formula_1", "query": "SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.driverid", ",", "T1.surname", "FROM", "drivers", "AS", "T1", "JOIN", "results", "AS", "T2", "ON", "T1.driverid", "=", "T2.driverid", "JOIN", "races", "AS", "T3", "ON", "T2.raceid", "=", "T3.raceid", "GROUP", "BY", "T1.driverid", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "driverid", ",", "t1", ".", "surname", "from", "drivers", "as", "t1", "join", "results", "as", "t2", "on", "t1", ".", "driverid", "=", "t2", ".", "driverid", "join", "races", "as", "t3", "on", "t2", ".", "raceid", "=", "t3", ".", "raceid", "group", "by", "t1", ".", "driverid", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Find the id and surname of the driver who participated the most number of races?", "question_toks": ["Find", "the", "id", "and", "surname", "of", "the", "driver", "who", "participated", "the", "most", "number", "of", "races", "?"], "guid": 3534}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | Compute the average age of the members in the club \"Tennis Club\".", "sql": "SELECT avg(t3.age) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Tennis Club\"", "example": {"db_id": "club_1", "query": "SELECT avg(t3.age) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Tennis Club\"", "query_toks": ["SELECT", "avg", "(", "t3.age", ")", "FROM", "club", "AS", "t1", "JOIN", "member_of_club", "AS", "t2", "ON", "t1.clubid", "=", "t2.clubid", "JOIN", "student", "AS", "t3", "ON", "t2.stuid", "=", "t3.stuid", "WHERE", "t1.clubname", "=", "``", "Tennis", "Club", "''"], "query_toks_no_value": ["select", "avg", "(", "t3", ".", "age", ")", "from", "club", "as", "t1", "join", "member_of_club", "as", "t2", "on", "t1", ".", "clubid", "=", "t2", ".", "clubid", "join", "student", "as", "t3", "on", "t2", ".", "stuid", "=", "t3", ".", "stuid", "where", "t1", ".", "clubname", "=", "value"], "question": "Compute the average age of the members in the club \"Tennis Club\".", "question_toks": ["Compute", "the", "average", "age", "of", "the", "members", "in", "the", "club", "``", "Tennis", "Club", "''", "."], "guid": 3535}}
{"text": "wrestler: Wrestler_ID, Name, Reign, Days_held, Location, Event; Elimination: Elimination_ID, Wrestler_ID, Team, Eliminated_By, Elimination_Move, Time | Return the name of the wrestler who had the lowest number of days held.", "sql": "SELECT Name FROM wrestler ORDER BY Days_held ASC LIMIT 1", "example": {"db_id": "wrestler", "query": "SELECT Name FROM wrestler ORDER BY Days_held ASC LIMIT 1", "query_toks": ["SELECT", "Name", "FROM", "wrestler", "ORDER", "BY", "Days_held", "ASC", "LIMIT", "1"], "query_toks_no_value": ["select", "name", "from", "wrestler", "order", "by", "days_held", "asc", "limit", "value"], "question": "Return the name of the wrestler who had the lowest number of days held.", "question_toks": ["Return", "the", "name", "of", "the", "wrestler", "who", "had", "the", "lowest", "number", "of", "days", "held", "."], "guid": 3536}}
{"text": "body_builder: Body_Builder_ID, People_ID, Snatch, Clean_Jerk, Total; people: People_ID, Name, Height, Weight, Birth_Date, Birth_Place | List the total scores of body builders in ascending order.", "sql": "SELECT Total FROM body_builder ORDER BY Total ASC", "example": {"db_id": "body_builder", "query": "SELECT Total FROM body_builder ORDER BY Total ASC", "query_toks": ["SELECT", "Total", "FROM", "body_builder", "ORDER", "BY", "Total", "ASC"], "query_toks_no_value": ["select", "total", "from", "body_builder", "order", "by", "total", "asc"], "question": "List the total scores of body builders in ascending order.", "question_toks": ["List", "the", "total", "scores", "of", "body", "builders", "in", "ascending", "order", "."], "guid": 3537}}
{"text": "race: Race_ID, Name, Class, Date, Track_ID; track: Track_ID, Name, Location, Seating, Year_Opened | Give the different locations of tracks.", "sql": "SELECT DISTINCT LOCATION FROM track", "example": {"db_id": "race_track", "query": "SELECT DISTINCT LOCATION FROM track", "query_toks": ["SELECT", "DISTINCT", "LOCATION", "FROM", "track"], "query_toks_no_value": ["select", "distinct", "location", "from", "track"], "question": "Give the different locations of tracks.", "question_toks": ["Give", "the", "different", "locations", "of", "tracks", "."], "guid": 3538}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | What is the location of the club named \"Tennis Club\"?", "sql": "SELECT clublocation FROM club WHERE clubname  =  \"Tennis Club\"", "example": {"db_id": "club_1", "query": "SELECT clublocation FROM club WHERE clubname  =  \"Tennis Club\"", "query_toks": ["SELECT", "clublocation", "FROM", "club", "WHERE", "clubname", "=", "``", "Tennis", "Club", "''"], "query_toks_no_value": ["select", "clublocation", "from", "club", "where", "clubname", "=", "value"], "question": "What is the location of the club named \"Tennis Club\"?", "question_toks": ["What", "is", "the", "location", "of", "the", "club", "named", "``", "Tennis", "Club", "''", "?"], "guid": 3539}}
{"text": "wrestler: Wrestler_ID, Name, Reign, Days_held, Location, Event; Elimination: Elimination_ID, Wrestler_ID, Team, Eliminated_By, Elimination_Move, Time | How many wrestlers are there?", "sql": "SELECT count(*) FROM wrestler", "example": {"db_id": "wrestler", "query": "SELECT count(*) FROM wrestler", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "wrestler"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "wrestler"], "question": "How many wrestlers are there?", "question_toks": ["How", "many", "wrestlers", "are", "there", "?"], "guid": 3540}}
{"text": "college: College_ID, Name, Leader_Name, College_Location; member: Member_ID, Name, Country, College_ID; round: Round_ID, Member_ID, Decoration_Theme, Rank_in_Round | Show the leader names and locations of colleges.", "sql": "SELECT Leader_Name ,  College_Location FROM college", "example": {"db_id": "decoration_competition", "query": "SELECT Leader_Name ,  College_Location FROM college", "query_toks": ["SELECT", "Leader_Name", ",", "College_Location", "FROM", "college"], "query_toks_no_value": ["select", "leader_name", ",", "college_location", "from", "college"], "question": "Show the leader names and locations of colleges.", "question_toks": ["Show", "the", "leader", "names", "and", "locations", "of", "colleges", "."], "guid": 3541}}
{"text": "swimmer: ID, name, Nationality, meter_100, meter_200, meter_300, meter_400, meter_500, meter_600, meter_700; stadium: ID, name, Capacity, City, Country, Opening_year; event: ID, Name, Stadium_ID, Year; record: ID, Result, Swimmer_ID, Event_ID | Find the names of stadiums that the most swimmers have been to.", "sql": "SELECT t3.name FROM record AS t1 JOIN event AS t2 ON t1.event_id  =  t2.id JOIN stadium AS t3 ON t3.id  =  t2.stadium_id GROUP BY t2.stadium_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "swimming", "query": "SELECT t3.name FROM record AS t1 JOIN event AS t2 ON t1.event_id  =  t2.id JOIN stadium AS t3 ON t3.id  =  t2.stadium_id GROUP BY t2.stadium_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "t3.name", "FROM", "record", "AS", "t1", "JOIN", "event", "AS", "t2", "ON", "t1.event_id", "=", "t2.id", "JOIN", "stadium", "AS", "t3", "ON", "t3.id", "=", "t2.stadium_id", "GROUP", "BY", "t2.stadium_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t3", ".", "name", "from", "record", "as", "t1", "join", "event", "as", "t2", "on", "t1", ".", "event_id", "=", "t2", ".", "id", "join", "stadium", "as", "t3", "on", "t3", ".", "id", "=", "t2", ".", "stadium_id", "group", "by", "t2", ".", "stadium_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Find the names of stadiums that the most swimmers have been to.", "question_toks": ["Find", "the", "names", "of", "stadiums", "that", "the", "most", "swimmers", "have", "been", "to", "."], "guid": 3542}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | Find the name of all students who were in the tryout sorted in alphabetic order.", "sql": "SELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID ORDER BY T1.pName", "example": {"db_id": "soccer_2", "query": "SELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID ORDER BY T1.pName", "query_toks": ["SELECT", "T1.pName", "FROM", "player", "AS", "T1", "JOIN", "tryout", "AS", "T2", "ON", "T1.pID", "=", "T2.pID", "ORDER", "BY", "T1.pName"], "query_toks_no_value": ["select", "t1", ".", "pname", "from", "player", "as", "t1", "join", "tryout", "as", "t2", "on", "t1", ".", "pid", "=", "t2", ".", "pid", "order", "by", "t1", ".", "pname"], "question": "Find the name of all students who were in the tryout sorted in alphabetic order.", "question_toks": ["Find", "the", "name", "of", "all", "students", "who", "were", "in", "the", "tryout", "sorted", "in", "alphabetic", "order", "."], "guid": 3543}}
{"text": "race: Race_ID, Name, Class, Date, Track_ID; track: Track_ID, Name, Location, Seating, Year_Opened | Return the minimum, maximum, and average seating across all tracks.", "sql": "SELECT min(seating) ,  max(seating) ,  avg(seating) FROM track", "example": {"db_id": "race_track", "query": "SELECT min(seating) ,  max(seating) ,  avg(seating) FROM track", "query_toks": ["SELECT", "min", "(", "seating", ")", ",", "max", "(", "seating", ")", ",", "avg", "(", "seating", ")", "FROM", "track"], "query_toks_no_value": ["select", "min", "(", "seating", ")", ",", "max", "(", "seating", ")", ",", "avg", "(", "seating", ")", "from", "track"], "question": "Return the minimum, maximum, and average seating across all tracks.", "question_toks": ["Return", "the", "minimum", ",", "maximum", ",", "and", "average", "seating", "across", "all", "tracks", "."], "guid": 3544}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | What are names of stations that have average bike availability above 10 and are not located in San Jose city?", "sql": "SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available)  >  10 EXCEPT SELECT name FROM station WHERE city  =  \"San Jose\"", "example": {"db_id": "bike_1", "query": "SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available)  >  10 EXCEPT SELECT name FROM station WHERE city  =  \"San Jose\"", "query_toks": ["SELECT", "T1.name", "FROM", "station", "AS", "T1", "JOIN", "status", "AS", "T2", "ON", "T1.id", "=", "T2.station_id", "GROUP", "BY", "T2.station_id", "HAVING", "avg", "(", "bikes_available", ")", ">", "10", "EXCEPT", "SELECT", "name", "FROM", "station", "WHERE", "city", "=", "``", "San", "Jose", "''"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "station", "as", "t1", "join", "status", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "station_id", "group", "by", "t2", ".", "station_id", "having", "avg", "(", "bikes_available", ")", ">", "value", "except", "select", "name", "from", "station", "where", "city", "=", "value"], "question": "What are names of stations that have average bike availability above 10 and are not located in San Jose city?", "question_toks": ["What", "are", "names", "of", "stations", "that", "have", "average", "bike", "availability", "above", "10", "and", "are", "not", "located", "in", "San", "Jose", "city", "?"], "guid": 3545}}
{"text": "basketball_match: Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home; university: School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference | Find the founded year of the newest non public school.", "sql": "SELECT founded FROM university WHERE affiliation != 'Public' ORDER BY founded DESC LIMIT 1", "example": {"db_id": "university_basketball", "query": "SELECT founded FROM university WHERE affiliation != 'Public' ORDER BY founded DESC LIMIT 1", "query_toks": ["SELECT", "founded", "FROM", "university", "WHERE", "affiliation", "!", "=", "'Public", "'", "ORDER", "BY", "founded", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "founded", "from", "university", "where", "affiliation", "!", "=", "value", "order", "by", "founded", "desc", "limit", "value"], "question": "Find the founded year of the newest non public school.", "question_toks": ["Find", "the", "founded", "year", "of", "the", "newest", "non", "public", "school", "."], "guid": 3546}}
{"text": "country: Country_id, Country_name, Capital, Official_native_language; team: Team_id, Name; match_season: Season, Player, Position, Country, Team, Draft_Pick_Number, Draft_Class, College; player: Player_ID, Player, Years_Played, Total_WL, Singles_WL, Doubles_WL, Team | How many players played each position?", "sql": "SELECT POSITION ,  COUNT(*) FROM match_season GROUP BY POSITION", "example": {"db_id": "match_season", "query": "SELECT POSITION ,  COUNT(*) FROM match_season GROUP BY POSITION", "query_toks": ["SELECT", "POSITION", ",", "COUNT", "(", "*", ")", "FROM", "match_season", "GROUP", "BY", "POSITION"], "query_toks_no_value": ["select", "position", ",", "count", "(", "*", ")", "from", "match_season", "group", "by", "position"], "question": "How many players played each position?", "question_toks": ["How", "many", "players", "played", "each", "position", "?"], "guid": 3547}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | What are the names of all students who successfully tried out for the position of striker?", "sql": "SELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes' AND T2.pPos  =  'striker'", "example": {"db_id": "soccer_2", "query": "SELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes' AND T2.pPos  =  'striker'", "query_toks": ["SELECT", "T1.pName", "FROM", "player", "AS", "T1", "JOIN", "tryout", "AS", "T2", "ON", "T1.pID", "=", "T2.pID", "WHERE", "T2.decision", "=", "'yes", "'", "AND", "T2.pPos", "=", "'striker", "'"], "query_toks_no_value": ["select", "t1", ".", "pname", "from", "player", "as", "t1", "join", "tryout", "as", "t2", "on", "t1", ".", "pid", "=", "t2", ".", "pid", "where", "t2", ".", "decision", "=", "value", "and", "t2", ".", "ppos", "=", "value"], "question": "What are the names of all students who successfully tried out for the position of striker?", "question_toks": ["What", "are", "the", "names", "of", "all", "students", "who", "successfully", "tried", "out", "for", "the", "position", "of", "striker", "?"], "guid": 3548}}
{"text": "gymnast: Gymnast_ID, Floor_Exercise_Points, Pommel_Horse_Points, Rings_Points, Vault_Points, Parallel_Bars_Points, Horizontal_Bar_Points, Total_Points; people: People_ID, Name, Age, Height, Hometown | List the distinct hometowns that are not associated with any gymnast.", "sql": "SELECT DISTINCT Hometown FROM people EXCEPT SELECT DISTINCT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID", "example": {"db_id": "gymnast", "query": "SELECT DISTINCT Hometown FROM people EXCEPT SELECT DISTINCT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID", "query_toks": ["SELECT", "DISTINCT", "Hometown", "FROM", "people", "EXCEPT", "SELECT", "DISTINCT", "T2.Hometown", "FROM", "gymnast", "AS", "T1", "JOIN", "people", "AS", "T2", "ON", "T1.Gymnast_ID", "=", "T2.People_ID"], "query_toks_no_value": ["select", "distinct", "hometown", "from", "people", "except", "select", "distinct", "t2", ".", "hometown", "from", "gymnast", "as", "t1", "join", "people", "as", "t2", "on", "t1", ".", "gymnast_id", "=", "t2", ".", "people_id"], "question": "List the distinct hometowns that are not associated with any gymnast.", "question_toks": ["List", "the", "distinct", "hometowns", "that", "are", "not", "associated", "with", "any", "gymnast", "."], "guid": 3549}}
{"text": "poker_player: Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings; people: People_ID, Nationality, Name, Birth_Date, Height | Return the names of poker players sorted by their earnings descending.", "sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC", "example": {"db_id": "poker_player", "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC", "query_toks": ["SELECT", "T1.Name", "FROM", "people", "AS", "T1", "JOIN", "poker_player", "AS", "T2", "ON", "T1.People_ID", "=", "T2.People_ID", "ORDER", "BY", "T2.Earnings", "DESC"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "people", "as", "t1", "join", "poker_player", "as", "t2", "on", "t1", ".", "people_id", "=", "t2", ".", "people_id", "order", "by", "t2", ".", "earnings", "desc"], "question": "Return the names of poker players sorted by their earnings descending.", "question_toks": ["Return", "the", "names", "of", "poker", "players", "sorted", "by", "their", "earnings", "descending", "."], "guid": 3550}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | What is the name of the school with smallest enrollment size per state?", "sql": "SELECT cName ,  state ,  min(enr) FROM college GROUP BY state", "example": {"db_id": "soccer_2", "query": "SELECT cName ,  state ,  min(enr) FROM college GROUP BY state", "query_toks": ["SELECT", "cName", ",", "state", ",", "min", "(", "enr", ")", "FROM", "college", "GROUP", "BY", "state"], "query_toks_no_value": ["select", "cname", ",", "state", ",", "min", "(", "enr", ")", "from", "college", "group", "by", "state"], "question": "What is the name of the school with smallest enrollment size per state?", "question_toks": ["What", "is", "the", "name", "of", "the", "school", "with", "smallest", "enrollment", "size", "per", "state", "?"], "guid": 3551}}
{"text": "mountain: Mountain_ID, Name, Height, Prominence, Range, Country; climber: Climber_ID, Name, Country, Time, Points, Mountain_ID | List the names of climbers in descending order of points.", "sql": "SELECT Name FROM climber ORDER BY Points DESC", "example": {"db_id": "climbing", "query": "SELECT Name FROM climber ORDER BY Points DESC", "query_toks": ["SELECT", "Name", "FROM", "climber", "ORDER", "BY", "Points", "DESC"], "query_toks_no_value": ["select", "name", "from", "climber", "order", "by", "points", "desc"], "question": "List the names of climbers in descending order of points.", "question_toks": ["List", "the", "names", "of", "climbers", "in", "descending", "order", "of", "points", "."], "guid": 3552}}
{"text": "college: College_ID, Name, Leader_Name, College_Location; member: Member_ID, Name, Country, College_ID; round: Round_ID, Member_ID, Decoration_Theme, Rank_in_Round | What are the names and countries of members?", "sql": "SELECT Name ,  Country FROM member", "example": {"db_id": "decoration_competition", "query": "SELECT Name ,  Country FROM member", "query_toks": ["SELECT", "Name", ",", "Country", "FROM", "member"], "query_toks_no_value": ["select", "name", ",", "country", "from", "member"], "question": "What are the names and countries of members?", "question_toks": ["What", "are", "the", "names", "and", "countries", "of", "members", "?"], "guid": 3553}}
{"text": "wrestler: Wrestler_ID, Name, Reign, Days_held, Location, Event; Elimination: Elimination_ID, Wrestler_ID, Team, Eliminated_By, Elimination_Move, Time | Which reign is the most common among wrestlers?", "sql": "SELECT Reign FROM wrestler GROUP BY Reign ORDER BY COUNT(*) DESC LIMIT 1", "example": {"db_id": "wrestler", "query": "SELECT Reign FROM wrestler GROUP BY Reign ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "Reign", "FROM", "wrestler", "GROUP", "BY", "Reign", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "reign", "from", "wrestler", "group", "by", "reign", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which reign is the most common among wrestlers?", "question_toks": ["Which", "reign", "is", "the", "most", "common", "among", "wrestlers", "?"], "guid": 3554}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | How many states have smaller colleges than average?", "sql": "SELECT count(DISTINCT state) FROM college WHERE enr  <  (SELECT avg(enr) FROM college)", "example": {"db_id": "soccer_2", "query": "SELECT count(DISTINCT state) FROM college WHERE enr  <  (SELECT avg(enr) FROM college)", "query_toks": ["SELECT", "count", "(", "DISTINCT", "state", ")", "FROM", "college", "WHERE", "enr", "<", "(", "SELECT", "avg", "(", "enr", ")", "FROM", "college", ")"], "query_toks_no_value": ["select", "count", "(", "distinct", "state", ")", "from", "college", "where", "enr", "<", "(", "select", "avg", "(", "enr", ")", "from", "college", ")"], "question": "How many states have smaller colleges than average?", "question_toks": ["How", "many", "states", "have", "smaller", "colleges", "than", "average", "?"], "guid": 3555}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | What is the id of the bike that traveled the most in 94002?", "sql": "SELECT bike_id FROM trip WHERE zip_code  =  94002 GROUP BY bike_id ORDER BY COUNT(*) DESC LIMIT 1", "example": {"db_id": "bike_1", "query": "SELECT bike_id FROM trip WHERE zip_code  =  94002 GROUP BY bike_id ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "bike_id", "FROM", "trip", "WHERE", "zip_code", "=", "94002", "GROUP", "BY", "bike_id", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "bike_id", "from", "trip", "where", "zip_code", "=", "value", "group", "by", "bike_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the id of the bike that traveled the most in 94002?", "question_toks": ["What", "is", "the", "id", "of", "the", "bike", "that", "traveled", "the", "most", "in", "94002", "?"], "guid": 3556}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | What are the names of all stations with a latitude smaller than 37.5?", "sql": "SELECT name FROM station WHERE lat  <  37.5", "example": {"db_id": "bike_1", "query": "SELECT name FROM station WHERE lat  <  37.5", "query_toks": ["SELECT", "name", "FROM", "station", "WHERE", "lat", "<", "37.5"], "query_toks_no_value": ["select", "name", "from", "station", "where", "lat", "<", "value"], "question": "What are the names of all stations with a latitude smaller than 37.5?", "question_toks": ["What", "are", "the", "names", "of", "all", "stations", "with", "a", "latitude", "smaller", "than", "37.5", "?"], "guid": 3557}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | For each nationality, how many different constructors are there?", "sql": "SELECT count(*) ,  nationality FROM constructors GROUP BY nationality", "example": {"db_id": "formula_1", "query": "SELECT count(*) ,  nationality FROM constructors GROUP BY nationality", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "nationality", "FROM", "constructors", "GROUP", "BY", "nationality"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "nationality", "from", "constructors", "group", "by", "nationality"], "question": "For each nationality, how many different constructors are there?", "question_toks": ["For", "each", "nationality", ",", "how", "many", "different", "constructors", "are", "there", "?"], "guid": 3558}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | What are the different names of the colleges involved in the tryout in alphabetical order?", "sql": "SELECT DISTINCT cName FROM tryout ORDER BY cName", "example": {"db_id": "soccer_2", "query": "SELECT DISTINCT cName FROM tryout ORDER BY cName", "query_toks": ["SELECT", "DISTINCT", "cName", "FROM", "tryout", "ORDER", "BY", "cName"], "query_toks_no_value": ["select", "distinct", "cname", "from", "tryout", "order", "by", "cname"], "question": "What are the different names of the colleges involved in the tryout in alphabetical order?", "question_toks": ["What", "are", "the", "different", "names", "of", "the", "colleges", "involved", "in", "the", "tryout", "in", "alphabetical", "order", "?"], "guid": 3559}}
{"text": "poker_player: Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings; people: People_ID, Nationality, Name, Birth_Date, Height | What is the average earnings of poker players?", "sql": "SELECT avg(Earnings) FROM poker_player", "example": {"db_id": "poker_player", "query": "SELECT avg(Earnings) FROM poker_player", "query_toks": ["SELECT", "avg", "(", "Earnings", ")", "FROM", "poker_player"], "query_toks_no_value": ["select", "avg", "(", "earnings", ")", "from", "poker_player"], "question": "What is the average earnings of poker players?", "question_toks": ["What", "is", "the", "average", "earnings", "of", "poker", "players", "?"], "guid": 3560}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | What are the numbers of constructors for different nationalities?", "sql": "SELECT count(*) ,  nationality FROM constructors GROUP BY nationality", "example": {"db_id": "formula_1", "query": "SELECT count(*) ,  nationality FROM constructors GROUP BY nationality", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "nationality", "FROM", "constructors", "GROUP", "BY", "nationality"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "nationality", "from", "constructors", "group", "by", "nationality"], "question": "What are the numbers of constructors for different nationalities?", "question_toks": ["What", "are", "the", "numbers", "of", "constructors", "for", "different", "nationalities", "?"], "guid": 3561}}
{"text": "mountain: Mountain_ID, Name, Height, Prominence, Range, Country; climber: Climber_ID, Name, Country, Time, Points, Mountain_ID | How many climbers are from each country?", "sql": "SELECT Country ,  COUNT(*) FROM climber GROUP BY Country", "example": {"db_id": "climbing", "query": "SELECT Country ,  COUNT(*) FROM climber GROUP BY Country", "query_toks": ["SELECT", "Country", ",", "COUNT", "(", "*", ")", "FROM", "climber", "GROUP", "BY", "Country"], "query_toks_no_value": ["select", "country", ",", "count", "(", "*", ")", "from", "climber", "group", "by", "country"], "question": "How many climbers are from each country?", "question_toks": ["How", "many", "climbers", "are", "from", "each", "country", "?"], "guid": 3562}}
{"text": "club: Club_ID, name, Region, Start_year; club_rank: Rank, Club_ID, Gold, Silver, Bronze, Total; player: Player_ID, name, Position, Club_ID, Apps, Tries, Goals, Points; competition: Competition_ID, Year, Competition_type, Country; competition_result: Competition_ID, Club_ID_1, Club_ID_2, Score | What are the names of the clubs that have players in the position of \"Right Wing\"?", "sql": "SELECT T1.name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID WHERE T2.Position  =  \"Right Wing\"", "example": {"db_id": "sports_competition", "query": "SELECT T1.name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID WHERE T2.Position  =  \"Right Wing\"", "query_toks": ["SELECT", "T1.name", "FROM", "club", "AS", "T1", "JOIN", "player", "AS", "T2", "ON", "T1.Club_ID", "=", "T2.Club_ID", "WHERE", "T2.Position", "=", "``", "Right", "Wing", "''"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "club", "as", "t1", "join", "player", "as", "t2", "on", "t1", ".", "club_id", "=", "t2", ".", "club_id", "where", "t2", ".", "position", "=", "value"], "question": "What are the names of the clubs that have players in the position of \"Right Wing\"?", "question_toks": ["What", "are", "the", "names", "of", "the", "clubs", "that", "have", "players", "in", "the", "position", "of", "``", "Right", "Wing", "''", "?"], "guid": 3563}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | What are the dates in which the mean sea level pressure was between 30.3 and 31?", "sql": "SELECT date FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31", "example": {"db_id": "bike_1", "query": "SELECT date FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31", "query_toks": ["SELECT", "date", "FROM", "weather", "WHERE", "mean_sea_level_pressure_inches", "BETWEEN", "30.3", "AND", "31"], "query_toks_no_value": ["select", "date", "from", "weather", "where", "mean_sea_level_pressure_inches", "between", "value", "and", "value"], "question": "What are the dates in which the mean sea level pressure was between 30.3 and 31?", "question_toks": ["What", "are", "the", "dates", "in", "which", "the", "mean", "sea", "level", "pressure", "was", "between", "30.3", "and", "31", "?"], "guid": 3564}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | What is the number of colleges with a student population greater than 15000?", "sql": "SELECT count(*) FROM College WHERE enr  >  15000", "example": {"db_id": "soccer_2", "query": "SELECT count(*) FROM College WHERE enr  >  15000", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "College", "WHERE", "enr", ">", "15000"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "college", "where", "enr", ">", "value"], "question": "What is the number of colleges with a student population greater than 15000?", "question_toks": ["What", "is", "the", "number", "of", "colleges", "with", "a", "student", "population", "greater", "than", "15000", "?"], "guid": 3565}}
{"text": "mountain: Mountain_ID, Name, Height, Prominence, Range, Country; climber: Climber_ID, Name, Country, Time, Points, Mountain_ID | What is the height of the mountain climbined by the climbing who had the most points?", "sql": "SELECT T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID ORDER BY T1.Points DESC LIMIT 1", "example": {"db_id": "climbing", "query": "SELECT T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID ORDER BY T1.Points DESC LIMIT 1", "query_toks": ["SELECT", "T2.Height", "FROM", "climber", "AS", "T1", "JOIN", "mountain", "AS", "T2", "ON", "T1.Mountain_ID", "=", "T2.Mountain_ID", "ORDER", "BY", "T1.Points", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "height", "from", "climber", "as", "t1", "join", "mountain", "as", "t2", "on", "t1", ".", "mountain_id", "=", "t2", ".", "mountain_id", "order", "by", "t1", ".", "points", "desc", "limit", "value"], "question": "What is the height of the mountain climbined by the climbing who had the most points?", "question_toks": ["What", "is", "the", "height", "of", "the", "mountain", "climbined", "by", "the", "climbing", "who", "had", "the", "most", "points", "?"], "guid": 3566}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | What is the number of students playing as a goalie?", "sql": "SELECT count(*) FROM tryout WHERE pPos  =  'goalie'", "example": {"db_id": "soccer_2", "query": "SELECT count(*) FROM tryout WHERE pPos  =  'goalie'", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "tryout", "WHERE", "pPos", "=", "'goalie", "'"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "tryout", "where", "ppos", "=", "value"], "question": "What is the number of students playing as a goalie?", "question_toks": ["What", "is", "the", "number", "of", "students", "playing", "as", "a", "goalie", "?"], "guid": 3567}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | What was the most popular position at tryouts?", "sql": "SELECT pPos FROM tryout GROUP BY pPos ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "soccer_2", "query": "SELECT pPos FROM tryout GROUP BY pPos ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "pPos", "FROM", "tryout", "GROUP", "BY", "pPos", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "ppos", "from", "tryout", "group", "by", "ppos", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What was the most popular position at tryouts?", "question_toks": ["What", "was", "the", "most", "popular", "position", "at", "tryouts", "?"], "guid": 3568}}
{"text": "gymnast: Gymnast_ID, Floor_Exercise_Points, Pommel_Horse_Points, Rings_Points, Vault_Points, Parallel_Bars_Points, Horizontal_Bar_Points, Total_Points; people: People_ID, Name, Age, Height, Hometown | List the names of gymnasts in ascending order by their heights.", "sql": "SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T2.Height ASC", "example": {"db_id": "gymnast", "query": "SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T2.Height ASC", "query_toks": ["SELECT", "T2.Name", "FROM", "gymnast", "AS", "T1", "JOIN", "people", "AS", "T2", "ON", "T1.Gymnast_ID", "=", "T2.People_ID", "ORDER", "BY", "T2.Height", "ASC"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "gymnast", "as", "t1", "join", "people", "as", "t2", "on", "t1", ".", "gymnast_id", "=", "t2", ".", "people_id", "order", "by", "t2", ".", "height", "asc"], "question": "List the names of gymnasts in ascending order by their heights.", "question_toks": ["List", "the", "names", "of", "gymnasts", "in", "ascending", "order", "by", "their", "heights", "."], "guid": 3569}}
{"text": "country: Country_id, Country_name, Capital, Official_native_language; team: Team_id, Name; match_season: Season, Player, Position, Country, Team, Draft_Pick_Number, Draft_Class, College; player: Player_ID, Player, Years_Played, Total_WL, Singles_WL, Doubles_WL, Team | What are the names of teams that do no have match season record?", "sql": "SELECT Name FROM team WHERE Team_id NOT IN (SELECT Team FROM match_season)", "example": {"db_id": "match_season", "query": "SELECT Name FROM team WHERE Team_id NOT IN (SELECT Team FROM match_season)", "query_toks": ["SELECT", "Name", "FROM", "team", "WHERE", "Team_id", "NOT", "IN", "(", "SELECT", "Team", "FROM", "match_season", ")"], "query_toks_no_value": ["select", "name", "from", "team", "where", "team_id", "not", "in", "(", "select", "team", "from", "match_season", ")"], "question": "What are the names of teams that do no have match season record?", "question_toks": ["What", "are", "the", "names", "of", "teams", "that", "do", "no", "have", "match", "season", "record", "?"], "guid": 3570}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | What is the average fastest lap speed for races held after 2004, for each race, ordered by year?", "sql": "SELECT avg(T2.fastestlapspeed) ,  T1.name ,  T1.year FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY T1.name ORDER BY T1.year", "example": {"db_id": "formula_1", "query": "SELECT avg(T2.fastestlapspeed) ,  T1.name ,  T1.year FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY T1.name ORDER BY T1.year", "query_toks": ["SELECT", "avg", "(", "T2.fastestlapspeed", ")", ",", "T1.name", ",", "T1.year", "FROM", "races", "AS", "T1", "JOIN", "results", "AS", "T2", "ON", "T1.raceid", "=", "T2.raceid", "WHERE", "T1.year", ">", "2014", "GROUP", "BY", "T1.name", "ORDER", "BY", "T1.year"], "query_toks_no_value": ["select", "avg", "(", "t2", ".", "fastestlapspeed", ")", ",", "t1", ".", "name", ",", "t1", ".", "year", "from", "races", "as", "t1", "join", "results", "as", "t2", "on", "t1", ".", "raceid", "=", "t2", ".", "raceid", "where", "t1", ".", "year", ">", "value", "group", "by", "t1", ".", "name", "order", "by", "t1", ".", "year"], "question": "What is the average fastest lap speed for races held after 2004, for each race, ordered by year?", "question_toks": ["What", "is", "the", "average", "fastest", "lap", "speed", "for", "races", "held", "after", "2004", ",", "for", "each", "race", ",", "ordered", "by", "year", "?"], "guid": 3571}}
{"text": "body_builder: Body_Builder_ID, People_ID, Snatch, Clean_Jerk, Total; people: People_ID, Name, Height, Weight, Birth_Date, Birth_Place | What is the most common birth place of people?", "sql": "SELECT Birth_Place FROM people GROUP BY Birth_Place ORDER BY COUNT(*) DESC LIMIT 1", "example": {"db_id": "body_builder", "query": "SELECT Birth_Place FROM people GROUP BY Birth_Place ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "Birth_Place", "FROM", "people", "GROUP", "BY", "Birth_Place", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "birth_place", "from", "people", "group", "by", "birth_place", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the most common birth place of people?", "question_toks": ["What", "is", "the", "most", "common", "birth", "place", "of", "people", "?"], "guid": 3572}}
{"text": "mountain: Mountain_ID, Name, Height, Prominence, Range, Country; climber: Climber_ID, Name, Country, Time, Points, Mountain_ID | Count the number of different countries that climbers are from.", "sql": "SELECT COUNT(DISTINCT Country) FROM climber", "example": {"db_id": "climbing", "query": "SELECT COUNT(DISTINCT Country) FROM climber", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "Country", ")", "FROM", "climber"], "query_toks_no_value": ["select", "count", "(", "distinct", "country", ")", "from", "climber"], "question": "Count the number of different countries that climbers are from.", "question_toks": ["Count", "the", "number", "of", "different", "countries", "that", "climbers", "are", "from", "."], "guid": 3573}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | What are the names and hours spent practicing of every student who received a yes at tryouts?", "sql": "SELECT T1.pName ,  T1.HS FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'", "example": {"db_id": "soccer_2", "query": "SELECT T1.pName ,  T1.HS FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'", "query_toks": ["SELECT", "T1.pName", ",", "T1.HS", "FROM", "player", "AS", "T1", "JOIN", "tryout", "AS", "T2", "ON", "T1.pID", "=", "T2.pID", "WHERE", "T2.decision", "=", "'yes", "'"], "query_toks_no_value": ["select", "t1", ".", "pname", ",", "t1", ".", "hs", "from", "player", "as", "t1", "join", "tryout", "as", "t2", "on", "t1", ".", "pid", "=", "t2", ".", "pid", "where", "t2", ".", "decision", "=", "value"], "question": "What are the names and hours spent practicing of every student who received a yes at tryouts?", "question_toks": ["What", "are", "the", "names", "and", "hours", "spent", "practicing", "of", "every", "student", "who", "received", "a", "yes", "at", "tryouts", "?"], "guid": 3574}}
{"text": "players: player_id, first_name, last_name, hand, birth_date, country_code; matches: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank; rankings: ranking_date, ranking, player_id, ranking_points, tours | What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?", "sql": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'", "example": {"db_id": "wta_1", "query": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'", "query_toks": ["SELECT", "T1.country_code", ",", "T1.first_name", "FROM", "players", "AS", "T1", "JOIN", "matches", "AS", "T2", "ON", "T1.player_id", "=", "T2.winner_id", "WHERE", "T2.tourney_name", "=", "'WTA", "Championships", "'", "INTERSECT", "SELECT", "T1.country_code", ",", "T1.first_name", "FROM", "players", "AS", "T1", "JOIN", "matches", "AS", "T2", "ON", "T1.player_id", "=", "T2.winner_id", "WHERE", "T2.tourney_name", "=", "'Australian", "Open", "'"], "query_toks_no_value": ["select", "t1", ".", "country_code", ",", "t1", ".", "first_name", "from", "players", "as", "t1", "join", "matches", "as", "t2", "on", "t1", ".", "player_id", "=", "t2", ".", "winner_id", "where", "t2", ".", "tourney_name", "=", "value", "intersect", "select", "t1", ".", "country_code", ",", "t1", ".", "first_name", "from", "players", "as", "t1", "join", "matches", "as", "t2", "on", "t1", ".", "player_id", "=", "t2", ".", "winner_id", "where", "t2", ".", "tourney_name", "=", "value"], "question": "What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?", "question_toks": ["What", "are", "the", "country", "code", "and", "first", "name", "of", "the", "players", "who", "won", "in", "both", "tourney", "WTA", "Championships", "and", "Australian", "Open", "?"], "guid": 3575}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | Find the number of clubs where \"Tracy Kim\" is a member.", "sql": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Tracy\" AND t3.lname  =  \"Kim\"", "example": {"db_id": "club_1", "query": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Tracy\" AND t3.lname  =  \"Kim\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "club", "AS", "t1", "JOIN", "member_of_club", "AS", "t2", "ON", "t1.clubid", "=", "t2.clubid", "JOIN", "student", "AS", "t3", "ON", "t2.stuid", "=", "t3.stuid", "WHERE", "t3.fname", "=", "``", "Tracy", "''", "AND", "t3.lname", "=", "``", "Kim", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "club", "as", "t1", "join", "member_of_club", "as", "t2", "on", "t1", ".", "clubid", "=", "t2", ".", "clubid", "join", "student", "as", "t3", "on", "t2", ".", "stuid", "=", "t3", ".", "stuid", "where", "t3", ".", "fname", "=", "value", "and", "t3", ".", "lname", "=", "value"], "question": "Find the number of clubs where \"Tracy Kim\" is a member.", "question_toks": ["Find", "the", "number", "of", "clubs", "where", "``", "Tracy", "Kim", "''", "is", "a", "member", "."], "guid": 3576}}
{"text": "club: Club_ID, name, Region, Start_year; club_rank: Rank, Club_ID, Gold, Silver, Bronze, Total; player: Player_ID, name, Position, Club_ID, Apps, Tries, Goals, Points; competition: Competition_ID, Year, Competition_type, Country; competition_result: Competition_ID, Club_ID_1, Club_ID_2, Score | What are the different regions of clubs in ascending alphabetical order?", "sql": "SELECT DISTINCT Region FROM club ORDER BY Region ASC", "example": {"db_id": "sports_competition", "query": "SELECT DISTINCT Region FROM club ORDER BY Region ASC", "query_toks": ["SELECT", "DISTINCT", "Region", "FROM", "club", "ORDER", "BY", "Region", "ASC"], "query_toks_no_value": ["select", "distinct", "region", "from", "club", "order", "by", "region", "asc"], "question": "What are the different regions of clubs in ascending alphabetical order?", "question_toks": ["What", "are", "the", "different", "regions", "of", "clubs", "in", "ascending", "alphabetical", "order", "?"], "guid": 3577}}
{"text": "poker_player: Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings; people: People_ID, Nationality, Name, Birth_Date, Height | Give the nationality that is most common across all people.", "sql": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1", "example": {"db_id": "poker_player", "query": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "Nationality", "FROM", "people", "GROUP", "BY", "Nationality", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "nationality", "from", "people", "group", "by", "nationality", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Give the nationality that is most common across all people.", "question_toks": ["Give", "the", "nationality", "that", "is", "most", "common", "across", "all", "people", "."], "guid": 3578}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | What are the ids and locations of all circuits in France or Belgium?", "sql": "SELECT circuitid ,  LOCATION FROM circuits WHERE country = \"France\" OR country = \"Belgium\"", "example": {"db_id": "formula_1", "query": "SELECT circuitid ,  LOCATION FROM circuits WHERE country = \"France\" OR country = \"Belgium\"", "query_toks": ["SELECT", "circuitid", ",", "LOCATION", "FROM", "circuits", "WHERE", "country", "=", "``", "France", "''", "OR", "country", "=", "``", "Belgium", "''"], "query_toks_no_value": ["select", "circuitid", ",", "location", "from", "circuits", "where", "country", "=", "value", "or", "country", "=", "value"], "question": "What are the ids and locations of all circuits in France or Belgium?", "question_toks": ["What", "are", "the", "ids", "and", "locations", "of", "all", "circuits", "in", "France", "or", "Belgium", "?"], "guid": 3579}}
{"text": "swimmer: ID, name, Nationality, meter_100, meter_200, meter_300, meter_400, meter_500, meter_600, meter_700; stadium: ID, name, Capacity, City, Country, Opening_year; event: ID, Name, Stadium_ID, Year; record: ID, Result, Swimmer_ID, Event_ID | How many stadiums are there?", "sql": "SELECT count(*) FROM stadium", "example": {"db_id": "swimming", "query": "SELECT count(*) FROM stadium", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "stadium"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "stadium"], "question": "How many stadiums are there?", "question_toks": ["How", "many", "stadiums", "are", "there", "?"], "guid": 3580}}
{"text": "race: Race_ID, Name, Class, Date, Track_ID; track: Track_ID, Name, Location, Seating, Year_Opened | Show the name of track with most number of races.", "sql": "SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "race_track", "query": "SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T2.name", "FROM", "race", "AS", "T1", "JOIN", "track", "AS", "T2", "ON", "T1.track_id", "=", "T2.track_id", "GROUP", "BY", "T1.track_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "race", "as", "t1", "join", "track", "as", "t2", "on", "t1", ".", "track_id", "=", "t2", ".", "track_id", "group", "by", "t1", ".", "track_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Show the name of track with most number of races.", "question_toks": ["Show", "the", "name", "of", "track", "with", "most", "number", "of", "races", "."], "guid": 3581}}
{"text": "mountain: Mountain_ID, Name, Height, Prominence, Range, Country; climber: Climber_ID, Name, Country, Time, Points, Mountain_ID | Show the times used by climbers to climb mountains in Country Uganda.", "sql": "SELECT T1.Time FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T2.Country  =  \"Uganda\"", "example": {"db_id": "climbing", "query": "SELECT T1.Time FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T2.Country  =  \"Uganda\"", "query_toks": ["SELECT", "T1.Time", "FROM", "climber", "AS", "T1", "JOIN", "mountain", "AS", "T2", "ON", "T1.Mountain_ID", "=", "T2.Mountain_ID", "WHERE", "T2.Country", "=", "``", "Uganda", "''"], "query_toks_no_value": ["select", "t1", ".", "time", "from", "climber", "as", "t1", "join", "mountain", "as", "t2", "on", "t1", ".", "mountain_id", "=", "t2", ".", "mountain_id", "where", "t2", ".", "country", "=", "value"], "question": "Show the times used by climbers to climb mountains in Country Uganda.", "question_toks": ["Show", "the", "times", "used", "by", "climbers", "to", "climb", "mountains", "in", "Country", "Uganda", "."], "guid": 3582}}
{"text": "genre: g_name, rating, most_popular_in; artist: artist_name, country, gender, preferred_genre; files: f_id, artist_name, file_size, duration, formats; song: song_name, artist_name, country, f_id, genre_is, rating, languages, releasedate, resolution | What is the average rating and resolution of all bangla songs?", "sql": "SELECT avg(rating) ,  avg(resolution) FROM song WHERE languages  =  \"bangla\"", "example": {"db_id": "music_1", "query": "SELECT avg(rating) ,  avg(resolution) FROM song WHERE languages  =  \"bangla\"", "query_toks": ["SELECT", "avg", "(", "rating", ")", ",", "avg", "(", "resolution", ")", "FROM", "song", "WHERE", "languages", "=", "``", "bangla", "''"], "query_toks_no_value": ["select", "avg", "(", "rating", ")", ",", "avg", "(", "resolution", ")", "from", "song", "where", "languages", "=", "value"], "question": "What is the average rating and resolution of all bangla songs?", "question_toks": ["What", "is", "the", "average", "rating", "and", "resolution", "of", "all", "bangla", "songs", "?"], "guid": 1857}}
{"text": "artist: Artist_ID, Artist, Age, Famous_Title, Famous_Release_date; volume: Volume_ID, Volume_Issue, Issue_Date, Weeks_on_Top, Song, Artist_ID; music_festival: ID, Music_Festival, Date_of_ceremony, Category, Volume, Result | What are the dates of ceremony and results for each music festival?", "sql": "SELECT Date_of_ceremony ,  RESULT FROM music_festival", "example": {"db_id": "music_4", "query": "SELECT Date_of_ceremony ,  RESULT FROM music_festival", "query_toks": ["SELECT", "Date_of_ceremony", ",", "RESULT", "FROM", "music_festival"], "query_toks_no_value": ["select", "date_of_ceremony", ",", "result", "from", "music_festival"], "question": "What are the dates of ceremony and results for each music festival?", "question_toks": ["What", "are", "the", "dates", "of", "ceremony", "and", "results", "for", "each", "music", "festival", "?"], "guid": 1858}}
{"text": "artist: Artist_ID, Artist, Age, Famous_Title, Famous_Release_date; volume: Volume_ID, Volume_Issue, Issue_Date, Weeks_on_Top, Song, Artist_ID; music_festival: ID, Music_Festival, Date_of_ceremony, Category, Volume, Result | Return the issue date of the volume that has spent the fewest weeks on top.", "sql": "SELECT Issue_Date FROM volume ORDER BY Weeks_on_Top ASC LIMIT 1", "example": {"db_id": "music_4", "query": "SELECT Issue_Date FROM volume ORDER BY Weeks_on_Top ASC LIMIT 1", "query_toks": ["SELECT", "Issue_Date", "FROM", "volume", "ORDER", "BY", "Weeks_on_Top", "ASC", "LIMIT", "1"], "query_toks_no_value": ["select", "issue_date", "from", "volume", "order", "by", "weeks_on_top", "asc", "limit", "value"], "question": "Return the issue date of the volume that has spent the fewest weeks on top.", "question_toks": ["Return", "the", "issue", "date", "of", "the", "volume", "that", "has", "spent", "the", "fewest", "weeks", "on", "top", "."], "guid": 1859}}
{"text": "artist: Artist_ID, Artist, Age, Famous_Title, Famous_Release_date; volume: Volume_ID, Volume_Issue, Issue_Date, Weeks_on_Top, Song, Artist_ID; music_festival: ID, Music_Festival, Date_of_ceremony, Category, Volume, Result | What are the maximum and minimum week on top of all volumes?", "sql": "SELECT max(Weeks_on_Top) ,  min(Weeks_on_Top) FROM volume", "example": {"db_id": "music_4", "query": "SELECT max(Weeks_on_Top) ,  min(Weeks_on_Top) FROM volume", "query_toks": ["SELECT", "max", "(", "Weeks_on_Top", ")", ",", "min", "(", "Weeks_on_Top", ")", "FROM", "volume"], "query_toks_no_value": ["select", "max", "(", "weeks_on_top", ")", ",", "min", "(", "weeks_on_top", ")", "from", "volume"], "question": "What are the maximum and minimum week on top of all volumes?", "question_toks": ["What", "are", "the", "maximum", "and", "minimum", "week", "on", "top", "of", "all", "volumes", "?"], "guid": 1860}}
{"text": "conductor: Conductor_ID, Name, Age, Nationality, Year_of_Work; orchestra: Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format; performance: Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share; show: Show_ID, Performance_ID, If_first_show, Result, Attendance | How many conductors are there?", "sql": "SELECT count(*) FROM conductor", "example": {"db_id": "orchestra", "query": "SELECT count(*) FROM conductor", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "conductor"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "conductor"], "question": "How many conductors are there?", "question_toks": ["How", "many", "conductors", "are", "there", "?"], "guid": 1861}}
{"text": "musical: Musical_ID, Name, Year, Award, Category, Nominee, Result; actor: Actor_ID, Name, Musical_ID, Character, Duration, age | How many musicals has each nominee been nominated for?", "sql": "SELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee", "example": {"db_id": "musical", "query": "SELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee", "query_toks": ["SELECT", "Nominee", ",", "COUNT", "(", "*", ")", "FROM", "musical", "GROUP", "BY", "Nominee"], "query_toks_no_value": ["select", "nominee", ",", "count", "(", "*", ")", "from", "musical", "group", "by", "nominee"], "question": "How many musicals has each nominee been nominated for?", "question_toks": ["How", "many", "musicals", "has", "each", "nominee", "been", "nominated", "for", "?"], "guid": 1862}}
{"text": "singer: Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship; song: Song_ID, Title, Singer_ID, Sales, Highest_Position | What are the birth years and citizenships of the singers?", "sql": "SELECT Birth_Year ,  Citizenship FROM singer", "example": {"db_id": "singer", "query": "SELECT Birth_Year ,  Citizenship FROM singer", "query_toks": ["SELECT", "Birth_Year", ",", "Citizenship", "FROM", "singer"], "query_toks_no_value": ["select", "birth_year", ",", "citizenship", "from", "singer"], "question": "What are the birth years and citizenships of the singers?", "question_toks": ["What", "are", "the", "birth", "years", "and", "citizenships", "of", "the", "singers", "?"], "guid": 1863}}
{"text": "conductor: Conductor_ID, Name, Age, Nationality, Year_of_Work; orchestra: Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format; performance: Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share; show: Show_ID, Performance_ID, If_first_show, Result, Attendance | Return the maximum and minimum shares for performances that do not have the type \"Live final\".", "sql": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"", "example": {"db_id": "orchestra", "query": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"", "query_toks": ["SELECT", "max", "(", "SHARE", ")", ",", "min", "(", "SHARE", ")", "FROM", "performance", "WHERE", "TYPE", "!", "=", "``", "Live", "final", "''"], "query_toks_no_value": ["select", "max", "(", "share", ")", ",", "min", "(", "share", ")", "from", "performance", "where", "type", "!", "=", "value"], "question": "Return the maximum and minimum shares for performances that do not have the type \"Live final\".", "question_toks": ["Return", "the", "maximum", "and", "minimum", "shares", "for", "performances", "that", "do", "not", "have", "the", "type", "``", "Live", "final", "''", "."], "guid": 1864}}
{"text": "Songs: SongId, Title; Albums: AId, Title, Year, Label, Type; Band: Id, Firstname, Lastname; Instruments: SongId, BandmateId, Instrument; Performance: SongId, Bandmate, StagePosition; Tracklists: AlbumId, Position, SongId; Vocals: SongId, Bandmate, Type | What are all the labels?", "sql": "SELECT DISTINCT label FROM Albums", "example": {"db_id": "music_2", "query": "SELECT DISTINCT label FROM Albums", "query_toks": ["SELECT", "DISTINCT", "label", "FROM", "Albums"], "query_toks_no_value": ["select", "distinct", "label", "from", "albums"], "question": "What are all the labels?", "question_toks": ["What", "are", "all", "the", "labels", "?"], "guid": 1865}}
{"text": "singer: Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship; song: Song_ID, Title, Singer_ID, Sales, Highest_Position | Show distinct names of singers that have songs with sales more than 300000.", "sql": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000", "example": {"db_id": "singer", "query": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000", "query_toks": ["SELECT", "DISTINCT", "T1.Name", "FROM", "singer", "AS", "T1", "JOIN", "song", "AS", "T2", "ON", "T1.Singer_ID", "=", "T2.Singer_ID", "WHERE", "T2.Sales", ">", "300000"], "query_toks_no_value": ["select", "distinct", "t1", ".", "name", "from", "singer", "as", "t1", "join", "song", "as", "t2", "on", "t1", ".", "singer_id", "=", "t2", ".", "singer_id", "where", "t2", ".", "sales", ">", "value"], "question": "Show distinct names of singers that have songs with sales more than 300000.", "question_toks": ["Show", "distinct", "names", "of", "singers", "that", "have", "songs", "with", "sales", "more", "than", "300000", "."], "guid": 1866}}
{"text": "conductor: Conductor_ID, Name, Age, Nationality, Year_of_Work; orchestra: Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format; performance: Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share; show: Show_ID, Performance_ID, If_first_show, Result, Attendance | What are the record companies of orchestras in descending order of years in which they were founded?", "sql": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC", "example": {"db_id": "orchestra", "query": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC", "query_toks": ["SELECT", "Record_Company", "FROM", "orchestra", "ORDER", "BY", "Year_of_Founded", "DESC"], "query_toks_no_value": ["select", "record_company", "from", "orchestra", "order", "by", "year_of_founded", "desc"], "question": "What are the record companies of orchestras in descending order of years in which they were founded?", "question_toks": ["What", "are", "the", "record", "companies", "of", "orchestras", "in", "descending", "order", "of", "years", "in", "which", "they", "were", "founded", "?"], "guid": 1867}}
{"text": "genre: g_name, rating, most_popular_in; artist: artist_name, country, gender, preferred_genre; files: f_id, artist_name, file_size, duration, formats; song: song_name, artist_name, country, f_id, genre_is, rating, languages, releasedate, resolution | What is the id of every song that has a resolution higher than that of a song with a rating below 8?", "sql": "SELECT f_id FROM song WHERE resolution  >  (SELECT max(resolution) FROM song WHERE rating  <  8)", "example": {"db_id": "music_1", "query": "SELECT f_id FROM song WHERE resolution  >  (SELECT max(resolution) FROM song WHERE rating  <  8)", "query_toks": ["SELECT", "f_id", "FROM", "song", "WHERE", "resolution", ">", "(", "SELECT", "max", "(", "resolution", ")", "FROM", "song", "WHERE", "rating", "<", "8", ")"], "query_toks_no_value": ["select", "f_id", "from", "song", "where", "resolution", ">", "(", "select", "max", "(", "resolution", ")", "from", "song", "where", "rating", "<", "value", ")"], "question": "What is the id of every song that has a resolution higher than that of a song with a rating below 8?", "question_toks": ["What", "is", "the", "id", "of", "every", "song", "that", "has", "a", "resolution", "higher", "than", "that", "of", "a", "song", "with", "a", "rating", "below", "8", "?"], "guid": 1868}}
{"text": "Songs: SongId, Title; Albums: AId, Title, Year, Label, Type; Band: Id, Firstname, Lastname; Instruments: SongId, BandmateId, Instrument; Performance: SongId, Bandmate, StagePosition; Tracklists: AlbumId, Position, SongId; Vocals: SongId, Bandmate, Type | What instruments did the musician with the last name \"Heilo\" play in the song \"Le Pop\"?", "sql": "SELECT T4.instrument FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId JOIN Instruments AS T4 ON T4.songid  =  T3.songid AND T4.bandmateid  =  T2.id WHERE T2.lastname  =  \"Heilo\" AND T3.title  =  \"Le Pop\"", "example": {"db_id": "music_2", "query": "SELECT T4.instrument FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId JOIN Instruments AS T4 ON T4.songid  =  T3.songid AND T4.bandmateid  =  T2.id WHERE T2.lastname  =  \"Heilo\" AND T3.title  =  \"Le Pop\"", "query_toks": ["SELECT", "T4.instrument", "FROM", "Performance", "AS", "T1", "JOIN", "Band", "AS", "T2", "ON", "T1.bandmate", "=", "T2.id", "JOIN", "Songs", "AS", "T3", "ON", "T3.SongId", "=", "T1.SongId", "JOIN", "Instruments", "AS", "T4", "ON", "T4.songid", "=", "T3.songid", "AND", "T4.bandmateid", "=", "T2.id", "WHERE", "T2.lastname", "=", "``", "Heilo", "''", "AND", "T3.title", "=", "``", "Le", "Pop", "''"], "query_toks_no_value": ["select", "t4", ".", "instrument", "from", "performance", "as", "t1", "join", "band", "as", "t2", "on", "t1", ".", "bandmate", "=", "t2", ".", "id", "join", "songs", "as", "t3", "on", "t3", ".", "songid", "=", "t1", ".", "songid", "join", "instruments", "as", "t4", "on", "t4", ".", "songid", "=", "t3", ".", "songid", "and", "t4", ".", "bandmateid", "=", "t2", ".", "id", "where", "t2", ".", "lastname", "=", "value", "and", "t3", ".", "title", "=", "value"], "question": "What instruments did the musician with the last name \"Heilo\" play in the song \"Le Pop\"?", "question_toks": ["What", "instruments", "did", "the", "musician", "with", "the", "last", "name", "``", "Heilo", "''", "play", "in", "the", "song", "``", "Le", "Pop", "''", "?"], "guid": 1869}}
{"text": "Songs: SongId, Title; Albums: AId, Title, Year, Label, Type; Band: Id, Firstname, Lastname; Instruments: SongId, BandmateId, Instrument; Performance: SongId, Bandmate, StagePosition; Tracklists: AlbumId, Position, SongId; Vocals: SongId, Bandmate, Type | Which vocal type has the band mate with first name \"Marianne\" played the most?", "sql": "SELECT TYPE FROM vocals AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id WHERE firstname  =  \"Marianne\" GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "music_2", "query": "SELECT TYPE FROM vocals AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id WHERE firstname  =  \"Marianne\" GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "TYPE", "FROM", "vocals", "AS", "T1", "JOIN", "band", "AS", "T2", "ON", "T1.bandmate", "=", "T2.id", "WHERE", "firstname", "=", "``", "Marianne", "''", "GROUP", "BY", "TYPE", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "type", "from", "vocals", "as", "t1", "join", "band", "as", "t2", "on", "t1", ".", "bandmate", "=", "t2", ".", "id", "where", "firstname", "=", "value", "group", "by", "type", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which vocal type has the band mate with first name \"Marianne\" played the most?", "question_toks": ["Which", "vocal", "type", "has", "the", "band", "mate", "with", "first", "name", "``", "Marianne", "''", "played", "the", "most", "?"], "guid": 1870}}
{"text": "musical: Musical_ID, Name, Year, Award, Category, Nominee, Result; actor: Actor_ID, Name, Musical_ID, Character, Duration, age | Please show the nominee who has been nominated the greatest number of times.", "sql": "SELECT Nominee FROM musical GROUP BY Nominee ORDER BY COUNT(*) DESC LIMIT 1", "example": {"db_id": "musical", "query": "SELECT Nominee FROM musical GROUP BY Nominee ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "Nominee", "FROM", "musical", "GROUP", "BY", "Nominee", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "nominee", "from", "musical", "group", "by", "nominee", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Please show the nominee who has been nominated the greatest number of times.", "question_toks": ["Please", "show", "the", "nominee", "who", "has", "been", "nominated", "the", "greatest", "number", "of", "times", "."], "guid": 1871}}
{"text": "genre: g_name, rating, most_popular_in; artist: artist_name, country, gender, preferred_genre; files: f_id, artist_name, file_size, duration, formats; song: song_name, artist_name, country, f_id, genre_is, rating, languages, releasedate, resolution | What are the names and genders of all artists who released songs in the month of March?", "sql": "SELECT T1.artist_name ,  T1.gender FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.releasedate LIKE \"%Mar%\"", "example": {"db_id": "music_1", "query": "SELECT T1.artist_name ,  T1.gender FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.releasedate LIKE \"%Mar%\"", "query_toks": ["SELECT", "T1.artist_name", ",", "T1.gender", "FROM", "artist", "AS", "T1", "JOIN", "song", "AS", "T2", "ON", "T1.artist_name", "=", "T2.artist_name", "WHERE", "T2.releasedate", "LIKE", "``", "%", "Mar", "%", "''"], "query_toks_no_value": ["select", "t1", ".", "artist_name", ",", "t1", ".", "gender", "from", "artist", "as", "t1", "join", "song", "as", "t2", "on", "t1", ".", "artist_name", "=", "t2", ".", "artist_name", "where", "t2", ".", "releasedate", "like", "value"], "question": "What are the names and genders of all artists who released songs in the month of March?", "question_toks": ["What", "are", "the", "names", "and", "genders", "of", "all", "artists", "who", "released", "songs", "in", "the", "month", "of", "March", "?"], "guid": 1872}}
{"text": "genre: g_name, rating, most_popular_in; artist: artist_name, country, gender, preferred_genre; files: f_id, artist_name, file_size, duration, formats; song: song_name, artist_name, country, f_id, genre_is, rating, languages, releasedate, resolution | What are the top 3 artists with the largest number of songs in the language Bangla?", "sql": "SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.languages  =  \"bangla\" GROUP BY T2.artist_name ORDER BY count(*) DESC LIMIT 3", "example": {"db_id": "music_1", "query": "SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.languages  =  \"bangla\" GROUP BY T2.artist_name ORDER BY count(*) DESC LIMIT 3", "query_toks": ["SELECT", "T1.artist_name", "FROM", "artist", "AS", "T1", "JOIN", "song", "AS", "T2", "ON", "T1.artist_name", "=", "T2.artist_name", "WHERE", "T2.languages", "=", "``", "bangla", "''", "GROUP", "BY", "T2.artist_name", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "3"], "query_toks_no_value": ["select", "t1", ".", "artist_name", "from", "artist", "as", "t1", "join", "song", "as", "t2", "on", "t1", ".", "artist_name", "=", "t2", ".", "artist_name", "where", "t2", ".", "languages", "=", "value", "group", "by", "t2", ".", "artist_name", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What are the top 3 artists with the largest number of songs in the language Bangla?", "question_toks": ["What", "are", "the", "top", "3", "artists", "with", "the", "largest", "number", "of", "songs", "in", "the", "language", "Bangla", "?"], "guid": 1873}}
{"text": "genre: g_name, rating, most_popular_in; artist: artist_name, country, gender, preferred_genre; files: f_id, artist_name, file_size, duration, formats; song: song_name, artist_name, country, f_id, genre_is, rating, languages, releasedate, resolution | List the names of all genres in alphabetical oder, together with its ratings.", "sql": "SELECT g_name ,  rating FROM genre ORDER BY g_name", "example": {"db_id": "music_1", "query": "SELECT g_name ,  rating FROM genre ORDER BY g_name", "query_toks": ["SELECT", "g_name", ",", "rating", "FROM", "genre", "ORDER", "BY", "g_name"], "query_toks_no_value": ["select", "g_name", ",", "rating", "from", "genre", "order", "by", "g_name"], "question": "List the names of all genres in alphabetical oder, together with its ratings.", "question_toks": ["List", "the", "names", "of", "all", "genres", "in", "alphabetical", "oder", ",", "together", "with", "its", "ratings", "."], "guid": 1874}}
{"text": "Songs: SongId, Title; Albums: AId, Title, Year, Label, Type; Band: Id, Firstname, Lastname; Instruments: SongId, BandmateId, Instrument; Performance: SongId, Bandmate, StagePosition; Tracklists: AlbumId, Position, SongId; Vocals: SongId, Bandmate, Type | Count the number of songs.", "sql": "SELECT count(*) FROM Songs", "example": {"db_id": "music_2", "query": "SELECT count(*) FROM Songs", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Songs"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "songs"], "question": "Count the number of songs.", "question_toks": ["Count", "the", "number", "of", "songs", "."], "guid": 1875}}
{"text": "Songs: SongId, Title; Albums: AId, Title, Year, Label, Type; Band: Id, Firstname, Lastname; Instruments: SongId, BandmateId, Instrument; Performance: SongId, Bandmate, StagePosition; Tracklists: AlbumId, Position, SongId; Vocals: SongId, Bandmate, Type | Find all the instruments ever used by the musician with last name \"Heilo\"?", "sql": "SELECT instrument FROM instruments AS T1 JOIN Band AS T2 ON T1.bandmateid  =  T2.id WHERE T2.lastname  =  \"Heilo\"", "example": {"db_id": "music_2", "query": "SELECT instrument FROM instruments AS T1 JOIN Band AS T2 ON T1.bandmateid  =  T2.id WHERE T2.lastname  =  \"Heilo\"", "query_toks": ["SELECT", "instrument", "FROM", "instruments", "AS", "T1", "JOIN", "Band", "AS", "T2", "ON", "T1.bandmateid", "=", "T2.id", "WHERE", "T2.lastname", "=", "``", "Heilo", "''"], "query_toks_no_value": ["select", "instrument", "from", "instruments", "as", "t1", "join", "band", "as", "t2", "on", "t1", ".", "bandmateid", "=", "t2", ".", "id", "where", "t2", ".", "lastname", "=", "value"], "question": "Find all the instruments ever used by the musician with last name \"Heilo\"?", "question_toks": ["Find", "all", "the", "instruments", "ever", "used", "by", "the", "musician", "with", "last", "name", "``", "Heilo", "''", "?"], "guid": 1876}}
{"text": "genre: g_name, rating, most_popular_in; artist: artist_name, country, gender, preferred_genre; files: f_id, artist_name, file_size, duration, formats; song: song_name, artist_name, country, f_id, genre_is, rating, languages, releasedate, resolution | Return the names of singers who are from UK and released an English song.", "sql": "SELECT artist_name FROM artist WHERE country  =  \"UK\" INTERSECT SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.languages  =  \"english\"", "example": {"db_id": "music_1", "query": "SELECT artist_name FROM artist WHERE country  =  \"UK\" INTERSECT SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.languages  =  \"english\"", "query_toks": ["SELECT", "artist_name", "FROM", "artist", "WHERE", "country", "=", "``", "UK", "''", "INTERSECT", "SELECT", "T1.artist_name", "FROM", "artist", "AS", "T1", "JOIN", "song", "AS", "T2", "ON", "T1.artist_name", "=", "T2.artist_name", "WHERE", "T2.languages", "=", "``", "english", "''"], "query_toks_no_value": ["select", "artist_name", "from", "artist", "where", "country", "=", "value", "intersect", "select", "t1", ".", "artist_name", "from", "artist", "as", "t1", "join", "song", "as", "t2", "on", "t1", ".", "artist_name", "=", "t2", ".", "artist_name", "where", "t2", ".", "languages", "=", "value"], "question": "Return the names of singers who are from UK and released an English song.", "question_toks": ["Return", "the", "names", "of", "singers", "who", "are", "from", "UK", "and", "released", "an", "English", "song", "."], "guid": 1877}}
{"text": "genre: g_name, rating, most_popular_in; artist: artist_name, country, gender, preferred_genre; files: f_id, artist_name, file_size, duration, formats; song: song_name, artist_name, country, f_id, genre_is, rating, languages, releasedate, resolution | What countries are the female artists who sung in the language Bangla from?", "sql": "SELECT T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T1.gender  =  \"Female\" AND T2.languages  =  \"bangla\"", "example": {"db_id": "music_1", "query": "SELECT T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T1.gender  =  \"Female\" AND T2.languages  =  \"bangla\"", "query_toks": ["SELECT", "T1.country", "FROM", "artist", "AS", "T1", "JOIN", "song", "AS", "T2", "ON", "T1.artist_name", "=", "T2.artist_name", "WHERE", "T1.gender", "=", "``", "Female", "''", "AND", "T2.languages", "=", "``", "bangla", "''"], "query_toks_no_value": ["select", "t1", ".", "country", "from", "artist", "as", "t1", "join", "song", "as", "t2", "on", "t1", ".", "artist_name", "=", "t2", ".", "artist_name", "where", "t1", ".", "gender", "=", "value", "and", "t2", ".", "languages", "=", "value"], "question": "What countries are the female artists who sung in the language Bangla from?", "question_toks": ["What", "countries", "are", "the", "female", "artists", "who", "sung", "in", "the", "language", "Bangla", "from", "?"], "guid": 1878}}
{"text": "artist: Artist_ID, Artist, Age, Famous_Title, Famous_Release_date; volume: Volume_ID, Volume_Issue, Issue_Date, Weeks_on_Top, Song, Artist_ID; music_festival: ID, Music_Festival, Date_of_ceremony, Category, Volume, Result | How many music festivals have had each kind of result, ordered descending by count?", "sql": "SELECT RESULT ,  COUNT(*) FROM music_festival GROUP BY RESULT ORDER BY COUNT(*) DESC", "example": {"db_id": "music_4", "query": "SELECT RESULT ,  COUNT(*) FROM music_festival GROUP BY RESULT ORDER BY COUNT(*) DESC", "query_toks": ["SELECT", "RESULT", ",", "COUNT", "(", "*", ")", "FROM", "music_festival", "GROUP", "BY", "RESULT", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC"], "query_toks_no_value": ["select", "result", ",", "count", "(", "*", ")", "from", "music_festival", "group", "by", "result", "order", "by", "count", "(", "*", ")", "desc"], "question": "How many music festivals have had each kind of result, ordered descending by count?", "question_toks": ["How", "many", "music", "festivals", "have", "had", "each", "kind", "of", "result", ",", "ordered", "descending", "by", "count", "?"], "guid": 1879}}
{"text": "musical: Musical_ID, Name, Year, Award, Category, Nominee, Result; actor: Actor_ID, Name, Musical_ID, Character, Duration, age | List the name of actors whose age is not 20.", "sql": "SELECT Name FROM actor WHERE Age != 20", "example": {"db_id": "musical", "query": "SELECT Name FROM actor WHERE Age != 20", "query_toks": ["SELECT", "Name", "FROM", "actor", "WHERE", "Age", "!", "=", "20"], "query_toks_no_value": ["select", "name", "from", "actor", "where", "age", "!", "=", "value"], "question": "List the name of actors whose age is not 20.", "question_toks": ["List", "the", "name", "of", "actors", "whose", "age", "is", "not", "20", "."], "guid": 1880}}
{"text": "musical: Musical_ID, Name, Year, Award, Category, Nominee, Result; actor: Actor_ID, Name, Musical_ID, Character, Duration, age | What are the names of actors and the musicals that they are in?", "sql": "SELECT T1.Name ,  T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID", "example": {"db_id": "musical", "query": "SELECT T1.Name ,  T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID", "query_toks": ["SELECT", "T1.Name", ",", "T2.Name", "FROM", "actor", "AS", "T1", "JOIN", "musical", "AS", "T2", "ON", "T1.Musical_ID", "=", "T2.Musical_ID"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "t2", ".", "name", "from", "actor", "as", "t1", "join", "musical", "as", "t2", "on", "t1", ".", "musical_id", "=", "t2", ".", "musical_id"], "question": "What are the names of actors and the musicals that they are in?", "question_toks": ["What", "are", "the", "names", "of", "actors", "and", "the", "musicals", "that", "they", "are", "in", "?"], "guid": 1881}}
{"text": "Songs: SongId, Title; Albums: AId, Title, Year, Label, Type; Band: Id, Firstname, Lastname; Instruments: SongId, BandmateId, Instrument; Performance: SongId, Bandmate, StagePosition; Tracklists: AlbumId, Position, SongId; Vocals: SongId, Bandmate, Type | What are the types of vocals used in the song \"Le Pop\"?", "sql": "SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Le Pop\"", "example": {"db_id": "music_2", "query": "SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Le Pop\"", "query_toks": ["SELECT", "TYPE", "FROM", "vocals", "AS", "T1", "JOIN", "songs", "AS", "T2", "ON", "T1.songid", "=", "T2.songid", "WHERE", "title", "=", "``", "Le", "Pop", "''"], "query_toks_no_value": ["select", "type", "from", "vocals", "as", "t1", "join", "songs", "as", "t2", "on", "t1", ".", "songid", "=", "t2", ".", "songid", "where", "title", "=", "value"], "question": "What are the types of vocals used in the song \"Le Pop\"?", "question_toks": ["What", "are", "the", "types", "of", "vocals", "used", "in", "the", "song", "``", "Le", "Pop", "''", "?"], "guid": 1882}}
{"text": "genre: g_name, rating, most_popular_in; artist: artist_name, country, gender, preferred_genre; files: f_id, artist_name, file_size, duration, formats; song: song_name, artist_name, country, f_id, genre_is, rating, languages, releasedate, resolution | Find the top 3 artists who have the largest number of songs works whose language is Bangla.", "sql": "SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.languages  =  \"bangla\" GROUP BY T2.artist_name ORDER BY count(*) DESC LIMIT 3", "example": {"db_id": "music_1", "query": "SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.languages  =  \"bangla\" GROUP BY T2.artist_name ORDER BY count(*) DESC LIMIT 3", "query_toks": ["SELECT", "T1.artist_name", "FROM", "artist", "AS", "T1", "JOIN", "song", "AS", "T2", "ON", "T1.artist_name", "=", "T2.artist_name", "WHERE", "T2.languages", "=", "``", "bangla", "''", "GROUP", "BY", "T2.artist_name", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "3"], "query_toks_no_value": ["select", "t1", ".", "artist_name", "from", "artist", "as", "t1", "join", "song", "as", "t2", "on", "t1", ".", "artist_name", "=", "t2", ".", "artist_name", "where", "t2", ".", "languages", "=", "value", "group", "by", "t2", ".", "artist_name", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Find the top 3 artists who have the largest number of songs works whose language is Bangla.", "question_toks": ["Find", "the", "top", "3", "artists", "who", "have", "the", "largest", "number", "of", "songs", "works", "whose", "language", "is", "Bangla", "."], "guid": 1883}}
{"text": "stadium: Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average; singer: Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male; concert: concert_ID, concert_Name, Theme, Stadium_ID, Year; singer_in_concert: concert_ID, Singer_ID | Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015.", "sql": "SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015", "example": {"db_id": "concert_singer", "query": "SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015", "query_toks": ["SELECT", "T2.name", ",", "T2.location", "FROM", "concert", "AS", "T1", "JOIN", "stadium", "AS", "T2", "ON", "T1.stadium_id", "=", "T2.stadium_id", "WHERE", "T1.Year", "=", "2014", "INTERSECT", "SELECT", "T2.name", ",", "T2.location", "FROM", "concert", "AS", "T1", "JOIN", "stadium", "AS", "T2", "ON", "T1.stadium_id", "=", "T2.stadium_id", "WHERE", "T1.Year", "=", "2015"], "query_toks_no_value": ["select", "t2", ".", "name", ",", "t2", ".", "location", "from", "concert", "as", "t1", "join", "stadium", "as", "t2", "on", "t1", ".", "stadium_id", "=", "t2", ".", "stadium_id", "where", "t1", ".", "year", "=", "value", "intersect", "select", "t2", ".", "name", ",", "t2", ".", "location", "from", "concert", "as", "t1", "join", "stadium", "as", "t2", "on", "t1", ".", "stadium_id", "=", "t2", ".", "stadium_id", "where", "t1", ".", "year", "=", "value"], "question": "Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015.", "question_toks": ["Find", "the", "name", "and", "location", "of", "the", "stadiums", "which", "some", "concerts", "happened", "in", "the", "years", "of", "both", "2014", "and", "2015", "."], "guid": 1884}}
{"text": "stadium: Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average; singer: Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male; concert: concert_ID, concert_Name, Theme, Stadium_ID, Year; singer_in_concert: concert_ID, Singer_ID | What are all the song names by singers who are older than average?", "sql": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)", "example": {"db_id": "concert_singer", "query": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)", "query_toks": ["SELECT", "song_name", "FROM", "singer", "WHERE", "age", ">", "(", "SELECT", "avg", "(", "age", ")", "FROM", "singer", ")"], "query_toks_no_value": ["select", "song_name", "from", "singer", "where", "age", ">", "(", "select", "avg", "(", "age", ")", "from", "singer", ")"], "question": "What are all the song names by singers who are older than average?", "question_toks": ["What", "are", "all", "the", "song", "names", "by", "singers", "who", "are", "older", "than", "average", "?"], "guid": 1885}}
{"text": "Songs: SongId, Title; Albums: AId, Title, Year, Label, Type; Band: Id, Firstname, Lastname; Instruments: SongId, BandmateId, Instrument; Performance: SongId, Bandmate, StagePosition; Tracklists: AlbumId, Position, SongId; Vocals: SongId, Bandmate, Type | What are the albums produced in year 2010?", "sql": "SELECT * FROM Albums WHERE YEAR  =  2010", "example": {"db_id": "music_2", "query": "SELECT * FROM Albums WHERE YEAR  =  2010", "query_toks": ["SELECT", "*", "FROM", "Albums", "WHERE", "YEAR", "=", "2010"], "query_toks_no_value": ["select", "*", "from", "albums", "where", "year", "=", "value"], "question": "What are the albums produced in year 2010?", "question_toks": ["What", "are", "the", "albums", "produced", "in", "year", "2010", "?"], "guid": 1886}}
{"text": "genre: g_name, rating, most_popular_in; artist: artist_name, country, gender, preferred_genre; files: f_id, artist_name, file_size, duration, formats; song: song_name, artist_name, country, f_id, genre_is, rating, languages, releasedate, resolution | What are the names of the different artists that have produced a song in English but have never receieved a rating higher than 8?", "sql": "SELECT DISTINCT artist_name FROM song WHERE languages  =  \"english\" EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating  >  8", "example": {"db_id": "music_1", "query": "SELECT DISTINCT artist_name FROM song WHERE languages  =  \"english\" EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating  >  8", "query_toks": ["SELECT", "DISTINCT", "artist_name", "FROM", "song", "WHERE", "languages", "=", "``", "english", "''", "EXCEPT", "SELECT", "DISTINCT", "artist_name", "FROM", "song", "WHERE", "rating", ">", "8"], "query_toks_no_value": ["select", "distinct", "artist_name", "from", "song", "where", "languages", "=", "value", "except", "select", "distinct", "artist_name", "from", "song", "where", "rating", ">", "value"], "question": "What are the names of the different artists that have produced a song in English but have never receieved a rating higher than 8?", "question_toks": ["What", "are", "the", "names", "of", "the", "different", "artists", "that", "have", "produced", "a", "song", "in", "English", "but", "have", "never", "receieved", "a", "rating", "higher", "than", "8", "?"], "guid": 1887}}
{"text": "stadium: Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average; singer: Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male; concert: concert_ID, concert_Name, Theme, Stadium_ID, Year; singer_in_concert: concert_ID, Singer_ID | What are the names of the singers who performed in a concert in 2014?", "sql": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014", "example": {"db_id": "concert_singer", "query": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014", "query_toks": ["SELECT", "T2.name", "FROM", "singer_in_concert", "AS", "T1", "JOIN", "singer", "AS", "T2", "ON", "T1.singer_id", "=", "T2.singer_id", "JOIN", "concert", "AS", "T3", "ON", "T1.concert_id", "=", "T3.concert_id", "WHERE", "T3.year", "=", "2014"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "singer_in_concert", "as", "t1", "join", "singer", "as", "t2", "on", "t1", ".", "singer_id", "=", "t2", ".", "singer_id", "join", "concert", "as", "t3", "on", "t1", ".", "concert_id", "=", "t3", ".", "concert_id", "where", "t3", ".", "year", "=", "value"], "question": "What are the names of the singers who performed in a concert in 2014?", "question_toks": ["What", "are", "the", "names", "of", "the", "singers", "who", "performed", "in", "a", "concert", "in", "2014", "?"], "guid": 1888}}
{"text": "genre: g_name, rating, most_popular_in; artist: artist_name, country, gender, preferred_genre; files: f_id, artist_name, file_size, duration, formats; song: song_name, artist_name, country, f_id, genre_is, rating, languages, releasedate, resolution | What are the names of the songs that are modern or sung in English?", "sql": "SELECT song_name FROM song WHERE genre_is  =  \"modern\" OR languages  =  \"english\"", "example": {"db_id": "music_1", "query": "SELECT song_name FROM song WHERE genre_is  =  \"modern\" OR languages  =  \"english\"", "query_toks": ["SELECT", "song_name", "FROM", "song", "WHERE", "genre_is", "=", "``", "modern", "''", "OR", "languages", "=", "``", "english", "''"], "query_toks_no_value": ["select", "song_name", "from", "song", "where", "genre_is", "=", "value", "or", "languages", "=", "value"], "question": "What are the names of the songs that are modern or sung in English?", "question_toks": ["What", "are", "the", "names", "of", "the", "songs", "that", "are", "modern", "or", "sung", "in", "English", "?"], "guid": 1889}}
{"text": "artist: Artist_ID, Artist, Age, Famous_Title, Famous_Release_date; volume: Volume_ID, Volume_Issue, Issue_Date, Weeks_on_Top, Song, Artist_ID; music_festival: ID, Music_Festival, Date_of_ceremony, Category, Volume, Result | Please show the date of ceremony of the volumes that last more than 2 weeks on top.", "sql": "SELECT T1.Date_of_ceremony FROM music_festival AS T1 JOIN volume AS T2 ON T1.Volume  =  T2.Volume_ID WHERE T2.Weeks_on_Top  >  2", "example": {"db_id": "music_4", "query": "SELECT T1.Date_of_ceremony FROM music_festival AS T1 JOIN volume AS T2 ON T1.Volume  =  T2.Volume_ID WHERE T2.Weeks_on_Top  >  2", "query_toks": ["SELECT", "T1.Date_of_ceremony", "FROM", "music_festival", "AS", "T1", "JOIN", "volume", "AS", "T2", "ON", "T1.Volume", "=", "T2.Volume_ID", "WHERE", "T2.Weeks_on_Top", ">", "2"], "query_toks_no_value": ["select", "t1", ".", "date_of_ceremony", "from", "music_festival", "as", "t1", "join", "volume", "as", "t2", "on", "t1", ".", "volume", "=", "t2", ".", "volume_id", "where", "t2", ".", "weeks_on_top", ">", "value"], "question": "Please show the date of ceremony of the volumes that last more than 2 weeks on top.", "question_toks": ["Please", "show", "the", "date", "of", "ceremony", "of", "the", "volumes", "that", "last", "more", "than", "2", "weeks", "on", "top", "."], "guid": 1890}}
{"text": "genre: g_name, rating, most_popular_in; artist: artist_name, country, gender, preferred_genre; files: f_id, artist_name, file_size, duration, formats; song: song_name, artist_name, country, f_id, genre_is, rating, languages, releasedate, resolution | What is the average song rating for each language?", "sql": "SELECT avg(rating) ,  languages FROM song GROUP BY languages", "example": {"db_id": "music_1", "query": "SELECT avg(rating) ,  languages FROM song GROUP BY languages", "query_toks": ["SELECT", "avg", "(", "rating", ")", ",", "languages", "FROM", "song", "GROUP", "BY", "languages"], "query_toks_no_value": ["select", "avg", "(", "rating", ")", ",", "languages", "from", "song", "group", "by", "languages"], "question": "What is the average song rating for each language?", "question_toks": ["What", "is", "the", "average", "song", "rating", "for", "each", "language", "?"], "guid": 1891}}
{"text": "conductor: Conductor_ID, Name, Age, Nationality, Year_of_Work; orchestra: Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format; performance: Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share; show: Show_ID, Performance_ID, If_first_show, Result, Attendance | List the record company shared by the most number of orchestras.", "sql": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1", "example": {"db_id": "orchestra", "query": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "Record_Company", "FROM", "orchestra", "GROUP", "BY", "Record_Company", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "record_company", "from", "orchestra", "group", "by", "record_company", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "List the record company shared by the most number of orchestras.", "question_toks": ["List", "the", "record", "company", "shared", "by", "the", "most", "number", "of", "orchestras", "."], "guid": 1892}}
{"text": "Songs: SongId, Title; Albums: AId, Title, Year, Label, Type; Band: Id, Firstname, Lastname; Instruments: SongId, BandmateId, Instrument; Performance: SongId, Bandmate, StagePosition; Tracklists: AlbumId, Position, SongId; Vocals: SongId, Bandmate, Type | Find all the vocal types.", "sql": "SELECT DISTINCT TYPE FROM vocals", "example": {"db_id": "music_2", "query": "SELECT DISTINCT TYPE FROM vocals", "query_toks": ["SELECT", "DISTINCT", "TYPE", "FROM", "vocals"], "query_toks_no_value": ["select", "distinct", "type", "from", "vocals"], "question": "Find all the vocal types.", "question_toks": ["Find", "all", "the", "vocal", "types", "."], "guid": 1893}}
{"text": "Songs: SongId, Title; Albums: AId, Title, Year, Label, Type; Band: Id, Firstname, Lastname; Instruments: SongId, BandmateId, Instrument; Performance: SongId, Bandmate, StagePosition; Tracklists: AlbumId, Position, SongId; Vocals: SongId, Bandmate, Type | How many different instruments does the musician with the last name \"Heilo\" use?", "sql": "SELECT count(DISTINCT instrument) FROM instruments AS T1 JOIN Band AS T2 ON T1.bandmateid  =  T2.id WHERE T2.lastname  =  \"Heilo\"", "example": {"db_id": "music_2", "query": "SELECT count(DISTINCT instrument) FROM instruments AS T1 JOIN Band AS T2 ON T1.bandmateid  =  T2.id WHERE T2.lastname  =  \"Heilo\"", "query_toks": ["SELECT", "count", "(", "DISTINCT", "instrument", ")", "FROM", "instruments", "AS", "T1", "JOIN", "Band", "AS", "T2", "ON", "T1.bandmateid", "=", "T2.id", "WHERE", "T2.lastname", "=", "``", "Heilo", "''"], "query_toks_no_value": ["select", "count", "(", "distinct", "instrument", ")", "from", "instruments", "as", "t1", "join", "band", "as", "t2", "on", "t1", ".", "bandmateid", "=", "t2", ".", "id", "where", "t2", ".", "lastname", "=", "value"], "question": "How many different instruments does the musician with the last name \"Heilo\" use?", "question_toks": ["How", "many", "different", "instruments", "does", "the", "musician", "with", "the", "last", "name", "``", "Heilo", "''", "use", "?"], "guid": 1894}}
{"text": "artist: Artist_ID, Artist, Age, Famous_Title, Famous_Release_date; volume: Volume_ID, Volume_Issue, Issue_Date, Weeks_on_Top, Song, Artist_ID; music_festival: ID, Music_Festival, Date_of_ceremony, Category, Volume, Result | Return the average number of weeks on top for volumes by artists that are at most 25 years old.", "sql": "SELECT avg(T2.Weeks_on_Top) FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  <=  25", "example": {"db_id": "music_4", "query": "SELECT avg(T2.Weeks_on_Top) FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  <=  25", "query_toks": ["SELECT", "avg", "(", "T2.Weeks_on_Top", ")", "FROM", "artist", "AS", "T1", "JOIN", "volume", "AS", "T2", "ON", "T1.Artist_ID", "=", "T2.Artist_ID", "WHERE", "T1.age", "<", "=", "25"], "query_toks_no_value": ["select", "avg", "(", "t2", ".", "weeks_on_top", ")", "from", "artist", "as", "t1", "join", "volume", "as", "t2", "on", "t1", ".", "artist_id", "=", "t2", ".", "artist_id", "where", "t1", ".", "age", "<", "=", "value"], "question": "Return the average number of weeks on top for volumes by artists that are at most 25 years old.", "question_toks": ["Return", "the", "average", "number", "of", "weeks", "on", "top", "for", "volumes", "by", "artists", "that", "are", "at", "most", "25", "years", "old", "."], "guid": 1895}}
{"text": "stadium: Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average; singer: Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male; concert: concert_ID, concert_Name, Theme, Stadium_ID, Year; singer_in_concert: concert_ID, Singer_ID | What are the locations and names of all stations with capacity between 5000 and 10000?", "sql": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000", "example": {"db_id": "concert_singer", "query": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000", "query_toks": ["SELECT", "LOCATION", ",", "name", "FROM", "stadium", "WHERE", "capacity", "BETWEEN", "5000", "AND", "10000"], "query_toks_no_value": ["select", "location", ",", "name", "from", "stadium", "where", "capacity", "between", "value", "and", "value"], "question": "What are the locations and names of all stations with capacity between 5000 and 10000?", "question_toks": ["What", "are", "the", "locations", "and", "names", "of", "all", "stations", "with", "capacity", "between", "5000", "and", "10000", "?"], "guid": 1896}}
{"text": "Songs: SongId, Title; Albums: AId, Title, Year, Label, Type; Band: Id, Firstname, Lastname; Instruments: SongId, BandmateId, Instrument; Performance: SongId, Bandmate, StagePosition; Tracklists: AlbumId, Position, SongId; Vocals: SongId, Bandmate, Type | What are the types of vocals that the band member with the first name \"Solveig\" played the most?", "sql": "SELECT TYPE FROM vocals AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id WHERE firstname  =  \"Solveig\" GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "music_2", "query": "SELECT TYPE FROM vocals AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id WHERE firstname  =  \"Solveig\" GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "TYPE", "FROM", "vocals", "AS", "T1", "JOIN", "band", "AS", "T2", "ON", "T1.bandmate", "=", "T2.id", "WHERE", "firstname", "=", "``", "Solveig", "''", "GROUP", "BY", "TYPE", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "type", "from", "vocals", "as", "t1", "join", "band", "as", "t2", "on", "t1", ".", "bandmate", "=", "t2", ".", "id", "where", "firstname", "=", "value", "group", "by", "type", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What are the types of vocals that the band member with the first name \"Solveig\" played the most?", "question_toks": ["What", "are", "the", "types", "of", "vocals", "that", "the", "band", "member", "with", "the", "first", "name", "``", "Solveig", "''", "played", "the", "most", "?"], "guid": 1897}}
{"text": "Songs: SongId, Title; Albums: AId, Title, Year, Label, Type; Band: Id, Firstname, Lastname; Instruments: SongId, BandmateId, Instrument; Performance: SongId, Bandmate, StagePosition; Tracklists: AlbumId, Position, SongId; Vocals: SongId, Bandmate, Type | What is the last name of the musician that has been at the back position the most?", "sql": "SELECT T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id WHERE stageposition  =  \"back\" GROUP BY lastname ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "music_2", "query": "SELECT T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id WHERE stageposition  =  \"back\" GROUP BY lastname ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T2.lastname", "FROM", "Performance", "AS", "T1", "JOIN", "Band", "AS", "T2", "ON", "T1.bandmate", "=", "T2.id", "WHERE", "stageposition", "=", "``", "back", "''", "GROUP", "BY", "lastname", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "lastname", "from", "performance", "as", "t1", "join", "band", "as", "t2", "on", "t1", ".", "bandmate", "=", "t2", ".", "id", "where", "stageposition", "=", "value", "group", "by", "lastname", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the last name of the musician that has been at the back position the most?", "question_toks": ["What", "is", "the", "last", "name", "of", "the", "musician", "that", "has", "been", "at", "the", "back", "position", "the", "most", "?"], "guid": 1898}}
{"text": "Songs: SongId, Title; Albums: AId, Title, Year, Label, Type; Band: Id, Firstname, Lastname; Instruments: SongId, BandmateId, Instrument; Performance: SongId, Bandmate, StagePosition; Tracklists: AlbumId, Position, SongId; Vocals: SongId, Bandmate, Type | What are all the songs in albums under label \"Universal Music Group\"?", "sql": "SELECT T3.title FROM albums AS T1 JOIN tracklists AS T2 ON T1.aid  =  T2.albumid JOIN songs AS T3 ON T2.songid  =  T3.songid WHERE t1.label  =  \"Universal Music Group\"", "example": {"db_id": "music_2", "query": "SELECT T3.title FROM albums AS T1 JOIN tracklists AS T2 ON T1.aid  =  T2.albumid JOIN songs AS T3 ON T2.songid  =  T3.songid WHERE t1.label  =  \"Universal Music Group\"", "query_toks": ["SELECT", "T3.title", "FROM", "albums", "AS", "T1", "JOIN", "tracklists", "AS", "T2", "ON", "T1.aid", "=", "T2.albumid", "JOIN", "songs", "AS", "T3", "ON", "T2.songid", "=", "T3.songid", "WHERE", "t1.label", "=", "``", "Universal", "Music", "Group", "''"], "query_toks_no_value": ["select", "t3", ".", "title", "from", "albums", "as", "t1", "join", "tracklists", "as", "t2", "on", "t1", ".", "aid", "=", "t2", ".", "albumid", "join", "songs", "as", "t3", "on", "t2", ".", "songid", "=", "t3", ".", "songid", "where", "t1", ".", "label", "=", "value"], "question": "What are all the songs in albums under label \"Universal Music Group\"?", "question_toks": ["What", "are", "all", "the", "songs", "in", "albums", "under", "label", "``", "Universal", "Music", "Group", "''", "?"], "guid": 1899}}
{"text": "Songs: SongId, Title; Albums: AId, Title, Year, Label, Type; Band: Id, Firstname, Lastname; Instruments: SongId, BandmateId, Instrument; Performance: SongId, Bandmate, StagePosition; Tracklists: AlbumId, Position, SongId; Vocals: SongId, Bandmate, Type | What are the names of all songs produced by the artist with the first name \"Marianne\"?", "sql": "SELECT T3.Title FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T2.firstname  =  \"Marianne\"", "example": {"db_id": "music_2", "query": "SELECT T3.Title FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T2.firstname  =  \"Marianne\"", "query_toks": ["SELECT", "T3.Title", "FROM", "Performance", "AS", "T1", "JOIN", "Band", "AS", "T2", "ON", "T1.bandmate", "=", "T2.id", "JOIN", "Songs", "AS", "T3", "ON", "T3.SongId", "=", "T1.SongId", "WHERE", "T2.firstname", "=", "``", "Marianne", "''"], "query_toks_no_value": ["select", "t3", ".", "title", "from", "performance", "as", "t1", "join", "band", "as", "t2", "on", "t1", ".", "bandmate", "=", "t2", ".", "id", "join", "songs", "as", "t3", "on", "t3", ".", "songid", "=", "t1", ".", "songid", "where", "t2", ".", "firstname", "=", "value"], "question": "What are the names of all songs produced by the artist with the first name \"Marianne\"?", "question_toks": ["What", "are", "the", "names", "of", "all", "songs", "produced", "by", "the", "artist", "with", "the", "first", "name", "``", "Marianne", "''", "?"], "guid": 1900}}
{"text": "musical: Musical_ID, Name, Year, Award, Category, Nominee, Result; actor: Actor_ID, Name, Musical_ID, Character, Duration, age | Who are the nominees who have been nominated for both a Tony Award and a Drama Desk Award?", "sql": "SELECT Nominee FROM musical WHERE Award  =  \"Tony Award\" INTERSECT SELECT Nominee FROM musical WHERE Award  =  \"Drama Desk Award\"", "example": {"db_id": "musical", "query": "SELECT Nominee FROM musical WHERE Award  =  \"Tony Award\" INTERSECT SELECT Nominee FROM musical WHERE Award  =  \"Drama Desk Award\"", "query_toks": ["SELECT", "Nominee", "FROM", "musical", "WHERE", "Award", "=", "``", "Tony", "Award", "''", "INTERSECT", "SELECT", "Nominee", "FROM", "musical", "WHERE", "Award", "=", "``", "Drama", "Desk", "Award", "''"], "query_toks_no_value": ["select", "nominee", "from", "musical", "where", "award", "=", "value", "intersect", "select", "nominee", "from", "musical", "where", "award", "=", "value"], "question": "Who are the nominees who have been nominated for both a Tony Award and a Drama Desk Award?", "question_toks": ["Who", "are", "the", "nominees", "who", "have", "been", "nominated", "for", "both", "a", "Tony", "Award", "and", "a", "Drama", "Desk", "Award", "?"], "guid": 1901}}
{"text": "artist: Artist_ID, Artist, Age, Famous_Title, Famous_Release_date; volume: Volume_ID, Volume_Issue, Issue_Date, Weeks_on_Top, Song, Artist_ID; music_festival: ID, Music_Festival, Date_of_ceremony, Category, Volume, Result | What are the songs in volumes associated with the artist aged 32 or older?", "sql": "SELECT T2.Song FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  >=  32", "example": {"db_id": "music_4", "query": "SELECT T2.Song FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  >=  32", "query_toks": ["SELECT", "T2.Song", "FROM", "artist", "AS", "T1", "JOIN", "volume", "AS", "T2", "ON", "T1.Artist_ID", "=", "T2.Artist_ID", "WHERE", "T1.age", ">", "=", "32"], "query_toks_no_value": ["select", "t2", ".", "song", "from", "artist", "as", "t1", "join", "volume", "as", "t2", "on", "t1", ".", "artist_id", "=", "t2", ".", "artist_id", "where", "t1", ".", "age", ">", "=", "value"], "question": "What are the songs in volumes associated with the artist aged 32 or older?", "question_toks": ["What", "are", "the", "songs", "in", "volumes", "associated", "with", "the", "artist", "aged", "32", "or", "older", "?"], "guid": 1902}}
{"text": "artist: Artist_ID, Artist, Age, Famous_Title, Famous_Release_date; volume: Volume_ID, Volume_Issue, Issue_Date, Weeks_on_Top, Song, Artist_ID; music_festival: ID, Music_Festival, Date_of_ceremony, Category, Volume, Result | Return the dates of ceremony and the results of all music festivals", "sql": "SELECT Date_of_ceremony ,  RESULT FROM music_festival", "example": {"db_id": "music_4", "query": "SELECT Date_of_ceremony ,  RESULT FROM music_festival", "query_toks": ["SELECT", "Date_of_ceremony", ",", "RESULT", "FROM", "music_festival"], "query_toks_no_value": ["select", "date_of_ceremony", ",", "result", "from", "music_festival"], "question": "Return the dates of ceremony and the results of all music festivals", "question_toks": ["Return", "the", "dates", "of", "ceremony", "and", "the", "results", "of", "all", "music", "festivals"], "guid": 1903}}
{"text": "artist: Artist_ID, Artist, Age, Famous_Title, Famous_Release_date; volume: Volume_ID, Volume_Issue, Issue_Date, Weeks_on_Top, Song, Artist_ID; music_festival: ID, Music_Festival, Date_of_ceremony, Category, Volume, Result | What are the category of music festivals with result \"Awarded\"?", "sql": "SELECT Category FROM music_festival WHERE RESULT  =  \"Awarded\"", "example": {"db_id": "music_4", "query": "SELECT Category FROM music_festival WHERE RESULT  =  \"Awarded\"", "query_toks": ["SELECT", "Category", "FROM", "music_festival", "WHERE", "RESULT", "=", "``", "Awarded", "''"], "query_toks_no_value": ["select", "category", "from", "music_festival", "where", "result", "=", "value"], "question": "What are the category of music festivals with result \"Awarded\"?", "question_toks": ["What", "are", "the", "category", "of", "music", "festivals", "with", "result", "``", "Awarded", "''", "?"], "guid": 1904}}
{"text": "conductor: Conductor_ID, Name, Age, Nationality, Year_of_Work; orchestra: Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format; performance: Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share; show: Show_ID, Performance_ID, If_first_show, Result, Attendance | Show the name of the conductor that has conducted the most number of orchestras.", "sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1", "example": {"db_id": "orchestra", "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.Name", "FROM", "conductor", "AS", "T1", "JOIN", "orchestra", "AS", "T2", "ON", "T1.Conductor_ID", "=", "T2.Conductor_ID", "GROUP", "BY", "T2.Conductor_ID", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "conductor", "as", "t1", "join", "orchestra", "as", "t2", "on", "t1", ".", "conductor_id", "=", "t2", ".", "conductor_id", "group", "by", "t2", ".", "conductor_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Show the name of the conductor that has conducted the most number of orchestras.", "question_toks": ["Show", "the", "name", "of", "the", "conductor", "that", "has", "conducted", "the", "most", "number", "of", "orchestras", "."], "guid": 1905}}
{"text": "artist: Artist_ID, Artist, Age, Famous_Title, Famous_Release_date; volume: Volume_ID, Volume_Issue, Issue_Date, Weeks_on_Top, Song, Artist_ID; music_festival: ID, Music_Festival, Date_of_ceremony, Category, Volume, Result | What are the songs in volumes with more than 1 week on top?", "sql": "SELECT Song FROM volume WHERE Weeks_on_Top  >  1", "example": {"db_id": "music_4", "query": "SELECT Song FROM volume WHERE Weeks_on_Top  >  1", "query_toks": ["SELECT", "Song", "FROM", "volume", "WHERE", "Weeks_on_Top", ">", "1"], "query_toks_no_value": ["select", "song", "from", "volume", "where", "weeks_on_top", ">", "value"], "question": "What are the songs in volumes with more than 1 week on top?", "question_toks": ["What", "are", "the", "songs", "in", "volumes", "with", "more", "than", "1", "week", "on", "top", "?"], "guid": 1906}}
{"text": "genre: g_name, rating, most_popular_in; artist: artist_name, country, gender, preferred_genre; files: f_id, artist_name, file_size, duration, formats; song: song_name, artist_name, country, f_id, genre_is, rating, languages, releasedate, resolution | Find the names of all English songs.", "sql": "SELECT song_name FROM song WHERE languages  =  \"english\"", "example": {"db_id": "music_1", "query": "SELECT song_name FROM song WHERE languages  =  \"english\"", "query_toks": ["SELECT", "song_name", "FROM", "song", "WHERE", "languages", "=", "``", "english", "''"], "query_toks_no_value": ["select", "song_name", "from", "song", "where", "languages", "=", "value"], "question": "Find the names of all English songs.", "question_toks": ["Find", "the", "names", "of", "all", "English", "songs", "."], "guid": 1907}}
{"text": "musical: Musical_ID, Name, Year, Award, Category, Nominee, Result; actor: Actor_ID, Name, Musical_ID, Character, Duration, age | Show the nominees that have nominated musicals for both \"Tony Award\" and \"Drama Desk Award\".", "sql": "SELECT Nominee FROM musical WHERE Award  =  \"Tony Award\" INTERSECT SELECT Nominee FROM musical WHERE Award  =  \"Drama Desk Award\"", "example": {"db_id": "musical", "query": "SELECT Nominee FROM musical WHERE Award  =  \"Tony Award\" INTERSECT SELECT Nominee FROM musical WHERE Award  =  \"Drama Desk Award\"", "query_toks": ["SELECT", "Nominee", "FROM", "musical", "WHERE", "Award", "=", "``", "Tony", "Award", "''", "INTERSECT", "SELECT", "Nominee", "FROM", "musical", "WHERE", "Award", "=", "``", "Drama", "Desk", "Award", "''"], "query_toks_no_value": ["select", "nominee", "from", "musical", "where", "award", "=", "value", "intersect", "select", "nominee", "from", "musical", "where", "award", "=", "value"], "question": "Show the nominees that have nominated musicals for both \"Tony Award\" and \"Drama Desk Award\".", "question_toks": ["Show", "the", "nominees", "that", "have", "nominated", "musicals", "for", "both", "``", "Tony", "Award", "''", "and", "``", "Drama", "Desk", "Award", "''", "."], "guid": 1908}}
{"text": "Songs: SongId, Title; Albums: AId, Title, Year, Label, Type; Band: Id, Firstname, Lastname; Instruments: SongId, BandmateId, Instrument; Performance: SongId, Bandmate, StagePosition; Tracklists: AlbumId, Position, SongId; Vocals: SongId, Bandmate, Type | Find all the albums in 2012.", "sql": "SELECT * FROM Albums WHERE YEAR  =  2012", "example": {"db_id": "music_2", "query": "SELECT * FROM Albums WHERE YEAR  =  2012", "query_toks": ["SELECT", "*", "FROM", "Albums", "WHERE", "YEAR", "=", "2012"], "query_toks_no_value": ["select", "*", "from", "albums", "where", "year", "=", "value"], "question": "Find all the albums in 2012.", "question_toks": ["Find", "all", "the", "albums", "in", "2012", "."], "guid": 1909}}
{"text": "artist: Artist_ID, Artist, Age, Famous_Title, Famous_Release_date; volume: Volume_ID, Volume_Issue, Issue_Date, Weeks_on_Top, Song, Artist_ID; music_festival: ID, Music_Festival, Date_of_ceremony, Category, Volume, Result | What are the famous titles of artists who do not have any volumes?", "sql": "SELECT Famous_Title FROM artist WHERE Artist_ID NOT IN(SELECT Artist_ID FROM volume)", "example": {"db_id": "music_4", "query": "SELECT Famous_Title FROM artist WHERE Artist_ID NOT IN(SELECT Artist_ID FROM volume)", "query_toks": ["SELECT", "Famous_Title", "FROM", "artist", "WHERE", "Artist_ID", "NOT", "IN", "(", "SELECT", "Artist_ID", "FROM", "volume", ")"], "query_toks_no_value": ["select", "famous_title", "from", "artist", "where", "artist_id", "not", "in", "(", "select", "artist_id", "from", "volume", ")"], "question": "What are the famous titles of artists who do not have any volumes?", "question_toks": ["What", "are", "the", "famous", "titles", "of", "artists", "who", "do", "not", "have", "any", "volumes", "?"], "guid": 1910}}
{"text": "artist: Artist_ID, Artist, Age, Famous_Title, Famous_Release_date; volume: Volume_ID, Volume_Issue, Issue_Date, Weeks_on_Top, Song, Artist_ID; music_festival: ID, Music_Festival, Date_of_ceremony, Category, Volume, Result | Return the number of music festivals of each category.", "sql": "SELECT Category ,  COUNT(*) FROM music_festival GROUP BY Category", "example": {"db_id": "music_4", "query": "SELECT Category ,  COUNT(*) FROM music_festival GROUP BY Category", "query_toks": ["SELECT", "Category", ",", "COUNT", "(", "*", ")", "FROM", "music_festival", "GROUP", "BY", "Category"], "query_toks_no_value": ["select", "category", ",", "count", "(", "*", ")", "from", "music_festival", "group", "by", "category"], "question": "Return the number of music festivals of each category.", "question_toks": ["Return", "the", "number", "of", "music", "festivals", "of", "each", "category", "."], "guid": 1911}}
{"text": "conductor: Conductor_ID, Name, Age, Nationality, Year_of_Work; orchestra: Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format; performance: Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share; show: Show_ID, Performance_ID, If_first_show, Result, Attendance | What are the major record formats of orchestras, sorted by their frequency?", "sql": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC", "example": {"db_id": "orchestra", "query": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC", "query_toks": ["SELECT", "Major_Record_Format", "FROM", "orchestra", "GROUP", "BY", "Major_Record_Format", "ORDER", "BY", "COUNT", "(", "*", ")", "ASC"], "query_toks_no_value": ["select", "major_record_format", "from", "orchestra", "group", "by", "major_record_format", "order", "by", "count", "(", "*", ")", "asc"], "question": "What are the major record formats of orchestras, sorted by their frequency?", "question_toks": ["What", "are", "the", "major", "record", "formats", "of", "orchestras", ",", "sorted", "by", "their", "frequency", "?"], "guid": 1912}}
{"text": "conductor: Conductor_ID, Name, Age, Nationality, Year_of_Work; orchestra: Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format; performance: Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share; show: Show_ID, Performance_ID, If_first_show, Result, Attendance | What are the orchestras that do not have any performances?", "sql": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)", "example": {"db_id": "orchestra", "query": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)", "query_toks": ["SELECT", "Orchestra", "FROM", "orchestra", "WHERE", "Orchestra_ID", "NOT", "IN", "(", "SELECT", "Orchestra_ID", "FROM", "performance", ")"], "query_toks_no_value": ["select", "orchestra", "from", "orchestra", "where", "orchestra_id", "not", "in", "(", "select", "orchestra_id", "from", "performance", ")"], "question": "What are the orchestras that do not have any performances?", "question_toks": ["What", "are", "the", "orchestras", "that", "do", "not", "have", "any", "performances", "?"], "guid": 1913}}
{"text": "Songs: SongId, Title; Albums: AId, Title, Year, Label, Type; Band: Id, Firstname, Lastname; Instruments: SongId, BandmateId, Instrument; Performance: SongId, Bandmate, StagePosition; Tracklists: AlbumId, Position, SongId; Vocals: SongId, Bandmate, Type | What is the type of vocals that the band member with the last name \"Heilo\" played the most?", "sql": "SELECT TYPE FROM vocals AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id WHERE lastname  =  \"Heilo\" GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "music_2", "query": "SELECT TYPE FROM vocals AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id WHERE lastname  =  \"Heilo\" GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "TYPE", "FROM", "vocals", "AS", "T1", "JOIN", "band", "AS", "T2", "ON", "T1.bandmate", "=", "T2.id", "WHERE", "lastname", "=", "``", "Heilo", "''", "GROUP", "BY", "TYPE", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "type", "from", "vocals", "as", "t1", "join", "band", "as", "t2", "on", "t1", ".", "bandmate", "=", "t2", ".", "id", "where", "lastname", "=", "value", "group", "by", "type", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the type of vocals that the band member with the last name \"Heilo\" played the most?", "question_toks": ["What", "is", "the", "type", "of", "vocals", "that", "the", "band", "member", "with", "the", "last", "name", "``", "Heilo", "''", "played", "the", "most", "?"], "guid": 1914}}
{"text": "genre: g_name, rating, most_popular_in; artist: artist_name, country, gender, preferred_genre; files: f_id, artist_name, file_size, duration, formats; song: song_name, artist_name, country, f_id, genre_is, rating, languages, releasedate, resolution | What are the different names and countries of origins for all artists whose song ratings are above 9?", "sql": "SELECT DISTINCT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.rating  >  9", "example": {"db_id": "music_1", "query": "SELECT DISTINCT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.rating  >  9", "query_toks": ["SELECT", "DISTINCT", "T1.artist_name", ",", "T1.country", "FROM", "artist", "AS", "T1", "JOIN", "song", "AS", "T2", "ON", "T1.artist_name", "=", "T2.artist_name", "WHERE", "T2.rating", ">", "9"], "query_toks_no_value": ["select", "distinct", "t1", ".", "artist_name", ",", "t1", ".", "country", "from", "artist", "as", "t1", "join", "song", "as", "t2", "on", "t1", ".", "artist_name", "=", "t2", ".", "artist_name", "where", "t2", ".", "rating", ">", "value"], "question": "What are the different names and countries of origins for all artists whose song ratings are above 9?", "question_toks": ["What", "are", "the", "different", "names", "and", "countries", "of", "origins", "for", "all", "artists", "whose", "song", "ratings", "are", "above", "9", "?"], "guid": 1915}}
{"text": "Songs: SongId, Title; Albums: AId, Title, Year, Label, Type; Band: Id, Firstname, Lastname; Instruments: SongId, BandmateId, Instrument; Performance: SongId, Bandmate, StagePosition; Tracklists: AlbumId, Position, SongId; Vocals: SongId, Bandmate, Type | What are the first and last names of the performer who was in the back stage position for the song \"Badlands\"?", "sql": "SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  \"Badlands\" AND T1.StagePosition  =  \"back\"", "example": {"db_id": "music_2", "query": "SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  \"Badlands\" AND T1.StagePosition  =  \"back\"", "query_toks": ["SELECT", "T2.firstname", ",", "T2.lastname", "FROM", "Performance", "AS", "T1", "JOIN", "Band", "AS", "T2", "ON", "T1.bandmate", "=", "T2.id", "JOIN", "Songs", "AS", "T3", "ON", "T3.SongId", "=", "T1.SongId", "WHERE", "T3.Title", "=", "``", "Badlands", "''", "AND", "T1.StagePosition", "=", "``", "back", "''"], "query_toks_no_value": ["select", "t2", ".", "firstname", ",", "t2", ".", "lastname", "from", "performance", "as", "t1", "join", "band", "as", "t2", "on", "t1", ".", "bandmate", "=", "t2", ".", "id", "join", "songs", "as", "t3", "on", "t3", ".", "songid", "=", "t1", ".", "songid", "where", "t3", ".", "title", "=", "value", "and", "t1", ".", "stageposition", "=", "value"], "question": "What are the first and last names of the performer who was in the back stage position for the song \"Badlands\"?", "question_toks": ["What", "are", "the", "first", "and", "last", "names", "of", "the", "performer", "who", "was", "in", "the", "back", "stage", "position", "for", "the", "song", "``", "Badlands", "''", "?"], "guid": 1916}}
{"text": "genre: g_name, rating, most_popular_in; artist: artist_name, country, gender, preferred_genre; files: f_id, artist_name, file_size, duration, formats; song: song_name, artist_name, country, f_id, genre_is, rating, languages, releasedate, resolution | What are the ids of all songs that are available on mp4 or have a higher resolution than 720?", "sql": "SELECT f_id FROM files WHERE formats  =  \"mp4\" UNION SELECT f_id FROM song WHERE resolution  >  720", "example": {"db_id": "music_1", "query": "SELECT f_id FROM files WHERE formats  =  \"mp4\" UNION SELECT f_id FROM song WHERE resolution  >  720", "query_toks": ["SELECT", "f_id", "FROM", "files", "WHERE", "formats", "=", "``", "mp4", "''", "UNION", "SELECT", "f_id", "FROM", "song", "WHERE", "resolution", ">", "720"], "query_toks_no_value": ["select", "f_id", "from", "files", "where", "formats", "=", "value", "union", "select", "f_id", "from", "song", "where", "resolution", ">", "value"], "question": "What are the ids of all songs that are available on mp4 or have a higher resolution than 720?", "question_toks": ["What", "are", "the", "ids", "of", "all", "songs", "that", "are", "available", "on", "mp4", "or", "have", "a", "higher", "resolution", "than", "720", "?"], "guid": 1917}}
{"text": "Songs: SongId, Title; Albums: AId, Title, Year, Label, Type; Band: Id, Firstname, Lastname; Instruments: SongId, BandmateId, Instrument; Performance: SongId, Bandmate, StagePosition; Tracklists: AlbumId, Position, SongId; Vocals: SongId, Bandmate, Type | Find the number of bands.", "sql": "SELECT count(*) FROM Band", "example": {"db_id": "music_2", "query": "SELECT count(*) FROM Band", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Band"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "band"], "question": "Find the number of bands.", "question_toks": ["Find", "the", "number", "of", "bands", "."], "guid": 1918}}
{"text": "stadium: Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average; singer: Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male; concert: concert_ID, concert_Name, Theme, Stadium_ID, Year; singer_in_concert: concert_ID, Singer_ID | What are the names of the singers and number of concerts for each person?", "sql": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id", "example": {"db_id": "concert_singer", "query": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id", "query_toks": ["SELECT", "T2.name", ",", "count", "(", "*", ")", "FROM", "singer_in_concert", "AS", "T1", "JOIN", "singer", "AS", "T2", "ON", "T1.singer_id", "=", "T2.singer_id", "GROUP", "BY", "T2.singer_id"], "query_toks_no_value": ["select", "t2", ".", "name", ",", "count", "(", "*", ")", "from", "singer_in_concert", "as", "t1", "join", "singer", "as", "t2", "on", "t1", ".", "singer_id", "=", "t2", ".", "singer_id", "group", "by", "t2", ".", "singer_id"], "question": "What are the names of the singers and number of concerts for each person?", "question_toks": ["What", "are", "the", "names", "of", "the", "singers", "and", "number", "of", "concerts", "for", "each", "person", "?"], "guid": 1919}}
{"text": "artist: Artist_ID, Artist, Age, Famous_Title, Famous_Release_date; volume: Volume_ID, Volume_Issue, Issue_Date, Weeks_on_Top, Song, Artist_ID; music_festival: ID, Music_Festival, Date_of_ceremony, Category, Volume, Result | Return the famous titles for artists that have volumes that lasted more than 2 weeks on top.", "sql": "SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T2.Weeks_on_Top  >  2", "example": {"db_id": "music_4", "query": "SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T2.Weeks_on_Top  >  2", "query_toks": ["SELECT", "T1.Famous_Title", "FROM", "artist", "AS", "T1", "JOIN", "volume", "AS", "T2", "ON", "T1.Artist_ID", "=", "T2.Artist_ID", "WHERE", "T2.Weeks_on_Top", ">", "2"], "query_toks_no_value": ["select", "t1", ".", "famous_title", "from", "artist", "as", "t1", "join", "volume", "as", "t2", "on", "t1", ".", "artist_id", "=", "t2", ".", "artist_id", "where", "t2", ".", "weeks_on_top", ">", "value"], "question": "Return the famous titles for artists that have volumes that lasted more than 2 weeks on top.", "question_toks": ["Return", "the", "famous", "titles", "for", "artists", "that", "have", "volumes", "that", "lasted", "more", "than", "2", "weeks", "on", "top", "."], "guid": 1920}}
{"text": "stadium: Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average; singer: Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male; concert: concert_ID, concert_Name, Theme, Stadium_ID, Year; singer_in_concert: concert_ID, Singer_ID | What is the average, minimum, and maximum age of all singers from France?", "sql": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'", "example": {"db_id": "concert_singer", "query": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'", "query_toks": ["SELECT", "avg", "(", "age", ")", ",", "min", "(", "age", ")", ",", "max", "(", "age", ")", "FROM", "singer", "WHERE", "country", "=", "'France", "'"], "query_toks_no_value": ["select", "avg", "(", "age", ")", ",", "min", "(", "age", ")", ",", "max", "(", "age", ")", "from", "singer", "where", "country", "=", "value"], "question": "What is the average, minimum, and maximum age of all singers from France?", "question_toks": ["What", "is", "the", "average", ",", "minimum", ",", "and", "maximum", "age", "of", "all", "singers", "from", "France", "?"], "guid": 1921}}
{"text": "Songs: SongId, Title; Albums: AId, Title, Year, Label, Type; Band: Id, Firstname, Lastname; Instruments: SongId, BandmateId, Instrument; Performance: SongId, Bandmate, StagePosition; Tracklists: AlbumId, Position, SongId; Vocals: SongId, Bandmate, Type | Which song has the most vocals?", "sql": "SELECT title FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid GROUP BY T1.songid ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "music_2", "query": "SELECT title FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid GROUP BY T1.songid ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "title", "FROM", "vocals", "AS", "T1", "JOIN", "songs", "AS", "T2", "ON", "T1.songid", "=", "T2.songid", "GROUP", "BY", "T1.songid", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "title", "from", "vocals", "as", "t1", "join", "songs", "as", "t2", "on", "t1", ".", "songid", "=", "t2", ".", "songid", "group", "by", "t1", ".", "songid", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which song has the most vocals?", "question_toks": ["Which", "song", "has", "the", "most", "vocals", "?"], "guid": 1922}}
{"text": "conductor: Conductor_ID, Name, Age, Nationality, Year_of_Work; orchestra: Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format; performance: Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share; show: Show_ID, Performance_ID, If_first_show, Result, Attendance | Return the average attendance across all shows.", "sql": "SELECT avg(Attendance) FROM SHOW", "example": {"db_id": "orchestra", "query": "SELECT avg(Attendance) FROM SHOW", "query_toks": ["SELECT", "avg", "(", "Attendance", ")", "FROM", "SHOW"], "query_toks_no_value": ["select", "avg", "(", "attendance", ")", "from", "show"], "question": "Return the average attendance across all shows.", "question_toks": ["Return", "the", "average", "attendance", "across", "all", "shows", "."], "guid": 1923}}
{"text": "genre: g_name, rating, most_popular_in; artist: artist_name, country, gender, preferred_genre; files: f_id, artist_name, file_size, duration, formats; song: song_name, artist_name, country, f_id, genre_is, rating, languages, releasedate, resolution | What are the names and countries of origin for the artists who produced the top three highly rated songs.", "sql": "SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name ORDER BY T2.rating DESC LIMIT 3", "example": {"db_id": "music_1", "query": "SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name ORDER BY T2.rating DESC LIMIT 3", "query_toks": ["SELECT", "T1.artist_name", ",", "T1.country", "FROM", "artist", "AS", "T1", "JOIN", "song", "AS", "T2", "ON", "T1.artist_name", "=", "T2.artist_name", "ORDER", "BY", "T2.rating", "DESC", "LIMIT", "3"], "query_toks_no_value": ["select", "t1", ".", "artist_name", ",", "t1", ".", "country", "from", "artist", "as", "t1", "join", "song", "as", "t2", "on", "t1", ".", "artist_name", "=", "t2", ".", "artist_name", "order", "by", "t2", ".", "rating", "desc", "limit", "value"], "question": "What are the names and countries of origin for the artists who produced the top three highly rated songs.", "question_toks": ["What", "are", "the", "names", "and", "countries", "of", "origin", "for", "the", "artists", "who", "produced", "the", "top", "three", "highly", "rated", "songs", "."], "guid": 1924}}
{"text": "singer: Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship; song: Song_ID, Title, Singer_ID, Sales, Highest_Position | List the name of singers whose citizenship is not \"France\".", "sql": "SELECT Name FROM singer WHERE Citizenship != \"France\"", "example": {"db_id": "singer", "query": "SELECT Name FROM singer WHERE Citizenship != \"France\"", "query_toks": ["SELECT", "Name", "FROM", "singer", "WHERE", "Citizenship", "!", "=", "``", "France", "''"], "query_toks_no_value": ["select", "name", "from", "singer", "where", "citizenship", "!", "=", "value"], "question": "List the name of singers whose citizenship is not \"France\".", "question_toks": ["List", "the", "name", "of", "singers", "whose", "citizenship", "is", "not", "``", "France", "''", "."], "guid": 1925}}
{"text": "singer: Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship; song: Song_ID, Title, Singer_ID, Sales, Highest_Position | What are the names of singers ordered by ascending net worth?", "sql": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC", "example": {"db_id": "singer", "query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC", "query_toks": ["SELECT", "Name", "FROM", "singer", "ORDER", "BY", "Net_Worth_Millions", "ASC"], "query_toks_no_value": ["select", "name", "from", "singer", "order", "by", "net_worth_millions", "asc"], "question": "What are the names of singers ordered by ascending net worth?", "question_toks": ["What", "are", "the", "names", "of", "singers", "ordered", "by", "ascending", "net", "worth", "?"], "guid": 1926}}
{"text": "singer: Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship; song: Song_ID, Title, Singer_ID, Sales, Highest_Position | What are the names of the singers who are not French citizens?", "sql": "SELECT Name FROM singer WHERE Citizenship != \"France\"", "example": {"db_id": "singer", "query": "SELECT Name FROM singer WHERE Citizenship != \"France\"", "query_toks": ["SELECT", "Name", "FROM", "singer", "WHERE", "Citizenship", "!", "=", "``", "France", "''"], "query_toks_no_value": ["select", "name", "from", "singer", "where", "citizenship", "!", "=", "value"], "question": "What are the names of the singers who are not French citizens?", "question_toks": ["What", "are", "the", "names", "of", "the", "singers", "who", "are", "not", "French", "citizens", "?"], "guid": 1927}}
{"text": "artist: Artist_ID, Artist, Age, Famous_Title, Famous_Release_date; volume: Volume_ID, Volume_Issue, Issue_Date, Weeks_on_Top, Song, Artist_ID; music_festival: ID, Music_Festival, Date_of_ceremony, Category, Volume, Result | Count the number of artists who have had volumes.", "sql": "SELECT COUNT(DISTINCT Artist_ID) FROM volume", "example": {"db_id": "music_4", "query": "SELECT COUNT(DISTINCT Artist_ID) FROM volume", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "Artist_ID", ")", "FROM", "volume"], "query_toks_no_value": ["select", "count", "(", "distinct", "artist_id", ")", "from", "volume"], "question": "Count the number of artists who have had volumes.", "question_toks": ["Count", "the", "number", "of", "artists", "who", "have", "had", "volumes", "."], "guid": 1928}}
{"text": "genre: g_name, rating, most_popular_in; artist: artist_name, country, gender, preferred_genre; files: f_id, artist_name, file_size, duration, formats; song: song_name, artist_name, country, f_id, genre_is, rating, languages, releasedate, resolution | Find the names of the artists who have produced English songs but have never received rating higher than 8.", "sql": "SELECT DISTINCT artist_name FROM song WHERE languages  =  \"english\" EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating  >  8", "example": {"db_id": "music_1", "query": "SELECT DISTINCT artist_name FROM song WHERE languages  =  \"english\" EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating  >  8", "query_toks": ["SELECT", "DISTINCT", "artist_name", "FROM", "song", "WHERE", "languages", "=", "``", "english", "''", "EXCEPT", "SELECT", "DISTINCT", "artist_name", "FROM", "song", "WHERE", "rating", ">", "8"], "query_toks_no_value": ["select", "distinct", "artist_name", "from", "song", "where", "languages", "=", "value", "except", "select", "distinct", "artist_name", "from", "song", "where", "rating", ">", "value"], "question": "Find the names of the artists who have produced English songs but have never received rating higher than 8.", "question_toks": ["Find", "the", "names", "of", "the", "artists", "who", "have", "produced", "English", "songs", "but", "have", "never", "received", "rating", "higher", "than", "8", "."], "guid": 1929}}
{"text": "musical: Musical_ID, Name, Year, Award, Category, Nominee, Result; actor: Actor_ID, Name, Musical_ID, Character, Duration, age | Return the characters for actors, ordered by age descending.", "sql": "SELECT Character FROM actor ORDER BY age DESC", "example": {"db_id": "musical", "query": "SELECT Character FROM actor ORDER BY age DESC", "query_toks": ["SELECT", "Character", "FROM", "actor", "ORDER", "BY", "age", "DESC"], "query_toks_no_value": ["select", "character", "from", "actor", "order", "by", "age", "desc"], "question": "Return the characters for actors, ordered by age descending.", "question_toks": ["Return", "the", "characters", "for", "actors", ",", "ordered", "by", "age", "descending", "."], "guid": 1930}}
{"text": "musical: Musical_ID, Name, Year, Award, Category, Nominee, Result; actor: Actor_ID, Name, Musical_ID, Character, Duration, age | How many actors have appeared in each musical?", "sql": "SELECT T2.Name ,  COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID", "example": {"db_id": "musical", "query": "SELECT T2.Name ,  COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID", "query_toks": ["SELECT", "T2.Name", ",", "COUNT", "(", "*", ")", "FROM", "actor", "AS", "T1", "JOIN", "musical", "AS", "T2", "ON", "T1.Musical_ID", "=", "T2.Musical_ID", "GROUP", "BY", "T1.Musical_ID"], "query_toks_no_value": ["select", "t2", ".", "name", ",", "count", "(", "*", ")", "from", "actor", "as", "t1", "join", "musical", "as", "t2", "on", "t1", ".", "musical_id", "=", "t2", ".", "musical_id", "group", "by", "t1", ".", "musical_id"], "question": "How many actors have appeared in each musical?", "question_toks": ["How", "many", "actors", "have", "appeared", "in", "each", "musical", "?"], "guid": 1931}}
{"text": "genre: g_name, rating, most_popular_in; artist: artist_name, country, gender, preferred_genre; files: f_id, artist_name, file_size, duration, formats; song: song_name, artist_name, country, f_id, genre_is, rating, languages, releasedate, resolution | What is the language used most often in the songs?", "sql": "SELECT languages FROM song GROUP BY languages ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "music_1", "query": "SELECT languages FROM song GROUP BY languages ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "languages", "FROM", "song", "GROUP", "BY", "languages", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "languages", "from", "song", "group", "by", "languages", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the language used most often in the songs?", "question_toks": ["What", "is", "the", "language", "used", "most", "often", "in", "the", "songs", "?"], "guid": 1932}}
{"text": "artist: Artist_ID, Artist, Age, Famous_Title, Famous_Release_date; volume: Volume_ID, Volume_Issue, Issue_Date, Weeks_on_Top, Song, Artist_ID; music_festival: ID, Music_Festival, Date_of_ceremony, Category, Volume, Result | Return the issue dates of volumes by artists who are at most 23 years old?", "sql": "SELECT Issue_Date FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  <=  23", "example": {"db_id": "music_4", "query": "SELECT Issue_Date FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  <=  23", "query_toks": ["SELECT", "Issue_Date", "FROM", "artist", "AS", "T1", "JOIN", "volume", "AS", "T2", "ON", "T1.Artist_ID", "=", "T2.Artist_ID", "WHERE", "T1.age", "<", "=", "23"], "query_toks_no_value": ["select", "issue_date", "from", "artist", "as", "t1", "join", "volume", "as", "t2", "on", "t1", ".", "artist_id", "=", "t2", ".", "artist_id", "where", "t1", ".", "age", "<", "=", "value"], "question": "Return the issue dates of volumes by artists who are at most 23 years old?", "question_toks": ["Return", "the", "issue", "dates", "of", "volumes", "by", "artists", "who", "are", "at", "most", "23", "years", "old", "?"], "guid": 1933}}
{"text": "stadium: Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average; singer: Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male; concert: concert_ID, concert_Name, Theme, Stadium_ID, Year; singer_in_concert: concert_ID, Singer_ID | What are the names , themes , and number of singers for every concert ?", "sql": "select t2.concert_name ,  t2.theme ,  count(*) from singer_in_concert as t1 join concert as t2 on t1.concert_id  =  t2.concert_id group by t2.concert_id", "example": {"db_id": "concert_singer", "query": "select t2.concert_name ,  t2.theme ,  count(*) from singer_in_concert as t1 join concert as t2 on t1.concert_id  =  t2.concert_id group by t2.concert_id", "query_toks": ["select", "t2.concert_name", ",", "t2.theme", ",", "count", "(", "*", ")", "from", "singer_in_concert", "as", "t1", "join", "concert", "as", "t2", "on", "t1.concert_id", "=", "t2.concert_id", "group", "by", "t2.concert_id"], "query_toks_no_value": ["select", "t2", ".", "concert_name", ",", "t2", ".", "theme", ",", "count", "(", "*", ")", "from", "singer_in_concert", "as", "t1", "join", "concert", "as", "t2", "on", "t1", ".", "concert_id", "=", "t2", ".", "concert_id", "group", "by", "t2", ".", "concert_id"], "question": "What are the names , themes , and number of singers for every concert ?", "question_toks": ["What", "are", "the", "names", ",", "themes", ",", "and", "number", "of", "singers", "for", "every", "concert", "?"], "guid": 1934}}
{"text": "stadium: Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average; singer: Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male; concert: concert_ID, concert_Name, Theme, Stadium_ID, Year; singer_in_concert: concert_ID, Singer_ID | Show the stadium name and capacity with most number of concerts in year 2014 or after.", "sql": "SELECT T2.name ,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "concert_singer", "query": "SELECT T2.name ,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T2.name", ",", "T2.capacity", "FROM", "concert", "AS", "T1", "JOIN", "stadium", "AS", "T2", "ON", "T1.stadium_id", "=", "T2.stadium_id", "WHERE", "T1.year", ">", "=", "2014", "GROUP", "BY", "T2.stadium_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "name", ",", "t2", ".", "capacity", "from", "concert", "as", "t1", "join", "stadium", "as", "t2", "on", "t1", ".", "stadium_id", "=", "t2", ".", "stadium_id", "where", "t1", ".", "year", ">", "=", "value", "group", "by", "t2", ".", "stadium_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Show the stadium name and capacity with most number of concerts in year 2014 or after.", "question_toks": ["Show", "the", "stadium", "name", "and", "capacity", "with", "most", "number", "of", "concerts", "in", "year", "2014", "or", "after", "."], "guid": 1935}}
{"text": "stadium: Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average; singer: Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male; concert: concert_ID, concert_Name, Theme, Stadium_ID, Year; singer_in_concert: concert_ID, Singer_ID | List all singer names in concerts in year 2014.", "sql": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014", "example": {"db_id": "concert_singer", "query": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014", "query_toks": ["SELECT", "T2.name", "FROM", "singer_in_concert", "AS", "T1", "JOIN", "singer", "AS", "T2", "ON", "T1.singer_id", "=", "T2.singer_id", "JOIN", "concert", "AS", "T3", "ON", "T1.concert_id", "=", "T3.concert_id", "WHERE", "T3.year", "=", "2014"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "singer_in_concert", "as", "t1", "join", "singer", "as", "t2", "on", "t1", ".", "singer_id", "=", "t2", ".", "singer_id", "join", "concert", "as", "t3", "on", "t1", ".", "concert_id", "=", "t3", ".", "concert_id", "where", "t3", ".", "year", "=", "value"], "question": "List all singer names in concerts in year 2014.", "question_toks": ["List", "all", "singer", "names", "in", "concerts", "in", "year", "2014", "."], "guid": 1936}}
{"text": "Songs: SongId, Title; Albums: AId, Title, Year, Label, Type; Band: Id, Firstname, Lastname; Instruments: SongId, BandmateId, Instrument; Performance: SongId, Bandmate, StagePosition; Tracklists: AlbumId, Position, SongId; Vocals: SongId, Bandmate, Type | How many instruments does the song \"Le Pop\" use?", "sql": "SELECT count(DISTINCT instrument) FROM instruments AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Le Pop\"", "example": {"db_id": "music_2", "query": "SELECT count(DISTINCT instrument) FROM instruments AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Le Pop\"", "query_toks": ["SELECT", "count", "(", "DISTINCT", "instrument", ")", "FROM", "instruments", "AS", "T1", "JOIN", "songs", "AS", "T2", "ON", "T1.songid", "=", "T2.songid", "WHERE", "title", "=", "``", "Le", "Pop", "''"], "query_toks_no_value": ["select", "count", "(", "distinct", "instrument", ")", "from", "instruments", "as", "t1", "join", "songs", "as", "t2", "on", "t1", ".", "songid", "=", "t2", ".", "songid", "where", "title", "=", "value"], "question": "How many instruments does the song \"Le Pop\" use?", "question_toks": ["How", "many", "instruments", "does", "the", "song", "``", "Le", "Pop", "''", "use", "?"], "guid": 1937}}
{"text": "conductor: Conductor_ID, Name, Age, Nationality, Year_of_Work; orchestra: Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format; performance: Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share; show: Show_ID, Performance_ID, If_first_show, Result, Attendance | What are the names of conductors who have conducted orchestras founded after the year 2008?", "sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008", "example": {"db_id": "orchestra", "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008", "query_toks": ["SELECT", "T1.Name", "FROM", "conductor", "AS", "T1", "JOIN", "orchestra", "AS", "T2", "ON", "T1.Conductor_ID", "=", "T2.Conductor_ID", "WHERE", "Year_of_Founded", ">", "2008"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "conductor", "as", "t1", "join", "orchestra", "as", "t2", "on", "t1", ".", "conductor_id", "=", "t2", ".", "conductor_id", "where", "year_of_founded", ">", "value"], "question": "What are the names of conductors who have conducted orchestras founded after the year 2008?", "question_toks": ["What", "are", "the", "names", "of", "conductors", "who", "have", "conducted", "orchestras", "founded", "after", "the", "year", "2008", "?"], "guid": 1938}}
{"text": "genre: g_name, rating, most_popular_in; artist: artist_name, country, gender, preferred_genre; files: f_id, artist_name, file_size, duration, formats; song: song_name, artist_name, country, f_id, genre_is, rating, languages, releasedate, resolution | What is the shortest and most poorly rated song for each genre, ordered alphabetically by genre?", "sql": "SELECT min(T1.duration) ,  min(T2.rating) ,  T2.genre_is FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id GROUP BY T2.genre_is ORDER BY T2.genre_is", "example": {"db_id": "music_1", "query": "SELECT min(T1.duration) ,  min(T2.rating) ,  T2.genre_is FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id GROUP BY T2.genre_is ORDER BY T2.genre_is", "query_toks": ["SELECT", "min", "(", "T1.duration", ")", ",", "min", "(", "T2.rating", ")", ",", "T2.genre_is", "FROM", "files", "AS", "T1", "JOIN", "song", "AS", "T2", "ON", "T1.f_id", "=", "T2.f_id", "GROUP", "BY", "T2.genre_is", "ORDER", "BY", "T2.genre_is"], "query_toks_no_value": ["select", "min", "(", "t1", ".", "duration", ")", ",", "min", "(", "t2", ".", "rating", ")", ",", "t2", ".", "genre_is", "from", "files", "as", "t1", "join", "song", "as", "t2", "on", "t1", ".", "f_id", "=", "t2", ".", "f_id", "group", "by", "t2", ".", "genre_is", "order", "by", "t2", ".", "genre_is"], "question": "What is the shortest and most poorly rated song for each genre, ordered alphabetically by genre?", "question_toks": ["What", "is", "the", "shortest", "and", "most", "poorly", "rated", "song", "for", "each", "genre", ",", "ordered", "alphabetically", "by", "genre", "?"], "guid": 1939}}
{"text": "Songs: SongId, Title; Albums: AId, Title, Year, Label, Type; Band: Id, Firstname, Lastname; Instruments: SongId, BandmateId, Instrument; Performance: SongId, Bandmate, StagePosition; Tracklists: AlbumId, Position, SongId; Vocals: SongId, Bandmate, Type | What are the different album labels listed?", "sql": "SELECT DISTINCT label FROM Albums", "example": {"db_id": "music_2", "query": "SELECT DISTINCT label FROM Albums", "query_toks": ["SELECT", "DISTINCT", "label", "FROM", "Albums"], "query_toks_no_value": ["select", "distinct", "label", "from", "albums"], "question": "What are the different album labels listed?", "question_toks": ["What", "are", "the", "different", "album", "labels", "listed", "?"], "guid": 1940}}
{"text": "conductor: Conductor_ID, Name, Age, Nationality, Year_of_Work; orchestra: Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format; performance: Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share; show: Show_ID, Performance_ID, If_first_show, Result, Attendance | List the names of conductors in ascending order of age.", "sql": "SELECT Name FROM conductor ORDER BY Age ASC", "example": {"db_id": "orchestra", "query": "SELECT Name FROM conductor ORDER BY Age ASC", "query_toks": ["SELECT", "Name", "FROM", "conductor", "ORDER", "BY", "Age", "ASC"], "query_toks_no_value": ["select", "name", "from", "conductor", "order", "by", "age", "asc"], "question": "List the names of conductors in ascending order of age.", "question_toks": ["List", "the", "names", "of", "conductors", "in", "ascending", "order", "of", "age", "."], "guid": 1941}}
{"text": "conductor: Conductor_ID, Name, Age, Nationality, Year_of_Work; orchestra: Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format; performance: Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share; show: Show_ID, Performance_ID, If_first_show, Result, Attendance | What are the names of conductors who have conducted at more than one orchestra?", "sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1", "example": {"db_id": "orchestra", "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1", "query_toks": ["SELECT", "T1.Name", "FROM", "conductor", "AS", "T1", "JOIN", "orchestra", "AS", "T2", "ON", "T1.Conductor_ID", "=", "T2.Conductor_ID", "GROUP", "BY", "T2.Conductor_ID", "HAVING", "COUNT", "(", "*", ")", ">", "1"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "conductor", "as", "t1", "join", "orchestra", "as", "t2", "on", "t1", ".", "conductor_id", "=", "t2", ".", "conductor_id", "group", "by", "t2", ".", "conductor_id", "having", "count", "(", "*", ")", ">", "value"], "question": "What are the names of conductors who have conducted at more than one orchestra?", "question_toks": ["What", "are", "the", "names", "of", "conductors", "who", "have", "conducted", "at", "more", "than", "one", "orchestra", "?"], "guid": 1942}}
{"text": "conductor: Conductor_ID, Name, Age, Nationality, Year_of_Work; orchestra: Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format; performance: Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share; show: Show_ID, Performance_ID, If_first_show, Result, Attendance | Please show the name of the conductor that has conducted orchestras founded after 2008.", "sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008", "example": {"db_id": "orchestra", "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008", "query_toks": ["SELECT", "T1.Name", "FROM", "conductor", "AS", "T1", "JOIN", "orchestra", "AS", "T2", "ON", "T1.Conductor_ID", "=", "T2.Conductor_ID", "WHERE", "Year_of_Founded", ">", "2008"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "conductor", "as", "t1", "join", "orchestra", "as", "t2", "on", "t1", ".", "conductor_id", "=", "t2", ".", "conductor_id", "where", "year_of_founded", ">", "value"], "question": "Please show the name of the conductor that has conducted orchestras founded after 2008.", "question_toks": ["Please", "show", "the", "name", "of", "the", "conductor", "that", "has", "conducted", "orchestras", "founded", "after", "2008", "."], "guid": 1943}}
{"text": "genre: g_name, rating, most_popular_in; artist: artist_name, country, gender, preferred_genre; files: f_id, artist_name, file_size, duration, formats; song: song_name, artist_name, country, f_id, genre_is, rating, languages, releasedate, resolution | What are the names of the songs whose rating is below the rating of all songs in English?", "sql": "SELECT song_name FROM song WHERE rating  <   (SELECT min(rating) FROM song WHERE languages  =  'english')", "example": {"db_id": "music_1", "query": "SELECT song_name FROM song WHERE rating  <   (SELECT min(rating) FROM song WHERE languages  =  'english')", "query_toks": ["SELECT", "song_name", "FROM", "song", "WHERE", "rating", "<", "(", "SELECT", "min", "(", "rating", ")", "FROM", "song", "WHERE", "languages", "=", "'english", "'", ")"], "query_toks_no_value": ["select", "song_name", "from", "song", "where", "rating", "<", "(", "select", "min", "(", "rating", ")", "from", "song", "where", "languages", "=", "value", ")"], "question": "What are the names of the songs whose rating is below the rating of all songs in English?", "question_toks": ["What", "are", "the", "names", "of", "the", "songs", "whose", "rating", "is", "below", "the", "rating", "of", "all", "songs", "in", "English", "?"], "guid": 1944}}
{"text": "musical: Musical_ID, Name, Year, Award, Category, Nominee, Result; actor: Actor_ID, Name, Musical_ID, Character, Duration, age | Return the different nominees of musicals that have an award that is not the Tony Award.", "sql": "SELECT DISTINCT Nominee FROM musical WHERE Award != \"Tony Award\"", "example": {"db_id": "musical", "query": "SELECT DISTINCT Nominee FROM musical WHERE Award != \"Tony Award\"", "query_toks": ["SELECT", "DISTINCT", "Nominee", "FROM", "musical", "WHERE", "Award", "!", "=", "``", "Tony", "Award", "''"], "query_toks_no_value": ["select", "distinct", "nominee", "from", "musical", "where", "award", "!", "=", "value"], "question": "Return the different nominees of musicals that have an award that is not the Tony Award.", "question_toks": ["Return", "the", "different", "nominees", "of", "musicals", "that", "have", "an", "award", "that", "is", "not", "the", "Tony", "Award", "."], "guid": 1945}}
{"text": "genre: g_name, rating, most_popular_in; artist: artist_name, country, gender, preferred_genre; files: f_id, artist_name, file_size, duration, formats; song: song_name, artist_name, country, f_id, genre_is, rating, languages, releasedate, resolution | What are the names of the artists who sang the shortest song?", "sql": "SELECT T1.artist_name FROM song AS T1 JOIN files AS T2 ON T1.f_id  =  T2.f_id ORDER BY T2.duration LIMIT 1", "example": {"db_id": "music_1", "query": "SELECT T1.artist_name FROM song AS T1 JOIN files AS T2 ON T1.f_id  =  T2.f_id ORDER BY T2.duration LIMIT 1", "query_toks": ["SELECT", "T1.artist_name", "FROM", "song", "AS", "T1", "JOIN", "files", "AS", "T2", "ON", "T1.f_id", "=", "T2.f_id", "ORDER", "BY", "T2.duration", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "artist_name", "from", "song", "as", "t1", "join", "files", "as", "t2", "on", "t1", ".", "f_id", "=", "t2", ".", "f_id", "order", "by", "t2", ".", "duration", "limit", "value"], "question": "What are the names of the artists who sang the shortest song?", "question_toks": ["What", "are", "the", "names", "of", "the", "artists", "who", "sang", "the", "shortest", "song", "?"], "guid": 1946}}
{"text": "Songs: SongId, Title; Albums: AId, Title, Year, Label, Type; Band: Id, Firstname, Lastname; Instruments: SongId, BandmateId, Instrument; Performance: SongId, Bandmate, StagePosition; Tracklists: AlbumId, Position, SongId; Vocals: SongId, Bandmate, Type | What are the different names of all songs without back vocals?", "sql": "SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid WHERE TYPE  =  \"back\"", "example": {"db_id": "music_2", "query": "SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid WHERE TYPE  =  \"back\"", "query_toks": ["SELECT", "DISTINCT", "title", "FROM", "vocals", "AS", "t1", "JOIN", "songs", "AS", "t2", "ON", "t1.songid", "=", "t2.songid", "EXCEPT", "SELECT", "t2.title", "FROM", "vocals", "AS", "t1", "JOIN", "songs", "AS", "t2", "ON", "t1.songid", "=", "t2.songid", "WHERE", "TYPE", "=", "``", "back", "''"], "query_toks_no_value": ["select", "distinct", "title", "from", "vocals", "as", "t1", "join", "songs", "as", "t2", "on", "t1", ".", "songid", "=", "t2", ".", "songid", "except", "select", "t2", ".", "title", "from", "vocals", "as", "t1", "join", "songs", "as", "t2", "on", "t1", ".", "songid", "=", "t2", ".", "songid", "where", "type", "=", "value"], "question": "What are the different names of all songs without back vocals?", "question_toks": ["What", "are", "the", "different", "names", "of", "all", "songs", "without", "back", "vocals", "?"], "guid": 1947}}
{"text": "genre: g_name, rating, most_popular_in; artist: artist_name, country, gender, preferred_genre; files: f_id, artist_name, file_size, duration, formats; song: song_name, artist_name, country, f_id, genre_is, rating, languages, releasedate, resolution | What are the file sizes and formats for all songs with a resolution lower than 800?", "sql": "SELECT DISTINCT T1.file_size ,  T1.formats FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T2.resolution  <  800", "example": {"db_id": "music_1", "query": "SELECT DISTINCT T1.file_size ,  T1.formats FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T2.resolution  <  800", "query_toks": ["SELECT", "DISTINCT", "T1.file_size", ",", "T1.formats", "FROM", "files", "AS", "T1", "JOIN", "song", "AS", "T2", "ON", "T1.f_id", "=", "T2.f_id", "WHERE", "T2.resolution", "<", "800"], "query_toks_no_value": ["select", "distinct", "t1", ".", "file_size", ",", "t1", ".", "formats", "from", "files", "as", "t1", "join", "song", "as", "t2", "on", "t1", ".", "f_id", "=", "t2", ".", "f_id", "where", "t2", ".", "resolution", "<", "value"], "question": "What are the file sizes and formats for all songs with a resolution lower than 800?", "question_toks": ["What", "are", "the", "file", "sizes", "and", "formats", "for", "all", "songs", "with", "a", "resolution", "lower", "than", "800", "?"], "guid": 1948}}
{"text": "conductor: Conductor_ID, Name, Age, Nationality, Year_of_Work; orchestra: Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format; performance: Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share; show: Show_ID, Performance_ID, If_first_show, Result, Attendance | What are the names of conductors, ordered by age?", "sql": "SELECT Name FROM conductor ORDER BY Age ASC", "example": {"db_id": "orchestra", "query": "SELECT Name FROM conductor ORDER BY Age ASC", "query_toks": ["SELECT", "Name", "FROM", "conductor", "ORDER", "BY", "Age", "ASC"], "query_toks_no_value": ["select", "name", "from", "conductor", "order", "by", "age", "asc"], "question": "What are the names of conductors, ordered by age?", "question_toks": ["What", "are", "the", "names", "of", "conductors", ",", "ordered", "by", "age", "?"], "guid": 1949}}
{"text": "Songs: SongId, Title; Albums: AId, Title, Year, Label, Type; Band: Id, Firstname, Lastname; Instruments: SongId, BandmateId, Instrument; Performance: SongId, Bandmate, StagePosition; Tracklists: AlbumId, Position, SongId; Vocals: SongId, Bandmate, Type | How many songs are there?", "sql": "SELECT count(*) FROM Songs", "example": {"db_id": "music_2", "query": "SELECT count(*) FROM Songs", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Songs"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "songs"], "question": "How many songs are there?", "question_toks": ["How", "many", "songs", "are", "there", "?"], "guid": 1950}}
{"text": "Songs: SongId, Title; Albums: AId, Title, Year, Label, Type; Band: Id, Firstname, Lastname; Instruments: SongId, BandmateId, Instrument; Performance: SongId, Bandmate, StagePosition; Tracklists: AlbumId, Position, SongId; Vocals: SongId, Bandmate, Type | What instrument did the musician with last name \"Heilo\" use in the song \"Le Pop\"?", "sql": "SELECT T4.instrument FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId JOIN Instruments AS T4 ON T4.songid  =  T3.songid AND T4.bandmateid  =  T2.id WHERE T2.lastname  =  \"Heilo\" AND T3.title  =  \"Le Pop\"", "example": {"db_id": "music_2", "query": "SELECT T4.instrument FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId JOIN Instruments AS T4 ON T4.songid  =  T3.songid AND T4.bandmateid  =  T2.id WHERE T2.lastname  =  \"Heilo\" AND T3.title  =  \"Le Pop\"", "query_toks": ["SELECT", "T4.instrument", "FROM", "Performance", "AS", "T1", "JOIN", "Band", "AS", "T2", "ON", "T1.bandmate", "=", "T2.id", "JOIN", "Songs", "AS", "T3", "ON", "T3.SongId", "=", "T1.SongId", "JOIN", "Instruments", "AS", "T4", "ON", "T4.songid", "=", "T3.songid", "AND", "T4.bandmateid", "=", "T2.id", "WHERE", "T2.lastname", "=", "``", "Heilo", "''", "AND", "T3.title", "=", "``", "Le", "Pop", "''"], "query_toks_no_value": ["select", "t4", ".", "instrument", "from", "performance", "as", "t1", "join", "band", "as", "t2", "on", "t1", ".", "bandmate", "=", "t2", ".", "id", "join", "songs", "as", "t3", "on", "t3", ".", "songid", "=", "t1", ".", "songid", "join", "instruments", "as", "t4", "on", "t4", ".", "songid", "=", "t3", ".", "songid", "and", "t4", ".", "bandmateid", "=", "t2", ".", "id", "where", "t2", ".", "lastname", "=", "value", "and", "t3", ".", "title", "=", "value"], "question": "What instrument did the musician with last name \"Heilo\" use in the song \"Le Pop\"?", "question_toks": ["What", "instrument", "did", "the", "musician", "with", "last", "name", "``", "Heilo", "''", "use", "in", "the", "song", "``", "Le", "Pop", "''", "?"], "guid": 1951}}
{"text": "Songs: SongId, Title; Albums: AId, Title, Year, Label, Type; Band: Id, Firstname, Lastname; Instruments: SongId, BandmateId, Instrument; Performance: SongId, Bandmate, StagePosition; Tracklists: AlbumId, Position, SongId; Vocals: SongId, Bandmate, Type | Find all the stage positions of the musicians with first name \"Solveig\"", "sql": "SELECT DISTINCT T1.stageposition FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id WHERE Firstname  =  \"Solveig\"", "example": {"db_id": "music_2", "query": "SELECT DISTINCT T1.stageposition FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id WHERE Firstname  =  \"Solveig\"", "query_toks": ["SELECT", "DISTINCT", "T1.stageposition", "FROM", "Performance", "AS", "T1", "JOIN", "Band", "AS", "T2", "ON", "T1.bandmate", "=", "T2.id", "WHERE", "Firstname", "=", "``", "Solveig", "''"], "query_toks_no_value": ["select", "distinct", "t1", ".", "stageposition", "from", "performance", "as", "t1", "join", "band", "as", "t2", "on", "t1", ".", "bandmate", "=", "t2", ".", "id", "where", "firstname", "=", "value"], "question": "Find all the stage positions of the musicians with first name \"Solveig\"", "question_toks": ["Find", "all", "the", "stage", "positions", "of", "the", "musicians", "with", "first", "name", "``", "Solveig", "''"], "guid": 1952}}
{"text": "conductor: Conductor_ID, Name, Age, Nationality, Year_of_Work; orchestra: Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format; performance: Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share; show: Show_ID, Performance_ID, If_first_show, Result, Attendance | What are the names of conductors, sorted descending by the number of years they have worked?", "sql": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC", "example": {"db_id": "orchestra", "query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC", "query_toks": ["SELECT", "Name", "FROM", "conductor", "ORDER", "BY", "Year_of_Work", "DESC"], "query_toks_no_value": ["select", "name", "from", "conductor", "order", "by", "year_of_work", "desc"], "question": "What are the names of conductors, sorted descending by the number of years they have worked?", "question_toks": ["What", "are", "the", "names", "of", "conductors", ",", "sorted", "descending", "by", "the", "number", "of", "years", "they", "have", "worked", "?"], "guid": 1953}}
{"text": "singer: Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship; song: Song_ID, Title, Singer_ID, Sales, Highest_Position | What are the citizenships that are shared by singers with a birth year before 1945 and after 1955?", "sql": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955", "example": {"db_id": "singer", "query": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955", "query_toks": ["SELECT", "Citizenship", "FROM", "singer", "WHERE", "Birth_Year", "<", "1945", "INTERSECT", "SELECT", "Citizenship", "FROM", "singer", "WHERE", "Birth_Year", ">", "1955"], "query_toks_no_value": ["select", "citizenship", "from", "singer", "where", "birth_year", "<", "value", "intersect", "select", "citizenship", "from", "singer", "where", "birth_year", ">", "value"], "question": "What are the citizenships that are shared by singers with a birth year before 1945 and after 1955?", "question_toks": ["What", "are", "the", "citizenships", "that", "are", "shared", "by", "singers", "with", "a", "birth", "year", "before", "1945", "and", "after", "1955", "?"], "guid": 1954}}
{"text": "Songs: SongId, Title; Albums: AId, Title, Year, Label, Type; Band: Id, Firstname, Lastname; Instruments: SongId, BandmateId, Instrument; Performance: SongId, Bandmate, StagePosition; Tracklists: AlbumId, Position, SongId; Vocals: SongId, Bandmate, Type | How many bands are there?", "sql": "SELECT count(*) FROM Band", "example": {"db_id": "music_2", "query": "SELECT count(*) FROM Band", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Band"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "band"], "question": "How many bands are there?", "question_toks": ["How", "many", "bands", "are", "there", "?"], "guid": 1955}}
{"text": "musical: Musical_ID, Name, Year, Award, Category, Nominee, Result; actor: Actor_ID, Name, Musical_ID, Character, Duration, age | What are the names of musicals with nominee \"Bob Fosse\"?", "sql": "SELECT Name FROM musical WHERE Nominee  =  \"Bob Fosse\"", "example": {"db_id": "musical", "query": "SELECT Name FROM musical WHERE Nominee  =  \"Bob Fosse\"", "query_toks": ["SELECT", "Name", "FROM", "musical", "WHERE", "Nominee", "=", "``", "Bob", "Fosse", "''"], "query_toks_no_value": ["select", "name", "from", "musical", "where", "nominee", "=", "value"], "question": "What are the names of musicals with nominee \"Bob Fosse\"?", "question_toks": ["What", "are", "the", "names", "of", "musicals", "with", "nominee", "``", "Bob", "Fosse", "''", "?"], "guid": 1956}}
{"text": "singer: Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship; song: Song_ID, Title, Singer_ID, Sales, Highest_Position | What are the birth year and citizenship of singers?", "sql": "SELECT Birth_Year ,  Citizenship FROM singer", "example": {"db_id": "singer", "query": "SELECT Birth_Year ,  Citizenship FROM singer", "query_toks": ["SELECT", "Birth_Year", ",", "Citizenship", "FROM", "singer"], "query_toks_no_value": ["select", "birth_year", ",", "citizenship", "from", "singer"], "question": "What are the birth year and citizenship of singers?", "question_toks": ["What", "are", "the", "birth", "year", "and", "citizenship", "of", "singers", "?"], "guid": 1957}}
{"text": "genre: g_name, rating, most_popular_in; artist: artist_name, country, gender, preferred_genre; files: f_id, artist_name, file_size, duration, formats; song: song_name, artist_name, country, f_id, genre_is, rating, languages, releasedate, resolution | What is the average rating of songs produced by female artists?", "sql": "SELECT avg(T2.rating) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T1.gender  =  \"Female\"", "example": {"db_id": "music_1", "query": "SELECT avg(T2.rating) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T1.gender  =  \"Female\"", "query_toks": ["SELECT", "avg", "(", "T2.rating", ")", "FROM", "artist", "AS", "T1", "JOIN", "song", "AS", "T2", "ON", "T1.artist_name", "=", "T2.artist_name", "WHERE", "T1.gender", "=", "``", "Female", "''"], "query_toks_no_value": ["select", "avg", "(", "t2", ".", "rating", ")", "from", "artist", "as", "t1", "join", "song", "as", "t2", "on", "t1", ".", "artist_name", "=", "t2", ".", "artist_name", "where", "t1", ".", "gender", "=", "value"], "question": "What is the average rating of songs produced by female artists?", "question_toks": ["What", "is", "the", "average", "rating", "of", "songs", "produced", "by", "female", "artists", "?"], "guid": 1958}}
{"text": "genre: g_name, rating, most_popular_in; artist: artist_name, country, gender, preferred_genre; files: f_id, artist_name, file_size, duration, formats; song: song_name, artist_name, country, f_id, genre_is, rating, languages, releasedate, resolution | What are the ids of songs that are available in either mp4 format or have resolution above 720?", "sql": "SELECT f_id FROM files WHERE formats  =  \"mp4\" UNION SELECT f_id FROM song WHERE resolution  >  720", "example": {"db_id": "music_1", "query": "SELECT f_id FROM files WHERE formats  =  \"mp4\" UNION SELECT f_id FROM song WHERE resolution  >  720", "query_toks": ["SELECT", "f_id", "FROM", "files", "WHERE", "formats", "=", "``", "mp4", "''", "UNION", "SELECT", "f_id", "FROM", "song", "WHERE", "resolution", ">", "720"], "query_toks_no_value": ["select", "f_id", "from", "files", "where", "formats", "=", "value", "union", "select", "f_id", "from", "song", "where", "resolution", ">", "value"], "question": "What are the ids of songs that are available in either mp4 format or have resolution above 720?", "question_toks": ["What", "are", "the", "ids", "of", "songs", "that", "are", "available", "in", "either", "mp4", "format", "or", "have", "resolution", "above", "720", "?"], "guid": 1959}}
{"text": "genre: g_name, rating, most_popular_in; artist: artist_name, country, gender, preferred_genre; files: f_id, artist_name, file_size, duration, formats; song: song_name, artist_name, country, f_id, genre_is, rating, languages, releasedate, resolution | What is ids of the songs whose resolution is higher than the average resolution of songs in modern genre?", "sql": "SELECT f_id FROM song WHERE resolution  >  (SELECT avg(resolution) FROM song WHERE genre_is  =  \"modern\")", "example": {"db_id": "music_1", "query": "SELECT f_id FROM song WHERE resolution  >  (SELECT avg(resolution) FROM song WHERE genre_is  =  \"modern\")", "query_toks": ["SELECT", "f_id", "FROM", "song", "WHERE", "resolution", ">", "(", "SELECT", "avg", "(", "resolution", ")", "FROM", "song", "WHERE", "genre_is", "=", "``", "modern", "''", ")"], "query_toks_no_value": ["select", "f_id", "from", "song", "where", "resolution", ">", "(", "select", "avg", "(", "resolution", ")", "from", "song", "where", "genre_is", "=", "value", ")"], "question": "What is ids of the songs whose resolution is higher than the average resolution of songs in modern genre?", "question_toks": ["What", "is", "ids", "of", "the", "songs", "whose", "resolution", "is", "higher", "than", "the", "average", "resolution", "of", "songs", "in", "modern", "genre", "?"], "guid": 1960}}
{"text": "musical: Musical_ID, Name, Year, Award, Category, Nominee, Result; actor: Actor_ID, Name, Musical_ID, Character, Duration, age | Show the musical nominee with award \"Bob Fosse\" or \"Cleavant Derricks\".", "sql": "SELECT Nominee FROM musical WHERE Award  =  \"Tony Award\" OR Award  =  \"Cleavant Derricks\"", "example": {"db_id": "musical", "query": "SELECT Nominee FROM musical WHERE Award  =  \"Tony Award\" OR Award  =  \"Cleavant Derricks\"", "query_toks": ["SELECT", "Nominee", "FROM", "musical", "WHERE", "Award", "=", "``", "Tony", "Award", "''", "OR", "Award", "=", "``", "Cleavant", "Derricks", "''"], "query_toks_no_value": ["select", "nominee", "from", "musical", "where", "award", "=", "value", "or", "award", "=", "value"], "question": "Show the musical nominee with award \"Bob Fosse\" or \"Cleavant Derricks\".", "question_toks": ["Show", "the", "musical", "nominee", "with", "award", "``", "Bob", "Fosse", "''", "or", "``", "Cleavant", "Derricks", "''", "."], "guid": 1961}}
{"text": "genre: g_name, rating, most_popular_in; artist: artist_name, country, gender, preferred_genre; files: f_id, artist_name, file_size, duration, formats; song: song_name, artist_name, country, f_id, genre_is, rating, languages, releasedate, resolution | What is the average rating of songs for each language?", "sql": "SELECT avg(rating) ,  languages FROM song GROUP BY languages", "example": {"db_id": "music_1", "query": "SELECT avg(rating) ,  languages FROM song GROUP BY languages", "query_toks": ["SELECT", "avg", "(", "rating", ")", ",", "languages", "FROM", "song", "GROUP", "BY", "languages"], "query_toks_no_value": ["select", "avg", "(", "rating", ")", ",", "languages", "from", "song", "group", "by", "languages"], "question": "What is the average rating of songs for each language?", "question_toks": ["What", "is", "the", "average", "rating", "of", "songs", "for", "each", "language", "?"], "guid": 1962}}
{"text": "genre: g_name, rating, most_popular_in; artist: artist_name, country, gender, preferred_genre; files: f_id, artist_name, file_size, duration, formats; song: song_name, artist_name, country, f_id, genre_is, rating, languages, releasedate, resolution | What are the names and number of works for all artists who have sung at least one song in English?", "sql": "SELECT T1.artist_name ,  count(*) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.languages  =  \"english\" GROUP BY T2.artist_name HAVING count(*)  >=  1", "example": {"db_id": "music_1", "query": "SELECT T1.artist_name ,  count(*) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.languages  =  \"english\" GROUP BY T2.artist_name HAVING count(*)  >=  1", "query_toks": ["SELECT", "T1.artist_name", ",", "count", "(", "*", ")", "FROM", "artist", "AS", "T1", "JOIN", "song", "AS", "T2", "ON", "T1.artist_name", "=", "T2.artist_name", "WHERE", "T2.languages", "=", "``", "english", "''", "GROUP", "BY", "T2.artist_name", "HAVING", "count", "(", "*", ")", ">", "=", "1"], "query_toks_no_value": ["select", "t1", ".", "artist_name", ",", "count", "(", "*", ")", "from", "artist", "as", "t1", "join", "song", "as", "t2", "on", "t1", ".", "artist_name", "=", "t2", ".", "artist_name", "where", "t2", ".", "languages", "=", "value", "group", "by", "t2", ".", "artist_name", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "What are the names and number of works for all artists who have sung at least one song in English?", "question_toks": ["What", "are", "the", "names", "and", "number", "of", "works", "for", "all", "artists", "who", "have", "sung", "at", "least", "one", "song", "in", "English", "?"], "guid": 1963}}
{"text": "genre: g_name, rating, most_popular_in; artist: artist_name, country, gender, preferred_genre; files: f_id, artist_name, file_size, duration, formats; song: song_name, artist_name, country, f_id, genre_is, rating, languages, releasedate, resolution | What are the names of all songs that are in mp3 format and have a resolution lower than 1000?", "sql": "SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.formats  =  \"mp3\" INTERSECT SELECT song_name FROM song WHERE resolution  <  1000", "example": {"db_id": "music_1", "query": "SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.formats  =  \"mp3\" INTERSECT SELECT song_name FROM song WHERE resolution  <  1000", "query_toks": ["SELECT", "T2.song_name", "FROM", "files", "AS", "T1", "JOIN", "song", "AS", "T2", "ON", "T1.f_id", "=", "T2.f_id", "WHERE", "T1.formats", "=", "``", "mp3", "''", "INTERSECT", "SELECT", "song_name", "FROM", "song", "WHERE", "resolution", "<", "1000"], "query_toks_no_value": ["select", "t2", ".", "song_name", "from", "files", "as", "t1", "join", "song", "as", "t2", "on", "t1", ".", "f_id", "=", "t2", ".", "f_id", "where", "t1", ".", "formats", "=", "value", "intersect", "select", "song_name", "from", "song", "where", "resolution", "<", "value"], "question": "What are the names of all songs that are in mp3 format and have a resolution lower than 1000?", "question_toks": ["What", "are", "the", "names", "of", "all", "songs", "that", "are", "in", "mp3", "format", "and", "have", "a", "resolution", "lower", "than", "1000", "?"], "guid": 1964}}
{"text": "genre: g_name, rating, most_popular_in; artist: artist_name, country, gender, preferred_genre; files: f_id, artist_name, file_size, duration, formats; song: song_name, artist_name, country, f_id, genre_is, rating, languages, releasedate, resolution | What are the average rating and resolution of songs that are in Bangla?", "sql": "SELECT avg(rating) ,  avg(resolution) FROM song WHERE languages  =  \"bangla\"", "example": {"db_id": "music_1", "query": "SELECT avg(rating) ,  avg(resolution) FROM song WHERE languages  =  \"bangla\"", "query_toks": ["SELECT", "avg", "(", "rating", ")", ",", "avg", "(", "resolution", ")", "FROM", "song", "WHERE", "languages", "=", "``", "bangla", "''"], "query_toks_no_value": ["select", "avg", "(", "rating", ")", ",", "avg", "(", "resolution", ")", "from", "song", "where", "languages", "=", "value"], "question": "What are the average rating and resolution of songs that are in Bangla?", "question_toks": ["What", "are", "the", "average", "rating", "and", "resolution", "of", "songs", "that", "are", "in", "Bangla", "?"], "guid": 1965}}
{"text": "Songs: SongId, Title; Albums: AId, Title, Year, Label, Type; Band: Id, Firstname, Lastname; Instruments: SongId, BandmateId, Instrument; Performance: SongId, Bandmate, StagePosition; Tracklists: AlbumId, Position, SongId; Vocals: SongId, Bandmate, Type | What is the last name of the musician that have produced the most songs?", "sql": "SELECT T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId GROUP BY lastname ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "music_2", "query": "SELECT T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId GROUP BY lastname ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T2.lastname", "FROM", "Performance", "AS", "T1", "JOIN", "Band", "AS", "T2", "ON", "T1.bandmate", "=", "T2.id", "JOIN", "Songs", "AS", "T3", "ON", "T3.SongId", "=", "T1.SongId", "GROUP", "BY", "lastname", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "lastname", "from", "performance", "as", "t1", "join", "band", "as", "t2", "on", "t1", ".", "bandmate", "=", "t2", ".", "id", "join", "songs", "as", "t3", "on", "t3", ".", "songid", "=", "t1", ".", "songid", "group", "by", "lastname", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the last name of the musician that have produced the most songs?", "question_toks": ["What", "is", "the", "last", "name", "of", "the", "musician", "that", "have", "produced", "the", "most", "songs", "?"], "guid": 1966}}
{"text": "stadium: Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average; singer: Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male; concert: concert_ID, concert_Name, Theme, Stadium_ID, Year; singer_in_concert: concert_ID, Singer_ID | What is the total number of singers?", "sql": "SELECT count(*) FROM singer", "example": {"db_id": "concert_singer", "query": "SELECT count(*) FROM singer", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "singer"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "singer"], "question": "What is the total number of singers?", "question_toks": ["What", "is", "the", "total", "number", "of", "singers", "?"], "guid": 1967}}
{"text": "genre: g_name, rating, most_popular_in; artist: artist_name, country, gender, preferred_genre; files: f_id, artist_name, file_size, duration, formats; song: song_name, artist_name, country, f_id, genre_is, rating, languages, releasedate, resolution | Find the names and number of works of the three artists who have produced the most songs.", "sql": "SELECT T1.artist_name ,  count(*) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name GROUP BY T2.artist_name ORDER BY count(*) DESC LIMIT 3", "example": {"db_id": "music_1", "query": "SELECT T1.artist_name ,  count(*) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name GROUP BY T2.artist_name ORDER BY count(*) DESC LIMIT 3", "query_toks": ["SELECT", "T1.artist_name", ",", "count", "(", "*", ")", "FROM", "artist", "AS", "T1", "JOIN", "song", "AS", "T2", "ON", "T1.artist_name", "=", "T2.artist_name", "GROUP", "BY", "T2.artist_name", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "3"], "query_toks_no_value": ["select", "t1", ".", "artist_name", ",", "count", "(", "*", ")", "from", "artist", "as", "t1", "join", "song", "as", "t2", "on", "t1", ".", "artist_name", "=", "t2", ".", "artist_name", "group", "by", "t2", ".", "artist_name", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Find the names and number of works of the three artists who have produced the most songs.", "question_toks": ["Find", "the", "names", "and", "number", "of", "works", "of", "the", "three", "artists", "who", "have", "produced", "the", "most", "songs", "."], "guid": 1968}}
{"text": "singer: Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship; song: Song_ID, Title, Singer_ID, Sales, Highest_Position | Show the names of singers that have more than one song.", "sql": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1", "example": {"db_id": "singer", "query": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1", "query_toks": ["SELECT", "T1.Name", "FROM", "singer", "AS", "T1", "JOIN", "song", "AS", "T2", "ON", "T1.Singer_ID", "=", "T2.Singer_ID", "GROUP", "BY", "T1.Name", "HAVING", "COUNT", "(", "*", ")", ">", "1"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "singer", "as", "t1", "join", "song", "as", "t2", "on", "t1", ".", "singer_id", "=", "t2", ".", "singer_id", "group", "by", "t1", ".", "name", "having", "count", "(", "*", ")", ">", "value"], "question": "Show the names of singers that have more than one song.", "question_toks": ["Show", "the", "names", "of", "singers", "that", "have", "more", "than", "one", "song", "."], "guid": 1969}}
{"text": "artist: Artist_ID, Artist, Age, Famous_Title, Famous_Release_date; volume: Volume_ID, Volume_Issue, Issue_Date, Weeks_on_Top, Song, Artist_ID; music_festival: ID, Music_Festival, Date_of_ceremony, Category, Volume, Result | What are the distinct Famous release dates?", "sql": "SELECT distinct(Famous_Release_date) FROM artist", "example": {"db_id": "music_4", "query": "SELECT distinct(Famous_Release_date) FROM artist", "query_toks": ["SELECT", "distinct", "(", "Famous_Release_date", ")", "FROM", "artist"], "query_toks_no_value": ["select", "distinct", "(", "famous_release_date", ")", "from", "artist"], "question": "What are the distinct Famous release dates?", "question_toks": ["What", "are", "the", "distinct", "Famous", "release", "dates", "?"], "guid": 1970}}
{"text": "Songs: SongId, Title; Albums: AId, Title, Year, Label, Type; Band: Id, Firstname, Lastname; Instruments: SongId, BandmateId, Instrument; Performance: SongId, Bandmate, StagePosition; Tracklists: AlbumId, Position, SongId; Vocals: SongId, Bandmate, Type | Find all the songs that do not have a lead vocal.", "sql": "SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid WHERE TYPE  =  \"lead\"", "example": {"db_id": "music_2", "query": "SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid WHERE TYPE  =  \"lead\"", "query_toks": ["SELECT", "DISTINCT", "title", "FROM", "vocals", "AS", "t1", "JOIN", "songs", "AS", "t2", "ON", "t1.songid", "=", "t2.songid", "EXCEPT", "SELECT", "t2.title", "FROM", "vocals", "AS", "t1", "JOIN", "songs", "AS", "t2", "ON", "t1.songid", "=", "t2.songid", "WHERE", "TYPE", "=", "``", "lead", "''"], "query_toks_no_value": ["select", "distinct", "title", "from", "vocals", "as", "t1", "join", "songs", "as", "t2", "on", "t1", ".", "songid", "=", "t2", ".", "songid", "except", "select", "t2", ".", "title", "from", "vocals", "as", "t1", "join", "songs", "as", "t2", "on", "t1", ".", "songid", "=", "t2", ".", "songid", "where", "type", "=", "value"], "question": "Find all the songs that do not have a lead vocal.", "question_toks": ["Find", "all", "the", "songs", "that", "do", "not", "have", "a", "lead", "vocal", "."], "guid": 1971}}
{"text": "Songs: SongId, Title; Albums: AId, Title, Year, Label, Type; Band: Id, Firstname, Lastname; Instruments: SongId, BandmateId, Instrument; Performance: SongId, Bandmate, StagePosition; Tracklists: AlbumId, Position, SongId; Vocals: SongId, Bandmate, Type | What is the type of vocables that appears most frequently?", "sql": "SELECT TYPE FROM vocals GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "music_2", "query": "SELECT TYPE FROM vocals GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "TYPE", "FROM", "vocals", "GROUP", "BY", "TYPE", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "type", "from", "vocals", "group", "by", "type", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the type of vocables that appears most frequently?", "question_toks": ["What", "is", "the", "type", "of", "vocables", "that", "appears", "most", "frequently", "?"], "guid": 1972}}
{"text": "artist: Artist_ID, Artist, Age, Famous_Title, Famous_Release_date; volume: Volume_ID, Volume_Issue, Issue_Date, Weeks_on_Top, Song, Artist_ID; music_festival: ID, Music_Festival, Date_of_ceremony, Category, Volume, Result | Give the songs included in volumes that have more than 1 week on top.", "sql": "SELECT Song FROM volume WHERE Weeks_on_Top  >  1", "example": {"db_id": "music_4", "query": "SELECT Song FROM volume WHERE Weeks_on_Top  >  1", "query_toks": ["SELECT", "Song", "FROM", "volume", "WHERE", "Weeks_on_Top", ">", "1"], "query_toks_no_value": ["select", "song", "from", "volume", "where", "weeks_on_top", ">", "value"], "question": "Give the songs included in volumes that have more than 1 week on top.", "question_toks": ["Give", "the", "songs", "included", "in", "volumes", "that", "have", "more", "than", "1", "week", "on", "top", "."], "guid": 1973}}
{"text": "genre: g_name, rating, most_popular_in; artist: artist_name, country, gender, preferred_genre; files: f_id, artist_name, file_size, duration, formats; song: song_name, artist_name, country, f_id, genre_is, rating, languages, releasedate, resolution | Find the file format that is used by the most files.", "sql": "SELECT formats FROM files GROUP BY formats ORDER BY COUNT (*) DESC LIMIT 1", "example": {"db_id": "music_1", "query": "SELECT formats FROM files GROUP BY formats ORDER BY COUNT (*) DESC LIMIT 1", "query_toks": ["SELECT", "formats", "FROM", "files", "GROUP", "BY", "formats", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "formats", "from", "files", "group", "by", "formats", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Find the file format that is used by the most files.", "question_toks": ["Find", "the", "file", "format", "that", "is", "used", "by", "the", "most", "files", "."], "guid": 1974}}
{"text": "stadium: Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average; singer: Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male; concert: concert_ID, concert_Name, Theme, Stadium_ID, Year; singer_in_concert: concert_ID, Singer_ID | What are the number of concerts that occurred in the stadium with the largest capacity ?", "sql": "select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)", "example": {"db_id": "concert_singer", "query": "select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)", "query_toks": ["select", "count", "(", "*", ")", "from", "concert", "where", "stadium_id", "=", "(", "select", "stadium_id", "from", "stadium", "order", "by", "capacity", "desc", "limit", "1", ")"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "concert", "where", "stadium_id", "=", "(", "select", "stadium_id", "from", "stadium", "order", "by", "capacity", "desc", "limit", "value", ")"], "question": "What are the number of concerts that occurred in the stadium with the largest capacity ?", "question_toks": ["What", "are", "the", "number", "of", "concerts", "that", "occurred", "in", "the", "stadium", "with", "the", "largest", "capacity", "?"], "guid": 1975}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | which ACL 2014 papers about Parsing used Jeopardy! Questions ?", "sql": "SELECT DISTINCT t2.paperid FROM paperdataset AS t3 JOIN dataset AS t5 ON t3.datasetid  =  t5.datasetid JOIN paperkeyphrase AS t4 ON t4.paperid  =  t3.paperid JOIN paper AS t2 ON t2.paperid  =  t3.paperid JOIN venue AS t6 ON t6.venueid  =  t2.venueid JOIN keyphrase AS t1 ON t4.keyphraseid  =  t1.keyphraseid WHERE t5.datasetname  =  \"Jeopardy! Questions\" AND t1.keyphrasename  =  \"Parsing\" AND t2.year  =  2014 AND t6.venuename  =  \"ACL\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t2.paperid FROM paperdataset AS t3 JOIN dataset AS t5 ON t3.datasetid  =  t5.datasetid JOIN paperkeyphrase AS t4 ON t4.paperid  =  t3.paperid JOIN paper AS t2 ON t2.paperid  =  t3.paperid JOIN venue AS t6 ON t6.venueid  =  t2.venueid JOIN keyphrase AS t1 ON t4.keyphraseid  =  t1.keyphraseid WHERE t5.datasetname  =  \"Jeopardy! Questions\" AND t1.keyphrasename  =  \"Parsing\" AND t2.year  =  2014 AND t6.venuename  =  \"ACL\";", "query_toks": ["SELECT", "DISTINCT", "t2.paperid", "FROM", "paperdataset", "AS", "t3", "JOIN", "dataset", "AS", "t5", "ON", "t3.datasetid", "=", "t5.datasetid", "JOIN", "paperkeyphrase", "AS", "t4", "ON", "t4.paperid", "=", "t3.paperid", "JOIN", "paper", "AS", "t2", "ON", "t2.paperid", "=", "t3.paperid", "JOIN", "venue", "AS", "t6", "ON", "t6.venueid", "=", "t2.venueid", "JOIN", "keyphrase", "AS", "t1", "ON", "t4.keyphraseid", "=", "t1.keyphraseid", "WHERE", "t5.datasetname", "=", "``", "Jeopardy", "!", "Questions", "''", "AND", "t1.keyphrasename", "=", "``", "Parsing", "''", "AND", "t2.year", "=", "2014", "AND", "t6.venuename", "=", "``", "ACL", "''", ";"], "query_toks_no_value": ["select", "distinct", "t2", ".", "paperid", "from", "paperdataset", "as", "t3", "join", "dataset", "as", "t5", "on", "t3", ".", "datasetid", "=", "t5", ".", "datasetid", "join", "paperkeyphrase", "as", "t4", "on", "t4", ".", "paperid", "=", "t3", ".", "paperid", "join", "paper", "as", "t2", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "join", "venue", "as", "t6", "on", "t6", ".", "venueid", "=", "t2", ".", "venueid", "join", "keyphrase", "as", "t1", "on", "t4", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "where", "t5", ".", "datasetname", "=", "value", "and", "t1", ".", "keyphrasename", "=", "value", "and", "t2", ".", "year", "=", "value", "and", "t6", ".", "venuename", "=", "value"], "question": "which ACL 2014 papers about Parsing used Jeopardy! Questions ?", "question_toks": ["which", "ACL", "2014", "papers", "about", "Parsing", "used", "Jeopardy", "!", "Questions", "?"], "guid": 4716}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | What papers has Richard Ladner written at chi ?", "sql": "SELECT DISTINCT t3.paperid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Richard Ladner\" AND t4.venuename  =  \"chi\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Richard Ladner\" AND t4.venuename  =  \"chi\";", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "venue", "AS", "t4", "JOIN", "paper", "AS", "t3", "ON", "t4.venueid", "=", "t3.venueid", "JOIN", "writes", "AS", "t2", "ON", "t2.paperid", "=", "t3.paperid", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "WHERE", "t1.authorname", "=", "``", "Richard", "Ladner", "''", "AND", "t4.venuename", "=", "``", "chi", "''", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "venue", "as", "t4", "join", "paper", "as", "t3", "on", "t4", ".", "venueid", "=", "t3", ".", "venueid", "join", "writes", "as", "t2", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "where", "t1", ".", "authorname", "=", "value", "and", "t4", ".", "venuename", "=", "value"], "question": "What papers has Richard Ladner written at chi ?", "question_toks": ["What", "papers", "has", "Richard", "Ladner", "written", "at", "chi", "?"], "guid": 4717}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | most recent papers by oren etzioni", "sql": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"oren etzioni\" ORDER BY t3.year DESC;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"oren etzioni\" ORDER BY t3.year DESC;", "query_toks": ["SELECT", "DISTINCT", "t2.paperid", "FROM", "writes", "AS", "t2", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "JOIN", "paper", "AS", "t3", "ON", "t2.paperid", "=", "t3.paperid", "WHERE", "t1.authorname", "=", "``", "oren", "etzioni", "''", "ORDER", "BY", "t3.year", "DESC", ";"], "query_toks_no_value": ["select", "distinct", "t2", ".", "paperid", "from", "writes", "as", "t2", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "join", "paper", "as", "t3", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "where", "t1", ".", "authorname", "=", "value", "order", "by", "t3", ".", "year", "desc"], "question": "most recent papers by oren etzioni", "question_toks": ["most", "recent", "papers", "by", "oren", "etzioni"], "guid": 4718}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | How many papers does David M. Blei have in AISTATS", "sql": "SELECT DISTINCT COUNT ( t3.paperid ) FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"David M. Blei\" AND t4.venuename  =  \"AISTATS\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( t3.paperid ) FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"David M. Blei\" AND t4.venuename  =  \"AISTATS\";", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "t3.paperid", ")", "FROM", "venue", "AS", "t4", "JOIN", "paper", "AS", "t3", "ON", "t4.venueid", "=", "t3.venueid", "JOIN", "writes", "AS", "t2", "ON", "t2.paperid", "=", "t3.paperid", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "WHERE", "t1.authorname", "=", "``", "David", "M.", "Blei", "''", "AND", "t4.venuename", "=", "``", "AISTATS", "''", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "t3", ".", "paperid", ")", "from", "venue", "as", "t4", "join", "paper", "as", "t3", "on", "t4", ".", "venueid", "=", "t3", ".", "venueid", "join", "writes", "as", "t2", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "where", "t1", ".", "authorname", "=", "value", "and", "t4", ".", "venuename", "=", "value"], "question": "How many papers does David M. Blei have in AISTATS", "question_toks": ["How", "many", "papers", "does", "David", "M.", "Blei", "have", "in", "AISTATS"], "guid": 4719}}
{"text": "event: Event_ID, Date, Venue, Name, Event_Attendance; journalist: journalist_ID, Name, Nationality, Age, Years_working; news_report: journalist_ID, Event_ID, Work_Type | Show the names of journalists and the dates of the events they reported.", "sql": "SELECT T3.Name ,  T2.Date FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID  =  T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID  =  T3.journalist_ID", "example": {"db_id": "news_report", "query": "SELECT T3.Name ,  T2.Date FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID  =  T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID  =  T3.journalist_ID", "query_toks": ["SELECT", "T3.Name", ",", "T2.Date", "FROM", "news_report", "AS", "T1", "JOIN", "event", "AS", "T2", "ON", "T1.Event_ID", "=", "T2.Event_ID", "JOIN", "journalist", "AS", "T3", "ON", "T1.journalist_ID", "=", "T3.journalist_ID"], "query_toks_no_value": ["select", "t3", ".", "name", ",", "t2", ".", "date", "from", "news_report", "as", "t1", "join", "event", "as", "t2", "on", "t1", ".", "event_id", "=", "t2", ".", "event_id", "join", "journalist", "as", "t3", "on", "t1", ".", "journalist_id", "=", "t3", ".", "journalist_id"], "question": "Show the names of journalists and the dates of the events they reported.", "question_toks": ["Show", "the", "names", "of", "journalists", "and", "the", "dates", "of", "the", "events", "they", "reported", "."], "guid": 4720}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | NIPS authors", "sql": "SELECT DISTINCT t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  \"NIPS\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  \"NIPS\";", "query_toks": ["SELECT", "DISTINCT", "t1.authorid", "FROM", "venue", "AS", "t3", "JOIN", "paper", "AS", "t2", "ON", "t3.venueid", "=", "t2.venueid", "JOIN", "writes", "AS", "t1", "ON", "t1.paperid", "=", "t2.paperid", "WHERE", "t3.venuename", "=", "``", "NIPS", "''", ";"], "query_toks_no_value": ["select", "distinct", "t1", ".", "authorid", "from", "venue", "as", "t3", "join", "paper", "as", "t2", "on", "t3", ".", "venueid", "=", "t2", ".", "venueid", "join", "writes", "as", "t1", "on", "t1", ".", "paperid", "=", "t2", ".", "paperid", "where", "t3", ".", "venuename", "=", "value"], "question": "NIPS authors", "question_toks": ["NIPS", "authors"], "guid": 4721}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | what paper has Richard Ladner published in chi ?", "sql": "SELECT DISTINCT t3.paperid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Richard Ladner\" AND t4.venuename  =  \"chi\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Richard Ladner\" AND t4.venuename  =  \"chi\";", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "venue", "AS", "t4", "JOIN", "paper", "AS", "t3", "ON", "t4.venueid", "=", "t3.venueid", "JOIN", "writes", "AS", "t2", "ON", "t2.paperid", "=", "t3.paperid", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "WHERE", "t1.authorname", "=", "``", "Richard", "Ladner", "''", "AND", "t4.venuename", "=", "``", "chi", "''", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "venue", "as", "t4", "join", "paper", "as", "t3", "on", "t4", ".", "venueid", "=", "t3", ".", "venueid", "join", "writes", "as", "t2", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "where", "t1", ".", "authorname", "=", "value", "and", "t4", ".", "venuename", "=", "value"], "question": "what paper has Richard Ladner published in chi ?", "question_toks": ["what", "paper", "has", "Richard", "Ladner", "published", "in", "chi", "?"], "guid": 4722}}
{"text": "event: Event_ID, Date, Venue, Name, Event_Attendance; journalist: journalist_ID, Name, Nationality, Age, Years_working; news_report: journalist_ID, Event_ID, Work_Type | Show the different nationalities and the number of journalists of each nationality.", "sql": "SELECT Nationality ,  COUNT(*) FROM journalist GROUP BY Nationality", "example": {"db_id": "news_report", "query": "SELECT Nationality ,  COUNT(*) FROM journalist GROUP BY Nationality", "query_toks": ["SELECT", "Nationality", ",", "COUNT", "(", "*", ")", "FROM", "journalist", "GROUP", "BY", "Nationality"], "query_toks_no_value": ["select", "nationality", ",", "count", "(", "*", ")", "from", "journalist", "group", "by", "nationality"], "question": "Show the different nationalities and the number of journalists of each nationality.", "question_toks": ["Show", "the", "different", "nationalities", "and", "the", "number", "of", "journalists", "of", "each", "nationality", "."], "guid": 4723}}
{"text": "Document_Types: document_type_code, document_description; Documents: document_id, document_type_code, grant_id, sent_date, response_received_date, other_details; Grants: grant_id, organisation_id, grant_amount, grant_start_date, grant_end_date, other_details; Organisation_Types: organisation_type, organisation_type_description; Organisations: organisation_id, organisation_type, organisation_details; Project_Outcomes: project_id, outcome_code, outcome_details; Project_Staff: staff_id, project_id, role_code, date_from, date_to, other_details; Projects: project_id, organisation_id, project_details; Research_Outcomes: outcome_code, outcome_description; Research_Staff: staff_id, employer_organisation_id, staff_details | What are the task details, task id and project id for the projects which are detailed as 'omnis' or  have more than 2 outcomes?", "sql": "SELECT T1.task_details ,  T1.task_id ,  T2.project_id FROM Tasks AS T1 JOIN Projects AS T2 ON T1.project_id  =  T2.project_id WHERE T2.project_details  =  'omnis' UNION SELECT T1.task_details ,  T1.task_id ,  T2.project_id FROM Tasks AS T1 JOIN Projects AS T2 ON T1.project_id  =  T2.project_id JOIN Project_outcomes AS T3 ON T2.project_id  =  T3.project_id GROUP BY T2.project_id HAVING count(*)  >  2", "example": {"db_id": "tracking_grants_for_research", "query": "SELECT T1.task_details ,  T1.task_id ,  T2.project_id FROM Tasks AS T1 JOIN Projects AS T2 ON T1.project_id  =  T2.project_id WHERE T2.project_details  =  'omnis' UNION SELECT T1.task_details ,  T1.task_id ,  T2.project_id FROM Tasks AS T1 JOIN Projects AS T2 ON T1.project_id  =  T2.project_id JOIN Project_outcomes AS T3 ON T2.project_id  =  T3.project_id GROUP BY T2.project_id HAVING count(*)  >  2", "query_toks": ["SELECT", "T1.task_details", ",", "T1.task_id", ",", "T2.project_id", "FROM", "Tasks", "AS", "T1", "JOIN", "Projects", "AS", "T2", "ON", "T1.project_id", "=", "T2.project_id", "WHERE", "T2.project_details", "=", "'omnis", "'", "UNION", "SELECT", "T1.task_details", ",", "T1.task_id", ",", "T2.project_id", "FROM", "Tasks", "AS", "T1", "JOIN", "Projects", "AS", "T2", "ON", "T1.project_id", "=", "T2.project_id", "JOIN", "Project_outcomes", "AS", "T3", "ON", "T2.project_id", "=", "T3.project_id", "GROUP", "BY", "T2.project_id", "HAVING", "count", "(", "*", ")", ">", "2"], "query_toks_no_value": ["select", "t1", ".", "task_details", ",", "t1", ".", "task_id", ",", "t2", ".", "project_id", "from", "tasks", "as", "t1", "join", "projects", "as", "t2", "on", "t1", ".", "project_id", "=", "t2", ".", "project_id", "where", "t2", ".", "project_details", "=", "value", "union", "select", "t1", ".", "task_details", ",", "t1", ".", "task_id", ",", "t2", ".", "project_id", "from", "tasks", "as", "t1", "join", "projects", "as", "t2", "on", "t1", ".", "project_id", "=", "t2", ".", "project_id", "join", "project_outcomes", "as", "t3", "on", "t2", ".", "project_id", "=", "t3", ".", "project_id", "group", "by", "t2", ".", "project_id", "having", "count", "(", "*", ")", ">", "value"], "question": "What are the task details, task id and project id for the projects which are detailed as 'omnis' or  have more than 2 outcomes?", "question_toks": ["What", "are", "the", "task", "details", ",", "task", "id", "and", "project", "id", "for", "the", "projects", "which", "are", "detailed", "as", "'omnis", "'", "or", "have", "more", "than", "2", "outcomes", "?"], "guid": 4724}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | How many citations does noah a smith has ?", "sql": "SELECT DISTINCT COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"noah a smith\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"noah a smith\";", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "t4.citedpaperid", ")", "FROM", "paper", "AS", "t3", "JOIN", "cite", "AS", "t4", "ON", "t3.paperid", "=", "t4.citedpaperid", "JOIN", "writes", "AS", "t2", "ON", "t2.paperid", "=", "t3.paperid", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "WHERE", "t1.authorname", "=", "``", "noah", "a", "smith", "''", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "t4", ".", "citedpaperid", ")", "from", "paper", "as", "t3", "join", "cite", "as", "t4", "on", "t3", ".", "paperid", "=", "t4", ".", "citedpaperid", "join", "writes", "as", "t2", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "where", "t1", ".", "authorname", "=", "value"], "question": "How many citations does noah a smith has ?", "question_toks": ["How", "many", "citations", "does", "noah", "a", "smith", "has", "?"], "guid": 4725}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the authors who have cooperated with \" H. V. Jagadish \" after 2000 .", "sql": "SELECT t2.name FROM writes AS t3 JOIN author AS t2 ON t3.aid  =  t2.aid JOIN publication AS t5 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t5.pid JOIN author AS t1 ON t4.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\" AND t5.year  >  2000;", "example": {"db_id": "academic", "query": "SELECT t2.name FROM writes AS t3 JOIN author AS t2 ON t3.aid  =  t2.aid JOIN publication AS t5 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t5.pid JOIN author AS t1 ON t4.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\" AND t5.year  >  2000;", "query_toks": ["SELECT", "t2.name", "FROM", "writes", "AS", "t3", "JOIN", "author", "AS", "t2", "ON", "t3.aid", "=", "t2.aid", "JOIN", "publication", "AS", "t5", "ON", "t3.pid", "=", "t5.pid", "JOIN", "writes", "AS", "t4", "ON", "t4.pid", "=", "t5.pid", "JOIN", "author", "AS", "t1", "ON", "t4.aid", "=", "t1.aid", "WHERE", "t1.name", "=", "``", "H.", "V.", "Jagadish", "''", "AND", "t5.year", ">", "2000", ";"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "writes", "as", "t3", "join", "author", "as", "t2", "on", "t3", ".", "aid", "=", "t2", ".", "aid", "join", "publication", "as", "t5", "on", "t3", ".", "pid", "=", "t5", ".", "pid", "join", "writes", "as", "t4", "on", "t4", ".", "pid", "=", "t5", ".", "pid", "join", "author", "as", "t1", "on", "t4", ".", "aid", "=", "t1", ".", "aid", "where", "t1", ".", "name", "=", "value", "and", "t5", ".", "year", ">", "value"], "question": "return me the authors who have cooperated with \" H. V. Jagadish \" after 2000 .", "question_toks": ["return", "me", "the", "authors", "who", "have", "cooperated", "with", "``", "H.", "V.", "Jagadish", "``", "after", "2000", "."], "guid": 4726}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | keyphrases Christof Dallermassl used in papers written last year", "sql": "SELECT DISTINCT t2.keyphraseid FROM paper AS t3 JOIN paperkeyphrase AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christof Dallermassl\" AND t3.year  =  2000;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t2.keyphraseid FROM paper AS t3 JOIN paperkeyphrase AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christof Dallermassl\" AND t3.year  =  2000;", "query_toks": ["SELECT", "DISTINCT", "t2.keyphraseid", "FROM", "paper", "AS", "t3", "JOIN", "paperkeyphrase", "AS", "t2", "ON", "t3.paperid", "=", "t2.paperid", "JOIN", "writes", "AS", "t4", "ON", "t4.paperid", "=", "t3.paperid", "JOIN", "author", "AS", "t1", "ON", "t4.authorid", "=", "t1.authorid", "WHERE", "t1.authorname", "=", "``", "Christof", "Dallermassl", "''", "AND", "t3.year", "=", "2000", ";"], "query_toks_no_value": ["select", "distinct", "t2", ".", "keyphraseid", "from", "paper", "as", "t3", "join", "paperkeyphrase", "as", "t2", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "join", "writes", "as", "t4", "on", "t4", ".", "paperid", "=", "t3", ".", "paperid", "join", "author", "as", "t1", "on", "t4", ".", "authorid", "=", "t1", ".", "authorid", "where", "t1", ".", "authorname", "=", "value", "and", "t3", ".", "year", "=", "value"], "question": "keyphrases Christof Dallermassl used in papers written last year", "question_toks": ["keyphrases", "Christof", "Dallermassl", "used", "in", "papers", "written", "last", "year"], "guid": 4727}}
{"text": "Document_Types: document_type_code, document_description; Documents: document_id, document_type_code, grant_id, sent_date, response_received_date, other_details; Grants: grant_id, organisation_id, grant_amount, grant_start_date, grant_end_date, other_details; Organisation_Types: organisation_type, organisation_type_description; Organisations: organisation_id, organisation_type, organisation_details; Project_Outcomes: project_id, outcome_code, outcome_details; Project_Staff: staff_id, project_id, role_code, date_from, date_to, other_details; Projects: project_id, organisation_id, project_details; Research_Outcomes: outcome_code, outcome_description; Research_Staff: staff_id, employer_organisation_id, staff_details | Which project made the most number of outcomes? List the project details and the project id.", "sql": "SELECT T1.project_details ,  T1.project_id FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "tracking_grants_for_research", "query": "SELECT T1.project_details ,  T1.project_id FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.project_details", ",", "T1.project_id", "FROM", "Projects", "AS", "T1", "JOIN", "Project_outcomes", "AS", "T2", "ON", "T1.project_id", "=", "T2.project_id", "GROUP", "BY", "T1.project_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "project_details", ",", "t1", ".", "project_id", "from", "projects", "as", "t1", "join", "project_outcomes", "as", "t2", "on", "t1", ".", "project_id", "=", "t2", ".", "project_id", "group", "by", "t1", ".", "project_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which project made the most number of outcomes? List the project details and the project id.", "question_toks": ["Which", "project", "made", "the", "most", "number", "of", "outcomes", "?", "List", "the", "project", "details", "and", "the", "project", "id", "."], "guid": 4728}}
{"text": "book_club: book_club_id, Year, Author_or_Editor, Book_Title, Publisher, Category, Result; movie: movie_id, Title, Year, Director, Budget_million, Gross_worldwide; culture_company: Company_name, Type, Incorporated_in, Group_Equity_Shareholding, book_club_id, movie_id | Return the title and director of the movie released in the year 2000 or earlier that had the highest worldwide gross.", "sql": "SELECT title ,  director FROM movie WHERE YEAR  <=  2000 ORDER BY gross_worldwide DESC LIMIT 1", "example": {"db_id": "culture_company", "query": "SELECT title ,  director FROM movie WHERE YEAR  <=  2000 ORDER BY gross_worldwide DESC LIMIT 1", "query_toks": ["SELECT", "title", ",", "director", "FROM", "movie", "WHERE", "YEAR", "<", "=", "2000", "ORDER", "BY", "gross_worldwide", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "title", ",", "director", "from", "movie", "where", "year", "<", "=", "value", "order", "by", "gross_worldwide", "desc", "limit", "value"], "question": "Return the title and director of the movie released in the year 2000 or earlier that had the highest worldwide gross.", "question_toks": ["Return", "the", "title", "and", "director", "of", "the", "movie", "released", "in", "the", "year", "2000", "or", "earlier", "that", "had", "the", "highest", "worldwide", "gross", "."], "guid": 4729}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the paper after 2000 in Databases area with the most citations .", "sql": "SELECT t3.title FROM DOMAIN AS t2 JOIN domain_publication AS t1 ON t2.did  =  t1.did JOIN publication AS t3 ON t3.pid  =  t1.pid WHERE t2.name  =  \"Databases\" AND t3.year  >  2000 ORDER BY t3.citation_num DESC LIMIT 1;", "example": {"db_id": "academic", "query": "SELECT t3.title FROM DOMAIN AS t2 JOIN domain_publication AS t1 ON t2.did  =  t1.did JOIN publication AS t3 ON t3.pid  =  t1.pid WHERE t2.name  =  \"Databases\" AND t3.year  >  2000 ORDER BY t3.citation_num DESC LIMIT 1;", "query_toks": ["SELECT", "t3.title", "FROM", "DOMAIN", "AS", "t2", "JOIN", "domain_publication", "AS", "t1", "ON", "t2.did", "=", "t1.did", "JOIN", "publication", "AS", "t3", "ON", "t3.pid", "=", "t1.pid", "WHERE", "t2.name", "=", "``", "Databases", "''", "AND", "t3.year", ">", "2000", "ORDER", "BY", "t3.citation_num", "DESC", "LIMIT", "1", ";"], "query_toks_no_value": ["select", "t3", ".", "title", "from", "domain", "as", "t2", "join", "domain_publication", "as", "t1", "on", "t2", ".", "did", "=", "t1", ".", "did", "join", "publication", "as", "t3", "on", "t3", ".", "pid", "=", "t1", ".", "pid", "where", "t2", ".", "name", "=", "value", "and", "t3", ".", "year", ">", "value", "order", "by", "t3", ".", "citation_num", "desc", "limit", "value"], "question": "return me the paper after 2000 in Databases area with the most citations .", "question_toks": ["return", "me", "the", "paper", "after", "2000", "in", "Databases", "area", "with", "the", "most", "citations", "."], "guid": 4730}}
{"text": "Scientists: SSN, Name; Projects: Code, Name, Hours; AssignedTo: Scientist, Project | How many scientists do not have any projects assigned to them?", "sql": "SELECT count(*) FROM scientists WHERE ssn NOT IN (SELECT scientist FROM AssignedTo)", "example": {"db_id": "scientist_1", "query": "SELECT count(*) FROM scientists WHERE ssn NOT IN (SELECT scientist FROM AssignedTo)", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "scientists", "WHERE", "ssn", "NOT", "IN", "(", "SELECT", "scientist", "FROM", "AssignedTo", ")"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "scientists", "where", "ssn", "not", "in", "(", "select", "scientist", "from", "assignedto", ")"], "question": "How many scientists do not have any projects assigned to them?", "question_toks": ["How", "many", "scientists", "do", "not", "have", "any", "projects", "assigned", "to", "them", "?"], "guid": 4731}}
{"text": "item: i_id, title; review: a_id, u_id, i_id, rating, rank; useracct: u_id, name; trust: source_u_id, target_u_id, trust | List all information in the item table.", "sql": "SELECT * FROM item", "example": {"db_id": "epinions_1", "query": "SELECT * FROM item", "query_toks": ["SELECT", "*", "FROM", "item"], "query_toks_no_value": ["select", "*", "from", "item"], "question": "List all information in the item table.", "question_toks": ["List", "all", "information", "in", "the", "item", "table", "."], "guid": 4732}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | Parsing papers from ACL 2014 using Jeopardy! Questions", "sql": "SELECT DISTINCT t2.paperid FROM paperdataset AS t3 JOIN dataset AS t5 ON t3.datasetid  =  t5.datasetid JOIN paperkeyphrase AS t4 ON t4.paperid  =  t3.paperid JOIN paper AS t2 ON t2.paperid  =  t3.paperid JOIN venue AS t6 ON t6.venueid  =  t2.venueid JOIN keyphrase AS t1 ON t4.keyphraseid  =  t1.keyphraseid WHERE t5.datasetname  =  \"Jeopardy! Questions\" AND t1.keyphrasename  =  \"Parsing\" AND t2.year  =  2014 AND t6.venuename  =  \"ACL\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t2.paperid FROM paperdataset AS t3 JOIN dataset AS t5 ON t3.datasetid  =  t5.datasetid JOIN paperkeyphrase AS t4 ON t4.paperid  =  t3.paperid JOIN paper AS t2 ON t2.paperid  =  t3.paperid JOIN venue AS t6 ON t6.venueid  =  t2.venueid JOIN keyphrase AS t1 ON t4.keyphraseid  =  t1.keyphraseid WHERE t5.datasetname  =  \"Jeopardy! Questions\" AND t1.keyphrasename  =  \"Parsing\" AND t2.year  =  2014 AND t6.venuename  =  \"ACL\";", "query_toks": ["SELECT", "DISTINCT", "t2.paperid", "FROM", "paperdataset", "AS", "t3", "JOIN", "dataset", "AS", "t5", "ON", "t3.datasetid", "=", "t5.datasetid", "JOIN", "paperkeyphrase", "AS", "t4", "ON", "t4.paperid", "=", "t3.paperid", "JOIN", "paper", "AS", "t2", "ON", "t2.paperid", "=", "t3.paperid", "JOIN", "venue", "AS", "t6", "ON", "t6.venueid", "=", "t2.venueid", "JOIN", "keyphrase", "AS", "t1", "ON", "t4.keyphraseid", "=", "t1.keyphraseid", "WHERE", "t5.datasetname", "=", "``", "Jeopardy", "!", "Questions", "''", "AND", "t1.keyphrasename", "=", "``", "Parsing", "''", "AND", "t2.year", "=", "2014", "AND", "t6.venuename", "=", "``", "ACL", "''", ";"], "query_toks_no_value": ["select", "distinct", "t2", ".", "paperid", "from", "paperdataset", "as", "t3", "join", "dataset", "as", "t5", "on", "t3", ".", "datasetid", "=", "t5", ".", "datasetid", "join", "paperkeyphrase", "as", "t4", "on", "t4", ".", "paperid", "=", "t3", ".", "paperid", "join", "paper", "as", "t2", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "join", "venue", "as", "t6", "on", "t6", ".", "venueid", "=", "t2", ".", "venueid", "join", "keyphrase", "as", "t1", "on", "t4", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "where", "t5", ".", "datasetname", "=", "value", "and", "t1", ".", "keyphrasename", "=", "value", "and", "t2", ".", "year", "=", "value", "and", "t6", ".", "venuename", "=", "value"], "question": "Parsing papers from ACL 2014 using Jeopardy! Questions", "question_toks": ["Parsing", "papers", "from", "ACL", "2014", "using", "Jeopardy", "!", "Questions"], "guid": 4733}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | subhasis chaudhuri", "sql": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"subhasis chaudhuri\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"subhasis chaudhuri\";", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "writes", "AS", "t2", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "JOIN", "paper", "AS", "t3", "ON", "t2.paperid", "=", "t3.paperid", "WHERE", "t1.authorname", "=", "``", "subhasis", "chaudhuri", "''", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "writes", "as", "t2", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "join", "paper", "as", "t3", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "where", "t1", ".", "authorname", "=", "value"], "question": "subhasis chaudhuri", "question_toks": ["subhasis", "chaudhuri"], "guid": 4734}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | recent deep learning papers", "sql": "SELECT DISTINCT t3.paperid  ,  t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\" ORDER BY t3.year DESC;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid  ,  t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\" ORDER BY t3.year DESC;", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", ",", "t3.year", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "WHERE", "t1.keyphrasename", "=", "``", "deep", "learning", "''", "ORDER", "BY", "t3.year", "DESC", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", ",", "t3", ".", "year", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "where", "t1", ".", "keyphrasename", "=", "value", "order", "by", "t3", ".", "year", "desc"], "question": "recent deep learning papers", "question_toks": ["recent", "deep", "learning", "papers"], "guid": 4735}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | list papers published in chi", "sql": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"chi\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"chi\";", "query_toks": ["SELECT", "DISTINCT", "t1.paperid", "FROM", "venue", "AS", "t2", "JOIN", "paper", "AS", "t1", "ON", "t2.venueid", "=", "t1.venueid", "WHERE", "t2.venuename", "=", "``", "chi", "''", ";"], "query_toks_no_value": ["select", "distinct", "t1", ".", "paperid", "from", "venue", "as", "t2", "join", "paper", "as", "t1", "on", "t2", ".", "venueid", "=", "t1", ".", "venueid", "where", "t2", ".", "venuename", "=", "value"], "question": "list papers published in chi", "question_toks": ["list", "papers", "published", "in", "chi"], "guid": 4736}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | papers published in the last year", "sql": "SELECT DISTINCT paperid FROM paper WHERE YEAR  =  ( SELECT MAX ( YEAR ) FROM paper );", "example": {"db_id": "scholar", "query": "SELECT DISTINCT paperid FROM paper WHERE YEAR  =  ( SELECT MAX ( YEAR ) FROM paper );", "query_toks": ["SELECT", "DISTINCT", "paperid", "FROM", "paper", "WHERE", "YEAR", "=", "(", "SELECT", "MAX", "(", "YEAR", ")", "FROM", "paper", ")", ";"], "query_toks_no_value": ["select", "distinct", "paperid", "from", "paper", "where", "year", "=", "(", "select", "max", "(", "year", ")", "from", "paper", ")"], "question": "papers published in the last year", "question_toks": ["papers", "published", "in", "the", "last", "year"], "guid": 4737}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | first deep learning paper", "sql": "SELECT DISTINCT t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\" GROUP BY t3.year ORDER BY t3.year ASC;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\" GROUP BY t3.year ORDER BY t3.year ASC;", "query_toks": ["SELECT", "DISTINCT", "t3.year", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "WHERE", "t1.keyphrasename", "=", "``", "deep", "learning", "''", "GROUP", "BY", "t3.year", "ORDER", "BY", "t3.year", "ASC", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "year", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "where", "t1", ".", "keyphrasename", "=", "value", "group", "by", "t3", ".", "year", "order", "by", "t3", ".", "year", "asc"], "question": "first deep learning paper", "question_toks": ["first", "deep", "learning", "paper"], "guid": 4738}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | Who wrote sensor fusion ?", "sql": "SELECT DISTINCT t1.authorname FROM paperkeyphrase AS t2 JOIN keyphrase AS t4 ON t2.keyphraseid  =  t4.keyphraseid JOIN writes AS t3 ON t3.paperid  =  t2.paperid JOIN author AS t1 ON t3.authorid  =  t1.authorid WHERE t4.keyphrasename LIKE \"sensor fusion\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t1.authorname FROM paperkeyphrase AS t2 JOIN keyphrase AS t4 ON t2.keyphraseid  =  t4.keyphraseid JOIN writes AS t3 ON t3.paperid  =  t2.paperid JOIN author AS t1 ON t3.authorid  =  t1.authorid WHERE t4.keyphrasename LIKE \"sensor fusion\";", "query_toks": ["SELECT", "DISTINCT", "t1.authorname", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t4", "ON", "t2.keyphraseid", "=", "t4.keyphraseid", "JOIN", "writes", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "JOIN", "author", "AS", "t1", "ON", "t3.authorid", "=", "t1.authorid", "WHERE", "t4.keyphrasename", "LIKE", "``", "sensor", "fusion", "''", ";"], "query_toks_no_value": ["select", "distinct", "t1", ".", "authorname", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t4", "on", "t2", ".", "keyphraseid", "=", "t4", ".", "keyphraseid", "join", "writes", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "join", "author", "as", "t1", "on", "t3", ".", "authorid", "=", "t1", ".", "authorid", "where", "t4", ".", "keyphrasename", "like", "value"], "question": "Who wrote sensor fusion ?", "question_toks": ["Who", "wrote", "sensor", "fusion", "?"], "guid": 4739}}
{"text": "Scientists: SSN, Name; Projects: Code, Name, Hours; AssignedTo: Scientist, Project | What are the names of any scientists who worked on projects named 'Matter of Time' and 'A Puzzling Pattern'?", "sql": "SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.name  =  'Matter of Time' INTERSECT SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.name  =  'A Puzzling Parallax'", "example": {"db_id": "scientist_1", "query": "SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.name  =  'Matter of Time' INTERSECT SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.name  =  'A Puzzling Parallax'", "query_toks": ["SELECT", "T3.name", "FROM", "assignedto", "AS", "T1", "JOIN", "projects", "AS", "T2", "ON", "T1.project", "=", "T2.code", "JOIN", "scientists", "AS", "T3", "ON", "T1.scientist", "=", "T3.SSN", "WHERE", "T2.name", "=", "'Matter", "of", "Time", "'", "INTERSECT", "SELECT", "T3.name", "FROM", "assignedto", "AS", "T1", "JOIN", "projects", "AS", "T2", "ON", "T1.project", "=", "T2.code", "JOIN", "scientists", "AS", "T3", "ON", "T1.scientist", "=", "T3.SSN", "WHERE", "T2.name", "=", "'A", "Puzzling", "Parallax", "'"], "query_toks_no_value": ["select", "t3", ".", "name", "from", "assignedto", "as", "t1", "join", "projects", "as", "t2", "on", "t1", ".", "project", "=", "t2", ".", "code", "join", "scientists", "as", "t3", "on", "t1", ".", "scientist", "=", "t3", ".", "ssn", "where", "t2", ".", "name", "=", "value", "intersect", "select", "t3", ".", "name", "from", "assignedto", "as", "t1", "join", "projects", "as", "t2", "on", "t1", ".", "project", "=", "t2", ".", "code", "join", "scientists", "as", "t3", "on", "t1", ".", "scientist", "=", "t3", ".", "ssn", "where", "t2", ".", "name", "=", "value"], "question": "What are the names of any scientists who worked on projects named 'Matter of Time' and 'A Puzzling Pattern'?", "question_toks": ["What", "are", "the", "names", "of", "any", "scientists", "who", "worked", "on", "projects", "named", "'Matter", "of", "Time", "'", "and", "'A", "Puzzling", "Pattern", "'", "?"], "guid": 4740}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | Papers from Liwen Xiong in 2015", "sql": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Liwen Xiong\" AND t3.year  =  2015;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Liwen Xiong\" AND t3.year  =  2015;", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "writes", "AS", "t2", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "JOIN", "paper", "AS", "t3", "ON", "t2.paperid", "=", "t3.paperid", "WHERE", "t1.authorname", "=", "``", "Liwen", "Xiong", "''", "AND", "t3.year", "=", "2015", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "writes", "as", "t2", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "join", "paper", "as", "t3", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "where", "t1", ".", "authorname", "=", "value", "and", "t3", ".", "year", "=", "value"], "question": "Papers from Liwen Xiong in 2015", "question_toks": ["Papers", "from", "Liwen", "Xiong", "in", "2015"], "guid": 4741}}
{"text": "Inst: instID, name, country; Authors: authID, lname, fname; Papers: paperID, title; Authorship: authID, instID, paperID, authOrder | What are the first and last name of the author who published the paper titled \"Nameless, Painless\"?", "sql": "SELECT t1.fname ,  t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title  =  \"Nameless ,  Painless\"", "example": {"db_id": "icfp_1", "query": "SELECT t1.fname ,  t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title  =  \"Nameless ,  Painless\"", "query_toks": ["SELECT", "t1.fname", ",", "t1.lname", "FROM", "authors", "AS", "t1", "JOIN", "authorship", "AS", "t2", "ON", "t1.authid", "=", "t2.authid", "JOIN", "papers", "AS", "t3", "ON", "t2.paperid", "=", "t3.paperid", "WHERE", "t3.title", "=", "``", "Nameless", ",", "Painless", "''"], "query_toks_no_value": ["select", "t1", ".", "fname", ",", "t1", ".", "lname", "from", "authors", "as", "t1", "join", "authorship", "as", "t2", "on", "t1", ".", "authid", "=", "t2", ".", "authid", "join", "papers", "as", "t3", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "where", "t3", ".", "title", "=", "value"], "question": "What are the first and last name of the author who published the paper titled \"Nameless, Painless\"?", "question_toks": ["What", "are", "the", "first", "and", "last", "name", "of", "the", "author", "who", "published", "the", "paper", "titled", "``", "Nameless", ",", "Painless", "''", "?"], "guid": 4742}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | How many papers used ImageNet dataset ?", "sql": "SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname LIKE \"ImageNet\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname LIKE \"ImageNet\";", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "DISTINCT", "t3.paperid", ")", "FROM", "paperdataset", "AS", "t2", "JOIN", "dataset", "AS", "t1", "ON", "t2.datasetid", "=", "t1.datasetid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "WHERE", "t1.datasetname", "LIKE", "``", "ImageNet", "''", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "distinct", "t3", ".", "paperid", ")", "from", "paperdataset", "as", "t2", "join", "dataset", "as", "t1", "on", "t2", ".", "datasetid", "=", "t1", ".", "datasetid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "where", "t1", ".", "datasetname", "like", "value"], "question": "How many papers used ImageNet dataset ?", "question_toks": ["How", "many", "papers", "used", "ImageNet", "dataset", "?"], "guid": 4743}}
{"text": "book_club: book_club_id, Year, Author_or_Editor, Book_Title, Publisher, Category, Result; movie: movie_id, Title, Year, Director, Budget_million, Gross_worldwide; culture_company: Company_name, Type, Incorporated_in, Group_Equity_Shareholding, book_club_id, movie_id | Return the publisher that has published the most books.", "sql": "SELECT publisher FROM book_club GROUP BY publisher ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "culture_company", "query": "SELECT publisher FROM book_club GROUP BY publisher ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "publisher", "FROM", "book_club", "GROUP", "BY", "publisher", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "publisher", "from", "book_club", "group", "by", "publisher", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Return the publisher that has published the most books.", "question_toks": ["Return", "the", "publisher", "that", "has", "published", "the", "most", "books", "."], "guid": 4744}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the author who has the most number of papers in the VLDB conference .", "sql": "SELECT t1.name FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t2.name  =  \"VLDB\" GROUP BY t1.name ORDER BY COUNT ( DISTINCT t4.title ) DESC LIMIT 1;", "example": {"db_id": "academic", "query": "SELECT t1.name FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t2.name  =  \"VLDB\" GROUP BY t1.name ORDER BY COUNT ( DISTINCT t4.title ) DESC LIMIT 1;", "query_toks": ["SELECT", "t1.name", "FROM", "publication", "AS", "t4", "JOIN", "conference", "AS", "t2", "ON", "t4.cid", "=", "t2.cid", "JOIN", "writes", "AS", "t3", "ON", "t3.pid", "=", "t4.pid", "JOIN", "author", "AS", "t1", "ON", "t3.aid", "=", "t1.aid", "WHERE", "t2.name", "=", "``", "VLDB", "''", "GROUP", "BY", "t1.name", "ORDER", "BY", "COUNT", "(", "DISTINCT", "t4.title", ")", "DESC", "LIMIT", "1", ";"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "publication", "as", "t4", "join", "conference", "as", "t2", "on", "t4", ".", "cid", "=", "t2", ".", "cid", "join", "writes", "as", "t3", "on", "t3", ".", "pid", "=", "t4", ".", "pid", "join", "author", "as", "t1", "on", "t3", ".", "aid", "=", "t1", ".", "aid", "where", "t2", ".", "name", "=", "value", "group", "by", "t1", ".", "name", "order", "by", "count", "(", "distinct", "t4", ".", "title", ")", "desc", "limit", "value"], "question": "return me the author who has the most number of papers in the VLDB conference .", "question_toks": ["return", "me", "the", "author", "who", "has", "the", "most", "number", "of", "papers", "in", "the", "VLDB", "conference", "."], "guid": 4745}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the total citations of papers in PVLDB in each year .", "sql": "SELECT t2.year  ,  SUM ( t2.citation_num ) FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\" GROUP BY t2.year;", "example": {"db_id": "academic", "query": "SELECT t2.year  ,  SUM ( t2.citation_num ) FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\" GROUP BY t2.year;", "query_toks": ["SELECT", "t2.year", ",", "SUM", "(", "t2.citation_num", ")", "FROM", "publication", "AS", "t2", "JOIN", "journal", "AS", "t1", "ON", "t2.jid", "=", "t1.jid", "WHERE", "t1.name", "=", "``", "PVLDB", "''", "GROUP", "BY", "t2.year", ";"], "query_toks_no_value": ["select", "t2", ".", "year", ",", "sum", "(", "t2", ".", "citation_num", ")", "from", "publication", "as", "t2", "join", "journal", "as", "t1", "on", "t2", ".", "jid", "=", "t1", ".", "jid", "where", "t1", ".", "name", "=", "value", "group", "by", "t2", ".", "year"], "question": "return me the total citations of papers in PVLDB in each year .", "question_toks": ["return", "me", "the", "total", "citations", "of", "papers", "in", "PVLDB", "in", "each", "year", "."], "guid": 4746}}
{"text": "event: Event_ID, Date, Venue, Name, Event_Attendance; journalist: journalist_ID, Name, Nationality, Age, Years_working; news_report: journalist_ID, Event_ID, Work_Type | What is the average number of years spent working as a journalist?", "sql": "SELECT avg(Years_working) FROM journalist", "example": {"db_id": "news_report", "query": "SELECT avg(Years_working) FROM journalist", "query_toks": ["SELECT", "avg", "(", "Years_working", ")", "FROM", "journalist"], "query_toks_no_value": ["select", "avg", "(", "years_working", ")", "from", "journalist"], "question": "What is the average number of years spent working as a journalist?", "question_toks": ["What", "is", "the", "average", "number", "of", "years", "spent", "working", "as", "a", "journalist", "?"], "guid": 4747}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the keywords related to \" H. V. Jagadish \" .", "sql": "SELECT t1.keyword FROM publication_keyword AS t5 JOIN keyword AS t1 ON t5.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t3.pid JOIN author AS t2 ON t4.aid  =  t2.aid WHERE t2.name  =  \"H. V. Jagadish\";", "example": {"db_id": "academic", "query": "SELECT t1.keyword FROM publication_keyword AS t5 JOIN keyword AS t1 ON t5.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t3.pid JOIN author AS t2 ON t4.aid  =  t2.aid WHERE t2.name  =  \"H. V. Jagadish\";", "query_toks": ["SELECT", "t1.keyword", "FROM", "publication_keyword", "AS", "t5", "JOIN", "keyword", "AS", "t1", "ON", "t5.kid", "=", "t1.kid", "JOIN", "publication", "AS", "t3", "ON", "t3.pid", "=", "t5.pid", "JOIN", "writes", "AS", "t4", "ON", "t4.pid", "=", "t3.pid", "JOIN", "author", "AS", "t2", "ON", "t4.aid", "=", "t2.aid", "WHERE", "t2.name", "=", "``", "H.", "V.", "Jagadish", "''", ";"], "query_toks_no_value": ["select", "t1", ".", "keyword", "from", "publication_keyword", "as", "t5", "join", "keyword", "as", "t1", "on", "t5", ".", "kid", "=", "t1", ".", "kid", "join", "publication", "as", "t3", "on", "t3", ".", "pid", "=", "t5", ".", "pid", "join", "writes", "as", "t4", "on", "t4", ".", "pid", "=", "t3", ".", "pid", "join", "author", "as", "t2", "on", "t4", ".", "aid", "=", "t2", ".", "aid", "where", "t2", ".", "name", "=", "value"], "question": "return me the keywords related to \" H. V. Jagadish \" .", "question_toks": ["return", "me", "the", "keywords", "related", "to", "``", "H.", "V.", "Jagadish", "``", "."], "guid": 4748}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | how many Parsing papers did acl 2012 have ?", "sql": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Parsing\" AND t3.year  =  2012 AND t4.venuename  =  \"acl\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Parsing\" AND t3.year  =  2012 AND t4.venuename  =  \"acl\";", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "JOIN", "venue", "AS", "t4", "ON", "t4.venueid", "=", "t3.venueid", "WHERE", "t1.keyphrasename", "=", "``", "Parsing", "''", "AND", "t3.year", "=", "2012", "AND", "t4.venuename", "=", "``", "acl", "''", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "join", "venue", "as", "t4", "on", "t4", ".", "venueid", "=", "t3", ".", "venueid", "where", "t1", ".", "keyphrasename", "=", "value", "and", "t3", ".", "year", "=", "value", "and", "t4", ".", "venuename", "=", "value"], "question": "how many Parsing papers did acl 2012 have ?", "question_toks": ["how", "many", "Parsing", "papers", "did", "acl", "2012", "have", "?"], "guid": 4749}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | who writes papers with Noah A Smith ?", "sql": "SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Noah A Smith\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Noah A Smith\";", "query_toks": ["SELECT", "DISTINCT", "t1.authorid", "FROM", "writes", "AS", "t3", "JOIN", "author", "AS", "t2", "ON", "t3.authorid", "=", "t2.authorid", "JOIN", "writes", "AS", "t4", "ON", "t4.paperid", "=", "t3.paperid", "JOIN", "author", "AS", "t1", "ON", "t4.authorid", "=", "t1.authorid", "WHERE", "t2.authorname", "=", "``", "Noah", "A", "Smith", "''", ";"], "query_toks_no_value": ["select", "distinct", "t1", ".", "authorid", "from", "writes", "as", "t3", "join", "author", "as", "t2", "on", "t3", ".", "authorid", "=", "t2", ".", "authorid", "join", "writes", "as", "t4", "on", "t4", ".", "paperid", "=", "t3", ".", "paperid", "join", "author", "as", "t1", "on", "t4", ".", "authorid", "=", "t1", ".", "authorid", "where", "t2", ".", "authorname", "=", "value"], "question": "who writes papers with Noah A Smith ?", "question_toks": ["who", "writes", "papers", "with", "Noah", "A", "Smith", "?"], "guid": 4750}}
{"text": "item: i_id, title; review: a_id, u_id, i_id, rating, rank; useracct: u_id, name; trust: source_u_id, target_u_id, trust | List the titles of all items in alphabetic order .", "sql": "SELECT title FROM item ORDER BY title", "example": {"db_id": "epinions_1", "query": "SELECT title FROM item ORDER BY title", "query_toks": ["SELECT", "title", "FROM", "item", "ORDER", "BY", "title"], "query_toks_no_value": ["select", "title", "from", "item", "order", "by", "title"], "question": "List the titles of all items in alphabetic order .", "question_toks": ["List", "the", "titles", "of", "all", "items", "in", "alphabetic", "order", "."], "guid": 4751}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | papers by Liwen Xiong in 2015", "sql": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Liwen Xiong\" AND t3.year  =  2015;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Liwen Xiong\" AND t3.year  =  2015;", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "writes", "AS", "t2", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "JOIN", "paper", "AS", "t3", "ON", "t2.paperid", "=", "t3.paperid", "WHERE", "t1.authorname", "=", "``", "Liwen", "Xiong", "''", "AND", "t3.year", "=", "2015", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "writes", "as", "t2", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "join", "paper", "as", "t3", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "where", "t1", ".", "authorname", "=", "value", "and", "t3", ".", "year", "=", "value"], "question": "papers by Liwen Xiong in 2015", "question_toks": ["papers", "by", "Liwen", "Xiong", "in", "2015"], "guid": 4752}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | What papers has Liwen Xiong written in 2015", "sql": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Liwen Xiong\" AND t3.year  =  2015;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Liwen Xiong\" AND t3.year  =  2015;", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "writes", "AS", "t2", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "JOIN", "paper", "AS", "t3", "ON", "t2.paperid", "=", "t3.paperid", "WHERE", "t1.authorname", "=", "``", "Liwen", "Xiong", "''", "AND", "t3.year", "=", "2015", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "writes", "as", "t2", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "join", "paper", "as", "t3", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "where", "t1", ".", "authorname", "=", "value", "and", "t3", ".", "year", "=", "value"], "question": "What papers has Liwen Xiong written in 2015", "question_toks": ["What", "papers", "has", "Liwen", "Xiong", "written", "in", "2015"], "guid": 4753}}
{"text": "journal: Journal_ID, Date, Theme, Sales; editor: Editor_ID, Name, Age; journal_committee: Editor_ID, Journal_ID, Work_Type | List the names of editors that are not on any journal committee.", "sql": "SELECT Name FROM editor WHERE editor_id NOT IN (SELECT editor_id FROM journal_committee)", "example": {"db_id": "journal_committee", "query": "SELECT Name FROM editor WHERE editor_id NOT IN (SELECT editor_id FROM journal_committee)", "query_toks": ["SELECT", "Name", "FROM", "editor", "WHERE", "editor_id", "NOT", "IN", "(", "SELECT", "editor_id", "FROM", "journal_committee", ")"], "query_toks_no_value": ["select", "name", "from", "editor", "where", "editor_id", "not", "in", "(", "select", "editor_id", "from", "journal_committee", ")"], "question": "List the names of editors that are not on any journal committee.", "question_toks": ["List", "the", "names", "of", "editors", "that", "are", "not", "on", "any", "journal", "committee", "."], "guid": 4754}}
{"text": "book_club: book_club_id, Year, Author_or_Editor, Book_Title, Publisher, Category, Result; movie: movie_id, Title, Year, Director, Budget_million, Gross_worldwide; culture_company: Company_name, Type, Incorporated_in, Group_Equity_Shareholding, book_club_id, movie_id | Which directors had a movie in either 1999 or 2000?", "sql": "SELECT director FROM movie WHERE YEAR  =  1999 OR YEAR  =  2000", "example": {"db_id": "culture_company", "query": "SELECT director FROM movie WHERE YEAR  =  1999 OR YEAR  =  2000", "query_toks": ["SELECT", "director", "FROM", "movie", "WHERE", "YEAR", "=", "1999", "OR", "YEAR", "=", "2000"], "query_toks_no_value": ["select", "director", "from", "movie", "where", "year", "=", "value", "or", "year", "=", "value"], "question": "Which directors had a movie in either 1999 or 2000?", "question_toks": ["Which", "directors", "had", "a", "movie", "in", "either", "1999", "or", "2000", "?"], "guid": 4755}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | What papers are authored by sharon goldwater ?", "sql": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";", "query_toks": ["SELECT", "DISTINCT", "t2.paperid", "FROM", "writes", "AS", "t2", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "WHERE", "t1.authorname", "=", "``", "sharon", "goldwater", "''", ";"], "query_toks_no_value": ["select", "distinct", "t2", ".", "paperid", "from", "writes", "as", "t2", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "where", "t1", ".", "authorname", "=", "value"], "question": "What papers are authored by sharon goldwater ?", "question_toks": ["What", "papers", "are", "authored", "by", "sharon", "goldwater", "?"], "guid": 4756}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the number of papers by \" H. V. Jagadish \" on PVLDB .", "sql": "SELECT COUNT ( DISTINCT t4.title ) FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\" AND t2.name  =  \"PVLDB\";", "example": {"db_id": "academic", "query": "SELECT COUNT ( DISTINCT t4.title ) FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\" AND t2.name  =  \"PVLDB\";", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "t4.title", ")", "FROM", "publication", "AS", "t4", "JOIN", "journal", "AS", "t2", "ON", "t4.jid", "=", "t2.jid", "JOIN", "writes", "AS", "t3", "ON", "t3.pid", "=", "t4.pid", "JOIN", "author", "AS", "t1", "ON", "t3.aid", "=", "t1.aid", "WHERE", "t1.name", "=", "``", "H.", "V.", "Jagadish", "''", "AND", "t2.name", "=", "``", "PVLDB", "''", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "t4", ".", "title", ")", "from", "publication", "as", "t4", "join", "journal", "as", "t2", "on", "t4", ".", "jid", "=", "t2", ".", "jid", "join", "writes", "as", "t3", "on", "t3", ".", "pid", "=", "t4", ".", "pid", "join", "author", "as", "t1", "on", "t3", ".", "aid", "=", "t1", ".", "aid", "where", "t1", ".", "name", "=", "value", "and", "t2", ".", "name", "=", "value"], "question": "return me the number of papers by \" H. V. Jagadish \" on PVLDB .", "question_toks": ["return", "me", "the", "number", "of", "papers", "by", "``", "H.", "V.", "Jagadish", "``", "on", "PVLDB", "."], "guid": 4757}}
{"text": "Scientists: SSN, Name; Projects: Code, Name, Hours; AssignedTo: Scientist, Project | Find the number of distinct projects.", "sql": "SELECT count(DISTINCT name) FROM projects", "example": {"db_id": "scientist_1", "query": "SELECT count(DISTINCT name) FROM projects", "query_toks": ["SELECT", "count", "(", "DISTINCT", "name", ")", "FROM", "projects"], "query_toks_no_value": ["select", "count", "(", "distinct", "name", ")", "from", "projects"], "question": "Find the number of distinct projects.", "question_toks": ["Find", "the", "number", "of", "distinct", "projects", "."], "guid": 4758}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | what kind of papers does Luke Zettlemoyer publish", "sql": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";", "query_toks": ["SELECT", "DISTINCT", "t1.keyphraseid", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "JOIN", "writes", "AS", "t4", "ON", "t4.paperid", "=", "t3.paperid", "JOIN", "author", "AS", "t5", "ON", "t4.authorid", "=", "t5.authorid", "WHERE", "t5.authorname", "=", "``", "Luke", "Zettlemoyer", "''", ";"], "query_toks_no_value": ["select", "distinct", "t1", ".", "keyphraseid", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "join", "writes", "as", "t4", "on", "t4", ".", "paperid", "=", "t3", ".", "paperid", "join", "author", "as", "t5", "on", "t4", ".", "authorid", "=", "t5", ".", "authorid", "where", "t5", ".", "authorname", "=", "value"], "question": "what kind of papers does Luke Zettlemoyer publish", "question_toks": ["what", "kind", "of", "papers", "does", "Luke", "Zettlemoyer", "publish"], "guid": 4759}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | What are the latest publications on deep learning ?", "sql": "SELECT DISTINCT t3.paperid  ,  t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\" ORDER BY t3.year DESC;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid  ,  t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\" ORDER BY t3.year DESC;", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", ",", "t3.year", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "WHERE", "t1.keyphrasename", "=", "``", "deep", "learning", "''", "ORDER", "BY", "t3.year", "DESC", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", ",", "t3", ".", "year", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "where", "t1", ".", "keyphrasename", "=", "value", "order", "by", "t3", ".", "year", "desc"], "question": "What are the latest publications on deep learning ?", "question_toks": ["What", "are", "the", "latest", "publications", "on", "deep", "learning", "?"], "guid": 4760}}
{"text": "publication: Publication_ID, Book_ID, Publisher, Publication_Date, Price; book: Book_ID, Title, Issues, Writer | What are the dates of publications in descending order of price?", "sql": "SELECT Publication_Date FROM publication ORDER BY Price DESC", "example": {"db_id": "book_2", "query": "SELECT Publication_Date FROM publication ORDER BY Price DESC", "query_toks": ["SELECT", "Publication_Date", "FROM", "publication", "ORDER", "BY", "Price", "DESC"], "query_toks_no_value": ["select", "publication_date", "from", "publication", "order", "by", "price", "desc"], "question": "What are the dates of publications in descending order of price?", "question_toks": ["What", "are", "the", "dates", "of", "publications", "in", "descending", "order", "of", "price", "?"], "guid": 4761}}
{"text": "event: Event_ID, Date, Venue, Name, Event_Attendance; journalist: journalist_ID, Name, Nationality, Age, Years_working; news_report: journalist_ID, Event_ID, Work_Type | Show the most common nationality for journalists.", "sql": "SELECT Nationality FROM journalist GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1", "example": {"db_id": "news_report", "query": "SELECT Nationality FROM journalist GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "Nationality", "FROM", "journalist", "GROUP", "BY", "Nationality", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "nationality", "from", "journalist", "group", "by", "nationality", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Show the most common nationality for journalists.", "question_toks": ["Show", "the", "most", "common", "nationality", "for", "journalists", "."], "guid": 4762}}
{"text": "publication: Publication_ID, Book_ID, Publisher, Publication_Date, Price; book: Book_ID, Title, Issues, Writer | What are the titles of the books whose writer is not \"Elaine Lee\"?", "sql": "SELECT Title FROM book WHERE Writer != \"Elaine Lee\"", "example": {"db_id": "book_2", "query": "SELECT Title FROM book WHERE Writer != \"Elaine Lee\"", "query_toks": ["SELECT", "Title", "FROM", "book", "WHERE", "Writer", "!", "=", "``", "Elaine", "Lee", "''"], "query_toks_no_value": ["select", "title", "from", "book", "where", "writer", "!", "=", "value"], "question": "What are the titles of the books whose writer is not \"Elaine Lee\"?", "question_toks": ["What", "are", "the", "titles", "of", "the", "books", "whose", "writer", "is", "not", "``", "Elaine", "Lee", "''", "?"], "guid": 4763}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | eccv 2014 papers using ImageNet", "sql": "SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.datasetname  =  \"ImageNet\" AND t3.year  =  2014 AND t4.venuename  =  \"eccv\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.datasetname  =  \"ImageNet\" AND t3.year  =  2014 AND t4.venuename  =  \"eccv\";", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "paperdataset", "AS", "t2", "JOIN", "dataset", "AS", "t1", "ON", "t2.datasetid", "=", "t1.datasetid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "JOIN", "venue", "AS", "t4", "ON", "t4.venueid", "=", "t3.venueid", "WHERE", "t1.datasetname", "=", "``", "ImageNet", "''", "AND", "t3.year", "=", "2014", "AND", "t4.venuename", "=", "``", "eccv", "''", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "paperdataset", "as", "t2", "join", "dataset", "as", "t1", "on", "t2", ".", "datasetid", "=", "t1", ".", "datasetid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "join", "venue", "as", "t4", "on", "t4", ".", "venueid", "=", "t3", ".", "venueid", "where", "t1", ".", "datasetname", "=", "value", "and", "t3", ".", "year", "=", "value", "and", "t4", ".", "venuename", "=", "value"], "question": "eccv 2014 papers using ImageNet", "question_toks": ["eccv", "2014", "papers", "using", "ImageNet"], "guid": 4764}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | When was deep learning proposed ?", "sql": "SELECT DISTINCT t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\" GROUP BY t3.year ORDER BY t3.year ASC;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\" GROUP BY t3.year ORDER BY t3.year ASC;", "query_toks": ["SELECT", "DISTINCT", "t3.year", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "WHERE", "t1.keyphrasename", "=", "``", "deep", "learning", "''", "GROUP", "BY", "t3.year", "ORDER", "BY", "t3.year", "ASC", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "year", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "where", "t1", ".", "keyphrasename", "=", "value", "group", "by", "t3", ".", "year", "order", "by", "t3", ".", "year", "asc"], "question": "When was deep learning proposed ?", "question_toks": ["When", "was", "deep", "learning", "proposed", "?"], "guid": 4765}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | list papers published by balakrishnan prabhakaran", "sql": "SELECT DISTINCT t3.paperid  ,  t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"balakrishnan prabhakaran\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid  ,  t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"balakrishnan prabhakaran\";", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", ",", "t3.year", "FROM", "writes", "AS", "t2", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "JOIN", "paper", "AS", "t3", "ON", "t2.paperid", "=", "t3.paperid", "WHERE", "t1.authorname", "=", "``", "balakrishnan", "prabhakaran", "''", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", ",", "t3", ".", "year", "from", "writes", "as", "t2", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "join", "paper", "as", "t3", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "where", "t1", ".", "authorname", "=", "value"], "question": "list papers published by balakrishnan prabhakaran", "question_toks": ["list", "papers", "published", "by", "balakrishnan", "prabhakaran"], "guid": 4766}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the paper after 2000 in PVLDB with more than 200 citations .", "sql": "SELECT t2.title FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\" AND t2.citation_num  >  200 AND t2.year  >  2000;", "example": {"db_id": "academic", "query": "SELECT t2.title FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\" AND t2.citation_num  >  200 AND t2.year  >  2000;", "query_toks": ["SELECT", "t2.title", "FROM", "publication", "AS", "t2", "JOIN", "journal", "AS", "t1", "ON", "t2.jid", "=", "t1.jid", "WHERE", "t1.name", "=", "``", "PVLDB", "''", "AND", "t2.citation_num", ">", "200", "AND", "t2.year", ">", "2000", ";"], "query_toks_no_value": ["select", "t2", ".", "title", "from", "publication", "as", "t2", "join", "journal", "as", "t1", "on", "t2", ".", "jid", "=", "t1", ".", "jid", "where", "t1", ".", "name", "=", "value", "and", "t2", ".", "citation_num", ">", "value", "and", "t2", ".", "year", ">", "value"], "question": "return me the paper after 2000 in PVLDB with more than 200 citations .", "question_toks": ["return", "me", "the", "paper", "after", "2000", "in", "PVLDB", "with", "more", "than", "200", "citations", "."], "guid": 4767}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | how many parsing papers in ACL 2014", "sql": "SELECT DISTINCT COUNT ( t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"parsing\" AND t3.year  =  2014 AND t4.venuename  =  \"ACL\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"parsing\" AND t3.year  =  2014 AND t4.venuename  =  \"ACL\";", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "t3.paperid", ")", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "JOIN", "venue", "AS", "t4", "ON", "t4.venueid", "=", "t3.venueid", "WHERE", "t1.keyphrasename", "=", "``", "parsing", "''", "AND", "t3.year", "=", "2014", "AND", "t4.venuename", "=", "``", "ACL", "''", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "t3", ".", "paperid", ")", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "join", "venue", "as", "t4", "on", "t4", ".", "venueid", "=", "t3", ".", "venueid", "where", "t1", ".", "keyphrasename", "=", "value", "and", "t3", ".", "year", "=", "value", "and", "t4", ".", "venuename", "=", "value"], "question": "how many parsing papers in ACL 2014", "question_toks": ["how", "many", "parsing", "papers", "in", "ACL", "2014"], "guid": 4768}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the journal, which has the most number of papers containing keyword \" Relational Database \" .", "sql": "SELECT t3.name FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t2 ON t2.pid  =  t4.pid JOIN journal AS t3 ON t2.jid  =  t3.jid WHERE t1.keyword  =  \"Relational Database\" GROUP BY t3.name ORDER BY COUNT ( DISTINCT t2.title ) DESC LIMIT 1;", "example": {"db_id": "academic", "query": "SELECT t3.name FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t2 ON t2.pid  =  t4.pid JOIN journal AS t3 ON t2.jid  =  t3.jid WHERE t1.keyword  =  \"Relational Database\" GROUP BY t3.name ORDER BY COUNT ( DISTINCT t2.title ) DESC LIMIT 1;", "query_toks": ["SELECT", "t3.name", "FROM", "publication_keyword", "AS", "t4", "JOIN", "keyword", "AS", "t1", "ON", "t4.kid", "=", "t1.kid", "JOIN", "publication", "AS", "t2", "ON", "t2.pid", "=", "t4.pid", "JOIN", "journal", "AS", "t3", "ON", "t2.jid", "=", "t3.jid", "WHERE", "t1.keyword", "=", "``", "Relational", "Database", "''", "GROUP", "BY", "t3.name", "ORDER", "BY", "COUNT", "(", "DISTINCT", "t2.title", ")", "DESC", "LIMIT", "1", ";"], "query_toks_no_value": ["select", "t3", ".", "name", "from", "publication_keyword", "as", "t4", "join", "keyword", "as", "t1", "on", "t4", ".", "kid", "=", "t1", ".", "kid", "join", "publication", "as", "t2", "on", "t2", ".", "pid", "=", "t4", ".", "pid", "join", "journal", "as", "t3", "on", "t2", ".", "jid", "=", "t3", ".", "jid", "where", "t1", ".", "keyword", "=", "value", "group", "by", "t3", ".", "name", "order", "by", "count", "(", "distinct", "t2", ".", "title", ")", "desc", "limit", "value"], "question": "return me the journal, which has the most number of papers containing keyword \" Relational Database \" .", "question_toks": ["return", "me", "the", "journal", ",", "which", "has", "the", "most", "number", "of", "papers", "containing", "keyword", "``", "Relational", "Database", "``", "."], "guid": 4769}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | co-authors of Noah A Smith", "sql": "SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Noah A Smith\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Noah A Smith\";", "query_toks": ["SELECT", "DISTINCT", "t1.authorid", "FROM", "writes", "AS", "t3", "JOIN", "author", "AS", "t2", "ON", "t3.authorid", "=", "t2.authorid", "JOIN", "writes", "AS", "t4", "ON", "t4.paperid", "=", "t3.paperid", "JOIN", "author", "AS", "t1", "ON", "t4.authorid", "=", "t1.authorid", "WHERE", "t2.authorname", "=", "``", "Noah", "A", "Smith", "''", ";"], "query_toks_no_value": ["select", "distinct", "t1", ".", "authorid", "from", "writes", "as", "t3", "join", "author", "as", "t2", "on", "t3", ".", "authorid", "=", "t2", ".", "authorid", "join", "writes", "as", "t4", "on", "t4", ".", "paperid", "=", "t3", ".", "paperid", "join", "author", "as", "t1", "on", "t4", ".", "authorid", "=", "t1", ".", "authorid", "where", "t2", ".", "authorname", "=", "value"], "question": "co-authors of Noah A Smith", "question_toks": ["co-authors", "of", "Noah", "A", "Smith"], "guid": 4770}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the papers written by \" H. V. Jagadish \" and \" Yunyao Li \" on PVLDB after 2005 .", "sql": "SELECT t6.title FROM publication AS t6 JOIN journal AS t4 ON t6.jid  =  t4.jid JOIN writes AS t3 ON t3.pid  =  t6.pid JOIN writes AS t5 ON t5.pid  =  t6.pid JOIN author AS t1 ON t5.aid  =  t1.aid JOIN author AS t2 ON t3.aid  =  t2.aid WHERE t2.name  =  \"H. V. Jagadish\" AND t1.name  =  \"Yunyao Li\" AND t4.name  =  \"PVLDB\" AND t6.year  >  2005;", "example": {"db_id": "academic", "query": "SELECT t6.title FROM publication AS t6 JOIN journal AS t4 ON t6.jid  =  t4.jid JOIN writes AS t3 ON t3.pid  =  t6.pid JOIN writes AS t5 ON t5.pid  =  t6.pid JOIN author AS t1 ON t5.aid  =  t1.aid JOIN author AS t2 ON t3.aid  =  t2.aid WHERE t2.name  =  \"H. V. Jagadish\" AND t1.name  =  \"Yunyao Li\" AND t4.name  =  \"PVLDB\" AND t6.year  >  2005;", "query_toks": ["SELECT", "t6.title", "FROM", "publication", "AS", "t6", "JOIN", "journal", "AS", "t4", "ON", "t6.jid", "=", "t4.jid", "JOIN", "writes", "AS", "t3", "ON", "t3.pid", "=", "t6.pid", "JOIN", "writes", "AS", "t5", "ON", "t5.pid", "=", "t6.pid", "JOIN", "author", "AS", "t1", "ON", "t5.aid", "=", "t1.aid", "JOIN", "author", "AS", "t2", "ON", "t3.aid", "=", "t2.aid", "WHERE", "t2.name", "=", "``", "H.", "V.", "Jagadish", "''", "AND", "t1.name", "=", "``", "Yunyao", "Li", "''", "AND", "t4.name", "=", "``", "PVLDB", "''", "AND", "t6.year", ">", "2005", ";"], "query_toks_no_value": ["select", "t6", ".", "title", "from", "publication", "as", "t6", "join", "journal", "as", "t4", "on", "t6", ".", "jid", "=", "t4", ".", "jid", "join", "writes", "as", "t3", "on", "t3", ".", "pid", "=", "t6", ".", "pid", "join", "writes", "as", "t5", "on", "t5", ".", "pid", "=", "t6", ".", "pid", "join", "author", "as", "t1", "on", "t5", ".", "aid", "=", "t1", ".", "aid", "join", "author", "as", "t2", "on", "t3", ".", "aid", "=", "t2", ".", "aid", "where", "t2", ".", "name", "=", "value", "and", "t1", ".", "name", "=", "value", "and", "t4", ".", "name", "=", "value", "and", "t6", ".", "year", ">", "value"], "question": "return me the papers written by \" H. V. Jagadish \" and \" Yunyao Li \" on PVLDB after 2005 .", "question_toks": ["return", "me", "the", "papers", "written", "by", "``", "H.", "V.", "Jagadish", "``", "and", "``", "Yunyao", "Li", "``", "on", "PVLDB", "after", "2005", "."], "guid": 4771}}
{"text": "Document_Types: document_type_code, document_description; Documents: document_id, document_type_code, grant_id, sent_date, response_received_date, other_details; Grants: grant_id, organisation_id, grant_amount, grant_start_date, grant_end_date, other_details; Organisation_Types: organisation_type, organisation_type_description; Organisations: organisation_id, organisation_type, organisation_details; Project_Outcomes: project_id, outcome_code, outcome_details; Project_Staff: staff_id, project_id, role_code, date_from, date_to, other_details; Projects: project_id, organisation_id, project_details; Research_Outcomes: outcome_code, outcome_description; Research_Staff: staff_id, employer_organisation_id, staff_details | What are the details of all organizations that are described as Sponsors and sort the results in ascending order?", "sql": "SELECT organisation_details FROM Organisations AS T1 JOIN organisation_Types AS T2 ON T1.organisation_type  =  T2.organisation_type WHERE T2.organisation_type_description  =  'Sponsor' ORDER BY organisation_details", "example": {"db_id": "tracking_grants_for_research", "query": "SELECT organisation_details FROM Organisations AS T1 JOIN organisation_Types AS T2 ON T1.organisation_type  =  T2.organisation_type WHERE T2.organisation_type_description  =  'Sponsor' ORDER BY organisation_details", "query_toks": ["SELECT", "organisation_details", "FROM", "Organisations", "AS", "T1", "JOIN", "organisation_Types", "AS", "T2", "ON", "T1.organisation_type", "=", "T2.organisation_type", "WHERE", "T2.organisation_type_description", "=", "'Sponsor", "'", "ORDER", "BY", "organisation_details"], "query_toks_no_value": ["select", "organisation_details", "from", "organisations", "as", "t1", "join", "organisation_types", "as", "t2", "on", "t1", ".", "organisation_type", "=", "t2", ".", "organisation_type", "where", "t2", ".", "organisation_type_description", "=", "value", "order", "by", "organisation_details"], "question": "What are the details of all organizations that are described as Sponsors and sort the results in ascending order?", "question_toks": ["What", "are", "the", "details", "of", "all", "organizations", "that", "are", "described", "as", "Sponsors", "and", "sort", "the", "results", "in", "ascending", "order", "?"], "guid": 4772}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | How many papers published in nature communications in 2015 ?", "sql": "SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"nature communications\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"nature communications\";", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "t1.paperid", ")", "FROM", "venue", "AS", "t2", "JOIN", "paper", "AS", "t1", "ON", "t2.venueid", "=", "t1.venueid", "WHERE", "t1.year", "=", "2015", "AND", "t2.venuename", "=", "``", "nature", "communications", "''", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "t1", ".", "paperid", ")", "from", "venue", "as", "t2", "join", "paper", "as", "t1", "on", "t2", ".", "venueid", "=", "t1", ".", "venueid", "where", "t1", ".", "year", "=", "value", "and", "t2", ".", "venuename", "=", "value"], "question": "How many papers published in nature communications in 2015 ?", "question_toks": ["How", "many", "papers", "published", "in", "nature", "communications", "in", "2015", "?"], "guid": 4773}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | List papers that has a keyword Question Answering", "sql": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "WHERE", "t1.keyphrasename", "=", "``", "Question", "Answering", "''", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "where", "t1", ".", "keyphrasename", "=", "value"], "question": "List papers that has a keyword Question Answering", "question_toks": ["List", "papers", "that", "has", "a", "keyword", "Question", "Answering"], "guid": 4774}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | top syntactic parsing author", "sql": "SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  \"syntactic parsing\" GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  \"syntactic parsing\" GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "t4.paperid", ")", ",", "t3.authorid", "FROM", "paperkeyphrase", "AS", "t1", "JOIN", "keyphrase", "AS", "t2", "ON", "t1.keyphraseid", "=", "t2.keyphraseid", "JOIN", "paper", "AS", "t4", "ON", "t4.paperid", "=", "t1.paperid", "JOIN", "writes", "AS", "t3", "ON", "t3.paperid", "=", "t4.paperid", "WHERE", "t2.keyphrasename", "=", "``", "syntactic", "parsing", "''", "GROUP", "BY", "t3.authorid", "ORDER", "BY", "COUNT", "(", "t4.paperid", ")", "DESC", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "t4", ".", "paperid", ")", ",", "t3", ".", "authorid", "from", "paperkeyphrase", "as", "t1", "join", "keyphrase", "as", "t2", "on", "t1", ".", "keyphraseid", "=", "t2", ".", "keyphraseid", "join", "paper", "as", "t4", "on", "t4", ".", "paperid", "=", "t1", ".", "paperid", "join", "writes", "as", "t3", "on", "t3", ".", "paperid", "=", "t4", ".", "paperid", "where", "t2", ".", "keyphrasename", "=", "value", "group", "by", "t3", ".", "authorid", "order", "by", "count", "(", "t4", ".", "paperid", ")", "desc"], "question": "top syntactic parsing author", "question_toks": ["top", "syntactic", "parsing", "author"], "guid": 4775}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | What is the most popular paper this year in CVPR ?", "sql": "SELECT DISTINCT t3.citedpaperid  ,  COUNT ( t3.citingpaperid ) FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2016 AND t2.venuename  =  \"CVPR\" GROUP BY t3.citedpaperid ORDER BY COUNT ( t3.citingpaperid ) DESC;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.citedpaperid  ,  COUNT ( t3.citingpaperid ) FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2016 AND t2.venuename  =  \"CVPR\" GROUP BY t3.citedpaperid ORDER BY COUNT ( t3.citingpaperid ) DESC;", "query_toks": ["SELECT", "DISTINCT", "t3.citedpaperid", ",", "COUNT", "(", "t3.citingpaperid", ")", "FROM", "paper", "AS", "t1", "JOIN", "cite", "AS", "t3", "ON", "t1.paperid", "=", "t3.citedpaperid", "JOIN", "venue", "AS", "t2", "ON", "t2.venueid", "=", "t1.venueid", "WHERE", "t1.year", "=", "2016", "AND", "t2.venuename", "=", "``", "CVPR", "''", "GROUP", "BY", "t3.citedpaperid", "ORDER", "BY", "COUNT", "(", "t3.citingpaperid", ")", "DESC", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "citedpaperid", ",", "count", "(", "t3", ".", "citingpaperid", ")", "from", "paper", "as", "t1", "join", "cite", "as", "t3", "on", "t1", ".", "paperid", "=", "t3", ".", "citedpaperid", "join", "venue", "as", "t2", "on", "t2", ".", "venueid", "=", "t1", ".", "venueid", "where", "t1", ".", "year", "=", "value", "and", "t2", ".", "venuename", "=", "value", "group", "by", "t3", ".", "citedpaperid", "order", "by", "count", "(", "t3", ".", "citingpaperid", ")", "desc"], "question": "What is the most popular paper this year in CVPR ?", "question_toks": ["What", "is", "the", "most", "popular", "paper", "this", "year", "in", "CVPR", "?"], "guid": 4776}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | the papers on semantic parsing by li dong at acl in 2016", "sql": "SELECT DISTINCT t2.paperid FROM paperkeyphrase AS t5 JOIN keyphrase AS t3 ON t5.keyphraseid  =  t3.keyphraseid JOIN paper AS t2 ON t2.paperid  =  t5.paperid JOIN venue AS t6 ON t6.venueid  =  t2.venueid JOIN writes AS t4 ON t4.paperid  =  t2.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"li dong\" AND t3.keyphrasename  =  \"semantic parsing\" AND t2.year  =  2016 AND t6.venuename  =  \"acl\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t2.paperid FROM paperkeyphrase AS t5 JOIN keyphrase AS t3 ON t5.keyphraseid  =  t3.keyphraseid JOIN paper AS t2 ON t2.paperid  =  t5.paperid JOIN venue AS t6 ON t6.venueid  =  t2.venueid JOIN writes AS t4 ON t4.paperid  =  t2.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"li dong\" AND t3.keyphrasename  =  \"semantic parsing\" AND t2.year  =  2016 AND t6.venuename  =  \"acl\";", "query_toks": ["SELECT", "DISTINCT", "t2.paperid", "FROM", "paperkeyphrase", "AS", "t5", "JOIN", "keyphrase", "AS", "t3", "ON", "t5.keyphraseid", "=", "t3.keyphraseid", "JOIN", "paper", "AS", "t2", "ON", "t2.paperid", "=", "t5.paperid", "JOIN", "venue", "AS", "t6", "ON", "t6.venueid", "=", "t2.venueid", "JOIN", "writes", "AS", "t4", "ON", "t4.paperid", "=", "t2.paperid", "JOIN", "author", "AS", "t1", "ON", "t4.authorid", "=", "t1.authorid", "WHERE", "t1.authorname", "=", "``", "li", "dong", "''", "AND", "t3.keyphrasename", "=", "``", "semantic", "parsing", "''", "AND", "t2.year", "=", "2016", "AND", "t6.venuename", "=", "``", "acl", "''", ";"], "query_toks_no_value": ["select", "distinct", "t2", ".", "paperid", "from", "paperkeyphrase", "as", "t5", "join", "keyphrase", "as", "t3", "on", "t5", ".", "keyphraseid", "=", "t3", ".", "keyphraseid", "join", "paper", "as", "t2", "on", "t2", ".", "paperid", "=", "t5", ".", "paperid", "join", "venue", "as", "t6", "on", "t6", ".", "venueid", "=", "t2", ".", "venueid", "join", "writes", "as", "t4", "on", "t4", ".", "paperid", "=", "t2", ".", "paperid", "join", "author", "as", "t1", "on", "t4", ".", "authorid", "=", "t1", ".", "authorid", "where", "t1", ".", "authorname", "=", "value", "and", "t3", ".", "keyphrasename", "=", "value", "and", "t2", ".", "year", "=", "value", "and", "t6", ".", "venuename", "=", "value"], "question": "the papers on semantic parsing by li dong at acl in 2016", "question_toks": ["the", "papers", "on", "semantic", "parsing", "by", "li", "dong", "at", "acl", "in", "2016"], "guid": 4777}}
{"text": "Inst: instID, name, country; Authors: authID, lname, fname; Papers: paperID, title; Authorship: authID, instID, paperID, authOrder | Which institution has the most papers? Find the name of the institution.", "sql": "SELECT t1.name FROM inst AS t1 JOIN authorship AS t2 ON t1.instid  =  t2.instid JOIN papers AS t3 ON t2.paperid  =  t3.paperid GROUP BY t1.name ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "icfp_1", "query": "SELECT t1.name FROM inst AS t1 JOIN authorship AS t2 ON t1.instid  =  t2.instid JOIN papers AS t3 ON t2.paperid  =  t3.paperid GROUP BY t1.name ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "t1.name", "FROM", "inst", "AS", "t1", "JOIN", "authorship", "AS", "t2", "ON", "t1.instid", "=", "t2.instid", "JOIN", "papers", "AS", "t3", "ON", "t2.paperid", "=", "t3.paperid", "GROUP", "BY", "t1.name", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "inst", "as", "t1", "join", "authorship", "as", "t2", "on", "t1", ".", "instid", "=", "t2", ".", "instid", "join", "papers", "as", "t3", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "group", "by", "t1", ".", "name", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which institution has the most papers? Find the name of the institution.", "question_toks": ["Which", "institution", "has", "the", "most", "papers", "?", "Find", "the", "name", "of", "the", "institution", "."], "guid": 4778}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | How many papers were accepted at nature communications 2015 ?", "sql": "SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"nature communications\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"nature communications\";", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "t1.paperid", ")", "FROM", "venue", "AS", "t2", "JOIN", "paper", "AS", "t1", "ON", "t2.venueid", "=", "t1.venueid", "WHERE", "t1.year", "=", "2015", "AND", "t2.venuename", "=", "``", "nature", "communications", "''", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "t1", ".", "paperid", ")", "from", "venue", "as", "t2", "join", "paper", "as", "t1", "on", "t2", ".", "venueid", "=", "t1", ".", "venueid", "where", "t1", ".", "year", "=", "value", "and", "t2", ".", "venuename", "=", "value"], "question": "How many papers were accepted at nature communications 2015 ?", "question_toks": ["How", "many", "papers", "were", "accepted", "at", "nature", "communications", "2015", "?"], "guid": 4779}}
{"text": "Scientists: SSN, Name; Projects: Code, Name, Hours; AssignedTo: Scientist, Project | Find the total hours of all projects.", "sql": "SELECT sum(hours) FROM projects", "example": {"db_id": "scientist_1", "query": "SELECT sum(hours) FROM projects", "query_toks": ["SELECT", "sum", "(", "hours", ")", "FROM", "projects"], "query_toks_no_value": ["select", "sum", "(", "hours", ")", "from", "projects"], "question": "Find the total hours of all projects.", "question_toks": ["Find", "the", "total", "hours", "of", "all", "projects", "."], "guid": 4780}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | List of authors acl 2016", "sql": "SELECT DISTINCT t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2016 AND t3.venuename  =  \"acl\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2016 AND t3.venuename  =  \"acl\";", "query_toks": ["SELECT", "DISTINCT", "t1.authorid", "FROM", "venue", "AS", "t3", "JOIN", "paper", "AS", "t2", "ON", "t3.venueid", "=", "t2.venueid", "JOIN", "writes", "AS", "t1", "ON", "t1.paperid", "=", "t2.paperid", "WHERE", "t2.year", "=", "2016", "AND", "t3.venuename", "=", "``", "acl", "''", ";"], "query_toks_no_value": ["select", "distinct", "t1", ".", "authorid", "from", "venue", "as", "t3", "join", "paper", "as", "t2", "on", "t3", ".", "venueid", "=", "t2", ".", "venueid", "join", "writes", "as", "t1", "on", "t1", ".", "paperid", "=", "t2", ".", "paperid", "where", "t2", ".", "year", "=", "value", "and", "t3", ".", "venuename", "=", "value"], "question": "List of authors acl 2016", "question_toks": ["List", "of", "authors", "acl", "2016"], "guid": 4781}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | papers cited by at least 5 papers", "sql": "SELECT DISTINCT t2.citingpaperid FROM paper AS t1 JOIN cite AS t2 ON t1.paperid  =  t2.citedpaperid GROUP BY t2.citingpaperid HAVING COUNT ( DISTINCT t2.citedpaperid )  >=  5;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t2.citingpaperid FROM paper AS t1 JOIN cite AS t2 ON t1.paperid  =  t2.citedpaperid GROUP BY t2.citingpaperid HAVING COUNT ( DISTINCT t2.citedpaperid )  >=  5;", "query_toks": ["SELECT", "DISTINCT", "t2.citingpaperid", "FROM", "paper", "AS", "t1", "JOIN", "cite", "AS", "t2", "ON", "t1.paperid", "=", "t2.citedpaperid", "GROUP", "BY", "t2.citingpaperid", "HAVING", "COUNT", "(", "DISTINCT", "t2.citedpaperid", ")", ">", "=", "5", ";"], "query_toks_no_value": ["select", "distinct", "t2", ".", "citingpaperid", "from", "paper", "as", "t1", "join", "cite", "as", "t2", "on", "t1", ".", "paperid", "=", "t2", ".", "citedpaperid", "group", "by", "t2", ".", "citingpaperid", "having", "count", "(", "distinct", "t2", ".", "citedpaperid", ")", ">", "=", "value"], "question": "papers cited by at least 5 papers", "question_toks": ["papers", "cited", "by", "at", "least", "5", "papers"], "guid": 4782}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | When was the last time Mary Crainie published a paper ?", "sql": "SELECT DISTINCT MAX ( t3.year ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Mary Crainie\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT MAX ( t3.year ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Mary Crainie\";", "query_toks": ["SELECT", "DISTINCT", "MAX", "(", "t3.year", ")", "FROM", "writes", "AS", "t2", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "JOIN", "paper", "AS", "t3", "ON", "t2.paperid", "=", "t3.paperid", "WHERE", "t1.authorname", "=", "``", "Mary", "Crainie", "''", ";"], "query_toks_no_value": ["select", "distinct", "max", "(", "t3", ".", "year", ")", "from", "writes", "as", "t2", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "join", "paper", "as", "t3", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "where", "t1", ".", "authorname", "=", "value"], "question": "When was the last time Mary Crainie published a paper ?", "question_toks": ["When", "was", "the", "last", "time", "Mary", "Crainie", "published", "a", "paper", "?"], "guid": 4783}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | top dependent types papers", "sql": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"dependent types\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"dependent types\";", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "WHERE", "t1.keyphrasename", "=", "``", "dependent", "types", "''", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "where", "t1", ".", "keyphrasename", "=", "value"], "question": "top dependent types papers", "question_toks": ["top", "dependent", "types", "papers"], "guid": 4784}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | How many articles were published in the Cell journal in 2015 ?", "sql": "SELECT DISTINCT COUNT ( t3.paperid ) FROM paper AS t3 JOIN journal AS t2 ON t3.journalid  =  t2.journalid JOIN paperkeyphrase AS t1 ON t3.paperid  =  t1.paperid WHERE t2.journalname  =  \"Cell\" AND t3.year  =  2015;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( t3.paperid ) FROM paper AS t3 JOIN journal AS t2 ON t3.journalid  =  t2.journalid JOIN paperkeyphrase AS t1 ON t3.paperid  =  t1.paperid WHERE t2.journalname  =  \"Cell\" AND t3.year  =  2015;", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "t3.paperid", ")", "FROM", "paper", "AS", "t3", "JOIN", "journal", "AS", "t2", "ON", "t3.journalid", "=", "t2.journalid", "JOIN", "paperkeyphrase", "AS", "t1", "ON", "t3.paperid", "=", "t1.paperid", "WHERE", "t2.journalname", "=", "``", "Cell", "''", "AND", "t3.year", "=", "2015", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "t3", ".", "paperid", ")", "from", "paper", "as", "t3", "join", "journal", "as", "t2", "on", "t3", ".", "journalid", "=", "t2", ".", "journalid", "join", "paperkeyphrase", "as", "t1", "on", "t3", ".", "paperid", "=", "t1", ".", "paperid", "where", "t2", ".", "journalname", "=", "value", "and", "t3", ".", "year", "=", "value"], "question": "How many articles were published in the Cell journal in 2015 ?", "question_toks": ["How", "many", "articles", "were", "published", "in", "the", "Cell", "journal", "in", "2015", "?"], "guid": 4785}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | What papers has brian curless written on convolution ?", "sql": "SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";", "query_toks": ["SELECT", "DISTINCT", "t1.authorid", ",", "t3.paperid", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t5", "ON", "t2.keyphraseid", "=", "t5.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "JOIN", "writes", "AS", "t4", "ON", "t4.paperid", "=", "t3.paperid", "JOIN", "author", "AS", "t1", "ON", "t4.authorid", "=", "t1.authorid", "WHERE", "t1.authorname", "=", "``", "brian", "curless", "''", "AND", "t5.keyphrasename", "=", "``", "convolution", "''", ";"], "query_toks_no_value": ["select", "distinct", "t1", ".", "authorid", ",", "t3", ".", "paperid", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t5", "on", "t2", ".", "keyphraseid", "=", "t5", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "join", "writes", "as", "t4", "on", "t4", ".", "paperid", "=", "t3", ".", "paperid", "join", "author", "as", "t1", "on", "t4", ".", "authorid", "=", "t1", ".", "authorid", "where", "t1", ".", "authorname", "=", "value", "and", "t5", ".", "keyphrasename", "=", "value"], "question": "What papers has brian curless written on convolution ?", "question_toks": ["What", "papers", "has", "brian", "curless", "written", "on", "convolution", "?"], "guid": 4786}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the papers written by \" H. V. Jagadish \" and \" Divesh Srivastava \" .", "sql": "SELECT t5.title FROM writes AS t3 JOIN author AS t2 ON t3.aid  =  t2.aid JOIN publication AS t5 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t5.pid JOIN author AS t1 ON t4.aid  =  t1.aid WHERE t2.name  =  \"H. V. Jagadish\" AND t1.name  =  \"Divesh Srivastava\";", "example": {"db_id": "academic", "query": "SELECT t5.title FROM writes AS t3 JOIN author AS t2 ON t3.aid  =  t2.aid JOIN publication AS t5 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t5.pid JOIN author AS t1 ON t4.aid  =  t1.aid WHERE t2.name  =  \"H. V. Jagadish\" AND t1.name  =  \"Divesh Srivastava\";", "query_toks": ["SELECT", "t5.title", "FROM", "writes", "AS", "t3", "JOIN", "author", "AS", "t2", "ON", "t3.aid", "=", "t2.aid", "JOIN", "publication", "AS", "t5", "ON", "t3.pid", "=", "t5.pid", "JOIN", "writes", "AS", "t4", "ON", "t4.pid", "=", "t5.pid", "JOIN", "author", "AS", "t1", "ON", "t4.aid", "=", "t1.aid", "WHERE", "t2.name", "=", "``", "H.", "V.", "Jagadish", "''", "AND", "t1.name", "=", "``", "Divesh", "Srivastava", "''", ";"], "query_toks_no_value": ["select", "t5", ".", "title", "from", "writes", "as", "t3", "join", "author", "as", "t2", "on", "t3", ".", "aid", "=", "t2", ".", "aid", "join", "publication", "as", "t5", "on", "t3", ".", "pid", "=", "t5", ".", "pid", "join", "writes", "as", "t4", "on", "t4", ".", "pid", "=", "t5", ".", "pid", "join", "author", "as", "t1", "on", "t4", ".", "aid", "=", "t1", ".", "aid", "where", "t2", ".", "name", "=", "value", "and", "t1", ".", "name", "=", "value"], "question": "return me the papers written by \" H. V. Jagadish \" and \" Divesh Srivastava \" .", "question_toks": ["return", "me", "the", "papers", "written", "by", "``", "H.", "V.", "Jagadish", "``", "and", "``", "Divesh", "Srivastava", "``", "."], "guid": 4787}}
{"text": "publication: Publication_ID, Book_ID, Publisher, Publication_Date, Price; book: Book_ID, Title, Issues, Writer | List the titles of the books in ascending order of issues.", "sql": "SELECT Title FROM book ORDER BY Issues ASC", "example": {"db_id": "book_2", "query": "SELECT Title FROM book ORDER BY Issues ASC", "query_toks": ["SELECT", "Title", "FROM", "book", "ORDER", "BY", "Issues", "ASC"], "query_toks_no_value": ["select", "title", "from", "book", "order", "by", "issues", "asc"], "question": "List the titles of the books in ascending order of issues.", "question_toks": ["List", "the", "titles", "of", "the", "books", "in", "ascending", "order", "of", "issues", "."], "guid": 4788}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | List the papers that used WebKB dataset", "sql": "SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname  =  \"WebKB\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname  =  \"WebKB\";", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "paperdataset", "AS", "t2", "JOIN", "dataset", "AS", "t1", "ON", "t2.datasetid", "=", "t1.datasetid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "WHERE", "t1.datasetname", "=", "``", "WebKB", "''", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "paperdataset", "as", "t2", "join", "dataset", "as", "t1", "on", "t2", ".", "datasetid", "=", "t1", ".", "datasetid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "where", "t1", ".", "datasetname", "=", "value"], "question": "List the papers that used WebKB dataset", "question_toks": ["List", "the", "papers", "that", "used", "WebKB", "dataset"], "guid": 4789}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | what are the parsing papers that have the most citations ?", "sql": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"parsing\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"parsing\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;", "query_toks": ["SELECT", "DISTINCT", "t4.citedpaperid", ",", "COUNT", "(", "t4.citedpaperid", ")", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "JOIN", "cite", "AS", "t4", "ON", "t3.paperid", "=", "t4.citedpaperid", "WHERE", "t1.keyphrasename", "=", "``", "parsing", "''", "GROUP", "BY", "t4.citedpaperid", "ORDER", "BY", "COUNT", "(", "t4.citedpaperid", ")", "DESC", ";"], "query_toks_no_value": ["select", "distinct", "t4", ".", "citedpaperid", ",", "count", "(", "t4", ".", "citedpaperid", ")", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "join", "cite", "as", "t4", "on", "t3", ".", "paperid", "=", "t4", ".", "citedpaperid", "where", "t1", ".", "keyphrasename", "=", "value", "group", "by", "t4", ".", "citedpaperid", "order", "by", "count", "(", "t4", ".", "citedpaperid", ")", "desc"], "question": "what are the parsing papers that have the most citations ?", "question_toks": ["what", "are", "the", "parsing", "papers", "that", "have", "the", "most", "citations", "?"], "guid": 4790}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | Papers authored by sharon goldwater", "sql": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";", "query_toks": ["SELECT", "DISTINCT", "t2.paperid", "FROM", "writes", "AS", "t2", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "WHERE", "t1.authorname", "=", "``", "sharon", "goldwater", "''", ";"], "query_toks_no_value": ["select", "distinct", "t2", ".", "paperid", "from", "writes", "as", "t2", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "where", "t1", ".", "authorname", "=", "value"], "question": "Papers authored by sharon goldwater", "question_toks": ["Papers", "authored", "by", "sharon", "goldwater"], "guid": 4791}}
{"text": "publication: Publication_ID, Book_ID, Publisher, Publication_Date, Price; book: Book_ID, Title, Issues, Writer | Show the title and publication dates of books.", "sql": "SELECT T1.Title ,  T2.Publication_Date FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID", "example": {"db_id": "book_2", "query": "SELECT T1.Title ,  T2.Publication_Date FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID", "query_toks": ["SELECT", "T1.Title", ",", "T2.Publication_Date", "FROM", "book", "AS", "T1", "JOIN", "publication", "AS", "T2", "ON", "T1.Book_ID", "=", "T2.Book_ID"], "query_toks_no_value": ["select", "t1", ".", "title", ",", "t2", ".", "publication_date", "from", "book", "as", "t1", "join", "publication", "as", "t2", "on", "t1", ".", "book_id", "=", "t2", ".", "book_id"], "question": "Show the title and publication dates of books.", "question_toks": ["Show", "the", "title", "and", "publication", "dates", "of", "books", "."], "guid": 4792}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | papers on TAIL NIPS", "sql": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"TAIL\" AND t4.venuename  =  \"NIPS\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"TAIL\" AND t4.venuename  =  \"NIPS\";", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "JOIN", "venue", "AS", "t4", "ON", "t4.venueid", "=", "t3.venueid", "WHERE", "t1.keyphrasename", "=", "``", "TAIL", "''", "AND", "t4.venuename", "=", "``", "NIPS", "''", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "join", "venue", "as", "t4", "on", "t4", ".", "venueid", "=", "t3", ".", "venueid", "where", "t1", ".", "keyphrasename", "=", "value", "and", "t4", ".", "venuename", "=", "value"], "question": "papers on TAIL NIPS", "question_toks": ["papers", "on", "TAIL", "NIPS"], "guid": 4793}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | acl papers in 2012 on Parsing", "sql": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Parsing\" AND t3.year  =  2012 AND t4.venuename  =  \"acl\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Parsing\" AND t3.year  =  2012 AND t4.venuename  =  \"acl\";", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "JOIN", "venue", "AS", "t4", "ON", "t4.venueid", "=", "t3.venueid", "WHERE", "t1.keyphrasename", "=", "``", "Parsing", "''", "AND", "t3.year", "=", "2012", "AND", "t4.venuename", "=", "``", "acl", "''", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "join", "venue", "as", "t4", "on", "t4", ".", "venueid", "=", "t3", ".", "venueid", "where", "t1", ".", "keyphrasename", "=", "value", "and", "t3", ".", "year", "=", "value", "and", "t4", ".", "venuename", "=", "value"], "question": "acl papers in 2012 on Parsing", "question_toks": ["acl", "papers", "in", "2012", "on", "Parsing"], "guid": 4794}}
{"text": "item: i_id, title; review: a_id, u_id, i_id, rating, rank; useracct: u_id, name; trust: source_u_id, target_u_id, trust | Find the titles of items that received both a rating higher than 8 and a rating below 5.", "sql": "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id WHERE T2.rating  >  8 INTERSECT SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id WHERE T2.rating  <  5", "example": {"db_id": "epinions_1", "query": "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id WHERE T2.rating  >  8 INTERSECT SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id WHERE T2.rating  <  5", "query_toks": ["SELECT", "T1.title", "FROM", "item", "AS", "T1", "JOIN", "review", "AS", "T2", "ON", "T1.i_id", "=", "T2.i_id", "WHERE", "T2.rating", ">", "8", "INTERSECT", "SELECT", "T1.title", "FROM", "item", "AS", "T1", "JOIN", "review", "AS", "T2", "ON", "T1.i_id", "=", "T2.i_id", "WHERE", "T2.rating", "<", "5"], "query_toks_no_value": ["select", "t1", ".", "title", "from", "item", "as", "t1", "join", "review", "as", "t2", "on", "t1", ".", "i_id", "=", "t2", ".", "i_id", "where", "t2", ".", "rating", ">", "value", "intersect", "select", "t1", ".", "title", "from", "item", "as", "t1", "join", "review", "as", "t2", "on", "t1", ".", "i_id", "=", "t2", ".", "i_id", "where", "t2", ".", "rating", "<", "value"], "question": "Find the titles of items that received both a rating higher than 8 and a rating below 5.", "question_toks": ["Find", "the", "titles", "of", "items", "that", "received", "both", "a", "rating", "higher", "than", "8", "and", "a", "rating", "below", "5", "."], "guid": 4795}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me all the papers in PVLDB in \" University of Michigan \" .", "sql": "SELECT t5.title FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid JOIN writes AS t4 ON t4.aid  =  t1.aid JOIN publication AS t5 ON t4.pid  =  t5.pid JOIN journal AS t3 ON t5.jid  =  t3.jid WHERE t3.name  =  \"PVLDB\" AND t2.name  =  \"University of Michigan\";", "example": {"db_id": "academic", "query": "SELECT t5.title FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid JOIN writes AS t4 ON t4.aid  =  t1.aid JOIN publication AS t5 ON t4.pid  =  t5.pid JOIN journal AS t3 ON t5.jid  =  t3.jid WHERE t3.name  =  \"PVLDB\" AND t2.name  =  \"University of Michigan\";", "query_toks": ["SELECT", "t5.title", "FROM", "organization", "AS", "t2", "JOIN", "author", "AS", "t1", "ON", "t2.oid", "=", "t1.oid", "JOIN", "writes", "AS", "t4", "ON", "t4.aid", "=", "t1.aid", "JOIN", "publication", "AS", "t5", "ON", "t4.pid", "=", "t5.pid", "JOIN", "journal", "AS", "t3", "ON", "t5.jid", "=", "t3.jid", "WHERE", "t3.name", "=", "``", "PVLDB", "''", "AND", "t2.name", "=", "``", "University", "of", "Michigan", "''", ";"], "query_toks_no_value": ["select", "t5", ".", "title", "from", "organization", "as", "t2", "join", "author", "as", "t1", "on", "t2", ".", "oid", "=", "t1", ".", "oid", "join", "writes", "as", "t4", "on", "t4", ".", "aid", "=", "t1", ".", "aid", "join", "publication", "as", "t5", "on", "t4", ".", "pid", "=", "t5", ".", "pid", "join", "journal", "as", "t3", "on", "t5", ".", "jid", "=", "t3", ".", "jid", "where", "t3", ".", "name", "=", "value", "and", "t2", ".", "name", "=", "value"], "question": "return me all the papers in PVLDB in \" University of Michigan \" .", "question_toks": ["return", "me", "all", "the", "papers", "in", "PVLDB", "in", "``", "University", "of", "Michigan", "``", "."], "guid": 4796}}
{"text": "event: Event_ID, Date, Venue, Name, Event_Attendance; journalist: journalist_ID, Name, Nationality, Age, Years_working; news_report: journalist_ID, Event_ID, Work_Type | Show the names of journalists and the names of the events they reported in ascending order", "sql": "SELECT T3.Name ,  T2.Name FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID  =  T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID  =  T3.journalist_ID ORDER BY T2.Event_Attendance ASC", "example": {"db_id": "news_report", "query": "SELECT T3.Name ,  T2.Name FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID  =  T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID  =  T3.journalist_ID ORDER BY T2.Event_Attendance ASC", "query_toks": ["SELECT", "T3.Name", ",", "T2.Name", "FROM", "news_report", "AS", "T1", "JOIN", "event", "AS", "T2", "ON", "T1.Event_ID", "=", "T2.Event_ID", "JOIN", "journalist", "AS", "T3", "ON", "T1.journalist_ID", "=", "T3.journalist_ID", "ORDER", "BY", "T2.Event_Attendance", "ASC"], "query_toks_no_value": ["select", "t3", ".", "name", ",", "t2", ".", "name", "from", "news_report", "as", "t1", "join", "event", "as", "t2", "on", "t1", ".", "event_id", "=", "t2", ".", "event_id", "join", "journalist", "as", "t3", "on", "t1", ".", "journalist_id", "=", "t3", ".", "journalist_id", "order", "by", "t2", ".", "event_attendance", "asc"], "question": "Show the names of journalists and the names of the events they reported in ascending order", "question_toks": ["Show", "the", "names", "of", "journalists", "and", "the", "names", "of", "the", "events", "they", "reported", "in", "ascending", "order"], "guid": 4797}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | coauthors of Noah A Smith", "sql": "SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Noah A Smith\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Noah A Smith\";", "query_toks": ["SELECT", "DISTINCT", "t1.authorid", "FROM", "writes", "AS", "t3", "JOIN", "author", "AS", "t2", "ON", "t3.authorid", "=", "t2.authorid", "JOIN", "writes", "AS", "t4", "ON", "t4.paperid", "=", "t3.paperid", "JOIN", "author", "AS", "t1", "ON", "t4.authorid", "=", "t1.authorid", "WHERE", "t2.authorname", "=", "``", "Noah", "A", "Smith", "''", ";"], "query_toks_no_value": ["select", "distinct", "t1", ".", "authorid", "from", "writes", "as", "t3", "join", "author", "as", "t2", "on", "t3", ".", "authorid", "=", "t2", ".", "authorid", "join", "writes", "as", "t4", "on", "t4", ".", "paperid", "=", "t3", ".", "paperid", "join", "author", "as", "t1", "on", "t4", ".", "authorid", "=", "t1", ".", "authorid", "where", "t2", ".", "authorname", "=", "value"], "question": "coauthors of Noah A Smith", "question_toks": ["coauthors", "of", "Noah", "A", "Smith"], "guid": 4798}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | I want the papers on keyphrase0 by brian curless", "sql": "SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";", "query_toks": ["SELECT", "DISTINCT", "t1.authorid", ",", "t3.paperid", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t5", "ON", "t2.keyphraseid", "=", "t5.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "JOIN", "writes", "AS", "t4", "ON", "t4.paperid", "=", "t3.paperid", "JOIN", "author", "AS", "t1", "ON", "t4.authorid", "=", "t1.authorid", "WHERE", "t1.authorname", "=", "``", "brian", "curless", "''", "AND", "t5.keyphrasename", "=", "``", "convolution", "''", ";"], "query_toks_no_value": ["select", "distinct", "t1", ".", "authorid", ",", "t3", ".", "paperid", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t5", "on", "t2", ".", "keyphraseid", "=", "t5", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "join", "writes", "as", "t4", "on", "t4", ".", "paperid", "=", "t3", ".", "paperid", "join", "author", "as", "t1", "on", "t4", ".", "authorid", "=", "t1", ".", "authorid", "where", "t1", ".", "authorname", "=", "value", "and", "t5", ".", "keyphrasename", "=", "value"], "question": "I want the papers on keyphrase0 by brian curless", "question_toks": ["I", "want", "the", "papers", "on", "keyphrase0", "by", "brian", "curless"], "guid": 4799}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the journals, which have papers by \" H. V. Jagadish \" .", "sql": "SELECT t2.name FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\";", "example": {"db_id": "academic", "query": "SELECT t2.name FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\";", "query_toks": ["SELECT", "t2.name", "FROM", "publication", "AS", "t4", "JOIN", "journal", "AS", "t2", "ON", "t4.jid", "=", "t2.jid", "JOIN", "writes", "AS", "t3", "ON", "t3.pid", "=", "t4.pid", "JOIN", "author", "AS", "t1", "ON", "t3.aid", "=", "t1.aid", "WHERE", "t1.name", "=", "``", "H.", "V.", "Jagadish", "''", ";"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "publication", "as", "t4", "join", "journal", "as", "t2", "on", "t4", ".", "jid", "=", "t2", ".", "jid", "join", "writes", "as", "t3", "on", "t3", ".", "pid", "=", "t4", ".", "pid", "join", "author", "as", "t1", "on", "t3", ".", "aid", "=", "t1", ".", "aid", "where", "t1", ".", "name", "=", "value"], "question": "return me the journals, which have papers by \" H. V. Jagadish \" .", "question_toks": ["return", "me", "the", "journals", ",", "which", "have", "papers", "by", "``", "H.", "V.", "Jagadish", "``", "."], "guid": 4800}}
{"text": "Document_Types: document_type_code, document_description; Documents: document_id, document_type_code, grant_id, sent_date, response_received_date, other_details; Grants: grant_id, organisation_id, grant_amount, grant_start_date, grant_end_date, other_details; Organisation_Types: organisation_type, organisation_type_description; Organisations: organisation_id, organisation_type, organisation_details; Project_Outcomes: project_id, outcome_code, outcome_details; Project_Staff: staff_id, project_id, role_code, date_from, date_to, other_details; Projects: project_id, organisation_id, project_details; Research_Outcomes: outcome_code, outcome_description; Research_Staff: staff_id, employer_organisation_id, staff_details | What are the ids, types, and details of the organization with the most research staff?", "sql": "SELECT T1.organisation_id ,  T1.organisation_type ,  T1.organisation_details FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "tracking_grants_for_research", "query": "SELECT T1.organisation_id ,  T1.organisation_type ,  T1.organisation_details FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.organisation_id", ",", "T1.organisation_type", ",", "T1.organisation_details", "FROM", "Organisations", "AS", "T1", "JOIN", "Research_Staff", "AS", "T2", "ON", "T1.organisation_id", "=", "T2.employer_organisation_id", "GROUP", "BY", "T1.organisation_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "organisation_id", ",", "t1", ".", "organisation_type", ",", "t1", ".", "organisation_details", "from", "organisations", "as", "t1", "join", "research_staff", "as", "t2", "on", "t1", ".", "organisation_id", "=", "t2", ".", "employer_organisation_id", "group", "by", "t1", ".", "organisation_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What are the ids, types, and details of the organization with the most research staff?", "question_toks": ["What", "are", "the", "ids", ",", "types", ",", "and", "details", "of", "the", "organization", "with", "the", "most", "research", "staff", "?"], "guid": 4801}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | Who are the prominent researchers in Neutralizing Antibody in 2012 ?", "sql": "SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  \"Neutralizing Antibody\" AND t4.year  =  2012 GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  \"Neutralizing Antibody\" AND t4.year  =  2012 GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "t4.paperid", ")", ",", "t3.authorid", "FROM", "paperkeyphrase", "AS", "t1", "JOIN", "keyphrase", "AS", "t2", "ON", "t1.keyphraseid", "=", "t2.keyphraseid", "JOIN", "paper", "AS", "t4", "ON", "t4.paperid", "=", "t1.paperid", "JOIN", "writes", "AS", "t3", "ON", "t3.paperid", "=", "t4.paperid", "WHERE", "t2.keyphrasename", "=", "``", "Neutralizing", "Antibody", "''", "AND", "t4.year", "=", "2012", "GROUP", "BY", "t3.authorid", "ORDER", "BY", "COUNT", "(", "t4.paperid", ")", "DESC", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "t4", ".", "paperid", ")", ",", "t3", ".", "authorid", "from", "paperkeyphrase", "as", "t1", "join", "keyphrase", "as", "t2", "on", "t1", ".", "keyphraseid", "=", "t2", ".", "keyphraseid", "join", "paper", "as", "t4", "on", "t4", ".", "paperid", "=", "t1", ".", "paperid", "join", "writes", "as", "t3", "on", "t3", ".", "paperid", "=", "t4", ".", "paperid", "where", "t2", ".", "keyphrasename", "=", "value", "and", "t4", ".", "year", "=", "value", "group", "by", "t3", ".", "authorid", "order", "by", "count", "(", "t4", ".", "paperid", ")", "desc"], "question": "Who are the prominent researchers in Neutralizing Antibody in 2012 ?", "question_toks": ["Who", "are", "the", "prominent", "researchers", "in", "Neutralizing", "Antibody", "in", "2012", "?"], "guid": 4802}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | Find journals about Temporal Data .", "sql": "SELECT DISTINCT t3.journalid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Temporal Data\" GROUP BY t3.journalid;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.journalid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Temporal Data\" GROUP BY t3.journalid;", "query_toks": ["SELECT", "DISTINCT", "t3.journalid", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "WHERE", "t1.keyphrasename", "=", "``", "Temporal", "Data", "''", "GROUP", "BY", "t3.journalid", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "journalid", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "where", "t1", ".", "keyphrasename", "=", "value", "group", "by", "t3", ".", "journalid"], "question": "Find journals about Temporal Data .", "question_toks": ["Find", "journals", "about", "Temporal", "Data", "."], "guid": 4803}}
{"text": "Document_Types: document_type_code, document_description; Documents: document_id, document_type_code, grant_id, sent_date, response_received_date, other_details; Grants: grant_id, organisation_id, grant_amount, grant_start_date, grant_end_date, other_details; Organisation_Types: organisation_type, organisation_type_description; Organisations: organisation_id, organisation_type, organisation_details; Project_Outcomes: project_id, outcome_code, outcome_details; Project_Staff: staff_id, project_id, role_code, date_from, date_to, other_details; Projects: project_id, organisation_id, project_details; Research_Outcomes: outcome_code, outcome_description; Research_Staff: staff_id, employer_organisation_id, staff_details | How many project members were leaders or started working before '1989-04-24 23:51:54'?", "sql": "SELECT count(*) FROM Project_Staff WHERE role_code  =  'leader' OR date_from  <  '1989-04-24 23:51:54'", "example": {"db_id": "tracking_grants_for_research", "query": "SELECT count(*) FROM Project_Staff WHERE role_code  =  'leader' OR date_from  <  '1989-04-24 23:51:54'", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Project_Staff", "WHERE", "role_code", "=", "'leader", "'", "OR", "date_from", "<", "'1989-04-24", "23:51:54", "'"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "project_staff", "where", "role_code", "=", "value", "or", "date_from", "<", "value"], "question": "How many project members were leaders or started working before '1989-04-24 23:51:54'?", "question_toks": ["How", "many", "project", "members", "were", "leaders", "or", "started", "working", "before", "'1989-04-24", "23:51:54", "'", "?"], "guid": 4804}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | how many papers accepted in nature communications 2015", "sql": "SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"nature communications\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"nature communications\";", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "t1.paperid", ")", "FROM", "venue", "AS", "t2", "JOIN", "paper", "AS", "t1", "ON", "t2.venueid", "=", "t1.venueid", "WHERE", "t1.year", "=", "2015", "AND", "t2.venuename", "=", "``", "nature", "communications", "''", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "t1", ".", "paperid", ")", "from", "venue", "as", "t2", "join", "paper", "as", "t1", "on", "t2", ".", "venueid", "=", "t1", ".", "venueid", "where", "t1", ".", "year", "=", "value", "and", "t2", ".", "venuename", "=", "value"], "question": "how many papers accepted in nature communications 2015", "question_toks": ["how", "many", "papers", "accepted", "in", "nature", "communications", "2015"], "guid": 4805}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | convolution by brian curless", "sql": "SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";", "query_toks": ["SELECT", "DISTINCT", "t1.authorid", ",", "t3.paperid", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t5", "ON", "t2.keyphraseid", "=", "t5.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "JOIN", "writes", "AS", "t4", "ON", "t4.paperid", "=", "t3.paperid", "JOIN", "author", "AS", "t1", "ON", "t4.authorid", "=", "t1.authorid", "WHERE", "t1.authorname", "=", "``", "brian", "curless", "''", "AND", "t5.keyphrasename", "=", "``", "convolution", "''", ";"], "query_toks_no_value": ["select", "distinct", "t1", ".", "authorid", ",", "t3", ".", "paperid", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t5", "on", "t2", ".", "keyphraseid", "=", "t5", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "join", "writes", "as", "t4", "on", "t4", ".", "paperid", "=", "t3", ".", "paperid", "join", "author", "as", "t1", "on", "t4", ".", "authorid", "=", "t1", ".", "authorid", "where", "t1", ".", "authorname", "=", "value", "and", "t5", ".", "keyphrasename", "=", "value"], "question": "convolution by brian curless", "question_toks": ["convolution", "by", "brian", "curless"], "guid": 4806}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | papers in semantic parsing for each year", "sql": "SELECT DISTINCT COUNT ( t3.paperid )  ,  t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"semantic parsing\" GROUP BY t3.year ORDER BY t3.year DESC;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( t3.paperid )  ,  t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"semantic parsing\" GROUP BY t3.year ORDER BY t3.year DESC;", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "t3.paperid", ")", ",", "t3.year", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "WHERE", "t1.keyphrasename", "=", "``", "semantic", "parsing", "''", "GROUP", "BY", "t3.year", "ORDER", "BY", "t3.year", "DESC", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "t3", ".", "paperid", ")", ",", "t3", ".", "year", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "where", "t1", ".", "keyphrasename", "=", "value", "group", "by", "t3", ".", "year", "order", "by", "t3", ".", "year", "desc"], "question": "papers in semantic parsing for each year", "question_toks": ["papers", "in", "semantic", "parsing", "for", "each", "year"], "guid": 4807}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | How many publications does Christopher D. Manning have ?", "sql": "SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christopher D. Manning\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christopher D. Manning\";", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "DISTINCT", "t2.paperid", ")", "FROM", "writes", "AS", "t2", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "WHERE", "t1.authorname", "=", "``", "Christopher", "D.", "Manning", "''", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "distinct", "t2", ".", "paperid", ")", "from", "writes", "as", "t2", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "where", "t1", ".", "authorname", "=", "value"], "question": "How many publications does Christopher D. Manning have ?", "question_toks": ["How", "many", "publications", "does", "Christopher", "D.", "Manning", "have", "?"], "guid": 4808}}
{"text": "Document_Types: document_type_code, document_description; Documents: document_id, document_type_code, grant_id, sent_date, response_received_date, other_details; Grants: grant_id, organisation_id, grant_amount, grant_start_date, grant_end_date, other_details; Organisation_Types: organisation_type, organisation_type_description; Organisations: organisation_id, organisation_type, organisation_details; Project_Outcomes: project_id, outcome_code, outcome_details; Project_Staff: staff_id, project_id, role_code, date_from, date_to, other_details; Projects: project_id, organisation_id, project_details; Research_Outcomes: outcome_code, outcome_description; Research_Staff: staff_id, employer_organisation_id, staff_details | List the organisation id with the maximum outcome count, and the count.", "sql": "SELECT T1.organisation_id ,  count(*) FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "tracking_grants_for_research", "query": "SELECT T1.organisation_id ,  count(*) FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.organisation_id", ",", "count", "(", "*", ")", "FROM", "Projects", "AS", "T1", "JOIN", "Project_outcomes", "AS", "T2", "ON", "T1.project_id", "=", "T2.project_id", "GROUP", "BY", "T1.organisation_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "organisation_id", ",", "count", "(", "*", ")", "from", "projects", "as", "t1", "join", "project_outcomes", "as", "t2", "on", "t1", ".", "project_id", "=", "t2", ".", "project_id", "group", "by", "t1", ".", "organisation_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "List the organisation id with the maximum outcome count, and the count.", "question_toks": ["List", "the", "organisation", "id", "with", "the", "maximum", "outcome", "count", ",", "and", "the", "count", "."], "guid": 4809}}
{"text": "book_club: book_club_id, Year, Author_or_Editor, Book_Title, Publisher, Category, Result; movie: movie_id, Title, Year, Director, Budget_million, Gross_worldwide; culture_company: Company_name, Type, Incorporated_in, Group_Equity_Shareholding, book_club_id, movie_id | Show all director names who have a movie in the year 1999 or 2000.", "sql": "SELECT director FROM movie WHERE YEAR  =  1999 OR YEAR  =  2000", "example": {"db_id": "culture_company", "query": "SELECT director FROM movie WHERE YEAR  =  1999 OR YEAR  =  2000", "query_toks": ["SELECT", "director", "FROM", "movie", "WHERE", "YEAR", "=", "1999", "OR", "YEAR", "=", "2000"], "query_toks_no_value": ["select", "director", "from", "movie", "where", "year", "=", "value", "or", "year", "=", "value"], "question": "Show all director names who have a movie in the year 1999 or 2000.", "question_toks": ["Show", "all", "director", "names", "who", "have", "a", "movie", "in", "the", "year", "1999", "or", "2000", "."], "guid": 4810}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the number of authors who have papers containing keyword \" Relational Database \" .", "sql": "SELECT COUNT ( DISTINCT t2.name ) FROM publication_keyword AS t5 JOIN keyword AS t1 ON t5.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t3.pid JOIN author AS t2 ON t4.aid  =  t2.aid WHERE t1.keyword  =  \"Relational Database\";", "example": {"db_id": "academic", "query": "SELECT COUNT ( DISTINCT t2.name ) FROM publication_keyword AS t5 JOIN keyword AS t1 ON t5.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t3.pid JOIN author AS t2 ON t4.aid  =  t2.aid WHERE t1.keyword  =  \"Relational Database\";", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "t2.name", ")", "FROM", "publication_keyword", "AS", "t5", "JOIN", "keyword", "AS", "t1", "ON", "t5.kid", "=", "t1.kid", "JOIN", "publication", "AS", "t3", "ON", "t3.pid", "=", "t5.pid", "JOIN", "writes", "AS", "t4", "ON", "t4.pid", "=", "t3.pid", "JOIN", "author", "AS", "t2", "ON", "t4.aid", "=", "t2.aid", "WHERE", "t1.keyword", "=", "``", "Relational", "Database", "''", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "t2", ".", "name", ")", "from", "publication_keyword", "as", "t5", "join", "keyword", "as", "t1", "on", "t5", ".", "kid", "=", "t1", ".", "kid", "join", "publication", "as", "t3", "on", "t3", ".", "pid", "=", "t5", ".", "pid", "join", "writes", "as", "t4", "on", "t4", ".", "pid", "=", "t3", ".", "pid", "join", "author", "as", "t2", "on", "t4", ".", "aid", "=", "t2", ".", "aid", "where", "t1", ".", "keyword", "=", "value"], "question": "return me the number of authors who have papers containing keyword \" Relational Database \" .", "question_toks": ["return", "me", "the", "number", "of", "authors", "who", "have", "papers", "containing", "keyword", "``", "Relational", "Database", "``", "."], "guid": 4811}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the number of papers by \" H. V. Jagadish \" on VLDB conference after 2000 .", "sql": "SELECT COUNT ( DISTINCT t4.title ) FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\" AND t2.name  =  \"VLDB\" AND t4.year  >  2000;", "example": {"db_id": "academic", "query": "SELECT COUNT ( DISTINCT t4.title ) FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\" AND t2.name  =  \"VLDB\" AND t4.year  >  2000;", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "t4.title", ")", "FROM", "publication", "AS", "t4", "JOIN", "conference", "AS", "t2", "ON", "t4.cid", "=", "t2.cid", "JOIN", "writes", "AS", "t3", "ON", "t3.pid", "=", "t4.pid", "JOIN", "author", "AS", "t1", "ON", "t3.aid", "=", "t1.aid", "WHERE", "t1.name", "=", "``", "H.", "V.", "Jagadish", "''", "AND", "t2.name", "=", "``", "VLDB", "''", "AND", "t4.year", ">", "2000", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "t4", ".", "title", ")", "from", "publication", "as", "t4", "join", "conference", "as", "t2", "on", "t4", ".", "cid", "=", "t2", ".", "cid", "join", "writes", "as", "t3", "on", "t3", ".", "pid", "=", "t4", ".", "pid", "join", "author", "as", "t1", "on", "t3", ".", "aid", "=", "t1", ".", "aid", "where", "t1", ".", "name", "=", "value", "and", "t2", ".", "name", "=", "value", "and", "t4", ".", "year", ">", "value"], "question": "return me the number of papers by \" H. V. Jagadish \" on VLDB conference after 2000 .", "question_toks": ["return", "me", "the", "number", "of", "papers", "by", "``", "H.", "V.", "Jagadish", "``", "on", "VLDB", "conference", "after", "2000", "."], "guid": 4812}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | 2014 papers using ImageNet", "sql": "SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname  =  \"ImageNet\" AND t3.year  =  2014;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname  =  \"ImageNet\" AND t3.year  =  2014;", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "paperdataset", "AS", "t2", "JOIN", "dataset", "AS", "t1", "ON", "t2.datasetid", "=", "t1.datasetid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "WHERE", "t1.datasetname", "=", "``", "ImageNet", "''", "AND", "t3.year", "=", "2014", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "paperdataset", "as", "t2", "join", "dataset", "as", "t1", "on", "t2", ".", "datasetid", "=", "t1", ".", "datasetid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "where", "t1", ".", "datasetname", "=", "value", "and", "t3", ".", "year", "=", "value"], "question": "2014 papers using ImageNet", "question_toks": ["2014", "papers", "using", "ImageNet"], "guid": 4813}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | best paper in TACL 2014 ?", "sql": "SELECT DISTINCT COUNT ( DISTINCT t3.citingpaperid )  ,  t1.paperid FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2014 AND t2.venuename  =  \"TACL\" GROUP BY t1.paperid ORDER BY COUNT ( DISTINCT t3.citingpaperid ) DESC;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( DISTINCT t3.citingpaperid )  ,  t1.paperid FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2014 AND t2.venuename  =  \"TACL\" GROUP BY t1.paperid ORDER BY COUNT ( DISTINCT t3.citingpaperid ) DESC;", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "DISTINCT", "t3.citingpaperid", ")", ",", "t1.paperid", "FROM", "paper", "AS", "t1", "JOIN", "cite", "AS", "t3", "ON", "t1.paperid", "=", "t3.citedpaperid", "JOIN", "venue", "AS", "t2", "ON", "t2.venueid", "=", "t1.venueid", "WHERE", "t1.year", "=", "2014", "AND", "t2.venuename", "=", "``", "TACL", "''", "GROUP", "BY", "t1.paperid", "ORDER", "BY", "COUNT", "(", "DISTINCT", "t3.citingpaperid", ")", "DESC", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "distinct", "t3", ".", "citingpaperid", ")", ",", "t1", ".", "paperid", "from", "paper", "as", "t1", "join", "cite", "as", "t3", "on", "t1", ".", "paperid", "=", "t3", ".", "citedpaperid", "join", "venue", "as", "t2", "on", "t2", ".", "venueid", "=", "t1", ".", "venueid", "where", "t1", ".", "year", "=", "value", "and", "t2", ".", "venuename", "=", "value", "group", "by", "t1", ".", "paperid", "order", "by", "count", "(", "distinct", "t3", ".", "citingpaperid", ")", "desc"], "question": "best paper in TACL 2014 ?", "question_toks": ["best", "paper", "in", "TACL", "2014", "?"], "guid": 4814}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | Papers from pldi 2015 ?", "sql": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"pldi\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"pldi\";", "query_toks": ["SELECT", "DISTINCT", "t1.paperid", "FROM", "venue", "AS", "t2", "JOIN", "paper", "AS", "t1", "ON", "t2.venueid", "=", "t1.venueid", "WHERE", "t1.year", "=", "2015", "AND", "t2.venuename", "=", "``", "pldi", "''", ";"], "query_toks_no_value": ["select", "distinct", "t1", ".", "paperid", "from", "venue", "as", "t2", "join", "paper", "as", "t1", "on", "t2", ".", "venueid", "=", "t1", ".", "venueid", "where", "t1", ".", "year", "=", "value", "and", "t2", ".", "venuename", "=", "value"], "question": "Papers from pldi 2015 ?", "question_toks": ["Papers", "from", "pldi", "2015", "?"], "guid": 4815}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | What datasets have jitendra malik used", "sql": "SELECT DISTINCT t2.datasetid FROM paper AS t3 JOIN paperdataset AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"jitendra malik\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t2.datasetid FROM paper AS t3 JOIN paperdataset AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"jitendra malik\";", "query_toks": ["SELECT", "DISTINCT", "t2.datasetid", "FROM", "paper", "AS", "t3", "JOIN", "paperdataset", "AS", "t2", "ON", "t3.paperid", "=", "t2.paperid", "JOIN", "writes", "AS", "t4", "ON", "t4.paperid", "=", "t3.paperid", "JOIN", "author", "AS", "t1", "ON", "t4.authorid", "=", "t1.authorid", "WHERE", "t1.authorname", "=", "``", "jitendra", "malik", "''", ";"], "query_toks_no_value": ["select", "distinct", "t2", ".", "datasetid", "from", "paper", "as", "t3", "join", "paperdataset", "as", "t2", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "join", "writes", "as", "t4", "on", "t4", ".", "paperid", "=", "t3", ".", "paperid", "join", "author", "as", "t1", "on", "t4", ".", "authorid", "=", "t1", ".", "authorid", "where", "t1", ".", "authorname", "=", "value"], "question": "What datasets have jitendra malik used", "question_toks": ["What", "datasets", "have", "jitendra", "malik", "used"], "guid": 4816}}
{"text": "Inst: instID, name, country; Authors: authID, lname, fname; Papers: paperID, title; Authorship: authID, instID, paperID, authOrder | Count the number of institutions.", "sql": "SELECT count(*) FROM inst", "example": {"db_id": "icfp_1", "query": "SELECT count(*) FROM inst", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "inst"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "inst"], "question": "Count the number of institutions.", "question_toks": ["Count", "the", "number", "of", "institutions", "."], "guid": 4817}}
{"text": "Inst: instID, name, country; Authors: authID, lname, fname; Papers: paperID, title; Authorship: authID, instID, paperID, authOrder | Who belong to the institution \"University of Oxford\"? Show the first names and last names.", "sql": "SELECT DISTINCT t1.fname ,  t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"University of Oxford\"", "example": {"db_id": "icfp_1", "query": "SELECT DISTINCT t1.fname ,  t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"University of Oxford\"", "query_toks": ["SELECT", "DISTINCT", "t1.fname", ",", "t1.lname", "FROM", "authors", "AS", "t1", "JOIN", "authorship", "AS", "t2", "ON", "t1.authid", "=", "t2.authid", "JOIN", "inst", "AS", "t3", "ON", "t2.instid", "=", "t3.instid", "WHERE", "t3.name", "=", "``", "University", "of", "Oxford", "''"], "query_toks_no_value": ["select", "distinct", "t1", ".", "fname", ",", "t1", ".", "lname", "from", "authors", "as", "t1", "join", "authorship", "as", "t2", "on", "t1", ".", "authid", "=", "t2", ".", "authid", "join", "inst", "as", "t3", "on", "t2", ".", "instid", "=", "t3", ".", "instid", "where", "t3", ".", "name", "=", "value"], "question": "Who belong to the institution \"University of Oxford\"? Show the first names and last names.", "question_toks": ["Who", "belong", "to", "the", "institution", "``", "University", "of", "Oxford", "''", "?", "Show", "the", "first", "names", "and", "last", "names", "."], "guid": 4818}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the keyword, which have been contained by the most number of papers by \" H. V. Jagadish \" .", "sql": "SELECT t1.keyword FROM publication_keyword AS t5 JOIN keyword AS t1 ON t5.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t3.pid JOIN author AS t2 ON t4.aid  =  t2.aid WHERE t2.name  =  \"H. V. Jagadish\" GROUP BY t1.keyword ORDER BY COUNT ( DISTINCT t3.title ) DESC LIMIT 1;", "example": {"db_id": "academic", "query": "SELECT t1.keyword FROM publication_keyword AS t5 JOIN keyword AS t1 ON t5.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t3.pid JOIN author AS t2 ON t4.aid  =  t2.aid WHERE t2.name  =  \"H. V. Jagadish\" GROUP BY t1.keyword ORDER BY COUNT ( DISTINCT t3.title ) DESC LIMIT 1;", "query_toks": ["SELECT", "t1.keyword", "FROM", "publication_keyword", "AS", "t5", "JOIN", "keyword", "AS", "t1", "ON", "t5.kid", "=", "t1.kid", "JOIN", "publication", "AS", "t3", "ON", "t3.pid", "=", "t5.pid", "JOIN", "writes", "AS", "t4", "ON", "t4.pid", "=", "t3.pid", "JOIN", "author", "AS", "t2", "ON", "t4.aid", "=", "t2.aid", "WHERE", "t2.name", "=", "``", "H.", "V.", "Jagadish", "''", "GROUP", "BY", "t1.keyword", "ORDER", "BY", "COUNT", "(", "DISTINCT", "t3.title", ")", "DESC", "LIMIT", "1", ";"], "query_toks_no_value": ["select", "t1", ".", "keyword", "from", "publication_keyword", "as", "t5", "join", "keyword", "as", "t1", "on", "t5", ".", "kid", "=", "t1", ".", "kid", "join", "publication", "as", "t3", "on", "t3", ".", "pid", "=", "t5", ".", "pid", "join", "writes", "as", "t4", "on", "t4", ".", "pid", "=", "t3", ".", "pid", "join", "author", "as", "t2", "on", "t4", ".", "aid", "=", "t2", ".", "aid", "where", "t2", ".", "name", "=", "value", "group", "by", "t1", ".", "keyword", "order", "by", "count", "(", "distinct", "t3", ".", "title", ")", "desc", "limit", "value"], "question": "return me the keyword, which have been contained by the most number of papers by \" H. V. Jagadish \" .", "question_toks": ["return", "me", "the", "keyword", ",", "which", "have", "been", "contained", "by", "the", "most", "number", "of", "papers", "by", "``", "H.", "V.", "Jagadish", "``", "."], "guid": 4819}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the author in the \" University of Michigan \" whose papers in Databases area have the most total citations .", "sql": "SELECT t1.name FROM DOMAIN AS t4 JOIN domain_publication AS t2 ON t4.did  =  t2.did JOIN publication AS t5 ON t5.pid  =  t2.pid JOIN writes AS t3 ON t3.pid  =  t5.pid JOIN author AS t1 ON t3.aid  =  t1.aid JOIN organization AS t6 ON t6.oid  =  t1.oid WHERE t4.name  =  \"Databases\" AND t6.name  =  \"University of Michigan\" GROUP BY t1.name ORDER BY SUM ( t5.citation_num ) DESC LIMIT 1;", "example": {"db_id": "academic", "query": "SELECT t1.name FROM DOMAIN AS t4 JOIN domain_publication AS t2 ON t4.did  =  t2.did JOIN publication AS t5 ON t5.pid  =  t2.pid JOIN writes AS t3 ON t3.pid  =  t5.pid JOIN author AS t1 ON t3.aid  =  t1.aid JOIN organization AS t6 ON t6.oid  =  t1.oid WHERE t4.name  =  \"Databases\" AND t6.name  =  \"University of Michigan\" GROUP BY t1.name ORDER BY SUM ( t5.citation_num ) DESC LIMIT 1;", "query_toks": ["SELECT", "t1.name", "FROM", "DOMAIN", "AS", "t4", "JOIN", "domain_publication", "AS", "t2", "ON", "t4.did", "=", "t2.did", "JOIN", "publication", "AS", "t5", "ON", "t5.pid", "=", "t2.pid", "JOIN", "writes", "AS", "t3", "ON", "t3.pid", "=", "t5.pid", "JOIN", "author", "AS", "t1", "ON", "t3.aid", "=", "t1.aid", "JOIN", "organization", "AS", "t6", "ON", "t6.oid", "=", "t1.oid", "WHERE", "t4.name", "=", "``", "Databases", "''", "AND", "t6.name", "=", "``", "University", "of", "Michigan", "''", "GROUP", "BY", "t1.name", "ORDER", "BY", "SUM", "(", "t5.citation_num", ")", "DESC", "LIMIT", "1", ";"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "domain", "as", "t4", "join", "domain_publication", "as", "t2", "on", "t4", ".", "did", "=", "t2", ".", "did", "join", "publication", "as", "t5", "on", "t5", ".", "pid", "=", "t2", ".", "pid", "join", "writes", "as", "t3", "on", "t3", ".", "pid", "=", "t5", ".", "pid", "join", "author", "as", "t1", "on", "t3", ".", "aid", "=", "t1", ".", "aid", "join", "organization", "as", "t6", "on", "t6", ".", "oid", "=", "t1", ".", "oid", "where", "t4", ".", "name", "=", "value", "and", "t6", ".", "name", "=", "value", "group", "by", "t1", ".", "name", "order", "by", "sum", "(", "t5", ".", "citation_num", ")", "desc", "limit", "value"], "question": "return me the author in the \" University of Michigan \" whose papers in Databases area have the most total citations .", "question_toks": ["return", "me", "the", "author", "in", "the", "``", "University", "of", "Michigan", "``", "whose", "papers", "in", "Databases", "area", "have", "the", "most", "total", "citations", "."], "guid": 4820}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the number of journals which have papers by \" H. V. Jagadish \" .", "sql": "SELECT COUNT ( DISTINCT t2.name ) FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\";", "example": {"db_id": "academic", "query": "SELECT COUNT ( DISTINCT t2.name ) FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\";", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "t2.name", ")", "FROM", "publication", "AS", "t4", "JOIN", "journal", "AS", "t2", "ON", "t4.jid", "=", "t2.jid", "JOIN", "writes", "AS", "t3", "ON", "t3.pid", "=", "t4.pid", "JOIN", "author", "AS", "t1", "ON", "t3.aid", "=", "t1.aid", "WHERE", "t1.name", "=", "``", "H.", "V.", "Jagadish", "''", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "t2", ".", "name", ")", "from", "publication", "as", "t4", "join", "journal", "as", "t2", "on", "t4", ".", "jid", "=", "t2", ".", "jid", "join", "writes", "as", "t3", "on", "t3", ".", "pid", "=", "t4", ".", "pid", "join", "author", "as", "t1", "on", "t3", ".", "aid", "=", "t1", ".", "aid", "where", "t1", ".", "name", "=", "value"], "question": "return me the number of journals which have papers by \" H. V. Jagadish \" .", "question_toks": ["return", "me", "the", "number", "of", "journals", "which", "have", "papers", "by", "``", "H.", "V.", "Jagadish", "``", "."], "guid": 4821}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | what were some Parsing based papers in acl 2012 ?", "sql": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Parsing\" AND t3.year  =  2012 AND t4.venuename  =  \"acl\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Parsing\" AND t3.year  =  2012 AND t4.venuename  =  \"acl\";", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "JOIN", "venue", "AS", "t4", "ON", "t4.venueid", "=", "t3.venueid", "WHERE", "t1.keyphrasename", "=", "``", "Parsing", "''", "AND", "t3.year", "=", "2012", "AND", "t4.venuename", "=", "``", "acl", "''", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "join", "venue", "as", "t4", "on", "t4", ".", "venueid", "=", "t3", ".", "venueid", "where", "t1", ".", "keyphrasename", "=", "value", "and", "t3", ".", "year", "=", "value", "and", "t4", ".", "venuename", "=", "value"], "question": "what were some Parsing based papers in acl 2012 ?", "question_toks": ["what", "were", "some", "Parsing", "based", "papers", "in", "acl", "2012", "?"], "guid": 4822}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the journals, which have more than 60 papers containing keyword \" Relational Database \" .", "sql": "SELECT t3.name FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t2 ON t2.pid  =  t4.pid JOIN journal AS t3 ON t2.jid  =  t3.jid WHERE t1.keyword  =  \"Relational Database\" GROUP BY t3.name HAVING COUNT ( DISTINCT t2.title )  >  60;", "example": {"db_id": "academic", "query": "SELECT t3.name FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t2 ON t2.pid  =  t4.pid JOIN journal AS t3 ON t2.jid  =  t3.jid WHERE t1.keyword  =  \"Relational Database\" GROUP BY t3.name HAVING COUNT ( DISTINCT t2.title )  >  60;", "query_toks": ["SELECT", "t3.name", "FROM", "publication_keyword", "AS", "t4", "JOIN", "keyword", "AS", "t1", "ON", "t4.kid", "=", "t1.kid", "JOIN", "publication", "AS", "t2", "ON", "t2.pid", "=", "t4.pid", "JOIN", "journal", "AS", "t3", "ON", "t2.jid", "=", "t3.jid", "WHERE", "t1.keyword", "=", "``", "Relational", "Database", "''", "GROUP", "BY", "t3.name", "HAVING", "COUNT", "(", "DISTINCT", "t2.title", ")", ">", "60", ";"], "query_toks_no_value": ["select", "t3", ".", "name", "from", "publication_keyword", "as", "t4", "join", "keyword", "as", "t1", "on", "t4", ".", "kid", "=", "t1", ".", "kid", "join", "publication", "as", "t2", "on", "t2", ".", "pid", "=", "t4", ".", "pid", "join", "journal", "as", "t3", "on", "t2", ".", "jid", "=", "t3", ".", "jid", "where", "t1", ".", "keyword", "=", "value", "group", "by", "t3", ".", "name", "having", "count", "(", "distinct", "t2", ".", "title", ")", ">", "value"], "question": "return me the journals, which have more than 60 papers containing keyword \" Relational Database \" .", "question_toks": ["return", "me", "the", "journals", ",", "which", "have", "more", "than", "60", "papers", "containing", "keyword", "``", "Relational", "Database", "``", "."], "guid": 4823}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the authors who have cooperated both with \" H. V. Jagadish \" and \" Divesh Srivastava \" .", "sql": "SELECT t2.name FROM writes AS t4 JOIN author AS t2 ON t4.aid  =  t2.aid JOIN publication AS t7 ON t4.pid  =  t7.pid JOIN writes AS t5 ON t5.pid  =  t7.pid JOIN writes AS t6 ON t6.pid  =  t7.pid JOIN author AS t1 ON t5.aid  =  t1.aid JOIN author AS t3 ON t6.aid  =  t3.aid WHERE t1.name  =  \"H. V. Jagadish\" AND t3.name  =  \"Divesh Srivastava\";", "example": {"db_id": "academic", "query": "SELECT t2.name FROM writes AS t4 JOIN author AS t2 ON t4.aid  =  t2.aid JOIN publication AS t7 ON t4.pid  =  t7.pid JOIN writes AS t5 ON t5.pid  =  t7.pid JOIN writes AS t6 ON t6.pid  =  t7.pid JOIN author AS t1 ON t5.aid  =  t1.aid JOIN author AS t3 ON t6.aid  =  t3.aid WHERE t1.name  =  \"H. V. Jagadish\" AND t3.name  =  \"Divesh Srivastava\";", "query_toks": ["SELECT", "t2.name", "FROM", "writes", "AS", "t4", "JOIN", "author", "AS", "t2", "ON", "t4.aid", "=", "t2.aid", "JOIN", "publication", "AS", "t7", "ON", "t4.pid", "=", "t7.pid", "JOIN", "writes", "AS", "t5", "ON", "t5.pid", "=", "t7.pid", "JOIN", "writes", "AS", "t6", "ON", "t6.pid", "=", "t7.pid", "JOIN", "author", "AS", "t1", "ON", "t5.aid", "=", "t1.aid", "JOIN", "author", "AS", "t3", "ON", "t6.aid", "=", "t3.aid", "WHERE", "t1.name", "=", "``", "H.", "V.", "Jagadish", "''", "AND", "t3.name", "=", "``", "Divesh", "Srivastava", "''", ";"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "writes", "as", "t4", "join", "author", "as", "t2", "on", "t4", ".", "aid", "=", "t2", ".", "aid", "join", "publication", "as", "t7", "on", "t4", ".", "pid", "=", "t7", ".", "pid", "join", "writes", "as", "t5", "on", "t5", ".", "pid", "=", "t7", ".", "pid", "join", "writes", "as", "t6", "on", "t6", ".", "pid", "=", "t7", ".", "pid", "join", "author", "as", "t1", "on", "t5", ".", "aid", "=", "t1", ".", "aid", "join", "author", "as", "t3", "on", "t6", ".", "aid", "=", "t3", ".", "aid", "where", "t1", ".", "name", "=", "value", "and", "t3", ".", "name", "=", "value"], "question": "return me the authors who have cooperated both with \" H. V. Jagadish \" and \" Divesh Srivastava \" .", "question_toks": ["return", "me", "the", "authors", "who", "have", "cooperated", "both", "with", "``", "H.", "V.", "Jagadish", "``", "and", "``", "Divesh", "Srivastava", "``", "."], "guid": 4824}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the paper after 2000 in VLDB conference with the most citations .", "sql": "SELECT t2.title FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\" AND t2.year  >  2000 ORDER BY t2.citation_num DESC LIMIT 1;", "example": {"db_id": "academic", "query": "SELECT t2.title FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\" AND t2.year  >  2000 ORDER BY t2.citation_num DESC LIMIT 1;", "query_toks": ["SELECT", "t2.title", "FROM", "publication", "AS", "t2", "JOIN", "conference", "AS", "t1", "ON", "t2.cid", "=", "t1.cid", "WHERE", "t1.name", "=", "``", "VLDB", "''", "AND", "t2.year", ">", "2000", "ORDER", "BY", "t2.citation_num", "DESC", "LIMIT", "1", ";"], "query_toks_no_value": ["select", "t2", ".", "title", "from", "publication", "as", "t2", "join", "conference", "as", "t1", "on", "t2", ".", "cid", "=", "t1", ".", "cid", "where", "t1", ".", "name", "=", "value", "and", "t2", ".", "year", ">", "value", "order", "by", "t2", ".", "citation_num", "desc", "limit", "value"], "question": "return me the paper after 2000 in VLDB conference with the most citations .", "question_toks": ["return", "me", "the", "paper", "after", "2000", "in", "VLDB", "conference", "with", "the", "most", "citations", "."], "guid": 4825}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the authors who have papers in PVLDB 2010 .", "sql": "SELECT t1.name FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t2.name  =  \"PVLDB\" AND t4.year  =  2010;", "example": {"db_id": "academic", "query": "SELECT t1.name FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t2.name  =  \"PVLDB\" AND t4.year  =  2010;", "query_toks": ["SELECT", "t1.name", "FROM", "publication", "AS", "t4", "JOIN", "journal", "AS", "t2", "ON", "t4.jid", "=", "t2.jid", "JOIN", "writes", "AS", "t3", "ON", "t3.pid", "=", "t4.pid", "JOIN", "author", "AS", "t1", "ON", "t3.aid", "=", "t1.aid", "WHERE", "t2.name", "=", "``", "PVLDB", "''", "AND", "t4.year", "=", "2010", ";"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "publication", "as", "t4", "join", "journal", "as", "t2", "on", "t4", ".", "jid", "=", "t2", ".", "jid", "join", "writes", "as", "t3", "on", "t3", ".", "pid", "=", "t4", ".", "pid", "join", "author", "as", "t1", "on", "t3", ".", "aid", "=", "t1", ".", "aid", "where", "t2", ".", "name", "=", "value", "and", "t4", ".", "year", "=", "value"], "question": "return me the authors who have papers in PVLDB 2010 .", "question_toks": ["return", "me", "the", "authors", "who", "have", "papers", "in", "PVLDB", "2010", "."], "guid": 4826}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | what papers were published in Academic radiology in 1995 ?", "sql": "SELECT DISTINCT t2.paperid FROM paper AS t2 JOIN journal AS t1 ON t2.journalid  =  t1.journalid WHERE t1.journalname  =  \"Academic radiology\" AND t2.year  =  1995;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t2.paperid FROM paper AS t2 JOIN journal AS t1 ON t2.journalid  =  t1.journalid WHERE t1.journalname  =  \"Academic radiology\" AND t2.year  =  1995;", "query_toks": ["SELECT", "DISTINCT", "t2.paperid", "FROM", "paper", "AS", "t2", "JOIN", "journal", "AS", "t1", "ON", "t2.journalid", "=", "t1.journalid", "WHERE", "t1.journalname", "=", "``", "Academic", "radiology", "''", "AND", "t2.year", "=", "1995", ";"], "query_toks_no_value": ["select", "distinct", "t2", ".", "paperid", "from", "paper", "as", "t2", "join", "journal", "as", "t1", "on", "t2", ".", "journalid", "=", "t1", ".", "journalid", "where", "t1", ".", "journalname", "=", "value", "and", "t2", ".", "year", "=", "value"], "question": "what papers were published in Academic radiology in 1995 ?", "question_toks": ["what", "papers", "were", "published", "in", "Academic", "radiology", "in", "1995", "?"], "guid": 4827}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | what has Liwen Xiong done in the past year", "sql": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Liwen Xiong\" AND t3.year  =  2015;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Liwen Xiong\" AND t3.year  =  2015;", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "writes", "AS", "t2", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "JOIN", "paper", "AS", "t3", "ON", "t2.paperid", "=", "t3.paperid", "WHERE", "t1.authorname", "=", "``", "Liwen", "Xiong", "''", "AND", "t3.year", "=", "2015", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "writes", "as", "t2", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "join", "paper", "as", "t3", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "where", "t1", ".", "authorname", "=", "value", "and", "t3", ".", "year", "=", "value"], "question": "what has Liwen Xiong done in the past year", "question_toks": ["what", "has", "Liwen", "Xiong", "done", "in", "the", "past", "year"], "guid": 4828}}
{"text": "Document_Types: document_type_code, document_description; Documents: document_id, document_type_code, grant_id, sent_date, response_received_date, other_details; Grants: grant_id, organisation_id, grant_amount, grant_start_date, grant_end_date, other_details; Organisation_Types: organisation_type, organisation_type_description; Organisations: organisation_id, organisation_type, organisation_details; Project_Outcomes: project_id, outcome_code, outcome_details; Project_Staff: staff_id, project_id, role_code, date_from, date_to, other_details; Projects: project_id, organisation_id, project_details; Research_Outcomes: outcome_code, outcome_description; Research_Staff: staff_id, employer_organisation_id, staff_details | What roles did staff members play between '2003-04-19 15:06:20' and '2016-03-15 00:33:18'?", "sql": "SELECT role_code FROM Project_Staff WHERE date_from  >  '2003-04-19 15:06:20' AND date_to  <  '2016-03-15 00:33:18'", "example": {"db_id": "tracking_grants_for_research", "query": "SELECT role_code FROM Project_Staff WHERE date_from  >  '2003-04-19 15:06:20' AND date_to  <  '2016-03-15 00:33:18'", "query_toks": ["SELECT", "role_code", "FROM", "Project_Staff", "WHERE", "date_from", ">", "'2003-04-19", "15:06:20", "'", "AND", "date_to", "<", "'2016-03-15", "00:33:18", "'"], "query_toks_no_value": ["select", "role_code", "from", "project_staff", "where", "date_from", ">", "value", "and", "date_to", "<", "value"], "question": "What roles did staff members play between '2003-04-19 15:06:20' and '2016-03-15 00:33:18'?", "question_toks": ["What", "roles", "did", "staff", "members", "play", "between", "'2003-04-19", "15:06:20", "'", "and", "'2016-03-15", "00:33:18", "'", "?"], "guid": 4829}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | most cited EMNLP 2010 papers", "sql": "SELECT DISTINCT t3.citedpaperid  ,  COUNT ( t3.citedpaperid ) FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2010 AND t2.venuename  =  \"EMNLP\" GROUP BY t3.citedpaperid ORDER BY COUNT ( t3.citedpaperid ) DESC;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.citedpaperid  ,  COUNT ( t3.citedpaperid ) FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2010 AND t2.venuename  =  \"EMNLP\" GROUP BY t3.citedpaperid ORDER BY COUNT ( t3.citedpaperid ) DESC;", "query_toks": ["SELECT", "DISTINCT", "t3.citedpaperid", ",", "COUNT", "(", "t3.citedpaperid", ")", "FROM", "paper", "AS", "t1", "JOIN", "cite", "AS", "t3", "ON", "t1.paperid", "=", "t3.citedpaperid", "JOIN", "venue", "AS", "t2", "ON", "t2.venueid", "=", "t1.venueid", "WHERE", "t1.year", "=", "2010", "AND", "t2.venuename", "=", "``", "EMNLP", "''", "GROUP", "BY", "t3.citedpaperid", "ORDER", "BY", "COUNT", "(", "t3.citedpaperid", ")", "DESC", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "citedpaperid", ",", "count", "(", "t3", ".", "citedpaperid", ")", "from", "paper", "as", "t1", "join", "cite", "as", "t3", "on", "t1", ".", "paperid", "=", "t3", ".", "citedpaperid", "join", "venue", "as", "t2", "on", "t2", ".", "venueid", "=", "t1", ".", "venueid", "where", "t1", ".", "year", "=", "value", "and", "t2", ".", "venuename", "=", "value", "group", "by", "t3", ".", "citedpaperid", "order", "by", "count", "(", "t3", ".", "citedpaperid", ")", "desc"], "question": "most cited EMNLP 2010 papers", "question_toks": ["most", "cited", "EMNLP", "2010", "papers"], "guid": 4830}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the author in the \" University of Michigan \" whose papers have the most total citations .", "sql": "SELECT t1.name FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid JOIN writes AS t3 ON t3.aid  =  t1.aid JOIN publication AS t4 ON t3.pid  =  t4.pid WHERE t2.name  =  \"University of Michigan\" GROUP BY t1.name ORDER BY SUM ( t4.citation_num ) DESC LIMIT 1;", "example": {"db_id": "academic", "query": "SELECT t1.name FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid JOIN writes AS t3 ON t3.aid  =  t1.aid JOIN publication AS t4 ON t3.pid  =  t4.pid WHERE t2.name  =  \"University of Michigan\" GROUP BY t1.name ORDER BY SUM ( t4.citation_num ) DESC LIMIT 1;", "query_toks": ["SELECT", "t1.name", "FROM", "organization", "AS", "t2", "JOIN", "author", "AS", "t1", "ON", "t2.oid", "=", "t1.oid", "JOIN", "writes", "AS", "t3", "ON", "t3.aid", "=", "t1.aid", "JOIN", "publication", "AS", "t4", "ON", "t3.pid", "=", "t4.pid", "WHERE", "t2.name", "=", "``", "University", "of", "Michigan", "''", "GROUP", "BY", "t1.name", "ORDER", "BY", "SUM", "(", "t4.citation_num", ")", "DESC", "LIMIT", "1", ";"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "organization", "as", "t2", "join", "author", "as", "t1", "on", "t2", ".", "oid", "=", "t1", ".", "oid", "join", "writes", "as", "t3", "on", "t3", ".", "aid", "=", "t1", ".", "aid", "join", "publication", "as", "t4", "on", "t3", ".", "pid", "=", "t4", ".", "pid", "where", "t2", ".", "name", "=", "value", "group", "by", "t1", ".", "name", "order", "by", "sum", "(", "t4", ".", "citation_num", ")", "desc", "limit", "value"], "question": "return me the author in the \" University of Michigan \" whose papers have the most total citations .", "question_toks": ["return", "me", "the", "author", "in", "the", "``", "University", "of", "Michigan", "``", "whose", "papers", "have", "the", "most", "total", "citations", "."], "guid": 4831}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the number of papers written by \" H. V. Jagadish \" and \" Divesh Srivastava \" .", "sql": "SELECT COUNT ( DISTINCT t5.title ) FROM writes AS t3 JOIN author AS t2 ON t3.aid  =  t2.aid JOIN publication AS t5 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t5.pid JOIN author AS t1 ON t4.aid  =  t1.aid WHERE t2.name  =  \"H. V. Jagadish\" AND t1.name  =  \"Divesh Srivastava\";", "example": {"db_id": "academic", "query": "SELECT COUNT ( DISTINCT t5.title ) FROM writes AS t3 JOIN author AS t2 ON t3.aid  =  t2.aid JOIN publication AS t5 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t5.pid JOIN author AS t1 ON t4.aid  =  t1.aid WHERE t2.name  =  \"H. V. Jagadish\" AND t1.name  =  \"Divesh Srivastava\";", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "t5.title", ")", "FROM", "writes", "AS", "t3", "JOIN", "author", "AS", "t2", "ON", "t3.aid", "=", "t2.aid", "JOIN", "publication", "AS", "t5", "ON", "t3.pid", "=", "t5.pid", "JOIN", "writes", "AS", "t4", "ON", "t4.pid", "=", "t5.pid", "JOIN", "author", "AS", "t1", "ON", "t4.aid", "=", "t1.aid", "WHERE", "t2.name", "=", "``", "H.", "V.", "Jagadish", "''", "AND", "t1.name", "=", "``", "Divesh", "Srivastava", "''", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "t5", ".", "title", ")", "from", "writes", "as", "t3", "join", "author", "as", "t2", "on", "t3", ".", "aid", "=", "t2", ".", "aid", "join", "publication", "as", "t5", "on", "t3", ".", "pid", "=", "t5", ".", "pid", "join", "writes", "as", "t4", "on", "t4", ".", "pid", "=", "t5", ".", "pid", "join", "author", "as", "t1", "on", "t4", ".", "aid", "=", "t1", ".", "aid", "where", "t2", ".", "name", "=", "value", "and", "t1", ".", "name", "=", "value"], "question": "return me the number of papers written by \" H. V. Jagadish \" and \" Divesh Srivastava \" .", "question_toks": ["return", "me", "the", "number", "of", "papers", "written", "by", "``", "H.", "V.", "Jagadish", "``", "and", "``", "Divesh", "Srivastava", "``", "."], "guid": 4832}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the number of citations of \" Making database systems usable \" before 2010 .", "sql": "SELECT COUNT ( DISTINCT t2.title ) FROM publication AS t3 JOIN cite AS t1 ON t3.pid  =  t1.cited JOIN publication AS t2 ON t2.pid  =  t1.citing WHERE t3.title  =  \"Making database systems usable\" AND t2.year  <  2010;", "example": {"db_id": "academic", "query": "SELECT COUNT ( DISTINCT t2.title ) FROM publication AS t3 JOIN cite AS t1 ON t3.pid  =  t1.cited JOIN publication AS t2 ON t2.pid  =  t1.citing WHERE t3.title  =  \"Making database systems usable\" AND t2.year  <  2010;", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "t2.title", ")", "FROM", "publication", "AS", "t3", "JOIN", "cite", "AS", "t1", "ON", "t3.pid", "=", "t1.cited", "JOIN", "publication", "AS", "t2", "ON", "t2.pid", "=", "t1.citing", "WHERE", "t3.title", "=", "``", "Making", "database", "systems", "usable", "''", "AND", "t2.year", "<", "2010", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "t2", ".", "title", ")", "from", "publication", "as", "t3", "join", "cite", "as", "t1", "on", "t3", ".", "pid", "=", "t1", ".", "cited", "join", "publication", "as", "t2", "on", "t2", ".", "pid", "=", "t1", ".", "citing", "where", "t3", ".", "title", "=", "value", "and", "t2", ".", "year", "<", "value"], "question": "return me the number of citations of \" Making database systems usable \" before 2010 .", "question_toks": ["return", "me", "the", "number", "of", "citations", "of", "``", "Making", "database", "systems", "usable", "``", "before", "2010", "."], "guid": 4833}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the papers on PVLDB after 2000 .", "sql": "SELECT t2.title FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\" AND t2.year  >  2000;", "example": {"db_id": "academic", "query": "SELECT t2.title FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\" AND t2.year  >  2000;", "query_toks": ["SELECT", "t2.title", "FROM", "publication", "AS", "t2", "JOIN", "journal", "AS", "t1", "ON", "t2.jid", "=", "t1.jid", "WHERE", "t1.name", "=", "``", "PVLDB", "''", "AND", "t2.year", ">", "2000", ";"], "query_toks_no_value": ["select", "t2", ".", "title", "from", "publication", "as", "t2", "join", "journal", "as", "t1", "on", "t2", ".", "jid", "=", "t1", ".", "jid", "where", "t1", ".", "name", "=", "value", "and", "t2", ".", "year", ">", "value"], "question": "return me the papers on PVLDB after 2000 .", "question_toks": ["return", "me", "the", "papers", "on", "PVLDB", "after", "2000", "."], "guid": 4834}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | conferences for Trophic Cascade", "sql": "SELECT DISTINCT t3.venueid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Trophic Cascade\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.venueid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Trophic Cascade\";", "query_toks": ["SELECT", "DISTINCT", "t3.venueid", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "WHERE", "t1.keyphrasename", "=", "``", "Trophic", "Cascade", "''", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "venueid", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "where", "t1", ".", "keyphrasename", "=", "value"], "question": "conferences for Trophic Cascade", "question_toks": ["conferences", "for", "Trophic", "Cascade"], "guid": 4835}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the conferences, which have more than 60 papers containing keyword \" Relational Database \" .", "sql": "SELECT t2.name FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t4.pid JOIN conference AS t2 ON t3.cid  =  t2.cid WHERE t1.keyword  =  \"Relational Database\" GROUP BY t2.name HAVING COUNT ( DISTINCT t3.title )  >  60;", "example": {"db_id": "academic", "query": "SELECT t2.name FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t4.pid JOIN conference AS t2 ON t3.cid  =  t2.cid WHERE t1.keyword  =  \"Relational Database\" GROUP BY t2.name HAVING COUNT ( DISTINCT t3.title )  >  60;", "query_toks": ["SELECT", "t2.name", "FROM", "publication_keyword", "AS", "t4", "JOIN", "keyword", "AS", "t1", "ON", "t4.kid", "=", "t1.kid", "JOIN", "publication", "AS", "t3", "ON", "t3.pid", "=", "t4.pid", "JOIN", "conference", "AS", "t2", "ON", "t3.cid", "=", "t2.cid", "WHERE", "t1.keyword", "=", "``", "Relational", "Database", "''", "GROUP", "BY", "t2.name", "HAVING", "COUNT", "(", "DISTINCT", "t3.title", ")", ">", "60", ";"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "publication_keyword", "as", "t4", "join", "keyword", "as", "t1", "on", "t4", ".", "kid", "=", "t1", ".", "kid", "join", "publication", "as", "t3", "on", "t3", ".", "pid", "=", "t4", ".", "pid", "join", "conference", "as", "t2", "on", "t3", ".", "cid", "=", "t2", ".", "cid", "where", "t1", ".", "keyword", "=", "value", "group", "by", "t2", ".", "name", "having", "count", "(", "distinct", "t3", ".", "title", ")", ">", "value"], "question": "return me the conferences, which have more than 60 papers containing keyword \" Relational Database \" .", "question_toks": ["return", "me", "the", "conferences", ",", "which", "have", "more", "than", "60", "papers", "containing", "keyword", "``", "Relational", "Database", "``", "."], "guid": 4836}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the conferences, which have more than 10 papers by \" H. V. Jagadish \" .", "sql": "SELECT t2.name FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\" GROUP BY t2.name HAVING COUNT ( DISTINCT t4.title )  >  10;", "example": {"db_id": "academic", "query": "SELECT t2.name FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\" GROUP BY t2.name HAVING COUNT ( DISTINCT t4.title )  >  10;", "query_toks": ["SELECT", "t2.name", "FROM", "publication", "AS", "t4", "JOIN", "conference", "AS", "t2", "ON", "t4.cid", "=", "t2.cid", "JOIN", "writes", "AS", "t3", "ON", "t3.pid", "=", "t4.pid", "JOIN", "author", "AS", "t1", "ON", "t3.aid", "=", "t1.aid", "WHERE", "t1.name", "=", "``", "H.", "V.", "Jagadish", "''", "GROUP", "BY", "t2.name", "HAVING", "COUNT", "(", "DISTINCT", "t4.title", ")", ">", "10", ";"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "publication", "as", "t4", "join", "conference", "as", "t2", "on", "t4", ".", "cid", "=", "t2", ".", "cid", "join", "writes", "as", "t3", "on", "t3", ".", "pid", "=", "t4", ".", "pid", "join", "author", "as", "t1", "on", "t3", ".", "aid", "=", "t1", ".", "aid", "where", "t1", ".", "name", "=", "value", "group", "by", "t2", ".", "name", "having", "count", "(", "distinct", "t4", ".", "title", ")", ">", "value"], "question": "return me the conferences, which have more than 10 papers by \" H. V. Jagadish \" .", "question_toks": ["return", "me", "the", "conferences", ",", "which", "have", "more", "than", "10", "papers", "by", "``", "H.", "V.", "Jagadish", "``", "."], "guid": 4837}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | papers by Richard Ladner published at chi", "sql": "SELECT DISTINCT t3.paperid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Richard Ladner\" AND t4.venuename  =  \"chi\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Richard Ladner\" AND t4.venuename  =  \"chi\";", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "venue", "AS", "t4", "JOIN", "paper", "AS", "t3", "ON", "t4.venueid", "=", "t3.venueid", "JOIN", "writes", "AS", "t2", "ON", "t2.paperid", "=", "t3.paperid", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "WHERE", "t1.authorname", "=", "``", "Richard", "Ladner", "''", "AND", "t4.venuename", "=", "``", "chi", "''", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "venue", "as", "t4", "join", "paper", "as", "t3", "on", "t4", ".", "venueid", "=", "t3", ".", "venueid", "join", "writes", "as", "t2", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "where", "t1", ".", "authorname", "=", "value", "and", "t4", ".", "venuename", "=", "value"], "question": "papers by Richard Ladner published at chi", "question_toks": ["papers", "by", "Richard", "Ladner", "published", "at", "chi"], "guid": 4838}}
{"text": "Document_Types: document_type_code, document_description; Documents: document_id, document_type_code, grant_id, sent_date, response_received_date, other_details; Grants: grant_id, organisation_id, grant_amount, grant_start_date, grant_end_date, other_details; Organisation_Types: organisation_type, organisation_type_description; Organisations: organisation_id, organisation_type, organisation_details; Project_Outcomes: project_id, outcome_code, outcome_details; Project_Staff: staff_id, project_id, role_code, date_from, date_to, other_details; Projects: project_id, organisation_id, project_details; Research_Outcomes: outcome_code, outcome_description; Research_Staff: staff_id, employer_organisation_id, staff_details | How many project staff worked as leaders or started working before '1989-04-24 23:51:54'?", "sql": "SELECT count(*) FROM Project_Staff WHERE role_code  =  'leader' OR date_from  <  '1989-04-24 23:51:54'", "example": {"db_id": "tracking_grants_for_research", "query": "SELECT count(*) FROM Project_Staff WHERE role_code  =  'leader' OR date_from  <  '1989-04-24 23:51:54'", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Project_Staff", "WHERE", "role_code", "=", "'leader", "'", "OR", "date_from", "<", "'1989-04-24", "23:51:54", "'"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "project_staff", "where", "role_code", "=", "value", "or", "date_from", "<", "value"], "question": "How many project staff worked as leaders or started working before '1989-04-24 23:51:54'?", "question_toks": ["How", "many", "project", "staff", "worked", "as", "leaders", "or", "started", "working", "before", "'1989-04-24", "23:51:54", "'", "?"], "guid": 4839}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | are there any syntactic parsing papers not written by chris dyer ?", "sql": "SELECT DISTINCT t1.authorname  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname != \"chris dyer\" AND t5.keyphrasename  =  \"syntactic parsing\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t1.authorname  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname != \"chris dyer\" AND t5.keyphrasename  =  \"syntactic parsing\";", "query_toks": ["SELECT", "DISTINCT", "t1.authorname", ",", "t3.paperid", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t5", "ON", "t2.keyphraseid", "=", "t5.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "JOIN", "writes", "AS", "t4", "ON", "t4.paperid", "=", "t3.paperid", "JOIN", "author", "AS", "t1", "ON", "t4.authorid", "=", "t1.authorid", "WHERE", "t1.authorname", "!", "=", "``", "chris", "dyer", "''", "AND", "t5.keyphrasename", "=", "``", "syntactic", "parsing", "''", ";"], "query_toks_no_value": ["select", "distinct", "t1", ".", "authorname", ",", "t3", ".", "paperid", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t5", "on", "t2", ".", "keyphraseid", "=", "t5", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "join", "writes", "as", "t4", "on", "t4", ".", "paperid", "=", "t3", ".", "paperid", "join", "author", "as", "t1", "on", "t4", ".", "authorid", "=", "t1", ".", "authorid", "where", "t1", ".", "authorname", "!", "=", "value", "and", "t5", ".", "keyphrasename", "=", "value"], "question": "are there any syntactic parsing papers not written by chris dyer ?", "question_toks": ["are", "there", "any", "syntactic", "parsing", "papers", "not", "written", "by", "chris", "dyer", "?"], "guid": 4840}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | how many papers on convolutional neural networks have been published in the past year ?", "sql": "SELECT DISTINCT COUNT ( t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"convolutional neural networks\" AND t3.year  =  2016;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"convolutional neural networks\" AND t3.year  =  2016;", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "t3.paperid", ")", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "WHERE", "t1.keyphrasename", "=", "``", "convolutional", "neural", "networks", "''", "AND", "t3.year", "=", "2016", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "t3", ".", "paperid", ")", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "where", "t1", ".", "keyphrasename", "=", "value", "and", "t3", ".", "year", "=", "value"], "question": "how many papers on convolutional neural networks have been published in the past year ?", "question_toks": ["how", "many", "papers", "on", "convolutional", "neural", "networks", "have", "been", "published", "in", "the", "past", "year", "?"], "guid": 4841}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | question answering 2016 papers", "sql": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"question answering\" AND t3.year  =  2016;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"question answering\" AND t3.year  =  2016;", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "WHERE", "t1.keyphrasename", "=", "``", "question", "answering", "''", "AND", "t3.year", "=", "2016", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "where", "t1", ".", "keyphrasename", "=", "value", "and", "t3", ".", "year", "=", "value"], "question": "question answering 2016 papers", "question_toks": ["question", "answering", "2016", "papers"], "guid": 4842}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | Datasets with semantic parsing information", "sql": "SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  \"semantic parsing\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  \"semantic parsing\";", "query_toks": ["SELECT", "DISTINCT", "t2.datasetid", "FROM", "paperdataset", "AS", "t3", "JOIN", "dataset", "AS", "t2", "ON", "t3.datasetid", "=", "t2.datasetid", "JOIN", "paperkeyphrase", "AS", "t1", "ON", "t1.paperid", "=", "t3.paperid", "JOIN", "keyphrase", "AS", "t4", "ON", "t1.keyphraseid", "=", "t4.keyphraseid", "WHERE", "t4.keyphrasename", "=", "``", "semantic", "parsing", "''", ";"], "query_toks_no_value": ["select", "distinct", "t2", ".", "datasetid", "from", "paperdataset", "as", "t3", "join", "dataset", "as", "t2", "on", "t3", ".", "datasetid", "=", "t2", ".", "datasetid", "join", "paperkeyphrase", "as", "t1", "on", "t1", ".", "paperid", "=", "t3", ".", "paperid", "join", "keyphrase", "as", "t4", "on", "t1", ".", "keyphraseid", "=", "t4", ".", "keyphraseid", "where", "t4", ".", "keyphrasename", "=", "value"], "question": "Datasets with semantic parsing information", "question_toks": ["Datasets", "with", "semantic", "parsing", "information"], "guid": 4843}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the domain where \" H. V. Jagadish \" is focused .", "sql": "SELECT t2.name FROM domain_author AS t3 JOIN author AS t1 ON t3.aid  =  t1.aid JOIN DOMAIN AS t2 ON t2.did  =  t3.did WHERE t1.name  =  \"H. V. Jagadish\";", "example": {"db_id": "academic", "query": "SELECT t2.name FROM domain_author AS t3 JOIN author AS t1 ON t3.aid  =  t1.aid JOIN DOMAIN AS t2 ON t2.did  =  t3.did WHERE t1.name  =  \"H. V. Jagadish\";", "query_toks": ["SELECT", "t2.name", "FROM", "domain_author", "AS", "t3", "JOIN", "author", "AS", "t1", "ON", "t3.aid", "=", "t1.aid", "JOIN", "DOMAIN", "AS", "t2", "ON", "t2.did", "=", "t3.did", "WHERE", "t1.name", "=", "``", "H.", "V.", "Jagadish", "''", ";"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "domain_author", "as", "t3", "join", "author", "as", "t1", "on", "t3", ".", "aid", "=", "t1", ".", "aid", "join", "domain", "as", "t2", "on", "t2", ".", "did", "=", "t3", ".", "did", "where", "t1", ".", "name", "=", "value"], "question": "return me the domain where \" H. V. Jagadish \" is focused .", "question_toks": ["return", "me", "the", "domain", "where", "``", "H.", "V.", "Jagadish", "``", "is", "focused", "."], "guid": 4844}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | Who are the authors with the most published papers in syntactic parsing ?", "sql": "SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  \"syntactic parsing\" GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  \"syntactic parsing\" GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "t4.paperid", ")", ",", "t3.authorid", "FROM", "paperkeyphrase", "AS", "t1", "JOIN", "keyphrase", "AS", "t2", "ON", "t1.keyphraseid", "=", "t2.keyphraseid", "JOIN", "paper", "AS", "t4", "ON", "t4.paperid", "=", "t1.paperid", "JOIN", "writes", "AS", "t3", "ON", "t3.paperid", "=", "t4.paperid", "WHERE", "t2.keyphrasename", "=", "``", "syntactic", "parsing", "''", "GROUP", "BY", "t3.authorid", "ORDER", "BY", "COUNT", "(", "t4.paperid", ")", "DESC", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "t4", ".", "paperid", ")", ",", "t3", ".", "authorid", "from", "paperkeyphrase", "as", "t1", "join", "keyphrase", "as", "t2", "on", "t1", ".", "keyphraseid", "=", "t2", ".", "keyphraseid", "join", "paper", "as", "t4", "on", "t4", ".", "paperid", "=", "t1", ".", "paperid", "join", "writes", "as", "t3", "on", "t3", ".", "paperid", "=", "t4", ".", "paperid", "where", "t2", ".", "keyphrasename", "=", "value", "group", "by", "t3", ".", "authorid", "order", "by", "count", "(", "t4", ".", "paperid", ")", "desc"], "question": "Who are the authors with the most published papers in syntactic parsing ?", "question_toks": ["Who", "are", "the", "authors", "with", "the", "most", "published", "papers", "in", "syntactic", "parsing", "?"], "guid": 4845}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | papers published in eccv 2016 by ali farhadi", "sql": "SELECT DISTINCT t3.paperid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"ali farhadi\" AND t3.year  =  2016 AND t4.venuename  =  \"eccv\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"ali farhadi\" AND t3.year  =  2016 AND t4.venuename  =  \"eccv\";", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "venue", "AS", "t4", "JOIN", "paper", "AS", "t3", "ON", "t4.venueid", "=", "t3.venueid", "JOIN", "writes", "AS", "t2", "ON", "t2.paperid", "=", "t3.paperid", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "WHERE", "t1.authorname", "=", "``", "ali", "farhadi", "''", "AND", "t3.year", "=", "2016", "AND", "t4.venuename", "=", "``", "eccv", "''", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "venue", "as", "t4", "join", "paper", "as", "t3", "on", "t4", ".", "venueid", "=", "t3", ".", "venueid", "join", "writes", "as", "t2", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "where", "t1", ".", "authorname", "=", "value", "and", "t3", ".", "year", "=", "value", "and", "t4", ".", "venuename", "=", "value"], "question": "papers published in eccv 2016 by ali farhadi", "question_toks": ["papers", "published", "in", "eccv", "2016", "by", "ali", "farhadi"], "guid": 4846}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the papers after 2000 .", "sql": "SELECT title FROM publication WHERE YEAR  >  2000;", "example": {"db_id": "academic", "query": "SELECT title FROM publication WHERE YEAR  >  2000;", "query_toks": ["SELECT", "title", "FROM", "publication", "WHERE", "YEAR", ">", "2000", ";"], "query_toks_no_value": ["select", "title", "from", "publication", "where", "year", ">", "value"], "question": "return me the papers after 2000 .", "question_toks": ["return", "me", "the", "papers", "after", "2000", "."], "guid": 4847}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the number of the papers of \" H. V. Jagadish \" containing keyword \" User Study \" .", "sql": "SELECT COUNT ( DISTINCT t5.title ) FROM publication_keyword AS t3 JOIN keyword AS t1 ON t3.kid  =  t1.kid JOIN publication AS t5 ON t5.pid  =  t3.pid JOIN writes AS t4 ON t4.pid  =  t5.pid JOIN author AS t2 ON t4.aid  =  t2.aid WHERE t2.name  =  \"H. V. Jagadish\" AND t1.keyword  =  \"User Study\";", "example": {"db_id": "academic", "query": "SELECT COUNT ( DISTINCT t5.title ) FROM publication_keyword AS t3 JOIN keyword AS t1 ON t3.kid  =  t1.kid JOIN publication AS t5 ON t5.pid  =  t3.pid JOIN writes AS t4 ON t4.pid  =  t5.pid JOIN author AS t2 ON t4.aid  =  t2.aid WHERE t2.name  =  \"H. V. Jagadish\" AND t1.keyword  =  \"User Study\";", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "t5.title", ")", "FROM", "publication_keyword", "AS", "t3", "JOIN", "keyword", "AS", "t1", "ON", "t3.kid", "=", "t1.kid", "JOIN", "publication", "AS", "t5", "ON", "t5.pid", "=", "t3.pid", "JOIN", "writes", "AS", "t4", "ON", "t4.pid", "=", "t5.pid", "JOIN", "author", "AS", "t2", "ON", "t4.aid", "=", "t2.aid", "WHERE", "t2.name", "=", "``", "H.", "V.", "Jagadish", "''", "AND", "t1.keyword", "=", "``", "User", "Study", "''", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "t5", ".", "title", ")", "from", "publication_keyword", "as", "t3", "join", "keyword", "as", "t1", "on", "t3", ".", "kid", "=", "t1", ".", "kid", "join", "publication", "as", "t5", "on", "t5", ".", "pid", "=", "t3", ".", "pid", "join", "writes", "as", "t4", "on", "t4", ".", "pid", "=", "t5", ".", "pid", "join", "author", "as", "t2", "on", "t4", ".", "aid", "=", "t2", ".", "aid", "where", "t2", ".", "name", "=", "value", "and", "t1", ".", "keyword", "=", "value"], "question": "return me the number of the papers of \" H. V. Jagadish \" containing keyword \" User Study \" .", "question_toks": ["return", "me", "the", "number", "of", "the", "papers", "of", "``", "H.", "V.", "Jagadish", "``", "containing", "keyword", "``", "User", "Study", "``", "."], "guid": 4848}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | which papers in eccv 2014 use ImageNet ?", "sql": "SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.datasetname  =  \"ImageNet\" AND t3.year  =  2014 AND t4.venuename  =  \"eccv\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.datasetname  =  \"ImageNet\" AND t3.year  =  2014 AND t4.venuename  =  \"eccv\";", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "paperdataset", "AS", "t2", "JOIN", "dataset", "AS", "t1", "ON", "t2.datasetid", "=", "t1.datasetid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "JOIN", "venue", "AS", "t4", "ON", "t4.venueid", "=", "t3.venueid", "WHERE", "t1.datasetname", "=", "``", "ImageNet", "''", "AND", "t3.year", "=", "2014", "AND", "t4.venuename", "=", "``", "eccv", "''", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "paperdataset", "as", "t2", "join", "dataset", "as", "t1", "on", "t2", ".", "datasetid", "=", "t1", ".", "datasetid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "join", "venue", "as", "t4", "on", "t4", ".", "venueid", "=", "t3", ".", "venueid", "where", "t1", ".", "datasetname", "=", "value", "and", "t3", ".", "year", "=", "value", "and", "t4", ".", "venuename", "=", "value"], "question": "which papers in eccv 2014 use ImageNet ?", "question_toks": ["which", "papers", "in", "eccv", "2014", "use", "ImageNet", "?"], "guid": 4849}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | keyphrases used by Christof Dallermassl in 2000", "sql": "SELECT DISTINCT t2.keyphraseid FROM paper AS t3 JOIN paperkeyphrase AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christof Dallermassl\" AND t3.year  =  2000;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t2.keyphraseid FROM paper AS t3 JOIN paperkeyphrase AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christof Dallermassl\" AND t3.year  =  2000;", "query_toks": ["SELECT", "DISTINCT", "t2.keyphraseid", "FROM", "paper", "AS", "t3", "JOIN", "paperkeyphrase", "AS", "t2", "ON", "t3.paperid", "=", "t2.paperid", "JOIN", "writes", "AS", "t4", "ON", "t4.paperid", "=", "t3.paperid", "JOIN", "author", "AS", "t1", "ON", "t4.authorid", "=", "t1.authorid", "WHERE", "t1.authorname", "=", "``", "Christof", "Dallermassl", "''", "AND", "t3.year", "=", "2000", ";"], "query_toks_no_value": ["select", "distinct", "t2", ".", "keyphraseid", "from", "paper", "as", "t3", "join", "paperkeyphrase", "as", "t2", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "join", "writes", "as", "t4", "on", "t4", ".", "paperid", "=", "t3", ".", "paperid", "join", "author", "as", "t1", "on", "t4", ".", "authorid", "=", "t1", ".", "authorid", "where", "t1", ".", "authorname", "=", "value", "and", "t3", ".", "year", "=", "value"], "question": "keyphrases used by Christof Dallermassl in 2000", "question_toks": ["keyphrases", "used", "by", "Christof", "Dallermassl", "in", "2000"], "guid": 4850}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the homepage of \" University of Michigan \" .", "sql": "SELECT homepage FROM organization WHERE name  =  \"University of Michigan\";", "example": {"db_id": "academic", "query": "SELECT homepage FROM organization WHERE name  =  \"University of Michigan\";", "query_toks": ["SELECT", "homepage", "FROM", "organization", "WHERE", "name", "=", "``", "University", "of", "Michigan", "''", ";"], "query_toks_no_value": ["select", "homepage", "from", "organization", "where", "name", "=", "value"], "question": "return me the homepage of \" University of Michigan \" .", "question_toks": ["return", "me", "the", "homepage", "of", "``", "University", "of", "Michigan", "``", "."], "guid": 4851}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | how many papers by dan klein are cited by michael i. jordan", "sql": "SELECT DISTINCT COUNT ( t5.citingpaperid ) FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN cite AS t5 ON t3.paperid  =  t5.citedpaperid JOIN writes AS t4 ON t4.paperid  =  t5.citingpaperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"michael i. jordan\" AND t1.authorname  =  \"dan klein\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( t5.citingpaperid ) FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN cite AS t5 ON t3.paperid  =  t5.citedpaperid JOIN writes AS t4 ON t4.paperid  =  t5.citingpaperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"michael i. jordan\" AND t1.authorname  =  \"dan klein\";", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "t5.citingpaperid", ")", "FROM", "writes", "AS", "t3", "JOIN", "author", "AS", "t2", "ON", "t3.authorid", "=", "t2.authorid", "JOIN", "cite", "AS", "t5", "ON", "t3.paperid", "=", "t5.citedpaperid", "JOIN", "writes", "AS", "t4", "ON", "t4.paperid", "=", "t5.citingpaperid", "JOIN", "author", "AS", "t1", "ON", "t4.authorid", "=", "t1.authorid", "WHERE", "t2.authorname", "=", "``", "michael", "i.", "jordan", "''", "AND", "t1.authorname", "=", "``", "dan", "klein", "''", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "t5", ".", "citingpaperid", ")", "from", "writes", "as", "t3", "join", "author", "as", "t2", "on", "t3", ".", "authorid", "=", "t2", ".", "authorid", "join", "cite", "as", "t5", "on", "t3", ".", "paperid", "=", "t5", ".", "citedpaperid", "join", "writes", "as", "t4", "on", "t4", ".", "paperid", "=", "t5", ".", "citingpaperid", "join", "author", "as", "t1", "on", "t4", ".", "authorid", "=", "t1", ".", "authorid", "where", "t2", ".", "authorname", "=", "value", "and", "t1", ".", "authorname", "=", "value"], "question": "how many papers by dan klein are cited by michael i. jordan", "question_toks": ["how", "many", "papers", "by", "dan", "klein", "are", "cited", "by", "michael", "i.", "jordan"], "guid": 4852}}
{"text": "Scientists: SSN, Name; Projects: Code, Name, Hours; AssignedTo: Scientist, Project | What are the naems of all the projects, and how many scientists were assigned to each of them?", "sql": "SELECT count(*) ,  T1.name FROM projects AS T1 JOIN assignedto AS T2 ON T1.code  =  T2.project GROUP BY T1.name", "example": {"db_id": "scientist_1", "query": "SELECT count(*) ,  T1.name FROM projects AS T1 JOIN assignedto AS T2 ON T1.code  =  T2.project GROUP BY T1.name", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "T1.name", "FROM", "projects", "AS", "T1", "JOIN", "assignedto", "AS", "T2", "ON", "T1.code", "=", "T2.project", "GROUP", "BY", "T1.name"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "t1", ".", "name", "from", "projects", "as", "t1", "join", "assignedto", "as", "t2", "on", "t1", ".", "code", "=", "t2", ".", "project", "group", "by", "t1", ".", "name"], "question": "What are the naems of all the projects, and how many scientists were assigned to each of them?", "question_toks": ["What", "are", "the", "naems", "of", "all", "the", "projects", ",", "and", "how", "many", "scientists", "were", "assigned", "to", "each", "of", "them", "?"], "guid": 4853}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the references of \" Making database systems usable \" .", "sql": "SELECT reference_num FROM publication WHERE title  =  \"Making database systems usable\";", "example": {"db_id": "academic", "query": "SELECT reference_num FROM publication WHERE title  =  \"Making database systems usable\";", "query_toks": ["SELECT", "reference_num", "FROM", "publication", "WHERE", "title", "=", "``", "Making", "database", "systems", "usable", "''", ";"], "query_toks_no_value": ["select", "reference_num", "from", "publication", "where", "title", "=", "value"], "question": "return me the references of \" Making database systems usable \" .", "question_toks": ["return", "me", "the", "references", "of", "``", "Making", "database", "systems", "usable", "``", "."], "guid": 4854}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | What papers were written on question answering in 2016 ?", "sql": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"question answering\" AND t3.year  =  2016;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"question answering\" AND t3.year  =  2016;", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "WHERE", "t1.keyphrasename", "=", "``", "question", "answering", "''", "AND", "t3.year", "=", "2016", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "where", "t1", ".", "keyphrasename", "=", "value", "and", "t3", ".", "year", "=", "value"], "question": "What papers were written on question answering in 2016 ?", "question_toks": ["What", "papers", "were", "written", "on", "question", "answering", "in", "2016", "?"], "guid": 4855}}
{"text": "Document_Types: document_type_code, document_description; Documents: document_id, document_type_code, grant_id, sent_date, response_received_date, other_details; Grants: grant_id, organisation_id, grant_amount, grant_start_date, grant_end_date, other_details; Organisation_Types: organisation_type, organisation_type_description; Organisations: organisation_id, organisation_type, organisation_details; Project_Outcomes: project_id, outcome_code, outcome_details; Project_Staff: staff_id, project_id, role_code, date_from, date_to, other_details; Projects: project_id, organisation_id, project_details; Research_Outcomes: outcome_code, outcome_description; Research_Staff: staff_id, employer_organisation_id, staff_details | What is the type of the organization with the most research staff?", "sql": "SELECT T1.organisation_type FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_type ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "tracking_grants_for_research", "query": "SELECT T1.organisation_type FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_type ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.organisation_type", "FROM", "Organisations", "AS", "T1", "JOIN", "Research_Staff", "AS", "T2", "ON", "T1.organisation_id", "=", "T2.employer_organisation_id", "GROUP", "BY", "T1.organisation_type", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "organisation_type", "from", "organisations", "as", "t1", "join", "research_staff", "as", "t2", "on", "t1", ".", "organisation_id", "=", "t2", ".", "employer_organisation_id", "group", "by", "t1", ".", "organisation_type", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the type of the organization with the most research staff?", "question_toks": ["What", "is", "the", "type", "of", "the", "organization", "with", "the", "most", "research", "staff", "?"], "guid": 4856}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | what is the most cited paper of ohad shamir ?", "sql": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"ohad shamir\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"ohad shamir\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;", "query_toks": ["SELECT", "DISTINCT", "t4.citedpaperid", ",", "COUNT", "(", "t4.citedpaperid", ")", "FROM", "paper", "AS", "t3", "JOIN", "cite", "AS", "t4", "ON", "t3.paperid", "=", "t4.citedpaperid", "JOIN", "writes", "AS", "t2", "ON", "t2.paperid", "=", "t3.paperid", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "WHERE", "t1.authorname", "=", "``", "ohad", "shamir", "''", "GROUP", "BY", "t4.citedpaperid", "ORDER", "BY", "COUNT", "(", "t4.citedpaperid", ")", "DESC", ";"], "query_toks_no_value": ["select", "distinct", "t4", ".", "citedpaperid", ",", "count", "(", "t4", ".", "citedpaperid", ")", "from", "paper", "as", "t3", "join", "cite", "as", "t4", "on", "t3", ".", "paperid", "=", "t4", ".", "citedpaperid", "join", "writes", "as", "t2", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "where", "t1", ".", "authorname", "=", "value", "group", "by", "t4", ".", "citedpaperid", "order", "by", "count", "(", "t4", ".", "citedpaperid", ")", "desc"], "question": "what is the most cited paper of ohad shamir ?", "question_toks": ["what", "is", "the", "most", "cited", "paper", "of", "ohad", "shamir", "?"], "guid": 4857}}
{"text": "book_club: book_club_id, Year, Author_or_Editor, Book_Title, Publisher, Category, Result; movie: movie_id, Title, Year, Director, Budget_million, Gross_worldwide; culture_company: Company_name, Type, Incorporated_in, Group_Equity_Shareholding, book_club_id, movie_id | Show the movie titles and book titles for all companies in China.", "sql": "SELECT T1.title ,  T3.book_title FROM movie AS T1 JOIN culture_company AS T2 ON T1.movie_id  =  T2.movie_id JOIN book_club AS T3 ON T3.book_club_id  =  T2.book_club_id WHERE T2.incorporated_in  =  'China'", "example": {"db_id": "culture_company", "query": "SELECT T1.title ,  T3.book_title FROM movie AS T1 JOIN culture_company AS T2 ON T1.movie_id  =  T2.movie_id JOIN book_club AS T3 ON T3.book_club_id  =  T2.book_club_id WHERE T2.incorporated_in  =  'China'", "query_toks": ["SELECT", "T1.title", ",", "T3.book_title", "FROM", "movie", "AS", "T1", "JOIN", "culture_company", "AS", "T2", "ON", "T1.movie_id", "=", "T2.movie_id", "JOIN", "book_club", "AS", "T3", "ON", "T3.book_club_id", "=", "T2.book_club_id", "WHERE", "T2.incorporated_in", "=", "'China", "'"], "query_toks_no_value": ["select", "t1", ".", "title", ",", "t3", ".", "book_title", "from", "movie", "as", "t1", "join", "culture_company", "as", "t2", "on", "t1", ".", "movie_id", "=", "t2", ".", "movie_id", "join", "book_club", "as", "t3", "on", "t3", ".", "book_club_id", "=", "t2", ".", "book_club_id", "where", "t2", ".", "incorporated_in", "=", "value"], "question": "Show the movie titles and book titles for all companies in China.", "question_toks": ["Show", "the", "movie", "titles", "and", "book", "titles", "for", "all", "companies", "in", "China", "."], "guid": 4858}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | newest deep learning papers", "sql": "SELECT DISTINCT t3.paperid  ,  t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\" ORDER BY t3.year DESC;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid  ,  t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\" ORDER BY t3.year DESC;", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", ",", "t3.year", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "WHERE", "t1.keyphrasename", "=", "``", "deep", "learning", "''", "ORDER", "BY", "t3.year", "DESC", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", ",", "t3", ".", "year", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "where", "t1", ".", "keyphrasename", "=", "value", "order", "by", "t3", ".", "year", "desc"], "question": "newest deep learning papers", "question_toks": ["newest", "deep", "learning", "papers"], "guid": 4859}}
{"text": "workshop: Workshop_ID, Date, Venue, Name; submission: Submission_ID, Scores, Author, College; Acceptance: Submission_ID, Workshop_ID, Result | List the authors who do not have submission to any workshop.", "sql": "SELECT Author FROM submission WHERE Submission_ID NOT IN (SELECT Submission_ID FROM acceptance)", "example": {"db_id": "workshop_paper", "query": "SELECT Author FROM submission WHERE Submission_ID NOT IN (SELECT Submission_ID FROM acceptance)", "query_toks": ["SELECT", "Author", "FROM", "submission", "WHERE", "Submission_ID", "NOT", "IN", "(", "SELECT", "Submission_ID", "FROM", "acceptance", ")"], "query_toks_no_value": ["select", "author", "from", "submission", "where", "submission_id", "not", "in", "(", "select", "submission_id", "from", "acceptance", ")"], "question": "List the authors who do not have submission to any workshop.", "question_toks": ["List", "the", "authors", "who", "do", "not", "have", "submission", "to", "any", "workshop", "."], "guid": 4860}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | which papers used WebKB ?", "sql": "SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname  =  \"WebKB\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname  =  \"WebKB\";", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "paperdataset", "AS", "t2", "JOIN", "dataset", "AS", "t1", "ON", "t2.datasetid", "=", "t1.datasetid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "WHERE", "t1.datasetname", "=", "``", "WebKB", "''", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "paperdataset", "as", "t2", "join", "dataset", "as", "t1", "on", "t2", ".", "datasetid", "=", "t1", ".", "datasetid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "where", "t1", ".", "datasetname", "=", "value"], "question": "which papers used WebKB ?", "question_toks": ["which", "papers", "used", "WebKB", "?"], "guid": 4861}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the number of papers by \" H. V. Jagadish \" after 2000 .", "sql": "SELECT COUNT ( DISTINCT t3.title ) FROM writes AS t2 JOIN author AS t1 ON t2.aid  =  t1.aid JOIN publication AS t3 ON t2.pid  =  t3.pid WHERE t1.name  =  \"H. V. Jagadish\" AND t3.year  >  2000;", "example": {"db_id": "academic", "query": "SELECT COUNT ( DISTINCT t3.title ) FROM writes AS t2 JOIN author AS t1 ON t2.aid  =  t1.aid JOIN publication AS t3 ON t2.pid  =  t3.pid WHERE t1.name  =  \"H. V. Jagadish\" AND t3.year  >  2000;", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "t3.title", ")", "FROM", "writes", "AS", "t2", "JOIN", "author", "AS", "t1", "ON", "t2.aid", "=", "t1.aid", "JOIN", "publication", "AS", "t3", "ON", "t2.pid", "=", "t3.pid", "WHERE", "t1.name", "=", "``", "H.", "V.", "Jagadish", "''", "AND", "t3.year", ">", "2000", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "t3", ".", "title", ")", "from", "writes", "as", "t2", "join", "author", "as", "t1", "on", "t2", ".", "aid", "=", "t1", ".", "aid", "join", "publication", "as", "t3", "on", "t2", ".", "pid", "=", "t3", ".", "pid", "where", "t1", ".", "name", "=", "value", "and", "t3", ".", "year", ">", "value"], "question": "return me the number of papers by \" H. V. Jagadish \" after 2000 .", "question_toks": ["return", "me", "the", "number", "of", "papers", "by", "``", "H.", "V.", "Jagadish", "``", "after", "2000", "."], "guid": 4862}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | How many authors published at sigcse in 2010 ?", "sql": "SELECT DISTINCT COUNT ( t2.paperid ) FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2010 AND t3.venuename  =  \"sigcse\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( t2.paperid ) FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2010 AND t3.venuename  =  \"sigcse\";", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "t2.paperid", ")", "FROM", "venue", "AS", "t3", "JOIN", "paper", "AS", "t2", "ON", "t3.venueid", "=", "t2.venueid", "JOIN", "writes", "AS", "t1", "ON", "t1.paperid", "=", "t2.paperid", "WHERE", "t2.year", "=", "2010", "AND", "t3.venuename", "=", "``", "sigcse", "''", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "t2", ".", "paperid", ")", "from", "venue", "as", "t3", "join", "paper", "as", "t2", "on", "t3", ".", "venueid", "=", "t2", ".", "venueid", "join", "writes", "as", "t1", "on", "t1", ".", "paperid", "=", "t2", ".", "paperid", "where", "t2", ".", "year", "=", "value", "and", "t3", ".", "venuename", "=", "value"], "question": "How many authors published at sigcse in 2010 ?", "question_toks": ["How", "many", "authors", "published", "at", "sigcse", "in", "2010", "?"], "guid": 4863}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | papers citing Daniel Jurafsky", "sql": "SELECT DISTINCT t3.paperid FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citingpaperid JOIN writes AS t2 ON t2.paperid  =  t4.citedpaperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Daniel Jurafsky\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citingpaperid JOIN writes AS t2 ON t2.paperid  =  t4.citedpaperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Daniel Jurafsky\";", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "paper", "AS", "t3", "JOIN", "cite", "AS", "t4", "ON", "t3.paperid", "=", "t4.citingpaperid", "JOIN", "writes", "AS", "t2", "ON", "t2.paperid", "=", "t4.citedpaperid", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "WHERE", "t1.authorname", "=", "``", "Daniel", "Jurafsky", "''", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "paper", "as", "t3", "join", "cite", "as", "t4", "on", "t3", ".", "paperid", "=", "t4", ".", "citingpaperid", "join", "writes", "as", "t2", "on", "t2", ".", "paperid", "=", "t4", ".", "citedpaperid", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "where", "t1", ".", "authorname", "=", "value"], "question": "papers citing Daniel Jurafsky", "question_toks": ["papers", "citing", "Daniel", "Jurafsky"], "guid": 4864}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | citations for Daniel Jurafsky", "sql": "SELECT DISTINCT t3.paperid FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citingpaperid JOIN writes AS t2 ON t2.paperid  =  t4.citedpaperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Daniel Jurafsky\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citingpaperid JOIN writes AS t2 ON t2.paperid  =  t4.citedpaperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Daniel Jurafsky\";", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "paper", "AS", "t3", "JOIN", "cite", "AS", "t4", "ON", "t3.paperid", "=", "t4.citingpaperid", "JOIN", "writes", "AS", "t2", "ON", "t2.paperid", "=", "t4.citedpaperid", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "WHERE", "t1.authorname", "=", "``", "Daniel", "Jurafsky", "''", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "paper", "as", "t3", "join", "cite", "as", "t4", "on", "t3", ".", "paperid", "=", "t4", ".", "citingpaperid", "join", "writes", "as", "t2", "on", "t2", ".", "paperid", "=", "t4", ".", "citedpaperid", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "where", "t1", ".", "authorname", "=", "value"], "question": "citations for Daniel Jurafsky", "question_toks": ["citations", "for", "Daniel", "Jurafsky"], "guid": 4865}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | papers using WebKB", "sql": "SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname  =  \"WebKB\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname  =  \"WebKB\";", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "paperdataset", "AS", "t2", "JOIN", "dataset", "AS", "t1", "ON", "t2.datasetid", "=", "t1.datasetid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "WHERE", "t1.datasetname", "=", "``", "WebKB", "''", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "paperdataset", "as", "t2", "join", "dataset", "as", "t1", "on", "t2", ".", "datasetid", "=", "t1", ".", "datasetid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "where", "t1", ".", "datasetname", "=", "value"], "question": "papers using WebKB", "question_toks": ["papers", "using", "WebKB"], "guid": 4866}}
{"text": "journal: Journal_ID, Date, Theme, Sales; editor: Editor_ID, Name, Age; journal_committee: Editor_ID, Journal_ID, Work_Type | Show the names of editors of age either 24 or 25.", "sql": "SELECT Name FROM editor WHERE Age  =  24 OR Age  =  25", "example": {"db_id": "journal_committee", "query": "SELECT Name FROM editor WHERE Age  =  24 OR Age  =  25", "query_toks": ["SELECT", "Name", "FROM", "editor", "WHERE", "Age", "=", "24", "OR", "Age", "=", "25"], "query_toks_no_value": ["select", "name", "from", "editor", "where", "age", "=", "value", "or", "age", "=", "value"], "question": "Show the names of editors of age either 24 or 25.", "question_toks": ["Show", "the", "names", "of", "editors", "of", "age", "either", "24", "or", "25", "."], "guid": 4867}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | Who cites Daniel A Reed most ?", "sql": "SELECT DISTINCT COUNT ( t4.citingpaperid )  ,  t3.authorid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN cite AS t4 ON t2.paperid  =  t4.citedpaperid JOIN writes AS t3 ON t3.paperid  =  t4.citingpaperid WHERE t1.authorname  =  \"Daniel A Reed\" GROUP BY t3.authorid ORDER BY COUNT ( t4.citingpaperid ) DESC;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( t4.citingpaperid )  ,  t3.authorid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN cite AS t4 ON t2.paperid  =  t4.citedpaperid JOIN writes AS t3 ON t3.paperid  =  t4.citingpaperid WHERE t1.authorname  =  \"Daniel A Reed\" GROUP BY t3.authorid ORDER BY COUNT ( t4.citingpaperid ) DESC;", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "t4.citingpaperid", ")", ",", "t3.authorid", "FROM", "writes", "AS", "t2", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "JOIN", "cite", "AS", "t4", "ON", "t2.paperid", "=", "t4.citedpaperid", "JOIN", "writes", "AS", "t3", "ON", "t3.paperid", "=", "t4.citingpaperid", "WHERE", "t1.authorname", "=", "``", "Daniel", "A", "Reed", "''", "GROUP", "BY", "t3.authorid", "ORDER", "BY", "COUNT", "(", "t4.citingpaperid", ")", "DESC", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "t4", ".", "citingpaperid", ")", ",", "t3", ".", "authorid", "from", "writes", "as", "t2", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "join", "cite", "as", "t4", "on", "t2", ".", "paperid", "=", "t4", ".", "citedpaperid", "join", "writes", "as", "t3", "on", "t3", ".", "paperid", "=", "t4", ".", "citingpaperid", "where", "t1", ".", "authorname", "=", "value", "group", "by", "t3", ".", "authorid", "order", "by", "count", "(", "t4", ".", "citingpaperid", ")", "desc"], "question": "Who cites Daniel A Reed most ?", "question_toks": ["Who", "cites", "Daniel", "A", "Reed", "most", "?"], "guid": 4868}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | What papers has brian curless written about convolution ?", "sql": "SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";", "query_toks": ["SELECT", "DISTINCT", "t1.authorid", ",", "t3.paperid", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t5", "ON", "t2.keyphraseid", "=", "t5.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "JOIN", "writes", "AS", "t4", "ON", "t4.paperid", "=", "t3.paperid", "JOIN", "author", "AS", "t1", "ON", "t4.authorid", "=", "t1.authorid", "WHERE", "t1.authorname", "=", "``", "brian", "curless", "''", "AND", "t5.keyphrasename", "=", "``", "convolution", "''", ";"], "query_toks_no_value": ["select", "distinct", "t1", ".", "authorid", ",", "t3", ".", "paperid", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t5", "on", "t2", ".", "keyphraseid", "=", "t5", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "join", "writes", "as", "t4", "on", "t4", ".", "paperid", "=", "t3", ".", "paperid", "join", "author", "as", "t1", "on", "t4", ".", "authorid", "=", "t1", ".", "authorid", "where", "t1", ".", "authorname", "=", "value", "and", "t5", ".", "keyphrasename", "=", "value"], "question": "What papers has brian curless written about convolution ?", "question_toks": ["What", "papers", "has", "brian", "curless", "written", "about", "convolution", "?"], "guid": 4869}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | what papers do parsing papers typically cite ?", "sql": "SELECT DISTINCT t4.citedpaperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citingpaperid WHERE t1.keyphrasename  =  \"parsing\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t4.citedpaperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citingpaperid WHERE t1.keyphrasename  =  \"parsing\";", "query_toks": ["SELECT", "DISTINCT", "t4.citedpaperid", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "JOIN", "cite", "AS", "t4", "ON", "t3.paperid", "=", "t4.citingpaperid", "WHERE", "t1.keyphrasename", "=", "``", "parsing", "''", ";"], "query_toks_no_value": ["select", "distinct", "t4", ".", "citedpaperid", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "join", "cite", "as", "t4", "on", "t3", ".", "paperid", "=", "t4", ".", "citingpaperid", "where", "t1", ".", "keyphrasename", "=", "value"], "question": "what papers do parsing papers typically cite ?", "question_toks": ["what", "papers", "do", "parsing", "papers", "typically", "cite", "?"], "guid": 4870}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the total citations of papers in PVLDB before 2005 .", "sql": "SELECT SUM ( t2.citation_num ) FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\" AND t2.year  <  2005;", "example": {"db_id": "academic", "query": "SELECT SUM ( t2.citation_num ) FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\" AND t2.year  <  2005;", "query_toks": ["SELECT", "SUM", "(", "t2.citation_num", ")", "FROM", "publication", "AS", "t2", "JOIN", "journal", "AS", "t1", "ON", "t2.jid", "=", "t1.jid", "WHERE", "t1.name", "=", "``", "PVLDB", "''", "AND", "t2.year", "<", "2005", ";"], "query_toks_no_value": ["select", "sum", "(", "t2", ".", "citation_num", ")", "from", "publication", "as", "t2", "join", "journal", "as", "t1", "on", "t2", ".", "jid", "=", "t1", ".", "jid", "where", "t1", ".", "name", "=", "value", "and", "t2", ".", "year", "<", "value"], "question": "return me the total citations of papers in PVLDB before 2005 .", "question_toks": ["return", "me", "the", "total", "citations", "of", "papers", "in", "PVLDB", "before", "2005", "."], "guid": 4871}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | who does oren etzioni cite", "sql": "SELECT DISTINCT t3.paperid FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citingpaperid JOIN writes AS t2 ON t2.paperid  =  t4.citedpaperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"oren etzioni\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citingpaperid JOIN writes AS t2 ON t2.paperid  =  t4.citedpaperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"oren etzioni\";", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "paper", "AS", "t3", "JOIN", "cite", "AS", "t4", "ON", "t3.paperid", "=", "t4.citingpaperid", "JOIN", "writes", "AS", "t2", "ON", "t2.paperid", "=", "t4.citedpaperid", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "WHERE", "t1.authorname", "=", "``", "oren", "etzioni", "''", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "paper", "as", "t3", "join", "cite", "as", "t4", "on", "t3", ".", "paperid", "=", "t4", ".", "citingpaperid", "join", "writes", "as", "t2", "on", "t2", ".", "paperid", "=", "t4", ".", "citedpaperid", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "where", "t1", ".", "authorname", "=", "value"], "question": "who does oren etzioni cite", "question_toks": ["who", "does", "oren", "etzioni", "cite"], "guid": 4872}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | hot topics at NIPS 2015", "sql": "SELECT DISTINCT COUNT ( t3.paperid )  ,  t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t3.year  =  2015 AND t4.venuename  =  \"NIPS\" GROUP BY t1.keyphraseid ORDER BY COUNT ( t3.paperid ) DESC;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( t3.paperid )  ,  t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t3.year  =  2015 AND t4.venuename  =  \"NIPS\" GROUP BY t1.keyphraseid ORDER BY COUNT ( t3.paperid ) DESC;", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "t3.paperid", ")", ",", "t1.keyphraseid", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "JOIN", "venue", "AS", "t4", "ON", "t4.venueid", "=", "t3.venueid", "WHERE", "t3.year", "=", "2015", "AND", "t4.venuename", "=", "``", "NIPS", "''", "GROUP", "BY", "t1.keyphraseid", "ORDER", "BY", "COUNT", "(", "t3.paperid", ")", "DESC", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "t3", ".", "paperid", ")", ",", "t1", ".", "keyphraseid", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "join", "venue", "as", "t4", "on", "t4", ".", "venueid", "=", "t3", ".", "venueid", "where", "t3", ".", "year", "=", "value", "and", "t4", ".", "venuename", "=", "value", "group", "by", "t1", ".", "keyphraseid", "order", "by", "count", "(", "t3", ".", "paperid", ")", "desc"], "question": "hot topics at NIPS 2015", "question_toks": ["hot", "topics", "at", "NIPS", "2015"], "guid": 4873}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | What papers has sharon goldwater written ?", "sql": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";", "query_toks": ["SELECT", "DISTINCT", "t2.paperid", "FROM", "writes", "AS", "t2", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "WHERE", "t1.authorname", "=", "``", "sharon", "goldwater", "''", ";"], "query_toks_no_value": ["select", "distinct", "t2", ".", "paperid", "from", "writes", "as", "t2", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "where", "t1", ".", "authorname", "=", "value"], "question": "What papers has sharon goldwater written ?", "question_toks": ["What", "papers", "has", "sharon", "goldwater", "written", "?"], "guid": 4874}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | papers for Question Answering", "sql": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "WHERE", "t1.keyphrasename", "=", "``", "Question", "Answering", "''", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "where", "t1", ".", "keyphrasename", "=", "value"], "question": "papers for Question Answering", "question_toks": ["papers", "for", "Question", "Answering"], "guid": 4875}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the paper in Databases area with more than 200 citations .", "sql": "SELECT t3.title FROM DOMAIN AS t2 JOIN domain_publication AS t1 ON t2.did  =  t1.did JOIN publication AS t3 ON t3.pid  =  t1.pid WHERE t2.name  =  \"Databases\" AND t3.citation_num  >  200;", "example": {"db_id": "academic", "query": "SELECT t3.title FROM DOMAIN AS t2 JOIN domain_publication AS t1 ON t2.did  =  t1.did JOIN publication AS t3 ON t3.pid  =  t1.pid WHERE t2.name  =  \"Databases\" AND t3.citation_num  >  200;", "query_toks": ["SELECT", "t3.title", "FROM", "DOMAIN", "AS", "t2", "JOIN", "domain_publication", "AS", "t1", "ON", "t2.did", "=", "t1.did", "JOIN", "publication", "AS", "t3", "ON", "t3.pid", "=", "t1.pid", "WHERE", "t2.name", "=", "``", "Databases", "''", "AND", "t3.citation_num", ">", "200", ";"], "query_toks_no_value": ["select", "t3", ".", "title", "from", "domain", "as", "t2", "join", "domain_publication", "as", "t1", "on", "t2", ".", "did", "=", "t1", ".", "did", "join", "publication", "as", "t3", "on", "t3", ".", "pid", "=", "t1", ".", "pid", "where", "t2", ".", "name", "=", "value", "and", "t3", ".", "citation_num", ">", "value"], "question": "return me the paper in Databases area with more than 200 citations .", "question_toks": ["return", "me", "the", "paper", "in", "Databases", "area", "with", "more", "than", "200", "citations", "."], "guid": 4876}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | datasets in semantic parsing papers", "sql": "SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  \"semantic parsing\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  \"semantic parsing\";", "query_toks": ["SELECT", "DISTINCT", "t2.datasetid", "FROM", "paperdataset", "AS", "t3", "JOIN", "dataset", "AS", "t2", "ON", "t3.datasetid", "=", "t2.datasetid", "JOIN", "paperkeyphrase", "AS", "t1", "ON", "t1.paperid", "=", "t3.paperid", "JOIN", "keyphrase", "AS", "t4", "ON", "t1.keyphraseid", "=", "t4.keyphraseid", "WHERE", "t4.keyphrasename", "=", "``", "semantic", "parsing", "''", ";"], "query_toks_no_value": ["select", "distinct", "t2", ".", "datasetid", "from", "paperdataset", "as", "t3", "join", "dataset", "as", "t2", "on", "t3", ".", "datasetid", "=", "t2", ".", "datasetid", "join", "paperkeyphrase", "as", "t1", "on", "t1", ".", "paperid", "=", "t3", ".", "paperid", "join", "keyphrase", "as", "t4", "on", "t1", ".", "keyphraseid", "=", "t4", ".", "keyphraseid", "where", "t4", ".", "keyphrasename", "=", "value"], "question": "datasets in semantic parsing papers", "question_toks": ["datasets", "in", "semantic", "parsing", "papers"], "guid": 4877}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | When did Michael Stonebraker publish his GIS Database paper ?", "sql": "SELECT DISTINCT t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"Michael Stonebraker\" AND t5.keyphrasename  =  \"GIS Database\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"Michael Stonebraker\" AND t5.keyphrasename  =  \"GIS Database\";", "query_toks": ["SELECT", "DISTINCT", "t3.year", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t5", "ON", "t2.keyphraseid", "=", "t5.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "JOIN", "writes", "AS", "t4", "ON", "t4.paperid", "=", "t3.paperid", "JOIN", "author", "AS", "t1", "ON", "t4.authorid", "=", "t1.authorid", "WHERE", "t1.authorname", "=", "``", "Michael", "Stonebraker", "''", "AND", "t5.keyphrasename", "=", "``", "GIS", "Database", "''", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "year", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t5", "on", "t2", ".", "keyphraseid", "=", "t5", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "join", "writes", "as", "t4", "on", "t4", ".", "paperid", "=", "t3", ".", "paperid", "join", "author", "as", "t1", "on", "t4", ".", "authorid", "=", "t1", ".", "authorid", "where", "t1", ".", "authorname", "=", "value", "and", "t5", ".", "keyphrasename", "=", "value"], "question": "When did Michael Stonebraker publish his GIS Database paper ?", "question_toks": ["When", "did", "Michael", "Stonebraker", "publish", "his", "GIS", "Database", "paper", "?"], "guid": 4878}}
{"text": "Document_Types: document_type_code, document_description; Documents: document_id, document_type_code, grant_id, sent_date, response_received_date, other_details; Grants: grant_id, organisation_id, grant_amount, grant_start_date, grant_end_date, other_details; Organisation_Types: organisation_type, organisation_type_description; Organisations: organisation_id, organisation_type, organisation_details; Project_Outcomes: project_id, outcome_code, outcome_details; Project_Staff: staff_id, project_id, role_code, date_from, date_to, other_details; Projects: project_id, organisation_id, project_details; Research_Outcomes: outcome_code, outcome_description; Research_Staff: staff_id, employer_organisation_id, staff_details | For each project id, how many tasks are there?", "sql": "SELECT count(*) ,  T1.project_details FROM Projects AS T1 JOIN Tasks AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id", "example": {"db_id": "tracking_grants_for_research", "query": "SELECT count(*) ,  T1.project_details FROM Projects AS T1 JOIN Tasks AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "T1.project_details", "FROM", "Projects", "AS", "T1", "JOIN", "Tasks", "AS", "T2", "ON", "T1.project_id", "=", "T2.project_id", "GROUP", "BY", "T1.project_id"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "t1", ".", "project_details", "from", "projects", "as", "t1", "join", "tasks", "as", "t2", "on", "t1", ".", "project_id", "=", "t2", ".", "project_id", "group", "by", "t1", ".", "project_id"], "question": "For each project id, how many tasks are there?", "question_toks": ["For", "each", "project", "id", ",", "how", "many", "tasks", "are", "there", "?"], "guid": 4879}}
{"text": "Scientists: SSN, Name; Projects: Code, Name, Hours; AssignedTo: Scientist, Project | List the name of all projects that are operated longer than the average working hours of all projects.", "sql": "SELECT name FROM projects WHERE hours  >  (SELECT avg(hours) FROM projects)", "example": {"db_id": "scientist_1", "query": "SELECT name FROM projects WHERE hours  >  (SELECT avg(hours) FROM projects)", "query_toks": ["SELECT", "name", "FROM", "projects", "WHERE", "hours", ">", "(", "SELECT", "avg", "(", "hours", ")", "FROM", "projects", ")"], "query_toks_no_value": ["select", "name", "from", "projects", "where", "hours", ">", "(", "select", "avg", "(", "hours", ")", "from", "projects", ")"], "question": "List the name of all projects that are operated longer than the average working hours of all projects.", "question_toks": ["List", "the", "name", "of", "all", "projects", "that", "are", "operated", "longer", "than", "the", "average", "working", "hours", "of", "all", "projects", "."], "guid": 4880}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | What is the paper about Question Answering ?", "sql": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "WHERE", "t1.keyphrasename", "=", "``", "Question", "Answering", "''", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "where", "t1", ".", "keyphrasename", "=", "value"], "question": "What is the paper about Question Answering ?", "question_toks": ["What", "is", "the", "paper", "about", "Question", "Answering", "?"], "guid": 4881}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the homepage of PVLDB .", "sql": "SELECT homepage FROM journal WHERE name  =  \"PVLDB\";", "example": {"db_id": "academic", "query": "SELECT homepage FROM journal WHERE name  =  \"PVLDB\";", "query_toks": ["SELECT", "homepage", "FROM", "journal", "WHERE", "name", "=", "``", "PVLDB", "''", ";"], "query_toks_no_value": ["select", "homepage", "from", "journal", "where", "name", "=", "value"], "question": "return me the homepage of PVLDB .", "question_toks": ["return", "me", "the", "homepage", "of", "PVLDB", "."], "guid": 4882}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | Parsing papers from acl 2012", "sql": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Parsing\" AND t3.year  =  2012 AND t4.venuename  =  \"acl\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Parsing\" AND t3.year  =  2012 AND t4.venuename  =  \"acl\";", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "JOIN", "venue", "AS", "t4", "ON", "t4.venueid", "=", "t3.venueid", "WHERE", "t1.keyphrasename", "=", "``", "Parsing", "''", "AND", "t3.year", "=", "2012", "AND", "t4.venuename", "=", "``", "acl", "''", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "join", "venue", "as", "t4", "on", "t4", ".", "venueid", "=", "t3", ".", "venueid", "where", "t1", ".", "keyphrasename", "=", "value", "and", "t3", ".", "year", "=", "value", "and", "t4", ".", "venuename", "=", "value"], "question": "Parsing papers from acl 2012", "question_toks": ["Parsing", "papers", "from", "acl", "2012"], "guid": 4883}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | What are the latest papers by oren etzioni ?", "sql": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"oren etzioni\" ORDER BY t3.year DESC;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"oren etzioni\" ORDER BY t3.year DESC;", "query_toks": ["SELECT", "DISTINCT", "t2.paperid", "FROM", "writes", "AS", "t2", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "JOIN", "paper", "AS", "t3", "ON", "t2.paperid", "=", "t3.paperid", "WHERE", "t1.authorname", "=", "``", "oren", "etzioni", "''", "ORDER", "BY", "t3.year", "DESC", ";"], "query_toks_no_value": ["select", "distinct", "t2", ".", "paperid", "from", "writes", "as", "t2", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "join", "paper", "as", "t3", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "where", "t1", ".", "authorname", "=", "value", "order", "by", "t3", ".", "year", "desc"], "question": "What are the latest papers by oren etzioni ?", "question_toks": ["What", "are", "the", "latest", "papers", "by", "oren", "etzioni", "?"], "guid": 4884}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | give me the keywords used by Luke Zettlemoyer", "sql": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";", "query_toks": ["SELECT", "DISTINCT", "t1.keyphraseid", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "JOIN", "writes", "AS", "t4", "ON", "t4.paperid", "=", "t3.paperid", "JOIN", "author", "AS", "t5", "ON", "t4.authorid", "=", "t5.authorid", "WHERE", "t5.authorname", "=", "``", "Luke", "Zettlemoyer", "''", ";"], "query_toks_no_value": ["select", "distinct", "t1", ".", "keyphraseid", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "join", "writes", "as", "t4", "on", "t4", ".", "paperid", "=", "t3", ".", "paperid", "join", "author", "as", "t5", "on", "t4", ".", "authorid", "=", "t5", ".", "authorid", "where", "t5", ".", "authorname", "=", "value"], "question": "give me the keywords used by Luke Zettlemoyer", "question_toks": ["give", "me", "the", "keywords", "used", "by", "Luke", "Zettlemoyer"], "guid": 4885}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | Liwen Xiong 's papers in 2015", "sql": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Liwen Xiong\" AND t3.year  =  2015;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Liwen Xiong\" AND t3.year  =  2015;", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "writes", "AS", "t2", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "JOIN", "paper", "AS", "t3", "ON", "t2.paperid", "=", "t3.paperid", "WHERE", "t1.authorname", "=", "``", "Liwen", "Xiong", "''", "AND", "t3.year", "=", "2015", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "writes", "as", "t2", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "join", "paper", "as", "t3", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "where", "t1", ".", "authorname", "=", "value", "and", "t3", ".", "year", "=", "value"], "question": "Liwen Xiong 's papers in 2015", "question_toks": ["Liwen", "Xiong", "'s", "papers", "in", "2015"], "guid": 4886}}
{"text": "book_club: book_club_id, Year, Author_or_Editor, Book_Title, Publisher, Category, Result; movie: movie_id, Title, Year, Director, Budget_million, Gross_worldwide; culture_company: Company_name, Type, Incorporated_in, Group_Equity_Shareholding, book_club_id, movie_id | show the titles, and authors or editors for all books made after the year 1989.", "sql": "SELECT book_title ,  author_or_editor FROM book_club WHERE YEAR  >  1989", "example": {"db_id": "culture_company", "query": "SELECT book_title ,  author_or_editor FROM book_club WHERE YEAR  >  1989", "query_toks": ["SELECT", "book_title", ",", "author_or_editor", "FROM", "book_club", "WHERE", "YEAR", ">", "1989"], "query_toks_no_value": ["select", "book_title", ",", "author_or_editor", "from", "book_club", "where", "year", ">", "value"], "question": "show the titles, and authors or editors for all books made after the year 1989.", "question_toks": ["show", "the", "titles", ",", "and", "authors", "or", "editors", "for", "all", "books", "made", "after", "the", "year", "1989", "."], "guid": 4887}}
{"text": "Document_Types: document_type_code, document_description; Documents: document_id, document_type_code, grant_id, sent_date, response_received_date, other_details; Grants: grant_id, organisation_id, grant_amount, grant_start_date, grant_end_date, other_details; Organisation_Types: organisation_type, organisation_type_description; Organisations: organisation_id, organisation_type, organisation_details; Project_Outcomes: project_id, outcome_code, outcome_details; Project_Staff: staff_id, project_id, role_code, date_from, date_to, other_details; Projects: project_id, organisation_id, project_details; Research_Outcomes: outcome_code, outcome_description; Research_Staff: staff_id, employer_organisation_id, staff_details | How many tasks does each project have? List the task count and the project detail.", "sql": "SELECT count(*) ,  T1.project_details FROM Projects AS T1 JOIN Tasks AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id", "example": {"db_id": "tracking_grants_for_research", "query": "SELECT count(*) ,  T1.project_details FROM Projects AS T1 JOIN Tasks AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "T1.project_details", "FROM", "Projects", "AS", "T1", "JOIN", "Tasks", "AS", "T2", "ON", "T1.project_id", "=", "T2.project_id", "GROUP", "BY", "T1.project_id"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "t1", ".", "project_details", "from", "projects", "as", "t1", "join", "tasks", "as", "t2", "on", "t1", ".", "project_id", "=", "t2", ".", "project_id", "group", "by", "t1", ".", "project_id"], "question": "How many tasks does each project have? List the task count and the project detail.", "question_toks": ["How", "many", "tasks", "does", "each", "project", "have", "?", "List", "the", "task", "count", "and", "the", "project", "detail", "."], "guid": 4888}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the number of citations of \" Making database systems usable \" .", "sql": "SELECT citation_num FROM publication WHERE title  =  \"Making database systems usable\";", "example": {"db_id": "academic", "query": "SELECT citation_num FROM publication WHERE title  =  \"Making database systems usable\";", "query_toks": ["SELECT", "citation_num", "FROM", "publication", "WHERE", "title", "=", "``", "Making", "database", "systems", "usable", "''", ";"], "query_toks_no_value": ["select", "citation_num", "from", "publication", "where", "title", "=", "value"], "question": "return me the number of citations of \" Making database systems usable \" .", "question_toks": ["return", "me", "the", "number", "of", "citations", "of", "``", "Making", "database", "systems", "usable", "``", "."], "guid": 4889}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | How many papers does jamie callan publish each year ?", "sql": "SELECT DISTINCT COUNT ( t3.paperid )  ,  t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"jamie callan\" GROUP BY t3.year;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( t3.paperid )  ,  t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"jamie callan\" GROUP BY t3.year;", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "t3.paperid", ")", ",", "t3.year", "FROM", "writes", "AS", "t2", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "JOIN", "paper", "AS", "t3", "ON", "t2.paperid", "=", "t3.paperid", "WHERE", "t1.authorname", "=", "``", "jamie", "callan", "''", "GROUP", "BY", "t3.year", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "t3", ".", "paperid", ")", ",", "t3", ".", "year", "from", "writes", "as", "t2", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "join", "paper", "as", "t3", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "where", "t1", ".", "authorname", "=", "value", "group", "by", "t3", ".", "year"], "question": "How many papers does jamie callan publish each year ?", "question_toks": ["How", "many", "papers", "does", "jamie", "callan", "publish", "each", "year", "?"], "guid": 4890}}
{"text": "Inst: instID, name, country; Authors: authID, lname, fname; Papers: paperID, title; Authorship: authID, instID, paperID, authOrder | How many papers are \"Atsushi Ohori\" the author of?", "sql": "SELECT count(*) FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  \"Atsushi\" AND t1.lname  =  \"Ohori\"", "example": {"db_id": "icfp_1", "query": "SELECT count(*) FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  \"Atsushi\" AND t1.lname  =  \"Ohori\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "authors", "AS", "t1", "JOIN", "authorship", "AS", "t2", "ON", "t1.authid", "=", "t2.authid", "JOIN", "papers", "AS", "t3", "ON", "t2.paperid", "=", "t3.paperid", "WHERE", "t1.fname", "=", "``", "Atsushi", "''", "AND", "t1.lname", "=", "``", "Ohori", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "authors", "as", "t1", "join", "authorship", "as", "t2", "on", "t1", ".", "authid", "=", "t2", ".", "authid", "join", "papers", "as", "t3", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "where", "t1", ".", "fname", "=", "value", "and", "t1", ".", "lname", "=", "value"], "question": "How many papers are \"Atsushi Ohori\" the author of?", "question_toks": ["How", "many", "papers", "are", "``", "Atsushi", "Ohori", "''", "the", "author", "of", "?"], "guid": 4891}}
{"text": "book_club: book_club_id, Year, Author_or_Editor, Book_Title, Publisher, Category, Result; movie: movie_id, Title, Year, Director, Budget_million, Gross_worldwide; culture_company: Company_name, Type, Incorporated_in, Group_Equity_Shareholding, book_club_id, movie_id | How many books fall into each category?", "sql": "SELECT category ,  count(*) FROM book_club GROUP BY category", "example": {"db_id": "culture_company", "query": "SELECT category ,  count(*) FROM book_club GROUP BY category", "query_toks": ["SELECT", "category", ",", "count", "(", "*", ")", "FROM", "book_club", "GROUP", "BY", "category"], "query_toks_no_value": ["select", "category", ",", "count", "(", "*", ")", "from", "book_club", "group", "by", "category"], "question": "How many books fall into each category?", "question_toks": ["How", "many", "books", "fall", "into", "each", "category", "?"], "guid": 4892}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | what papers are published in pldi 2015", "sql": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"pldi\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"pldi\";", "query_toks": ["SELECT", "DISTINCT", "t1.paperid", "FROM", "venue", "AS", "t2", "JOIN", "paper", "AS", "t1", "ON", "t2.venueid", "=", "t1.venueid", "WHERE", "t1.year", "=", "2015", "AND", "t2.venuename", "=", "``", "pldi", "''", ";"], "query_toks_no_value": ["select", "distinct", "t1", ".", "paperid", "from", "venue", "as", "t2", "join", "paper", "as", "t1", "on", "t2", ".", "venueid", "=", "t1", ".", "venueid", "where", "t1", ".", "year", "=", "value", "and", "t2", ".", "venuename", "=", "value"], "question": "what papers are published in pldi 2015", "question_toks": ["what", "papers", "are", "published", "in", "pldi", "2015"], "guid": 4893}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | list papers that used Question Answering", "sql": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "WHERE", "t1.keyphrasename", "=", "``", "Question", "Answering", "''", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "where", "t1", ".", "keyphrasename", "=", "value"], "question": "list papers that used Question Answering", "question_toks": ["list", "papers", "that", "used", "Question", "Answering"], "guid": 4894}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | What papers have been written by both Peter Mertens and Dina Barbian ?", "sql": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "writes", "AS", "t3", "JOIN", "author", "AS", "t2", "ON", "t3.authorid", "=", "t2.authorid", "JOIN", "writes", "AS", "t4", "ON", "t4.paperid", "=", "t3.paperid", "JOIN", "author", "AS", "t1", "ON", "t4.authorid", "=", "t1.authorid", "WHERE", "t2.authorname", "=", "``", "Peter", "Mertens", "''", "AND", "t1.authorname", "=", "``", "Dina", "Barbian", "''", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "writes", "as", "t3", "join", "author", "as", "t2", "on", "t3", ".", "authorid", "=", "t2", ".", "authorid", "join", "writes", "as", "t4", "on", "t4", ".", "paperid", "=", "t3", ".", "paperid", "join", "author", "as", "t1", "on", "t4", ".", "authorid", "=", "t1", ".", "authorid", "where", "t2", ".", "authorname", "=", "value", "and", "t1", ".", "authorname", "=", "value"], "question": "What papers have been written by both Peter Mertens and Dina Barbian ?", "question_toks": ["What", "papers", "have", "been", "written", "by", "both", "Peter", "Mertens", "and", "Dina", "Barbian", "?"], "guid": 4895}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | who has papers at NIPS ?", "sql": "SELECT DISTINCT t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  \"NIPS\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  \"NIPS\";", "query_toks": ["SELECT", "DISTINCT", "t1.authorid", "FROM", "venue", "AS", "t3", "JOIN", "paper", "AS", "t2", "ON", "t3.venueid", "=", "t2.venueid", "JOIN", "writes", "AS", "t1", "ON", "t1.paperid", "=", "t2.paperid", "WHERE", "t3.venuename", "=", "``", "NIPS", "''", ";"], "query_toks_no_value": ["select", "distinct", "t1", ".", "authorid", "from", "venue", "as", "t3", "join", "paper", "as", "t2", "on", "t3", ".", "venueid", "=", "t2", ".", "venueid", "join", "writes", "as", "t1", "on", "t1", ".", "paperid", "=", "t2", ".", "paperid", "where", "t3", ".", "venuename", "=", "value"], "question": "who has papers at NIPS ?", "question_toks": ["who", "has", "papers", "at", "NIPS", "?"], "guid": 4896}}
{"text": "publication: Publication_ID, Book_ID, Publisher, Publication_Date, Price; book: Book_ID, Title, Issues, Writer | How many books are there?", "sql": "SELECT count(*) FROM book", "example": {"db_id": "book_2", "query": "SELECT count(*) FROM book", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "book"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "book"], "question": "How many books are there?", "question_toks": ["How", "many", "books", "are", "there", "?"], "guid": 4897}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | noah a smith citation count", "sql": "SELECT DISTINCT COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"noah a smith\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"noah a smith\";", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "t4.citedpaperid", ")", "FROM", "paper", "AS", "t3", "JOIN", "cite", "AS", "t4", "ON", "t3.paperid", "=", "t4.citedpaperid", "JOIN", "writes", "AS", "t2", "ON", "t2.paperid", "=", "t3.paperid", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "WHERE", "t1.authorname", "=", "``", "noah", "a", "smith", "''", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "t4", ".", "citedpaperid", ")", "from", "paper", "as", "t3", "join", "cite", "as", "t4", "on", "t3", ".", "paperid", "=", "t4", ".", "citedpaperid", "join", "writes", "as", "t2", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "where", "t1", ".", "authorname", "=", "value"], "question": "noah a smith citation count", "question_toks": ["noah", "a", "smith", "citation", "count"], "guid": 4898}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the paper by \" H. V. Jagadish \" with more than 200 citations .", "sql": "SELECT t3.title FROM writes AS t2 JOIN author AS t1 ON t2.aid  =  t1.aid JOIN publication AS t3 ON t2.pid  =  t3.pid WHERE t1.name  =  \"H. V. Jagadish\" AND t3.citation_num  >  200;", "example": {"db_id": "academic", "query": "SELECT t3.title FROM writes AS t2 JOIN author AS t1 ON t2.aid  =  t1.aid JOIN publication AS t3 ON t2.pid  =  t3.pid WHERE t1.name  =  \"H. V. Jagadish\" AND t3.citation_num  >  200;", "query_toks": ["SELECT", "t3.title", "FROM", "writes", "AS", "t2", "JOIN", "author", "AS", "t1", "ON", "t2.aid", "=", "t1.aid", "JOIN", "publication", "AS", "t3", "ON", "t2.pid", "=", "t3.pid", "WHERE", "t1.name", "=", "``", "H.", "V.", "Jagadish", "''", "AND", "t3.citation_num", ">", "200", ";"], "query_toks_no_value": ["select", "t3", ".", "title", "from", "writes", "as", "t2", "join", "author", "as", "t1", "on", "t2", ".", "aid", "=", "t1", ".", "aid", "join", "publication", "as", "t3", "on", "t2", ".", "pid", "=", "t3", ".", "pid", "where", "t1", ".", "name", "=", "value", "and", "t3", ".", "citation_num", ">", "value"], "question": "return me the paper by \" H. V. Jagadish \" with more than 200 citations .", "question_toks": ["return", "me", "the", "paper", "by", "``", "H.", "V.", "Jagadish", "``", "with", "more", "than", "200", "citations", "."], "guid": 4899}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the paper in VLDB conference with the most citations .", "sql": "SELECT t2.title FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\" ORDER BY t2.citation_num DESC LIMIT 1;", "example": {"db_id": "academic", "query": "SELECT t2.title FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\" ORDER BY t2.citation_num DESC LIMIT 1;", "query_toks": ["SELECT", "t2.title", "FROM", "publication", "AS", "t2", "JOIN", "conference", "AS", "t1", "ON", "t2.cid", "=", "t1.cid", "WHERE", "t1.name", "=", "``", "VLDB", "''", "ORDER", "BY", "t2.citation_num", "DESC", "LIMIT", "1", ";"], "query_toks_no_value": ["select", "t2", ".", "title", "from", "publication", "as", "t2", "join", "conference", "as", "t1", "on", "t2", ".", "cid", "=", "t1", ".", "cid", "where", "t1", ".", "name", "=", "value", "order", "by", "t2", ".", "citation_num", "desc", "limit", "value"], "question": "return me the paper in VLDB conference with the most citations .", "question_toks": ["return", "me", "the", "paper", "in", "VLDB", "conference", "with", "the", "most", "citations", "."], "guid": 4900}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the total citations of all the papers in the VLDB conference .", "sql": "SELECT SUM ( t2.citation_num ) FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\";", "example": {"db_id": "academic", "query": "SELECT SUM ( t2.citation_num ) FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\";", "query_toks": ["SELECT", "SUM", "(", "t2.citation_num", ")", "FROM", "publication", "AS", "t2", "JOIN", "conference", "AS", "t1", "ON", "t2.cid", "=", "t1.cid", "WHERE", "t1.name", "=", "``", "VLDB", "''", ";"], "query_toks_no_value": ["select", "sum", "(", "t2", ".", "citation_num", ")", "from", "publication", "as", "t2", "join", "conference", "as", "t1", "on", "t2", ".", "cid", "=", "t1", ".", "cid", "where", "t1", ".", "name", "=", "value"], "question": "return me the total citations of all the papers in the VLDB conference .", "question_toks": ["return", "me", "the", "total", "citations", "of", "all", "the", "papers", "in", "the", "VLDB", "conference", "."], "guid": 4901}}
{"text": "Document_Types: document_type_code, document_description; Documents: document_id, document_type_code, grant_id, sent_date, response_received_date, other_details; Grants: grant_id, organisation_id, grant_amount, grant_start_date, grant_end_date, other_details; Organisation_Types: organisation_type, organisation_type_description; Organisations: organisation_id, organisation_type, organisation_details; Project_Outcomes: project_id, outcome_code, outcome_details; Project_Staff: staff_id, project_id, role_code, date_from, date_to, other_details; Projects: project_id, organisation_id, project_details; Research_Outcomes: outcome_code, outcome_description; Research_Staff: staff_id, employer_organisation_id, staff_details | For each grant id, how many documents does it have, and which one has the most?", "sql": "SELECT grant_id ,  count(*) FROM Documents GROUP BY grant_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "tracking_grants_for_research", "query": "SELECT grant_id ,  count(*) FROM Documents GROUP BY grant_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "grant_id", ",", "count", "(", "*", ")", "FROM", "Documents", "GROUP", "BY", "grant_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "grant_id", ",", "count", "(", "*", ")", "from", "documents", "group", "by", "grant_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "For each grant id, how many documents does it have, and which one has the most?", "question_toks": ["For", "each", "grant", "id", ",", "how", "many", "documents", "does", "it", "have", ",", "and", "which", "one", "has", "the", "most", "?"], "guid": 4902}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | latest deep learning papers", "sql": "SELECT DISTINCT t3.paperid  ,  t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\" ORDER BY t3.year DESC;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid  ,  t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\" ORDER BY t3.year DESC;", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", ",", "t3.year", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "WHERE", "t1.keyphrasename", "=", "``", "deep", "learning", "''", "ORDER", "BY", "t3.year", "DESC", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", ",", "t3", ".", "year", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "where", "t1", ".", "keyphrasename", "=", "value", "order", "by", "t3", ".", "year", "desc"], "question": "latest deep learning papers", "question_toks": ["latest", "deep", "learning", "papers"], "guid": 4903}}
{"text": "book_club: book_club_id, Year, Author_or_Editor, Book_Title, Publisher, Category, Result; movie: movie_id, Title, Year, Director, Budget_million, Gross_worldwide; culture_company: Company_name, Type, Incorporated_in, Group_Equity_Shareholding, book_club_id, movie_id | What is the title and director for the movie with highest worldwide gross in the year 2000 or before?", "sql": "SELECT title ,  director FROM movie WHERE YEAR  <=  2000 ORDER BY gross_worldwide DESC LIMIT 1", "example": {"db_id": "culture_company", "query": "SELECT title ,  director FROM movie WHERE YEAR  <=  2000 ORDER BY gross_worldwide DESC LIMIT 1", "query_toks": ["SELECT", "title", ",", "director", "FROM", "movie", "WHERE", "YEAR", "<", "=", "2000", "ORDER", "BY", "gross_worldwide", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "title", ",", "director", "from", "movie", "where", "year", "<", "=", "value", "order", "by", "gross_worldwide", "desc", "limit", "value"], "question": "What is the title and director for the movie with highest worldwide gross in the year 2000 or before?", "question_toks": ["What", "is", "the", "title", "and", "director", "for", "the", "movie", "with", "highest", "worldwide", "gross", "in", "the", "year", "2000", "or", "before", "?"], "guid": 4904}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | datasets used for evaluating semantic parsing", "sql": "SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  \"semantic parsing\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  \"semantic parsing\";", "query_toks": ["SELECT", "DISTINCT", "t2.datasetid", "FROM", "paperdataset", "AS", "t3", "JOIN", "dataset", "AS", "t2", "ON", "t3.datasetid", "=", "t2.datasetid", "JOIN", "paperkeyphrase", "AS", "t1", "ON", "t1.paperid", "=", "t3.paperid", "JOIN", "keyphrase", "AS", "t4", "ON", "t1.keyphraseid", "=", "t4.keyphraseid", "WHERE", "t4.keyphrasename", "=", "``", "semantic", "parsing", "''", ";"], "query_toks_no_value": ["select", "distinct", "t2", ".", "datasetid", "from", "paperdataset", "as", "t3", "join", "dataset", "as", "t2", "on", "t3", ".", "datasetid", "=", "t2", ".", "datasetid", "join", "paperkeyphrase", "as", "t1", "on", "t1", ".", "paperid", "=", "t3", ".", "paperid", "join", "keyphrase", "as", "t4", "on", "t1", ".", "keyphraseid", "=", "t4", ".", "keyphraseid", "where", "t4", ".", "keyphrasename", "=", "value"], "question": "datasets used for evaluating semantic parsing", "question_toks": ["datasets", "used", "for", "evaluating", "semantic", "parsing"], "guid": 4905}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | syntactic parsing papers not written by chris dyer", "sql": "SELECT DISTINCT t1.authorname  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname != \"chris dyer\" AND t5.keyphrasename  =  \"syntactic parsing\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t1.authorname  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname != \"chris dyer\" AND t5.keyphrasename  =  \"syntactic parsing\";", "query_toks": ["SELECT", "DISTINCT", "t1.authorname", ",", "t3.paperid", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t5", "ON", "t2.keyphraseid", "=", "t5.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "JOIN", "writes", "AS", "t4", "ON", "t4.paperid", "=", "t3.paperid", "JOIN", "author", "AS", "t1", "ON", "t4.authorid", "=", "t1.authorid", "WHERE", "t1.authorname", "!", "=", "``", "chris", "dyer", "''", "AND", "t5.keyphrasename", "=", "``", "syntactic", "parsing", "''", ";"], "query_toks_no_value": ["select", "distinct", "t1", ".", "authorname", ",", "t3", ".", "paperid", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t5", "on", "t2", ".", "keyphraseid", "=", "t5", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "join", "writes", "as", "t4", "on", "t4", ".", "paperid", "=", "t3", ".", "paperid", "join", "author", "as", "t1", "on", "t4", ".", "authorid", "=", "t1", ".", "authorid", "where", "t1", ".", "authorname", "!", "=", "value", "and", "t5", ".", "keyphrasename", "=", "value"], "question": "syntactic parsing papers not written by chris dyer", "question_toks": ["syntactic", "parsing", "papers", "not", "written", "by", "chris", "dyer"], "guid": 4906}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | how many papers appeared at nature communications last year", "sql": "SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"nature communications\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"nature communications\";", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "t1.paperid", ")", "FROM", "venue", "AS", "t2", "JOIN", "paper", "AS", "t1", "ON", "t2.venueid", "=", "t1.venueid", "WHERE", "t1.year", "=", "2015", "AND", "t2.venuename", "=", "``", "nature", "communications", "''", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "t1", ".", "paperid", ")", "from", "venue", "as", "t2", "join", "paper", "as", "t1", "on", "t2", ".", "venueid", "=", "t1", ".", "venueid", "where", "t1", ".", "year", "=", "value", "and", "t2", ".", "venuename", "=", "value"], "question": "how many papers appeared at nature communications last year", "question_toks": ["how", "many", "papers", "appeared", "at", "nature", "communications", "last", "year"], "guid": 4907}}
{"text": "item: i_id, title; review: a_id, u_id, i_id, rating, rank; useracct: u_id, name; trust: source_u_id, target_u_id, trust | Find the titles of items whose rating is higher than the average review rating of all items.", "sql": "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id WHERE T2.rating  >  (SELECT avg(rating) FROM review)", "example": {"db_id": "epinions_1", "query": "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id WHERE T2.rating  >  (SELECT avg(rating) FROM review)", "query_toks": ["SELECT", "T1.title", "FROM", "item", "AS", "T1", "JOIN", "review", "AS", "T2", "ON", "T1.i_id", "=", "T2.i_id", "WHERE", "T2.rating", ">", "(", "SELECT", "avg", "(", "rating", ")", "FROM", "review", ")"], "query_toks_no_value": ["select", "t1", ".", "title", "from", "item", "as", "t1", "join", "review", "as", "t2", "on", "t1", ".", "i_id", "=", "t2", ".", "i_id", "where", "t2", ".", "rating", ">", "(", "select", "avg", "(", "rating", ")", "from", "review", ")"], "question": "Find the titles of items whose rating is higher than the average review rating of all items.", "question_toks": ["Find", "the", "titles", "of", "items", "whose", "rating", "is", "higher", "than", "the", "average", "review", "rating", "of", "all", "items", "."], "guid": 4908}}
{"text": "workshop: Workshop_ID, Date, Venue, Name; submission: Submission_ID, Scores, Author, College; Acceptance: Submission_ID, Workshop_ID, Result | Show the result of the submission with the highest score.", "sql": "SELECT T1.Result FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID ORDER BY T2.Scores DESC LIMIT 1", "example": {"db_id": "workshop_paper", "query": "SELECT T1.Result FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID ORDER BY T2.Scores DESC LIMIT 1", "query_toks": ["SELECT", "T1.Result", "FROM", "acceptance", "AS", "T1", "JOIN", "submission", "AS", "T2", "ON", "T1.Submission_ID", "=", "T2.Submission_ID", "ORDER", "BY", "T2.Scores", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "result", "from", "acceptance", "as", "t1", "join", "submission", "as", "t2", "on", "t1", ".", "submission_id", "=", "t2", ".", "submission_id", "order", "by", "t2", ".", "scores", "desc", "limit", "value"], "question": "Show the result of the submission with the highest score.", "question_toks": ["Show", "the", "result", "of", "the", "submission", "with", "the", "highest", "score", "."], "guid": 4909}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | Where did sergey levine publish his last paper ?", "sql": "SELECT DISTINCT t3.venueid  ,  t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"sergey levine\" GROUP BY t3.venueid  ,  t3.year ORDER BY t3.year DESC;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.venueid  ,  t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"sergey levine\" GROUP BY t3.venueid  ,  t3.year ORDER BY t3.year DESC;", "query_toks": ["SELECT", "DISTINCT", "t3.venueid", ",", "t3.year", "FROM", "writes", "AS", "t2", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "JOIN", "paper", "AS", "t3", "ON", "t2.paperid", "=", "t3.paperid", "WHERE", "t1.authorname", "=", "``", "sergey", "levine", "''", "GROUP", "BY", "t3.venueid", ",", "t3.year", "ORDER", "BY", "t3.year", "DESC", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "venueid", ",", "t3", ".", "year", "from", "writes", "as", "t2", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "join", "paper", "as", "t3", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "where", "t1", ".", "authorname", "=", "value", "group", "by", "t3", ".", "venueid", ",", "t3", ".", "year", "order", "by", "t3", ".", "year", "desc"], "question": "Where did sergey levine publish his last paper ?", "question_toks": ["Where", "did", "sergey", "levine", "publish", "his", "last", "paper", "?"], "guid": 4910}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | author who wrote papers with Noah A Smith", "sql": "SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Noah A Smith\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Noah A Smith\";", "query_toks": ["SELECT", "DISTINCT", "t1.authorid", "FROM", "writes", "AS", "t3", "JOIN", "author", "AS", "t2", "ON", "t3.authorid", "=", "t2.authorid", "JOIN", "writes", "AS", "t4", "ON", "t4.paperid", "=", "t3.paperid", "JOIN", "author", "AS", "t1", "ON", "t4.authorid", "=", "t1.authorid", "WHERE", "t2.authorname", "=", "``", "Noah", "A", "Smith", "''", ";"], "query_toks_no_value": ["select", "distinct", "t1", ".", "authorid", "from", "writes", "as", "t3", "join", "author", "as", "t2", "on", "t3", ".", "authorid", "=", "t2", ".", "authorid", "join", "writes", "as", "t4", "on", "t4", ".", "paperid", "=", "t3", ".", "paperid", "join", "author", "as", "t1", "on", "t4", ".", "authorid", "=", "t1", ".", "authorid", "where", "t2", ".", "authorname", "=", "value"], "question": "author who wrote papers with Noah A Smith", "question_toks": ["author", "who", "wrote", "papers", "with", "Noah", "A", "Smith"], "guid": 4911}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | Which papers are about about Question Answering ?", "sql": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "WHERE", "t1.keyphrasename", "=", "``", "Question", "Answering", "''", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "where", "t1", ".", "keyphrasename", "=", "value"], "question": "Which papers are about about Question Answering ?", "question_toks": ["Which", "papers", "are", "about", "about", "Question", "Answering", "?"], "guid": 4912}}
{"text": "Inst: instID, name, country; Authors: authID, lname, fname; Papers: paperID, title; Authorship: authID, instID, paperID, authOrder | What is the name of the institution the author \"Katsuhiro Ueno\" belongs to?", "sql": "SELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t1.fname  =  \"Katsuhiro\" AND t1.lname  =  \"Ueno\"", "example": {"db_id": "icfp_1", "query": "SELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t1.fname  =  \"Katsuhiro\" AND t1.lname  =  \"Ueno\"", "query_toks": ["SELECT", "DISTINCT", "t3.name", "FROM", "authors", "AS", "t1", "JOIN", "authorship", "AS", "t2", "ON", "t1.authid", "=", "t2.authid", "JOIN", "inst", "AS", "t3", "ON", "t2.instid", "=", "t3.instid", "WHERE", "t1.fname", "=", "``", "Katsuhiro", "''", "AND", "t1.lname", "=", "``", "Ueno", "''"], "query_toks_no_value": ["select", "distinct", "t3", ".", "name", "from", "authors", "as", "t1", "join", "authorship", "as", "t2", "on", "t1", ".", "authid", "=", "t2", ".", "authid", "join", "inst", "as", "t3", "on", "t2", ".", "instid", "=", "t3", ".", "instid", "where", "t1", ".", "fname", "=", "value", "and", "t1", ".", "lname", "=", "value"], "question": "What is the name of the institution the author \"Katsuhiro Ueno\" belongs to?", "question_toks": ["What", "is", "the", "name", "of", "the", "institution", "the", "author", "``", "Katsuhiro", "Ueno", "''", "belongs", "to", "?"], "guid": 4913}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the keywords, which have been contained by more than 10 papers of \" H. V. Jagadish \" .", "sql": "SELECT t1.keyword FROM publication_keyword AS t5 JOIN keyword AS t1 ON t5.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t3.pid JOIN author AS t2 ON t4.aid  =  t2.aid WHERE t2.name  =  \"H. V. Jagadish\" GROUP BY t1.keyword HAVING COUNT ( DISTINCT t3.title )  >  10;", "example": {"db_id": "academic", "query": "SELECT t1.keyword FROM publication_keyword AS t5 JOIN keyword AS t1 ON t5.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t3.pid JOIN author AS t2 ON t4.aid  =  t2.aid WHERE t2.name  =  \"H. V. Jagadish\" GROUP BY t1.keyword HAVING COUNT ( DISTINCT t3.title )  >  10;", "query_toks": ["SELECT", "t1.keyword", "FROM", "publication_keyword", "AS", "t5", "JOIN", "keyword", "AS", "t1", "ON", "t5.kid", "=", "t1.kid", "JOIN", "publication", "AS", "t3", "ON", "t3.pid", "=", "t5.pid", "JOIN", "writes", "AS", "t4", "ON", "t4.pid", "=", "t3.pid", "JOIN", "author", "AS", "t2", "ON", "t4.aid", "=", "t2.aid", "WHERE", "t2.name", "=", "``", "H.", "V.", "Jagadish", "''", "GROUP", "BY", "t1.keyword", "HAVING", "COUNT", "(", "DISTINCT", "t3.title", ")", ">", "10", ";"], "query_toks_no_value": ["select", "t1", ".", "keyword", "from", "publication_keyword", "as", "t5", "join", "keyword", "as", "t1", "on", "t5", ".", "kid", "=", "t1", ".", "kid", "join", "publication", "as", "t3", "on", "t3", ".", "pid", "=", "t5", ".", "pid", "join", "writes", "as", "t4", "on", "t4", ".", "pid", "=", "t3", ".", "pid", "join", "author", "as", "t2", "on", "t4", ".", "aid", "=", "t2", ".", "aid", "where", "t2", ".", "name", "=", "value", "group", "by", "t1", ".", "keyword", "having", "count", "(", "distinct", "t3", ".", "title", ")", ">", "value"], "question": "return me the keywords, which have been contained by more than 10 papers of \" H. V. Jagadish \" .", "question_toks": ["return", "me", "the", "keywords", ",", "which", "have", "been", "contained", "by", "more", "than", "10", "papers", "of", "``", "H.", "V.", "Jagadish", "``", "."], "guid": 4914}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | papers by sharon goldwater", "sql": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";", "query_toks": ["SELECT", "DISTINCT", "t2.paperid", "FROM", "writes", "AS", "t2", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "WHERE", "t1.authorname", "=", "``", "sharon", "goldwater", "''", ";"], "query_toks_no_value": ["select", "distinct", "t2", ".", "paperid", "from", "writes", "as", "t2", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "where", "t1", ".", "authorname", "=", "value"], "question": "papers by sharon goldwater", "question_toks": ["papers", "by", "sharon", "goldwater"], "guid": 4915}}
{"text": "workshop: Workshop_ID, Date, Venue, Name; submission: Submission_ID, Scores, Author, College; Acceptance: Submission_ID, Workshop_ID, Result | What is the average score of submissions?", "sql": "SELECT avg(Scores) FROM submission", "example": {"db_id": "workshop_paper", "query": "SELECT avg(Scores) FROM submission", "query_toks": ["SELECT", "avg", "(", "Scores", ")", "FROM", "submission"], "query_toks_no_value": ["select", "avg", "(", "scores", ")", "from", "submission"], "question": "What is the average score of submissions?", "question_toks": ["What", "is", "the", "average", "score", "of", "submissions", "?"], "guid": 4916}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the keywords in the papers of \" University of Michigan \" .", "sql": "SELECT t1.keyword FROM organization AS t6 JOIN author AS t2 ON t6.oid  =  t2.oid JOIN writes AS t4 ON t4.aid  =  t2.aid JOIN publication AS t5 ON t4.pid  =  t5.pid JOIN publication_keyword AS t3 ON t5.pid  =  t3.pid JOIN keyword AS t1 ON t3.kid  =  t1.kid WHERE t6.name  =  \"University of Michigan\";", "example": {"db_id": "academic", "query": "SELECT t1.keyword FROM organization AS t6 JOIN author AS t2 ON t6.oid  =  t2.oid JOIN writes AS t4 ON t4.aid  =  t2.aid JOIN publication AS t5 ON t4.pid  =  t5.pid JOIN publication_keyword AS t3 ON t5.pid  =  t3.pid JOIN keyword AS t1 ON t3.kid  =  t1.kid WHERE t6.name  =  \"University of Michigan\";", "query_toks": ["SELECT", "t1.keyword", "FROM", "organization", "AS", "t6", "JOIN", "author", "AS", "t2", "ON", "t6.oid", "=", "t2.oid", "JOIN", "writes", "AS", "t4", "ON", "t4.aid", "=", "t2.aid", "JOIN", "publication", "AS", "t5", "ON", "t4.pid", "=", "t5.pid", "JOIN", "publication_keyword", "AS", "t3", "ON", "t5.pid", "=", "t3.pid", "JOIN", "keyword", "AS", "t1", "ON", "t3.kid", "=", "t1.kid", "WHERE", "t6.name", "=", "``", "University", "of", "Michigan", "''", ";"], "query_toks_no_value": ["select", "t1", ".", "keyword", "from", "organization", "as", "t6", "join", "author", "as", "t2", "on", "t6", ".", "oid", "=", "t2", ".", "oid", "join", "writes", "as", "t4", "on", "t4", ".", "aid", "=", "t2", ".", "aid", "join", "publication", "as", "t5", "on", "t4", ".", "pid", "=", "t5", ".", "pid", "join", "publication_keyword", "as", "t3", "on", "t5", ".", "pid", "=", "t3", ".", "pid", "join", "keyword", "as", "t1", "on", "t3", ".", "kid", "=", "t1", ".", "kid", "where", "t6", ".", "name", "=", "value"], "question": "return me the keywords in the papers of \" University of Michigan \" .", "question_toks": ["return", "me", "the", "keywords", "in", "the", "papers", "of", "``", "University", "of", "Michigan", "``", "."], "guid": 4917}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the number of authors who have cited the papers by \" H. V. Jagadish \" .", "sql": "SELECT COUNT ( DISTINCT t2.name ) FROM publication AS t7 JOIN cite AS t5 ON t7.pid  =  t5.citing JOIN publication AS t6 ON t6.pid  =  t5.cited JOIN writes AS t3 ON t3.pid  =  t7.pid JOIN writes AS t4 ON t4.pid  =  t6.pid JOIN author AS t2 ON t3.aid  =  t2.aid JOIN author AS t1 ON t4.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\";", "example": {"db_id": "academic", "query": "SELECT COUNT ( DISTINCT t2.name ) FROM publication AS t7 JOIN cite AS t5 ON t7.pid  =  t5.citing JOIN publication AS t6 ON t6.pid  =  t5.cited JOIN writes AS t3 ON t3.pid  =  t7.pid JOIN writes AS t4 ON t4.pid  =  t6.pid JOIN author AS t2 ON t3.aid  =  t2.aid JOIN author AS t1 ON t4.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\";", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "t2.name", ")", "FROM", "publication", "AS", "t7", "JOIN", "cite", "AS", "t5", "ON", "t7.pid", "=", "t5.citing", "JOIN", "publication", "AS", "t6", "ON", "t6.pid", "=", "t5.cited", "JOIN", "writes", "AS", "t3", "ON", "t3.pid", "=", "t7.pid", "JOIN", "writes", "AS", "t4", "ON", "t4.pid", "=", "t6.pid", "JOIN", "author", "AS", "t2", "ON", "t3.aid", "=", "t2.aid", "JOIN", "author", "AS", "t1", "ON", "t4.aid", "=", "t1.aid", "WHERE", "t1.name", "=", "``", "H.", "V.", "Jagadish", "''", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "t2", ".", "name", ")", "from", "publication", "as", "t7", "join", "cite", "as", "t5", "on", "t7", ".", "pid", "=", "t5", ".", "citing", "join", "publication", "as", "t6", "on", "t6", ".", "pid", "=", "t5", ".", "cited", "join", "writes", "as", "t3", "on", "t3", ".", "pid", "=", "t7", ".", "pid", "join", "writes", "as", "t4", "on", "t4", ".", "pid", "=", "t6", ".", "pid", "join", "author", "as", "t2", "on", "t3", ".", "aid", "=", "t2", ".", "aid", "join", "author", "as", "t1", "on", "t4", ".", "aid", "=", "t1", ".", "aid", "where", "t1", ".", "name", "=", "value"], "question": "return me the number of authors who have cited the papers by \" H. V. Jagadish \" .", "question_toks": ["return", "me", "the", "number", "of", "authors", "who", "have", "cited", "the", "papers", "by", "``", "H.", "V.", "Jagadish", "``", "."], "guid": 4918}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | authors with at least 5 papers", "sql": "SELECT DISTINCT COUNT ( t2.paperid )  ,  t1.authorid FROM writes AS t1 JOIN paper AS t2 ON t1.paperid  =  t2.paperid GROUP BY t1.authorid HAVING COUNT ( t2.paperid )  >=  5;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( t2.paperid )  ,  t1.authorid FROM writes AS t1 JOIN paper AS t2 ON t1.paperid  =  t2.paperid GROUP BY t1.authorid HAVING COUNT ( t2.paperid )  >=  5;", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "t2.paperid", ")", ",", "t1.authorid", "FROM", "writes", "AS", "t1", "JOIN", "paper", "AS", "t2", "ON", "t1.paperid", "=", "t2.paperid", "GROUP", "BY", "t1.authorid", "HAVING", "COUNT", "(", "t2.paperid", ")", ">", "=", "5", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "t2", ".", "paperid", ")", ",", "t1", ".", "authorid", "from", "writes", "as", "t1", "join", "paper", "as", "t2", "on", "t1", ".", "paperid", "=", "t2", ".", "paperid", "group", "by", "t1", ".", "authorid", "having", "count", "(", "t2", ".", "paperid", ")", ">", "=", "value"], "question": "authors with at least 5 papers", "question_toks": ["authors", "with", "at", "least", "5", "papers"], "guid": 4919}}
{"text": "publication: Publication_ID, Book_ID, Publisher, Publication_Date, Price; book: Book_ID, Title, Issues, Writer | What is the number of distinct publication dates?", "sql": "SELECT COUNT (DISTINCT Publication_Date) FROM publication", "example": {"db_id": "book_2", "query": "SELECT COUNT (DISTINCT Publication_Date) FROM publication", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "Publication_Date", ")", "FROM", "publication"], "query_toks_no_value": ["select", "count", "(", "distinct", "publication_date", ")", "from", "publication"], "question": "What is the number of distinct publication dates?", "question_toks": ["What", "is", "the", "number", "of", "distinct", "publication", "dates", "?"], "guid": 4920}}
{"text": "Document_Types: document_type_code, document_description; Documents: document_id, document_type_code, grant_id, sent_date, response_received_date, other_details; Grants: grant_id, organisation_id, grant_amount, grant_start_date, grant_end_date, other_details; Organisation_Types: organisation_type, organisation_type_description; Organisations: organisation_id, organisation_type, organisation_details; Project_Outcomes: project_id, outcome_code, outcome_details; Project_Staff: staff_id, project_id, role_code, date_from, date_to, other_details; Projects: project_id, organisation_id, project_details; Research_Outcomes: outcome_code, outcome_description; Research_Staff: staff_id, employer_organisation_id, staff_details | What are the details for the projects which were launched by the organization with the most projects?", "sql": "SELECT project_details FROM Projects WHERE organisation_id IN ( SELECT organisation_id FROM Projects GROUP BY organisation_id ORDER BY count(*) DESC LIMIT 1 )", "example": {"db_id": "tracking_grants_for_research", "query": "SELECT project_details FROM Projects WHERE organisation_id IN ( SELECT organisation_id FROM Projects GROUP BY organisation_id ORDER BY count(*) DESC LIMIT 1 )", "query_toks": ["SELECT", "project_details", "FROM", "Projects", "WHERE", "organisation_id", "IN", "(", "SELECT", "organisation_id", "FROM", "Projects", "GROUP", "BY", "organisation_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1", ")"], "query_toks_no_value": ["select", "project_details", "from", "projects", "where", "organisation_id", "in", "(", "select", "organisation_id", "from", "projects", "group", "by", "organisation_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value", ")"], "question": "What are the details for the projects which were launched by the organization with the most projects?", "question_toks": ["What", "are", "the", "details", "for", "the", "projects", "which", "were", "launched", "by", "the", "organization", "with", "the", "most", "projects", "?"], "guid": 4921}}
{"text": "Scientists: SSN, Name; Projects: Code, Name, Hours; AssignedTo: Scientist, Project | Find the total number of scientists.", "sql": "SELECT count(*) FROM scientists", "example": {"db_id": "scientist_1", "query": "SELECT count(*) FROM scientists", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "scientists"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "scientists"], "question": "Find the total number of scientists.", "question_toks": ["Find", "the", "total", "number", "of", "scientists", "."], "guid": 4922}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | How many papers written on ImageNet ?", "sql": "SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname LIKE \"ImageNet\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname LIKE \"ImageNet\";", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "DISTINCT", "t3.paperid", ")", "FROM", "paperdataset", "AS", "t2", "JOIN", "dataset", "AS", "t1", "ON", "t2.datasetid", "=", "t1.datasetid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "WHERE", "t1.datasetname", "LIKE", "``", "ImageNet", "''", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "distinct", "t3", ".", "paperid", ")", "from", "paperdataset", "as", "t2", "join", "dataset", "as", "t1", "on", "t2", ".", "datasetid", "=", "t1", ".", "datasetid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "where", "t1", ".", "datasetname", "like", "value"], "question": "How many papers written on ImageNet ?", "question_toks": ["How", "many", "papers", "written", "on", "ImageNet", "?"], "guid": 4923}}
{"text": "Document_Types: document_type_code, document_description; Documents: document_id, document_type_code, grant_id, sent_date, response_received_date, other_details; Grants: grant_id, organisation_id, grant_amount, grant_start_date, grant_end_date, other_details; Organisation_Types: organisation_type, organisation_type_description; Organisations: organisation_id, organisation_type, organisation_details; Project_Outcomes: project_id, outcome_code, outcome_details; Project_Staff: staff_id, project_id, role_code, date_from, date_to, other_details; Projects: project_id, organisation_id, project_details; Research_Outcomes: outcome_code, outcome_description; Research_Staff: staff_id, employer_organisation_id, staff_details | What is the description for the results whose project detail is 'sint'?", "sql": "SELECT T1.outcome_description FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code  =  T2.outcome_code JOIN Projects AS T3 ON T2.project_id  =  T3.project_id WHERE T3.project_details  =  'sint'", "example": {"db_id": "tracking_grants_for_research", "query": "SELECT T1.outcome_description FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code  =  T2.outcome_code JOIN Projects AS T3 ON T2.project_id  =  T3.project_id WHERE T3.project_details  =  'sint'", "query_toks": ["SELECT", "T1.outcome_description", "FROM", "Research_outcomes", "AS", "T1", "JOIN", "Project_outcomes", "AS", "T2", "ON", "T1.outcome_code", "=", "T2.outcome_code", "JOIN", "Projects", "AS", "T3", "ON", "T2.project_id", "=", "T3.project_id", "WHERE", "T3.project_details", "=", "'sint", "'"], "query_toks_no_value": ["select", "t1", ".", "outcome_description", "from", "research_outcomes", "as", "t1", "join", "project_outcomes", "as", "t2", "on", "t1", ".", "outcome_code", "=", "t2", ".", "outcome_code", "join", "projects", "as", "t3", "on", "t2", ".", "project_id", "=", "t3", ".", "project_id", "where", "t3", ".", "project_details", "=", "value"], "question": "What is the description for the results whose project detail is 'sint'?", "question_toks": ["What", "is", "the", "description", "for", "the", "results", "whose", "project", "detail", "is", "'sint", "'", "?"], "guid": 4924}}
{"text": "publication: Publication_ID, Book_ID, Publisher, Publication_Date, Price; book: Book_ID, Title, Issues, Writer | List the publisher of the publication with the highest price.", "sql": "SELECT Publisher FROM publication ORDER BY Price DESC LIMIT 1", "example": {"db_id": "book_2", "query": "SELECT Publisher FROM publication ORDER BY Price DESC LIMIT 1", "query_toks": ["SELECT", "Publisher", "FROM", "publication", "ORDER", "BY", "Price", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "publisher", "from", "publication", "order", "by", "price", "desc", "limit", "value"], "question": "List the publisher of the publication with the highest price.", "question_toks": ["List", "the", "publisher", "of", "the", "publication", "with", "the", "highest", "price", "."], "guid": 4925}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the number of citations of \" Making database systems usable \" in each year .", "sql": "SELECT YEAR  ,  SUM ( citation_num ) FROM publication WHERE title  =  \"Making database systems usable\" GROUP BY YEAR;", "example": {"db_id": "academic", "query": "SELECT YEAR  ,  SUM ( citation_num ) FROM publication WHERE title  =  \"Making database systems usable\" GROUP BY YEAR;", "query_toks": ["SELECT", "YEAR", ",", "SUM", "(", "citation_num", ")", "FROM", "publication", "WHERE", "title", "=", "``", "Making", "database", "systems", "usable", "''", "GROUP", "BY", "YEAR", ";"], "query_toks_no_value": ["select", "year", ",", "sum", "(", "citation_num", ")", "from", "publication", "where", "title", "=", "value", "group", "by", "year"], "question": "return me the number of citations of \" Making database systems usable \" in each year .", "question_toks": ["return", "me", "the", "number", "of", "citations", "of", "``", "Making", "database", "systems", "usable", "``", "in", "each", "year", "."], "guid": 4926}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | papers that were not published in the last year", "sql": "SELECT DISTINCT paperid FROM paper WHERE YEAR != 2015;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT paperid FROM paper WHERE YEAR != 2015;", "query_toks": ["SELECT", "DISTINCT", "paperid", "FROM", "paper", "WHERE", "YEAR", "!", "=", "2015", ";"], "query_toks_no_value": ["select", "distinct", "paperid", "from", "paper", "where", "year", "!", "=", "value"], "question": "papers that were not published in the last year", "question_toks": ["papers", "that", "were", "not", "published", "in", "the", "last", "year"], "guid": 4927}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | Papers about Question Answering", "sql": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "WHERE", "t1.keyphrasename", "=", "``", "Question", "Answering", "''", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "where", "t1", ".", "keyphrasename", "=", "value"], "question": "Papers about Question Answering", "question_toks": ["Papers", "about", "Question", "Answering"], "guid": 4928}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | How many papers has Christopher D. Manning written ?", "sql": "SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christopher D. Manning\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christopher D. Manning\";", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "DISTINCT", "t2.paperid", ")", "FROM", "writes", "AS", "t2", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "WHERE", "t1.authorname", "=", "``", "Christopher", "D.", "Manning", "''", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "distinct", "t2", ".", "paperid", ")", "from", "writes", "as", "t2", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "where", "t1", ".", "authorname", "=", "value"], "question": "How many papers has Christopher D. Manning written ?", "question_toks": ["How", "many", "papers", "has", "Christopher", "D.", "Manning", "written", "?"], "guid": 4929}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | What papers talk about Question Answering ?", "sql": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "WHERE", "t1.keyphrasename", "=", "``", "Question", "Answering", "''", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "where", "t1", ".", "keyphrasename", "=", "value"], "question": "What papers talk about Question Answering ?", "question_toks": ["What", "papers", "talk", "about", "Question", "Answering", "?"], "guid": 4930}}
{"text": "item: i_id, title; review: a_id, u_id, i_id, rating, rank; useracct: u_id, name; trust: source_u_id, target_u_id, trust | Find the highest rank of all reviews.", "sql": "SELECT min(rank) FROM review", "example": {"db_id": "epinions_1", "query": "SELECT min(rank) FROM review", "query_toks": ["SELECT", "min", "(", "rank", ")", "FROM", "review"], "query_toks_no_value": ["select", "min", "(", "rank", ")", "from", "review"], "question": "Find the highest rank of all reviews.", "question_toks": ["Find", "the", "highest", "rank", "of", "all", "reviews", "."], "guid": 4931}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the number of keywords .", "sql": "SELECT COUNT ( DISTINCT keyword ) FROM keyword;", "example": {"db_id": "academic", "query": "SELECT COUNT ( DISTINCT keyword ) FROM keyword;", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "keyword", ")", "FROM", "keyword", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "keyword", ")", "from", "keyword"], "question": "return me the number of keywords .", "question_toks": ["return", "me", "the", "number", "of", "keywords", "."], "guid": 4932}}
{"text": "book_club: book_club_id, Year, Author_or_Editor, Book_Title, Publisher, Category, Result; movie: movie_id, Title, Year, Director, Budget_million, Gross_worldwide; culture_company: Company_name, Type, Incorporated_in, Group_Equity_Shareholding, book_club_id, movie_id | Count the number of book clubs.", "sql": "SELECT count(*) FROM book_club", "example": {"db_id": "culture_company", "query": "SELECT count(*) FROM book_club", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "book_club"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "book_club"], "question": "Count the number of book clubs.", "question_toks": ["Count", "the", "number", "of", "book", "clubs", "."], "guid": 4933}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | what datasets are used in papers by jitendra malik", "sql": "SELECT DISTINCT t2.datasetid FROM paper AS t3 JOIN paperdataset AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"jitendra malik\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t2.datasetid FROM paper AS t3 JOIN paperdataset AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"jitendra malik\";", "query_toks": ["SELECT", "DISTINCT", "t2.datasetid", "FROM", "paper", "AS", "t3", "JOIN", "paperdataset", "AS", "t2", "ON", "t3.paperid", "=", "t2.paperid", "JOIN", "writes", "AS", "t4", "ON", "t4.paperid", "=", "t3.paperid", "JOIN", "author", "AS", "t1", "ON", "t4.authorid", "=", "t1.authorid", "WHERE", "t1.authorname", "=", "``", "jitendra", "malik", "''", ";"], "query_toks_no_value": ["select", "distinct", "t2", ".", "datasetid", "from", "paper", "as", "t3", "join", "paperdataset", "as", "t2", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "join", "writes", "as", "t4", "on", "t4", ".", "paperid", "=", "t3", ".", "paperid", "join", "author", "as", "t1", "on", "t4", ".", "authorid", "=", "t1", ".", "authorid", "where", "t1", ".", "authorname", "=", "value"], "question": "what datasets are used in papers by jitendra malik", "question_toks": ["what", "datasets", "are", "used", "in", "papers", "by", "jitendra", "malik"], "guid": 4934}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me all the keywords .", "sql": "SELECT keyword FROM keyword;", "example": {"db_id": "academic", "query": "SELECT keyword FROM keyword;", "query_toks": ["SELECT", "keyword", "FROM", "keyword", ";"], "query_toks_no_value": ["select", "keyword", "from", "keyword"], "question": "return me all the keywords .", "question_toks": ["return", "me", "all", "the", "keywords", "."], "guid": 4935}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | author published acl 2016", "sql": "SELECT DISTINCT t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2016 AND t3.venuename  =  \"acl\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2016 AND t3.venuename  =  \"acl\";", "query_toks": ["SELECT", "DISTINCT", "t1.authorid", "FROM", "venue", "AS", "t3", "JOIN", "paper", "AS", "t2", "ON", "t3.venueid", "=", "t2.venueid", "JOIN", "writes", "AS", "t1", "ON", "t1.paperid", "=", "t2.paperid", "WHERE", "t2.year", "=", "2016", "AND", "t3.venuename", "=", "``", "acl", "''", ";"], "query_toks_no_value": ["select", "distinct", "t1", ".", "authorid", "from", "venue", "as", "t3", "join", "paper", "as", "t2", "on", "t3", ".", "venueid", "=", "t2", ".", "venueid", "join", "writes", "as", "t1", "on", "t1", ".", "paperid", "=", "t2", ".", "paperid", "where", "t2", ".", "year", "=", "value", "and", "t3", ".", "venuename", "=", "value"], "question": "author published acl 2016", "question_toks": ["author", "published", "acl", "2016"], "guid": 4936}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | papers published at pldi 2015", "sql": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"pldi\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"pldi\";", "query_toks": ["SELECT", "DISTINCT", "t1.paperid", "FROM", "venue", "AS", "t2", "JOIN", "paper", "AS", "t1", "ON", "t2.venueid", "=", "t1.venueid", "WHERE", "t1.year", "=", "2015", "AND", "t2.venuename", "=", "``", "pldi", "''", ";"], "query_toks_no_value": ["select", "distinct", "t1", ".", "paperid", "from", "venue", "as", "t2", "join", "paper", "as", "t1", "on", "t2", ".", "venueid", "=", "t1", ".", "venueid", "where", "t1", ".", "year", "=", "value", "and", "t2", ".", "venuename", "=", "value"], "question": "papers published at pldi 2015", "question_toks": ["papers", "published", "at", "pldi", "2015"], "guid": 4937}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | papers about TAIL published at NIPS", "sql": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"TAIL\" AND t4.venuename  =  \"NIPS\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"TAIL\" AND t4.venuename  =  \"NIPS\";", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "JOIN", "venue", "AS", "t4", "ON", "t4.venueid", "=", "t3.venueid", "WHERE", "t1.keyphrasename", "=", "``", "TAIL", "''", "AND", "t4.venuename", "=", "``", "NIPS", "''", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "join", "venue", "as", "t4", "on", "t4", ".", "venueid", "=", "t3", ".", "venueid", "where", "t1", ".", "keyphrasename", "=", "value", "and", "t4", ".", "venuename", "=", "value"], "question": "papers about TAIL published at NIPS", "question_toks": ["papers", "about", "TAIL", "published", "at", "NIPS"], "guid": 4938}}
{"text": "Scientists: SSN, Name; Projects: Code, Name, Hours; AssignedTo: Scientist, Project | List the names of all scientists sorted in alphabetical order.", "sql": "SELECT name FROM scientists ORDER BY name", "example": {"db_id": "scientist_1", "query": "SELECT name FROM scientists ORDER BY name", "query_toks": ["SELECT", "name", "FROM", "scientists", "ORDER", "BY", "name"], "query_toks_no_value": ["select", "name", "from", "scientists", "order", "by", "name"], "question": "List the names of all scientists sorted in alphabetical order.", "question_toks": ["List", "the", "names", "of", "all", "scientists", "sorted", "in", "alphabetical", "order", "."], "guid": 4939}}
{"text": "Document_Types: document_type_code, document_description; Documents: document_id, document_type_code, grant_id, sent_date, response_received_date, other_details; Grants: grant_id, organisation_id, grant_amount, grant_start_date, grant_end_date, other_details; Organisation_Types: organisation_type, organisation_type_description; Organisations: organisation_id, organisation_type, organisation_details; Project_Outcomes: project_id, outcome_code, outcome_details; Project_Staff: staff_id, project_id, role_code, date_from, date_to, other_details; Projects: project_id, organisation_id, project_details; Research_Outcomes: outcome_code, outcome_description; Research_Staff: staff_id, employer_organisation_id, staff_details | What are the details for the project whose research has been published?", "sql": "SELECT T1.project_details FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id JOIN Research_outcomes AS T3 ON T2.outcome_code  =  T3.outcome_code WHERE T3.outcome_description LIKE '%Published%'", "example": {"db_id": "tracking_grants_for_research", "query": "SELECT T1.project_details FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id JOIN Research_outcomes AS T3 ON T2.outcome_code  =  T3.outcome_code WHERE T3.outcome_description LIKE '%Published%'", "query_toks": ["SELECT", "T1.project_details", "FROM", "Projects", "AS", "T1", "JOIN", "Project_outcomes", "AS", "T2", "ON", "T1.project_id", "=", "T2.project_id", "JOIN", "Research_outcomes", "AS", "T3", "ON", "T2.outcome_code", "=", "T3.outcome_code", "WHERE", "T3.outcome_description", "LIKE", "'", "%", "Published", "%", "'"], "query_toks_no_value": ["select", "t1", ".", "project_details", "from", "projects", "as", "t1", "join", "project_outcomes", "as", "t2", "on", "t1", ".", "project_id", "=", "t2", ".", "project_id", "join", "research_outcomes", "as", "t3", "on", "t2", ".", "outcome_code", "=", "t3", ".", "outcome_code", "where", "t3", ".", "outcome_description", "like", "value"], "question": "What are the details for the project whose research has been published?", "question_toks": ["What", "are", "the", "details", "for", "the", "project", "whose", "research", "has", "been", "published", "?"], "guid": 4940}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the number of papers published in PVLDB in each year .", "sql": "SELECT COUNT ( DISTINCT t2.title )  ,  t2.year FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\" GROUP BY t2.year;", "example": {"db_id": "academic", "query": "SELECT COUNT ( DISTINCT t2.title )  ,  t2.year FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\" GROUP BY t2.year;", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "t2.title", ")", ",", "t2.year", "FROM", "publication", "AS", "t2", "JOIN", "journal", "AS", "t1", "ON", "t2.jid", "=", "t1.jid", "WHERE", "t1.name", "=", "``", "PVLDB", "''", "GROUP", "BY", "t2.year", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "t2", ".", "title", ")", ",", "t2", ".", "year", "from", "publication", "as", "t2", "join", "journal", "as", "t1", "on", "t2", ".", "jid", "=", "t1", ".", "jid", "where", "t1", ".", "name", "=", "value", "group", "by", "t2", ".", "year"], "question": "return me the number of papers published in PVLDB in each year .", "question_toks": ["return", "me", "the", "number", "of", "papers", "published", "in", "PVLDB", "in", "each", "year", "."], "guid": 4941}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | Authors of papers on sensor fusion", "sql": "SELECT DISTINCT t1.authorname FROM paperkeyphrase AS t2 JOIN keyphrase AS t4 ON t2.keyphraseid  =  t4.keyphraseid JOIN writes AS t3 ON t3.paperid  =  t2.paperid JOIN author AS t1 ON t3.authorid  =  t1.authorid WHERE t4.keyphrasename LIKE \"sensor fusion\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t1.authorname FROM paperkeyphrase AS t2 JOIN keyphrase AS t4 ON t2.keyphraseid  =  t4.keyphraseid JOIN writes AS t3 ON t3.paperid  =  t2.paperid JOIN author AS t1 ON t3.authorid  =  t1.authorid WHERE t4.keyphrasename LIKE \"sensor fusion\";", "query_toks": ["SELECT", "DISTINCT", "t1.authorname", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t4", "ON", "t2.keyphraseid", "=", "t4.keyphraseid", "JOIN", "writes", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "JOIN", "author", "AS", "t1", "ON", "t3.authorid", "=", "t1.authorid", "WHERE", "t4.keyphrasename", "LIKE", "``", "sensor", "fusion", "''", ";"], "query_toks_no_value": ["select", "distinct", "t1", ".", "authorname", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t4", "on", "t2", ".", "keyphraseid", "=", "t4", ".", "keyphraseid", "join", "writes", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "join", "author", "as", "t1", "on", "t3", ".", "authorid", "=", "t1", ".", "authorid", "where", "t4", ".", "keyphrasename", "like", "value"], "question": "Authors of papers on sensor fusion", "question_toks": ["Authors", "of", "papers", "on", "sensor", "fusion"], "guid": 4942}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | papers in pldi 2015", "sql": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"pldi\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"pldi\";", "query_toks": ["SELECT", "DISTINCT", "t1.paperid", "FROM", "venue", "AS", "t2", "JOIN", "paper", "AS", "t1", "ON", "t2.venueid", "=", "t1.venueid", "WHERE", "t1.year", "=", "2015", "AND", "t2.venuename", "=", "``", "pldi", "''", ";"], "query_toks_no_value": ["select", "distinct", "t1", ".", "paperid", "from", "venue", "as", "t2", "join", "paper", "as", "t1", "on", "t2", ".", "venueid", "=", "t1", ".", "venueid", "where", "t1", ".", "year", "=", "value", "and", "t2", ".", "venuename", "=", "value"], "question": "papers in pldi 2015", "question_toks": ["papers", "in", "pldi", "2015"], "guid": 4943}}
{"text": "Scientists: SSN, Name; Projects: Code, Name, Hours; AssignedTo: Scientist, Project | Find the name of projects that require between 100 and 300 hours of work.", "sql": "SELECT name FROM projects WHERE hours BETWEEN 100 AND 300", "example": {"db_id": "scientist_1", "query": "SELECT name FROM projects WHERE hours BETWEEN 100 AND 300", "query_toks": ["SELECT", "name", "FROM", "projects", "WHERE", "hours", "BETWEEN", "100", "AND", "300"], "query_toks_no_value": ["select", "name", "from", "projects", "where", "hours", "between", "value", "and", "value"], "question": "Find the name of projects that require between 100 and 300 hours of work.", "question_toks": ["Find", "the", "name", "of", "projects", "that", "require", "between", "100", "and", "300", "hours", "of", "work", "."], "guid": 4944}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | top author in syntactic parsing", "sql": "SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  \"syntactic parsing\" GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  \"syntactic parsing\" GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "t4.paperid", ")", ",", "t3.authorid", "FROM", "paperkeyphrase", "AS", "t1", "JOIN", "keyphrase", "AS", "t2", "ON", "t1.keyphraseid", "=", "t2.keyphraseid", "JOIN", "paper", "AS", "t4", "ON", "t4.paperid", "=", "t1.paperid", "JOIN", "writes", "AS", "t3", "ON", "t3.paperid", "=", "t4.paperid", "WHERE", "t2.keyphrasename", "=", "``", "syntactic", "parsing", "''", "GROUP", "BY", "t3.authorid", "ORDER", "BY", "COUNT", "(", "t4.paperid", ")", "DESC", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "t4", ".", "paperid", ")", ",", "t3", ".", "authorid", "from", "paperkeyphrase", "as", "t1", "join", "keyphrase", "as", "t2", "on", "t1", ".", "keyphraseid", "=", "t2", ".", "keyphraseid", "join", "paper", "as", "t4", "on", "t4", ".", "paperid", "=", "t1", ".", "paperid", "join", "writes", "as", "t3", "on", "t3", ".", "paperid", "=", "t4", ".", "paperid", "where", "t2", ".", "keyphrasename", "=", "value", "group", "by", "t3", ".", "authorid", "order", "by", "count", "(", "t4", ".", "paperid", ")", "desc"], "question": "top author in syntactic parsing", "question_toks": ["top", "author", "in", "syntactic", "parsing"], "guid": 4945}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | Who is a coauthor with Noah A Smith ?", "sql": "SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Noah A Smith\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Noah A Smith\";", "query_toks": ["SELECT", "DISTINCT", "t1.authorid", "FROM", "writes", "AS", "t3", "JOIN", "author", "AS", "t2", "ON", "t3.authorid", "=", "t2.authorid", "JOIN", "writes", "AS", "t4", "ON", "t4.paperid", "=", "t3.paperid", "JOIN", "author", "AS", "t1", "ON", "t4.authorid", "=", "t1.authorid", "WHERE", "t2.authorname", "=", "``", "Noah", "A", "Smith", "''", ";"], "query_toks_no_value": ["select", "distinct", "t1", ".", "authorid", "from", "writes", "as", "t3", "join", "author", "as", "t2", "on", "t3", ".", "authorid", "=", "t2", ".", "authorid", "join", "writes", "as", "t4", "on", "t4", ".", "paperid", "=", "t3", ".", "paperid", "join", "author", "as", "t1", "on", "t4", ".", "authorid", "=", "t1", ".", "authorid", "where", "t2", ".", "authorname", "=", "value"], "question": "Who is a coauthor with Noah A Smith ?", "question_toks": ["Who", "is", "a", "coauthor", "with", "Noah", "A", "Smith", "?"], "guid": 4946}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | how many papers in nature communications 2015", "sql": "SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"nature communications\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"nature communications\";", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "t1.paperid", ")", "FROM", "venue", "AS", "t2", "JOIN", "paper", "AS", "t1", "ON", "t2.venueid", "=", "t1.venueid", "WHERE", "t1.year", "=", "2015", "AND", "t2.venuename", "=", "``", "nature", "communications", "''", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "t1", ".", "paperid", ")", "from", "venue", "as", "t2", "join", "paper", "as", "t1", "on", "t2", ".", "venueid", "=", "t1", ".", "venueid", "where", "t1", ".", "year", "=", "value", "and", "t2", ".", "venuename", "=", "value"], "question": "how many papers in nature communications 2015", "question_toks": ["how", "many", "papers", "in", "nature", "communications", "2015"], "guid": 4947}}
{"text": "Scientists: SSN, Name; Projects: Code, Name, Hours; AssignedTo: Scientist, Project | Find the name of scientists who are assigned to some project.", "sql": "SELECT T2.name FROM assignedto AS T1 JOIN scientists AS T2 ON T1.scientist  =  T2.ssn", "example": {"db_id": "scientist_1", "query": "SELECT T2.name FROM assignedto AS T1 JOIN scientists AS T2 ON T1.scientist  =  T2.ssn", "query_toks": ["SELECT", "T2.name", "FROM", "assignedto", "AS", "T1", "JOIN", "scientists", "AS", "T2", "ON", "T1.scientist", "=", "T2.ssn"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "assignedto", "as", "t1", "join", "scientists", "as", "t2", "on", "t1", ".", "scientist", "=", "t2", ".", "ssn"], "question": "Find the name of scientists who are assigned to some project.", "question_toks": ["Find", "the", "name", "of", "scientists", "who", "are", "assigned", "to", "some", "project", "."], "guid": 4948}}
{"text": "book_club: book_club_id, Year, Author_or_Editor, Book_Title, Publisher, Category, Result; movie: movie_id, Title, Year, Director, Budget_million, Gross_worldwide; culture_company: Company_name, Type, Incorporated_in, Group_Equity_Shareholding, book_club_id, movie_id | List all company names with a book published by Alyson.", "sql": "SELECT T1.company_name FROM culture_company AS T1 JOIN book_club AS T2 ON T1.book_club_id  =  T2.book_club_id WHERE T2.publisher  =  'Alyson'", "example": {"db_id": "culture_company", "query": "SELECT T1.company_name FROM culture_company AS T1 JOIN book_club AS T2 ON T1.book_club_id  =  T2.book_club_id WHERE T2.publisher  =  'Alyson'", "query_toks": ["SELECT", "T1.company_name", "FROM", "culture_company", "AS", "T1", "JOIN", "book_club", "AS", "T2", "ON", "T1.book_club_id", "=", "T2.book_club_id", "WHERE", "T2.publisher", "=", "'Alyson", "'"], "query_toks_no_value": ["select", "t1", ".", "company_name", "from", "culture_company", "as", "t1", "join", "book_club", "as", "t2", "on", "t1", ".", "book_club_id", "=", "t2", ".", "book_club_id", "where", "t2", ".", "publisher", "=", "value"], "question": "List all company names with a book published by Alyson.", "question_toks": ["List", "all", "company", "names", "with", "a", "book", "published", "by", "Alyson", "."], "guid": 4949}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | most cited papers for parsing", "sql": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"parsing\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"parsing\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;", "query_toks": ["SELECT", "DISTINCT", "t4.citedpaperid", ",", "COUNT", "(", "t4.citedpaperid", ")", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "JOIN", "cite", "AS", "t4", "ON", "t3.paperid", "=", "t4.citedpaperid", "WHERE", "t1.keyphrasename", "=", "``", "parsing", "''", "GROUP", "BY", "t4.citedpaperid", "ORDER", "BY", "COUNT", "(", "t4.citedpaperid", ")", "DESC", ";"], "query_toks_no_value": ["select", "distinct", "t4", ".", "citedpaperid", ",", "count", "(", "t4", ".", "citedpaperid", ")", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "join", "cite", "as", "t4", "on", "t3", ".", "paperid", "=", "t4", ".", "citedpaperid", "where", "t1", ".", "keyphrasename", "=", "value", "group", "by", "t4", ".", "citedpaperid", "order", "by", "count", "(", "t4", ".", "citedpaperid", ")", "desc"], "question": "most cited papers for parsing", "question_toks": ["most", "cited", "papers", "for", "parsing"], "guid": 4950}}
{"text": "Inst: instID, name, country; Authors: authID, lname, fname; Papers: paperID, title; Authorship: authID, instID, paperID, authOrder | Retrieve the country that has published the most papers.", "sql": "SELECT t1.country FROM inst AS t1 JOIN authorship AS t2 ON t1.instid  =  t2.instid JOIN papers AS t3 ON t2.paperid  =  t3.paperid GROUP BY t1.country ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "icfp_1", "query": "SELECT t1.country FROM inst AS t1 JOIN authorship AS t2 ON t1.instid  =  t2.instid JOIN papers AS t3 ON t2.paperid  =  t3.paperid GROUP BY t1.country ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "t1.country", "FROM", "inst", "AS", "t1", "JOIN", "authorship", "AS", "t2", "ON", "t1.instid", "=", "t2.instid", "JOIN", "papers", "AS", "t3", "ON", "t2.paperid", "=", "t3.paperid", "GROUP", "BY", "t1.country", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "country", "from", "inst", "as", "t1", "join", "authorship", "as", "t2", "on", "t1", ".", "instid", "=", "t2", ".", "instid", "join", "papers", "as", "t3", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "group", "by", "t1", ".", "country", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Retrieve the country that has published the most papers.", "question_toks": ["Retrieve", "the", "country", "that", "has", "published", "the", "most", "papers", "."], "guid": 4951}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the paper in PVLDB with more than 200 citations .", "sql": "SELECT t2.title FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\" AND t2.citation_num  >  200;", "example": {"db_id": "academic", "query": "SELECT t2.title FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\" AND t2.citation_num  >  200;", "query_toks": ["SELECT", "t2.title", "FROM", "publication", "AS", "t2", "JOIN", "journal", "AS", "t1", "ON", "t2.jid", "=", "t1.jid", "WHERE", "t1.name", "=", "``", "PVLDB", "''", "AND", "t2.citation_num", ">", "200", ";"], "query_toks_no_value": ["select", "t2", ".", "title", "from", "publication", "as", "t2", "join", "journal", "as", "t1", "on", "t2", ".", "jid", "=", "t1", ".", "jid", "where", "t1", ".", "name", "=", "value", "and", "t2", ".", "citation_num", ">", "value"], "question": "return me the paper in PVLDB with more than 200 citations .", "question_toks": ["return", "me", "the", "paper", "in", "PVLDB", "with", "more", "than", "200", "citations", "."], "guid": 4952}}
{"text": "Scientists: SSN, Name; Projects: Code, Name, Hours; AssignedTo: Scientist, Project | Find the number of scientists involved for each project name.", "sql": "SELECT count(*) ,  T1.name FROM projects AS T1 JOIN assignedto AS T2 ON T1.code  =  T2.project GROUP BY T1.name", "example": {"db_id": "scientist_1", "query": "SELECT count(*) ,  T1.name FROM projects AS T1 JOIN assignedto AS T2 ON T1.code  =  T2.project GROUP BY T1.name", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "T1.name", "FROM", "projects", "AS", "T1", "JOIN", "assignedto", "AS", "T2", "ON", "T1.code", "=", "T2.project", "GROUP", "BY", "T1.name"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "t1", ".", "name", "from", "projects", "as", "t1", "join", "assignedto", "as", "t2", "on", "t1", ".", "code", "=", "t2", ".", "project", "group", "by", "t1", ".", "name"], "question": "Find the number of scientists involved for each project name.", "question_toks": ["Find", "the", "number", "of", "scientists", "involved", "for", "each", "project", "name", "."], "guid": 4953}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | What papers were written by authors Peter Mertens and Dina Barbian", "sql": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "writes", "AS", "t3", "JOIN", "author", "AS", "t2", "ON", "t3.authorid", "=", "t2.authorid", "JOIN", "writes", "AS", "t4", "ON", "t4.paperid", "=", "t3.paperid", "JOIN", "author", "AS", "t1", "ON", "t4.authorid", "=", "t1.authorid", "WHERE", "t2.authorname", "=", "``", "Peter", "Mertens", "''", "AND", "t1.authorname", "=", "``", "Dina", "Barbian", "''", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "writes", "as", "t3", "join", "author", "as", "t2", "on", "t3", ".", "authorid", "=", "t2", ".", "authorid", "join", "writes", "as", "t4", "on", "t4", ".", "paperid", "=", "t3", ".", "paperid", "join", "author", "as", "t1", "on", "t4", ".", "authorid", "=", "t1", ".", "authorid", "where", "t2", ".", "authorname", "=", "value", "and", "t1", ".", "authorname", "=", "value"], "question": "What papers were written by authors Peter Mertens and Dina Barbian", "question_toks": ["What", "papers", "were", "written", "by", "authors", "Peter", "Mertens", "and", "Dina", "Barbian"], "guid": 4954}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the paper with more than 200 citations .", "sql": "SELECT title FROM publication WHERE citation_num  >  200;", "example": {"db_id": "academic", "query": "SELECT title FROM publication WHERE citation_num  >  200;", "query_toks": ["SELECT", "title", "FROM", "publication", "WHERE", "citation_num", ">", "200", ";"], "query_toks_no_value": ["select", "title", "from", "publication", "where", "citation_num", ">", "value"], "question": "return me the paper with more than 200 citations .", "question_toks": ["return", "me", "the", "paper", "with", "more", "than", "200", "citations", "."], "guid": 4955}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | What was the conference name that approved Trophic Cascade ?", "sql": "SELECT DISTINCT t3.venueid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Trophic Cascade\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.venueid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Trophic Cascade\";", "query_toks": ["SELECT", "DISTINCT", "t3.venueid", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "WHERE", "t1.keyphrasename", "=", "``", "Trophic", "Cascade", "''", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "venueid", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "where", "t1", ".", "keyphrasename", "=", "value"], "question": "What was the conference name that approved Trophic Cascade ?", "question_toks": ["What", "was", "the", "conference", "name", "that", "approved", "Trophic", "Cascade", "?"], "guid": 4956}}
{"text": "Scientists: SSN, Name; Projects: Code, Name, Hours; AssignedTo: Scientist, Project | What is the average hours across all projects?", "sql": "SELECT avg(hours) FROM projects", "example": {"db_id": "scientist_1", "query": "SELECT avg(hours) FROM projects", "query_toks": ["SELECT", "avg", "(", "hours", ")", "FROM", "projects"], "query_toks_no_value": ["select", "avg", "(", "hours", ")", "from", "projects"], "question": "What is the average hours across all projects?", "question_toks": ["What", "is", "the", "average", "hours", "across", "all", "projects", "?"], "guid": 4957}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | What was oren etzioni 's latest paper ?", "sql": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"oren etzioni\" ORDER BY t3.year DESC;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"oren etzioni\" ORDER BY t3.year DESC;", "query_toks": ["SELECT", "DISTINCT", "t2.paperid", "FROM", "writes", "AS", "t2", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "JOIN", "paper", "AS", "t3", "ON", "t2.paperid", "=", "t3.paperid", "WHERE", "t1.authorname", "=", "``", "oren", "etzioni", "''", "ORDER", "BY", "t3.year", "DESC", ";"], "query_toks_no_value": ["select", "distinct", "t2", ".", "paperid", "from", "writes", "as", "t2", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "join", "paper", "as", "t3", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "where", "t1", ".", "authorname", "=", "value", "order", "by", "t3", ".", "year", "desc"], "question": "What was oren etzioni 's latest paper ?", "question_toks": ["What", "was", "oren", "etzioni", "'s", "latest", "paper", "?"], "guid": 4958}}
{"text": "publication: Publication_ID, Book_ID, Publisher, Publication_Date, Price; book: Book_ID, Title, Issues, Writer | Show writers who have published a book with price more than 4000000.", "sql": "SELECT T1.Writer FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID WHERE T2.Price  >  4000000", "example": {"db_id": "book_2", "query": "SELECT T1.Writer FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID WHERE T2.Price  >  4000000", "query_toks": ["SELECT", "T1.Writer", "FROM", "book", "AS", "T1", "JOIN", "publication", "AS", "T2", "ON", "T1.Book_ID", "=", "T2.Book_ID", "WHERE", "T2.Price", ">", "4000000"], "query_toks_no_value": ["select", "t1", ".", "writer", "from", "book", "as", "t1", "join", "publication", "as", "t2", "on", "t1", ".", "book_id", "=", "t2", ".", "book_id", "where", "t2", ".", "price", ">", "value"], "question": "Show writers who have published a book with price more than 4000000.", "question_toks": ["Show", "writers", "who", "have", "published", "a", "book", "with", "price", "more", "than", "4000000", "."], "guid": 4959}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | What papers were published at CVPR '16 about Class consistent multi-modal fusion with binary features applied to RGB-D Object Dataset ?", "sql": "SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.datasetname  =  \"RGB-D Object Dataset\" AND t3.title  =  \"Class consistent multi-modal fusion with binary features\" AND t3.year  =  2016 AND t4.venuename  =  \"CVPR\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.datasetname  =  \"RGB-D Object Dataset\" AND t3.title  =  \"Class consistent multi-modal fusion with binary features\" AND t3.year  =  2016 AND t4.venuename  =  \"CVPR\";", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "paperdataset", "AS", "t2", "JOIN", "dataset", "AS", "t1", "ON", "t2.datasetid", "=", "t1.datasetid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "JOIN", "venue", "AS", "t4", "ON", "t4.venueid", "=", "t3.venueid", "WHERE", "t1.datasetname", "=", "``", "RGB-D", "Object", "Dataset", "''", "AND", "t3.title", "=", "``", "Class", "consistent", "multi-modal", "fusion", "with", "binary", "features", "''", "AND", "t3.year", "=", "2016", "AND", "t4.venuename", "=", "``", "CVPR", "''", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "paperdataset", "as", "t2", "join", "dataset", "as", "t1", "on", "t2", ".", "datasetid", "=", "t1", ".", "datasetid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "join", "venue", "as", "t4", "on", "t4", ".", "venueid", "=", "t3", ".", "venueid", "where", "t1", ".", "datasetname", "=", "value", "and", "t3", ".", "title", "=", "value", "and", "t3", ".", "year", "=", "value", "and", "t4", ".", "venuename", "=", "value"], "question": "What papers were published at CVPR '16 about Class consistent multi-modal fusion with binary features applied to RGB-D Object Dataset ?", "question_toks": ["What", "papers", "were", "published", "at", "CVPR", "'16", "about", "Class", "consistent", "multi-modal", "fusion", "with", "binary", "features", "applied", "to", "RGB-D", "Object", "Dataset", "?"], "guid": 4960}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | who is the most published author in syntactic parsing ?", "sql": "SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  \"syntactic parsing\" GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  \"syntactic parsing\" GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "t4.paperid", ")", ",", "t3.authorid", "FROM", "paperkeyphrase", "AS", "t1", "JOIN", "keyphrase", "AS", "t2", "ON", "t1.keyphraseid", "=", "t2.keyphraseid", "JOIN", "paper", "AS", "t4", "ON", "t4.paperid", "=", "t1.paperid", "JOIN", "writes", "AS", "t3", "ON", "t3.paperid", "=", "t4.paperid", "WHERE", "t2.keyphrasename", "=", "``", "syntactic", "parsing", "''", "GROUP", "BY", "t3.authorid", "ORDER", "BY", "COUNT", "(", "t4.paperid", ")", "DESC", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "t4", ".", "paperid", ")", ",", "t3", ".", "authorid", "from", "paperkeyphrase", "as", "t1", "join", "keyphrase", "as", "t2", "on", "t1", ".", "keyphraseid", "=", "t2", ".", "keyphraseid", "join", "paper", "as", "t4", "on", "t4", ".", "paperid", "=", "t1", ".", "paperid", "join", "writes", "as", "t3", "on", "t3", ".", "paperid", "=", "t4", ".", "paperid", "where", "t2", ".", "keyphrasename", "=", "value", "group", "by", "t3", ".", "authorid", "order", "by", "count", "(", "t4", ".", "paperid", ")", "desc"], "question": "who is the most published author in syntactic parsing ?", "question_toks": ["who", "is", "the", "most", "published", "author", "in", "syntactic", "parsing", "?"], "guid": 4961}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | What are the papers of brian curless in convolution ?", "sql": "SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";", "query_toks": ["SELECT", "DISTINCT", "t1.authorid", ",", "t3.paperid", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t5", "ON", "t2.keyphraseid", "=", "t5.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "JOIN", "writes", "AS", "t4", "ON", "t4.paperid", "=", "t3.paperid", "JOIN", "author", "AS", "t1", "ON", "t4.authorid", "=", "t1.authorid", "WHERE", "t1.authorname", "=", "``", "brian", "curless", "''", "AND", "t5.keyphrasename", "=", "``", "convolution", "''", ";"], "query_toks_no_value": ["select", "distinct", "t1", ".", "authorid", ",", "t3", ".", "paperid", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t5", "on", "t2", ".", "keyphraseid", "=", "t5", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "join", "writes", "as", "t4", "on", "t4", ".", "paperid", "=", "t3", ".", "paperid", "join", "author", "as", "t1", "on", "t4", ".", "authorid", "=", "t1", ".", "authorid", "where", "t1", ".", "authorname", "=", "value", "and", "t5", ".", "keyphrasename", "=", "value"], "question": "What are the papers of brian curless in convolution ?", "question_toks": ["What", "are", "the", "papers", "of", "brian", "curless", "in", "convolution", "?"], "guid": 4962}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | papers published in the area of Question Answering", "sql": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "WHERE", "t1.keyphrasename", "=", "``", "Question", "Answering", "''", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "where", "t1", ".", "keyphrasename", "=", "value"], "question": "papers published in the area of Question Answering", "question_toks": ["papers", "published", "in", "the", "area", "of", "Question", "Answering"], "guid": 4963}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the conference, which have the most number of papers by \" H. V. Jagadish \" .", "sql": "SELECT t2.name FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\" GROUP BY t2.name ORDER BY COUNT ( DISTINCT t4.title ) DESC LIMIT 1;", "example": {"db_id": "academic", "query": "SELECT t2.name FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\" GROUP BY t2.name ORDER BY COUNT ( DISTINCT t4.title ) DESC LIMIT 1;", "query_toks": ["SELECT", "t2.name", "FROM", "publication", "AS", "t4", "JOIN", "conference", "AS", "t2", "ON", "t4.cid", "=", "t2.cid", "JOIN", "writes", "AS", "t3", "ON", "t3.pid", "=", "t4.pid", "JOIN", "author", "AS", "t1", "ON", "t3.aid", "=", "t1.aid", "WHERE", "t1.name", "=", "``", "H.", "V.", "Jagadish", "''", "GROUP", "BY", "t2.name", "ORDER", "BY", "COUNT", "(", "DISTINCT", "t4.title", ")", "DESC", "LIMIT", "1", ";"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "publication", "as", "t4", "join", "conference", "as", "t2", "on", "t4", ".", "cid", "=", "t2", ".", "cid", "join", "writes", "as", "t3", "on", "t3", ".", "pid", "=", "t4", ".", "pid", "join", "author", "as", "t1", "on", "t3", ".", "aid", "=", "t1", ".", "aid", "where", "t1", ".", "name", "=", "value", "group", "by", "t2", ".", "name", "order", "by", "count", "(", "distinct", "t4", ".", "title", ")", "desc", "limit", "value"], "question": "return me the conference, which have the most number of papers by \" H. V. Jagadish \" .", "question_toks": ["return", "me", "the", "conference", ",", "which", "have", "the", "most", "number", "of", "papers", "by", "``", "H.", "V.", "Jagadish", "``", "."], "guid": 4964}}
{"text": "Document_Types: document_type_code, document_description; Documents: document_id, document_type_code, grant_id, sent_date, response_received_date, other_details; Grants: grant_id, organisation_id, grant_amount, grant_start_date, grant_end_date, other_details; Organisation_Types: organisation_type, organisation_type_description; Organisations: organisation_id, organisation_type, organisation_details; Project_Outcomes: project_id, outcome_code, outcome_details; Project_Staff: staff_id, project_id, role_code, date_from, date_to, other_details; Projects: project_id, organisation_id, project_details; Research_Outcomes: outcome_code, outcome_description; Research_Staff: staff_id, employer_organisation_id, staff_details | What is the last date of the staff leaving the projects?", "sql": "SELECT date_to FROM Project_Staff ORDER BY date_to DESC LIMIT 1", "example": {"db_id": "tracking_grants_for_research", "query": "SELECT date_to FROM Project_Staff ORDER BY date_to DESC LIMIT 1", "query_toks": ["SELECT", "date_to", "FROM", "Project_Staff", "ORDER", "BY", "date_to", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "date_to", "from", "project_staff", "order", "by", "date_to", "desc", "limit", "value"], "question": "What is the last date of the staff leaving the projects?", "question_toks": ["What", "is", "the", "last", "date", "of", "the", "staff", "leaving", "the", "projects", "?"], "guid": 4965}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | keywords in the papers written by Luke Zettlemoyer", "sql": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";", "query_toks": ["SELECT", "DISTINCT", "t1.keyphraseid", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "JOIN", "writes", "AS", "t4", "ON", "t4.paperid", "=", "t3.paperid", "JOIN", "author", "AS", "t5", "ON", "t4.authorid", "=", "t5.authorid", "WHERE", "t5.authorname", "=", "``", "Luke", "Zettlemoyer", "''", ";"], "query_toks_no_value": ["select", "distinct", "t1", ".", "keyphraseid", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "join", "writes", "as", "t4", "on", "t4", ".", "paperid", "=", "t3", ".", "paperid", "join", "author", "as", "t5", "on", "t4", ".", "authorid", "=", "t5", ".", "authorid", "where", "t5", ".", "authorname", "=", "value"], "question": "keywords in the papers written by Luke Zettlemoyer", "question_toks": ["keywords", "in", "the", "papers", "written", "by", "Luke", "Zettlemoyer"], "guid": 4966}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | What is the paper about convolution from brian curless ?", "sql": "SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";", "query_toks": ["SELECT", "DISTINCT", "t1.authorid", ",", "t3.paperid", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t5", "ON", "t2.keyphraseid", "=", "t5.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "JOIN", "writes", "AS", "t4", "ON", "t4.paperid", "=", "t3.paperid", "JOIN", "author", "AS", "t1", "ON", "t4.authorid", "=", "t1.authorid", "WHERE", "t1.authorname", "=", "``", "brian", "curless", "''", "AND", "t5.keyphrasename", "=", "``", "convolution", "''", ";"], "query_toks_no_value": ["select", "distinct", "t1", ".", "authorid", ",", "t3", ".", "paperid", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t5", "on", "t2", ".", "keyphraseid", "=", "t5", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "join", "writes", "as", "t4", "on", "t4", ".", "paperid", "=", "t3", ".", "paperid", "join", "author", "as", "t1", "on", "t4", ".", "authorid", "=", "t1", ".", "authorid", "where", "t1", ".", "authorname", "=", "value", "and", "t5", ".", "keyphrasename", "=", "value"], "question": "What is the paper about convolution from brian curless ?", "question_toks": ["What", "is", "the", "paper", "about", "convolution", "from", "brian", "curless", "?"], "guid": 4967}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | What papers were published at CVPR in 2016 about Class consistent multi-modal fusion with binary features applied to RGB-D Object Dataset ?", "sql": "SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.datasetname  =  \"RGB-D Object Dataset\" AND t3.title  =  \"Class consistent multi-modal fusion with binary features\" AND t3.year  =  2016 AND t4.venuename  =  \"CVPR\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.datasetname  =  \"RGB-D Object Dataset\" AND t3.title  =  \"Class consistent multi-modal fusion with binary features\" AND t3.year  =  2016 AND t4.venuename  =  \"CVPR\";", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "paperdataset", "AS", "t2", "JOIN", "dataset", "AS", "t1", "ON", "t2.datasetid", "=", "t1.datasetid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "JOIN", "venue", "AS", "t4", "ON", "t4.venueid", "=", "t3.venueid", "WHERE", "t1.datasetname", "=", "``", "RGB-D", "Object", "Dataset", "''", "AND", "t3.title", "=", "``", "Class", "consistent", "multi-modal", "fusion", "with", "binary", "features", "''", "AND", "t3.year", "=", "2016", "AND", "t4.venuename", "=", "``", "CVPR", "''", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "paperdataset", "as", "t2", "join", "dataset", "as", "t1", "on", "t2", ".", "datasetid", "=", "t1", ".", "datasetid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "join", "venue", "as", "t4", "on", "t4", ".", "venueid", "=", "t3", ".", "venueid", "where", "t1", ".", "datasetname", "=", "value", "and", "t3", ".", "title", "=", "value", "and", "t3", ".", "year", "=", "value", "and", "t4", ".", "venuename", "=", "value"], "question": "What papers were published at CVPR in 2016 about Class consistent multi-modal fusion with binary features applied to RGB-D Object Dataset ?", "question_toks": ["What", "papers", "were", "published", "at", "CVPR", "in", "2016", "about", "Class", "consistent", "multi-modal", "fusion", "with", "binary", "features", "applied", "to", "RGB-D", "Object", "Dataset", "?"], "guid": 4968}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | popular topics at NIPS 2015", "sql": "SELECT DISTINCT COUNT ( t3.paperid )  ,  t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t3.year  =  2015 AND t4.venuename  =  \"NIPS\" GROUP BY t1.keyphraseid ORDER BY COUNT ( t3.paperid ) DESC;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( t3.paperid )  ,  t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t3.year  =  2015 AND t4.venuename  =  \"NIPS\" GROUP BY t1.keyphraseid ORDER BY COUNT ( t3.paperid ) DESC;", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "t3.paperid", ")", ",", "t1.keyphraseid", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "JOIN", "venue", "AS", "t4", "ON", "t4.venueid", "=", "t3.venueid", "WHERE", "t3.year", "=", "2015", "AND", "t4.venuename", "=", "``", "NIPS", "''", "GROUP", "BY", "t1.keyphraseid", "ORDER", "BY", "COUNT", "(", "t3.paperid", ")", "DESC", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "t3", ".", "paperid", ")", ",", "t1", ".", "keyphraseid", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "join", "venue", "as", "t4", "on", "t4", ".", "venueid", "=", "t3", ".", "venueid", "where", "t3", ".", "year", "=", "value", "and", "t4", ".", "venuename", "=", "value", "group", "by", "t1", ".", "keyphraseid", "order", "by", "count", "(", "t3", ".", "paperid", ")", "desc"], "question": "popular topics at NIPS 2015", "question_toks": ["popular", "topics", "at", "NIPS", "2015"], "guid": 4969}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the paper after 2000 in VLDB conference with more than 200 citations .", "sql": "SELECT t2.title FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\" AND t2.citation_num  >  200 AND t2.year  >  2000;", "example": {"db_id": "academic", "query": "SELECT t2.title FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\" AND t2.citation_num  >  200 AND t2.year  >  2000;", "query_toks": ["SELECT", "t2.title", "FROM", "publication", "AS", "t2", "JOIN", "conference", "AS", "t1", "ON", "t2.cid", "=", "t1.cid", "WHERE", "t1.name", "=", "``", "VLDB", "''", "AND", "t2.citation_num", ">", "200", "AND", "t2.year", ">", "2000", ";"], "query_toks_no_value": ["select", "t2", ".", "title", "from", "publication", "as", "t2", "join", "conference", "as", "t1", "on", "t2", ".", "cid", "=", "t1", ".", "cid", "where", "t1", ".", "name", "=", "value", "and", "t2", ".", "citation_num", ">", "value", "and", "t2", ".", "year", ">", "value"], "question": "return me the paper after 2000 in VLDB conference with more than 200 citations .", "question_toks": ["return", "me", "the", "paper", "after", "2000", "in", "VLDB", "conference", "with", "more", "than", "200", "citations", "."], "guid": 4970}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | Does Peter Mertens ever collaborated with Dina Barbian ?", "sql": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "writes", "AS", "t3", "JOIN", "author", "AS", "t2", "ON", "t3.authorid", "=", "t2.authorid", "JOIN", "writes", "AS", "t4", "ON", "t4.paperid", "=", "t3.paperid", "JOIN", "author", "AS", "t1", "ON", "t4.authorid", "=", "t1.authorid", "WHERE", "t2.authorname", "=", "``", "Peter", "Mertens", "''", "AND", "t1.authorname", "=", "``", "Dina", "Barbian", "''", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "writes", "as", "t3", "join", "author", "as", "t2", "on", "t3", ".", "authorid", "=", "t2", ".", "authorid", "join", "writes", "as", "t4", "on", "t4", ".", "paperid", "=", "t3", ".", "paperid", "join", "author", "as", "t1", "on", "t4", ".", "authorid", "=", "t1", ".", "authorid", "where", "t2", ".", "authorname", "=", "value", "and", "t1", ".", "authorname", "=", "value"], "question": "Does Peter Mertens ever collaborated with Dina Barbian ?", "question_toks": ["Does", "Peter", "Mertens", "ever", "collaborated", "with", "Dina", "Barbian", "?"], "guid": 4971}}
{"text": "Inst: instID, name, country; Authors: authID, lname, fname; Papers: paperID, title; Authorship: authID, instID, paperID, authOrder | Which paper is published in an institution in \"USA\" and have \"Turon\" as its second author?", "sql": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid JOIN inst AS t4 ON t2.instid  =  t4.instid WHERE t4.country  =  \"USA\" AND t2.authorder  =  2 AND t1.lname  =  \"Turon\"", "example": {"db_id": "icfp_1", "query": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid JOIN inst AS t4 ON t2.instid  =  t4.instid WHERE t4.country  =  \"USA\" AND t2.authorder  =  2 AND t1.lname  =  \"Turon\"", "query_toks": ["SELECT", "t3.title", "FROM", "authors", "AS", "t1", "JOIN", "authorship", "AS", "t2", "ON", "t1.authid", "=", "t2.authid", "JOIN", "papers", "AS", "t3", "ON", "t2.paperid", "=", "t3.paperid", "JOIN", "inst", "AS", "t4", "ON", "t2.instid", "=", "t4.instid", "WHERE", "t4.country", "=", "``", "USA", "''", "AND", "t2.authorder", "=", "2", "AND", "t1.lname", "=", "``", "Turon", "''"], "query_toks_no_value": ["select", "t3", ".", "title", "from", "authors", "as", "t1", "join", "authorship", "as", "t2", "on", "t1", ".", "authid", "=", "t2", ".", "authid", "join", "papers", "as", "t3", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "join", "inst", "as", "t4", "on", "t2", ".", "instid", "=", "t4", ".", "instid", "where", "t4", ".", "country", "=", "value", "and", "t2", ".", "authorder", "=", "value", "and", "t1", ".", "lname", "=", "value"], "question": "Which paper is published in an institution in \"USA\" and have \"Turon\" as its second author?", "question_toks": ["Which", "paper", "is", "published", "in", "an", "institution", "in", "``", "USA", "''", "and", "have", "``", "Turon", "''", "as", "its", "second", "author", "?"], "guid": 4972}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the papers of \" H. V. Jagadish \" containing keyword \" User Study \" .", "sql": "SELECT t5.title FROM publication_keyword AS t3 JOIN keyword AS t1 ON t3.kid  =  t1.kid JOIN publication AS t5 ON t5.pid  =  t3.pid JOIN writes AS t4 ON t4.pid  =  t5.pid JOIN author AS t2 ON t4.aid  =  t2.aid WHERE t2.name  =  \"H. V. Jagadish\" AND t1.keyword  =  \"User Study\";", "example": {"db_id": "academic", "query": "SELECT t5.title FROM publication_keyword AS t3 JOIN keyword AS t1 ON t3.kid  =  t1.kid JOIN publication AS t5 ON t5.pid  =  t3.pid JOIN writes AS t4 ON t4.pid  =  t5.pid JOIN author AS t2 ON t4.aid  =  t2.aid WHERE t2.name  =  \"H. V. Jagadish\" AND t1.keyword  =  \"User Study\";", "query_toks": ["SELECT", "t5.title", "FROM", "publication_keyword", "AS", "t3", "JOIN", "keyword", "AS", "t1", "ON", "t3.kid", "=", "t1.kid", "JOIN", "publication", "AS", "t5", "ON", "t5.pid", "=", "t3.pid", "JOIN", "writes", "AS", "t4", "ON", "t4.pid", "=", "t5.pid", "JOIN", "author", "AS", "t2", "ON", "t4.aid", "=", "t2.aid", "WHERE", "t2.name", "=", "``", "H.", "V.", "Jagadish", "''", "AND", "t1.keyword", "=", "``", "User", "Study", "''", ";"], "query_toks_no_value": ["select", "t5", ".", "title", "from", "publication_keyword", "as", "t3", "join", "keyword", "as", "t1", "on", "t3", ".", "kid", "=", "t1", ".", "kid", "join", "publication", "as", "t5", "on", "t5", ".", "pid", "=", "t3", ".", "pid", "join", "writes", "as", "t4", "on", "t4", ".", "pid", "=", "t5", ".", "pid", "join", "author", "as", "t2", "on", "t4", ".", "aid", "=", "t2", ".", "aid", "where", "t2", ".", "name", "=", "value", "and", "t1", ".", "keyword", "=", "value"], "question": "return me the papers of \" H. V. Jagadish \" containing keyword \" User Study \" .", "question_toks": ["return", "me", "the", "papers", "of", "``", "H.", "V.", "Jagadish", "``", "containing", "keyword", "``", "User", "Study", "``", "."], "guid": 4973}}
{"text": "workshop: Workshop_ID, Date, Venue, Name; submission: Submission_ID, Scores, Author, College; Acceptance: Submission_ID, Workshop_ID, Result | For each submission, find its author and acceptance result.", "sql": "SELECT T2.Author ,  T1.Result FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID", "example": {"db_id": "workshop_paper", "query": "SELECT T2.Author ,  T1.Result FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID", "query_toks": ["SELECT", "T2.Author", ",", "T1.Result", "FROM", "acceptance", "AS", "T1", "JOIN", "submission", "AS", "T2", "ON", "T1.Submission_ID", "=", "T2.Submission_ID"], "query_toks_no_value": ["select", "t2", ".", "author", ",", "t1", ".", "result", "from", "acceptance", "as", "t1", "join", "submission", "as", "t2", "on", "t1", ".", "submission_id", "=", "t2", ".", "submission_id"], "question": "For each submission, find its author and acceptance result.", "question_toks": ["For", "each", "submission", ",", "find", "its", "author", "and", "acceptance", "result", "."], "guid": 4974}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the author in the \" University of Michigan \" in Databases area whose papers have more than 5000 total citations .", "sql": "SELECT t1.name FROM domain_author AS t6 JOIN author AS t1 ON t6.aid  =  t1.aid JOIN DOMAIN AS t3 ON t3.did  =  t6.did JOIN organization AS t5 ON t5.oid  =  t1.oid JOIN writes AS t2 ON t2.aid  =  t1.aid JOIN publication AS t4 ON t2.pid  =  t4.pid WHERE t3.name  =  \"Databases\" AND t5.name  =  \"University of Michigan\" GROUP BY t1.name HAVING SUM ( t4.citation_num )  >  5000;", "example": {"db_id": "academic", "query": "SELECT t1.name FROM domain_author AS t6 JOIN author AS t1 ON t6.aid  =  t1.aid JOIN DOMAIN AS t3 ON t3.did  =  t6.did JOIN organization AS t5 ON t5.oid  =  t1.oid JOIN writes AS t2 ON t2.aid  =  t1.aid JOIN publication AS t4 ON t2.pid  =  t4.pid WHERE t3.name  =  \"Databases\" AND t5.name  =  \"University of Michigan\" GROUP BY t1.name HAVING SUM ( t4.citation_num )  >  5000;", "query_toks": ["SELECT", "t1.name", "FROM", "domain_author", "AS", "t6", "JOIN", "author", "AS", "t1", "ON", "t6.aid", "=", "t1.aid", "JOIN", "DOMAIN", "AS", "t3", "ON", "t3.did", "=", "t6.did", "JOIN", "organization", "AS", "t5", "ON", "t5.oid", "=", "t1.oid", "JOIN", "writes", "AS", "t2", "ON", "t2.aid", "=", "t1.aid", "JOIN", "publication", "AS", "t4", "ON", "t2.pid", "=", "t4.pid", "WHERE", "t3.name", "=", "``", "Databases", "''", "AND", "t5.name", "=", "``", "University", "of", "Michigan", "''", "GROUP", "BY", "t1.name", "HAVING", "SUM", "(", "t4.citation_num", ")", ">", "5000", ";"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "domain_author", "as", "t6", "join", "author", "as", "t1", "on", "t6", ".", "aid", "=", "t1", ".", "aid", "join", "domain", "as", "t3", "on", "t3", ".", "did", "=", "t6", ".", "did", "join", "organization", "as", "t5", "on", "t5", ".", "oid", "=", "t1", ".", "oid", "join", "writes", "as", "t2", "on", "t2", ".", "aid", "=", "t1", ".", "aid", "join", "publication", "as", "t4", "on", "t2", ".", "pid", "=", "t4", ".", "pid", "where", "t3", ".", "name", "=", "value", "and", "t5", ".", "name", "=", "value", "group", "by", "t1", ".", "name", "having", "sum", "(", "t4", ".", "citation_num", ")", ">", "value"], "question": "return me the author in the \" University of Michigan \" in Databases area whose papers have more than 5000 total citations .", "question_toks": ["return", "me", "the", "author", "in", "the", "``", "University", "of", "Michigan", "``", "in", "Databases", "area", "whose", "papers", "have", "more", "than", "5000", "total", "citations", "."], "guid": 4975}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | Show me the papers on Question Answering", "sql": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "WHERE", "t1.keyphrasename", "=", "``", "Question", "Answering", "''", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "where", "t1", ".", "keyphrasename", "=", "value"], "question": "Show me the papers on Question Answering", "question_toks": ["Show", "me", "the", "papers", "on", "Question", "Answering"], "guid": 4976}}
{"text": "workshop: Workshop_ID, Date, Venue, Name; submission: Submission_ID, Scores, Author, College; Acceptance: Submission_ID, Workshop_ID, Result | For each submission, show the author and their affiliated college.", "sql": "SELECT Author ,  College FROM submission", "example": {"db_id": "workshop_paper", "query": "SELECT Author ,  College FROM submission", "query_toks": ["SELECT", "Author", ",", "College", "FROM", "submission"], "query_toks_no_value": ["select", "author", ",", "college", "from", "submission"], "question": "For each submission, show the author and their affiliated college.", "question_toks": ["For", "each", "submission", ",", "show", "the", "author", "and", "their", "affiliated", "college", "."], "guid": 4977}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | What are recent papers on deep learning ?", "sql": "SELECT DISTINCT t3.paperid  ,  t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\" ORDER BY t3.year DESC;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid  ,  t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\" ORDER BY t3.year DESC;", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", ",", "t3.year", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "WHERE", "t1.keyphrasename", "=", "``", "deep", "learning", "''", "ORDER", "BY", "t3.year", "DESC", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", ",", "t3", ".", "year", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "where", "t1", ".", "keyphrasename", "=", "value", "order", "by", "t3", ".", "year", "desc"], "question": "What are recent papers on deep learning ?", "question_toks": ["What", "are", "recent", "papers", "on", "deep", "learning", "?"], "guid": 4978}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | what are the papers in NIPS about TAIL ?", "sql": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"TAIL\" AND t4.venuename  =  \"NIPS\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"TAIL\" AND t4.venuename  =  \"NIPS\";", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "JOIN", "venue", "AS", "t4", "ON", "t4.venueid", "=", "t3.venueid", "WHERE", "t1.keyphrasename", "=", "``", "TAIL", "''", "AND", "t4.venuename", "=", "``", "NIPS", "''", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "join", "venue", "as", "t4", "on", "t4", ".", "venueid", "=", "t3", ".", "venueid", "where", "t1", ".", "keyphrasename", "=", "value", "and", "t4", ".", "venuename", "=", "value"], "question": "what are the papers in NIPS about TAIL ?", "question_toks": ["what", "are", "the", "papers", "in", "NIPS", "about", "TAIL", "?"], "guid": 4979}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | Latest paper by oren etzioni", "sql": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"oren etzioni\" ORDER BY t3.year DESC;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"oren etzioni\" ORDER BY t3.year DESC;", "query_toks": ["SELECT", "DISTINCT", "t2.paperid", "FROM", "writes", "AS", "t2", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "JOIN", "paper", "AS", "t3", "ON", "t2.paperid", "=", "t3.paperid", "WHERE", "t1.authorname", "=", "``", "oren", "etzioni", "''", "ORDER", "BY", "t3.year", "DESC", ";"], "query_toks_no_value": ["select", "distinct", "t2", ".", "paperid", "from", "writes", "as", "t2", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "join", "paper", "as", "t3", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "where", "t1", ".", "authorname", "=", "value", "order", "by", "t3", ".", "year", "desc"], "question": "Latest paper by oren etzioni", "question_toks": ["Latest", "paper", "by", "oren", "etzioni"], "guid": 4980}}
{"text": "workshop: Workshop_ID, Date, Venue, Name; submission: Submission_ID, Scores, Author, College; Acceptance: Submission_ID, Workshop_ID, Result | Which authors with submissions are from college \"Florida\" or \"Temple\"?", "sql": "SELECT Author FROM submission WHERE College  =  \"Florida\" OR College  =  \"Temple\"", "example": {"db_id": "workshop_paper", "query": "SELECT Author FROM submission WHERE College  =  \"Florida\" OR College  =  \"Temple\"", "query_toks": ["SELECT", "Author", "FROM", "submission", "WHERE", "College", "=", "``", "Florida", "''", "OR", "College", "=", "``", "Temple", "''"], "query_toks_no_value": ["select", "author", "from", "submission", "where", "college", "=", "value", "or", "college", "=", "value"], "question": "Which authors with submissions are from college \"Florida\" or \"Temple\"?", "question_toks": ["Which", "authors", "with", "submissions", "are", "from", "college", "``", "Florida", "''", "or", "``", "Temple", "''", "?"], "guid": 4981}}
{"text": "book_club: book_club_id, Year, Author_or_Editor, Book_Title, Publisher, Category, Result; movie: movie_id, Title, Year, Director, Budget_million, Gross_worldwide; culture_company: Company_name, Type, Incorporated_in, Group_Equity_Shareholding, book_club_id, movie_id | What are the titles and authors or editors that correspond to books made after 1989?", "sql": "SELECT book_title ,  author_or_editor FROM book_club WHERE YEAR  >  1989", "example": {"db_id": "culture_company", "query": "SELECT book_title ,  author_or_editor FROM book_club WHERE YEAR  >  1989", "query_toks": ["SELECT", "book_title", ",", "author_or_editor", "FROM", "book_club", "WHERE", "YEAR", ">", "1989"], "query_toks_no_value": ["select", "book_title", ",", "author_or_editor", "from", "book_club", "where", "year", ">", "value"], "question": "What are the titles and authors or editors that correspond to books made after 1989?", "question_toks": ["What", "are", "the", "titles", "and", "authors", "or", "editors", "that", "correspond", "to", "books", "made", "after", "1989", "?"], "guid": 4982}}
{"text": "Inst: instID, name, country; Authors: authID, lname, fname; Papers: paperID, title; Authorship: authID, instID, paperID, authOrder | Which authors have last name \"Ueno\"? List their first names.", "sql": "SELECT fname FROM authors WHERE lname  =  \"Ueno\"", "example": {"db_id": "icfp_1", "query": "SELECT fname FROM authors WHERE lname  =  \"Ueno\"", "query_toks": ["SELECT", "fname", "FROM", "authors", "WHERE", "lname", "=", "``", "Ueno", "''"], "query_toks_no_value": ["select", "fname", "from", "authors", "where", "lname", "=", "value"], "question": "Which authors have last name \"Ueno\"? List their first names.", "question_toks": ["Which", "authors", "have", "last", "name", "``", "Ueno", "''", "?", "List", "their", "first", "names", "."], "guid": 4983}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the number of papers published in the VLDB conference before 2000 .", "sql": "SELECT COUNT ( DISTINCT t2.title ) FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\" AND t2.year  <  2000;", "example": {"db_id": "academic", "query": "SELECT COUNT ( DISTINCT t2.title ) FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\" AND t2.year  <  2000;", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "t2.title", ")", "FROM", "publication", "AS", "t2", "JOIN", "conference", "AS", "t1", "ON", "t2.cid", "=", "t1.cid", "WHERE", "t1.name", "=", "``", "VLDB", "''", "AND", "t2.year", "<", "2000", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "t2", ".", "title", ")", "from", "publication", "as", "t2", "join", "conference", "as", "t1", "on", "t2", ".", "cid", "=", "t1", ".", "cid", "where", "t1", ".", "name", "=", "value", "and", "t2", ".", "year", "<", "value"], "question": "return me the number of papers published in the VLDB conference before 2000 .", "question_toks": ["return", "me", "the", "number", "of", "papers", "published", "in", "the", "VLDB", "conference", "before", "2000", "."], "guid": 4984}}
{"text": "workshop: Workshop_ID, Date, Venue, Name; submission: Submission_ID, Scores, Author, College; Acceptance: Submission_ID, Workshop_ID, Result | Find the author for each submission and list them in ascending order of submission score.", "sql": "SELECT Author FROM submission ORDER BY Scores ASC", "example": {"db_id": "workshop_paper", "query": "SELECT Author FROM submission ORDER BY Scores ASC", "query_toks": ["SELECT", "Author", "FROM", "submission", "ORDER", "BY", "Scores", "ASC"], "query_toks_no_value": ["select", "author", "from", "submission", "order", "by", "scores", "asc"], "question": "Find the author for each submission and list them in ascending order of submission score.", "question_toks": ["Find", "the", "author", "for", "each", "submission", "and", "list", "them", "in", "ascending", "order", "of", "submission", "score", "."], "guid": 4985}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | List of papers in pldi 2015", "sql": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"pldi\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"pldi\";", "query_toks": ["SELECT", "DISTINCT", "t1.paperid", "FROM", "venue", "AS", "t2", "JOIN", "paper", "AS", "t1", "ON", "t2.venueid", "=", "t1.venueid", "WHERE", "t1.year", "=", "2015", "AND", "t2.venuename", "=", "``", "pldi", "''", ";"], "query_toks_no_value": ["select", "distinct", "t1", ".", "paperid", "from", "venue", "as", "t2", "join", "paper", "as", "t1", "on", "t2", ".", "venueid", "=", "t1", ".", "venueid", "where", "t1", ".", "year", "=", "value", "and", "t2", ".", "venuename", "=", "value"], "question": "List of papers in pldi 2015", "question_toks": ["List", "of", "papers", "in", "pldi", "2015"], "guid": 4986}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | keyphrases used by Luke Zettlemoyer", "sql": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";", "query_toks": ["SELECT", "DISTINCT", "t1.keyphraseid", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "JOIN", "writes", "AS", "t4", "ON", "t4.paperid", "=", "t3.paperid", "JOIN", "author", "AS", "t5", "ON", "t4.authorid", "=", "t5.authorid", "WHERE", "t5.authorname", "=", "``", "Luke", "Zettlemoyer", "''", ";"], "query_toks_no_value": ["select", "distinct", "t1", ".", "keyphraseid", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "join", "writes", "as", "t4", "on", "t4", ".", "paperid", "=", "t3", ".", "paperid", "join", "author", "as", "t5", "on", "t4", ".", "authorid", "=", "t5", ".", "authorid", "where", "t5", ".", "authorname", "=", "value"], "question": "keyphrases used by Luke Zettlemoyer", "question_toks": ["keyphrases", "used", "by", "Luke", "Zettlemoyer"], "guid": 4987}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the conferences, which have papers by \" H. V. Jagadish \" .", "sql": "SELECT t2.name FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\";", "example": {"db_id": "academic", "query": "SELECT t2.name FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\";", "query_toks": ["SELECT", "t2.name", "FROM", "publication", "AS", "t4", "JOIN", "conference", "AS", "t2", "ON", "t4.cid", "=", "t2.cid", "JOIN", "writes", "AS", "t3", "ON", "t3.pid", "=", "t4.pid", "JOIN", "author", "AS", "t1", "ON", "t3.aid", "=", "t1.aid", "WHERE", "t1.name", "=", "``", "H.", "V.", "Jagadish", "''", ";"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "publication", "as", "t4", "join", "conference", "as", "t2", "on", "t4", ".", "cid", "=", "t2", ".", "cid", "join", "writes", "as", "t3", "on", "t3", ".", "pid", "=", "t4", ".", "pid", "join", "author", "as", "t1", "on", "t3", ".", "aid", "=", "t1", ".", "aid", "where", "t1", ".", "name", "=", "value"], "question": "return me the conferences, which have papers by \" H. V. Jagadish \" .", "question_toks": ["return", "me", "the", "conferences", ",", "which", "have", "papers", "by", "``", "H.", "V.", "Jagadish", "``", "."], "guid": 4988}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | How many papers did michael i. jordan publish in 2016", "sql": "SELECT DISTINCT COUNT ( t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"michael i. jordan\" AND t3.year  =  2016;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"michael i. jordan\" AND t3.year  =  2016;", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "t2.paperid", ")", "FROM", "writes", "AS", "t2", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "JOIN", "paper", "AS", "t3", "ON", "t2.paperid", "=", "t3.paperid", "WHERE", "t1.authorname", "=", "``", "michael", "i.", "jordan", "''", "AND", "t3.year", "=", "2016", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "t2", ".", "paperid", ")", "from", "writes", "as", "t2", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "join", "paper", "as", "t3", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "where", "t1", ".", "authorname", "=", "value", "and", "t3", ".", "year", "=", "value"], "question": "How many papers did michael i. jordan publish in 2016", "question_toks": ["How", "many", "papers", "did", "michael", "i.", "jordan", "publish", "in", "2016"], "guid": 4989}}
{"text": "Document_Types: document_type_code, document_description; Documents: document_id, document_type_code, grant_id, sent_date, response_received_date, other_details; Grants: grant_id, organisation_id, grant_amount, grant_start_date, grant_end_date, other_details; Organisation_Types: organisation_type, organisation_type_description; Organisations: organisation_id, organisation_type, organisation_details; Project_Outcomes: project_id, outcome_code, outcome_details; Project_Staff: staff_id, project_id, role_code, date_from, date_to, other_details; Projects: project_id, organisation_id, project_details; Research_Outcomes: outcome_code, outcome_description; Research_Staff: staff_id, employer_organisation_id, staff_details | Find the organisation type description of the organisation detailed as 'quo'.", "sql": "SELECT T1.organisation_type_description FROM organisation_Types AS T1 JOIN Organisations AS T2 ON T1.organisation_type  =  T2.organisation_type WHERE T2.organisation_details  =  'quo'", "example": {"db_id": "tracking_grants_for_research", "query": "SELECT T1.organisation_type_description FROM organisation_Types AS T1 JOIN Organisations AS T2 ON T1.organisation_type  =  T2.organisation_type WHERE T2.organisation_details  =  'quo'", "query_toks": ["SELECT", "T1.organisation_type_description", "FROM", "organisation_Types", "AS", "T1", "JOIN", "Organisations", "AS", "T2", "ON", "T1.organisation_type", "=", "T2.organisation_type", "WHERE", "T2.organisation_details", "=", "'quo", "'"], "query_toks_no_value": ["select", "t1", ".", "organisation_type_description", "from", "organisation_types", "as", "t1", "join", "organisations", "as", "t2", "on", "t1", ".", "organisation_type", "=", "t2", ".", "organisation_type", "where", "t2", ".", "organisation_details", "=", "value"], "question": "Find the organisation type description of the organisation detailed as 'quo'.", "question_toks": ["Find", "the", "organisation", "type", "description", "of", "the", "organisation", "detailed", "as", "'quo", "'", "."], "guid": 4990}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | what year had the most NIPS papers ?", "sql": "SELECT DISTINCT COUNT ( t1.paperid )  ,  t1.year FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"NIPS\" GROUP BY t1.year ORDER BY COUNT ( t1.paperid ) DESC;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( t1.paperid )  ,  t1.year FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"NIPS\" GROUP BY t1.year ORDER BY COUNT ( t1.paperid ) DESC;", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "t1.paperid", ")", ",", "t1.year", "FROM", "venue", "AS", "t2", "JOIN", "paper", "AS", "t1", "ON", "t2.venueid", "=", "t1.venueid", "WHERE", "t2.venuename", "=", "``", "NIPS", "''", "GROUP", "BY", "t1.year", "ORDER", "BY", "COUNT", "(", "t1.paperid", ")", "DESC", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "t1", ".", "paperid", ")", ",", "t1", ".", "year", "from", "venue", "as", "t2", "join", "paper", "as", "t1", "on", "t2", ".", "venueid", "=", "t1", ".", "venueid", "where", "t2", ".", "venuename", "=", "value", "group", "by", "t1", ".", "year", "order", "by", "count", "(", "t1", ".", "paperid", ")", "desc"], "question": "what year had the most NIPS papers ?", "question_toks": ["what", "year", "had", "the", "most", "NIPS", "papers", "?"], "guid": 4991}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | papers from 2014", "sql": "SELECT DISTINCT paperid FROM paper WHERE YEAR  =  2014;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT paperid FROM paper WHERE YEAR  =  2014;", "query_toks": ["SELECT", "DISTINCT", "paperid", "FROM", "paper", "WHERE", "YEAR", "=", "2014", ";"], "query_toks_no_value": ["select", "distinct", "paperid", "from", "paper", "where", "year", "=", "value"], "question": "papers from 2014", "question_toks": ["papers", "from", "2014"], "guid": 4992}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | How many paper does Christopher D. Manning have ?", "sql": "SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christopher D. Manning\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christopher D. Manning\";", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "DISTINCT", "t2.paperid", ")", "FROM", "writes", "AS", "t2", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "WHERE", "t1.authorname", "=", "``", "Christopher", "D.", "Manning", "''", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "distinct", "t2", ".", "paperid", ")", "from", "writes", "as", "t2", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "where", "t1", ".", "authorname", "=", "value"], "question": "How many paper does Christopher D. Manning have ?", "question_toks": ["How", "many", "paper", "does", "Christopher", "D.", "Manning", "have", "?"], "guid": 4993}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | TAIL papers used in NIPS", "sql": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"TAIL\" AND t4.venuename  =  \"NIPS\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"TAIL\" AND t4.venuename  =  \"NIPS\";", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "JOIN", "venue", "AS", "t4", "ON", "t4.venueid", "=", "t3.venueid", "WHERE", "t1.keyphrasename", "=", "``", "TAIL", "''", "AND", "t4.venuename", "=", "``", "NIPS", "''", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "join", "venue", "as", "t4", "on", "t4", ".", "venueid", "=", "t3", ".", "venueid", "where", "t1", ".", "keyphrasename", "=", "value", "and", "t4", ".", "venuename", "=", "value"], "question": "TAIL papers used in NIPS", "question_toks": ["TAIL", "papers", "used", "in", "NIPS"], "guid": 4994}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | Fetch me the most cited publications for Artificial Intelligence", "sql": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citingpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"Artificial Intelligence\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citingpaperid ) DESC;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citingpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"Artificial Intelligence\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citingpaperid ) DESC;", "query_toks": ["SELECT", "DISTINCT", "t4.citedpaperid", ",", "COUNT", "(", "t4.citingpaperid", ")", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "JOIN", "cite", "AS", "t4", "ON", "t3.paperid", "=", "t4.citedpaperid", "WHERE", "t1.keyphrasename", "=", "``", "Artificial", "Intelligence", "''", "GROUP", "BY", "t4.citedpaperid", "ORDER", "BY", "COUNT", "(", "t4.citingpaperid", ")", "DESC", ";"], "query_toks_no_value": ["select", "distinct", "t4", ".", "citedpaperid", ",", "count", "(", "t4", ".", "citingpaperid", ")", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "join", "cite", "as", "t4", "on", "t3", ".", "paperid", "=", "t4", ".", "citedpaperid", "where", "t1", ".", "keyphrasename", "=", "value", "group", "by", "t4", ".", "citedpaperid", "order", "by", "count", "(", "t4", ".", "citingpaperid", ")", "desc"], "question": "Fetch me the most cited publications for Artificial Intelligence", "question_toks": ["Fetch", "me", "the", "most", "cited", "publications", "for", "Artificial", "Intelligence"], "guid": 4995}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | how many papers about deep learning ?", "sql": "SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\";", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "DISTINCT", "t3.paperid", ")", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "WHERE", "t1.keyphrasename", "=", "``", "deep", "learning", "''", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "distinct", "t3", ".", "paperid", ")", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "where", "t1", ".", "keyphrasename", "=", "value"], "question": "how many papers about deep learning ?", "question_toks": ["how", "many", "papers", "about", "deep", "learning", "?"], "guid": 4996}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the number of organizations in Databases area located in \" North America \" .", "sql": "SELECT COUNT ( DISTINCT t2.name ) FROM domain_author AS t4 JOIN author AS t1 ON t4.aid  =  t1.aid JOIN DOMAIN AS t3 ON t3.did  =  t4.did JOIN organization AS t2 ON t2.oid  =  t1.oid WHERE t3.name  =  \"Databases\" AND t2.continent  =  \"North America\";", "example": {"db_id": "academic", "query": "SELECT COUNT ( DISTINCT t2.name ) FROM domain_author AS t4 JOIN author AS t1 ON t4.aid  =  t1.aid JOIN DOMAIN AS t3 ON t3.did  =  t4.did JOIN organization AS t2 ON t2.oid  =  t1.oid WHERE t3.name  =  \"Databases\" AND t2.continent  =  \"North America\";", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "t2.name", ")", "FROM", "domain_author", "AS", "t4", "JOIN", "author", "AS", "t1", "ON", "t4.aid", "=", "t1.aid", "JOIN", "DOMAIN", "AS", "t3", "ON", "t3.did", "=", "t4.did", "JOIN", "organization", "AS", "t2", "ON", "t2.oid", "=", "t1.oid", "WHERE", "t3.name", "=", "``", "Databases", "''", "AND", "t2.continent", "=", "``", "North", "America", "''", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "t2", ".", "name", ")", "from", "domain_author", "as", "t4", "join", "author", "as", "t1", "on", "t4", ".", "aid", "=", "t1", ".", "aid", "join", "domain", "as", "t3", "on", "t3", ".", "did", "=", "t4", ".", "did", "join", "organization", "as", "t2", "on", "t2", ".", "oid", "=", "t1", ".", "oid", "where", "t3", ".", "name", "=", "value", "and", "t2", ".", "continent", "=", "value"], "question": "return me the number of organizations in Databases area located in \" North America \" .", "question_toks": ["return", "me", "the", "number", "of", "organizations", "in", "Databases", "area", "located", "in", "``", "North", "America", "``", "."], "guid": 4997}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the authors who have papers in VLDB conference before 2002 after 1995 .", "sql": "SELECT t1.name FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t2.name  =  \"VLDB\" AND t4.year  <  2002 AND t4.year  >  1995;", "example": {"db_id": "academic", "query": "SELECT t1.name FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t2.name  =  \"VLDB\" AND t4.year  <  2002 AND t4.year  >  1995;", "query_toks": ["SELECT", "t1.name", "FROM", "publication", "AS", "t4", "JOIN", "conference", "AS", "t2", "ON", "t4.cid", "=", "t2.cid", "JOIN", "writes", "AS", "t3", "ON", "t3.pid", "=", "t4.pid", "JOIN", "author", "AS", "t1", "ON", "t3.aid", "=", "t1.aid", "WHERE", "t2.name", "=", "``", "VLDB", "''", "AND", "t4.year", "<", "2002", "AND", "t4.year", ">", "1995", ";"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "publication", "as", "t4", "join", "conference", "as", "t2", "on", "t4", ".", "cid", "=", "t2", ".", "cid", "join", "writes", "as", "t3", "on", "t3", ".", "pid", "=", "t4", ".", "pid", "join", "author", "as", "t1", "on", "t3", ".", "aid", "=", "t1", ".", "aid", "where", "t2", ".", "name", "=", "value", "and", "t4", ".", "year", "<", "value", "and", "t4", ".", "year", ">", "value"], "question": "return me the authors who have papers in VLDB conference before 2002 after 1995 .", "question_toks": ["return", "me", "the", "authors", "who", "have", "papers", "in", "VLDB", "conference", "before", "2002", "after", "1995", "."], "guid": 4998}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | Papers from pldi 2015 conference", "sql": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"pldi\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"pldi\";", "query_toks": ["SELECT", "DISTINCT", "t1.paperid", "FROM", "venue", "AS", "t2", "JOIN", "paper", "AS", "t1", "ON", "t2.venueid", "=", "t1.venueid", "WHERE", "t1.year", "=", "2015", "AND", "t2.venuename", "=", "``", "pldi", "''", ";"], "query_toks_no_value": ["select", "distinct", "t1", ".", "paperid", "from", "venue", "as", "t2", "join", "paper", "as", "t1", "on", "t2", ".", "venueid", "=", "t1", ".", "venueid", "where", "t1", ".", "year", "=", "value", "and", "t2", ".", "venuename", "=", "value"], "question": "Papers from pldi 2015 conference", "question_toks": ["Papers", "from", "pldi", "2015", "conference"], "guid": 4999}}
{"text": "Inst: instID, name, country; Authors: authID, lname, fname; Papers: paperID, title; Authorship: authID, instID, paperID, authOrder | Which institution does \"Katsuhiro Ueno\" belong to?", "sql": "SELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t1.fname  =  \"Katsuhiro\" AND t1.lname  =  \"Ueno\"", "example": {"db_id": "icfp_1", "query": "SELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t1.fname  =  \"Katsuhiro\" AND t1.lname  =  \"Ueno\"", "query_toks": ["SELECT", "DISTINCT", "t3.name", "FROM", "authors", "AS", "t1", "JOIN", "authorship", "AS", "t2", "ON", "t1.authid", "=", "t2.authid", "JOIN", "inst", "AS", "t3", "ON", "t2.instid", "=", "t3.instid", "WHERE", "t1.fname", "=", "``", "Katsuhiro", "''", "AND", "t1.lname", "=", "``", "Ueno", "''"], "query_toks_no_value": ["select", "distinct", "t3", ".", "name", "from", "authors", "as", "t1", "join", "authorship", "as", "t2", "on", "t1", ".", "authid", "=", "t2", ".", "authid", "join", "inst", "as", "t3", "on", "t2", ".", "instid", "=", "t3", ".", "instid", "where", "t1", ".", "fname", "=", "value", "and", "t1", ".", "lname", "=", "value"], "question": "Which institution does \"Katsuhiro Ueno\" belong to?", "question_toks": ["Which", "institution", "does", "``", "Katsuhiro", "Ueno", "''", "belong", "to", "?"], "guid": 5000}}
{"text": "Scientists: SSN, Name; Projects: Code, Name, Hours; AssignedTo: Scientist, Project | What is the sum of hours for projects that scientists with the name Michael Rogers or Carol Smith are assigned to?", "sql": "SELECT sum(T2.hours) FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T3.name  =  'Michael Rogers' OR T3.name  =  'Carol Smith'", "example": {"db_id": "scientist_1", "query": "SELECT sum(T2.hours) FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T3.name  =  'Michael Rogers' OR T3.name  =  'Carol Smith'", "query_toks": ["SELECT", "sum", "(", "T2.hours", ")", "FROM", "assignedto", "AS", "T1", "JOIN", "projects", "AS", "T2", "ON", "T1.project", "=", "T2.code", "JOIN", "scientists", "AS", "T3", "ON", "T1.scientist", "=", "T3.SSN", "WHERE", "T3.name", "=", "'Michael", "Rogers", "'", "OR", "T3.name", "=", "'Carol", "Smith", "'"], "query_toks_no_value": ["select", "sum", "(", "t2", ".", "hours", ")", "from", "assignedto", "as", "t1", "join", "projects", "as", "t2", "on", "t1", ".", "project", "=", "t2", ".", "code", "join", "scientists", "as", "t3", "on", "t1", ".", "scientist", "=", "t3", ".", "ssn", "where", "t3", ".", "name", "=", "value", "or", "t3", ".", "name", "=", "value"], "question": "What is the sum of hours for projects that scientists with the name Michael Rogers or Carol Smith are assigned to?", "question_toks": ["What", "is", "the", "sum", "of", "hours", "for", "projects", "that", "scientists", "with", "the", "name", "Michael", "Rogers", "or", "Carol", "Smith", "are", "assigned", "to", "?"], "guid": 5001}}
{"text": "Inst: instID, name, country; Authors: authID, lname, fname; Papers: paperID, title; Authorship: authID, instID, paperID, authOrder | Give me a list of all the last names of authors sorted in alphabetical order", "sql": "SELECT lname FROM authors ORDER BY lname", "example": {"db_id": "icfp_1", "query": "SELECT lname FROM authors ORDER BY lname", "query_toks": ["SELECT", "lname", "FROM", "authors", "ORDER", "BY", "lname"], "query_toks_no_value": ["select", "lname", "from", "authors", "order", "by", "lname"], "question": "Give me a list of all the last names of authors sorted in alphabetical order", "question_toks": ["Give", "me", "a", "list", "of", "all", "the", "last", "names", "of", "authors", "sorted", "in", "alphabetical", "order"], "guid": 5002}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | I want the co-authors of papers on Machine Translation Output with Philipp Koehn", "sql": "SELECT DISTINCT t1.authorid FROM paperkeyphrase AS t6 JOIN keyphrase AS t3 ON t6.keyphraseid  =  t3.keyphraseid JOIN writes AS t4 ON t4.paperid  =  t6.paperid JOIN writes AS t5 ON t5.paperid  =  t4.paperid JOIN author AS t1 ON t5.authorid  =  t1.authorid JOIN author AS t2 ON t4.authorid  =  t2.authorid WHERE t2.authorname  =  \"Philipp Koehn\" AND t3.keyphrasename  =  \"Machine Translation Output\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t1.authorid FROM paperkeyphrase AS t6 JOIN keyphrase AS t3 ON t6.keyphraseid  =  t3.keyphraseid JOIN writes AS t4 ON t4.paperid  =  t6.paperid JOIN writes AS t5 ON t5.paperid  =  t4.paperid JOIN author AS t1 ON t5.authorid  =  t1.authorid JOIN author AS t2 ON t4.authorid  =  t2.authorid WHERE t2.authorname  =  \"Philipp Koehn\" AND t3.keyphrasename  =  \"Machine Translation Output\";", "query_toks": ["SELECT", "DISTINCT", "t1.authorid", "FROM", "paperkeyphrase", "AS", "t6", "JOIN", "keyphrase", "AS", "t3", "ON", "t6.keyphraseid", "=", "t3.keyphraseid", "JOIN", "writes", "AS", "t4", "ON", "t4.paperid", "=", "t6.paperid", "JOIN", "writes", "AS", "t5", "ON", "t5.paperid", "=", "t4.paperid", "JOIN", "author", "AS", "t1", "ON", "t5.authorid", "=", "t1.authorid", "JOIN", "author", "AS", "t2", "ON", "t4.authorid", "=", "t2.authorid", "WHERE", "t2.authorname", "=", "``", "Philipp", "Koehn", "''", "AND", "t3.keyphrasename", "=", "``", "Machine", "Translation", "Output", "''", ";"], "query_toks_no_value": ["select", "distinct", "t1", ".", "authorid", "from", "paperkeyphrase", "as", "t6", "join", "keyphrase", "as", "t3", "on", "t6", ".", "keyphraseid", "=", "t3", ".", "keyphraseid", "join", "writes", "as", "t4", "on", "t4", ".", "paperid", "=", "t6", ".", "paperid", "join", "writes", "as", "t5", "on", "t5", ".", "paperid", "=", "t4", ".", "paperid", "join", "author", "as", "t1", "on", "t5", ".", "authorid", "=", "t1", ".", "authorid", "join", "author", "as", "t2", "on", "t4", ".", "authorid", "=", "t2", ".", "authorid", "where", "t2", ".", "authorname", "=", "value", "and", "t3", ".", "keyphrasename", "=", "value"], "question": "I want the co-authors of papers on Machine Translation Output with Philipp Koehn", "question_toks": ["I", "want", "the", "co-authors", "of", "papers", "on", "Machine", "Translation", "Output", "with", "Philipp", "Koehn"], "guid": 5003}}
{"text": "Document_Types: document_type_code, document_description; Documents: document_id, document_type_code, grant_id, sent_date, response_received_date, other_details; Grants: grant_id, organisation_id, grant_amount, grant_start_date, grant_end_date, other_details; Organisation_Types: organisation_type, organisation_type_description; Organisations: organisation_id, organisation_type, organisation_details; Project_Outcomes: project_id, outcome_code, outcome_details; Project_Staff: staff_id, project_id, role_code, date_from, date_to, other_details; Projects: project_id, organisation_id, project_details; Research_Outcomes: outcome_code, outcome_description; Research_Staff: staff_id, employer_organisation_id, staff_details | What is the total grant amount of the organisations described as research?", "sql": "SELECT sum(grant_amount) FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id  =  T2.organisation_id JOIN organisation_Types AS T3 ON T2.organisation_type  =  T3.organisation_type WHERE T3.organisation_type_description  =  'Research'", "example": {"db_id": "tracking_grants_for_research", "query": "SELECT sum(grant_amount) FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id  =  T2.organisation_id JOIN organisation_Types AS T3 ON T2.organisation_type  =  T3.organisation_type WHERE T3.organisation_type_description  =  'Research'", "query_toks": ["SELECT", "sum", "(", "grant_amount", ")", "FROM", "Grants", "AS", "T1", "JOIN", "Organisations", "AS", "T2", "ON", "T1.organisation_id", "=", "T2.organisation_id", "JOIN", "organisation_Types", "AS", "T3", "ON", "T2.organisation_type", "=", "T3.organisation_type", "WHERE", "T3.organisation_type_description", "=", "'Research", "'"], "query_toks_no_value": ["select", "sum", "(", "grant_amount", ")", "from", "grants", "as", "t1", "join", "organisations", "as", "t2", "on", "t1", ".", "organisation_id", "=", "t2", ".", "organisation_id", "join", "organisation_types", "as", "t3", "on", "t2", ".", "organisation_type", "=", "t3", ".", "organisation_type", "where", "t3", ".", "organisation_type_description", "=", "value"], "question": "What is the total grant amount of the organisations described as research?", "question_toks": ["What", "is", "the", "total", "grant", "amount", "of", "the", "organisations", "described", "as", "research", "?"], "guid": 5004}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | how many David M. Blei papers are in AISTATS ?", "sql": "SELECT DISTINCT COUNT ( t3.paperid ) FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"David M. Blei\" AND t4.venuename  =  \"AISTATS\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( t3.paperid ) FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"David M. Blei\" AND t4.venuename  =  \"AISTATS\";", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "t3.paperid", ")", "FROM", "venue", "AS", "t4", "JOIN", "paper", "AS", "t3", "ON", "t4.venueid", "=", "t3.venueid", "JOIN", "writes", "AS", "t2", "ON", "t2.paperid", "=", "t3.paperid", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "WHERE", "t1.authorname", "=", "``", "David", "M.", "Blei", "''", "AND", "t4.venuename", "=", "``", "AISTATS", "''", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "t3", ".", "paperid", ")", "from", "venue", "as", "t4", "join", "paper", "as", "t3", "on", "t4", ".", "venueid", "=", "t3", ".", "venueid", "join", "writes", "as", "t2", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "where", "t1", ".", "authorname", "=", "value", "and", "t4", ".", "venuename", "=", "value"], "question": "how many David M. Blei papers are in AISTATS ?", "question_toks": ["how", "many", "David", "M.", "Blei", "papers", "are", "in", "AISTATS", "?"], "guid": 5005}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | recent papers written by sanjeev arora", "sql": "SELECT DISTINCT t1.keyphrasename  ,  t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"sanjeev arora\" ORDER BY t3.year DESC;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t1.keyphrasename  ,  t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"sanjeev arora\" ORDER BY t3.year DESC;", "query_toks": ["SELECT", "DISTINCT", "t1.keyphrasename", ",", "t3.year", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "JOIN", "writes", "AS", "t4", "ON", "t4.paperid", "=", "t3.paperid", "JOIN", "author", "AS", "t5", "ON", "t4.authorid", "=", "t5.authorid", "WHERE", "t5.authorname", "=", "``", "sanjeev", "arora", "''", "ORDER", "BY", "t3.year", "DESC", ";"], "query_toks_no_value": ["select", "distinct", "t1", ".", "keyphrasename", ",", "t3", ".", "year", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "join", "writes", "as", "t4", "on", "t4", ".", "paperid", "=", "t3", ".", "paperid", "join", "author", "as", "t5", "on", "t4", ".", "authorid", "=", "t5", ".", "authorid", "where", "t5", ".", "authorname", "=", "value", "order", "by", "t3", ".", "year", "desc"], "question": "recent papers written by sanjeev arora", "question_toks": ["recent", "papers", "written", "by", "sanjeev", "arora"], "guid": 5006}}
{"text": "Inst: instID, name, country; Authors: authID, lname, fname; Papers: paperID, title; Authorship: authID, instID, paperID, authOrder | Find the papers which have \"Olin Shivers\" as an author.", "sql": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t1.fname  =  \"Olin\" AND t1.lname  =  \"Shivers\"", "example": {"db_id": "icfp_1", "query": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t1.fname  =  \"Olin\" AND t1.lname  =  \"Shivers\"", "query_toks": ["SELECT", "t3.title", "FROM", "authors", "AS", "t1", "JOIN", "authorship", "AS", "t2", "ON", "t1.authid", "=", "t2.authid", "JOIN", "papers", "AS", "t3", "ON", "t2.paperid", "=", "t3.paperid", "WHERE", "t1.fname", "=", "``", "Olin", "''", "AND", "t1.lname", "=", "``", "Shivers", "''"], "query_toks_no_value": ["select", "t3", ".", "title", "from", "authors", "as", "t1", "join", "authorship", "as", "t2", "on", "t1", ".", "authid", "=", "t2", ".", "authid", "join", "papers", "as", "t3", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "where", "t1", ".", "fname", "=", "value", "and", "t1", ".", "lname", "=", "value"], "question": "Find the papers which have \"Olin Shivers\" as an author.", "question_toks": ["Find", "the", "papers", "which", "have", "``", "Olin", "Shivers", "''", "as", "an", "author", "."], "guid": 5007}}
{"text": "Scientists: SSN, Name; Projects: Code, Name, Hours; AssignedTo: Scientist, Project | Find the names of scientists who are not working on the project with the highest hours.", "sql": "SELECT name FROM scientists EXCEPT SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.hours  =  (SELECT max(hours) FROM projects)", "example": {"db_id": "scientist_1", "query": "SELECT name FROM scientists EXCEPT SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.hours  =  (SELECT max(hours) FROM projects)", "query_toks": ["SELECT", "name", "FROM", "scientists", "EXCEPT", "SELECT", "T3.name", "FROM", "assignedto", "AS", "T1", "JOIN", "projects", "AS", "T2", "ON", "T1.project", "=", "T2.code", "JOIN", "scientists", "AS", "T3", "ON", "T1.scientist", "=", "T3.SSN", "WHERE", "T2.hours", "=", "(", "SELECT", "max", "(", "hours", ")", "FROM", "projects", ")"], "query_toks_no_value": ["select", "name", "from", "scientists", "except", "select", "t3", ".", "name", "from", "assignedto", "as", "t1", "join", "projects", "as", "t2", "on", "t1", ".", "project", "=", "t2", ".", "code", "join", "scientists", "as", "t3", "on", "t1", ".", "scientist", "=", "t3", ".", "ssn", "where", "t2", ".", "hours", "=", "(", "select", "max", "(", "hours", ")", "from", "projects", ")"], "question": "Find the names of scientists who are not working on the project with the highest hours.", "question_toks": ["Find", "the", "names", "of", "scientists", "who", "are", "not", "working", "on", "the", "project", "with", "the", "highest", "hours", "."], "guid": 5008}}
{"text": "Document_Types: document_type_code, document_description; Documents: document_id, document_type_code, grant_id, sent_date, response_received_date, other_details; Grants: grant_id, organisation_id, grant_amount, grant_start_date, grant_end_date, other_details; Organisation_Types: organisation_type, organisation_type_description; Organisations: organisation_id, organisation_type, organisation_details; Project_Outcomes: project_id, outcome_code, outcome_details; Project_Staff: staff_id, project_id, role_code, date_from, date_to, other_details; Projects: project_id, organisation_id, project_details; Research_Outcomes: outcome_code, outcome_description; Research_Staff: staff_id, employer_organisation_id, staff_details | How many tasks are there in total?", "sql": "SELECT count(*) FROM Tasks", "example": {"db_id": "tracking_grants_for_research", "query": "SELECT count(*) FROM Tasks", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Tasks"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "tasks"], "question": "How many tasks are there in total?", "question_toks": ["How", "many", "tasks", "are", "there", "in", "total", "?"], "guid": 5009}}
{"text": "Inst: instID, name, country; Authors: authID, lname, fname; Papers: paperID, title; Authorship: authID, instID, paperID, authOrder | Retrieve all the first and last names of authors in the alphabetical order of last names.", "sql": "SELECT fname ,  lname FROM authors ORDER BY lname", "example": {"db_id": "icfp_1", "query": "SELECT fname ,  lname FROM authors ORDER BY lname", "query_toks": ["SELECT", "fname", ",", "lname", "FROM", "authors", "ORDER", "BY", "lname"], "query_toks_no_value": ["select", "fname", ",", "lname", "from", "authors", "order", "by", "lname"], "question": "Retrieve all the first and last names of authors in the alphabetical order of last names.", "question_toks": ["Retrieve", "all", "the", "first", "and", "last", "names", "of", "authors", "in", "the", "alphabetical", "order", "of", "last", "names", "."], "guid": 5010}}
{"text": "Inst: instID, name, country; Authors: authID, lname, fname; Papers: paperID, title; Authorship: authID, instID, paperID, authOrder | Find all the papers published by the institution \"Google\".", "sql": "SELECT DISTINCT t1.title FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Google\"", "example": {"db_id": "icfp_1", "query": "SELECT DISTINCT t1.title FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Google\"", "query_toks": ["SELECT", "DISTINCT", "t1.title", "FROM", "papers", "AS", "t1", "JOIN", "authorship", "AS", "t2", "ON", "t1.paperid", "=", "t2.paperid", "JOIN", "inst", "AS", "t3", "ON", "t2.instid", "=", "t3.instid", "WHERE", "t3.name", "=", "``", "Google", "''"], "query_toks_no_value": ["select", "distinct", "t1", ".", "title", "from", "papers", "as", "t1", "join", "authorship", "as", "t2", "on", "t1", ".", "paperid", "=", "t2", ".", "paperid", "join", "inst", "as", "t3", "on", "t2", ".", "instid", "=", "t3", ".", "instid", "where", "t3", ".", "name", "=", "value"], "question": "Find all the papers published by the institution \"Google\".", "question_toks": ["Find", "all", "the", "papers", "published", "by", "the", "institution", "``", "Google", "''", "."], "guid": 5011}}
{"text": "book_club: book_club_id, Year, Author_or_Editor, Book_Title, Publisher, Category, Result; movie: movie_id, Title, Year, Director, Budget_million, Gross_worldwide; culture_company: Company_name, Type, Incorporated_in, Group_Equity_Shareholding, book_club_id, movie_id | What are the years, titles, and publishers for all books, ordered by year descending?", "sql": "SELECT YEAR ,  book_title ,  publisher FROM book_club ORDER BY YEAR DESC", "example": {"db_id": "culture_company", "query": "SELECT YEAR ,  book_title ,  publisher FROM book_club ORDER BY YEAR DESC", "query_toks": ["SELECT", "YEAR", ",", "book_title", ",", "publisher", "FROM", "book_club", "ORDER", "BY", "YEAR", "DESC"], "query_toks_no_value": ["select", "year", ",", "book_title", ",", "publisher", "from", "book_club", "order", "by", "year", "desc"], "question": "What are the years, titles, and publishers for all books, ordered by year descending?", "question_toks": ["What", "are", "the", "years", ",", "titles", ",", "and", "publishers", "for", "all", "books", ",", "ordered", "by", "year", "descending", "?"], "guid": 5012}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | papers before 2010 about character recognition", "sql": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"character recognition\" AND t3.year  <  2010;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"character recognition\" AND t3.year  <  2010;", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "WHERE", "t1.keyphrasename", "=", "``", "character", "recognition", "''", "AND", "t3.year", "<", "2010", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "where", "t1", ".", "keyphrasename", "=", "value", "and", "t3", ".", "year", "<", "value"], "question": "papers before 2010 about character recognition", "question_toks": ["papers", "before", "2010", "about", "character", "recognition"], "guid": 5013}}
{"text": "Inst: instID, name, country; Authors: authID, lname, fname; Papers: paperID, title; Authorship: authID, instID, paperID, authOrder | Find the last names of all the authors that have written a paper with title containing the word \"Monadic\".", "sql": "SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title LIKE \"%Monadic%\"", "example": {"db_id": "icfp_1", "query": "SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title LIKE \"%Monadic%\"", "query_toks": ["SELECT", "t1.lname", "FROM", "authors", "AS", "t1", "JOIN", "authorship", "AS", "t2", "ON", "t1.authid", "=", "t2.authid", "JOIN", "papers", "AS", "t3", "ON", "t2.paperid", "=", "t3.paperid", "WHERE", "t3.title", "LIKE", "``", "%", "Monadic", "%", "''"], "query_toks_no_value": ["select", "t1", ".", "lname", "from", "authors", "as", "t1", "join", "authorship", "as", "t2", "on", "t1", ".", "authid", "=", "t2", ".", "authid", "join", "papers", "as", "t3", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "where", "t3", ".", "title", "like", "value"], "question": "Find the last names of all the authors that have written a paper with title containing the word \"Monadic\".", "question_toks": ["Find", "the", "last", "names", "of", "all", "the", "authors", "that", "have", "written", "a", "paper", "with", "title", "containing", "the", "word", "``", "Monadic", "''", "."], "guid": 5014}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | How many papers in ACL 2015 ?", "sql": "SELECT DISTINCT COUNT ( DISTINCT t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"ACL\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( DISTINCT t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"ACL\";", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "DISTINCT", "t1.paperid", ")", "FROM", "venue", "AS", "t2", "JOIN", "paper", "AS", "t1", "ON", "t2.venueid", "=", "t1.venueid", "WHERE", "t1.year", "=", "2015", "AND", "t2.venuename", "=", "``", "ACL", "''", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "distinct", "t1", ".", "paperid", ")", "from", "venue", "as", "t2", "join", "paper", "as", "t1", "on", "t2", ".", "venueid", "=", "t1", ".", "venueid", "where", "t1", ".", "year", "=", "value", "and", "t2", ".", "venuename", "=", "value"], "question": "How many papers in ACL 2015 ?", "question_toks": ["How", "many", "papers", "in", "ACL", "2015", "?"], "guid": 5015}}
{"text": "Document_Types: document_type_code, document_description; Documents: document_id, document_type_code, grant_id, sent_date, response_received_date, other_details; Grants: grant_id, organisation_id, grant_amount, grant_start_date, grant_end_date, other_details; Organisation_Types: organisation_type, organisation_type_description; Organisations: organisation_id, organisation_type, organisation_details; Project_Outcomes: project_id, outcome_code, outcome_details; Project_Staff: staff_id, project_id, role_code, date_from, date_to, other_details; Projects: project_id, organisation_id, project_details; Research_Outcomes: outcome_code, outcome_description; Research_Staff: staff_id, employer_organisation_id, staff_details | List the project details of the projects which did not hire any staff for a researcher role.", "sql": "SELECT project_details FROM Projects WHERE project_id NOT IN ( SELECT project_id FROM Project_Staff WHERE role_code  =  'researcher' )", "example": {"db_id": "tracking_grants_for_research", "query": "SELECT project_details FROM Projects WHERE project_id NOT IN ( SELECT project_id FROM Project_Staff WHERE role_code  =  'researcher' )", "query_toks": ["SELECT", "project_details", "FROM", "Projects", "WHERE", "project_id", "NOT", "IN", "(", "SELECT", "project_id", "FROM", "Project_Staff", "WHERE", "role_code", "=", "'researcher", "'", ")"], "query_toks_no_value": ["select", "project_details", "from", "projects", "where", "project_id", "not", "in", "(", "select", "project_id", "from", "project_staff", "where", "role_code", "=", "value", ")"], "question": "List the project details of the projects which did not hire any staff for a researcher role.", "question_toks": ["List", "the", "project", "details", "of", "the", "projects", "which", "did", "not", "hire", "any", "staff", "for", "a", "researcher", "role", "."], "guid": 5016}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | how many papers does Christopher D. Manning have ?", "sql": "SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christopher D. Manning\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christopher D. Manning\";", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "DISTINCT", "t2.paperid", ")", "FROM", "writes", "AS", "t2", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "WHERE", "t1.authorname", "=", "``", "Christopher", "D.", "Manning", "''", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "distinct", "t2", ".", "paperid", ")", "from", "writes", "as", "t2", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "where", "t1", ".", "authorname", "=", "value"], "question": "how many papers does Christopher D. Manning have ?", "question_toks": ["how", "many", "papers", "does", "Christopher", "D.", "Manning", "have", "?"], "guid": 5017}}
{"text": "Inst: instID, name, country; Authors: authID, lname, fname; Papers: paperID, title; Authorship: authID, instID, paperID, authOrder | Find the first and last name of the author(s) who wrote the paper \"Nameless, Painless\".", "sql": "SELECT t1.fname ,  t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title  =  \"Nameless ,  Painless\"", "example": {"db_id": "icfp_1", "query": "SELECT t1.fname ,  t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title  =  \"Nameless ,  Painless\"", "query_toks": ["SELECT", "t1.fname", ",", "t1.lname", "FROM", "authors", "AS", "t1", "JOIN", "authorship", "AS", "t2", "ON", "t1.authid", "=", "t2.authid", "JOIN", "papers", "AS", "t3", "ON", "t2.paperid", "=", "t3.paperid", "WHERE", "t3.title", "=", "``", "Nameless", ",", "Painless", "''"], "query_toks_no_value": ["select", "t1", ".", "fname", ",", "t1", ".", "lname", "from", "authors", "as", "t1", "join", "authorship", "as", "t2", "on", "t1", ".", "authid", "=", "t2", ".", "authid", "join", "papers", "as", "t3", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "where", "t3", ".", "title", "=", "value"], "question": "Find the first and last name of the author(s) who wrote the paper \"Nameless, Painless\".", "question_toks": ["Find", "the", "first", "and", "last", "name", "of", "the", "author", "(", "s", ")", "who", "wrote", "the", "paper", "``", "Nameless", ",", "Painless", "''", "."], "guid": 5018}}
{"text": "Document_Types: document_type_code, document_description; Documents: document_id, document_type_code, grant_id, sent_date, response_received_date, other_details; Grants: grant_id, organisation_id, grant_amount, grant_start_date, grant_end_date, other_details; Organisation_Types: organisation_type, organisation_type_description; Organisations: organisation_id, organisation_type, organisation_details; Project_Outcomes: project_id, outcome_code, outcome_details; Project_Staff: staff_id, project_id, role_code, date_from, date_to, other_details; Projects: project_id, organisation_id, project_details; Research_Outcomes: outcome_code, outcome_description; Research_Staff: staff_id, employer_organisation_id, staff_details | What is the most common role for the staff?", "sql": "SELECT role_code FROM Project_Staff GROUP BY role_code ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "tracking_grants_for_research", "query": "SELECT role_code FROM Project_Staff GROUP BY role_code ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "role_code", "FROM", "Project_Staff", "GROUP", "BY", "role_code", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "role_code", "from", "project_staff", "group", "by", "role_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the most common role for the staff?", "question_toks": ["What", "is", "the", "most", "common", "role", "for", "the", "staff", "?"], "guid": 5019}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | What are some papers dealing with Semantic Data in YAGO ?", "sql": "SELECT DISTINCT t2.paperid FROM paperdataset AS t3 JOIN dataset AS t1 ON t3.datasetid  =  t1.datasetid JOIN paperkeyphrase AS t2 ON t2.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t2.keyphraseid  =  t4.keyphraseid WHERE t1.datasetname  =  \"YAGO\" AND t4.keyphrasename  =  \"Semantic Data\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t2.paperid FROM paperdataset AS t3 JOIN dataset AS t1 ON t3.datasetid  =  t1.datasetid JOIN paperkeyphrase AS t2 ON t2.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t2.keyphraseid  =  t4.keyphraseid WHERE t1.datasetname  =  \"YAGO\" AND t4.keyphrasename  =  \"Semantic Data\";", "query_toks": ["SELECT", "DISTINCT", "t2.paperid", "FROM", "paperdataset", "AS", "t3", "JOIN", "dataset", "AS", "t1", "ON", "t3.datasetid", "=", "t1.datasetid", "JOIN", "paperkeyphrase", "AS", "t2", "ON", "t2.paperid", "=", "t3.paperid", "JOIN", "keyphrase", "AS", "t4", "ON", "t2.keyphraseid", "=", "t4.keyphraseid", "WHERE", "t1.datasetname", "=", "``", "YAGO", "''", "AND", "t4.keyphrasename", "=", "``", "Semantic", "Data", "''", ";"], "query_toks_no_value": ["select", "distinct", "t2", ".", "paperid", "from", "paperdataset", "as", "t3", "join", "dataset", "as", "t1", "on", "t3", ".", "datasetid", "=", "t1", ".", "datasetid", "join", "paperkeyphrase", "as", "t2", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "join", "keyphrase", "as", "t4", "on", "t2", ".", "keyphraseid", "=", "t4", ".", "keyphraseid", "where", "t1", ".", "datasetname", "=", "value", "and", "t4", ".", "keyphrasename", "=", "value"], "question": "What are some papers dealing with Semantic Data in YAGO ?", "question_toks": ["What", "are", "some", "papers", "dealing", "with", "Semantic", "Data", "in", "YAGO", "?"], "guid": 5020}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | How many papers does Ed Desmond have in Semantic Parsing area ?", "sql": "SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperkeyphrase AS t1 JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid JOIN writes AS t3 ON t3.paperid  =  t1.paperid JOIN author AS t2 ON t3.authorid  =  t2.authorid WHERE t2.authorname  =  \"Ed Desmond\" AND t4.keyphrasename  =  \"Semantic Parsing\";", "example": {"db_id": "scholar", "query": "SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperkeyphrase AS t1 JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid JOIN writes AS t3 ON t3.paperid  =  t1.paperid JOIN author AS t2 ON t3.authorid  =  t2.authorid WHERE t2.authorname  =  \"Ed Desmond\" AND t4.keyphrasename  =  \"Semantic Parsing\";", "query_toks": ["SELECT", "DISTINCT", "COUNT", "(", "DISTINCT", "t3.paperid", ")", "FROM", "paperkeyphrase", "AS", "t1", "JOIN", "keyphrase", "AS", "t4", "ON", "t1.keyphraseid", "=", "t4.keyphraseid", "JOIN", "writes", "AS", "t3", "ON", "t3.paperid", "=", "t1.paperid", "JOIN", "author", "AS", "t2", "ON", "t3.authorid", "=", "t2.authorid", "WHERE", "t2.authorname", "=", "``", "Ed", "Desmond", "''", "AND", "t4.keyphrasename", "=", "``", "Semantic", "Parsing", "''", ";"], "query_toks_no_value": ["select", "distinct", "count", "(", "distinct", "t3", ".", "paperid", ")", "from", "paperkeyphrase", "as", "t1", "join", "keyphrase", "as", "t4", "on", "t1", ".", "keyphraseid", "=", "t4", ".", "keyphraseid", "join", "writes", "as", "t3", "on", "t3", ".", "paperid", "=", "t1", ".", "paperid", "join", "author", "as", "t2", "on", "t3", ".", "authorid", "=", "t2", ".", "authorid", "where", "t2", ".", "authorname", "=", "value", "and", "t4", ".", "keyphrasename", "=", "value"], "question": "How many papers does Ed Desmond have in Semantic Parsing area ?", "question_toks": ["How", "many", "papers", "does", "Ed", "Desmond", "have", "in", "Semantic", "Parsing", "area", "?"], "guid": 5021}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the number of keywords in PVLDB .", "sql": "SELECT COUNT ( DISTINCT t1.keyword ) FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t2 ON t2.pid  =  t4.pid JOIN journal AS t3 ON t2.jid  =  t3.jid WHERE t3.name  =  \"PVLDB\";", "example": {"db_id": "academic", "query": "SELECT COUNT ( DISTINCT t1.keyword ) FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t2 ON t2.pid  =  t4.pid JOIN journal AS t3 ON t2.jid  =  t3.jid WHERE t3.name  =  \"PVLDB\";", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "t1.keyword", ")", "FROM", "publication_keyword", "AS", "t4", "JOIN", "keyword", "AS", "t1", "ON", "t4.kid", "=", "t1.kid", "JOIN", "publication", "AS", "t2", "ON", "t2.pid", "=", "t4.pid", "JOIN", "journal", "AS", "t3", "ON", "t2.jid", "=", "t3.jid", "WHERE", "t3.name", "=", "``", "PVLDB", "''", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "t1", ".", "keyword", ")", "from", "publication_keyword", "as", "t4", "join", "keyword", "as", "t1", "on", "t4", ".", "kid", "=", "t1", ".", "kid", "join", "publication", "as", "t2", "on", "t2", ".", "pid", "=", "t4", ".", "pid", "join", "journal", "as", "t3", "on", "t2", ".", "jid", "=", "t3", ".", "jid", "where", "t3", ".", "name", "=", "value"], "question": "return me the number of keywords in PVLDB .", "question_toks": ["return", "me", "the", "number", "of", "keywords", "in", "PVLDB", "."], "guid": 5022}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | What is the latest paper by oren etzioni ?", "sql": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"oren etzioni\" ORDER BY t3.year DESC;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"oren etzioni\" ORDER BY t3.year DESC;", "query_toks": ["SELECT", "DISTINCT", "t2.paperid", "FROM", "writes", "AS", "t2", "JOIN", "author", "AS", "t1", "ON", "t2.authorid", "=", "t1.authorid", "JOIN", "paper", "AS", "t3", "ON", "t2.paperid", "=", "t3.paperid", "WHERE", "t1.authorname", "=", "``", "oren", "etzioni", "''", "ORDER", "BY", "t3.year", "DESC", ";"], "query_toks_no_value": ["select", "distinct", "t2", ".", "paperid", "from", "writes", "as", "t2", "join", "author", "as", "t1", "on", "t2", ".", "authorid", "=", "t1", ".", "authorid", "join", "paper", "as", "t3", "on", "t2", ".", "paperid", "=", "t3", ".", "paperid", "where", "t1", ".", "authorname", "=", "value", "order", "by", "t3", ".", "year", "desc"], "question": "What is the latest paper by oren etzioni ?", "question_toks": ["What", "is", "the", "latest", "paper", "by", "oren", "etzioni", "?"], "guid": 5023}}
{"text": "Document_Types: document_type_code, document_description; Documents: document_id, document_type_code, grant_id, sent_date, response_received_date, other_details; Grants: grant_id, organisation_id, grant_amount, grant_start_date, grant_end_date, other_details; Organisation_Types: organisation_type, organisation_type_description; Organisations: organisation_id, organisation_type, organisation_details; Project_Outcomes: project_id, outcome_code, outcome_details; Project_Staff: staff_id, project_id, role_code, date_from, date_to, other_details; Projects: project_id, organisation_id, project_details; Research_Outcomes: outcome_code, outcome_description; Research_Staff: staff_id, employer_organisation_id, staff_details | What are the staff roles of the staff who", "sql": "SELECT role_code FROM Project_Staff WHERE date_from  >  '2003-04-19 15:06:20' AND date_to  <  '2016-03-15 00:33:18'", "example": {"db_id": "tracking_grants_for_research", "query": "SELECT role_code FROM Project_Staff WHERE date_from  >  '2003-04-19 15:06:20' AND date_to  <  '2016-03-15 00:33:18'", "query_toks": ["SELECT", "role_code", "FROM", "Project_Staff", "WHERE", "date_from", ">", "'2003-04-19", "15:06:20", "'", "AND", "date_to", "<", "'2016-03-15", "00:33:18", "'"], "query_toks_no_value": ["select", "role_code", "from", "project_staff", "where", "date_from", ">", "value", "and", "date_to", "<", "value"], "question": "What are the staff roles of the staff who", "question_toks": ["What", "are", "the", "staff", "roles", "of", "the", "staff", "who"], "guid": 5024}}
{"text": "item: i_id, title; review: a_id, u_id, i_id, rating, rank; useracct: u_id, name; trust: source_u_id, target_u_id, trust | Find the name and id of the item with the highest average rating.", "sql": "SELECT T1.title ,  T1.i_id FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id GROUP BY T2.i_id ORDER BY avg(T2.rating) DESC LIMIT 1", "example": {"db_id": "epinions_1", "query": "SELECT T1.title ,  T1.i_id FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id GROUP BY T2.i_id ORDER BY avg(T2.rating) DESC LIMIT 1", "query_toks": ["SELECT", "T1.title", ",", "T1.i_id", "FROM", "item", "AS", "T1", "JOIN", "review", "AS", "T2", "ON", "T1.i_id", "=", "T2.i_id", "GROUP", "BY", "T2.i_id", "ORDER", "BY", "avg", "(", "T2.rating", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "title", ",", "t1", ".", "i_id", "from", "item", "as", "t1", "join", "review", "as", "t2", "on", "t1", ".", "i_id", "=", "t2", ".", "i_id", "group", "by", "t2", ".", "i_id", "order", "by", "avg", "(", "t2", ".", "rating", ")", "desc", "limit", "value"], "question": "Find the name and id of the item with the highest average rating.", "question_toks": ["Find", "the", "name", "and", "id", "of", "the", "item", "with", "the", "highest", "average", "rating", "."], "guid": 5025}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the number of the keywords of \" Making database systems usable \" .", "sql": "SELECT COUNT ( DISTINCT t1.keyword ) FROM publication_keyword AS t3 JOIN keyword AS t1 ON t3.kid  =  t1.kid JOIN publication AS t2 ON t2.pid  =  t3.pid WHERE t2.title  =  \"Making database systems usable\";", "example": {"db_id": "academic", "query": "SELECT COUNT ( DISTINCT t1.keyword ) FROM publication_keyword AS t3 JOIN keyword AS t1 ON t3.kid  =  t1.kid JOIN publication AS t2 ON t2.pid  =  t3.pid WHERE t2.title  =  \"Making database systems usable\";", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "t1.keyword", ")", "FROM", "publication_keyword", "AS", "t3", "JOIN", "keyword", "AS", "t1", "ON", "t3.kid", "=", "t1.kid", "JOIN", "publication", "AS", "t2", "ON", "t2.pid", "=", "t3.pid", "WHERE", "t2.title", "=", "``", "Making", "database", "systems", "usable", "''", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "t1", ".", "keyword", ")", "from", "publication_keyword", "as", "t3", "join", "keyword", "as", "t1", "on", "t3", ".", "kid", "=", "t1", ".", "kid", "join", "publication", "as", "t2", "on", "t2", ".", "pid", "=", "t3", ".", "pid", "where", "t2", ".", "title", "=", "value"], "question": "return me the number of the keywords of \" Making database systems usable \" .", "question_toks": ["return", "me", "the", "number", "of", "the", "keywords", "of", "``", "Making", "database", "systems", "usable", "``", "."], "guid": 5026}}
{"text": "venue: venueId, venueName; author: authorId, authorName; dataset: datasetId, datasetName; journal: journalId, journalName; keyphrase: keyphraseId, keyphraseName; paper: paperId, title, venueId, year, numCiting, numCitedBy, journalId; cite: citingPaperId, citedPaperId; paperDataset: paperId, datasetId; paperKeyphrase: paperId, keyphraseId; writes: paperId, authorId | What papers were written on question answering this year ?", "sql": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"question answering\" AND t3.year  =  2016;", "example": {"db_id": "scholar", "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"question answering\" AND t3.year  =  2016;", "query_toks": ["SELECT", "DISTINCT", "t3.paperid", "FROM", "paperkeyphrase", "AS", "t2", "JOIN", "keyphrase", "AS", "t1", "ON", "t2.keyphraseid", "=", "t1.keyphraseid", "JOIN", "paper", "AS", "t3", "ON", "t3.paperid", "=", "t2.paperid", "WHERE", "t1.keyphrasename", "=", "``", "question", "answering", "''", "AND", "t3.year", "=", "2016", ";"], "query_toks_no_value": ["select", "distinct", "t3", ".", "paperid", "from", "paperkeyphrase", "as", "t2", "join", "keyphrase", "as", "t1", "on", "t2", ".", "keyphraseid", "=", "t1", ".", "keyphraseid", "join", "paper", "as", "t3", "on", "t3", ".", "paperid", "=", "t2", ".", "paperid", "where", "t1", ".", "keyphrasename", "=", "value", "and", "t3", ".", "year", "=", "value"], "question": "What papers were written on question answering this year ?", "question_toks": ["What", "papers", "were", "written", "on", "question", "answering", "this", "year", "?"], "guid": 5027}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the conference that has the most number of papers containing keyword \" Relational Database \" .", "sql": "SELECT t2.name FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t4.pid JOIN conference AS t2 ON t3.cid  =  t2.cid WHERE t1.keyword  =  \"Relational Database\" GROUP BY t2.name ORDER BY COUNT ( DISTINCT t3.title ) DESC LIMIT 1;", "example": {"db_id": "academic", "query": "SELECT t2.name FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t4.pid JOIN conference AS t2 ON t3.cid  =  t2.cid WHERE t1.keyword  =  \"Relational Database\" GROUP BY t2.name ORDER BY COUNT ( DISTINCT t3.title ) DESC LIMIT 1;", "query_toks": ["SELECT", "t2.name", "FROM", "publication_keyword", "AS", "t4", "JOIN", "keyword", "AS", "t1", "ON", "t4.kid", "=", "t1.kid", "JOIN", "publication", "AS", "t3", "ON", "t3.pid", "=", "t4.pid", "JOIN", "conference", "AS", "t2", "ON", "t3.cid", "=", "t2.cid", "WHERE", "t1.keyword", "=", "``", "Relational", "Database", "''", "GROUP", "BY", "t2.name", "ORDER", "BY", "COUNT", "(", "DISTINCT", "t3.title", ")", "DESC", "LIMIT", "1", ";"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "publication_keyword", "as", "t4", "join", "keyword", "as", "t1", "on", "t4", ".", "kid", "=", "t1", ".", "kid", "join", "publication", "as", "t3", "on", "t3", ".", "pid", "=", "t4", ".", "pid", "join", "conference", "as", "t2", "on", "t3", ".", "cid", "=", "t2", ".", "cid", "where", "t1", ".", "keyword", "=", "value", "group", "by", "t2", ".", "name", "order", "by", "count", "(", "distinct", "t3", ".", "title", ")", "desc", "limit", "value"], "question": "return me the conference that has the most number of papers containing keyword \" Relational Database \" .", "question_toks": ["return", "me", "the", "conference", "that", "has", "the", "most", "number", "of", "papers", "containing", "keyword", "``", "Relational", "Database", "``", "."], "guid": 5028}}
{"text": "book_club: book_club_id, Year, Author_or_Editor, Book_Title, Publisher, Category, Result; movie: movie_id, Title, Year, Director, Budget_million, Gross_worldwide; culture_company: Company_name, Type, Incorporated_in, Group_Equity_Shareholding, book_club_id, movie_id | What is the average, maximum, and minimum budget for all movies before 2000.", "sql": "SELECT avg(budget_million) ,  max(budget_million) ,  min(budget_million) FROM movie WHERE YEAR  <  2000", "example": {"db_id": "culture_company", "query": "SELECT avg(budget_million) ,  max(budget_million) ,  min(budget_million) FROM movie WHERE YEAR  <  2000", "query_toks": ["SELECT", "avg", "(", "budget_million", ")", ",", "max", "(", "budget_million", ")", ",", "min", "(", "budget_million", ")", "FROM", "movie", "WHERE", "YEAR", "<", "2000"], "query_toks_no_value": ["select", "avg", "(", "budget_million", ")", ",", "max", "(", "budget_million", ")", ",", "min", "(", "budget_million", ")", "from", "movie", "where", "year", "<", "value"], "question": "What is the average, maximum, and minimum budget for all movies before 2000.", "question_toks": ["What", "is", "the", "average", ",", "maximum", ",", "and", "minimum", "budget", "for", "all", "movies", "before", "2000", "."], "guid": 5029}}
{"text": "author: aid, homepage, name, oid; conference: cid, homepage, name; domain: did, name; domain_author: aid, did; domain_conference: cid, did; journal: homepage, jid, name; domain_journal: did, jid; keyword: keyword, kid; domain_keyword: did, kid; publication: abstract, cid, citation_num, jid, pid, reference_num, title, year | return me the paper after 2000 with more than 200 citations .", "sql": "SELECT title FROM publication WHERE citation_num  >  200 AND YEAR  >  2000;", "example": {"db_id": "academic", "query": "SELECT title FROM publication WHERE citation_num  >  200 AND YEAR  >  2000;", "query_toks": ["SELECT", "title", "FROM", "publication", "WHERE", "citation_num", ">", "200", "AND", "YEAR", ">", "2000", ";"], "query_toks_no_value": ["select", "title", "from", "publication", "where", "citation_num", ">", "value", "and", "year", ">", "value"], "question": "return me the paper after 2000 with more than 200 citations .", "question_toks": ["return", "me", "the", "paper", "after", "2000", "with", "more", "than", "200", "citations", "."], "guid": 5030}}
{"text": "program: Program_ID, Name, Origin, Launch, Owner; channel: Channel_ID, Name, Owner, Share_in_percent, Rating_in_percent; broadcast: Channel_ID, Program_ID, Time_of_day; broadcast_share: Channel_ID, Program_ID, Date, Share_in_percent | What are the names of the channels owned by CCTV or HBS?", "sql": "SELECT name FROM channel WHERE OWNER  =  'CCTV' OR OWNER  =  'HBS'", "example": {"db_id": "program_share", "query": "SELECT name FROM channel WHERE OWNER  =  'CCTV' OR OWNER  =  'HBS'", "query_toks": ["SELECT", "name", "FROM", "channel", "WHERE", "OWNER", "=", "'CCTV", "'", "OR", "OWNER", "=", "'HBS", "'"], "query_toks_no_value": ["select", "name", "from", "channel", "where", "owner", "=", "value", "or", "owner", "=", "value"], "question": "What are the names of the channels owned by CCTV or HBS?", "question_toks": ["What", "are", "the", "names", "of", "the", "channels", "owned", "by", "CCTV", "or", "HBS", "?"], "guid": 7987}}
{"text": "TV_Channel: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option; TV_series: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel; Cartoon: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel | which countries' tv channels are playing some cartoon written by Todd Casey?", "sql": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'", "example": {"db_id": "tvshow", "query": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'", "query_toks": ["SELECT", "T1.country", "FROM", "TV_Channel", "AS", "T1", "JOIN", "cartoon", "AS", "T2", "ON", "T1.id", "=", "T2.Channel", "WHERE", "T2.written_by", "=", "'Todd", "Casey", "'"], "query_toks_no_value": ["select", "t1", ".", "country", "from", "tv_channel", "as", "t1", "join", "cartoon", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "channel", "where", "t2", ".", "written_by", "=", "value"], "question": "which countries' tv channels are playing some cartoon written by Todd Casey?", "question_toks": ["which", "countries", "'", "tv", "channels", "are", "playing", "some", "cartoon", "written", "by", "Todd", "Casey", "?"], "guid": 7988}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | How many female actors were born in \" New York City \" after 1980 ?", "sql": "SELECT COUNT ( DISTINCT name  ) FROM actor WHERE birth_city  =  \"New York City\" AND birth_year  >  1980 AND gender  =  \"female\";", "example": {"db_id": "imdb", "query": "SELECT COUNT ( DISTINCT name  ) FROM actor WHERE birth_city  =  \"New York City\" AND birth_year  >  1980 AND gender  =  \"female\";", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "name", ")", "FROM", "actor", "WHERE", "birth_city", "=", "``", "New", "York", "City", "''", "AND", "birth_year", ">", "1980", "AND", "gender", "=", "``", "female", "''", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "name", ")", "from", "actor", "where", "birth_city", "=", "value", "and", "birth_year", ">", "value", "and", "gender", "=", "value"], "question": "How many female actors were born in \" New York City \" after 1980 ?", "question_toks": ["How", "many", "female", "actors", "were", "born", "in", "``", "New", "York", "City", "``", "after", "1980", "?"], "guid": 7989}}
{"text": "film: Film_ID, Title, Studio, Director, Gross_in_dollar; market: Market_ID, Country, Number_cities; film_market_estimation: Estimation_ID, Low_Estimate, High_Estimate, Film_ID, Type, Market_ID, Year | List all countries of markets in ascending alphabetical order.", "sql": "SELECT Country FROM market ORDER BY Country ASC", "example": {"db_id": "film_rank", "query": "SELECT Country FROM market ORDER BY Country ASC", "query_toks": ["SELECT", "Country", "FROM", "market", "ORDER", "BY", "Country", "ASC"], "query_toks_no_value": ["select", "country", "from", "market", "order", "by", "country", "asc"], "question": "List all countries of markets in ascending alphabetical order.", "question_toks": ["List", "all", "countries", "of", "markets", "in", "ascending", "alphabetical", "order", "."], "guid": 7990}}
{"text": "TV_Channel: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option; TV_series: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel; Cartoon: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel | What is the name and directors of all the cartoons that are ordered by air date?", "sql": "SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date", "example": {"db_id": "tvshow", "query": "SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date", "query_toks": ["SELECT", "title", ",", "Directed_by", "FROM", "Cartoon", "ORDER", "BY", "Original_air_date"], "query_toks_no_value": ["select", "title", ",", "directed_by", "from", "cartoon", "order", "by", "original_air_date"], "question": "What is the name and directors of all the cartoons that are ordered by air date?", "question_toks": ["What", "is", "the", "name", "and", "directors", "of", "all", "the", "cartoons", "that", "are", "ordered", "by", "air", "date", "?"], "guid": 7991}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | What is the total number of ratings that has more than 3 stars?", "sql": "SELECT count(*) FROM Rating WHERE stars  >  3", "example": {"db_id": "movie_1", "query": "SELECT count(*) FROM Rating WHERE stars  >  3", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Rating", "WHERE", "stars", ">", "3"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "rating", "where", "stars", ">", "value"], "question": "What is the total number of ratings that has more than 3 stars?", "question_toks": ["What", "is", "the", "total", "number", "of", "ratings", "that", "has", "more", "than", "3", "stars", "?"], "guid": 7992}}
{"text": "TV_Channel: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option; TV_series: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel; Cartoon: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel | What is the produdction code and channel of the most recent cartoon ?", "sql": "select production_code ,  channel from cartoon order by original_air_date desc limit 1", "example": {"db_id": "tvshow", "query": "select production_code ,  channel from cartoon order by original_air_date desc limit 1", "query_toks": ["select", "production_code", ",", "channel", "from", "cartoon", "order", "by", "original_air_date", "desc", "limit", "1"], "query_toks_no_value": ["select", "production_code", ",", "channel", "from", "cartoon", "order", "by", "original_air_date", "desc", "limit", "value"], "question": "What is the produdction code and channel of the most recent cartoon ?", "question_toks": ["What", "is", "the", "produdction", "code", "and", "channel", "of", "the", "most", "recent", "cartoon", "?"], "guid": 7993}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | What are the names of the directors who created a movie with a 5 star rating, and what was the name of those movies?", "sql": "SELECT T1.director ,  T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID WHERE T2.stars  =  5", "example": {"db_id": "movie_1", "query": "SELECT T1.director ,  T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID WHERE T2.stars  =  5", "query_toks": ["SELECT", "T1.director", ",", "T1.title", "FROM", "Movie", "AS", "T1", "JOIN", "Rating", "AS", "T2", "ON", "T1.mID", "=", "T2.mID", "WHERE", "T2.stars", "=", "5"], "query_toks_no_value": ["select", "t1", ".", "director", ",", "t1", ".", "title", "from", "movie", "as", "t1", "join", "rating", "as", "t2", "on", "t1", ".", "mid", "=", "t2", ".", "mid", "where", "t2", ".", "stars", "=", "value"], "question": "What are the names of the directors who created a movie with a 5 star rating, and what was the name of those movies?", "question_toks": ["What", "are", "the", "names", "of", "the", "directors", "who", "created", "a", "movie", "with", "a", "5", "star", "rating", ",", "and", "what", "was", "the", "name", "of", "those", "movies", "?"], "guid": 7994}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | Find the latest movie which \" Gabriele Ferzetti \" acted in", "sql": "SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t1.name  =  \"Gabriele Ferzetti\" ORDER BY t3.release_year DESC LIMIT 1;", "example": {"db_id": "imdb", "query": "SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t1.name  =  \"Gabriele Ferzetti\" ORDER BY t3.release_year DESC LIMIT 1;", "query_toks": ["SELECT", "t1.name", "FROM", "CAST", "AS", "t2", "JOIN", "actor", "AS", "t1", "ON", "t2.aid", "=", "t1.aid", "JOIN", "movie", "AS", "t3", "ON", "t3.mid", "=", "t2.msid", "WHERE", "t1.name", "=", "``", "Gabriele", "Ferzetti", "''", "ORDER", "BY", "t3.release_year", "DESC", "LIMIT", "1", ";"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "cast", "as", "t2", "join", "actor", "as", "t1", "on", "t2", ".", "aid", "=", "t1", ".", "aid", "join", "movie", "as", "t3", "on", "t3", ".", "mid", "=", "t2", ".", "msid", "where", "t1", ".", "name", "=", "value", "order", "by", "t3", ".", "release_year", "desc", "limit", "value"], "question": "Find the latest movie which \" Gabriele Ferzetti \" acted in", "question_toks": ["Find", "the", "latest", "movie", "which", "``", "Gabriele", "Ferzetti", "``", "acted", "in"], "guid": 7995}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | What is the average rating stars and title for the oldest movie?", "sql": "SELECT avg(T1.stars) ,  T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.year  =  (SELECT min(YEAR) FROM Movie)", "example": {"db_id": "movie_1", "query": "SELECT avg(T1.stars) ,  T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.year  =  (SELECT min(YEAR) FROM Movie)", "query_toks": ["SELECT", "avg", "(", "T1.stars", ")", ",", "T2.title", "FROM", "Rating", "AS", "T1", "JOIN", "Movie", "AS", "T2", "ON", "T1.mID", "=", "T2.mID", "WHERE", "T2.year", "=", "(", "SELECT", "min", "(", "YEAR", ")", "FROM", "Movie", ")"], "query_toks_no_value": ["select", "avg", "(", "t1", ".", "stars", ")", ",", "t2", ".", "title", "from", "rating", "as", "t1", "join", "movie", "as", "t2", "on", "t1", ".", "mid", "=", "t2", ".", "mid", "where", "t2", ".", "year", "=", "(", "select", "min", "(", "year", ")", "from", "movie", ")"], "question": "What is the average rating stars and title for the oldest movie?", "question_toks": ["What", "is", "the", "average", "rating", "stars", "and", "title", "for", "the", "oldest", "movie", "?"], "guid": 7996}}
{"text": "TV_Channel: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option; TV_series: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel; Cartoon: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel | What are the countries that are not playing cartoons written by Todd Casey?", "sql": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'", "example": {"db_id": "tvshow", "query": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'", "query_toks": ["SELECT", "country", "FROM", "TV_Channel", "EXCEPT", "SELECT", "T1.country", "FROM", "TV_Channel", "AS", "T1", "JOIN", "cartoon", "AS", "T2", "ON", "T1.id", "=", "T2.Channel", "WHERE", "T2.written_by", "=", "'Todd", "Casey", "'"], "query_toks_no_value": ["select", "country", "from", "tv_channel", "except", "select", "t1", ".", "country", "from", "tv_channel", "as", "t1", "join", "cartoon", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "channel", "where", "t2", ".", "written_by", "=", "value"], "question": "What are the countries that are not playing cartoons written by Todd Casey?", "question_toks": ["What", "are", "the", "countries", "that", "are", "not", "playing", "cartoons", "written", "by", "Todd", "Casey", "?"], "guid": 7997}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | Find the producers of all movies in which \" Kate Winslet \" is an actor", "sql": "SELECT t1.name FROM CAST AS t3 JOIN actor AS t2 ON t3.aid  =  t2.aid JOIN movie AS t5 ON t5.mid  =  t3.msid JOIN made_by AS t4 ON t5.mid  =  t4.msid JOIN producer AS t1 ON t1.pid  =  t4.pid WHERE t2.name  =  \"Kate Winslet\";", "example": {"db_id": "imdb", "query": "SELECT t1.name FROM CAST AS t3 JOIN actor AS t2 ON t3.aid  =  t2.aid JOIN movie AS t5 ON t5.mid  =  t3.msid JOIN made_by AS t4 ON t5.mid  =  t4.msid JOIN producer AS t1 ON t1.pid  =  t4.pid WHERE t2.name  =  \"Kate Winslet\";", "query_toks": ["SELECT", "t1.name", "FROM", "CAST", "AS", "t3", "JOIN", "actor", "AS", "t2", "ON", "t3.aid", "=", "t2.aid", "JOIN", "movie", "AS", "t5", "ON", "t5.mid", "=", "t3.msid", "JOIN", "made_by", "AS", "t4", "ON", "t5.mid", "=", "t4.msid", "JOIN", "producer", "AS", "t1", "ON", "t1.pid", "=", "t4.pid", "WHERE", "t2.name", "=", "``", "Kate", "Winslet", "''", ";"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "cast", "as", "t3", "join", "actor", "as", "t2", "on", "t3", ".", "aid", "=", "t2", ".", "aid", "join", "movie", "as", "t5", "on", "t5", ".", "mid", "=", "t3", ".", "msid", "join", "made_by", "as", "t4", "on", "t5", ".", "mid", "=", "t4", ".", "msid", "join", "producer", "as", "t1", "on", "t1", ".", "pid", "=", "t4", ".", "pid", "where", "t2", ".", "name", "=", "value"], "question": "Find the producers of all movies in which \" Kate Winslet \" is an actor", "question_toks": ["Find", "the", "producers", "of", "all", "movies", "in", "which", "``", "Kate", "Winslet", "``", "is", "an", "actor"], "guid": 7998}}
{"text": "film: Film_ID, Rank_in_series, Number_in_season, Title, Directed_by, Original_air_date, Production_code; cinema: Cinema_ID, Name, Openning_year, Capacity, Location; schedule: Cinema_ID, Film_ID, Date, Show_times_per_day, Price | Show all directors.", "sql": "SELECT DISTINCT directed_by FROM film", "example": {"db_id": "cinema", "query": "SELECT DISTINCT directed_by FROM film", "query_toks": ["SELECT", "DISTINCT", "directed_by", "FROM", "film"], "query_toks_no_value": ["select", "distinct", "directed_by", "from", "film"], "question": "Show all directors.", "question_toks": ["Show", "all", "directors", "."], "guid": 7999}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | what are the genres of movies directed by \" Asghar Farhadi \"", "sql": "SELECT t3.genre FROM director AS t5 JOIN directed_by AS t2 ON t5.did  =  t2.did JOIN movie AS t4 ON t4.mid  =  t2.msid JOIN classification AS t1 ON t4.mid  =  t1.msid JOIN genre AS t3 ON t3.gid  =  t1.gid WHERE t5.name  =  \"Asghar Farhadi\";", "example": {"db_id": "imdb", "query": "SELECT t3.genre FROM director AS t5 JOIN directed_by AS t2 ON t5.did  =  t2.did JOIN movie AS t4 ON t4.mid  =  t2.msid JOIN classification AS t1 ON t4.mid  =  t1.msid JOIN genre AS t3 ON t3.gid  =  t1.gid WHERE t5.name  =  \"Asghar Farhadi\";", "query_toks": ["SELECT", "t3.genre", "FROM", "director", "AS", "t5", "JOIN", "directed_by", "AS", "t2", "ON", "t5.did", "=", "t2.did", "JOIN", "movie", "AS", "t4", "ON", "t4.mid", "=", "t2.msid", "JOIN", "classification", "AS", "t1", "ON", "t4.mid", "=", "t1.msid", "JOIN", "genre", "AS", "t3", "ON", "t3.gid", "=", "t1.gid", "WHERE", "t5.name", "=", "``", "Asghar", "Farhadi", "''", ";"], "query_toks_no_value": ["select", "t3", ".", "genre", "from", "director", "as", "t5", "join", "directed_by", "as", "t2", "on", "t5", ".", "did", "=", "t2", ".", "did", "join", "movie", "as", "t4", "on", "t4", ".", "mid", "=", "t2", ".", "msid", "join", "classification", "as", "t1", "on", "t4", ".", "mid", "=", "t1", ".", "msid", "join", "genre", "as", "t3", "on", "t3", ".", "gid", "=", "t1", ".", "gid", "where", "t5", ".", "name", "=", "value"], "question": "what are the genres of movies directed by \" Asghar Farhadi \"", "question_toks": ["what", "are", "the", "genres", "of", "movies", "directed", "by", "``", "Asghar", "Farhadi", "``"], "guid": 8000}}
{"text": "program: Program_ID, Name, Origin, Launch, Owner; channel: Channel_ID, Name, Owner, Share_in_percent, Rating_in_percent; broadcast: Channel_ID, Program_ID, Time_of_day; broadcast_share: Channel_ID, Program_ID, Date, Share_in_percent | List the names of all the channels owned by either CCTV or HBS", "sql": "SELECT name FROM channel WHERE OWNER  =  'CCTV' OR OWNER  =  'HBS'", "example": {"db_id": "program_share", "query": "SELECT name FROM channel WHERE OWNER  =  'CCTV' OR OWNER  =  'HBS'", "query_toks": ["SELECT", "name", "FROM", "channel", "WHERE", "OWNER", "=", "'CCTV", "'", "OR", "OWNER", "=", "'HBS", "'"], "query_toks_no_value": ["select", "name", "from", "channel", "where", "owner", "=", "value", "or", "owner", "=", "value"], "question": "List the names of all the channels owned by either CCTV or HBS", "question_toks": ["List", "the", "names", "of", "all", "the", "channels", "owned", "by", "either", "CCTV", "or", "HBS"], "guid": 8001}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | What is the number of movies produced in 2013 ?", "sql": "SELECT COUNT ( DISTINCT title  ) FROM movie WHERE release_year  =  2013;", "example": {"db_id": "imdb", "query": "SELECT COUNT ( DISTINCT title  ) FROM movie WHERE release_year  =  2013;", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "title", ")", "FROM", "movie", "WHERE", "release_year", "=", "2013", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "title", ")", "from", "movie", "where", "release_year", "=", "value"], "question": "What is the number of movies produced in 2013 ?", "question_toks": ["What", "is", "the", "number", "of", "movies", "produced", "in", "2013", "?"], "guid": 8002}}
{"text": "film: Film_ID, Title, Studio, Director, Gross_in_dollar; market: Market_ID, Country, Number_cities; film_market_estimation: Estimation_ID, Low_Estimate, High_Estimate, Film_ID, Type, Market_ID, Year | What are the countries of markets and their corresponding years of market estimation?", "sql": "SELECT T2.Country ,  T1.Year FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID", "example": {"db_id": "film_rank", "query": "SELECT T2.Country ,  T1.Year FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID", "query_toks": ["SELECT", "T2.Country", ",", "T1.Year", "FROM", "film_market_estimation", "AS", "T1", "JOIN", "market", "AS", "T2", "ON", "T1.Market_ID", "=", "T2.Market_ID"], "query_toks_no_value": ["select", "t2", ".", "country", ",", "t1", ".", "year", "from", "film_market_estimation", "as", "t1", "join", "market", "as", "t2", "on", "t1", ".", "market_id", "=", "t2", ".", "market_id"], "question": "What are the countries of markets and their corresponding years of market estimation?", "question_toks": ["What", "are", "the", "countries", "of", "markets", "and", "their", "corresponding", "years", "of", "market", "estimation", "?"], "guid": 8003}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | What are the titles of all movies that were not reviewed by Chris Jackson?", "sql": "SELECT DISTINCT title FROM Movie EXCEPT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Chris Jackson'", "example": {"db_id": "movie_1", "query": "SELECT DISTINCT title FROM Movie EXCEPT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Chris Jackson'", "query_toks": ["SELECT", "DISTINCT", "title", "FROM", "Movie", "EXCEPT", "SELECT", "T2.title", "FROM", "Rating", "AS", "T1", "JOIN", "Movie", "AS", "T2", "ON", "T1.mID", "=", "T2.mID", "JOIN", "Reviewer", "AS", "T3", "ON", "T1.rID", "=", "T3.rID", "WHERE", "T3.name", "=", "'Chris", "Jackson", "'"], "query_toks_no_value": ["select", "distinct", "title", "from", "movie", "except", "select", "t2", ".", "title", "from", "rating", "as", "t1", "join", "movie", "as", "t2", "on", "t1", ".", "mid", "=", "t2", ".", "mid", "join", "reviewer", "as", "t3", "on", "t1", ".", "rid", "=", "t3", ".", "rid", "where", "t3", ".", "name", "=", "value"], "question": "What are the titles of all movies that were not reviewed by Chris Jackson?", "question_toks": ["What", "are", "the", "titles", "of", "all", "movies", "that", "were", "not", "reviewed", "by", "Chris", "Jackson", "?"], "guid": 8004}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | Find all Sci-Fi produced in year 2010", "sql": "SELECT t3.title FROM genre AS t2 JOIN classification AS t1 ON t2.gid  =  t1.gid JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.genre  =  \"Sci-Fi\" AND t3.release_year  =  2010;", "example": {"db_id": "imdb", "query": "SELECT t3.title FROM genre AS t2 JOIN classification AS t1 ON t2.gid  =  t1.gid JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.genre  =  \"Sci-Fi\" AND t3.release_year  =  2010;", "query_toks": ["SELECT", "t3.title", "FROM", "genre", "AS", "t2", "JOIN", "classification", "AS", "t1", "ON", "t2.gid", "=", "t1.gid", "JOIN", "movie", "AS", "t3", "ON", "t3.mid", "=", "t1.msid", "WHERE", "t2.genre", "=", "``", "Sci-Fi", "''", "AND", "t3.release_year", "=", "2010", ";"], "query_toks_no_value": ["select", "t3", ".", "title", "from", "genre", "as", "t2", "join", "classification", "as", "t1", "on", "t2", ".", "gid", "=", "t1", ".", "gid", "join", "movie", "as", "t3", "on", "t3", ".", "mid", "=", "t1", ".", "msid", "where", "t2", ".", "genre", "=", "value", "and", "t3", ".", "release_year", "=", "value"], "question": "Find all Sci-Fi produced in year 2010", "question_toks": ["Find", "all", "Sci-Fi", "produced", "in", "year", "2010"], "guid": 8005}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | What are the names of all reviewers that have rated 3 or more movies?", "sql": "SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T1.rID HAVING COUNT(*)  >=  3", "example": {"db_id": "movie_1", "query": "SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T1.rID HAVING COUNT(*)  >=  3", "query_toks": ["SELECT", "T2.name", "FROM", "Rating", "AS", "T1", "JOIN", "Reviewer", "AS", "T2", "ON", "T1.rID", "=", "T2.rID", "GROUP", "BY", "T1.rID", "HAVING", "COUNT", "(", "*", ")", ">", "=", "3"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "rating", "as", "t1", "join", "reviewer", "as", "t2", "on", "t1", ".", "rid", "=", "t2", ".", "rid", "group", "by", "t1", ".", "rid", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "What are the names of all reviewers that have rated 3 or more movies?", "question_toks": ["What", "are", "the", "names", "of", "all", "reviewers", "that", "have", "rated", "3", "or", "more", "movies", "?"], "guid": 8006}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | What are the titles of all movies that have between 3 and 5 stars?", "sql": "SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars BETWEEN 3 AND 5", "example": {"db_id": "movie_1", "query": "SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars BETWEEN 3 AND 5", "query_toks": ["SELECT", "T2.title", "FROM", "Rating", "AS", "T1", "JOIN", "Movie", "AS", "T2", "ON", "T1.mID", "=", "T2.mID", "WHERE", "T1.stars", "BETWEEN", "3", "AND", "5"], "query_toks_no_value": ["select", "t2", ".", "title", "from", "rating", "as", "t1", "join", "movie", "as", "t2", "on", "t1", ".", "mid", "=", "t2", ".", "mid", "where", "t1", ".", "stars", "between", "value", "and", "value"], "question": "What are the titles of all movies that have between 3 and 5 stars?", "question_toks": ["What", "are", "the", "titles", "of", "all", "movies", "that", "have", "between", "3", "and", "5", "stars", "?"], "guid": 8007}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | What are the names of all directors who made one movie?", "sql": "SELECT director FROM Movie GROUP BY director HAVING count(*)  =  1", "example": {"db_id": "movie_1", "query": "SELECT director FROM Movie GROUP BY director HAVING count(*)  =  1", "query_toks": ["SELECT", "director", "FROM", "Movie", "GROUP", "BY", "director", "HAVING", "count", "(", "*", ")", "=", "1"], "query_toks_no_value": ["select", "director", "from", "movie", "group", "by", "director", "having", "count", "(", "*", ")", "=", "value"], "question": "What are the names of all directors who made one movie?", "question_toks": ["What", "are", "the", "names", "of", "all", "directors", "who", "made", "one", "movie", "?"], "guid": 8008}}
{"text": "film: Film_ID, Title, Studio, Director, Gross_in_dollar; market: Market_ID, Country, Number_cities; film_market_estimation: Estimation_ID, Low_Estimate, High_Estimate, Film_ID, Type, Market_ID, Year | Give the average number of cities within markets that had a low market estimation larger than 10000?", "sql": "SELECT avg(T2.Number_cities) FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID WHERE T1.Low_Estimate  >  10000", "example": {"db_id": "film_rank", "query": "SELECT avg(T2.Number_cities) FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID WHERE T1.Low_Estimate  >  10000", "query_toks": ["SELECT", "avg", "(", "T2.Number_cities", ")", "FROM", "film_market_estimation", "AS", "T1", "JOIN", "market", "AS", "T2", "ON", "T1.Market_ID", "=", "T2.Market_ID", "WHERE", "T1.Low_Estimate", ">", "10000"], "query_toks_no_value": ["select", "avg", "(", "t2", ".", "number_cities", ")", "from", "film_market_estimation", "as", "t1", "join", "market", "as", "t2", "on", "t1", ".", "market_id", "=", "t2", ".", "market_id", "where", "t1", ".", "low_estimate", ">", "value"], "question": "Give the average number of cities within markets that had a low market estimation larger than 10000?", "question_toks": ["Give", "the", "average", "number", "of", "cities", "within", "markets", "that", "had", "a", "low", "market", "estimation", "larger", "than", "10000", "?"], "guid": 8009}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | Find all the directors who are from Afghanistan", "sql": "SELECT name FROM director WHERE nationality  =  \"Afghanistan\";", "example": {"db_id": "imdb", "query": "SELECT name FROM director WHERE nationality  =  \"Afghanistan\";", "query_toks": ["SELECT", "name", "FROM", "director", "WHERE", "nationality", "=", "``", "Afghanistan", "''", ";"], "query_toks_no_value": ["select", "name", "from", "director", "where", "nationality", "=", "value"], "question": "Find all the directors who are from Afghanistan", "question_toks": ["Find", "all", "the", "directors", "who", "are", "from", "Afghanistan"], "guid": 8010}}
{"text": "film: Film_ID, Rank_in_series, Number_in_season, Title, Directed_by, Original_air_date, Production_code; cinema: Cinema_ID, Name, Openning_year, Capacity, Location; schedule: Cinema_ID, Film_ID, Date, Show_times_per_day, Price | Show the title and director for all films.", "sql": "SELECT title ,  directed_by FROM film", "example": {"db_id": "cinema", "query": "SELECT title ,  directed_by FROM film", "query_toks": ["SELECT", "title", ",", "directed_by", "FROM", "film"], "query_toks_no_value": ["select", "title", ",", "directed_by", "from", "film"], "question": "Show the title and director for all films.", "question_toks": ["Show", "the", "title", "and", "director", "for", "all", "films", "."], "guid": 8011}}
{"text": "film: Film_ID, Title, Studio, Director, Gross_in_dollar; market: Market_ID, Country, Number_cities; film_market_estimation: Estimation_ID, Low_Estimate, High_Estimate, Film_ID, Type, Market_ID, Year | Which studios have never worked with the director Walter Hill?", "sql": "SELECT Studio FROM film EXCEPT SELECT Studio FROM film WHERE Director  =  \"Walter Hill\"", "example": {"db_id": "film_rank", "query": "SELECT Studio FROM film EXCEPT SELECT Studio FROM film WHERE Director  =  \"Walter Hill\"", "query_toks": ["SELECT", "Studio", "FROM", "film", "EXCEPT", "SELECT", "Studio", "FROM", "film", "WHERE", "Director", "=", "``", "Walter", "Hill", "''"], "query_toks_no_value": ["select", "studio", "from", "film", "except", "select", "studio", "from", "film", "where", "director", "=", "value"], "question": "Which studios have never worked with the director Walter Hill?", "question_toks": ["Which", "studios", "have", "never", "worked", "with", "the", "director", "Walter", "Hill", "?"], "guid": 8012}}
{"text": "festival_detail: Festival_ID, Festival_Name, Chair_Name, Location, Year, Num_of_Audience; artwork: Artwork_ID, Type, Name; nomination: Artwork_ID, Festival_ID, Result | Show distinct types of artworks that are nominated in festivals in 2007.", "sql": "SELECT DISTINCT T2.Type FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID WHERE T3.Year  =  2007", "example": {"db_id": "entertainment_awards", "query": "SELECT DISTINCT T2.Type FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID WHERE T3.Year  =  2007", "query_toks": ["SELECT", "DISTINCT", "T2.Type", "FROM", "nomination", "AS", "T1", "JOIN", "artwork", "AS", "T2", "ON", "T1.Artwork_ID", "=", "T2.Artwork_ID", "JOIN", "festival_detail", "AS", "T3", "ON", "T1.Festival_ID", "=", "T3.Festival_ID", "WHERE", "T3.Year", "=", "2007"], "query_toks_no_value": ["select", "distinct", "t2", ".", "type", "from", "nomination", "as", "t1", "join", "artwork", "as", "t2", "on", "t1", ".", "artwork_id", "=", "t2", ".", "artwork_id", "join", "festival_detail", "as", "t3", "on", "t1", ".", "festival_id", "=", "t3", ".", "festival_id", "where", "t3", ".", "year", "=", "value"], "question": "Show distinct types of artworks that are nominated in festivals in 2007.", "question_toks": ["Show", "distinct", "types", "of", "artworks", "that", "are", "nominated", "in", "festivals", "in", "2007", "."], "guid": 8013}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | How many movies about Persians were released after 1990 ?", "sql": "SELECT COUNT ( DISTINCT t3.title  ) FROM tags AS t2 JOIN keyword AS t1 ON t2.kid  =  t1.id JOIN movie AS t3 ON t2.msid  =  t3.mid WHERE t1.keyword  =  \"Persians\" AND t3.release_year  >  1990;", "example": {"db_id": "imdb", "query": "SELECT COUNT ( DISTINCT t3.title  ) FROM tags AS t2 JOIN keyword AS t1 ON t2.kid  =  t1.id JOIN movie AS t3 ON t2.msid  =  t3.mid WHERE t1.keyword  =  \"Persians\" AND t3.release_year  >  1990;", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "t3.title", ")", "FROM", "tags", "AS", "t2", "JOIN", "keyword", "AS", "t1", "ON", "t2.kid", "=", "t1.id", "JOIN", "movie", "AS", "t3", "ON", "t2.msid", "=", "t3.mid", "WHERE", "t1.keyword", "=", "``", "Persians", "''", "AND", "t3.release_year", ">", "1990", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "t3", ".", "title", ")", "from", "tags", "as", "t2", "join", "keyword", "as", "t1", "on", "t2", ".", "kid", "=", "t1", ".", "id", "join", "movie", "as", "t3", "on", "t2", ".", "msid", "=", "t3", ".", "mid", "where", "t1", ".", "keyword", "=", "value", "and", "t3", ".", "release_year", ">", "value"], "question": "How many movies about Persians were released after 1990 ?", "question_toks": ["How", "many", "movies", "about", "Persians", "were", "released", "after", "1990", "?"], "guid": 8014}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | What are the names of all the different reviewers who rates Gone with the Wind?", "sql": "SELECT DISTINCT T3.name FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.title  =  'Gone with the Wind'", "example": {"db_id": "movie_1", "query": "SELECT DISTINCT T3.name FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.title  =  'Gone with the Wind'", "query_toks": ["SELECT", "DISTINCT", "T3.name", "FROM", "Rating", "AS", "T1", "JOIN", "Movie", "AS", "T2", "ON", "T1.mID", "=", "T2.mID", "JOIN", "Reviewer", "AS", "T3", "ON", "T1.rID", "=", "T3.rID", "WHERE", "T2.title", "=", "'Gone", "with", "the", "Wind", "'"], "query_toks_no_value": ["select", "distinct", "t3", ".", "name", "from", "rating", "as", "t1", "join", "movie", "as", "t2", "on", "t1", ".", "mid", "=", "t2", ".", "mid", "join", "reviewer", "as", "t3", "on", "t1", ".", "rid", "=", "t3", ".", "rid", "where", "t2", ".", "title", "=", "value"], "question": "What are the names of all the different reviewers who rates Gone with the Wind?", "question_toks": ["What", "are", "the", "names", "of", "all", "the", "different", "reviewers", "who", "rates", "Gone", "with", "the", "Wind", "?"], "guid": 8015}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | Who are the actors born in \" Austin \" after 1980 ?", "sql": "SELECT name FROM actor WHERE birth_city  =  \"Austin\" AND birth_year  >  1980;", "example": {"db_id": "imdb", "query": "SELECT name FROM actor WHERE birth_city  =  \"Austin\" AND birth_year  >  1980;", "query_toks": ["SELECT", "name", "FROM", "actor", "WHERE", "birth_city", "=", "``", "Austin", "''", "AND", "birth_year", ">", "1980", ";"], "query_toks_no_value": ["select", "name", "from", "actor", "where", "birth_city", "=", "value", "and", "birth_year", ">", "value"], "question": "Who are the actors born in \" Austin \" after 1980 ?", "question_toks": ["Who", "are", "the", "actors", "born", "in", "``", "Austin", "``", "after", "1980", "?"], "guid": 8016}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | What are the ids of all reviewers who did not give 4 stars?", "sql": "SELECT rID FROM Rating EXCEPT SELECT rID FROM Rating WHERE stars  =  4", "example": {"db_id": "movie_1", "query": "SELECT rID FROM Rating EXCEPT SELECT rID FROM Rating WHERE stars  =  4", "query_toks": ["SELECT", "rID", "FROM", "Rating", "EXCEPT", "SELECT", "rID", "FROM", "Rating", "WHERE", "stars", "=", "4"], "query_toks_no_value": ["select", "rid", "from", "rating", "except", "select", "rid", "from", "rating", "where", "stars", "=", "value"], "question": "What are the ids of all reviewers who did not give 4 stars?", "question_toks": ["What", "are", "the", "ids", "of", "all", "reviewers", "who", "did", "not", "give", "4", "stars", "?"], "guid": 8017}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | Who acted \" Alan Turing \" in the movie \" The Imitation Game \" ?", "sql": "SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t2.role  =  \"Alan Turing\" AND t3.title  =  \"The Imitation Game\";", "example": {"db_id": "imdb", "query": "SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t2.role  =  \"Alan Turing\" AND t3.title  =  \"The Imitation Game\";", "query_toks": ["SELECT", "t1.name", "FROM", "CAST", "AS", "t2", "JOIN", "actor", "AS", "t1", "ON", "t2.aid", "=", "t1.aid", "JOIN", "movie", "AS", "t3", "ON", "t3.mid", "=", "t2.msid", "WHERE", "t2.role", "=", "``", "Alan", "Turing", "''", "AND", "t3.title", "=", "``", "The", "Imitation", "Game", "''", ";"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "cast", "as", "t2", "join", "actor", "as", "t1", "on", "t2", ".", "aid", "=", "t1", ".", "aid", "join", "movie", "as", "t3", "on", "t3", ".", "mid", "=", "t2", ".", "msid", "where", "t2", ".", "role", "=", "value", "and", "t3", ".", "title", "=", "value"], "question": "Who acted \" Alan Turing \" in the movie \" The Imitation Game \" ?", "question_toks": ["Who", "acted", "``", "Alan", "Turing", "``", "in", "the", "movie", "``", "The", "Imitation", "Game", "``", "?"], "guid": 8018}}
{"text": "film: Film_ID, Title, Studio, Director, Gross_in_dollar; market: Market_ID, Country, Number_cities; film_market_estimation: Estimation_ID, Low_Estimate, High_Estimate, Film_ID, Type, Market_ID, Year | List the studios which average gross is above 4500000.", "sql": "SELECT Studio FROM film GROUP BY Studio HAVING avg(Gross_in_dollar)  >=  4500000", "example": {"db_id": "film_rank", "query": "SELECT Studio FROM film GROUP BY Studio HAVING avg(Gross_in_dollar)  >=  4500000", "query_toks": ["SELECT", "Studio", "FROM", "film", "GROUP", "BY", "Studio", "HAVING", "avg", "(", "Gross_in_dollar", ")", ">", "=", "4500000"], "query_toks_no_value": ["select", "studio", "from", "film", "group", "by", "studio", "having", "avg", "(", "gross_in_dollar", ")", ">", "=", "value"], "question": "List the studios which average gross is above 4500000.", "question_toks": ["List", "the", "studios", "which", "average", "gross", "is", "above", "4500000", "."], "guid": 8019}}
{"text": "film: Film_ID, Title, Studio, Director, Gross_in_dollar; market: Market_ID, Country, Number_cities; film_market_estimation: Estimation_ID, Low_Estimate, High_Estimate, Film_ID, Type, Market_ID, Year | Return the average gross sales in dollars across all films.", "sql": "SELECT avg(Gross_in_dollar) FROM film", "example": {"db_id": "film_rank", "query": "SELECT avg(Gross_in_dollar) FROM film", "query_toks": ["SELECT", "avg", "(", "Gross_in_dollar", ")", "FROM", "film"], "query_toks_no_value": ["select", "avg", "(", "gross_in_dollar", ")", "from", "film"], "question": "Return the average gross sales in dollars across all films.", "question_toks": ["Return", "the", "average", "gross", "sales", "in", "dollars", "across", "all", "films", "."], "guid": 8020}}
{"text": "program: Program_ID, Name, Origin, Launch, Owner; channel: Channel_ID, Name, Owner, Share_in_percent, Rating_in_percent; broadcast: Channel_ID, Program_ID, Time_of_day; broadcast_share: Channel_ID, Program_ID, Date, Share_in_percent | find the names of programs whose origin is not in Beijing.", "sql": "SELECT name FROM program WHERE origin != 'Beijing'", "example": {"db_id": "program_share", "query": "SELECT name FROM program WHERE origin != 'Beijing'", "query_toks": ["SELECT", "name", "FROM", "program", "WHERE", "origin", "!", "=", "'Beijing", "'"], "query_toks_no_value": ["select", "name", "from", "program", "where", "origin", "!", "=", "value"], "question": "find the names of programs whose origin is not in Beijing.", "question_toks": ["find", "the", "names", "of", "programs", "whose", "origin", "is", "not", "in", "Beijing", "."], "guid": 8021}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | What are the series in which \" Scott Foley \" is an actor ?", "sql": "SELECT t2.title FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN tv_series AS t2 ON t2.sid  =  t3.msid WHERE t1.name  =  \"Scott Foley\";", "example": {"db_id": "imdb", "query": "SELECT t2.title FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN tv_series AS t2 ON t2.sid  =  t3.msid WHERE t1.name  =  \"Scott Foley\";", "query_toks": ["SELECT", "t2.title", "FROM", "CAST", "AS", "t3", "JOIN", "actor", "AS", "t1", "ON", "t3.aid", "=", "t1.aid", "JOIN", "tv_series", "AS", "t2", "ON", "t2.sid", "=", "t3.msid", "WHERE", "t1.name", "=", "``", "Scott", "Foley", "''", ";"], "query_toks_no_value": ["select", "t2", ".", "title", "from", "cast", "as", "t3", "join", "actor", "as", "t1", "on", "t3", ".", "aid", "=", "t1", ".", "aid", "join", "tv_series", "as", "t2", "on", "t2", ".", "sid", "=", "t3", ".", "msid", "where", "t1", ".", "name", "=", "value"], "question": "What are the series in which \" Scott Foley \" is an actor ?", "question_toks": ["What", "are", "the", "series", "in", "which", "``", "Scott", "Foley", "``", "is", "an", "actor", "?"], "guid": 8022}}
{"text": "film: Film_ID, Rank_in_series, Number_in_season, Title, Directed_by, Original_air_date, Production_code; cinema: Cinema_ID, Name, Openning_year, Capacity, Location; schedule: Cinema_ID, Film_ID, Date, Show_times_per_day, Price | How many films have the word 'Dummy' in their titles?", "sql": "SELECT count(*) FROM film WHERE title LIKE \"%Dummy%\"", "example": {"db_id": "cinema", "query": "SELECT count(*) FROM film WHERE title LIKE \"%Dummy%\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "film", "WHERE", "title", "LIKE", "``", "%", "Dummy", "%", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "film", "where", "title", "like", "value"], "question": "How many films have the word 'Dummy' in their titles?", "question_toks": ["How", "many", "films", "have", "the", "word", "'Dummy", "'", "in", "their", "titles", "?"], "guid": 8023}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | What are the different reviewer names, movie titles, and stars for every rating where the reviewer had the same name as the director?", "sql": "SELECT DISTINCT T3.name ,  T2.title ,  T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.director  =  T3.name", "example": {"db_id": "movie_1", "query": "SELECT DISTINCT T3.name ,  T2.title ,  T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.director  =  T3.name", "query_toks": ["SELECT", "DISTINCT", "T3.name", ",", "T2.title", ",", "T1.stars", "FROM", "Rating", "AS", "T1", "JOIN", "Movie", "AS", "T2", "ON", "T1.mID", "=", "T2.mID", "JOIN", "Reviewer", "AS", "T3", "ON", "T1.rID", "=", "T3.rID", "WHERE", "T2.director", "=", "T3.name"], "query_toks_no_value": ["select", "distinct", "t3", ".", "name", ",", "t2", ".", "title", ",", "t1", ".", "stars", "from", "rating", "as", "t1", "join", "movie", "as", "t2", "on", "t1", ".", "mid", "=", "t2", ".", "mid", "join", "reviewer", "as", "t3", "on", "t1", ".", "rid", "=", "t3", ".", "rid", "where", "t2", ".", "director", "=", "t3", ".", "name"], "question": "What are the different reviewer names, movie titles, and stars for every rating where the reviewer had the same name as the director?", "question_toks": ["What", "are", "the", "different", "reviewer", "names", ",", "movie", "titles", ",", "and", "stars", "for", "every", "rating", "where", "the", "reviewer", "had", "the", "same", "name", "as", "the", "director", "?"], "guid": 8024}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | What are the names of all movies that were made after 2000 or reviewed by Brittany Harris?", "sql": "SELECT DISTINCT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Brittany Harris' OR T2.year  >  2000", "example": {"db_id": "movie_1", "query": "SELECT DISTINCT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Brittany Harris' OR T2.year  >  2000", "query_toks": ["SELECT", "DISTINCT", "T2.title", "FROM", "Rating", "AS", "T1", "JOIN", "Movie", "AS", "T2", "ON", "T1.mID", "=", "T2.mID", "JOIN", "Reviewer", "AS", "T3", "ON", "T1.rID", "=", "T3.rID", "WHERE", "T3.name", "=", "'Brittany", "Harris", "'", "OR", "T2.year", ">", "2000"], "query_toks_no_value": ["select", "distinct", "t2", ".", "title", "from", "rating", "as", "t1", "join", "movie", "as", "t2", "on", "t1", ".", "mid", "=", "t2", ".", "mid", "join", "reviewer", "as", "t3", "on", "t1", ".", "rid", "=", "t3", ".", "rid", "where", "t3", ".", "name", "=", "value", "or", "t2", ".", "year", ">", "value"], "question": "What are the names of all movies that were made after 2000 or reviewed by Brittany Harris?", "question_toks": ["What", "are", "the", "names", "of", "all", "movies", "that", "were", "made", "after", "2000", "or", "reviewed", "by", "Brittany", "Harris", "?"], "guid": 8025}}
{"text": "film: Film_ID, Rank_in_series, Number_in_season, Title, Directed_by, Original_air_date, Production_code; cinema: Cinema_ID, Name, Openning_year, Capacity, Location; schedule: Cinema_ID, Film_ID, Date, Show_times_per_day, Price | What are the title and maximum price of each film?", "sql": "SELECT T2.title ,  max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id", "example": {"db_id": "cinema", "query": "SELECT T2.title ,  max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id", "query_toks": ["SELECT", "T2.title", ",", "max", "(", "T1.price", ")", "FROM", "schedule", "AS", "T1", "JOIN", "film", "AS", "T2", "ON", "T1.film_id", "=", "T2.film_id", "GROUP", "BY", "T1.film_id"], "query_toks_no_value": ["select", "t2", ".", "title", ",", "max", "(", "t1", ".", "price", ")", "from", "schedule", "as", "t1", "join", "film", "as", "t2", "on", "t1", ".", "film_id", "=", "t2", ".", "film_id", "group", "by", "t1", ".", "film_id"], "question": "What are the title and maximum price of each film?", "question_toks": ["What", "are", "the", "title", "and", "maximum", "price", "of", "each", "film", "?"], "guid": 8026}}
{"text": "TV_Channel: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option; TV_series: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel; Cartoon: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel | List the Episode of all TV series sorted by rating.", "sql": "SELECT Episode FROM TV_series ORDER BY rating", "example": {"db_id": "tvshow", "query": "SELECT Episode FROM TV_series ORDER BY rating", "query_toks": ["SELECT", "Episode", "FROM", "TV_series", "ORDER", "BY", "rating"], "query_toks_no_value": ["select", "episode", "from", "tv_series", "order", "by", "rating"], "question": "List the Episode of all TV series sorted by rating.", "question_toks": ["List", "the", "Episode", "of", "all", "TV", "series", "sorted", "by", "rating", "."], "guid": 8027}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | who acted the role of \" Mr. Bean \"", "sql": "SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid WHERE t2.role  =  \"Mr. Bean\";", "example": {"db_id": "imdb", "query": "SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid WHERE t2.role  =  \"Mr. Bean\";", "query_toks": ["SELECT", "t1.name", "FROM", "CAST", "AS", "t2", "JOIN", "actor", "AS", "t1", "ON", "t2.aid", "=", "t1.aid", "WHERE", "t2.role", "=", "``", "Mr.", "Bean", "''", ";"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "cast", "as", "t2", "join", "actor", "as", "t1", "on", "t2", ".", "aid", "=", "t1", ".", "aid", "where", "t2", ".", "role", "=", "value"], "question": "who acted the role of \" Mr. Bean \"", "question_toks": ["who", "acted", "the", "role", "of", "``", "Mr.", "Bean", "``"], "guid": 8028}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | What are the series featuring \" Scott Foley \" ?", "sql": "SELECT t2.title FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN tv_series AS t2 ON t2.sid  =  t3.msid WHERE t1.name  =  \"Scott Foley\";", "example": {"db_id": "imdb", "query": "SELECT t2.title FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN tv_series AS t2 ON t2.sid  =  t3.msid WHERE t1.name  =  \"Scott Foley\";", "query_toks": ["SELECT", "t2.title", "FROM", "CAST", "AS", "t3", "JOIN", "actor", "AS", "t1", "ON", "t3.aid", "=", "t1.aid", "JOIN", "tv_series", "AS", "t2", "ON", "t2.sid", "=", "t3.msid", "WHERE", "t1.name", "=", "``", "Scott", "Foley", "''", ";"], "query_toks_no_value": ["select", "t2", ".", "title", "from", "cast", "as", "t3", "join", "actor", "as", "t1", "on", "t3", ".", "aid", "=", "t1", ".", "aid", "join", "tv_series", "as", "t2", "on", "t2", ".", "sid", "=", "t3", ".", "msid", "where", "t1", ".", "name", "=", "value"], "question": "What are the series featuring \" Scott Foley \" ?", "question_toks": ["What", "are", "the", "series", "featuring", "``", "Scott", "Foley", "``", "?"], "guid": 8029}}
{"text": "film: Film_ID, Title, Studio, Director, Gross_in_dollar; market: Market_ID, Country, Number_cities; film_market_estimation: Estimation_ID, Low_Estimate, High_Estimate, Film_ID, Type, Market_ID, Year | Please show the titles of films and the types of market estimations.", "sql": "SELECT T1.Title ,  T2.Type FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID  =  T2.Film_ID", "example": {"db_id": "film_rank", "query": "SELECT T1.Title ,  T2.Type FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID  =  T2.Film_ID", "query_toks": ["SELECT", "T1.Title", ",", "T2.Type", "FROM", "film", "AS", "T1", "JOIN", "film_market_estimation", "AS", "T2", "ON", "T1.Film_ID", "=", "T2.Film_ID"], "query_toks_no_value": ["select", "t1", ".", "title", ",", "t2", ".", "type", "from", "film", "as", "t1", "join", "film_market_estimation", "as", "t2", "on", "t1", ".", "film_id", "=", "t2", ".", "film_id"], "question": "Please show the titles of films and the types of market estimations.", "question_toks": ["Please", "show", "the", "titles", "of", "films", "and", "the", "types", "of", "market", "estimations", "."], "guid": 8030}}
{"text": "program: Program_ID, Name, Origin, Launch, Owner; channel: Channel_ID, Name, Owner, Share_in_percent, Rating_in_percent; broadcast: Channel_ID, Program_ID, Time_of_day; broadcast_share: Channel_ID, Program_ID, Date, Share_in_percent | find the number of different programs that are broadcast during night time.", "sql": "SELECT count(DISTINCT program_id) FROM broadcast WHERE time_of_day  =  'Night'", "example": {"db_id": "program_share", "query": "SELECT count(DISTINCT program_id) FROM broadcast WHERE time_of_day  =  'Night'", "query_toks": ["SELECT", "count", "(", "DISTINCT", "program_id", ")", "FROM", "broadcast", "WHERE", "time_of_day", "=", "'Night", "'"], "query_toks_no_value": ["select", "count", "(", "distinct", "program_id", ")", "from", "broadcast", "where", "time_of_day", "=", "value"], "question": "find the number of different programs that are broadcast during night time.", "question_toks": ["find", "the", "number", "of", "different", "programs", "that", "are", "broadcast", "during", "night", "time", "."], "guid": 8031}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | For each director, return the director's name together with the title of the movie they directed that received the highest rating among all of their movies, and the value of that rating. Ignore movies whose director is NULL.", "sql": "SELECT T2.title ,  T1.stars ,  T2.director ,  max(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE director != \"null\" GROUP BY director", "example": {"db_id": "movie_1", "query": "SELECT T2.title ,  T1.stars ,  T2.director ,  max(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE director != \"null\" GROUP BY director", "query_toks": ["SELECT", "T2.title", ",", "T1.stars", ",", "T2.director", ",", "max", "(", "T1.stars", ")", "FROM", "Rating", "AS", "T1", "JOIN", "Movie", "AS", "T2", "ON", "T1.mID", "=", "T2.mID", "WHERE", "director", "!", "=", "``", "null", "''", "GROUP", "BY", "director"], "query_toks_no_value": ["select", "t2", ".", "title", ",", "t1", ".", "stars", ",", "t2", ".", "director", ",", "max", "(", "t1", ".", "stars", ")", "from", "rating", "as", "t1", "join", "movie", "as", "t2", "on", "t1", ".", "mid", "=", "t2", ".", "mid", "where", "director", "!", "=", "value", "group", "by", "director"], "question": "For each director, return the director's name together with the title of the movie they directed that received the highest rating among all of their movies, and the value of that rating. Ignore movies whose director is NULL.", "question_toks": ["For", "each", "director", ",", "return", "the", "director", "'s", "name", "together", "with", "the", "title", "of", "the", "movie", "they", "directed", "that", "received", "the", "highest", "rating", "among", "all", "of", "their", "movies", ",", "and", "the", "value", "of", "that", "rating", ".", "Ignore", "movies", "whose", "director", "is", "NULL", "."], "guid": 8032}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | What is the names of movies whose created year is after all movies directed by Steven Spielberg?", "sql": "SELECT title FROM Movie WHERE YEAR  >  (SELECT max(YEAR) FROM Movie WHERE director  =  \"Steven Spielberg\")", "example": {"db_id": "movie_1", "query": "SELECT title FROM Movie WHERE YEAR  >  (SELECT max(YEAR) FROM Movie WHERE director  =  \"Steven Spielberg\")", "query_toks": ["SELECT", "title", "FROM", "Movie", "WHERE", "YEAR", ">", "(", "SELECT", "max", "(", "YEAR", ")", "FROM", "Movie", "WHERE", "director", "=", "``", "Steven", "Spielberg", "''", ")"], "query_toks_no_value": ["select", "title", "from", "movie", "where", "year", ">", "(", "select", "max", "(", "year", ")", "from", "movie", "where", "director", "=", "value", ")"], "question": "What is the names of movies whose created year is after all movies directed by Steven Spielberg?", "question_toks": ["What", "is", "the", "names", "of", "movies", "whose", "created", "year", "is", "after", "all", "movies", "directed", "by", "Steven", "Spielberg", "?"], "guid": 8033}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | Give me the name of all the actors from Afghanistan", "sql": "SELECT name FROM actor WHERE nationality  =  \"Afghanistan\";", "example": {"db_id": "imdb", "query": "SELECT name FROM actor WHERE nationality  =  \"Afghanistan\";", "query_toks": ["SELECT", "name", "FROM", "actor", "WHERE", "nationality", "=", "``", "Afghanistan", "''", ";"], "query_toks_no_value": ["select", "name", "from", "actor", "where", "nationality", "=", "value"], "question": "Give me the name of all the actors from Afghanistan", "question_toks": ["Give", "me", "the", "name", "of", "all", "the", "actors", "from", "Afghanistan"], "guid": 8034}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | Find all movies written and produced by \" Woody Allen \"", "sql": "SELECT t2.title FROM movie AS t2 JOIN made_by AS t3 ON t2.mid  =  t3.msid JOIN producer AS t1 ON t1.pid  =  t3.pid JOIN written_by AS t5 ON t5.msid  =  t2.mid JOIN writer AS t4 ON t5.wid  =  t4.wid WHERE t1.name  =  \"Woody Allen\" AND t4.name  =  \"Woody Allen\";", "example": {"db_id": "imdb", "query": "SELECT t2.title FROM movie AS t2 JOIN made_by AS t3 ON t2.mid  =  t3.msid JOIN producer AS t1 ON t1.pid  =  t3.pid JOIN written_by AS t5 ON t5.msid  =  t2.mid JOIN writer AS t4 ON t5.wid  =  t4.wid WHERE t1.name  =  \"Woody Allen\" AND t4.name  =  \"Woody Allen\";", "query_toks": ["SELECT", "t2.title", "FROM", "movie", "AS", "t2", "JOIN", "made_by", "AS", "t3", "ON", "t2.mid", "=", "t3.msid", "JOIN", "producer", "AS", "t1", "ON", "t1.pid", "=", "t3.pid", "JOIN", "written_by", "AS", "t5", "ON", "t5.msid", "=", "t2.mid", "JOIN", "writer", "AS", "t4", "ON", "t5.wid", "=", "t4.wid", "WHERE", "t1.name", "=", "``", "Woody", "Allen", "''", "AND", "t4.name", "=", "``", "Woody", "Allen", "''", ";"], "query_toks_no_value": ["select", "t2", ".", "title", "from", "movie", "as", "t2", "join", "made_by", "as", "t3", "on", "t2", ".", "mid", "=", "t3", ".", "msid", "join", "producer", "as", "t1", "on", "t1", ".", "pid", "=", "t3", ".", "pid", "join", "written_by", "as", "t5", "on", "t5", ".", "msid", "=", "t2", ".", "mid", "join", "writer", "as", "t4", "on", "t5", ".", "wid", "=", "t4", ".", "wid", "where", "t1", ".", "name", "=", "value", "and", "t4", ".", "name", "=", "value"], "question": "Find all movies written and produced by \" Woody Allen \"", "question_toks": ["Find", "all", "movies", "written", "and", "produced", "by", "``", "Woody", "Allen", "``"], "guid": 8035}}
{"text": "film: Film_ID, Title, Studio, Director, Gross_in_dollar; market: Market_ID, Country, Number_cities; film_market_estimation: Estimation_ID, Low_Estimate, High_Estimate, Film_ID, Type, Market_ID, Year | What is the name of teh studio that created the most films?", "sql": "SELECT Studio FROM film GROUP BY Studio ORDER BY COUNT(*) DESC LIMIT 1", "example": {"db_id": "film_rank", "query": "SELECT Studio FROM film GROUP BY Studio ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "Studio", "FROM", "film", "GROUP", "BY", "Studio", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "studio", "from", "film", "group", "by", "studio", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the name of teh studio that created the most films?", "question_toks": ["What", "is", "the", "name", "of", "teh", "studio", "that", "created", "the", "most", "films", "?"], "guid": 8036}}
{"text": "festival_detail: Festival_ID, Festival_Name, Chair_Name, Location, Year, Num_of_Audience; artwork: Artwork_ID, Type, Name; nomination: Artwork_ID, Festival_ID, Result | Show the ids and names of festivals that have at least two nominations for artworks.", "sql": "SELECT T1.Festival_ID ,  T3.Festival_Name FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID GROUP BY T1.Festival_ID HAVING COUNT(*)  >=  2", "example": {"db_id": "entertainment_awards", "query": "SELECT T1.Festival_ID ,  T3.Festival_Name FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID GROUP BY T1.Festival_ID HAVING COUNT(*)  >=  2", "query_toks": ["SELECT", "T1.Festival_ID", ",", "T3.Festival_Name", "FROM", "nomination", "AS", "T1", "JOIN", "artwork", "AS", "T2", "ON", "T1.Artwork_ID", "=", "T2.Artwork_ID", "JOIN", "festival_detail", "AS", "T3", "ON", "T1.Festival_ID", "=", "T3.Festival_ID", "GROUP", "BY", "T1.Festival_ID", "HAVING", "COUNT", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "t1", ".", "festival_id", ",", "t3", ".", "festival_name", "from", "nomination", "as", "t1", "join", "artwork", "as", "t2", "on", "t1", ".", "artwork_id", "=", "t2", ".", "artwork_id", "join", "festival_detail", "as", "t3", "on", "t1", ".", "festival_id", "=", "t3", ".", "festival_id", "group", "by", "t1", ".", "festival_id", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "Show the ids and names of festivals that have at least two nominations for artworks.", "question_toks": ["Show", "the", "ids", "and", "names", "of", "festivals", "that", "have", "at", "least", "two", "nominations", "for", "artworks", "."], "guid": 8037}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | How many reviewers are there?", "sql": "SELECT count(*) FROM Reviewer", "example": {"db_id": "movie_1", "query": "SELECT count(*) FROM Reviewer", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Reviewer"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "reviewer"], "question": "How many reviewers are there?", "question_toks": ["How", "many", "reviewers", "are", "there", "?"], "guid": 8038}}
{"text": "film: Film_ID, Rank_in_series, Number_in_season, Title, Directed_by, Original_air_date, Production_code; cinema: Cinema_ID, Name, Openning_year, Capacity, Location; schedule: Cinema_ID, Film_ID, Date, Show_times_per_day, Price | Show cinema name, film title, date, and price for each record in schedule.", "sql": "SELECT T3.name ,  T2.title ,  T1.date ,  T1.price FROM schedule AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id JOIN cinema AS T3 ON T1.cinema_id  =  T3.cinema_id", "example": {"db_id": "cinema", "query": "SELECT T3.name ,  T2.title ,  T1.date ,  T1.price FROM schedule AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id JOIN cinema AS T3 ON T1.cinema_id  =  T3.cinema_id", "query_toks": ["SELECT", "T3.name", ",", "T2.title", ",", "T1.date", ",", "T1.price", "FROM", "schedule", "AS", "T1", "JOIN", "film", "AS", "T2", "ON", "T1.film_id", "=", "T2.film_id", "JOIN", "cinema", "AS", "T3", "ON", "T1.cinema_id", "=", "T3.cinema_id"], "query_toks_no_value": ["select", "t3", ".", "name", ",", "t2", ".", "title", ",", "t1", ".", "date", ",", "t1", ".", "price", "from", "schedule", "as", "t1", "join", "film", "as", "t2", "on", "t1", ".", "film_id", "=", "t2", ".", "film_id", "join", "cinema", "as", "t3", "on", "t1", ".", "cinema_id", "=", "t3", ".", "cinema_id"], "question": "Show cinema name, film title, date, and price for each record in schedule.", "question_toks": ["Show", "cinema", "name", ",", "film", "title", ",", "date", ",", "and", "price", "for", "each", "record", "in", "schedule", "."], "guid": 8039}}
{"text": "TV_Channel: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option; TV_series: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel; Cartoon: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel | For each language, list the number of TV Channels that use it.", "sql": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE", "example": {"db_id": "tvshow", "query": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE", "query_toks": ["SELECT", "LANGUAGE", ",", "count", "(", "*", ")", "FROM", "TV_Channel", "GROUP", "BY", "LANGUAGE"], "query_toks_no_value": ["select", "language", ",", "count", "(", "*", ")", "from", "tv_channel", "group", "by", "language"], "question": "For each language, list the number of TV Channels that use it.", "question_toks": ["For", "each", "language", ",", "list", "the", "number", "of", "TV", "Channels", "that", "use", "it", "."], "guid": 8040}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | For all directors who directed more than one movie, return the titles of all movies directed by them, along with the director name. Sort by director name, then movie title.", "sql": "SELECT T1.title ,  T1.director FROM Movie AS T1 JOIN Movie AS T2 ON T1.director  =  T2.director WHERE T1.title != T2.title ORDER BY T1.director ,  T1.title", "example": {"db_id": "movie_1", "query": "SELECT T1.title ,  T1.director FROM Movie AS T1 JOIN Movie AS T2 ON T1.director  =  T2.director WHERE T1.title != T2.title ORDER BY T1.director ,  T1.title", "query_toks": ["SELECT", "T1.title", ",", "T1.director", "FROM", "Movie", "AS", "T1", "JOIN", "Movie", "AS", "T2", "ON", "T1.director", "=", "T2.director", "WHERE", "T1.title", "!", "=", "T2.title", "ORDER", "BY", "T1.director", ",", "T1.title"], "query_toks_no_value": ["select", "t1", ".", "title", ",", "t1", ".", "director", "from", "movie", "as", "t1", "join", "movie", "as", "t2", "on", "t1", ".", "director", "=", "t2", ".", "director", "where", "t1", ".", "title", "!", "=", "t2", ".", "title", "order", "by", "t1", ".", "director", ",", "t1", ".", "title"], "question": "For all directors who directed more than one movie, return the titles of all movies directed by them, along with the director name. Sort by director name, then movie title.", "question_toks": ["For", "all", "directors", "who", "directed", "more", "than", "one", "movie", ",", "return", "the", "titles", "of", "all", "movies", "directed", "by", "them", ",", "along", "with", "the", "director", "name", ".", "Sort", "by", "director", "name", ",", "then", "movie", "title", "."], "guid": 8041}}
{"text": "TV_Channel: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option; TV_series: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel; Cartoon: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel | List the title of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\".", "sql": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";", "example": {"db_id": "tvshow", "query": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";", "query_toks": ["SELECT", "Title", "FROM", "Cartoon", "WHERE", "Directed_by", "=", "``", "Ben", "Jones", "''", "OR", "Directed_by", "=", "``", "Brandon", "Vietti", "''", ";"], "query_toks_no_value": ["select", "title", "from", "cartoon", "where", "directed_by", "=", "value", "or", "directed_by", "=", "value"], "question": "List the title of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\".", "question_toks": ["List", "the", "title", "of", "all", "cartoon", "directed", "by", "``", "Ben", "Jones", "''", "or", "``", "Brandon", "Vietti", "''", "."], "guid": 8042}}
{"text": "TV_Channel: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option; TV_series: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel; Cartoon: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel | What are the names of all cartoons directed by Ben Jones?", "sql": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";", "example": {"db_id": "tvshow", "query": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";", "query_toks": ["SELECT", "Title", "FROM", "Cartoon", "WHERE", "Directed_by", "=", "``", "Ben", "Jones", "''", ";"], "query_toks_no_value": ["select", "title", "from", "cartoon", "where", "directed_by", "=", "value"], "question": "What are the names of all cartoons directed by Ben Jones?", "question_toks": ["What", "are", "the", "names", "of", "all", "cartoons", "directed", "by", "Ben", "Jones", "?"], "guid": 8043}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | In what city was \" Kevin Spacey \" born ?", "sql": "SELECT birth_city FROM director WHERE name  =  \"director_name0\";", "example": {"db_id": "imdb", "query": "SELECT birth_city FROM director WHERE name  =  \"director_name0\";", "query_toks": ["SELECT", "birth_city", "FROM", "director", "WHERE", "name", "=", "``", "director_name0", "''", ";"], "query_toks_no_value": ["select", "birth_city", "from", "director", "where", "name", "=", "value"], "question": "In what city was \" Kevin Spacey \" born ?", "question_toks": ["In", "what", "city", "was", "``", "Kevin", "Spacey", "``", "born", "?"], "guid": 8044}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | For each director who directed more than one movie, what are the titles and dates of release for all those movies?", "sql": "SELECT T1.title ,  T1.year FROM Movie AS T1 JOIN Movie AS T2 ON T1.director  =  T2.director WHERE T1.title != T2.title", "example": {"db_id": "movie_1", "query": "SELECT T1.title ,  T1.year FROM Movie AS T1 JOIN Movie AS T2 ON T1.director  =  T2.director WHERE T1.title != T2.title", "query_toks": ["SELECT", "T1.title", ",", "T1.year", "FROM", "Movie", "AS", "T1", "JOIN", "Movie", "AS", "T2", "ON", "T1.director", "=", "T2.director", "WHERE", "T1.title", "!", "=", "T2.title"], "query_toks_no_value": ["select", "t1", ".", "title", ",", "t1", ".", "year", "from", "movie", "as", "t1", "join", "movie", "as", "t2", "on", "t1", ".", "director", "=", "t2", ".", "director", "where", "t1", ".", "title", "!", "=", "t2", ".", "title"], "question": "For each director who directed more than one movie, what are the titles and dates of release for all those movies?", "question_toks": ["For", "each", "director", "who", "directed", "more", "than", "one", "movie", ",", "what", "are", "the", "titles", "and", "dates", "of", "release", "for", "all", "those", "movies", "?"], "guid": 8045}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | How much was the budget of \" Finding Nemo \"", "sql": "SELECT budget FROM movie WHERE title  =  \"Finding Nemo\";", "example": {"db_id": "imdb", "query": "SELECT budget FROM movie WHERE title  =  \"Finding Nemo\";", "query_toks": ["SELECT", "budget", "FROM", "movie", "WHERE", "title", "=", "``", "Finding", "Nemo", "''", ";"], "query_toks_no_value": ["select", "budget", "from", "movie", "where", "title", "=", "value"], "question": "How much was the budget of \" Finding Nemo \"", "question_toks": ["How", "much", "was", "the", "budget", "of", "``", "Finding", "Nemo", "``"], "guid": 8046}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | Find the movie which is classified in the most number of genres", "sql": "SELECT t3.title FROM genre AS t2 JOIN classification AS t1 ON t2.gid  =  t1.gid JOIN movie AS t3 ON t3.mid  =  t1.msid GROUP BY t3.title ORDER BY COUNT ( DISTINCT t2.genre  ) DESC LIMIT 1;", "example": {"db_id": "imdb", "query": "SELECT t3.title FROM genre AS t2 JOIN classification AS t1 ON t2.gid  =  t1.gid JOIN movie AS t3 ON t3.mid  =  t1.msid GROUP BY t3.title ORDER BY COUNT ( DISTINCT t2.genre  ) DESC LIMIT 1;", "query_toks": ["SELECT", "t3.title", "FROM", "genre", "AS", "t2", "JOIN", "classification", "AS", "t1", "ON", "t2.gid", "=", "t1.gid", "JOIN", "movie", "AS", "t3", "ON", "t3.mid", "=", "t1.msid", "GROUP", "BY", "t3.title", "ORDER", "BY", "COUNT", "(", "DISTINCT", "t2.genre", ")", "DESC", "LIMIT", "1", ";"], "query_toks_no_value": ["select", "t3", ".", "title", "from", "genre", "as", "t2", "join", "classification", "as", "t1", "on", "t2", ".", "gid", "=", "t1", ".", "gid", "join", "movie", "as", "t3", "on", "t3", ".", "mid", "=", "t1", ".", "msid", "group", "by", "t3", ".", "title", "order", "by", "count", "(", "distinct", "t2", ".", "genre", ")", "desc", "limit", "value"], "question": "Find the movie which is classified in the most number of genres", "question_toks": ["Find", "the", "movie", "which", "is", "classified", "in", "the", "most", "number", "of", "genres"], "guid": 8047}}
{"text": "program: Program_ID, Name, Origin, Launch, Owner; channel: Channel_ID, Name, Owner, Share_in_percent, Rating_in_percent; broadcast: Channel_ID, Program_ID, Time_of_day; broadcast_share: Channel_ID, Program_ID, Date, Share_in_percent | how many programs are there?", "sql": "SELECT count(*) FROM program", "example": {"db_id": "program_share", "query": "SELECT count(*) FROM program", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "program"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "program"], "question": "how many programs are there?", "question_toks": ["how", "many", "programs", "are", "there", "?"], "guid": 8048}}
{"text": "festival_detail: Festival_ID, Festival_Name, Chair_Name, Location, Year, Num_of_Audience; artwork: Artwork_ID, Type, Name; nomination: Artwork_ID, Festival_ID, Result | List the name of artworks whose type is not \"Program Talent Show\".", "sql": "SELECT Name FROM artwork WHERE TYPE != \"Program Talent Show\"", "example": {"db_id": "entertainment_awards", "query": "SELECT Name FROM artwork WHERE TYPE != \"Program Talent Show\"", "query_toks": ["SELECT", "Name", "FROM", "artwork", "WHERE", "TYPE", "!", "=", "``", "Program", "Talent", "Show", "''"], "query_toks_no_value": ["select", "name", "from", "artwork", "where", "type", "!", "=", "value"], "question": "List the name of artworks whose type is not \"Program Talent Show\".", "question_toks": ["List", "the", "name", "of", "artworks", "whose", "type", "is", "not", "``", "Program", "Talent", "Show", "''", "."], "guid": 8049}}
{"text": "program: Program_ID, Name, Origin, Launch, Owner; channel: Channel_ID, Name, Owner, Share_in_percent, Rating_in_percent; broadcast: Channel_ID, Program_ID, Time_of_day; broadcast_share: Channel_ID, Program_ID, Date, Share_in_percent | Which channels are not owned by CCTV? Give me the channel names.", "sql": "SELECT name FROM channel WHERE OWNER != 'CCTV'", "example": {"db_id": "program_share", "query": "SELECT name FROM channel WHERE OWNER != 'CCTV'", "query_toks": ["SELECT", "name", "FROM", "channel", "WHERE", "OWNER", "!", "=", "'CCTV", "'"], "query_toks_no_value": ["select", "name", "from", "channel", "where", "owner", "!", "=", "value"], "question": "Which channels are not owned by CCTV? Give me the channel names.", "question_toks": ["Which", "channels", "are", "not", "owned", "by", "CCTV", "?", "Give", "me", "the", "channel", "names", "."], "guid": 8050}}
{"text": "film: Film_ID, Title, Studio, Director, Gross_in_dollar; market: Market_ID, Country, Number_cities; film_market_estimation: Estimation_ID, Low_Estimate, High_Estimate, Film_ID, Type, Market_ID, Year | Return the low and high estimates for all film markets.", "sql": "SELECT Low_Estimate ,  High_Estimate FROM film_market_estimation", "example": {"db_id": "film_rank", "query": "SELECT Low_Estimate ,  High_Estimate FROM film_market_estimation", "query_toks": ["SELECT", "Low_Estimate", ",", "High_Estimate", "FROM", "film_market_estimation"], "query_toks_no_value": ["select", "low_estimate", ",", "high_estimate", "from", "film_market_estimation"], "question": "Return the low and high estimates for all film markets.", "question_toks": ["Return", "the", "low", "and", "high", "estimates", "for", "all", "film", "markets", "."], "guid": 8051}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | What are the names of the directors who made exactly one movie?", "sql": "SELECT director FROM Movie GROUP BY director HAVING count(*)  =  1", "example": {"db_id": "movie_1", "query": "SELECT director FROM Movie GROUP BY director HAVING count(*)  =  1", "query_toks": ["SELECT", "director", "FROM", "Movie", "GROUP", "BY", "director", "HAVING", "count", "(", "*", ")", "=", "1"], "query_toks_no_value": ["select", "director", "from", "movie", "group", "by", "director", "having", "count", "(", "*", ")", "=", "value"], "question": "What are the names of the directors who made exactly one movie?", "question_toks": ["What", "are", "the", "names", "of", "the", "directors", "who", "made", "exactly", "one", "movie", "?"], "guid": 8052}}
{"text": "TV_Channel: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option; TV_series: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel; Cartoon: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel | Find the production code and channel of the most recently aired cartoon .", "sql": "select production_code ,  channel from cartoon order by original_air_date desc limit 1", "example": {"db_id": "tvshow", "query": "select production_code ,  channel from cartoon order by original_air_date desc limit 1", "query_toks": ["select", "production_code", ",", "channel", "from", "cartoon", "order", "by", "original_air_date", "desc", "limit", "1"], "query_toks_no_value": ["select", "production_code", ",", "channel", "from", "cartoon", "order", "by", "original_air_date", "desc", "limit", "value"], "question": "Find the production code and channel of the most recently aired cartoon .", "question_toks": ["Find", "the", "production", "code", "and", "channel", "of", "the", "most", "recently", "aired", "cartoon", "."], "guid": 8053}}
{"text": "film: Film_ID, Rank_in_series, Number_in_season, Title, Directed_by, Original_air_date, Production_code; cinema: Cinema_ID, Name, Openning_year, Capacity, Location; schedule: Cinema_ID, Film_ID, Date, Show_times_per_day, Price | Show all the locations where no cinema has capacity over 800.", "sql": "SELECT LOCATION FROM cinema EXCEPT SELECT LOCATION FROM cinema WHERE capacity  >  800", "example": {"db_id": "cinema", "query": "SELECT LOCATION FROM cinema EXCEPT SELECT LOCATION FROM cinema WHERE capacity  >  800", "query_toks": ["SELECT", "LOCATION", "FROM", "cinema", "EXCEPT", "SELECT", "LOCATION", "FROM", "cinema", "WHERE", "capacity", ">", "800"], "query_toks_no_value": ["select", "location", "from", "cinema", "except", "select", "location", "from", "cinema", "where", "capacity", ">", "value"], "question": "Show all the locations where no cinema has capacity over 800.", "question_toks": ["Show", "all", "the", "locations", "where", "no", "cinema", "has", "capacity", "over", "800", "."], "guid": 8054}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | How many movies did \" Shahab Hosseini \" act in", "sql": "SELECT COUNT ( DISTINCT t2.title  ) FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.name  =  \"Shahab Hosseini\";", "example": {"db_id": "imdb", "query": "SELECT COUNT ( DISTINCT t2.title  ) FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.name  =  \"Shahab Hosseini\";", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "t2.title", ")", "FROM", "CAST", "AS", "t3", "JOIN", "actor", "AS", "t1", "ON", "t3.aid", "=", "t1.aid", "JOIN", "movie", "AS", "t2", "ON", "t2.mid", "=", "t3.msid", "WHERE", "t1.name", "=", "``", "Shahab", "Hosseini", "''", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "t2", ".", "title", ")", "from", "cast", "as", "t3", "join", "actor", "as", "t1", "on", "t3", ".", "aid", "=", "t1", ".", "aid", "join", "movie", "as", "t2", "on", "t2", ".", "mid", "=", "t3", ".", "msid", "where", "t1", ".", "name", "=", "value"], "question": "How many movies did \" Shahab Hosseini \" act in", "question_toks": ["How", "many", "movies", "did", "``", "Shahab", "Hosseini", "``", "act", "in"], "guid": 8055}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | find all films in which \" Rowan Atkinson \" acted as \" Mr. Bean \"", "sql": "SELECT t2.title FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.name  =  \"Rowan Atkinson\" AND t3.role  =  \"Mr. Bean\";", "example": {"db_id": "imdb", "query": "SELECT t2.title FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.name  =  \"Rowan Atkinson\" AND t3.role  =  \"Mr. Bean\";", "query_toks": ["SELECT", "t2.title", "FROM", "CAST", "AS", "t3", "JOIN", "actor", "AS", "t1", "ON", "t3.aid", "=", "t1.aid", "JOIN", "movie", "AS", "t2", "ON", "t2.mid", "=", "t3.msid", "WHERE", "t1.name", "=", "``", "Rowan", "Atkinson", "''", "AND", "t3.role", "=", "``", "Mr.", "Bean", "''", ";"], "query_toks_no_value": ["select", "t2", ".", "title", "from", "cast", "as", "t3", "join", "actor", "as", "t1", "on", "t3", ".", "aid", "=", "t1", ".", "aid", "join", "movie", "as", "t2", "on", "t2", ".", "mid", "=", "t3", ".", "msid", "where", "t1", ".", "name", "=", "value", "and", "t3", ".", "role", "=", "value"], "question": "find all films in which \" Rowan Atkinson \" acted as \" Mr. Bean \"", "question_toks": ["find", "all", "films", "in", "which", "``", "Rowan", "Atkinson", "``", "acted", "as", "``", "Mr.", "Bean", "``"], "guid": 8056}}
{"text": "program: Program_ID, Name, Origin, Launch, Owner; channel: Channel_ID, Name, Owner, Share_in_percent, Rating_in_percent; broadcast: Channel_ID, Program_ID, Time_of_day; broadcast_share: Channel_ID, Program_ID, Date, Share_in_percent | Find the names of the channels that are broadcast in the morning.", "sql": "SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Morning'", "example": {"db_id": "program_share", "query": "SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Morning'", "query_toks": ["SELECT", "t1.name", "FROM", "channel", "AS", "t1", "JOIN", "broadcast", "AS", "t2", "ON", "t1.channel_id", "=", "t2.channel_id", "WHERE", "t2.time_of_day", "=", "'Morning", "'"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "channel", "as", "t1", "join", "broadcast", "as", "t2", "on", "t1", ".", "channel_id", "=", "t2", ".", "channel_id", "where", "t2", ".", "time_of_day", "=", "value"], "question": "Find the names of the channels that are broadcast in the morning.", "question_toks": ["Find", "the", "names", "of", "the", "channels", "that", "are", "broadcast", "in", "the", "morning", "."], "guid": 8057}}
{"text": "film: Film_ID, Rank_in_series, Number_in_season, Title, Directed_by, Original_air_date, Production_code; cinema: Cinema_ID, Name, Openning_year, Capacity, Location; schedule: Cinema_ID, Film_ID, Date, Show_times_per_day, Price | What are the title and director of each film?", "sql": "SELECT title ,  directed_by FROM film", "example": {"db_id": "cinema", "query": "SELECT title ,  directed_by FROM film", "query_toks": ["SELECT", "title", ",", "directed_by", "FROM", "film"], "query_toks_no_value": ["select", "title", ",", "directed_by", "from", "film"], "question": "What are the title and director of each film?", "question_toks": ["What", "are", "the", "title", "and", "director", "of", "each", "film", "?"], "guid": 8058}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | For all directors who have directed more than one movie, what movies have they directed and what are their names?", "sql": "SELECT T1.title ,  T1.director FROM Movie AS T1 JOIN Movie AS T2 ON T1.director  =  T2.director WHERE T1.title != T2.title ORDER BY T1.director ,  T1.title", "example": {"db_id": "movie_1", "query": "SELECT T1.title ,  T1.director FROM Movie AS T1 JOIN Movie AS T2 ON T1.director  =  T2.director WHERE T1.title != T2.title ORDER BY T1.director ,  T1.title", "query_toks": ["SELECT", "T1.title", ",", "T1.director", "FROM", "Movie", "AS", "T1", "JOIN", "Movie", "AS", "T2", "ON", "T1.director", "=", "T2.director", "WHERE", "T1.title", "!", "=", "T2.title", "ORDER", "BY", "T1.director", ",", "T1.title"], "query_toks_no_value": ["select", "t1", ".", "title", ",", "t1", ".", "director", "from", "movie", "as", "t1", "join", "movie", "as", "t2", "on", "t1", ".", "director", "=", "t2", ".", "director", "where", "t1", ".", "title", "!", "=", "t2", ".", "title", "order", "by", "t1", ".", "director", ",", "t1", ".", "title"], "question": "For all directors who have directed more than one movie, what movies have they directed and what are their names?", "question_toks": ["For", "all", "directors", "who", "have", "directed", "more", "than", "one", "movie", ",", "what", "movies", "have", "they", "directed", "and", "what", "are", "their", "names", "?"], "guid": 8059}}
{"text": "TV_Channel: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option; TV_series: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel; Cartoon: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel | What are the titles of the cartoons sorted alphabetically?", "sql": "SELECT Title FROM Cartoon ORDER BY title", "example": {"db_id": "tvshow", "query": "SELECT Title FROM Cartoon ORDER BY title", "query_toks": ["SELECT", "Title", "FROM", "Cartoon", "ORDER", "BY", "title"], "query_toks_no_value": ["select", "title", "from", "cartoon", "order", "by", "title"], "question": "What are the titles of the cartoons sorted alphabetically?", "question_toks": ["What", "are", "the", "titles", "of", "the", "cartoons", "sorted", "alphabetically", "?"], "guid": 8060}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | Which producer has worked with the most number of directors ?", "sql": "SELECT t1.name FROM director AS t3 JOIN directed_by AS t2 ON t3.did  =  t2.did JOIN movie AS t4 ON t4.mid  =  t2.msid JOIN made_by AS t5 ON t4.mid  =  t5.msid JOIN producer AS t1 ON t1.pid  =  t5.pid GROUP BY t1.name ORDER BY COUNT ( DISTINCT t3.name  ) DESC LIMIT 1;", "example": {"db_id": "imdb", "query": "SELECT t1.name FROM director AS t3 JOIN directed_by AS t2 ON t3.did  =  t2.did JOIN movie AS t4 ON t4.mid  =  t2.msid JOIN made_by AS t5 ON t4.mid  =  t5.msid JOIN producer AS t1 ON t1.pid  =  t5.pid GROUP BY t1.name ORDER BY COUNT ( DISTINCT t3.name  ) DESC LIMIT 1;", "query_toks": ["SELECT", "t1.name", "FROM", "director", "AS", "t3", "JOIN", "directed_by", "AS", "t2", "ON", "t3.did", "=", "t2.did", "JOIN", "movie", "AS", "t4", "ON", "t4.mid", "=", "t2.msid", "JOIN", "made_by", "AS", "t5", "ON", "t4.mid", "=", "t5.msid", "JOIN", "producer", "AS", "t1", "ON", "t1.pid", "=", "t5.pid", "GROUP", "BY", "t1.name", "ORDER", "BY", "COUNT", "(", "DISTINCT", "t3.name", ")", "DESC", "LIMIT", "1", ";"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "director", "as", "t3", "join", "directed_by", "as", "t2", "on", "t3", ".", "did", "=", "t2", ".", "did", "join", "movie", "as", "t4", "on", "t4", ".", "mid", "=", "t2", ".", "msid", "join", "made_by", "as", "t5", "on", "t4", ".", "mid", "=", "t5", ".", "msid", "join", "producer", "as", "t1", "on", "t1", ".", "pid", "=", "t5", ".", "pid", "group", "by", "t1", ".", "name", "order", "by", "count", "(", "distinct", "t3", ".", "name", ")", "desc", "limit", "value"], "question": "Which producer has worked with the most number of directors ?", "question_toks": ["Which", "producer", "has", "worked", "with", "the", "most", "number", "of", "directors", "?"], "guid": 8061}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | Who acts \" Olivia Pope \" in the series Scandal ?", "sql": "SELECT t1.name FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN tv_series AS t2 ON t2.sid  =  t3.msid WHERE t3.role  =  \"Olivia Pope\" AND t2.title  =  \"Scandal\";", "example": {"db_id": "imdb", "query": "SELECT t1.name FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN tv_series AS t2 ON t2.sid  =  t3.msid WHERE t3.role  =  \"Olivia Pope\" AND t2.title  =  \"Scandal\";", "query_toks": ["SELECT", "t1.name", "FROM", "CAST", "AS", "t3", "JOIN", "actor", "AS", "t1", "ON", "t3.aid", "=", "t1.aid", "JOIN", "tv_series", "AS", "t2", "ON", "t2.sid", "=", "t3.msid", "WHERE", "t3.role", "=", "``", "Olivia", "Pope", "''", "AND", "t2.title", "=", "``", "Scandal", "''", ";"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "cast", "as", "t3", "join", "actor", "as", "t1", "on", "t3", ".", "aid", "=", "t1", ".", "aid", "join", "tv_series", "as", "t2", "on", "t2", ".", "sid", "=", "t3", ".", "msid", "where", "t3", ".", "role", "=", "value", "and", "t2", ".", "title", "=", "value"], "question": "Who acts \" Olivia Pope \" in the series Scandal ?", "question_toks": ["Who", "acts", "``", "Olivia", "Pope", "``", "in", "the", "series", "Scandal", "?"], "guid": 8062}}
{"text": "program: Program_ID, Name, Origin, Launch, Owner; channel: Channel_ID, Name, Owner, Share_in_percent, Rating_in_percent; broadcast: Channel_ID, Program_ID, Time_of_day; broadcast_share: Channel_ID, Program_ID, Date, Share_in_percent | Find the total rating ratio for each channel owner.", "sql": "SELECT sum(Rating_in_percent) ,  OWNER FROM channel GROUP BY OWNER", "example": {"db_id": "program_share", "query": "SELECT sum(Rating_in_percent) ,  OWNER FROM channel GROUP BY OWNER", "query_toks": ["SELECT", "sum", "(", "Rating_in_percent", ")", ",", "OWNER", "FROM", "channel", "GROUP", "BY", "OWNER"], "query_toks_no_value": ["select", "sum", "(", "rating_in_percent", ")", ",", "owner", "from", "channel", "group", "by", "owner"], "question": "Find the total rating ratio for each channel owner.", "question_toks": ["Find", "the", "total", "rating", "ratio", "for", "each", "channel", "owner", "."], "guid": 8063}}
{"text": "program: Program_ID, Name, Origin, Launch, Owner; channel: Channel_ID, Name, Owner, Share_in_percent, Rating_in_percent; broadcast: Channel_ID, Program_ID, Time_of_day; broadcast_share: Channel_ID, Program_ID, Date, Share_in_percent | Find the names of programs that are never broadcasted in the morning.", "sql": "SELECT name FROM program EXCEPT SELECT t1.name FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  \"Morning\"", "example": {"db_id": "program_share", "query": "SELECT name FROM program EXCEPT SELECT t1.name FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  \"Morning\"", "query_toks": ["SELECT", "name", "FROM", "program", "EXCEPT", "SELECT", "t1.name", "FROM", "program", "AS", "t1", "JOIN", "broadcast", "AS", "t2", "ON", "t1.program_id", "=", "t2.program_id", "WHERE", "t2.Time_of_day", "=", "``", "Morning", "''"], "query_toks_no_value": ["select", "name", "from", "program", "except", "select", "t1", ".", "name", "from", "program", "as", "t1", "join", "broadcast", "as", "t2", "on", "t1", ".", "program_id", "=", "t2", ".", "program_id", "where", "t2", ".", "time_of_day", "=", "value"], "question": "Find the names of programs that are never broadcasted in the morning.", "question_toks": ["Find", "the", "names", "of", "programs", "that", "are", "never", "broadcasted", "in", "the", "morning", "."], "guid": 8064}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | What are the titles of all movies that have rating star is between 3 and 5?", "sql": "SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars BETWEEN 3 AND 5", "example": {"db_id": "movie_1", "query": "SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars BETWEEN 3 AND 5", "query_toks": ["SELECT", "T2.title", "FROM", "Rating", "AS", "T1", "JOIN", "Movie", "AS", "T2", "ON", "T1.mID", "=", "T2.mID", "WHERE", "T1.stars", "BETWEEN", "3", "AND", "5"], "query_toks_no_value": ["select", "t2", ".", "title", "from", "rating", "as", "t1", "join", "movie", "as", "t2", "on", "t1", ".", "mid", "=", "t2", ".", "mid", "where", "t1", ".", "stars", "between", "value", "and", "value"], "question": "What are the titles of all movies that have rating star is between 3 and 5?", "question_toks": ["What", "are", "the", "titles", "of", "all", "movies", "that", "have", "rating", "star", "is", "between", "3", "and", "5", "?"], "guid": 8065}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | What are the names of all the reviewers and movie names?", "sql": "SELECT name FROM Reviewer UNION SELECT title FROM Movie", "example": {"db_id": "movie_1", "query": "SELECT name FROM Reviewer UNION SELECT title FROM Movie", "query_toks": ["SELECT", "name", "FROM", "Reviewer", "UNION", "SELECT", "title", "FROM", "Movie"], "query_toks_no_value": ["select", "name", "from", "reviewer", "union", "select", "title", "from", "movie"], "question": "What are the names of all the reviewers and movie names?", "question_toks": ["What", "are", "the", "names", "of", "all", "the", "reviewers", "and", "movie", "names", "?"], "guid": 8066}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | Find all actors born in Tehran", "sql": "SELECT name FROM actor WHERE birth_city  =  \"Tehran\";", "example": {"db_id": "imdb", "query": "SELECT name FROM actor WHERE birth_city  =  \"Tehran\";", "query_toks": ["SELECT", "name", "FROM", "actor", "WHERE", "birth_city", "=", "``", "Tehran", "''", ";"], "query_toks_no_value": ["select", "name", "from", "actor", "where", "birth_city", "=", "value"], "question": "Find all actors born in Tehran", "question_toks": ["Find", "all", "actors", "born", "in", "Tehran"], "guid": 8067}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | Find all movies that star both \" Woody Strode \" and \" Jason Robards \"", "sql": "SELECT t4.title FROM CAST AS t5 JOIN actor AS t1 ON t5.aid  =  t1.aid JOIN movie AS t4 ON t4.mid  =  t5.msid JOIN CAST AS t3 ON t4.mid  =  t3.msid JOIN actor AS t2 ON t3.aid  =  t2.aid WHERE t1.name  =  \"Woody Strode\" AND t2.name  =  \"Jason Robards\";", "example": {"db_id": "imdb", "query": "SELECT t4.title FROM CAST AS t5 JOIN actor AS t1 ON t5.aid  =  t1.aid JOIN movie AS t4 ON t4.mid  =  t5.msid JOIN CAST AS t3 ON t4.mid  =  t3.msid JOIN actor AS t2 ON t3.aid  =  t2.aid WHERE t1.name  =  \"Woody Strode\" AND t2.name  =  \"Jason Robards\";", "query_toks": ["SELECT", "t4.title", "FROM", "CAST", "AS", "t5", "JOIN", "actor", "AS", "t1", "ON", "t5.aid", "=", "t1.aid", "JOIN", "movie", "AS", "t4", "ON", "t4.mid", "=", "t5.msid", "JOIN", "CAST", "AS", "t3", "ON", "t4.mid", "=", "t3.msid", "JOIN", "actor", "AS", "t2", "ON", "t3.aid", "=", "t2.aid", "WHERE", "t1.name", "=", "``", "Woody", "Strode", "''", "AND", "t2.name", "=", "``", "Jason", "Robards", "''", ";"], "query_toks_no_value": ["select", "t4", ".", "title", "from", "cast", "as", "t5", "join", "actor", "as", "t1", "on", "t5", ".", "aid", "=", "t1", ".", "aid", "join", "movie", "as", "t4", "on", "t4", ".", "mid", "=", "t5", ".", "msid", "join", "cast", "as", "t3", "on", "t4", ".", "mid", "=", "t3", ".", "msid", "join", "actor", "as", "t2", "on", "t3", ".", "aid", "=", "t2", ".", "aid", "where", "t1", ".", "name", "=", "value", "and", "t2", ".", "name", "=", "value"], "question": "Find all movies that star both \" Woody Strode \" and \" Jason Robards \"", "question_toks": ["Find", "all", "movies", "that", "star", "both", "``", "Woody", "Strode", "``", "and", "``", "Jason", "Robards", "``"], "guid": 8068}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | Who is the director of movie Avatar?", "sql": "SELECT director FROM Movie WHERE title  = 'Avatar'", "example": {"db_id": "movie_1", "query": "SELECT director FROM Movie WHERE title  = 'Avatar'", "query_toks": ["SELECT", "director", "FROM", "Movie", "WHERE", "title", "=", "'Avatar", "'"], "query_toks_no_value": ["select", "director", "from", "movie", "where", "title", "=", "value"], "question": "Who is the director of movie Avatar?", "question_toks": ["Who", "is", "the", "director", "of", "movie", "Avatar", "?"], "guid": 8069}}
{"text": "festival_detail: Festival_ID, Festival_Name, Chair_Name, Location, Year, Num_of_Audience; artwork: Artwork_ID, Type, Name; nomination: Artwork_ID, Festival_ID, Result | List the year in which there are more than one festivals.", "sql": "SELECT YEAR FROM festival_detail GROUP BY YEAR HAVING COUNT(*)  >  1", "example": {"db_id": "entertainment_awards", "query": "SELECT YEAR FROM festival_detail GROUP BY YEAR HAVING COUNT(*)  >  1", "query_toks": ["SELECT", "YEAR", "FROM", "festival_detail", "GROUP", "BY", "YEAR", "HAVING", "COUNT", "(", "*", ")", ">", "1"], "query_toks_no_value": ["select", "year", "from", "festival_detail", "group", "by", "year", "having", "count", "(", "*", ")", ">", "value"], "question": "List the year in which there are more than one festivals.", "question_toks": ["List", "the", "year", "in", "which", "there", "are", "more", "than", "one", "festivals", "."], "guid": 8070}}
{"text": "festival_detail: Festival_ID, Festival_Name, Chair_Name, Location, Year, Num_of_Audience; artwork: Artwork_ID, Type, Name; nomination: Artwork_ID, Festival_ID, Result | Show the names of artworks in ascending order of the year they are nominated in.", "sql": "SELECT T2.Name FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID ORDER BY T3.Year", "example": {"db_id": "entertainment_awards", "query": "SELECT T2.Name FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID ORDER BY T3.Year", "query_toks": ["SELECT", "T2.Name", "FROM", "nomination", "AS", "T1", "JOIN", "artwork", "AS", "T2", "ON", "T1.Artwork_ID", "=", "T2.Artwork_ID", "JOIN", "festival_detail", "AS", "T3", "ON", "T1.Festival_ID", "=", "T3.Festival_ID", "ORDER", "BY", "T3.Year"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "nomination", "as", "t1", "join", "artwork", "as", "t2", "on", "t1", ".", "artwork_id", "=", "t2", ".", "artwork_id", "join", "festival_detail", "as", "t3", "on", "t1", ".", "festival_id", "=", "t3", ".", "festival_id", "order", "by", "t3", ".", "year"], "question": "Show the names of artworks in ascending order of the year they are nominated in.", "question_toks": ["Show", "the", "names", "of", "artworks", "in", "ascending", "order", "of", "the", "year", "they", "are", "nominated", "in", "."], "guid": 8071}}
{"text": "TV_Channel: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option; TV_series: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel; Cartoon: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel | find the id of tv channels that do not play any cartoon directed by Ben Jones.", "sql": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'", "example": {"db_id": "tvshow", "query": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'", "query_toks": ["SELECT", "id", "FROM", "TV_Channel", "EXCEPT", "SELECT", "channel", "FROM", "cartoon", "WHERE", "directed_by", "=", "'Ben", "Jones", "'"], "query_toks_no_value": ["select", "id", "from", "tv_channel", "except", "select", "channel", "from", "cartoon", "where", "directed_by", "=", "value"], "question": "find the id of tv channels that do not play any cartoon directed by Ben Jones.", "question_toks": ["find", "the", "id", "of", "tv", "channels", "that", "do", "not", "play", "any", "cartoon", "directed", "by", "Ben", "Jones", "."], "guid": 8072}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | What year was \" Benedict Cumberbatch \" born ?", "sql": "SELECT birth_year FROM actor WHERE name  =  \"Benedict Cumberbatch\";", "example": {"db_id": "imdb", "query": "SELECT birth_year FROM actor WHERE name  =  \"Benedict Cumberbatch\";", "query_toks": ["SELECT", "birth_year", "FROM", "actor", "WHERE", "name", "=", "``", "Benedict", "Cumberbatch", "''", ";"], "query_toks_no_value": ["select", "birth_year", "from", "actor", "where", "name", "=", "value"], "question": "What year was \" Benedict Cumberbatch \" born ?", "question_toks": ["What", "year", "was", "``", "Benedict", "Cumberbatch", "``", "born", "?"], "guid": 8073}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | What is highest rating for the most recent movie and when was it released?", "sql": "SELECT max(T1.stars) ,  T2.year FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.year  =  (SELECT max(YEAR) FROM Movie)", "example": {"db_id": "movie_1", "query": "SELECT max(T1.stars) ,  T2.year FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.year  =  (SELECT max(YEAR) FROM Movie)", "query_toks": ["SELECT", "max", "(", "T1.stars", ")", ",", "T2.year", "FROM", "Rating", "AS", "T1", "JOIN", "Movie", "AS", "T2", "ON", "T1.mID", "=", "T2.mID", "WHERE", "T2.year", "=", "(", "SELECT", "max", "(", "YEAR", ")", "FROM", "Movie", ")"], "query_toks_no_value": ["select", "max", "(", "t1", ".", "stars", ")", ",", "t2", ".", "year", "from", "rating", "as", "t1", "join", "movie", "as", "t2", "on", "t1", ".", "mid", "=", "t2", ".", "mid", "where", "t2", ".", "year", "=", "(", "select", "max", "(", "year", ")", "from", "movie", ")"], "question": "What is highest rating for the most recent movie and when was it released?", "question_toks": ["What", "is", "highest", "rating", "for", "the", "most", "recent", "movie", "and", "when", "was", "it", "released", "?"], "guid": 8074}}
{"text": "film: Film_ID, Title, Studio, Director, Gross_in_dollar; market: Market_ID, Country, Number_cities; film_market_estimation: Estimation_ID, Low_Estimate, High_Estimate, Film_ID, Type, Market_ID, Year | List the distinct director of all films.", "sql": "SELECT DISTINCT Director FROM film", "example": {"db_id": "film_rank", "query": "SELECT DISTINCT Director FROM film", "query_toks": ["SELECT", "DISTINCT", "Director", "FROM", "film"], "query_toks_no_value": ["select", "distinct", "director", "from", "film"], "question": "List the distinct director of all films.", "question_toks": ["List", "the", "distinct", "director", "of", "all", "films", "."], "guid": 8075}}
{"text": "TV_Channel: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option; TV_series: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel; Cartoon: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel | What is the air date of TV series with Episode \"A Love of a Lifetime\"?", "sql": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";", "example": {"db_id": "tvshow", "query": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";", "query_toks": ["SELECT", "Air_Date", "FROM", "TV_series", "WHERE", "Episode", "=", "``", "A", "Love", "of", "a", "Lifetime", "''", ";"], "query_toks_no_value": ["select", "air_date", "from", "tv_series", "where", "episode", "=", "value"], "question": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?", "question_toks": ["What", "is", "the", "air", "date", "of", "TV", "series", "with", "Episode", "``", "A", "Love", "of", "a", "Lifetime", "''", "?"], "guid": 8076}}
{"text": "TV_Channel: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option; TV_series: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel; Cartoon: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel | What is the episode for the TV series named \"Sky Radio\"?", "sql": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";", "example": {"db_id": "tvshow", "query": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";", "query_toks": ["SELECT", "T2.Episode", "FROM", "TV_Channel", "AS", "T1", "JOIN", "TV_series", "AS", "T2", "ON", "T1.id", "=", "T2.Channel", "WHERE", "T1.series_name", "=", "``", "Sky", "Radio", "''", ";"], "query_toks_no_value": ["select", "t2", ".", "episode", "from", "tv_channel", "as", "t1", "join", "tv_series", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "channel", "where", "t1", ".", "series_name", "=", "value"], "question": "What is the episode for the TV series named \"Sky Radio\"?", "question_toks": ["What", "is", "the", "episode", "for", "the", "TV", "series", "named", "``", "Sky", "Radio", "''", "?"], "guid": 8077}}
{"text": "film: Film_ID, Rank_in_series, Number_in_season, Title, Directed_by, Original_air_date, Production_code; cinema: Cinema_ID, Name, Openning_year, Capacity, Location; schedule: Cinema_ID, Film_ID, Date, Show_times_per_day, Price | What is the location with the most cinemas opened in year 2010 or later?", "sql": "SELECT LOCATION FROM cinema WHERE openning_year  >=  2010 GROUP BY LOCATION ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "cinema", "query": "SELECT LOCATION FROM cinema WHERE openning_year  >=  2010 GROUP BY LOCATION ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "LOCATION", "FROM", "cinema", "WHERE", "openning_year", ">", "=", "2010", "GROUP", "BY", "LOCATION", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "location", "from", "cinema", "where", "openning_year", ">", "=", "value", "group", "by", "location", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the location with the most cinemas opened in year 2010 or later?", "question_toks": ["What", "is", "the", "location", "with", "the", "most", "cinemas", "opened", "in", "year", "2010", "or", "later", "?"], "guid": 8078}}
{"text": "program: Program_ID, Name, Origin, Launch, Owner; channel: Channel_ID, Name, Owner, Share_in_percent, Rating_in_percent; broadcast: Channel_ID, Program_ID, Time_of_day; broadcast_share: Channel_ID, Program_ID, Date, Share_in_percent | Which program is broadcast most frequently? Give me the program name.", "sql": "SELECT t1.name FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id GROUP BY t2.program_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "program_share", "query": "SELECT t1.name FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id GROUP BY t2.program_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "t1.name", "FROM", "program", "AS", "t1", "JOIN", "broadcast", "AS", "t2", "ON", "t1.program_id", "=", "t2.program_id", "GROUP", "BY", "t2.program_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "program", "as", "t1", "join", "broadcast", "as", "t2", "on", "t1", ".", "program_id", "=", "t2", ".", "program_id", "group", "by", "t2", ".", "program_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which program is broadcast most frequently? Give me the program name.", "question_toks": ["Which", "program", "is", "broadcast", "most", "frequently", "?", "Give", "me", "the", "program", "name", "."], "guid": 8079}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | Find all movies written by \" Matt Damon \"", "sql": "SELECT t1.title FROM written_by AS t3 JOIN movie AS t1 ON t3.msid  =  t1.mid JOIN writer AS t2 ON t3.wid  =  t2.wid WHERE t2.name  =  \"Matt Damon\";", "example": {"db_id": "imdb", "query": "SELECT t1.title FROM written_by AS t3 JOIN movie AS t1 ON t3.msid  =  t1.mid JOIN writer AS t2 ON t3.wid  =  t2.wid WHERE t2.name  =  \"Matt Damon\";", "query_toks": ["SELECT", "t1.title", "FROM", "written_by", "AS", "t3", "JOIN", "movie", "AS", "t1", "ON", "t3.msid", "=", "t1.mid", "JOIN", "writer", "AS", "t2", "ON", "t3.wid", "=", "t2.wid", "WHERE", "t2.name", "=", "``", "Matt", "Damon", "''", ";"], "query_toks_no_value": ["select", "t1", ".", "title", "from", "written_by", "as", "t3", "join", "movie", "as", "t1", "on", "t3", ".", "msid", "=", "t1", ".", "mid", "join", "writer", "as", "t2", "on", "t3", ".", "wid", "=", "t2", ".", "wid", "where", "t2", ".", "name", "=", "value"], "question": "Find all movies written by \" Matt Damon \"", "question_toks": ["Find", "all", "movies", "written", "by", "``", "Matt", "Damon", "``"], "guid": 8080}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | Find the names of all reviewers who have ratings with a NULL value for the date.", "sql": "SELECT DISTINCT name FROM Reviewer AS T1 JOIN Rating AS T2 ON T1.rID  =  T2.rID WHERE ratingDate  =  \"null\"", "example": {"db_id": "movie_1", "query": "SELECT DISTINCT name FROM Reviewer AS T1 JOIN Rating AS T2 ON T1.rID  =  T2.rID WHERE ratingDate  =  \"null\"", "query_toks": ["SELECT", "DISTINCT", "name", "FROM", "Reviewer", "AS", "T1", "JOIN", "Rating", "AS", "T2", "ON", "T1.rID", "=", "T2.rID", "WHERE", "ratingDate", "=", "``", "null", "''"], "query_toks_no_value": ["select", "distinct", "name", "from", "reviewer", "as", "t1", "join", "rating", "as", "t2", "on", "t1", ".", "rid", "=", "t2", ".", "rid", "where", "ratingdate", "=", "value"], "question": "Find the names of all reviewers who have ratings with a NULL value for the date.", "question_toks": ["Find", "the", "names", "of", "all", "reviewers", "who", "have", "ratings", "with", "a", "NULL", "value", "for", "the", "date", "."], "guid": 8081}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | What is the name of the movie that is rated by most of times?", "sql": "SELECT T2.title ,  T1.mID FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "movie_1", "query": "SELECT T2.title ,  T1.mID FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T2.title", ",", "T1.mID", "FROM", "Rating", "AS", "T1", "JOIN", "Movie", "AS", "T2", "ON", "T1.mID", "=", "T2.mID", "GROUP", "BY", "T1.mID", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "title", ",", "t1", ".", "mid", "from", "rating", "as", "t1", "join", "movie", "as", "t2", "on", "t1", ".", "mid", "=", "t2", ".", "mid", "group", "by", "t1", ".", "mid", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the name of the movie that is rated by most of times?", "question_toks": ["What", "is", "the", "name", "of", "the", "movie", "that", "is", "rated", "by", "most", "of", "times", "?"], "guid": 8082}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | What are names of the movies that are either made after 2000 or reviewed by Brittany Harris?", "sql": "SELECT DISTINCT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Brittany Harris' OR T2.year  >  2000", "example": {"db_id": "movie_1", "query": "SELECT DISTINCT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Brittany Harris' OR T2.year  >  2000", "query_toks": ["SELECT", "DISTINCT", "T2.title", "FROM", "Rating", "AS", "T1", "JOIN", "Movie", "AS", "T2", "ON", "T1.mID", "=", "T2.mID", "JOIN", "Reviewer", "AS", "T3", "ON", "T1.rID", "=", "T3.rID", "WHERE", "T3.name", "=", "'Brittany", "Harris", "'", "OR", "T2.year", ">", "2000"], "query_toks_no_value": ["select", "distinct", "t2", ".", "title", "from", "rating", "as", "t1", "join", "movie", "as", "t2", "on", "t1", ".", "mid", "=", "t2", ".", "mid", "join", "reviewer", "as", "t3", "on", "t1", ".", "rid", "=", "t3", ".", "rid", "where", "t3", ".", "name", "=", "value", "or", "t2", ".", "year", ">", "value"], "question": "What are names of the movies that are either made after 2000 or reviewed by Brittany Harris?", "question_toks": ["What", "are", "names", "of", "the", "movies", "that", "are", "either", "made", "after", "2000", "or", "reviewed", "by", "Brittany", "Harris", "?"], "guid": 8083}}
{"text": "program: Program_ID, Name, Origin, Launch, Owner; channel: Channel_ID, Name, Owner, Share_in_percent, Rating_in_percent; broadcast: Channel_ID, Program_ID, Time_of_day; broadcast_share: Channel_ID, Program_ID, Date, Share_in_percent | find the name of the program that was launched most recently.", "sql": "SELECT name FROM program ORDER BY launch DESC LIMIT 1", "example": {"db_id": "program_share", "query": "SELECT name FROM program ORDER BY launch DESC LIMIT 1", "query_toks": ["SELECT", "name", "FROM", "program", "ORDER", "BY", "launch", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "name", "from", "program", "order", "by", "launch", "desc", "limit", "value"], "question": "find the name of the program that was launched most recently.", "question_toks": ["find", "the", "name", "of", "the", "program", "that", "was", "launched", "most", "recently", "."], "guid": 8084}}
{"text": "festival_detail: Festival_ID, Festival_Name, Chair_Name, Location, Year, Num_of_Audience; artwork: Artwork_ID, Type, Name; nomination: Artwork_ID, Festival_ID, Result | For each nomination, show the name of the artwork and name of the festival where it is nominated.", "sql": "SELECT T2.Name ,  T3.Festival_Name FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID", "example": {"db_id": "entertainment_awards", "query": "SELECT T2.Name ,  T3.Festival_Name FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID", "query_toks": ["SELECT", "T2.Name", ",", "T3.Festival_Name", "FROM", "nomination", "AS", "T1", "JOIN", "artwork", "AS", "T2", "ON", "T1.Artwork_ID", "=", "T2.Artwork_ID", "JOIN", "festival_detail", "AS", "T3", "ON", "T1.Festival_ID", "=", "T3.Festival_ID"], "query_toks_no_value": ["select", "t2", ".", "name", ",", "t3", ".", "festival_name", "from", "nomination", "as", "t1", "join", "artwork", "as", "t2", "on", "t1", ".", "artwork_id", "=", "t2", ".", "artwork_id", "join", "festival_detail", "as", "t3", "on", "t1", ".", "festival_id", "=", "t3", ".", "festival_id"], "question": "For each nomination, show the name of the artwork and name of the festival where it is nominated.", "question_toks": ["For", "each", "nomination", ",", "show", "the", "name", "of", "the", "artwork", "and", "name", "of", "the", "festival", "where", "it", "is", "nominated", "."], "guid": 8085}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | Find all movies produced in 2015", "sql": "SELECT title FROM movie WHERE release_year  =  2015;", "example": {"db_id": "imdb", "query": "SELECT title FROM movie WHERE release_year  =  2015;", "query_toks": ["SELECT", "title", "FROM", "movie", "WHERE", "release_year", "=", "2015", ";"], "query_toks_no_value": ["select", "title", "from", "movie", "where", "release_year", "=", "value"], "question": "Find all movies produced in 2015", "question_toks": ["Find", "all", "movies", "produced", "in", "2015"], "guid": 8086}}
{"text": "TV_Channel: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option; TV_series: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel; Cartoon: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel | List the number of different series names and contents in the TV Channel table.", "sql": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;", "example": {"db_id": "tvshow", "query": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;", "query_toks": ["SELECT", "count", "(", "DISTINCT", "series_name", ")", ",", "count", "(", "DISTINCT", "content", ")", "FROM", "TV_Channel", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "series_name", ")", ",", "count", "(", "distinct", "content", ")", "from", "tv_channel"], "question": "List the number of different series names and contents in the TV Channel table.", "question_toks": ["List", "the", "number", "of", "different", "series", "names", "and", "contents", "in", "the", "TV", "Channel", "table", "."], "guid": 8087}}
{"text": "film: Film_ID, Rank_in_series, Number_in_season, Title, Directed_by, Original_air_date, Production_code; cinema: Cinema_ID, Name, Openning_year, Capacity, Location; schedule: Cinema_ID, Film_ID, Date, Show_times_per_day, Price | List all directors along with the number of films directed by each director.", "sql": "SELECT directed_by ,  count(*) FROM film GROUP BY directed_by", "example": {"db_id": "cinema", "query": "SELECT directed_by ,  count(*) FROM film GROUP BY directed_by", "query_toks": ["SELECT", "directed_by", ",", "count", "(", "*", ")", "FROM", "film", "GROUP", "BY", "directed_by"], "query_toks_no_value": ["select", "directed_by", ",", "count", "(", "*", ")", "from", "film", "group", "by", "directed_by"], "question": "List all directors along with the number of films directed by each director.", "question_toks": ["List", "all", "directors", "along", "with", "the", "number", "of", "films", "directed", "by", "each", "director", "."], "guid": 8088}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | What are the movie titles and average rating of the movies with the lowest average rating?", "sql": "SELECT T2.title ,  avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY avg(T1.stars) LIMIT 1", "example": {"db_id": "movie_1", "query": "SELECT T2.title ,  avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY avg(T1.stars) LIMIT 1", "query_toks": ["SELECT", "T2.title", ",", "avg", "(", "T1.stars", ")", "FROM", "Rating", "AS", "T1", "JOIN", "Movie", "AS", "T2", "ON", "T1.mID", "=", "T2.mID", "GROUP", "BY", "T1.mID", "ORDER", "BY", "avg", "(", "T1.stars", ")", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "title", ",", "avg", "(", "t1", ".", "stars", ")", "from", "rating", "as", "t1", "join", "movie", "as", "t2", "on", "t1", ".", "mid", "=", "t2", ".", "mid", "group", "by", "t1", ".", "mid", "order", "by", "avg", "(", "t1", ".", "stars", ")", "limit", "value"], "question": "What are the movie titles and average rating of the movies with the lowest average rating?", "question_toks": ["What", "are", "the", "movie", "titles", "and", "average", "rating", "of", "the", "movies", "with", "the", "lowest", "average", "rating", "?"], "guid": 8089}}
{"text": "TV_Channel: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option; TV_series: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel; Cartoon: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel | What is minimum and maximum share of TV series?", "sql": "SELECT max(SHARE) , min(SHARE) FROM TV_series;", "example": {"db_id": "tvshow", "query": "SELECT max(SHARE) , min(SHARE) FROM TV_series;", "query_toks": ["SELECT", "max", "(", "SHARE", ")", ",", "min", "(", "SHARE", ")", "FROM", "TV_series", ";"], "query_toks_no_value": ["select", "max", "(", "share", ")", ",", "min", "(", "share", ")", "from", "tv_series"], "question": "What is minimum and maximum share of TV series?", "question_toks": ["What", "is", "minimum", "and", "maximum", "share", "of", "TV", "series", "?"], "guid": 8090}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | What are the names of all movies that received 3 or 4 stars?", "sql": "SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  =  3 INTERSECT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  =  4", "example": {"db_id": "movie_1", "query": "SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  =  3 INTERSECT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  =  4", "query_toks": ["SELECT", "T2.title", "FROM", "Rating", "AS", "T1", "JOIN", "Movie", "AS", "T2", "ON", "T1.mID", "=", "T2.mID", "WHERE", "T1.stars", "=", "3", "INTERSECT", "SELECT", "T2.title", "FROM", "Rating", "AS", "T1", "JOIN", "Movie", "AS", "T2", "ON", "T1.mID", "=", "T2.mID", "WHERE", "T1.stars", "=", "4"], "query_toks_no_value": ["select", "t2", ".", "title", "from", "rating", "as", "t1", "join", "movie", "as", "t2", "on", "t1", ".", "mid", "=", "t2", ".", "mid", "where", "t1", ".", "stars", "=", "value", "intersect", "select", "t2", ".", "title", "from", "rating", "as", "t1", "join", "movie", "as", "t2", "on", "t1", ".", "mid", "=", "t2", ".", "mid", "where", "t1", ".", "stars", "=", "value"], "question": "What are the names of all movies that received 3 or 4 stars?", "question_toks": ["What", "are", "the", "names", "of", "all", "movies", "that", "received", "3", "or", "4", "stars", "?"], "guid": 8091}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | Find all movies by directors born in \" Los Angeles \"", "sql": "SELECT t3.title FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.birth_city  =  \"Los Angeles\";", "example": {"db_id": "imdb", "query": "SELECT t3.title FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.birth_city  =  \"Los Angeles\";", "query_toks": ["SELECT", "t3.title", "FROM", "director", "AS", "t2", "JOIN", "directed_by", "AS", "t1", "ON", "t2.did", "=", "t1.did", "JOIN", "movie", "AS", "t3", "ON", "t3.mid", "=", "t1.msid", "WHERE", "t2.birth_city", "=", "``", "Los", "Angeles", "''", ";"], "query_toks_no_value": ["select", "t3", ".", "title", "from", "director", "as", "t2", "join", "directed_by", "as", "t1", "on", "t2", ".", "did", "=", "t1", ".", "did", "join", "movie", "as", "t3", "on", "t3", ".", "mid", "=", "t1", ".", "msid", "where", "t2", ".", "birth_city", "=", "value"], "question": "Find all movies by directors born in \" Los Angeles \"", "question_toks": ["Find", "all", "movies", "by", "directors", "born", "in", "``", "Los", "Angeles", "``"], "guid": 8092}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | Find the movies with the highest average rating. Return the movie titles and average rating.", "sql": "SELECT T2.title ,  avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY avg(T1.stars) DESC LIMIT 1", "example": {"db_id": "movie_1", "query": "SELECT T2.title ,  avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY avg(T1.stars) DESC LIMIT 1", "query_toks": ["SELECT", "T2.title", ",", "avg", "(", "T1.stars", ")", "FROM", "Rating", "AS", "T1", "JOIN", "Movie", "AS", "T2", "ON", "T1.mID", "=", "T2.mID", "GROUP", "BY", "T1.mID", "ORDER", "BY", "avg", "(", "T1.stars", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "title", ",", "avg", "(", "t1", ".", "stars", ")", "from", "rating", "as", "t1", "join", "movie", "as", "t2", "on", "t1", ".", "mid", "=", "t2", ".", "mid", "group", "by", "t1", ".", "mid", "order", "by", "avg", "(", "t1", ".", "stars", ")", "desc", "limit", "value"], "question": "Find the movies with the highest average rating. Return the movie titles and average rating.", "question_toks": ["Find", "the", "movies", "with", "the", "highest", "average", "rating", ".", "Return", "the", "movie", "titles", "and", "average", "rating", "."], "guid": 8093}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | Find all the female actors in the movie \" Saving Private Ryan \"", "sql": "SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t1.gender  =  \"female\" AND t3.title  =  \"Saving Private Ryan\";", "example": {"db_id": "imdb", "query": "SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t1.gender  =  \"female\" AND t3.title  =  \"Saving Private Ryan\";", "query_toks": ["SELECT", "t1.name", "FROM", "CAST", "AS", "t2", "JOIN", "actor", "AS", "t1", "ON", "t2.aid", "=", "t1.aid", "JOIN", "movie", "AS", "t3", "ON", "t3.mid", "=", "t2.msid", "WHERE", "t1.gender", "=", "``", "female", "''", "AND", "t3.title", "=", "``", "Saving", "Private", "Ryan", "''", ";"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "cast", "as", "t2", "join", "actor", "as", "t1", "on", "t2", ".", "aid", "=", "t1", ".", "aid", "join", "movie", "as", "t3", "on", "t3", ".", "mid", "=", "t2", ".", "msid", "where", "t1", ".", "gender", "=", "value", "and", "t3", ".", "title", "=", "value"], "question": "Find all the female actors in the movie \" Saving Private Ryan \"", "question_toks": ["Find", "all", "the", "female", "actors", "in", "the", "movie", "``", "Saving", "Private", "Ryan", "``"], "guid": 8094}}
{"text": "TV_Channel: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option; TV_series: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel; Cartoon: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel | What is the Package Option of TV Channel with serial name \"Sky Radio\"?", "sql": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";", "example": {"db_id": "tvshow", "query": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";", "query_toks": ["SELECT", "Package_Option", "FROM", "TV_Channel", "WHERE", "series_name", "=", "``", "Sky", "Radio", "''", ";"], "query_toks_no_value": ["select", "package_option", "from", "tv_channel", "where", "series_name", "=", "value"], "question": "What is the Package Option of TV Channel with serial name \"Sky Radio\"?", "question_toks": ["What", "is", "the", "Package", "Option", "of", "TV", "Channel", "with", "serial", "name", "``", "Sky", "Radio", "''", "?"], "guid": 8095}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | Find all actors born in \" Tehran \"", "sql": "SELECT name FROM actor WHERE birth_city  =  \"Tehran\";", "example": {"db_id": "imdb", "query": "SELECT name FROM actor WHERE birth_city  =  \"Tehran\";", "query_toks": ["SELECT", "name", "FROM", "actor", "WHERE", "birth_city", "=", "``", "Tehran", "''", ";"], "query_toks_no_value": ["select", "name", "from", "actor", "where", "birth_city", "=", "value"], "question": "Find all actors born in \" Tehran \"", "question_toks": ["Find", "all", "actors", "born", "in", "``", "Tehran", "``"], "guid": 8096}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | What are all the tv series created by \" Shonda Rhimes \" ?", "sql": "SELECT t2.title FROM producer AS t1 JOIN made_by AS t3 ON t1.pid  =  t3.pid JOIN tv_series AS t2 ON t2.sid  =  t3.msid WHERE t1.name  =  \"Shonda Rhimes\";", "example": {"db_id": "imdb", "query": "SELECT t2.title FROM producer AS t1 JOIN made_by AS t3 ON t1.pid  =  t3.pid JOIN tv_series AS t2 ON t2.sid  =  t3.msid WHERE t1.name  =  \"Shonda Rhimes\";", "query_toks": ["SELECT", "t2.title", "FROM", "producer", "AS", "t1", "JOIN", "made_by", "AS", "t3", "ON", "t1.pid", "=", "t3.pid", "JOIN", "tv_series", "AS", "t2", "ON", "t2.sid", "=", "t3.msid", "WHERE", "t1.name", "=", "``", "Shonda", "Rhimes", "''", ";"], "query_toks_no_value": ["select", "t2", ".", "title", "from", "producer", "as", "t1", "join", "made_by", "as", "t3", "on", "t1", ".", "pid", "=", "t3", ".", "pid", "join", "tv_series", "as", "t2", "on", "t2", ".", "sid", "=", "t3", ".", "msid", "where", "t1", ".", "name", "=", "value"], "question": "What are all the tv series created by \" Shonda Rhimes \" ?", "question_toks": ["What", "are", "all", "the", "tv", "series", "created", "by", "``", "Shonda", "Rhimes", "``", "?"], "guid": 8097}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | Find all movies in which \" Robin Wright \" appears", "sql": "SELECT t2.title FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.name  =  \"Robin Wright\";", "example": {"db_id": "imdb", "query": "SELECT t2.title FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.name  =  \"Robin Wright\";", "query_toks": ["SELECT", "t2.title", "FROM", "CAST", "AS", "t3", "JOIN", "actor", "AS", "t1", "ON", "t3.aid", "=", "t1.aid", "JOIN", "movie", "AS", "t2", "ON", "t2.mid", "=", "t3.msid", "WHERE", "t1.name", "=", "``", "Robin", "Wright", "''", ";"], "query_toks_no_value": ["select", "t2", ".", "title", "from", "cast", "as", "t3", "join", "actor", "as", "t1", "on", "t3", ".", "aid", "=", "t1", ".", "aid", "join", "movie", "as", "t2", "on", "t2", ".", "mid", "=", "t3", ".", "msid", "where", "t1", ".", "name", "=", "value"], "question": "Find all movies in which \" Robin Wright \" appears", "question_toks": ["Find", "all", "movies", "in", "which", "``", "Robin", "Wright", "``", "appears"], "guid": 8098}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | What is the number of movies directed by \" Woody Allen \" per year ?", "sql": "SELECT COUNT ( DISTINCT t3.title  )  ,  t3.release_year FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.name  =  \"Woody Allen\" GROUP BY t3.release_year;", "example": {"db_id": "imdb", "query": "SELECT COUNT ( DISTINCT t3.title  )  ,  t3.release_year FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.name  =  \"Woody Allen\" GROUP BY t3.release_year;", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "t3.title", ")", ",", "t3.release_year", "FROM", "director", "AS", "t2", "JOIN", "directed_by", "AS", "t1", "ON", "t2.did", "=", "t1.did", "JOIN", "movie", "AS", "t3", "ON", "t3.mid", "=", "t1.msid", "WHERE", "t2.name", "=", "``", "Woody", "Allen", "''", "GROUP", "BY", "t3.release_year", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "t3", ".", "title", ")", ",", "t3", ".", "release_year", "from", "director", "as", "t2", "join", "directed_by", "as", "t1", "on", "t2", ".", "did", "=", "t1", ".", "did", "join", "movie", "as", "t3", "on", "t3", ".", "mid", "=", "t1", ".", "msid", "where", "t2", ".", "name", "=", "value", "group", "by", "t3", ".", "release_year"], "question": "What is the number of movies directed by \" Woody Allen \" per year ?", "question_toks": ["What", "is", "the", "number", "of", "movies", "directed", "by", "``", "Woody", "Allen", "``", "per", "year", "?"], "guid": 8099}}
{"text": "film: Film_ID, Title, Studio, Director, Gross_in_dollar; market: Market_ID, Country, Number_cities; film_market_estimation: Estimation_ID, Low_Estimate, High_Estimate, Film_ID, Type, Market_ID, Year | Count the number of markets that have a number of cities lower than 300.", "sql": "SELECT count(*) FROM market WHERE Number_cities  <  300", "example": {"db_id": "film_rank", "query": "SELECT count(*) FROM market WHERE Number_cities  <  300", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "market", "WHERE", "Number_cities", "<", "300"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "market", "where", "number_cities", "<", "value"], "question": "Count the number of markets that have a number of cities lower than 300.", "question_toks": ["Count", "the", "number", "of", "markets", "that", "have", "a", "number", "of", "cities", "lower", "than", "300", "."], "guid": 8100}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | What is the genre of the movie \" Jurassic Park \" ?", "sql": "SELECT t2.genre FROM genre AS t2 JOIN classification AS t1 ON t2.gid  =  t1.gid JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t3.title  =  \"Jurassic Park\";", "example": {"db_id": "imdb", "query": "SELECT t2.genre FROM genre AS t2 JOIN classification AS t1 ON t2.gid  =  t1.gid JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t3.title  =  \"Jurassic Park\";", "query_toks": ["SELECT", "t2.genre", "FROM", "genre", "AS", "t2", "JOIN", "classification", "AS", "t1", "ON", "t2.gid", "=", "t1.gid", "JOIN", "movie", "AS", "t3", "ON", "t3.mid", "=", "t1.msid", "WHERE", "t3.title", "=", "``", "Jurassic", "Park", "''", ";"], "query_toks_no_value": ["select", "t2", ".", "genre", "from", "genre", "as", "t2", "join", "classification", "as", "t1", "on", "t2", ".", "gid", "=", "t1", ".", "gid", "join", "movie", "as", "t3", "on", "t3", ".", "mid", "=", "t1", ".", "msid", "where", "t3", ".", "title", "=", "value"], "question": "What is the genre of the movie \" Jurassic Park \" ?", "question_toks": ["What", "is", "the", "genre", "of", "the", "movie", "``", "Jurassic", "Park", "``", "?"], "guid": 8101}}
{"text": "program: Program_ID, Name, Origin, Launch, Owner; channel: Channel_ID, Name, Owner, Share_in_percent, Rating_in_percent; broadcast: Channel_ID, Program_ID, Time_of_day; broadcast_share: Channel_ID, Program_ID, Date, Share_in_percent | what is the number of different channel owners?", "sql": "SELECT count(DISTINCT OWNER) FROM channel", "example": {"db_id": "program_share", "query": "SELECT count(DISTINCT OWNER) FROM channel", "query_toks": ["SELECT", "count", "(", "DISTINCT", "OWNER", ")", "FROM", "channel"], "query_toks_no_value": ["select", "count", "(", "distinct", "owner", ")", "from", "channel"], "question": "what is the number of different channel owners?", "question_toks": ["what", "is", "the", "number", "of", "different", "channel", "owners", "?"], "guid": 8102}}
{"text": "film: Film_ID, Title, Studio, Director, Gross_in_dollar; market: Market_ID, Country, Number_cities; film_market_estimation: Estimation_ID, Low_Estimate, High_Estimate, Film_ID, Type, Market_ID, Year | List all countries of markets in descending order of number of cities.", "sql": "SELECT Country FROM market ORDER BY Number_cities DESC", "example": {"db_id": "film_rank", "query": "SELECT Country FROM market ORDER BY Number_cities DESC", "query_toks": ["SELECT", "Country", "FROM", "market", "ORDER", "BY", "Number_cities", "DESC"], "query_toks_no_value": ["select", "country", "from", "market", "order", "by", "number_cities", "desc"], "question": "List all countries of markets in descending order of number of cities.", "question_toks": ["List", "all", "countries", "of", "markets", "in", "descending", "order", "of", "number", "of", "cities", "."], "guid": 8103}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | What is the number of movies in which \" Shahab Hosseini \" acted ?", "sql": "SELECT COUNT ( DISTINCT t2.title  ) FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.name  =  \"Shahab Hosseini\";", "example": {"db_id": "imdb", "query": "SELECT COUNT ( DISTINCT t2.title  ) FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.name  =  \"Shahab Hosseini\";", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "t2.title", ")", "FROM", "CAST", "AS", "t3", "JOIN", "actor", "AS", "t1", "ON", "t3.aid", "=", "t1.aid", "JOIN", "movie", "AS", "t2", "ON", "t2.mid", "=", "t3.msid", "WHERE", "t1.name", "=", "``", "Shahab", "Hosseini", "''", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "t2", ".", "title", ")", "from", "cast", "as", "t3", "join", "actor", "as", "t1", "on", "t3", ".", "aid", "=", "t1", ".", "aid", "join", "movie", "as", "t2", "on", "t2", ".", "mid", "=", "t3", ".", "msid", "where", "t1", ".", "name", "=", "value"], "question": "What is the number of movies in which \" Shahab Hosseini \" acted ?", "question_toks": ["What", "is", "the", "number", "of", "movies", "in", "which", "``", "Shahab", "Hosseini", "``", "acted", "?"], "guid": 8104}}
{"text": "school: School_ID, School, Location, Enrollment, Founded, Denomination, Boys_or_Girls, Day_or_Boarding, Year_Entered_Competition, School_Colors; school_details: School_ID, Nickname, Colors, League, Class, Division; school_performance: School_Id, School_Year, Class_A, Class_AA; player: Player_ID, Player, Team, Age, Position, School_ID | List the locations of schools in ascending order of enrollment.", "sql": "SELECT LOCATION FROM school ORDER BY Enrollment ASC", "example": {"db_id": "school_player", "query": "SELECT LOCATION FROM school ORDER BY Enrollment ASC", "query_toks": ["SELECT", "LOCATION", "FROM", "school", "ORDER", "BY", "Enrollment", "ASC"], "query_toks_no_value": ["select", "location", "from", "school", "order", "by", "enrollment", "asc"], "question": "List the locations of schools in ascending order of enrollment.", "question_toks": ["List", "the", "locations", "of", "schools", "in", "ascending", "order", "of", "enrollment", "."], "guid": 1394}}
{"text": "Activity: actid, activity_name; Participates_in: stuid, actid; Faculty_Participates_in: FacID, actid; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building | How many faculty members does each building have? List the result with the name of the building.", "sql": "SELECT building ,  count(*) FROM Faculty GROUP BY building", "example": {"db_id": "activity_1", "query": "SELECT building ,  count(*) FROM Faculty GROUP BY building", "query_toks": ["SELECT", "building", ",", "count", "(", "*", ")", "FROM", "Faculty", "GROUP", "BY", "building"], "query_toks_no_value": ["select", "building", ",", "count", "(", "*", ")", "from", "faculty", "group", "by", "building"], "question": "How many faculty members does each building have? List the result with the name of the building.", "question_toks": ["How", "many", "faculty", "members", "does", "each", "building", "have", "?", "List", "the", "result", "with", "the", "name", "of", "the", "building", "."], "guid": 1395}}
{"text": "Activity: actid, activity_name; Participates_in: stuid, actid; Faculty_Participates_in: FacID, actid; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building | Which faculty members are playing either Canoeing or Kayaking? Tell me their first names.", "sql": "SELECT DISTINCT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' OR T3.activity_name  =  'Kayaking'", "example": {"db_id": "activity_1", "query": "SELECT DISTINCT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' OR T3.activity_name  =  'Kayaking'", "query_toks": ["SELECT", "DISTINCT", "T1.lname", "FROM", "Faculty", "AS", "T1", "JOIN", "Faculty_participates_in", "AS", "T2", "ON", "T1.facID", "=", "T2.facID", "JOIN", "activity", "AS", "T3", "ON", "T2.actid", "=", "T2.actid", "WHERE", "T3.activity_name", "=", "'Canoeing", "'", "OR", "T3.activity_name", "=", "'Kayaking", "'"], "query_toks_no_value": ["select", "distinct", "t1", ".", "lname", "from", "faculty", "as", "t1", "join", "faculty_participates_in", "as", "t2", "on", "t1", ".", "facid", "=", "t2", ".", "facid", "join", "activity", "as", "t3", "on", "t2", ".", "actid", "=", "t2", ".", "actid", "where", "t3", ".", "activity_name", "=", "value", "or", "t3", ".", "activity_name", "=", "value"], "question": "Which faculty members are playing either Canoeing or Kayaking? Tell me their first names.", "question_toks": ["Which", "faculty", "members", "are", "playing", "either", "Canoeing", "or", "Kayaking", "?", "Tell", "me", "their", "first", "names", "."], "guid": 1396}}
{"text": "Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Courses: course_id, course_name, course_description, other_details; Departments: department_id, department_name, department_description, other_details; Degree_Programs: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details; Sections: section_id, course_id, section_name, section_description, other_details; Semesters: semester_id, semester_name, semester_description, other_details; Students: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered; Student_Enrolment: student_enrolment_id, degree_program_id, semester_id, student_id, other_details; Student_Enrolment_Courses: student_course_id, course_id, student_enrolment_id; Transcripts: transcript_id, transcript_date, other_details | What are the names and id of courses having at most 2 sections?", "sql": "SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2", "example": {"db_id": "student_transcripts_tracking", "query": "SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2", "query_toks": ["SELECT", "T1.course_name", ",", "T1.course_id", "FROM", "Courses", "AS", "T1", "JOIN", "Sections", "AS", "T2", "ON", "T1.course_id", "=", "T2.course_id", "GROUP", "BY", "T1.course_id", "HAVING", "count", "(", "*", ")", "<", "=", "2"], "query_toks_no_value": ["select", "t1", ".", "course_name", ",", "t1", ".", "course_id", "from", "courses", "as", "t1", "join", "sections", "as", "t2", "on", "t1", ".", "course_id", "=", "t2", ".", "course_id", "group", "by", "t1", ".", "course_id", "having", "count", "(", "*", ")", "<", "=", "value"], "question": "What are the names and id of courses having at most 2 sections?", "question_toks": ["What", "are", "the", "names", "and", "id", "of", "courses", "having", "at", "most", "2", "sections", "?"], "guid": 1397}}
{"text": "Addresses: address_id, line_1, line_2, city, zip_postcode, state_province_county, country; People: person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password; Students: student_id, student_details; Courses: course_id, course_name, course_description, other_details; People_Addresses: person_address_id, person_id, address_id, date_from, date_to; Student_Course_Registrations: student_id, course_id, registration_date; Student_Course_Attendance: student_id, course_id, date_of_attendance; Candidates: candidate_id, candidate_details; Candidate_Assessments: candidate_id, qualification, assessment_date, asessment_outcome_code | What is the id of the student who most recently registered course 301?", "sql": "SELECT student_id FROM student_course_attendance WHERE course_id = 301 ORDER BY date_of_attendance DESC LIMIT 1", "example": {"db_id": "student_assessment", "query": "SELECT student_id FROM student_course_attendance WHERE course_id = 301 ORDER BY date_of_attendance DESC LIMIT 1", "query_toks": ["SELECT", "student_id", "FROM", "student_course_attendance", "WHERE", "course_id", "=", "301", "ORDER", "BY", "date_of_attendance", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "student_id", "from", "student_course_attendance", "where", "course_id", "=", "value", "order", "by", "date_of_attendance", "desc", "limit", "value"], "question": "What is the id of the student who most recently registered course 301?", "question_toks": ["What", "is", "the", "id", "of", "the", "student", "who", "most", "recently", "registered", "course", "301", "?"], "guid": 1398}}
{"text": "Activity: actid, activity_name; Participates_in: stuid, actid; Faculty_Participates_in: FacID, actid; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building | How many activities do we have?", "sql": "SELECT count(*) FROM Activity", "example": {"db_id": "activity_1", "query": "SELECT count(*) FROM Activity", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Activity"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "activity"], "question": "How many activities do we have?", "question_toks": ["How", "many", "activities", "do", "we", "have", "?"], "guid": 1399}}
{"text": "Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Courses: course_id, course_name, course_description, other_details; Departments: department_id, department_name, department_description, other_details; Degree_Programs: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details; Sections: section_id, course_id, section_name, section_description, other_details; Semesters: semester_id, semester_name, semester_description, other_details; Students: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered; Student_Enrolment: student_enrolment_id, degree_program_id, semester_id, student_id, other_details; Student_Enrolment_Courses: student_course_id, course_id, student_enrolment_id; Transcripts: transcript_id, transcript_date, other_details | What is the date and id of the transcript with the least number of results?", "sql": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1", "example": {"db_id": "student_transcripts_tracking", "query": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1", "query_toks": ["SELECT", "T2.transcript_date", ",", "T1.transcript_id", "FROM", "Transcript_Contents", "AS", "T1", "JOIN", "Transcripts", "AS", "T2", "ON", "T1.transcript_id", "=", "T2.transcript_id", "GROUP", "BY", "T1.transcript_id", "ORDER", "BY", "count", "(", "*", ")", "ASC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "transcript_date", ",", "t1", ".", "transcript_id", "from", "transcript_contents", "as", "t1", "join", "transcripts", "as", "t2", "on", "t1", ".", "transcript_id", "=", "t2", ".", "transcript_id", "group", "by", "t1", ".", "transcript_id", "order", "by", "count", "(", "*", ")", "asc", "limit", "value"], "question": "What is the date and id of the transcript with the least number of results?", "question_toks": ["What", "is", "the", "date", "and", "id", "of", "the", "transcript", "with", "the", "least", "number", "of", "results", "?"], "guid": 1400}}
{"text": "Activity: actid, activity_name; Participates_in: stuid, actid; Faculty_Participates_in: FacID, actid; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building | How many faculty members do we have for each faculty rank?", "sql": "SELECT rank ,  count(*) FROM Faculty GROUP BY rank", "example": {"db_id": "activity_1", "query": "SELECT rank ,  count(*) FROM Faculty GROUP BY rank", "query_toks": ["SELECT", "rank", ",", "count", "(", "*", ")", "FROM", "Faculty", "GROUP", "BY", "rank"], "query_toks_no_value": ["select", "rank", ",", "count", "(", "*", ")", "from", "faculty", "group", "by", "rank"], "question": "How many faculty members do we have for each faculty rank?", "question_toks": ["How", "many", "faculty", "members", "do", "we", "have", "for", "each", "faculty", "rank", "?"], "guid": 1401}}
{"text": "list: LastName, FirstName, Grade, Classroom; teachers: LastName, FirstName, Classroom | Find the classroom that the most students use.", "sql": "SELECT classroom FROM list GROUP BY classroom ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "student_1", "query": "SELECT classroom FROM list GROUP BY classroom ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "classroom", "FROM", "list", "GROUP", "BY", "classroom", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "classroom", "from", "list", "group", "by", "classroom", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Find the classroom that the most students use.", "question_toks": ["Find", "the", "classroom", "that", "the", "most", "students", "use", "."], "guid": 1402}}
{"text": "Course_Authors_and_Tutors: author_id, author_tutor_ATB, login_name, password, personal_name, middle_name, family_name, gender_mf, address_line_1; Students: student_id, date_of_registration, date_of_latest_logon, login_name, password, personal_name, middle_name, family_name; Subjects: subject_id, subject_name; Courses: course_id, author_id, subject_id, course_name, course_description; Student_Course_Enrolment: registration_id, student_id, course_id, date_of_enrolment, date_of_completion; Student_Tests_Taken: registration_id, date_test_taken, test_result | Return the descriptions and names of the courses that have more than two students enrolled in.", "sql": "SELECT T1.course_description ,  T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name HAVING COUNT(*)  >  2", "example": {"db_id": "e_learning", "query": "SELECT T1.course_description ,  T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name HAVING COUNT(*)  >  2", "query_toks": ["SELECT", "T1.course_description", ",", "T1.course_name", "FROM", "Courses", "AS", "T1", "JOIN", "Student_Course_Enrolment", "AS", "T2", "ON", "T1.course_id", "=", "T2.course_id", "GROUP", "BY", "T1.course_name", "HAVING", "COUNT", "(", "*", ")", ">", "2"], "query_toks_no_value": ["select", "t1", ".", "course_description", ",", "t1", ".", "course_name", "from", "courses", "as", "t1", "join", "student_course_enrolment", "as", "t2", "on", "t1", ".", "course_id", "=", "t2", ".", "course_id", "group", "by", "t1", ".", "course_name", "having", "count", "(", "*", ")", ">", "value"], "question": "Return the descriptions and names of the courses that have more than two students enrolled in.", "question_toks": ["Return", "the", "descriptions", "and", "names", "of", "the", "courses", "that", "have", "more", "than", "two", "students", "enrolled", "in", "."], "guid": 1403}}
{"text": "course: Course_ID, Staring_Date, Course; teacher: Teacher_ID, Name, Age, Hometown; course_arrange: Course_ID, Teacher_ID, Grade | Where is the youngest teacher from?", "sql": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1", "example": {"db_id": "course_teach", "query": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1", "query_toks": ["SELECT", "Hometown", "FROM", "teacher", "ORDER", "BY", "Age", "ASC", "LIMIT", "1"], "query_toks_no_value": ["select", "hometown", "from", "teacher", "order", "by", "age", "asc", "limit", "value"], "question": "Where is the youngest teacher from?", "question_toks": ["Where", "is", "the", "youngest", "teacher", "from", "?"], "guid": 1404}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Dorm: dormid, dorm_name, student_capacity, gender; Dorm_amenity: amenid, amenity_name; Has_amenity: dormid, amenid; Lives_in: stuid, dormid, room_number | What are the names of the dorm with the largest capacity?", "sql": "SELECT dorm_name FROM dorm ORDER BY student_capacity DESC LIMIT 1", "example": {"db_id": "dorm_1", "query": "SELECT dorm_name FROM dorm ORDER BY student_capacity DESC LIMIT 1", "query_toks": ["SELECT", "dorm_name", "FROM", "dorm", "ORDER", "BY", "student_capacity", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "dorm_name", "from", "dorm", "order", "by", "student_capacity", "desc", "limit", "value"], "question": "What are the names of the dorm with the largest capacity?", "question_toks": ["What", "are", "the", "names", "of", "the", "dorm", "with", "the", "largest", "capacity", "?"], "guid": 1405}}
{"text": "Course_Authors_and_Tutors: author_id, author_tutor_ATB, login_name, password, personal_name, middle_name, family_name, gender_mf, address_line_1; Students: student_id, date_of_registration, date_of_latest_logon, login_name, password, personal_name, middle_name, family_name; Subjects: subject_id, subject_name; Courses: course_id, author_id, subject_id, course_name, course_description; Student_Course_Enrolment: registration_id, student_id, course_id, date_of_enrolment, date_of_completion; Student_Tests_Taken: registration_id, date_test_taken, test_result | Which students not enrolled in any course? Find their personal names.", "sql": "SELECT personal_name FROM Students EXCEPT SELECT T1.personal_name FROM Students AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.student_id  =  T2.student_id", "example": {"db_id": "e_learning", "query": "SELECT personal_name FROM Students EXCEPT SELECT T1.personal_name FROM Students AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.student_id  =  T2.student_id", "query_toks": ["SELECT", "personal_name", "FROM", "Students", "EXCEPT", "SELECT", "T1.personal_name", "FROM", "Students", "AS", "T1", "JOIN", "Student_Course_Enrolment", "AS", "T2", "ON", "T1.student_id", "=", "T2.student_id"], "query_toks_no_value": ["select", "personal_name", "from", "students", "except", "select", "t1", ".", "personal_name", "from", "students", "as", "t1", "join", "student_course_enrolment", "as", "t2", "on", "t1", ".", "student_id", "=", "t2", ".", "student_id"], "question": "Which students not enrolled in any course? Find their personal names.", "question_toks": ["Which", "students", "not", "enrolled", "in", "any", "course", "?", "Find", "their", "personal", "names", "."], "guid": 1406}}
{"text": "Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Courses: course_id, course_name, course_description, other_details; Departments: department_id, department_name, department_description, other_details; Degree_Programs: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details; Sections: section_id, course_id, section_name, section_description, other_details; Semesters: semester_id, semester_name, semester_description, other_details; Students: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered; Student_Enrolment: student_enrolment_id, degree_program_id, semester_id, student_id, other_details; Student_Enrolment_Courses: student_course_id, course_id, student_enrolment_id; Transcripts: transcript_id, transcript_date, other_details | Describe the section h.", "sql": "SELECT section_description FROM Sections WHERE section_name  =  'h'", "example": {"db_id": "student_transcripts_tracking", "query": "SELECT section_description FROM Sections WHERE section_name  =  'h'", "query_toks": ["SELECT", "section_description", "FROM", "Sections", "WHERE", "section_name", "=", "'h", "'"], "query_toks_no_value": ["select", "section_description", "from", "sections", "where", "section_name", "=", "value"], "question": "Describe the section h.", "question_toks": ["Describe", "the", "section", "h", "."], "guid": 1407}}
{"text": "Activity: actid, activity_name; Participates_in: stuid, actid; Faculty_Participates_in: FacID, actid; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building | Find the number of activities available.", "sql": "SELECT count(*) FROM Activity", "example": {"db_id": "activity_1", "query": "SELECT count(*) FROM Activity", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Activity"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "activity"], "question": "Find the number of activities available.", "question_toks": ["Find", "the", "number", "of", "activities", "available", "."], "guid": 1408}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Dorm: dormid, dorm_name, student_capacity, gender; Dorm_amenity: amenid, amenity_name; Has_amenity: dormid, amenid; Lives_in: stuid, dormid, room_number | What amenities does Smith Hall have in alphabetical order?", "sql": "SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T1.dorm_name  =  'Smith Hall' ORDER BY T3.amenity_name", "example": {"db_id": "dorm_1", "query": "SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T1.dorm_name  =  'Smith Hall' ORDER BY T3.amenity_name", "query_toks": ["SELECT", "T3.amenity_name", "FROM", "dorm", "AS", "T1", "JOIN", "has_amenity", "AS", "T2", "ON", "T1.dormid", "=", "T2.dormid", "JOIN", "dorm_amenity", "AS", "T3", "ON", "T2.amenid", "=", "T3.amenid", "WHERE", "T1.dorm_name", "=", "'Smith", "Hall", "'", "ORDER", "BY", "T3.amenity_name"], "query_toks_no_value": ["select", "t3", ".", "amenity_name", "from", "dorm", "as", "t1", "join", "has_amenity", "as", "t2", "on", "t1", ".", "dormid", "=", "t2", ".", "dormid", "join", "dorm_amenity", "as", "t3", "on", "t2", ".", "amenid", "=", "t3", ".", "amenid", "where", "t1", ".", "dorm_name", "=", "value", "order", "by", "t3", ".", "amenity_name"], "question": "What amenities does Smith Hall have in alphabetical order?", "question_toks": ["What", "amenities", "does", "Smith", "Hall", "have", "in", "alphabetical", "order", "?"], "guid": 1409}}
{"text": "list: LastName, FirstName, Grade, Classroom; teachers: LastName, FirstName, Classroom | Find the first names of students studying in room 108.", "sql": "SELECT firstname FROM list WHERE classroom  =  108", "example": {"db_id": "student_1", "query": "SELECT firstname FROM list WHERE classroom  =  108", "query_toks": ["SELECT", "firstname", "FROM", "list", "WHERE", "classroom", "=", "108"], "query_toks_no_value": ["select", "firstname", "from", "list", "where", "classroom", "=", "value"], "question": "Find the first names of students studying in room 108.", "question_toks": ["Find", "the", "first", "names", "of", "students", "studying", "in", "room", "108", "."], "guid": 1410}}
{"text": "list: LastName, FirstName, Grade, Classroom; teachers: LastName, FirstName, Classroom | How many teachers does the student named MADLOCK RAY have?", "sql": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"MADLOCK\" AND T1.lastname  =  \"RAY\"", "example": {"db_id": "student_1", "query": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"MADLOCK\" AND T1.lastname  =  \"RAY\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "list", "AS", "T1", "JOIN", "teachers", "AS", "T2", "ON", "T1.classroom", "=", "T2.classroom", "WHERE", "T1.firstname", "=", "``", "MADLOCK", "''", "AND", "T1.lastname", "=", "``", "RAY", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "list", "as", "t1", "join", "teachers", "as", "t2", "on", "t1", ".", "classroom", "=", "t2", ".", "classroom", "where", "t1", ".", "firstname", "=", "value", "and", "t1", ".", "lastname", "=", "value"], "question": "How many teachers does the student named MADLOCK RAY have?", "question_toks": ["How", "many", "teachers", "does", "the", "student", "named", "MADLOCK", "RAY", "have", "?"], "guid": 1411}}
{"text": "course: Course_ID, Staring_Date, Course; teacher: Teacher_ID, Name, Age, Hometown; course_arrange: Course_ID, Teacher_ID, Grade | List the name of teachers whose hometown is not `` Little Lever Urban District '' .", "sql": "select name from teacher where hometown != \"little lever urban district\"", "example": {"db_id": "course_teach", "query": "select name from teacher where hometown != \"little lever urban district\"", "query_toks": ["select", "name", "from", "teacher", "where", "hometown", "!=", "\"little lever urban district\""], "query_toks_no_value": ["select", "name", "from", "teacher", "where", "hometown", "!", "=", "value"], "question": "List the name of teachers whose hometown is not `` Little Lever Urban District '' .", "question_toks": ["List", "the", "name", "of", "teachers", "whose", "hometown", "is", "not", "``", "Little", "Lever", "Urban", "District", "''", "."], "guid": 1412}}
{"text": "Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Courses: course_id, course_name, course_description, other_details; Departments: department_id, department_name, department_description, other_details; Degree_Programs: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details; Sections: section_id, course_id, section_name, section_description, other_details; Semesters: semester_id, semester_name, semester_description, other_details; Students: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered; Student_Enrolment: student_enrolment_id, degree_program_id, semester_id, student_id, other_details; Student_Enrolment_Courses: student_course_id, course_id, student_enrolment_id; Transcripts: transcript_id, transcript_date, other_details | What are the first, middle, and last names for everybody enrolled in a Bachelors program?", "sql": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'", "example": {"db_id": "student_transcripts_tracking", "query": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'", "query_toks": ["SELECT", "DISTINCT", "T1.first_name", ",", "T1.middle_name", ",", "T1.last_name", "FROM", "Students", "AS", "T1", "JOIN", "Student_Enrolment", "AS", "T2", "ON", "T1.student_id", "=", "T2.student_id", "JOIN", "Degree_Programs", "AS", "T3", "ON", "T2.degree_program_id", "=", "T3.degree_program_id", "WHERE", "T3.degree_summary_name", "=", "'Bachelor", "'"], "query_toks_no_value": ["select", "distinct", "t1", ".", "first_name", ",", "t1", ".", "middle_name", ",", "t1", ".", "last_name", "from", "students", "as", "t1", "join", "student_enrolment", "as", "t2", "on", "t1", ".", "student_id", "=", "t2", ".", "student_id", "join", "degree_programs", "as", "t3", "on", "t2", ".", "degree_program_id", "=", "t3", ".", "degree_program_id", "where", "t3", ".", "degree_summary_name", "=", "value"], "question": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?", "question_toks": ["What", "are", "the", "first", ",", "middle", ",", "and", "last", "names", "for", "everybody", "enrolled", "in", "a", "Bachelors", "program", "?"], "guid": 1413}}
{"text": "Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Courses: course_id, course_name, course_description, other_details; Departments: department_id, department_name, department_description, other_details; Degree_Programs: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details; Sections: section_id, course_id, section_name, section_description, other_details; Semesters: semester_id, semester_name, semester_description, other_details; Students: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered; Student_Enrolment: student_enrolment_id, degree_program_id, semester_id, student_id, other_details; Student_Enrolment_Courses: student_course_id, course_id, student_enrolment_id; Transcripts: transcript_id, transcript_date, other_details | What are the names of the sections in reverse alphabetical order?", "sql": "SELECT section_name FROM Sections ORDER BY section_name DESC", "example": {"db_id": "student_transcripts_tracking", "query": "SELECT section_name FROM Sections ORDER BY section_name DESC", "query_toks": ["SELECT", "section_name", "FROM", "Sections", "ORDER", "BY", "section_name", "DESC"], "query_toks_no_value": ["select", "section_name", "from", "sections", "order", "by", "section_name", "desc"], "question": "What are the names of the sections in reverse alphabetical order?", "question_toks": ["What", "are", "the", "names", "of", "the", "sections", "in", "reverse", "alphabetical", "order", "?"], "guid": 1414}}
{"text": "list: LastName, FirstName, Grade, Classroom; teachers: LastName, FirstName, Classroom | Which grade is studying in room 105?", "sql": "SELECT DISTINCT grade FROM list WHERE classroom  =  105", "example": {"db_id": "student_1", "query": "SELECT DISTINCT grade FROM list WHERE classroom  =  105", "query_toks": ["SELECT", "DISTINCT", "grade", "FROM", "list", "WHERE", "classroom", "=", "105"], "query_toks_no_value": ["select", "distinct", "grade", "from", "list", "where", "classroom", "=", "value"], "question": "Which grade is studying in room 105?", "question_toks": ["Which", "grade", "is", "studying", "in", "room", "105", "?"], "guid": 1415}}
{"text": "Activity: actid, activity_name; Participates_in: stuid, actid; Faculty_Participates_in: FacID, actid; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building | What is the name of the activity that has the most faculty members involved in?", "sql": "SELECT T1.activity_name FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "activity_1", "query": "SELECT T1.activity_name FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.activity_name", "FROM", "Activity", "AS", "T1", "JOIN", "Faculty_participates_in", "AS", "T2", "ON", "T1.actID", "=", "T2.actID", "GROUP", "BY", "T1.actID", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "activity_name", "from", "activity", "as", "t1", "join", "faculty_participates_in", "as", "t2", "on", "t1", ".", "actid", "=", "t2", ".", "actid", "group", "by", "t1", ".", "actid", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the name of the activity that has the most faculty members involved in?", "question_toks": ["What", "is", "the", "name", "of", "the", "activity", "that", "has", "the", "most", "faculty", "members", "involved", "in", "?"], "guid": 1416}}
{"text": "Activity: actid, activity_name; Participates_in: stuid, actid; Faculty_Participates_in: FacID, actid; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building | Show the ids of the faculty who don't participate in any activity.", "sql": "SELECT FacID FROM Faculty EXCEPT SELECT FacID FROM Faculty_participates_in", "example": {"db_id": "activity_1", "query": "SELECT FacID FROM Faculty EXCEPT SELECT FacID FROM Faculty_participates_in", "query_toks": ["SELECT", "FacID", "FROM", "Faculty", "EXCEPT", "SELECT", "FacID", "FROM", "Faculty_participates_in"], "query_toks_no_value": ["select", "facid", "from", "faculty", "except", "select", "facid", "from", "faculty_participates_in"], "question": "Show the ids of the faculty who don't participate in any activity.", "question_toks": ["Show", "the", "ids", "of", "the", "faculty", "who", "do", "n't", "participate", "in", "any", "activity", "."], "guid": 1417}}
{"text": "Activity: actid, activity_name; Participates_in: stuid, actid; Faculty_Participates_in: FacID, actid; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building | Find the list of distinct ranks for faculty.", "sql": "SELECT DISTINCT rank FROM Faculty", "example": {"db_id": "activity_1", "query": "SELECT DISTINCT rank FROM Faculty", "query_toks": ["SELECT", "DISTINCT", "rank", "FROM", "Faculty"], "query_toks_no_value": ["select", "distinct", "rank", "from", "faculty"], "question": "Find the list of distinct ranks for faculty.", "question_toks": ["Find", "the", "list", "of", "distinct", "ranks", "for", "faculty", "."], "guid": 1418}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Dorm: dormid, dorm_name, student_capacity, gender; Dorm_amenity: amenid, amenity_name; Has_amenity: dormid, amenid; Lives_in: stuid, dormid, room_number | Find the capacity and gender type of the dorm whose name has substring \u2018Donor\u2019.", "sql": "SELECT student_capacity ,  gender FROM dorm WHERE dorm_name LIKE '%Donor%'", "example": {"db_id": "dorm_1", "query": "SELECT student_capacity ,  gender FROM dorm WHERE dorm_name LIKE '%Donor%'", "query_toks": ["SELECT", "student_capacity", ",", "gender", "FROM", "dorm", "WHERE", "dorm_name", "LIKE", "'", "%", "Donor", "%", "'"], "query_toks_no_value": ["select", "student_capacity", ",", "gender", "from", "dorm", "where", "dorm_name", "like", "value"], "question": "Find the capacity and gender type of the dorm whose name has substring \u2018Donor\u2019.", "question_toks": ["Find", "the", "capacity", "and", "gender", "type", "of", "the", "dorm", "whose", "name", "has", "substring", "\u2018Donor\u2019", "."], "guid": 1419}}
{"text": "Addresses: address_id, line_1, line_2, city, zip_postcode, state_province_county, country; People: person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password; Students: student_id, student_details; Courses: course_id, course_name, course_description, other_details; People_Addresses: person_address_id, person_id, address_id, date_from, date_to; Student_Course_Registrations: student_id, course_id, registration_date; Student_Course_Attendance: student_id, course_id, date_of_attendance; Candidates: candidate_id, candidate_details; Candidate_Assessments: candidate_id, qualification, assessment_date, asessment_outcome_code | What details do we have on the students who registered for courses most recently?", "sql": "SELECT T2.student_details FROM student_course_registrations AS T1 JOIN students AS T2 ON T1.student_id = T2.student_id ORDER BY T1.registration_date DESC LIMIT 1", "example": {"db_id": "student_assessment", "query": "SELECT T2.student_details FROM student_course_registrations AS T1 JOIN students AS T2 ON T1.student_id = T2.student_id ORDER BY T1.registration_date DESC LIMIT 1", "query_toks": ["SELECT", "T2.student_details", "FROM", "student_course_registrations", "AS", "T1", "JOIN", "students", "AS", "T2", "ON", "T1.student_id", "=", "T2.student_id", "ORDER", "BY", "T1.registration_date", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "student_details", "from", "student_course_registrations", "as", "t1", "join", "students", "as", "t2", "on", "t1", ".", "student_id", "=", "t2", ".", "student_id", "order", "by", "t1", ".", "registration_date", "desc", "limit", "value"], "question": "What details do we have on the students who registered for courses most recently?", "question_toks": ["What", "details", "do", "we", "have", "on", "the", "students", "who", "registered", "for", "courses", "most", "recently", "?"], "guid": 1420}}
{"text": "Course_Authors_and_Tutors: author_id, author_tutor_ATB, login_name, password, personal_name, middle_name, family_name, gender_mf, address_line_1; Students: student_id, date_of_registration, date_of_latest_logon, login_name, password, personal_name, middle_name, family_name; Subjects: subject_id, subject_name; Courses: course_id, author_id, subject_id, course_name, course_description; Student_Course_Enrolment: registration_id, student_id, course_id, date_of_enrolment, date_of_completion; Student_Tests_Taken: registration_id, date_test_taken, test_result | What are the addresses of the course authors or tutors with personal name \"Cathrine\"", "sql": "SELECT address_line_1 FROM Course_Authors_and_Tutors WHERE personal_name\t =  \"Cathrine\"", "example": {"db_id": "e_learning", "query": "SELECT address_line_1 FROM Course_Authors_and_Tutors WHERE personal_name\t =  \"Cathrine\"", "query_toks": ["SELECT", "address_line_1", "FROM", "Course_Authors_and_Tutors", "WHERE", "personal_name", "=", "``", "Cathrine", "''"], "query_toks_no_value": ["select", "address_line_1", "from", "course_authors_and_tutors", "where", "personal_name", "=", "value"], "question": "What are the addresses of the course authors or tutors with personal name \"Cathrine\"", "question_toks": ["What", "are", "the", "addresses", "of", "the", "course", "authors", "or", "tutors", "with", "personal", "name", "``", "Cathrine", "''"], "guid": 1421}}
{"text": "Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Courses: course_id, course_name, course_description, other_details; Departments: department_id, department_name, department_description, other_details; Degree_Programs: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details; Sections: section_id, course_id, section_name, section_description, other_details; Semesters: semester_id, semester_name, semester_description, other_details; Students: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered; Student_Enrolment: student_enrolment_id, degree_program_id, semester_id, student_id, other_details; Student_Enrolment_Courses: student_course_id, course_id, student_enrolment_id; Transcripts: transcript_id, transcript_date, other_details | What is the name of the semester with no students enrolled?", "sql": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )", "example": {"db_id": "student_transcripts_tracking", "query": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )", "query_toks": ["SELECT", "semester_name", "FROM", "Semesters", "WHERE", "semester_id", "NOT", "IN", "(", "SELECT", "semester_id", "FROM", "Student_Enrolment", ")"], "query_toks_no_value": ["select", "semester_name", "from", "semesters", "where", "semester_id", "not", "in", "(", "select", "semester_id", "from", "student_enrolment", ")"], "question": "What is the name of the semester with no students enrolled?", "question_toks": ["What", "is", "the", "name", "of", "the", "semester", "with", "no", "students", "enrolled", "?"], "guid": 1422}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Dorm: dormid, dorm_name, student_capacity, gender; Dorm_amenity: amenid, amenity_name; Has_amenity: dormid, amenid; Lives_in: stuid, dormid, room_number | What is the name and capacity of the dorm with the fewest amount of amenities?", "sql": "SELECT T1.dorm_name ,  T1.student_capacity FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid GROUP BY T2.dormid ORDER BY count(*) LIMIT 1", "example": {"db_id": "dorm_1", "query": "SELECT T1.dorm_name ,  T1.student_capacity FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid GROUP BY T2.dormid ORDER BY count(*) LIMIT 1", "query_toks": ["SELECT", "T1.dorm_name", ",", "T1.student_capacity", "FROM", "dorm", "AS", "T1", "JOIN", "has_amenity", "AS", "T2", "ON", "T1.dormid", "=", "T2.dormid", "JOIN", "dorm_amenity", "AS", "T3", "ON", "T2.amenid", "=", "T3.amenid", "GROUP", "BY", "T2.dormid", "ORDER", "BY", "count", "(", "*", ")", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "dorm_name", ",", "t1", ".", "student_capacity", "from", "dorm", "as", "t1", "join", "has_amenity", "as", "t2", "on", "t1", ".", "dormid", "=", "t2", ".", "dormid", "join", "dorm_amenity", "as", "t3", "on", "t2", ".", "amenid", "=", "t3", ".", "amenid", "group", "by", "t2", ".", "dormid", "order", "by", "count", "(", "*", ")", "limit", "value"], "question": "What is the name and capacity of the dorm with the fewest amount of amenities?", "question_toks": ["What", "is", "the", "name", "and", "capacity", "of", "the", "dorm", "with", "the", "fewest", "amount", "of", "amenities", "?"], "guid": 1423}}
{"text": "Course_Authors_and_Tutors: author_id, author_tutor_ATB, login_name, password, personal_name, middle_name, family_name, gender_mf, address_line_1; Students: student_id, date_of_registration, date_of_latest_logon, login_name, password, personal_name, middle_name, family_name; Subjects: subject_id, subject_name; Courses: course_id, author_id, subject_id, course_name, course_description; Student_Course_Enrolment: registration_id, student_id, course_id, date_of_enrolment, date_of_completion; Student_Tests_Taken: registration_id, date_test_taken, test_result | Find the login name of the course author that teaches the course with name \"advanced database\".", "sql": "SELECT T1.login_name FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id WHERE T2.course_name  =  \"advanced database\"", "example": {"db_id": "e_learning", "query": "SELECT T1.login_name FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id WHERE T2.course_name  =  \"advanced database\"", "query_toks": ["SELECT", "T1.login_name", "FROM", "Course_Authors_and_Tutors", "AS", "T1", "JOIN", "Courses", "AS", "T2", "ON", "T1.author_id", "=", "T2.author_id", "WHERE", "T2.course_name", "=", "``", "advanced", "database", "''"], "query_toks_no_value": ["select", "t1", ".", "login_name", "from", "course_authors_and_tutors", "as", "t1", "join", "courses", "as", "t2", "on", "t1", ".", "author_id", "=", "t2", ".", "author_id", "where", "t2", ".", "course_name", "=", "value"], "question": "Find the login name of the course author that teaches the course with name \"advanced database\".", "question_toks": ["Find", "the", "login", "name", "of", "the", "course", "author", "that", "teaches", "the", "course", "with", "name", "``", "advanced", "database", "''", "."], "guid": 1424}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Dorm: dormid, dorm_name, student_capacity, gender; Dorm_amenity: amenid, amenity_name; Has_amenity: dormid, amenid; Lives_in: stuid, dormid, room_number | Find the name of dorms which have TV Lounge but no Study Room as amenity.", "sql": "SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge' EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'Study Room'", "example": {"db_id": "dorm_1", "query": "SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge' EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'Study Room'", "query_toks": ["SELECT", "T1.dorm_name", "FROM", "dorm", "AS", "T1", "JOIN", "has_amenity", "AS", "T2", "ON", "T1.dormid", "=", "T2.dormid", "JOIN", "dorm_amenity", "AS", "T3", "ON", "T2.amenid", "=", "T3.amenid", "WHERE", "T3.amenity_name", "=", "'TV", "Lounge", "'", "EXCEPT", "SELECT", "T1.dorm_name", "FROM", "dorm", "AS", "T1", "JOIN", "has_amenity", "AS", "T2", "ON", "T1.dormid", "=", "T2.dormid", "JOIN", "dorm_amenity", "AS", "T3", "ON", "T2.amenid", "=", "T3.amenid", "WHERE", "T3.amenity_name", "=", "'Study", "Room", "'"], "query_toks_no_value": ["select", "t1", ".", "dorm_name", "from", "dorm", "as", "t1", "join", "has_amenity", "as", "t2", "on", "t1", ".", "dormid", "=", "t2", ".", "dormid", "join", "dorm_amenity", "as", "t3", "on", "t2", ".", "amenid", "=", "t3", ".", "amenid", "where", "t3", ".", "amenity_name", "=", "value", "except", "select", "t1", ".", "dorm_name", "from", "dorm", "as", "t1", "join", "has_amenity", "as", "t2", "on", "t1", ".", "dormid", "=", "t2", ".", "dormid", "join", "dorm_amenity", "as", "t3", "on", "t2", ".", "amenid", "=", "t3", ".", "amenid", "where", "t3", ".", "amenity_name", "=", "value"], "question": "Find the name of dorms which have TV Lounge but no Study Room as amenity.", "question_toks": ["Find", "the", "name", "of", "dorms", "which", "have", "TV", "Lounge", "but", "no", "Study", "Room", "as", "amenity", "."], "guid": 1425}}
{"text": "Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Courses: course_id, course_name, course_description, other_details; Departments: department_id, department_name, department_description, other_details; Degree_Programs: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details; Sections: section_id, course_id, section_name, section_description, other_details; Semesters: semester_id, semester_name, semester_description, other_details; Students: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered; Student_Enrolment: student_enrolment_id, degree_program_id, semester_id, student_id, other_details; Student_Enrolment_Courses: student_course_id, course_id, student_enrolment_id; Transcripts: transcript_id, transcript_date, other_details | Show the date of the transcript which shows the least number of results, also list the id.", "sql": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1", "example": {"db_id": "student_transcripts_tracking", "query": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1", "query_toks": ["SELECT", "T2.transcript_date", ",", "T1.transcript_id", "FROM", "Transcript_Contents", "AS", "T1", "JOIN", "Transcripts", "AS", "T2", "ON", "T1.transcript_id", "=", "T2.transcript_id", "GROUP", "BY", "T1.transcript_id", "ORDER", "BY", "count", "(", "*", ")", "ASC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "transcript_date", ",", "t1", ".", "transcript_id", "from", "transcript_contents", "as", "t1", "join", "transcripts", "as", "t2", "on", "t1", ".", "transcript_id", "=", "t2", ".", "transcript_id", "group", "by", "t1", ".", "transcript_id", "order", "by", "count", "(", "*", ")", "asc", "limit", "value"], "question": "Show the date of the transcript which shows the least number of results, also list the id.", "question_toks": ["Show", "the", "date", "of", "the", "transcript", "which", "shows", "the", "least", "number", "of", "results", ",", "also", "list", "the", "id", "."], "guid": 1426}}
{"text": "driver: Driver_ID, Name, Party, Home_city, Age; school: School_ID, Grade, School, Location, Type; school_bus: School_ID, Driver_ID, Years_Working, If_full_time | Show the type of school and the number of buses for each type.", "sql": "SELECT T2.type ,  count(*) FROM school_bus AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id GROUP BY T2.type", "example": {"db_id": "school_bus", "query": "SELECT T2.type ,  count(*) FROM school_bus AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id GROUP BY T2.type", "query_toks": ["SELECT", "T2.type", ",", "count", "(", "*", ")", "FROM", "school_bus", "AS", "T1", "JOIN", "school", "AS", "T2", "ON", "T1.school_id", "=", "T2.school_id", "GROUP", "BY", "T2.type"], "query_toks_no_value": ["select", "t2", ".", "type", ",", "count", "(", "*", ")", "from", "school_bus", "as", "t1", "join", "school", "as", "t2", "on", "t1", ".", "school_id", "=", "t2", ".", "school_id", "group", "by", "t2", ".", "type"], "question": "Show the type of school and the number of buses for each type.", "question_toks": ["Show", "the", "type", "of", "school", "and", "the", "number", "of", "buses", "for", "each", "type", "."], "guid": 1427}}
{"text": "driver: Driver_ID, Name, Party, Home_city, Age; school: School_ID, Grade, School, Location, Type; school_bus: School_ID, Driver_ID, Years_Working, If_full_time | Show the home city with the most number of drivers.", "sql": "SELECT home_city FROM driver GROUP BY home_city ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "school_bus", "query": "SELECT home_city FROM driver GROUP BY home_city ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "home_city", "FROM", "driver", "GROUP", "BY", "home_city", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "home_city", "from", "driver", "group", "by", "home_city", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Show the home city with the most number of drivers.", "question_toks": ["Show", "the", "home", "city", "with", "the", "most", "number", "of", "drivers", "."], "guid": 1428}}
{"text": "Activity: actid, activity_name; Participates_in: stuid, actid; Faculty_Participates_in: FacID, actid; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building | What are the first and last name of the faculty who has the most students?", "sql": "SELECT T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "activity_1", "query": "SELECT T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.fname", ",", "T1.lname", "FROM", "Faculty", "AS", "T1", "JOIN", "Student", "AS", "T2", "ON", "T1.FacID", "=", "T2.advisor", "GROUP", "BY", "T1.FacID", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "fname", ",", "t1", ".", "lname", "from", "faculty", "as", "t1", "join", "student", "as", "t2", "on", "t1", ".", "facid", "=", "t2", ".", "advisor", "group", "by", "t1", ".", "facid", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What are the first and last name of the faculty who has the most students?", "question_toks": ["What", "are", "the", "first", "and", "last", "name", "of", "the", "faculty", "who", "has", "the", "most", "students", "?"], "guid": 1429}}
{"text": "list: LastName, FirstName, Grade, Classroom; teachers: LastName, FirstName, Classroom | For each grade, return the grade number, the number of classrooms used for the grade, and the total number of students enrolled in the grade.", "sql": "SELECT grade ,  count(DISTINCT classroom) ,  count(*) FROM list GROUP BY grade", "example": {"db_id": "student_1", "query": "SELECT grade ,  count(DISTINCT classroom) ,  count(*) FROM list GROUP BY grade", "query_toks": ["SELECT", "grade", ",", "count", "(", "DISTINCT", "classroom", ")", ",", "count", "(", "*", ")", "FROM", "list", "GROUP", "BY", "grade"], "query_toks_no_value": ["select", "grade", ",", "count", "(", "distinct", "classroom", ")", ",", "count", "(", "*", ")", "from", "list", "group", "by", "grade"], "question": "For each grade, return the grade number, the number of classrooms used for the grade, and the total number of students enrolled in the grade.", "question_toks": ["For", "each", "grade", ",", "return", "the", "grade", "number", ",", "the", "number", "of", "classrooms", "used", "for", "the", "grade", ",", "and", "the", "total", "number", "of", "students", "enrolled", "in", "the", "grade", "."], "guid": 1430}}
{"text": "school: School_ID, School, Location, Enrollment, Founded, Denomination, Boys_or_Girls, Day_or_Boarding, Year_Entered_Competition, School_Colors; school_details: School_ID, Nickname, Colors, League, Class, Division; school_performance: School_Id, School_Year, Class_A, Class_AA; player: Player_ID, Player, Team, Age, Position, School_ID | Please show different denominations and the corresponding number of schools.", "sql": "SELECT Denomination ,  COUNT(*) FROM school GROUP BY Denomination", "example": {"db_id": "school_player", "query": "SELECT Denomination ,  COUNT(*) FROM school GROUP BY Denomination", "query_toks": ["SELECT", "Denomination", ",", "COUNT", "(", "*", ")", "FROM", "school", "GROUP", "BY", "Denomination"], "query_toks_no_value": ["select", "denomination", ",", "count", "(", "*", ")", "from", "school", "group", "by", "denomination"], "question": "Please show different denominations and the corresponding number of schools.", "question_toks": ["Please", "show", "different", "denominations", "and", "the", "corresponding", "number", "of", "schools", "."], "guid": 1431}}
{"text": "Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Courses: course_id, course_name, course_description, other_details; Departments: department_id, department_name, department_description, other_details; Degree_Programs: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details; Sections: section_id, course_id, section_name, section_description, other_details; Semesters: semester_id, semester_name, semester_description, other_details; Students: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered; Student_Enrolment: student_enrolment_id, degree_program_id, semester_id, student_id, other_details; Student_Enrolment_Courses: student_course_id, course_id, student_enrolment_id; Transcripts: transcript_id, transcript_date, other_details | What is the last transcript release date?", "sql": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1", "example": {"db_id": "student_transcripts_tracking", "query": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1", "query_toks": ["SELECT", "transcript_date", "FROM", "Transcripts", "ORDER", "BY", "transcript_date", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "transcript_date", "from", "transcripts", "order", "by", "transcript_date", "desc", "limit", "value"], "question": "What is the last transcript release date?", "question_toks": ["What", "is", "the", "last", "transcript", "release", "date", "?"], "guid": 1432}}
{"text": "Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Courses: course_id, course_name, course_description, other_details; Departments: department_id, department_name, department_description, other_details; Degree_Programs: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details; Sections: section_id, course_id, section_name, section_description, other_details; Semesters: semester_id, semester_name, semester_description, other_details; Students: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered; Student_Enrolment: student_enrolment_id, degree_program_id, semester_id, student_id, other_details; Student_Enrolment_Courses: student_course_id, course_id, student_enrolment_id; Transcripts: transcript_id, transcript_date, other_details | What are the names and ids of every course with less than 2 sections?", "sql": "SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2", "example": {"db_id": "student_transcripts_tracking", "query": "SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2", "query_toks": ["SELECT", "T1.course_name", ",", "T1.course_id", "FROM", "Courses", "AS", "T1", "JOIN", "Sections", "AS", "T2", "ON", "T1.course_id", "=", "T2.course_id", "GROUP", "BY", "T1.course_id", "HAVING", "count", "(", "*", ")", "<", "=", "2"], "query_toks_no_value": ["select", "t1", ".", "course_name", ",", "t1", ".", "course_id", "from", "courses", "as", "t1", "join", "sections", "as", "t2", "on", "t1", ".", "course_id", "=", "t2", ".", "course_id", "group", "by", "t1", ".", "course_id", "having", "count", "(", "*", ")", "<", "=", "value"], "question": "What are the names and ids of every course with less than 2 sections?", "question_toks": ["What", "are", "the", "names", "and", "ids", "of", "every", "course", "with", "less", "than", "2", "sections", "?"], "guid": 1433}}
{"text": "Activity: actid, activity_name; Participates_in: stuid, actid; Faculty_Participates_in: FacID, actid; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building | Find the first names of the faculty members who are playing Canoeing or Kayaking.", "sql": "SELECT DISTINCT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' OR T3.activity_name  =  'Kayaking'", "example": {"db_id": "activity_1", "query": "SELECT DISTINCT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' OR T3.activity_name  =  'Kayaking'", "query_toks": ["SELECT", "DISTINCT", "T1.lname", "FROM", "Faculty", "AS", "T1", "JOIN", "Faculty_participates_in", "AS", "T2", "ON", "T1.facID", "=", "T2.facID", "JOIN", "activity", "AS", "T3", "ON", "T2.actid", "=", "T2.actid", "WHERE", "T3.activity_name", "=", "'Canoeing", "'", "OR", "T3.activity_name", "=", "'Kayaking", "'"], "query_toks_no_value": ["select", "distinct", "t1", ".", "lname", "from", "faculty", "as", "t1", "join", "faculty_participates_in", "as", "t2", "on", "t1", ".", "facid", "=", "t2", ".", "facid", "join", "activity", "as", "t3", "on", "t2", ".", "actid", "=", "t2", ".", "actid", "where", "t3", ".", "activity_name", "=", "value", "or", "t3", ".", "activity_name", "=", "value"], "question": "Find the first names of the faculty members who are playing Canoeing or Kayaking.", "question_toks": ["Find", "the", "first", "names", "of", "the", "faculty", "members", "who", "are", "playing", "Canoeing", "or", "Kayaking", "."], "guid": 1434}}
{"text": "Course_Authors_and_Tutors: author_id, author_tutor_ATB, login_name, password, personal_name, middle_name, family_name, gender_mf, address_line_1; Students: student_id, date_of_registration, date_of_latest_logon, login_name, password, personal_name, middle_name, family_name; Subjects: subject_id, subject_name; Courses: course_id, author_id, subject_id, course_name, course_description; Student_Course_Enrolment: registration_id, student_id, course_id, date_of_enrolment, date_of_completion; Student_Tests_Taken: registration_id, date_test_taken, test_result | Find the student ID and middle name for all the students with at most two enrollments.", "sql": "SELECT T1.student_id ,  T2.middle_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING COUNT(*)  <=  2", "example": {"db_id": "e_learning", "query": "SELECT T1.student_id ,  T2.middle_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING COUNT(*)  <=  2", "query_toks": ["SELECT", "T1.student_id", ",", "T2.middle_name", "FROM", "Student_Course_Enrolment", "AS", "T1", "JOIN", "Students", "AS", "T2", "ON", "T1.student_id", "=", "T2.student_id", "GROUP", "BY", "T1.student_id", "HAVING", "COUNT", "(", "*", ")", "<", "=", "2"], "query_toks_no_value": ["select", "t1", ".", "student_id", ",", "t2", ".", "middle_name", "from", "student_course_enrolment", "as", "t1", "join", "students", "as", "t2", "on", "t1", ".", "student_id", "=", "t2", ".", "student_id", "group", "by", "t1", ".", "student_id", "having", "count", "(", "*", ")", "<", "=", "value"], "question": "Find the student ID and middle name for all the students with at most two enrollments.", "question_toks": ["Find", "the", "student", "ID", "and", "middle", "name", "for", "all", "the", "students", "with", "at", "most", "two", "enrollments", "."], "guid": 1435}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Dorm: dormid, dorm_name, student_capacity, gender; Dorm_amenity: amenid, amenity_name; Has_amenity: dormid, amenid; Lives_in: stuid, dormid, room_number | List in alphabetic order all different amenities.", "sql": "SELECT amenity_name FROM dorm_amenity ORDER BY amenity_name", "example": {"db_id": "dorm_1", "query": "SELECT amenity_name FROM dorm_amenity ORDER BY amenity_name", "query_toks": ["SELECT", "amenity_name", "FROM", "dorm_amenity", "ORDER", "BY", "amenity_name"], "query_toks_no_value": ["select", "amenity_name", "from", "dorm_amenity", "order", "by", "amenity_name"], "question": "List in alphabetic order all different amenities.", "question_toks": ["List", "in", "alphabetic", "order", "all", "different", "amenities", "."], "guid": 1436}}
{"text": "Course_Authors_and_Tutors: author_id, author_tutor_ATB, login_name, password, personal_name, middle_name, family_name, gender_mf, address_line_1; Students: student_id, date_of_registration, date_of_latest_logon, login_name, password, personal_name, middle_name, family_name; Subjects: subject_id, subject_name; Courses: course_id, author_id, subject_id, course_name, course_description; Student_Course_Enrolment: registration_id, student_id, course_id, date_of_enrolment, date_of_completion; Student_Tests_Taken: registration_id, date_test_taken, test_result | What is the name of the course that has the most student enrollment?", "sql": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) DESC LIMIT 1", "example": {"db_id": "e_learning", "query": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.course_name", "FROM", "Courses", "AS", "T1", "JOIN", "Student_Course_Enrolment", "AS", "T2", "ON", "T1.course_id", "=", "T2.course_id", "GROUP", "BY", "T1.course_name", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "course_name", "from", "courses", "as", "t1", "join", "student_course_enrolment", "as", "t2", "on", "t1", ".", "course_id", "=", "t2", ".", "course_id", "group", "by", "t1", ".", "course_name", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the name of the course that has the most student enrollment?", "question_toks": ["What", "is", "the", "name", "of", "the", "course", "that", "has", "the", "most", "student", "enrollment", "?"], "guid": 1437}}
{"text": "course: Course_ID, Staring_Date, Course; teacher: Teacher_ID, Name, Age, Hometown; course_arrange: Course_ID, Teacher_ID, Grade | List the names of teachers in ascending order of age.", "sql": "SELECT Name FROM teacher ORDER BY Age ASC", "example": {"db_id": "course_teach", "query": "SELECT Name FROM teacher ORDER BY Age ASC", "query_toks": ["SELECT", "Name", "FROM", "teacher", "ORDER", "BY", "Age", "ASC"], "query_toks_no_value": ["select", "name", "from", "teacher", "order", "by", "age", "asc"], "question": "List the names of teachers in ascending order of age.", "question_toks": ["List", "the", "names", "of", "teachers", "in", "ascending", "order", "of", "age", "."], "guid": 1438}}
{"text": "course: Course_ID, Staring_Date, Course; teacher: Teacher_ID, Name, Age, Hometown; course_arrange: Course_ID, Teacher_ID, Grade | Show the name of teachers aged either 32 or 33?", "sql": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33", "example": {"db_id": "course_teach", "query": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33", "query_toks": ["SELECT", "Name", "FROM", "teacher", "WHERE", "Age", "=", "32", "OR", "Age", "=", "33"], "query_toks_no_value": ["select", "name", "from", "teacher", "where", "age", "=", "value", "or", "age", "=", "value"], "question": "Show the name of teachers aged either 32 or 33?", "question_toks": ["Show", "the", "name", "of", "teachers", "aged", "either", "32", "or", "33", "?"], "guid": 1439}}
{"text": "driver: Driver_ID, Name, Party, Home_city, Age; school: School_ID, Grade, School, Location, Type; school_bus: School_ID, Driver_ID, Years_Working, If_full_time | find the name of driver who is driving the school bus with the longest working history.", "sql": "SELECT t1.name FROM driver AS t1 JOIN school_bus AS t2 ON t1.driver_id  =  t2.driver_id ORDER BY years_working DESC LIMIT 1", "example": {"db_id": "school_bus", "query": "SELECT t1.name FROM driver AS t1 JOIN school_bus AS t2 ON t1.driver_id  =  t2.driver_id ORDER BY years_working DESC LIMIT 1", "query_toks": ["SELECT", "t1.name", "FROM", "driver", "AS", "t1", "JOIN", "school_bus", "AS", "t2", "ON", "t1.driver_id", "=", "t2.driver_id", "ORDER", "BY", "years_working", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "driver", "as", "t1", "join", "school_bus", "as", "t2", "on", "t1", ".", "driver_id", "=", "t2", ".", "driver_id", "order", "by", "years_working", "desc", "limit", "value"], "question": "find the name of driver who is driving the school bus with the longest working history.", "question_toks": ["find", "the", "name", "of", "driver", "who", "is", "driving", "the", "school", "bus", "with", "the", "longest", "working", "history", "."], "guid": 1440}}
{"text": "Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Courses: course_id, course_name, course_description, other_details; Departments: department_id, department_name, department_description, other_details; Degree_Programs: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details; Sections: section_id, course_id, section_name, section_description, other_details; Semesters: semester_id, semester_name, semester_description, other_details; Students: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered; Student_Enrolment: student_enrolment_id, degree_program_id, semester_id, student_id, other_details; Student_Enrolment_Courses: student_course_id, course_id, student_enrolment_id; Transcripts: transcript_id, transcript_date, other_details | Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id.", "sql": "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "student_transcripts_tracking", "query": "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.student_id", ",", "T1.first_name", ",", "T1.middle_name", ",", "T1.last_name", ",", "count", "(", "*", ")", ",", "T1.student_id", "FROM", "Students", "AS", "T1", "JOIN", "Student_Enrolment", "AS", "T2", "ON", "T1.student_id", "=", "T2.student_id", "GROUP", "BY", "T1.student_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "student_id", ",", "t1", ".", "first_name", ",", "t1", ".", "middle_name", ",", "t1", ".", "last_name", ",", "count", "(", "*", ")", ",", "t1", ".", "student_id", "from", "students", "as", "t1", "join", "student_enrolment", "as", "t2", "on", "t1", ".", "student_id", "=", "t2", ".", "student_id", "group", "by", "t1", ".", "student_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id.", "question_toks": ["Which", "student", "has", "enrolled", "for", "the", "most", "times", "in", "any", "program", "?", "List", "the", "id", ",", "first", "name", ",", "middle", "name", ",", "last", "name", ",", "the", "number", "of", "enrollments", "and", "student", "id", "."], "guid": 1441}}
{"text": "School: School_id, School_name, Location, Mascot, Enrollment, IHSAA_Class, IHSAA_Football_Class, County; budget: School_id, Year, Budgeted, total_budget_percent_budgeted, Invested, total_budget_percent_invested, Budget_invested_percent; endowment: endowment_id, School_id, donator_name, amount | List each donator name and the amount of endowment in descending order of the amount of endowment.", "sql": "SELECT donator_name ,  sum(amount) FROM endowment GROUP BY donator_name ORDER BY sum(amount) DESC", "example": {"db_id": "school_finance", "query": "SELECT donator_name ,  sum(amount) FROM endowment GROUP BY donator_name ORDER BY sum(amount) DESC", "query_toks": ["SELECT", "donator_name", ",", "sum", "(", "amount", ")", "FROM", "endowment", "GROUP", "BY", "donator_name", "ORDER", "BY", "sum", "(", "amount", ")", "DESC"], "query_toks_no_value": ["select", "donator_name", ",", "sum", "(", "amount", ")", "from", "endowment", "group", "by", "donator_name", "order", "by", "sum", "(", "amount", ")", "desc"], "question": "List each donator name and the amount of endowment in descending order of the amount of endowment.", "question_toks": ["List", "each", "donator", "name", "and", "the", "amount", "of", "endowment", "in", "descending", "order", "of", "the", "amount", "of", "endowment", "."], "guid": 1442}}
{"text": "list: LastName, FirstName, Grade, Classroom; teachers: LastName, FirstName, Classroom | Find the last names of teachers teaching in classroom 109.", "sql": "SELECT lastname FROM teachers WHERE classroom  =  109", "example": {"db_id": "student_1", "query": "SELECT lastname FROM teachers WHERE classroom  =  109", "query_toks": ["SELECT", "lastname", "FROM", "teachers", "WHERE", "classroom", "=", "109"], "query_toks_no_value": ["select", "lastname", "from", "teachers", "where", "classroom", "=", "value"], "question": "Find the last names of teachers teaching in classroom 109.", "question_toks": ["Find", "the", "last", "names", "of", "teachers", "teaching", "in", "classroom", "109", "."], "guid": 1443}}
{"text": "Course_Authors_and_Tutors: author_id, author_tutor_ATB, login_name, password, personal_name, middle_name, family_name, gender_mf, address_line_1; Students: student_id, date_of_registration, date_of_latest_logon, login_name, password, personal_name, middle_name, family_name; Subjects: subject_id, subject_name; Courses: course_id, author_id, subject_id, course_name, course_description; Student_Course_Enrolment: registration_id, student_id, course_id, date_of_enrolment, date_of_completion; Student_Tests_Taken: registration_id, date_test_taken, test_result | List the addresses of all the course authors or tutors.", "sql": "SELECT address_line_1 FROM Course_Authors_and_Tutors", "example": {"db_id": "e_learning", "query": "SELECT address_line_1 FROM Course_Authors_and_Tutors", "query_toks": ["SELECT", "address_line_1", "FROM", "Course_Authors_and_Tutors"], "query_toks_no_value": ["select", "address_line_1", "from", "course_authors_and_tutors"], "question": "List the addresses of all the course authors or tutors.", "question_toks": ["List", "the", "addresses", "of", "all", "the", "course", "authors", "or", "tutors", "."], "guid": 1444}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Dorm: dormid, dorm_name, student_capacity, gender; Dorm_amenity: amenid, amenity_name; Has_amenity: dormid, amenid; Lives_in: stuid, dormid, room_number | How many students exist?", "sql": "SELECT count(*) FROM student", "example": {"db_id": "dorm_1", "query": "SELECT count(*) FROM student", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "student"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "student"], "question": "How many students exist?", "question_toks": ["How", "many", "students", "exist", "?"], "guid": 1445}}
{"text": "Activity: actid, activity_name; Participates_in: stuid, actid; Faculty_Participates_in: FacID, actid; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building | Tell me the first and last name of the student who has the most activities.", "sql": "SELECT T1.fname ,  T1.lname FROM Student AS T1 JOIN Participates_in AS T2 ON T1.StuID  =  T2.StuID GROUP BY T1.StuID ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "activity_1", "query": "SELECT T1.fname ,  T1.lname FROM Student AS T1 JOIN Participates_in AS T2 ON T1.StuID  =  T2.StuID GROUP BY T1.StuID ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.fname", ",", "T1.lname", "FROM", "Student", "AS", "T1", "JOIN", "Participates_in", "AS", "T2", "ON", "T1.StuID", "=", "T2.StuID", "GROUP", "BY", "T1.StuID", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "fname", ",", "t1", ".", "lname", "from", "student", "as", "t1", "join", "participates_in", "as", "t2", "on", "t1", ".", "stuid", "=", "t2", ".", "stuid", "group", "by", "t1", ".", "stuid", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Tell me the first and last name of the student who has the most activities.", "question_toks": ["Tell", "me", "the", "first", "and", "last", "name", "of", "the", "student", "who", "has", "the", "most", "activities", "."], "guid": 1446}}
{"text": "Activity: actid, activity_name; Participates_in: stuid, actid; Faculty_Participates_in: FacID, actid; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building | What is the name of the activity with the most students?", "sql": "SELECT T1.activity_name FROM Activity AS T1 JOIN Participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "activity_1", "query": "SELECT T1.activity_name FROM Activity AS T1 JOIN Participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.activity_name", "FROM", "Activity", "AS", "T1", "JOIN", "Participates_in", "AS", "T2", "ON", "T1.actID", "=", "T2.actID", "GROUP", "BY", "T1.actID", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "activity_name", "from", "activity", "as", "t1", "join", "participates_in", "as", "t2", "on", "t1", ".", "actid", "=", "t2", ".", "actid", "group", "by", "t1", ".", "actid", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the name of the activity with the most students?", "question_toks": ["What", "is", "the", "name", "of", "the", "activity", "with", "the", "most", "students", "?"], "guid": 1447}}
{"text": "driver: Driver_ID, Name, Party, Home_city, Age; school: School_ID, Grade, School, Location, Type; school_bus: School_ID, Driver_ID, Years_Working, If_full_time | Show all home cities except for those having a driver older than 40.", "sql": "SELECT home_city FROM driver EXCEPT SELECT home_city FROM driver WHERE age  >  40", "example": {"db_id": "school_bus", "query": "SELECT home_city FROM driver EXCEPT SELECT home_city FROM driver WHERE age  >  40", "query_toks": ["SELECT", "home_city", "FROM", "driver", "EXCEPT", "SELECT", "home_city", "FROM", "driver", "WHERE", "age", ">", "40"], "query_toks_no_value": ["select", "home_city", "from", "driver", "except", "select", "home_city", "from", "driver", "where", "age", ">", "value"], "question": "Show all home cities except for those having a driver older than 40.", "question_toks": ["Show", "all", "home", "cities", "except", "for", "those", "having", "a", "driver", "older", "than", "40", "."], "guid": 1448}}
{"text": "Course_Authors_and_Tutors: author_id, author_tutor_ATB, login_name, password, personal_name, middle_name, family_name, gender_mf, address_line_1; Students: student_id, date_of_registration, date_of_latest_logon, login_name, password, personal_name, middle_name, family_name; Subjects: subject_id, subject_name; Courses: course_id, author_id, subject_id, course_name, course_description; Student_Course_Enrolment: registration_id, student_id, course_id, date_of_enrolment, date_of_completion; Student_Tests_Taken: registration_id, date_test_taken, test_result | List the personal names and family names of all the students in alphabetical order of family name.", "sql": "SELECT personal_name ,  family_name FROM Students ORDER BY family_name", "example": {"db_id": "e_learning", "query": "SELECT personal_name ,  family_name FROM Students ORDER BY family_name", "query_toks": ["SELECT", "personal_name", ",", "family_name", "FROM", "Students", "ORDER", "BY", "family_name"], "query_toks_no_value": ["select", "personal_name", ",", "family_name", "from", "students", "order", "by", "family_name"], "question": "List the personal names and family names of all the students in alphabetical order of family name.", "question_toks": ["List", "the", "personal", "names", "and", "family", "names", "of", "all", "the", "students", "in", "alphabetical", "order", "of", "family", "name", "."], "guid": 1449}}
{"text": "Activity: actid, activity_name; Participates_in: stuid, actid; Faculty_Participates_in: FacID, actid; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building | Show all the buildings that have at least 10 professors.", "sql": "SELECT building FROM Faculty WHERE rank  =  \"Professor\" GROUP BY building HAVING count(*)  >=  10", "example": {"db_id": "activity_1", "query": "SELECT building FROM Faculty WHERE rank  =  \"Professor\" GROUP BY building HAVING count(*)  >=  10", "query_toks": ["SELECT", "building", "FROM", "Faculty", "WHERE", "rank", "=", "``", "Professor", "''", "GROUP", "BY", "building", "HAVING", "count", "(", "*", ")", ">", "=", "10"], "query_toks_no_value": ["select", "building", "from", "faculty", "where", "rank", "=", "value", "group", "by", "building", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "Show all the buildings that have at least 10 professors.", "question_toks": ["Show", "all", "the", "buildings", "that", "have", "at", "least", "10", "professors", "."], "guid": 1450}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Dorm: dormid, dorm_name, student_capacity, gender; Dorm_amenity: amenid, amenity_name; Has_amenity: dormid, amenid; Lives_in: stuid, dormid, room_number | What is the name of each dorm that has a TV Lounge but no study rooms?", "sql": "SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge' EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'Study Room'", "example": {"db_id": "dorm_1", "query": "SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge' EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'Study Room'", "query_toks": ["SELECT", "T1.dorm_name", "FROM", "dorm", "AS", "T1", "JOIN", "has_amenity", "AS", "T2", "ON", "T1.dormid", "=", "T2.dormid", "JOIN", "dorm_amenity", "AS", "T3", "ON", "T2.amenid", "=", "T3.amenid", "WHERE", "T3.amenity_name", "=", "'TV", "Lounge", "'", "EXCEPT", "SELECT", "T1.dorm_name", "FROM", "dorm", "AS", "T1", "JOIN", "has_amenity", "AS", "T2", "ON", "T1.dormid", "=", "T2.dormid", "JOIN", "dorm_amenity", "AS", "T3", "ON", "T2.amenid", "=", "T3.amenid", "WHERE", "T3.amenity_name", "=", "'Study", "Room", "'"], "query_toks_no_value": ["select", "t1", ".", "dorm_name", "from", "dorm", "as", "t1", "join", "has_amenity", "as", "t2", "on", "t1", ".", "dormid", "=", "t2", ".", "dormid", "join", "dorm_amenity", "as", "t3", "on", "t2", ".", "amenid", "=", "t3", ".", "amenid", "where", "t3", ".", "amenity_name", "=", "value", "except", "select", "t1", ".", "dorm_name", "from", "dorm", "as", "t1", "join", "has_amenity", "as", "t2", "on", "t1", ".", "dormid", "=", "t2", ".", "dormid", "join", "dorm_amenity", "as", "t3", "on", "t2", ".", "amenid", "=", "t3", ".", "amenid", "where", "t3", ".", "amenity_name", "=", "value"], "question": "What is the name of each dorm that has a TV Lounge but no study rooms?", "question_toks": ["What", "is", "the", "name", "of", "each", "dorm", "that", "has", "a", "TV", "Lounge", "but", "no", "study", "rooms", "?"], "guid": 1451}}
{"text": "list: LastName, FirstName, Grade, Classroom; teachers: LastName, FirstName, Classroom | Find all first-grade students who are NOT taught by OTHA MOYER. Report their first and last names.", "sql": "SELECT DISTINCT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.grade  =  1 EXCEPT SELECT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"OTHA\" AND T2.lastname  =  \"MOYER\"", "example": {"db_id": "student_1", "query": "SELECT DISTINCT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.grade  =  1 EXCEPT SELECT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"OTHA\" AND T2.lastname  =  \"MOYER\"", "query_toks": ["SELECT", "DISTINCT", "T1.firstname", ",", "T1.lastname", "FROM", "list", "AS", "T1", "JOIN", "teachers", "AS", "T2", "ON", "T1.classroom", "=", "T2.classroom", "WHERE", "T1.grade", "=", "1", "EXCEPT", "SELECT", "T1.firstname", ",", "T1.lastname", "FROM", "list", "AS", "T1", "JOIN", "teachers", "AS", "T2", "ON", "T1.classroom", "=", "T2.classroom", "WHERE", "T2.firstname", "=", "``", "OTHA", "''", "AND", "T2.lastname", "=", "``", "MOYER", "''"], "query_toks_no_value": ["select", "distinct", "t1", ".", "firstname", ",", "t1", ".", "lastname", "from", "list", "as", "t1", "join", "teachers", "as", "t2", "on", "t1", ".", "classroom", "=", "t2", ".", "classroom", "where", "t1", ".", "grade", "=", "value", "except", "select", "t1", ".", "firstname", ",", "t1", ".", "lastname", "from", "list", "as", "t1", "join", "teachers", "as", "t2", "on", "t1", ".", "classroom", "=", "t2", ".", "classroom", "where", "t2", ".", "firstname", "=", "value", "and", "t2", ".", "lastname", "=", "value"], "question": "Find all first-grade students who are NOT taught by OTHA MOYER. Report their first and last names.", "question_toks": ["Find", "all", "first-grade", "students", "who", "are", "NOT", "taught", "by", "OTHA", "MOYER", ".", "Report", "their", "first", "and", "last", "names", "."], "guid": 1452}}
{"text": "Course_Authors_and_Tutors: author_id, author_tutor_ATB, login_name, password, personal_name, middle_name, family_name, gender_mf, address_line_1; Students: student_id, date_of_registration, date_of_latest_logon, login_name, password, personal_name, middle_name, family_name; Subjects: subject_id, subject_name; Courses: course_id, author_id, subject_id, course_name, course_description; Student_Course_Enrolment: registration_id, student_id, course_id, date_of_enrolment, date_of_completion; Student_Tests_Taken: registration_id, date_test_taken, test_result | On what dates did the student whose personal name is \"Karson\" enroll in and complete the courses?", "sql": "SELECT T1.date_of_enrolment ,  T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.personal_name  =  \"Karson\"", "example": {"db_id": "e_learning", "query": "SELECT T1.date_of_enrolment ,  T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.personal_name  =  \"Karson\"", "query_toks": ["SELECT", "T1.date_of_enrolment", ",", "T1.date_of_completion", "FROM", "Student_Course_Enrolment", "AS", "T1", "JOIN", "Students", "AS", "T2", "ON", "T1.student_id", "=", "T2.student_id", "WHERE", "T2.personal_name", "=", "``", "Karson", "''"], "query_toks_no_value": ["select", "t1", ".", "date_of_enrolment", ",", "t1", ".", "date_of_completion", "from", "student_course_enrolment", "as", "t1", "join", "students", "as", "t2", "on", "t1", ".", "student_id", "=", "t2", ".", "student_id", "where", "t2", ".", "personal_name", "=", "value"], "question": "On what dates did the student whose personal name is \"Karson\" enroll in and complete the courses?", "question_toks": ["On", "what", "dates", "did", "the", "student", "whose", "personal", "name", "is", "``", "Karson", "''", "enroll", "in", "and", "complete", "the", "courses", "?"], "guid": 1453}}
{"text": "list: LastName, FirstName, Grade, Classroom; teachers: LastName, FirstName, Classroom | What are the last names of the teachers who teach the student called GELL TAMI?", "sql": "SELECT T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"GELL\" AND T1.lastname  =  \"TAMI\"", "example": {"db_id": "student_1", "query": "SELECT T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"GELL\" AND T1.lastname  =  \"TAMI\"", "query_toks": ["SELECT", "T2.lastname", "FROM", "list", "AS", "T1", "JOIN", "teachers", "AS", "T2", "ON", "T1.classroom", "=", "T2.classroom", "WHERE", "T1.firstname", "=", "``", "GELL", "''", "AND", "T1.lastname", "=", "``", "TAMI", "''"], "query_toks_no_value": ["select", "t2", ".", "lastname", "from", "list", "as", "t1", "join", "teachers", "as", "t2", "on", "t1", ".", "classroom", "=", "t2", ".", "classroom", "where", "t1", ".", "firstname", "=", "value", "and", "t1", ".", "lastname", "=", "value"], "question": "What are the last names of the teachers who teach the student called GELL TAMI?", "question_toks": ["What", "are", "the", "last", "names", "of", "the", "teachers", "who", "teach", "the", "student", "called", "GELL", "TAMI", "?"], "guid": 1454}}
{"text": "list: LastName, FirstName, Grade, Classroom; teachers: LastName, FirstName, Classroom | How many students does KAWA GORDON teaches?", "sql": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"KAWA\" AND T2.lastname  =  \"GORDON\"", "example": {"db_id": "student_1", "query": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"KAWA\" AND T2.lastname  =  \"GORDON\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "list", "AS", "T1", "JOIN", "teachers", "AS", "T2", "ON", "T1.classroom", "=", "T2.classroom", "WHERE", "T2.firstname", "=", "``", "KAWA", "''", "AND", "T2.lastname", "=", "``", "GORDON", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "list", "as", "t1", "join", "teachers", "as", "t2", "on", "t1", ".", "classroom", "=", "t2", ".", "classroom", "where", "t2", ".", "firstname", "=", "value", "and", "t2", ".", "lastname", "=", "value"], "question": "How many students does KAWA GORDON teaches?", "question_toks": ["How", "many", "students", "does", "KAWA", "GORDON", "teaches", "?"], "guid": 1455}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Dorm: dormid, dorm_name, student_capacity, gender; Dorm_amenity: amenid, amenity_name; Has_amenity: dormid, amenid; Lives_in: stuid, dormid, room_number | What are the first and last names of all students who are not living in the city HKG and order the results by age?", "sql": "SELECT fname ,  lname FROM student WHERE city_code != 'HKG' ORDER BY age", "example": {"db_id": "dorm_1", "query": "SELECT fname ,  lname FROM student WHERE city_code != 'HKG' ORDER BY age", "query_toks": ["SELECT", "fname", ",", "lname", "FROM", "student", "WHERE", "city_code", "!", "=", "'HKG", "'", "ORDER", "BY", "age"], "query_toks_no_value": ["select", "fname", ",", "lname", "from", "student", "where", "city_code", "!", "=", "value", "order", "by", "age"], "question": "What are the first and last names of all students who are not living in the city HKG and order the results by age?", "question_toks": ["What", "are", "the", "first", "and", "last", "names", "of", "all", "students", "who", "are", "not", "living", "in", "the", "city", "HKG", "and", "order", "the", "results", "by", "age", "?"], "guid": 1456}}
{"text": "Activity: actid, activity_name; Participates_in: stuid, actid; Faculty_Participates_in: FacID, actid; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building | Find the number of activities Mark Giuliano is involved in.", "sql": "SELECT count(*) FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID WHERE T1.fname  =  \"Mark\" AND T1.lname  =  \"Giuliano\"", "example": {"db_id": "activity_1", "query": "SELECT count(*) FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID WHERE T1.fname  =  \"Mark\" AND T1.lname  =  \"Giuliano\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Faculty", "AS", "T1", "JOIN", "Faculty_participates_in", "AS", "T2", "ON", "T1.facID", "=", "T2.facID", "WHERE", "T1.fname", "=", "``", "Mark", "''", "AND", "T1.lname", "=", "``", "Giuliano", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "faculty", "as", "t1", "join", "faculty_participates_in", "as", "t2", "on", "t1", ".", "facid", "=", "t2", ".", "facid", "where", "t1", ".", "fname", "=", "value", "and", "t1", ".", "lname", "=", "value"], "question": "Find the number of activities Mark Giuliano is involved in.", "question_toks": ["Find", "the", "number", "of", "activities", "Mark", "Giuliano", "is", "involved", "in", "."], "guid": 1457}}
{"text": "Activity: actid, activity_name; Participates_in: stuid, actid; Faculty_Participates_in: FacID, actid; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building | Show first name and last name for all the students advised by Michael Goodrich.", "sql": "SELECT T2.fname ,  T2.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor WHERE T1.fname  =  \"Michael\" AND T1.lname  =  \"Goodrich\"", "example": {"db_id": "activity_1", "query": "SELECT T2.fname ,  T2.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor WHERE T1.fname  =  \"Michael\" AND T1.lname  =  \"Goodrich\"", "query_toks": ["SELECT", "T2.fname", ",", "T2.lname", "FROM", "Faculty", "AS", "T1", "JOIN", "Student", "AS", "T2", "ON", "T1.FacID", "=", "T2.advisor", "WHERE", "T1.fname", "=", "``", "Michael", "''", "AND", "T1.lname", "=", "``", "Goodrich", "''"], "query_toks_no_value": ["select", "t2", ".", "fname", ",", "t2", ".", "lname", "from", "faculty", "as", "t1", "join", "student", "as", "t2", "on", "t1", ".", "facid", "=", "t2", ".", "advisor", "where", "t1", ".", "fname", "=", "value", "and", "t1", ".", "lname", "=", "value"], "question": "Show first name and last name for all the students advised by Michael Goodrich.", "question_toks": ["Show", "first", "name", "and", "last", "name", "for", "all", "the", "students", "advised", "by", "Michael", "Goodrich", "."], "guid": 1458}}
{"text": "Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Courses: course_id, course_name, course_description, other_details; Departments: department_id, department_name, department_description, other_details; Degree_Programs: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details; Sections: section_id, course_id, section_name, section_description, other_details; Semesters: semester_id, semester_name, semester_description, other_details; Students: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered; Student_Enrolment: student_enrolment_id, degree_program_id, semester_id, student_id, other_details; Student_Enrolment_Courses: student_course_id, course_id, student_enrolment_id; Transcripts: transcript_id, transcript_date, other_details | How many courses in total are listed?", "sql": "SELECT count(*) FROM Courses", "example": {"db_id": "student_transcripts_tracking", "query": "SELECT count(*) FROM Courses", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Courses"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "courses"], "question": "How many courses in total are listed?", "question_toks": ["How", "many", "courses", "in", "total", "are", "listed", "?"], "guid": 1459}}
{"text": "Course_Authors_and_Tutors: author_id, author_tutor_ATB, login_name, password, personal_name, middle_name, family_name, gender_mf, address_line_1; Students: student_id, date_of_registration, date_of_latest_logon, login_name, password, personal_name, middle_name, family_name; Subjects: subject_id, subject_name; Courses: course_id, author_id, subject_id, course_name, course_description; Student_Course_Enrolment: registration_id, student_id, course_id, date_of_enrolment, date_of_completion; Student_Tests_Taken: registration_id, date_test_taken, test_result | What are the completion dates of all the tests that have result \"Fail\"?", "sql": "SELECT T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id  =  T2.registration_id WHERE T2.test_result  =  \"Fail\"", "example": {"db_id": "e_learning", "query": "SELECT T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id  =  T2.registration_id WHERE T2.test_result  =  \"Fail\"", "query_toks": ["SELECT", "T1.date_of_completion", "FROM", "Student_Course_Enrolment", "AS", "T1", "JOIN", "Student_Tests_Taken", "AS", "T2", "ON", "T1.registration_id", "=", "T2.registration_id", "WHERE", "T2.test_result", "=", "``", "Fail", "''"], "query_toks_no_value": ["select", "t1", ".", "date_of_completion", "from", "student_course_enrolment", "as", "t1", "join", "student_tests_taken", "as", "t2", "on", "t1", ".", "registration_id", "=", "t2", ".", "registration_id", "where", "t2", ".", "test_result", "=", "value"], "question": "What are the completion dates of all the tests that have result \"Fail\"?", "question_toks": ["What", "are", "the", "completion", "dates", "of", "all", "the", "tests", "that", "have", "result", "``", "Fail", "''", "?"], "guid": 1460}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Dorm: dormid, dorm_name, student_capacity, gender; Dorm_amenity: amenid, amenity_name; Has_amenity: dormid, amenid; Lives_in: stuid, dormid, room_number | Find the number of distinct amenities.", "sql": "SELECT count(*) FROM dorm_amenity", "example": {"db_id": "dorm_1", "query": "SELECT count(*) FROM dorm_amenity", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "dorm_amenity"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "dorm_amenity"], "question": "Find the number of distinct amenities.", "question_toks": ["Find", "the", "number", "of", "distinct", "amenities", "."], "guid": 1461}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Dorm: dormid, dorm_name, student_capacity, gender; Dorm_amenity: amenid, amenity_name; Has_amenity: dormid, amenid; Lives_in: stuid, dormid, room_number | Find the number of dorms and total capacity for each gender.", "sql": "SELECT count(*) ,  sum(student_capacity) ,  gender FROM dorm GROUP BY gender", "example": {"db_id": "dorm_1", "query": "SELECT count(*) ,  sum(student_capacity) ,  gender FROM dorm GROUP BY gender", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "sum", "(", "student_capacity", ")", ",", "gender", "FROM", "dorm", "GROUP", "BY", "gender"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "sum", "(", "student_capacity", ")", ",", "gender", "from", "dorm", "group", "by", "gender"], "question": "Find the number of dorms and total capacity for each gender.", "question_toks": ["Find", "the", "number", "of", "dorms", "and", "total", "capacity", "for", "each", "gender", "."], "guid": 1462}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Dorm: dormid, dorm_name, student_capacity, gender; Dorm_amenity: amenid, amenity_name; Has_amenity: dormid, amenid; Lives_in: stuid, dormid, room_number | How many students live in each city and what are their average ages?", "sql": "SELECT count(*) ,  avg(age) ,  city_code FROM student GROUP BY city_code", "example": {"db_id": "dorm_1", "query": "SELECT count(*) ,  avg(age) ,  city_code FROM student GROUP BY city_code", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "avg", "(", "age", ")", ",", "city_code", "FROM", "student", "GROUP", "BY", "city_code"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "avg", "(", "age", ")", ",", "city_code", "from", "student", "group", "by", "city_code"], "question": "How many students live in each city and what are their average ages?", "question_toks": ["How", "many", "students", "live", "in", "each", "city", "and", "what", "are", "their", "average", "ages", "?"], "guid": 1463}}
{"text": "Addresses: address_id, line_1, line_2, city, zip_postcode, state_province_county, country; People: person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password; Students: student_id, student_details; Courses: course_id, course_name, course_description, other_details; People_Addresses: person_address_id, person_id, address_id, date_from, date_to; Student_Course_Registrations: student_id, course_id, registration_date; Student_Course_Attendance: student_id, course_id, date_of_attendance; Candidates: candidate_id, candidate_details; Candidate_Assessments: candidate_id, qualification, assessment_date, asessment_outcome_code | List the names of courses in alphabetical order?", "sql": "SELECT course_name FROM courses ORDER BY course_name", "example": {"db_id": "student_assessment", "query": "SELECT course_name FROM courses ORDER BY course_name", "query_toks": ["SELECT", "course_name", "FROM", "courses", "ORDER", "BY", "course_name"], "query_toks_no_value": ["select", "course_name", "from", "courses", "order", "by", "course_name"], "question": "List the names of courses in alphabetical order?", "question_toks": ["List", "the", "names", "of", "courses", "in", "alphabetical", "order", "?"], "guid": 1464}}
{"text": "Activity: actid, activity_name; Participates_in: stuid, actid; Faculty_Participates_in: FacID, actid; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building | What are the first name and last name of all the instructors?", "sql": "SELECT fname ,  lname FROM Faculty WHERE Rank  =  \"Instructor\"", "example": {"db_id": "activity_1", "query": "SELECT fname ,  lname FROM Faculty WHERE Rank  =  \"Instructor\"", "query_toks": ["SELECT", "fname", ",", "lname", "FROM", "Faculty", "WHERE", "Rank", "=", "``", "Instructor", "''"], "query_toks_no_value": ["select", "fname", ",", "lname", "from", "faculty", "where", "rank", "=", "value"], "question": "What are the first name and last name of all the instructors?", "question_toks": ["What", "are", "the", "first", "name", "and", "last", "name", "of", "all", "the", "instructors", "?"], "guid": 1465}}
{"text": "course: Course_ID, Staring_Date, Course; teacher: Teacher_ID, Name, Age, Hometown; course_arrange: Course_ID, Teacher_ID, Grade | What is the total count of teachers?", "sql": "SELECT count(*) FROM teacher", "example": {"db_id": "course_teach", "query": "SELECT count(*) FROM teacher", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "teacher"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "teacher"], "question": "What is the total count of teachers?", "question_toks": ["What", "is", "the", "total", "count", "of", "teachers", "?"], "guid": 1466}}
{"text": "Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Courses: course_id, course_name, course_description, other_details; Departments: department_id, department_name, department_description, other_details; Degree_Programs: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details; Sections: section_id, course_id, section_name, section_description, other_details; Semesters: semester_id, semester_name, semester_description, other_details; Students: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered; Student_Enrolment: student_enrolment_id, degree_program_id, semester_id, student_id, other_details; Student_Enrolment_Courses: student_course_id, course_id, student_enrolment_id; Transcripts: transcript_id, transcript_date, other_details | How is the math course described?", "sql": "SELECT course_description FROM Courses WHERE course_name  =  'math'", "example": {"db_id": "student_transcripts_tracking", "query": "SELECT course_description FROM Courses WHERE course_name  =  'math'", "query_toks": ["SELECT", "course_description", "FROM", "Courses", "WHERE", "course_name", "=", "'math", "'"], "query_toks_no_value": ["select", "course_description", "from", "courses", "where", "course_name", "=", "value"], "question": "How is the math course described?", "question_toks": ["How", "is", "the", "math", "course", "described", "?"], "guid": 1467}}
{"text": "course: Course_ID, Staring_Date, Course; teacher: Teacher_ID, Name, Age, Hometown; course_arrange: Course_ID, Teacher_ID, Grade | What are the names of the teachers who are aged either 32 or 33?", "sql": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33", "example": {"db_id": "course_teach", "query": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33", "query_toks": ["SELECT", "Name", "FROM", "teacher", "WHERE", "Age", "=", "32", "OR", "Age", "=", "33"], "query_toks_no_value": ["select", "name", "from", "teacher", "where", "age", "=", "value", "or", "age", "=", "value"], "question": "What are the names of the teachers who are aged either 32 or 33?", "question_toks": ["What", "are", "the", "names", "of", "the", "teachers", "who", "are", "aged", "either", "32", "or", "33", "?"], "guid": 1468}}
{"text": "Addresses: address_id, line_1, line_2, city, zip_postcode, state_province_county, country; People: person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password; Students: student_id, student_details; Courses: course_id, course_name, course_description, other_details; People_Addresses: person_address_id, person_id, address_id, date_from, date_to; Student_Course_Registrations: student_id, course_id, registration_date; Student_Course_Attendance: student_id, course_id, date_of_attendance; Candidates: candidate_id, candidate_details; Candidate_Assessments: candidate_id, qualification, assessment_date, asessment_outcome_code | For each course id, how many students are registered and what are the course names?", "sql": "SELECT T3.course_name ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id", "example": {"db_id": "student_assessment", "query": "SELECT T3.course_name ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id", "query_toks": ["SELECT", "T3.course_name", ",", "count", "(", "*", ")", "FROM", "students", "AS", "T1", "JOIN", "student_course_registrations", "AS", "T2", "ON", "T1.student_id", "=", "T2.student_id", "JOIN", "courses", "AS", "T3", "ON", "T2.course_id", "=", "T3.course_id", "GROUP", "BY", "T2.course_id"], "query_toks_no_value": ["select", "t3", ".", "course_name", ",", "count", "(", "*", ")", "from", "students", "as", "t1", "join", "student_course_registrations", "as", "t2", "on", "t1", ".", "student_id", "=", "t2", ".", "student_id", "join", "courses", "as", "t3", "on", "t2", ".", "course_id", "=", "t3", ".", "course_id", "group", "by", "t2", ".", "course_id"], "question": "For each course id, how many students are registered and what are the course names?", "question_toks": ["For", "each", "course", "id", ",", "how", "many", "students", "are", "registered", "and", "what", "are", "the", "course", "names", "?"], "guid": 1469}}
{"text": "Addresses: address_id, line_1, line_2, city, zip_postcode, state_province_county, country; People: person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password; Students: student_id, student_details; Courses: course_id, course_name, course_description, other_details; People_Addresses: person_address_id, person_id, address_id, date_from, date_to; Student_Course_Registrations: student_id, course_id, registration_date; Student_Course_Attendance: student_id, course_id, date_of_attendance; Candidates: candidate_id, candidate_details; Candidate_Assessments: candidate_id, qualification, assessment_date, asessment_outcome_code | What are the first and last names of all the candidates?", "sql": "SELECT T2.first_name ,  T2.last_name FROM candidates AS T1 JOIN people AS T2 ON T1.candidate_id = T2.person_id", "example": {"db_id": "student_assessment", "query": "SELECT T2.first_name ,  T2.last_name FROM candidates AS T1 JOIN people AS T2 ON T1.candidate_id = T2.person_id", "query_toks": ["SELECT", "T2.first_name", ",", "T2.last_name", "FROM", "candidates", "AS", "T1", "JOIN", "people", "AS", "T2", "ON", "T1.candidate_id", "=", "T2.person_id"], "query_toks_no_value": ["select", "t2", ".", "first_name", ",", "t2", ".", "last_name", "from", "candidates", "as", "t1", "join", "people", "as", "t2", "on", "t1", ".", "candidate_id", "=", "t2", ".", "person_id"], "question": "What are the first and last names of all the candidates?", "question_toks": ["What", "are", "the", "first", "and", "last", "names", "of", "all", "the", "candidates", "?"], "guid": 1470}}
{"text": "Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Courses: course_id, course_name, course_description, other_details; Departments: department_id, department_name, department_description, other_details; Degree_Programs: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details; Sections: section_id, course_id, section_name, section_description, other_details; Semesters: semester_id, semester_name, semester_description, other_details; Students: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered; Student_Enrolment: student_enrolment_id, degree_program_id, semester_id, student_id, other_details; Student_Enrolment_Courses: student_course_id, course_id, student_enrolment_id; Transcripts: transcript_id, transcript_date, other_details | Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.", "sql": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'", "example": {"db_id": "student_transcripts_tracking", "query": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'", "query_toks": ["SELECT", "DISTINCT", "T1.first_name", ",", "T1.middle_name", ",", "T1.last_name", "FROM", "Students", "AS", "T1", "JOIN", "Student_Enrolment", "AS", "T2", "ON", "T1.student_id", "=", "T2.student_id", "JOIN", "Degree_Programs", "AS", "T3", "ON", "T2.degree_program_id", "=", "T3.degree_program_id", "WHERE", "T3.degree_summary_name", "=", "'Bachelor", "'"], "query_toks_no_value": ["select", "distinct", "t1", ".", "first_name", ",", "t1", ".", "middle_name", ",", "t1", ".", "last_name", "from", "students", "as", "t1", "join", "student_enrolment", "as", "t2", "on", "t1", ".", "student_id", "=", "t2", ".", "student_id", "join", "degree_programs", "as", "t3", "on", "t2", ".", "degree_program_id", "=", "t3", ".", "degree_program_id", "where", "t3", ".", "degree_summary_name", "=", "value"], "question": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.", "question_toks": ["Who", "is", "enrolled", "in", "a", "Bachelor", "degree", "program", "?", "List", "the", "first", "name", ",", "middle", "name", ",", "last", "name", "."], "guid": 1471}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Dorm: dormid, dorm_name, student_capacity, gender; Dorm_amenity: amenid, amenity_name; Has_amenity: dormid, amenid; Lives_in: stuid, dormid, room_number | What is the average age for each city and what are those cities?", "sql": "SELECT avg(age) ,  city_code FROM student GROUP BY city_code", "example": {"db_id": "dorm_1", "query": "SELECT avg(age) ,  city_code FROM student GROUP BY city_code", "query_toks": ["SELECT", "avg", "(", "age", ")", ",", "city_code", "FROM", "student", "GROUP", "BY", "city_code"], "query_toks_no_value": ["select", "avg", "(", "age", ")", ",", "city_code", "from", "student", "group", "by", "city_code"], "question": "What is the average age for each city and what are those cities?", "question_toks": ["What", "is", "the", "average", "age", "for", "each", "city", "and", "what", "are", "those", "cities", "?"], "guid": 1472}}
{"text": "Course_Authors_and_Tutors: author_id, author_tutor_ATB, login_name, password, personal_name, middle_name, family_name, gender_mf, address_line_1; Students: student_id, date_of_registration, date_of_latest_logon, login_name, password, personal_name, middle_name, family_name; Subjects: subject_id, subject_name; Courses: course_id, author_id, subject_id, course_name, course_description; Student_Course_Enrolment: registration_id, student_id, course_id, date_of_enrolment, date_of_completion; Student_Tests_Taken: registration_id, date_test_taken, test_result | Find the number of students who have the word \"son\" in their personal names.", "sql": "SELECT COUNT(*) FROM Students WHERE personal_name LIKE \"%son%\"", "example": {"db_id": "e_learning", "query": "SELECT COUNT(*) FROM Students WHERE personal_name LIKE \"%son%\"", "query_toks": ["SELECT", "COUNT", "(", "*", ")", "FROM", "Students", "WHERE", "personal_name", "LIKE", "``", "%", "son", "%", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "students", "where", "personal_name", "like", "value"], "question": "Find the number of students who have the word \"son\" in their personal names.", "question_toks": ["Find", "the", "number", "of", "students", "who", "have", "the", "word", "``", "son", "''", "in", "their", "personal", "names", "."], "guid": 1473}}
{"text": "school: School_ID, School, Location, Enrollment, Founded, Denomination, Boys_or_Girls, Day_or_Boarding, Year_Entered_Competition, School_Colors; school_details: School_ID, Nickname, Colors, League, Class, Division; school_performance: School_Id, School_Year, Class_A, Class_AA; player: Player_ID, Player, Team, Age, Position, School_ID | What are the team and the location of school each player belongs to?", "sql": "SELECT T1.Team ,  T2.Location FROM player AS T1 JOIN school AS T2 ON T1.School_ID  =  T2.School_ID", "example": {"db_id": "school_player", "query": "SELECT T1.Team ,  T2.Location FROM player AS T1 JOIN school AS T2 ON T1.School_ID  =  T2.School_ID", "query_toks": ["SELECT", "T1.Team", ",", "T2.Location", "FROM", "player", "AS", "T1", "JOIN", "school", "AS", "T2", "ON", "T1.School_ID", "=", "T2.School_ID"], "query_toks_no_value": ["select", "t1", ".", "team", ",", "t2", ".", "location", "from", "player", "as", "t1", "join", "school", "as", "t2", "on", "t1", ".", "school_id", "=", "t2", ".", "school_id"], "question": "What are the team and the location of school each player belongs to?", "question_toks": ["What", "are", "the", "team", "and", "the", "location", "of", "school", "each", "player", "belongs", "to", "?"], "guid": 1474}}
{"text": "school: School_ID, School, Location, Enrollment, Founded, Denomination, Boys_or_Girls, Day_or_Boarding, Year_Entered_Competition, School_Colors; school_details: School_ID, Nickname, Colors, League, Class, Division; school_performance: School_Id, School_Year, Class_A, Class_AA; player: Player_ID, Player, Team, Age, Position, School_ID | Find the team of each player and sort them in ascending alphabetical order.", "sql": "SELECT Team FROM player ORDER BY Team ASC", "example": {"db_id": "school_player", "query": "SELECT Team FROM player ORDER BY Team ASC", "query_toks": ["SELECT", "Team", "FROM", "player", "ORDER", "BY", "Team", "ASC"], "query_toks_no_value": ["select", "team", "from", "player", "order", "by", "team", "asc"], "question": "Find the team of each player and sort them in ascending alphabetical order.", "question_toks": ["Find", "the", "team", "of", "each", "player", "and", "sort", "them", "in", "ascending", "alphabetical", "order", "."], "guid": 1475}}
{"text": "Addresses: address_id, line_1, line_2, city, zip_postcode, state_province_county, country; People: person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password; Students: student_id, student_details; Courses: course_id, course_name, course_description, other_details; People_Addresses: person_address_id, person_id, address_id, date_from, date_to; Student_Course_Registrations: student_id, course_id, registration_date; Student_Course_Attendance: student_id, course_id, date_of_attendance; Candidates: candidate_id, candidate_details; Candidate_Assessments: candidate_id, qualification, assessment_date, asessment_outcome_code | Find distinct cities of addresses of people?", "sql": "SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id", "example": {"db_id": "student_assessment", "query": "SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id", "query_toks": ["SELECT", "DISTINCT", "T1.city", "FROM", "addresses", "AS", "T1", "JOIN", "people_addresses", "AS", "T2", "ON", "T1.address_id", "=", "T2.address_id"], "query_toks_no_value": ["select", "distinct", "t1", ".", "city", "from", "addresses", "as", "t1", "join", "people_addresses", "as", "t2", "on", "t1", ".", "address_id", "=", "t2", ".", "address_id"], "question": "Find distinct cities of addresses of people?", "question_toks": ["Find", "distinct", "cities", "of", "addresses", "of", "people", "?"], "guid": 1476}}
{"text": "Activity: actid, activity_name; Participates_in: stuid, actid; Faculty_Participates_in: FacID, actid; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building | Which students are advised by Michael Goodrich? Give me their first and last names.", "sql": "SELECT T2.fname ,  T2.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor WHERE T1.fname  =  \"Michael\" AND T1.lname  =  \"Goodrich\"", "example": {"db_id": "activity_1", "query": "SELECT T2.fname ,  T2.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor WHERE T1.fname  =  \"Michael\" AND T1.lname  =  \"Goodrich\"", "query_toks": ["SELECT", "T2.fname", ",", "T2.lname", "FROM", "Faculty", "AS", "T1", "JOIN", "Student", "AS", "T2", "ON", "T1.FacID", "=", "T2.advisor", "WHERE", "T1.fname", "=", "``", "Michael", "''", "AND", "T1.lname", "=", "``", "Goodrich", "''"], "query_toks_no_value": ["select", "t2", ".", "fname", ",", "t2", ".", "lname", "from", "faculty", "as", "t1", "join", "student", "as", "t2", "on", "t1", ".", "facid", "=", "t2", ".", "advisor", "where", "t1", ".", "fname", "=", "value", "and", "t1", ".", "lname", "=", "value"], "question": "Which students are advised by Michael Goodrich? Give me their first and last names.", "question_toks": ["Which", "students", "are", "advised", "by", "Michael", "Goodrich", "?", "Give", "me", "their", "first", "and", "last", "names", "."], "guid": 1477}}
{"text": "Course_Authors_and_Tutors: author_id, author_tutor_ATB, login_name, password, personal_name, middle_name, family_name, gender_mf, address_line_1; Students: student_id, date_of_registration, date_of_latest_logon, login_name, password, personal_name, middle_name, family_name; Subjects: subject_id, subject_name; Courses: course_id, author_id, subject_id, course_name, course_description; Student_Course_Enrolment: registration_id, student_id, course_id, date_of_enrolment, date_of_completion; Student_Tests_Taken: registration_id, date_test_taken, test_result | What are the names of the courses that have exactly 1 student enrollment?", "sql": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name HAVING COUNT(*)  =  1", "example": {"db_id": "e_learning", "query": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name HAVING COUNT(*)  =  1", "query_toks": ["SELECT", "T1.course_name", "FROM", "Courses", "AS", "T1", "JOIN", "Student_Course_Enrolment", "AS", "T2", "ON", "T1.course_id", "=", "T2.course_id", "GROUP", "BY", "T1.course_name", "HAVING", "COUNT", "(", "*", ")", "=", "1"], "query_toks_no_value": ["select", "t1", ".", "course_name", "from", "courses", "as", "t1", "join", "student_course_enrolment", "as", "t2", "on", "t1", ".", "course_id", "=", "t2", ".", "course_id", "group", "by", "t1", ".", "course_name", "having", "count", "(", "*", ")", "=", "value"], "question": "What are the names of the courses that have exactly 1 student enrollment?", "question_toks": ["What", "are", "the", "names", "of", "the", "courses", "that", "have", "exactly", "1", "student", "enrollment", "?"], "guid": 1478}}
{"text": "school: School_ID, School, Location, Enrollment, Founded, Denomination, Boys_or_Girls, Day_or_Boarding, Year_Entered_Competition, School_Colors; school_details: School_ID, Nickname, Colors, League, Class, Division; school_performance: School_Id, School_Year, Class_A, Class_AA; player: Player_ID, Player, Team, Age, Position, School_ID | List the enrollment for each school that does not have \"Catholic\" as denomination.", "sql": "SELECT Enrollment FROM school WHERE Denomination != \"Catholic\"", "example": {"db_id": "school_player", "query": "SELECT Enrollment FROM school WHERE Denomination != \"Catholic\"", "query_toks": ["SELECT", "Enrollment", "FROM", "school", "WHERE", "Denomination", "!", "=", "``", "Catholic", "''"], "query_toks_no_value": ["select", "enrollment", "from", "school", "where", "denomination", "!", "=", "value"], "question": "List the enrollment for each school that does not have \"Catholic\" as denomination.", "question_toks": ["List", "the", "enrollment", "for", "each", "school", "that", "does", "not", "have", "``", "Catholic", "''", "as", "denomination", "."], "guid": 1479}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Dorm: dormid, dorm_name, student_capacity, gender; Dorm_amenity: amenid, amenity_name; Has_amenity: dormid, amenid; Lives_in: stuid, dormid, room_number | What is the student capacity and type of gender for the dorm whose name as the phrase Donor in it?", "sql": "SELECT student_capacity ,  gender FROM dorm WHERE dorm_name LIKE '%Donor%'", "example": {"db_id": "dorm_1", "query": "SELECT student_capacity ,  gender FROM dorm WHERE dorm_name LIKE '%Donor%'", "query_toks": ["SELECT", "student_capacity", ",", "gender", "FROM", "dorm", "WHERE", "dorm_name", "LIKE", "'", "%", "Donor", "%", "'"], "query_toks_no_value": ["select", "student_capacity", ",", "gender", "from", "dorm", "where", "dorm_name", "like", "value"], "question": "What is the student capacity and type of gender for the dorm whose name as the phrase Donor in it?", "question_toks": ["What", "is", "the", "student", "capacity", "and", "type", "of", "gender", "for", "the", "dorm", "whose", "name", "as", "the", "phrase", "Donor", "in", "it", "?"], "guid": 1480}}
{"text": "Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Courses: course_id, course_name, course_description, other_details; Departments: department_id, department_name, department_description, other_details; Degree_Programs: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details; Sections: section_id, course_id, section_name, section_description, other_details; Semesters: semester_id, semester_name, semester_description, other_details; Students: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered; Student_Enrolment: student_enrolment_id, degree_program_id, semester_id, student_id, other_details; Student_Enrolment_Courses: student_course_id, course_id, student_enrolment_id; Transcripts: transcript_id, transcript_date, other_details | What are the names and descriptions for all the sections?", "sql": "SELECT section_name ,  section_description FROM Sections", "example": {"db_id": "student_transcripts_tracking", "query": "SELECT section_name ,  section_description FROM Sections", "query_toks": ["SELECT", "section_name", ",", "section_description", "FROM", "Sections"], "query_toks_no_value": ["select", "section_name", ",", "section_description", "from", "sections"], "question": "What are the names and descriptions for all the sections?", "question_toks": ["What", "are", "the", "names", "and", "descriptions", "for", "all", "the", "sections", "?"], "guid": 1481}}
{"text": "list: LastName, FirstName, Grade, Classroom; teachers: LastName, FirstName, Classroom | Which students in third grade are not taught by teacher COVIN JEROME? Give me the last names of the students.", "sql": "SELECT DISTINCT T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.grade  =  3 AND T2.firstname != \"COVIN\" AND T2.lastname != \"JEROME\"", "example": {"db_id": "student_1", "query": "SELECT DISTINCT T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.grade  =  3 AND T2.firstname != \"COVIN\" AND T2.lastname != \"JEROME\"", "query_toks": ["SELECT", "DISTINCT", "T1.lastname", "FROM", "list", "AS", "T1", "JOIN", "teachers", "AS", "T2", "ON", "T1.classroom", "=", "T2.classroom", "WHERE", "T1.grade", "=", "3", "AND", "T2.firstname", "!", "=", "``", "COVIN", "''", "AND", "T2.lastname", "!", "=", "``", "JEROME", "''"], "query_toks_no_value": ["select", "distinct", "t1", ".", "lastname", "from", "list", "as", "t1", "join", "teachers", "as", "t2", "on", "t1", ".", "classroom", "=", "t2", ".", "classroom", "where", "t1", ".", "grade", "=", "value", "and", "t2", ".", "firstname", "!", "=", "value", "and", "t2", ".", "lastname", "!", "=", "value"], "question": "Which students in third grade are not taught by teacher COVIN JEROME? Give me the last names of the students.", "question_toks": ["Which", "students", "in", "third", "grade", "are", "not", "taught", "by", "teacher", "COVIN", "JEROME", "?", "Give", "me", "the", "last", "names", "of", "the", "students", "."], "guid": 1482}}
{"text": "Addresses: address_id, line_1, line_2, city, zip_postcode, state_province_county, country; People: person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password; Students: student_id, student_details; Courses: course_id, course_name, course_description, other_details; People_Addresses: person_address_id, person_id, address_id, date_from, date_to; Student_Course_Registrations: student_id, course_id, registration_date; Student_Course_Attendance: student_id, course_id, date_of_attendance; Candidates: candidate_id, candidate_details; Candidate_Assessments: candidate_id, qualification, assessment_date, asessment_outcome_code | What are the ids of the students who registered for course 301?", "sql": "SELECT student_id FROM student_course_attendance WHERE course_id  =  301", "example": {"db_id": "student_assessment", "query": "SELECT student_id FROM student_course_attendance WHERE course_id  =  301", "query_toks": ["SELECT", "student_id", "FROM", "student_course_attendance", "WHERE", "course_id", "=", "301"], "query_toks_no_value": ["select", "student_id", "from", "student_course_attendance", "where", "course_id", "=", "value"], "question": "What are the ids of the students who registered for course 301?", "question_toks": ["What", "are", "the", "ids", "of", "the", "students", "who", "registered", "for", "course", "301", "?"], "guid": 1483}}
{"text": "school: School_ID, School, Location, Enrollment, Founded, Denomination, Boys_or_Girls, Day_or_Boarding, Year_Entered_Competition, School_Colors; school_details: School_ID, Nickname, Colors, League, Class, Division; school_performance: School_Id, School_Year, Class_A, Class_AA; player: Player_ID, Player, Team, Age, Position, School_ID | Show the denomination shared by more than one school.", "sql": "SELECT Denomination FROM school GROUP BY Denomination HAVING COUNT(*)  >  1", "example": {"db_id": "school_player", "query": "SELECT Denomination FROM school GROUP BY Denomination HAVING COUNT(*)  >  1", "query_toks": ["SELECT", "Denomination", "FROM", "school", "GROUP", "BY", "Denomination", "HAVING", "COUNT", "(", "*", ")", ">", "1"], "query_toks_no_value": ["select", "denomination", "from", "school", "group", "by", "denomination", "having", "count", "(", "*", ")", ">", "value"], "question": "Show the denomination shared by more than one school.", "question_toks": ["Show", "the", "denomination", "shared", "by", "more", "than", "one", "school", "."], "guid": 1484}}
{"text": "Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Courses: course_id, course_name, course_description, other_details; Departments: department_id, department_name, department_description, other_details; Degree_Programs: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details; Sections: section_id, course_id, section_name, section_description, other_details; Semesters: semester_id, semester_name, semester_description, other_details; Students: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered; Student_Enrolment: student_enrolment_id, degree_program_id, semester_id, student_id, other_details; Student_Enrolment_Courses: student_course_id, course_id, student_enrolment_id; Transcripts: transcript_id, transcript_date, other_details | Which address holds the most number of students currently? List the address id and all lines.", "sql": "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "student_transcripts_tracking", "query": "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.address_id", ",", "T1.line_1", ",", "T1.line_2", "FROM", "Addresses", "AS", "T1", "JOIN", "Students", "AS", "T2", "ON", "T1.address_id", "=", "T2.current_address_id", "GROUP", "BY", "T1.address_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "address_id", ",", "t1", ".", "line_1", ",", "t1", ".", "line_2", "from", "addresses", "as", "t1", "join", "students", "as", "t2", "on", "t1", ".", "address_id", "=", "t2", ".", "current_address_id", "group", "by", "t1", ".", "address_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which address holds the most number of students currently? List the address id and all lines.", "question_toks": ["Which", "address", "holds", "the", "most", "number", "of", "students", "currently", "?", "List", "the", "address", "id", "and", "all", "lines", "."], "guid": 1485}}
{"text": "Activity: actid, activity_name; Participates_in: stuid, actid; Faculty_Participates_in: FacID, actid; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building | Show all the faculty ranks and the number of students advised by each rank.", "sql": "SELECT T1.rank ,  count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.rank", "example": {"db_id": "activity_1", "query": "SELECT T1.rank ,  count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.rank", "query_toks": ["SELECT", "T1.rank", ",", "count", "(", "*", ")", "FROM", "Faculty", "AS", "T1", "JOIN", "Student", "AS", "T2", "ON", "T1.FacID", "=", "T2.advisor", "GROUP", "BY", "T1.rank"], "query_toks_no_value": ["select", "t1", ".", "rank", ",", "count", "(", "*", ")", "from", "faculty", "as", "t1", "join", "student", "as", "t2", "on", "t1", ".", "facid", "=", "t2", ".", "advisor", "group", "by", "t1", ".", "rank"], "question": "Show all the faculty ranks and the number of students advised by each rank.", "question_toks": ["Show", "all", "the", "faculty", "ranks", "and", "the", "number", "of", "students", "advised", "by", "each", "rank", "."], "guid": 1486}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Dorm: dormid, dorm_name, student_capacity, gender; Dorm_amenity: amenid, amenity_name; Has_amenity: dormid, amenid; Lives_in: stuid, dormid, room_number | Find the name and gender type of the dorms whose capacity is greater than 300 or less than 100.", "sql": "SELECT dorm_name ,  gender FROM dorm WHERE student_capacity  >  300 OR student_capacity  <  100", "example": {"db_id": "dorm_1", "query": "SELECT dorm_name ,  gender FROM dorm WHERE student_capacity  >  300 OR student_capacity  <  100", "query_toks": ["SELECT", "dorm_name", ",", "gender", "FROM", "dorm", "WHERE", "student_capacity", ">", "300", "OR", "student_capacity", "<", "100"], "query_toks_no_value": ["select", "dorm_name", ",", "gender", "from", "dorm", "where", "student_capacity", ">", "value", "or", "student_capacity", "<", "value"], "question": "Find the name and gender type of the dorms whose capacity is greater than 300 or less than 100.", "question_toks": ["Find", "the", "name", "and", "gender", "type", "of", "the", "dorms", "whose", "capacity", "is", "greater", "than", "300", "or", "less", "than", "100", "."], "guid": 1487}}
{"text": "course: Course_ID, Staring_Date, Course; teacher: Teacher_ID, Name, Age, Hometown; course_arrange: Course_ID, Teacher_ID, Grade | What is the most commmon hometowns for teachers?", "sql": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1", "example": {"db_id": "course_teach", "query": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "Hometown", "FROM", "teacher", "GROUP", "BY", "Hometown", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "hometown", "from", "teacher", "group", "by", "hometown", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the most commmon hometowns for teachers?", "question_toks": ["What", "is", "the", "most", "commmon", "hometowns", "for", "teachers", "?"], "guid": 1488}}
{"text": "Addresses: address_id, line_1, line_2, city, zip_postcode, state_province_county, country; People: person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password; Students: student_id, student_details; Courses: course_id, course_name, course_description, other_details; People_Addresses: person_address_id, person_id, address_id, date_from, date_to; Student_Course_Registrations: student_id, course_id, registration_date; Student_Course_Attendance: student_id, course_id, date_of_attendance; Candidates: candidate_id, candidate_details; Candidate_Assessments: candidate_id, qualification, assessment_date, asessment_outcome_code | Find distinct cities of address of students?", "sql": "SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id JOIN students AS T3 ON T2.person_id = T3.student_id", "example": {"db_id": "student_assessment", "query": "SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id JOIN students AS T3 ON T2.person_id = T3.student_id", "query_toks": ["SELECT", "DISTINCT", "T1.city", "FROM", "addresses", "AS", "T1", "JOIN", "people_addresses", "AS", "T2", "ON", "T1.address_id", "=", "T2.address_id", "JOIN", "students", "AS", "T3", "ON", "T2.person_id", "=", "T3.student_id"], "query_toks_no_value": ["select", "distinct", "t1", ".", "city", "from", "addresses", "as", "t1", "join", "people_addresses", "as", "t2", "on", "t1", ".", "address_id", "=", "t2", ".", "address_id", "join", "students", "as", "t3", "on", "t2", ".", "person_id", "=", "t3", ".", "student_id"], "question": "Find distinct cities of address of students?", "question_toks": ["Find", "distinct", "cities", "of", "address", "of", "students", "?"], "guid": 1489}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Dorm: dormid, dorm_name, student_capacity, gender; Dorm_amenity: amenid, amenity_name; Has_amenity: dormid, amenid; Lives_in: stuid, dormid, room_number | List the first and last name of students who are not living in the city with code HKG, and sorted the results by their ages.", "sql": "SELECT fname ,  lname FROM student WHERE city_code != 'HKG' ORDER BY age", "example": {"db_id": "dorm_1", "query": "SELECT fname ,  lname FROM student WHERE city_code != 'HKG' ORDER BY age", "query_toks": ["SELECT", "fname", ",", "lname", "FROM", "student", "WHERE", "city_code", "!", "=", "'HKG", "'", "ORDER", "BY", "age"], "query_toks_no_value": ["select", "fname", ",", "lname", "from", "student", "where", "city_code", "!", "=", "value", "order", "by", "age"], "question": "List the first and last name of students who are not living in the city with code HKG, and sorted the results by their ages.", "question_toks": ["List", "the", "first", "and", "last", "name", "of", "students", "who", "are", "not", "living", "in", "the", "city", "with", "code", "HKG", ",", "and", "sorted", "the", "results", "by", "their", "ages", "."], "guid": 1490}}
{"text": "Addresses: address_id, line_1, line_2, city, zip_postcode, state_province_county, country; People: person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password; Students: student_id, student_details; Courses: course_id, course_name, course_description, other_details; People_Addresses: person_address_id, person_id, address_id, date_from, date_to; Student_Course_Registrations: student_id, course_id, registration_date; Student_Course_Attendance: student_id, course_id, date_of_attendance; Candidates: candidate_id, candidate_details; Candidate_Assessments: candidate_id, qualification, assessment_date, asessment_outcome_code | Find id of the candidate who most recently accessed the course?", "sql": "SELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1", "example": {"db_id": "student_assessment", "query": "SELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1", "query_toks": ["SELECT", "candidate_id", "FROM", "candidate_assessments", "ORDER", "BY", "assessment_date", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "candidate_id", "from", "candidate_assessments", "order", "by", "assessment_date", "desc", "limit", "value"], "question": "Find id of the candidate who most recently accessed the course?", "question_toks": ["Find", "id", "of", "the", "candidate", "who", "most", "recently", "accessed", "the", "course", "?"], "guid": 1491}}
{"text": "School: School_id, School_name, Location, Mascot, Enrollment, IHSAA_Class, IHSAA_Football_Class, County; budget: School_id, Year, Budgeted, total_budget_percent_budgeted, Invested, total_budget_percent_invested, Budget_invested_percent; endowment: endowment_id, School_id, donator_name, amount | List the name of the school with the smallest enrollment.", "sql": "SELECT school_name FROM school ORDER BY enrollment LIMIT 1", "example": {"db_id": "school_finance", "query": "SELECT school_name FROM school ORDER BY enrollment LIMIT 1", "query_toks": ["SELECT", "school_name", "FROM", "school", "ORDER", "BY", "enrollment", "LIMIT", "1"], "query_toks_no_value": ["select", "school_name", "from", "school", "order", "by", "enrollment", "limit", "value"], "question": "List the name of the school with the smallest enrollment.", "question_toks": ["List", "the", "name", "of", "the", "school", "with", "the", "smallest", "enrollment", "."], "guid": 1492}}
{"text": "Addresses: address_id, line_1, line_2, city, zip_postcode, state_province_county, country; People: person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password; Students: student_id, student_details; Courses: course_id, course_name, course_description, other_details; People_Addresses: person_address_id, person_id, address_id, date_from, date_to; Student_Course_Registrations: student_id, course_id, registration_date; Student_Course_Attendance: student_id, course_id, date_of_attendance; Candidates: candidate_id, candidate_details; Candidate_Assessments: candidate_id, qualification, assessment_date, asessment_outcome_code | What are the ids of the students who registered for some courses but had the least number of courses for all students?", "sql": "SELECT student_id FROM student_course_registrations GROUP BY student_id ORDER BY count(*) LIMIT 1", "example": {"db_id": "student_assessment", "query": "SELECT student_id FROM student_course_registrations GROUP BY student_id ORDER BY count(*) LIMIT 1", "query_toks": ["SELECT", "student_id", "FROM", "student_course_registrations", "GROUP", "BY", "student_id", "ORDER", "BY", "count", "(", "*", ")", "LIMIT", "1"], "query_toks_no_value": ["select", "student_id", "from", "student_course_registrations", "group", "by", "student_id", "order", "by", "count", "(", "*", ")", "limit", "value"], "question": "What are the ids of the students who registered for some courses but had the least number of courses for all students?", "question_toks": ["What", "are", "the", "ids", "of", "the", "students", "who", "registered", "for", "some", "courses", "but", "had", "the", "least", "number", "of", "courses", "for", "all", "students", "?"], "guid": 1493}}
{"text": "list: LastName, FirstName, Grade, Classroom; teachers: LastName, FirstName, Classroom | How many students does one classroom have?", "sql": "SELECT count(*) ,  classroom FROM list GROUP BY classroom", "example": {"db_id": "student_1", "query": "SELECT count(*) ,  classroom FROM list GROUP BY classroom", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "classroom", "FROM", "list", "GROUP", "BY", "classroom"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "classroom", "from", "list", "group", "by", "classroom"], "question": "How many students does one classroom have?", "question_toks": ["How", "many", "students", "does", "one", "classroom", "have", "?"], "guid": 1494}}
{"text": "Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Courses: course_id, course_name, course_description, other_details; Departments: department_id, department_name, department_description, other_details; Degree_Programs: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details; Sections: section_id, course_id, section_name, section_description, other_details; Semesters: semester_id, semester_name, semester_description, other_details; Students: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered; Student_Enrolment: student_enrolment_id, degree_program_id, semester_id, student_id, other_details; Student_Enrolment_Courses: student_course_id, course_id, student_enrolment_id; Transcripts: transcript_id, transcript_date, other_details | What are the names and descriptions of all the sections?", "sql": "SELECT section_name ,  section_description FROM Sections", "example": {"db_id": "student_transcripts_tracking", "query": "SELECT section_name ,  section_description FROM Sections", "query_toks": ["SELECT", "section_name", ",", "section_description", "FROM", "Sections"], "query_toks_no_value": ["select", "section_name", ",", "section_description", "from", "sections"], "question": "What are the names and descriptions of all the sections?", "question_toks": ["What", "are", "the", "names", "and", "descriptions", "of", "all", "the", "sections", "?"], "guid": 1495}}
{"text": "course: Course_ID, Staring_Date, Course; teacher: Teacher_ID, Name, Age, Hometown; course_arrange: Course_ID, Teacher_ID, Grade | Show the name of the teacher for the math course.", "sql": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\"", "example": {"db_id": "course_teach", "query": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\"", "query_toks": ["SELECT", "T3.Name", "FROM", "course_arrange", "AS", "T1", "JOIN", "course", "AS", "T2", "ON", "T1.Course_ID", "=", "T2.Course_ID", "JOIN", "teacher", "AS", "T3", "ON", "T1.Teacher_ID", "=", "T3.Teacher_ID", "WHERE", "T2.Course", "=", "``", "Math", "''"], "query_toks_no_value": ["select", "t3", ".", "name", "from", "course_arrange", "as", "t1", "join", "course", "as", "t2", "on", "t1", ".", "course_id", "=", "t2", ".", "course_id", "join", "teacher", "as", "t3", "on", "t1", ".", "teacher_id", "=", "t3", ".", "teacher_id", "where", "t2", ".", "course", "=", "value"], "question": "Show the name of the teacher for the math course.", "question_toks": ["Show", "the", "name", "of", "the", "teacher", "for", "the", "math", "course", "."], "guid": 1496}}
{"text": "Activity: actid, activity_name; Participates_in: stuid, actid; Faculty_Participates_in: FacID, actid; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building | Count the number of female Professors we have.", "sql": "SELECT count(*) FROM Faculty WHERE Sex  =  'F' AND Rank  =  \"Professor\"", "example": {"db_id": "activity_1", "query": "SELECT count(*) FROM Faculty WHERE Sex  =  'F' AND Rank  =  \"Professor\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Faculty", "WHERE", "Sex", "=", "'F", "'", "AND", "Rank", "=", "``", "Professor", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "faculty", "where", "sex", "=", "value", "and", "rank", "=", "value"], "question": "Count the number of female Professors we have.", "question_toks": ["Count", "the", "number", "of", "female", "Professors", "we", "have", "."], "guid": 1497}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Dorm: dormid, dorm_name, student_capacity, gender; Dorm_amenity: amenid, amenity_name; Has_amenity: dormid, amenid; Lives_in: stuid, dormid, room_number | What are the amenities in the dorm that a student who has the last name of Smith lives in?", "sql": "SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid JOIN lives_in AS T4 ON T4.dormid  =  T1.dormid JOIN student AS T5 ON T5.stuid  =  T4.stuid WHERE T5.lname  =  'Smith'", "example": {"db_id": "dorm_1", "query": "SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid JOIN lives_in AS T4 ON T4.dormid  =  T1.dormid JOIN student AS T5 ON T5.stuid  =  T4.stuid WHERE T5.lname  =  'Smith'", "query_toks": ["SELECT", "T3.amenity_name", "FROM", "dorm", "AS", "T1", "JOIN", "has_amenity", "AS", "T2", "ON", "T1.dormid", "=", "T2.dormid", "JOIN", "dorm_amenity", "AS", "T3", "ON", "T2.amenid", "=", "T3.amenid", "JOIN", "lives_in", "AS", "T4", "ON", "T4.dormid", "=", "T1.dormid", "JOIN", "student", "AS", "T5", "ON", "T5.stuid", "=", "T4.stuid", "WHERE", "T5.lname", "=", "'Smith", "'"], "query_toks_no_value": ["select", "t3", ".", "amenity_name", "from", "dorm", "as", "t1", "join", "has_amenity", "as", "t2", "on", "t1", ".", "dormid", "=", "t2", ".", "dormid", "join", "dorm_amenity", "as", "t3", "on", "t2", ".", "amenid", "=", "t3", ".", "amenid", "join", "lives_in", "as", "t4", "on", "t4", ".", "dormid", "=", "t1", ".", "dormid", "join", "student", "as", "t5", "on", "t5", ".", "stuid", "=", "t4", ".", "stuid", "where", "t5", ".", "lname", "=", "value"], "question": "What are the amenities in the dorm that a student who has the last name of Smith lives in?", "question_toks": ["What", "are", "the", "amenities", "in", "the", "dorm", "that", "a", "student", "who", "has", "the", "last", "name", "of", "Smith", "lives", "in", "?"], "guid": 1498}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Dorm: dormid, dorm_name, student_capacity, gender; Dorm_amenity: amenid, amenity_name; Has_amenity: dormid, amenid; Lives_in: stuid, dormid, room_number | Find the name of amenities of the dorm where the student with last name Smith is living in.", "sql": "SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid JOIN lives_in AS T4 ON T4.dormid  =  T1.dormid JOIN student AS T5 ON T5.stuid  =  T4.stuid WHERE T5.lname  =  'Smith'", "example": {"db_id": "dorm_1", "query": "SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid JOIN lives_in AS T4 ON T4.dormid  =  T1.dormid JOIN student AS T5 ON T5.stuid  =  T4.stuid WHERE T5.lname  =  'Smith'", "query_toks": ["SELECT", "T3.amenity_name", "FROM", "dorm", "AS", "T1", "JOIN", "has_amenity", "AS", "T2", "ON", "T1.dormid", "=", "T2.dormid", "JOIN", "dorm_amenity", "AS", "T3", "ON", "T2.amenid", "=", "T3.amenid", "JOIN", "lives_in", "AS", "T4", "ON", "T4.dormid", "=", "T1.dormid", "JOIN", "student", "AS", "T5", "ON", "T5.stuid", "=", "T4.stuid", "WHERE", "T5.lname", "=", "'Smith", "'"], "query_toks_no_value": ["select", "t3", ".", "amenity_name", "from", "dorm", "as", "t1", "join", "has_amenity", "as", "t2", "on", "t1", ".", "dormid", "=", "t2", ".", "dormid", "join", "dorm_amenity", "as", "t3", "on", "t2", ".", "amenid", "=", "t3", ".", "amenid", "join", "lives_in", "as", "t4", "on", "t4", ".", "dormid", "=", "t1", ".", "dormid", "join", "student", "as", "t5", "on", "t5", ".", "stuid", "=", "t4", ".", "stuid", "where", "t5", ".", "lname", "=", "value"], "question": "Find the name of amenities of the dorm where the student with last name Smith is living in.", "question_toks": ["Find", "the", "name", "of", "amenities", "of", "the", "dorm", "where", "the", "student", "with", "last", "name", "Smith", "is", "living", "in", "."], "guid": 1499}}
{"text": "Addresses: address_id, line_1, line_2, city, zip_postcode, state_province_county, country; People: person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password; Students: student_id, student_details; Courses: course_id, course_name, course_description, other_details; People_Addresses: person_address_id, person_id, address_id, date_from, date_to; Student_Course_Registrations: student_id, course_id, registration_date; Student_Course_Attendance: student_id, course_id, date_of_attendance; Candidates: candidate_id, candidate_details; Candidate_Assessments: candidate_id, qualification, assessment_date, asessment_outcome_code | What are the ids of the students who registered course statistics by order of registration date?", "sql": "SELECT T2.student_id FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"statistics\" ORDER BY T2.registration_date", "example": {"db_id": "student_assessment", "query": "SELECT T2.student_id FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"statistics\" ORDER BY T2.registration_date", "query_toks": ["SELECT", "T2.student_id", "FROM", "courses", "AS", "T1", "JOIN", "student_course_registrations", "AS", "T2", "ON", "T1.course_id", "=", "T2.course_id", "WHERE", "T1.course_name", "=", "``", "statistics", "''", "ORDER", "BY", "T2.registration_date"], "query_toks_no_value": ["select", "t2", ".", "student_id", "from", "courses", "as", "t1", "join", "student_course_registrations", "as", "t2", "on", "t1", ".", "course_id", "=", "t2", ".", "course_id", "where", "t1", ".", "course_name", "=", "value", "order", "by", "t2", ".", "registration_date"], "question": "What are the ids of the students who registered course statistics by order of registration date?", "question_toks": ["What", "are", "the", "ids", "of", "the", "students", "who", "registered", "course", "statistics", "by", "order", "of", "registration", "date", "?"], "guid": 1500}}
{"text": "Course_Authors_and_Tutors: author_id, author_tutor_ATB, login_name, password, personal_name, middle_name, family_name, gender_mf, address_line_1; Students: student_id, date_of_registration, date_of_latest_logon, login_name, password, personal_name, middle_name, family_name; Subjects: subject_id, subject_name; Courses: course_id, author_id, subject_id, course_name, course_description; Student_Course_Enrolment: registration_id, student_id, course_id, date_of_enrolment, date_of_completion; Student_Tests_Taken: registration_id, date_test_taken, test_result | Find the names and descriptions of courses that belong to the subject named \"Computer Science\".", "sql": "SELECT T1.course_name ,  T1.course_description FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id  =  T2.subject_id WHERE T2.subject_name  =  \"Computer Science\"", "example": {"db_id": "e_learning", "query": "SELECT T1.course_name ,  T1.course_description FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id  =  T2.subject_id WHERE T2.subject_name  =  \"Computer Science\"", "query_toks": ["SELECT", "T1.course_name", ",", "T1.course_description", "FROM", "Courses", "AS", "T1", "JOIN", "Subjects", "AS", "T2", "ON", "T1.subject_id", "=", "T2.subject_id", "WHERE", "T2.subject_name", "=", "``", "Computer", "Science", "''"], "query_toks_no_value": ["select", "t1", ".", "course_name", ",", "t1", ".", "course_description", "from", "courses", "as", "t1", "join", "subjects", "as", "t2", "on", "t1", ".", "subject_id", "=", "t2", ".", "subject_id", "where", "t2", ".", "subject_name", "=", "value"], "question": "Find the names and descriptions of courses that belong to the subject named \"Computer Science\".", "question_toks": ["Find", "the", "names", "and", "descriptions", "of", "courses", "that", "belong", "to", "the", "subject", "named", "``", "Computer", "Science", "''", "."], "guid": 1501}}
{"text": "list: LastName, FirstName, Grade, Classroom; teachers: LastName, FirstName, Classroom | Find the number of students taught by TARRING LEIA.", "sql": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"TARRING\" AND T2.lastname  =  \"LEIA\"", "example": {"db_id": "student_1", "query": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"TARRING\" AND T2.lastname  =  \"LEIA\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "list", "AS", "T1", "JOIN", "teachers", "AS", "T2", "ON", "T1.classroom", "=", "T2.classroom", "WHERE", "T2.firstname", "=", "``", "TARRING", "''", "AND", "T2.lastname", "=", "``", "LEIA", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "list", "as", "t1", "join", "teachers", "as", "t2", "on", "t1", ".", "classroom", "=", "t2", ".", "classroom", "where", "t2", ".", "firstname", "=", "value", "and", "t2", ".", "lastname", "=", "value"], "question": "Find the number of students taught by TARRING LEIA.", "question_toks": ["Find", "the", "number", "of", "students", "taught", "by", "TARRING", "LEIA", "."], "guid": 1502}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Dorm: dormid, dorm_name, student_capacity, gender; Dorm_amenity: amenid, amenity_name; Has_amenity: dormid, amenid; Lives_in: stuid, dormid, room_number | How many female students (sex is F) whose age is below 25?", "sql": "SELECT count(*) FROM student WHERE sex  =  'F' AND age  <  25", "example": {"db_id": "dorm_1", "query": "SELECT count(*) FROM student WHERE sex  =  'F' AND age  <  25", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "student", "WHERE", "sex", "=", "'F", "'", "AND", "age", "<", "25"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "student", "where", "sex", "=", "value", "and", "age", "<", "value"], "question": "How many female students (sex is F) whose age is below 25?", "question_toks": ["How", "many", "female", "students", "(", "sex", "is", "F", ")", "whose", "age", "is", "below", "25", "?"], "guid": 1503}}
{"text": "list: LastName, FirstName, Grade, Classroom; teachers: LastName, FirstName, Classroom | What are the first names of students in room 108?", "sql": "SELECT firstname FROM list WHERE classroom  =  108", "example": {"db_id": "student_1", "query": "SELECT firstname FROM list WHERE classroom  =  108", "query_toks": ["SELECT", "firstname", "FROM", "list", "WHERE", "classroom", "=", "108"], "query_toks_no_value": ["select", "firstname", "from", "list", "where", "classroom", "=", "value"], "question": "What are the first names of students in room 108?", "question_toks": ["What", "are", "the", "first", "names", "of", "students", "in", "room", "108", "?"], "guid": 1504}}
{"text": "school: School_ID, School, Location, Enrollment, Founded, Denomination, Boys_or_Girls, Day_or_Boarding, Year_Entered_Competition, School_Colors; school_details: School_ID, Nickname, Colors, League, Class, Division; school_performance: School_Id, School_Year, Class_A, Class_AA; player: Player_ID, Player, Team, Age, Position, School_ID | List the locations of schools in descending order of founded year.", "sql": "SELECT LOCATION FROM school ORDER BY Founded DESC", "example": {"db_id": "school_player", "query": "SELECT LOCATION FROM school ORDER BY Founded DESC", "query_toks": ["SELECT", "LOCATION", "FROM", "school", "ORDER", "BY", "Founded", "DESC"], "query_toks_no_value": ["select", "location", "from", "school", "order", "by", "founded", "desc"], "question": "List the locations of schools in descending order of founded year.", "question_toks": ["List", "the", "locations", "of", "schools", "in", "descending", "order", "of", "founded", "year", "."], "guid": 1505}}
{"text": "Course_Authors_and_Tutors: author_id, author_tutor_ATB, login_name, password, personal_name, middle_name, family_name, gender_mf, address_line_1; Students: student_id, date_of_registration, date_of_latest_logon, login_name, password, personal_name, middle_name, family_name; Subjects: subject_id, subject_name; Courses: course_id, author_id, subject_id, course_name, course_description; Student_Course_Enrolment: registration_id, student_id, course_id, date_of_enrolment, date_of_completion; Student_Tests_Taken: registration_id, date_test_taken, test_result | List all the login names and family names of course author and tutors.", "sql": "SELECT login_name ,  family_name FROM Course_Authors_and_Tutors", "example": {"db_id": "e_learning", "query": "SELECT login_name ,  family_name FROM Course_Authors_and_Tutors", "query_toks": ["SELECT", "login_name", ",", "family_name", "FROM", "Course_Authors_and_Tutors"], "query_toks_no_value": ["select", "login_name", ",", "family_name", "from", "course_authors_and_tutors"], "question": "List all the login names and family names of course author and tutors.", "question_toks": ["List", "all", "the", "login", "names", "and", "family", "names", "of", "course", "author", "and", "tutors", "."], "guid": 1506}}
{"text": "list: LastName, FirstName, Grade, Classroom; teachers: LastName, FirstName, Classroom | Which teacher teaches the most students? Give me the first name and last name of the teacher.", "sql": "SELECT T2.firstname ,  T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom GROUP BY T2.firstname ,  T2.lastname ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "student_1", "query": "SELECT T2.firstname ,  T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom GROUP BY T2.firstname ,  T2.lastname ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T2.firstname", ",", "T2.lastname", "FROM", "list", "AS", "T1", "JOIN", "teachers", "AS", "T2", "ON", "T1.classroom", "=", "T2.classroom", "GROUP", "BY", "T2.firstname", ",", "T2.lastname", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "firstname", ",", "t2", ".", "lastname", "from", "list", "as", "t1", "join", "teachers", "as", "t2", "on", "t1", ".", "classroom", "=", "t2", ".", "classroom", "group", "by", "t2", ".", "firstname", ",", "t2", ".", "lastname", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which teacher teaches the most students? Give me the first name and last name of the teacher.", "question_toks": ["Which", "teacher", "teaches", "the", "most", "students", "?", "Give", "me", "the", "first", "name", "and", "last", "name", "of", "the", "teacher", "."], "guid": 1507}}
{"text": "Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Courses: course_id, course_name, course_description, other_details; Departments: department_id, department_name, department_description, other_details; Degree_Programs: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details; Sections: section_id, course_id, section_name, section_description, other_details; Semesters: semester_id, semester_name, semester_description, other_details; Students: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered; Student_Enrolment: student_enrolment_id, degree_program_id, semester_id, student_id, other_details; Student_Enrolment_Courses: student_course_id, course_id, student_enrolment_id; Transcripts: transcript_id, transcript_date, other_details | How many transcripts are released?", "sql": "SELECT count(*) FROM Transcripts", "example": {"db_id": "student_transcripts_tracking", "query": "SELECT count(*) FROM Transcripts", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Transcripts"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "transcripts"], "question": "How many transcripts are released?", "question_toks": ["How", "many", "transcripts", "are", "released", "?"], "guid": 1508}}
{"text": "School: School_id, School_name, Location, Mascot, Enrollment, IHSAA_Class, IHSAA_Football_Class, County; budget: School_id, Year, Budgeted, total_budget_percent_budgeted, Invested, total_budget_percent_invested, Budget_invested_percent; endowment: endowment_id, School_id, donator_name, amount | Show all school names in alphabetical order.", "sql": "SELECT school_name FROM school ORDER BY school_name", "example": {"db_id": "school_finance", "query": "SELECT school_name FROM school ORDER BY school_name", "query_toks": ["SELECT", "school_name", "FROM", "school", "ORDER", "BY", "school_name"], "query_toks_no_value": ["select", "school_name", "from", "school", "order", "by", "school_name"], "question": "Show all school names in alphabetical order.", "question_toks": ["Show", "all", "school", "names", "in", "alphabetical", "order", "."], "guid": 1509}}
{"text": "School: School_id, School_name, Location, Mascot, Enrollment, IHSAA_Class, IHSAA_Football_Class, County; budget: School_id, Year, Budgeted, total_budget_percent_budgeted, Invested, total_budget_percent_invested, Budget_invested_percent; endowment: endowment_id, School_id, donator_name, amount | List all the names of schools with an endowment amount smaller than or equal to 10.", "sql": "SELECT T2.school_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id GROUP BY T1.school_id HAVING sum(T1.amount)  <=  10", "example": {"db_id": "school_finance", "query": "SELECT T2.school_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id GROUP BY T1.school_id HAVING sum(T1.amount)  <=  10", "query_toks": ["SELECT", "T2.school_name", "FROM", "endowment", "AS", "T1", "JOIN", "school", "AS", "T2", "ON", "T1.school_id", "=", "T2.school_id", "GROUP", "BY", "T1.school_id", "HAVING", "sum", "(", "T1.amount", ")", "<", "=", "10"], "query_toks_no_value": ["select", "t2", ".", "school_name", "from", "endowment", "as", "t1", "join", "school", "as", "t2", "on", "t1", ".", "school_id", "=", "t2", ".", "school_id", "group", "by", "t1", ".", "school_id", "having", "sum", "(", "t1", ".", "amount", ")", "<", "=", "value"], "question": "List all the names of schools with an endowment amount smaller than or equal to 10.", "question_toks": ["List", "all", "the", "names", "of", "schools", "with", "an", "endowment", "amount", "smaller", "than", "or", "equal", "to", "10", "."], "guid": 1510}}
{"text": "Course_Authors_and_Tutors: author_id, author_tutor_ATB, login_name, password, personal_name, middle_name, family_name, gender_mf, address_line_1; Students: student_id, date_of_registration, date_of_latest_logon, login_name, password, personal_name, middle_name, family_name; Subjects: subject_id, subject_name; Courses: course_id, author_id, subject_id, course_name, course_description; Student_Course_Enrolment: registration_id, student_id, course_id, date_of_enrolment, date_of_completion; Student_Tests_Taken: registration_id, date_test_taken, test_result | What are the login names used both by some course authors and some students?", "sql": "SELECT login_name FROM Course_Authors_and_Tutors INTERSECT SELECT login_name FROM Students", "example": {"db_id": "e_learning", "query": "SELECT login_name FROM Course_Authors_and_Tutors INTERSECT SELECT login_name FROM Students", "query_toks": ["SELECT", "login_name", "FROM", "Course_Authors_and_Tutors", "INTERSECT", "SELECT", "login_name", "FROM", "Students"], "query_toks_no_value": ["select", "login_name", "from", "course_authors_and_tutors", "intersect", "select", "login_name", "from", "students"], "question": "What are the login names used both by some course authors and some students?", "question_toks": ["What", "are", "the", "login", "names", "used", "both", "by", "some", "course", "authors", "and", "some", "students", "?"], "guid": 1511}}
{"text": "Activity: actid, activity_name; Participates_in: stuid, actid; Faculty_Participates_in: FacID, actid; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building | For each faculty rank, show the number of faculty members who have it.", "sql": "SELECT rank ,  count(*) FROM Faculty GROUP BY rank", "example": {"db_id": "activity_1", "query": "SELECT rank ,  count(*) FROM Faculty GROUP BY rank", "query_toks": ["SELECT", "rank", ",", "count", "(", "*", ")", "FROM", "Faculty", "GROUP", "BY", "rank"], "query_toks_no_value": ["select", "rank", ",", "count", "(", "*", ")", "from", "faculty", "group", "by", "rank"], "question": "For each faculty rank, show the number of faculty members who have it.", "question_toks": ["For", "each", "faculty", "rank", ",", "show", "the", "number", "of", "faculty", "members", "who", "have", "it", "."], "guid": 1512}}
{"text": "Course_Authors_and_Tutors: author_id, author_tutor_ATB, login_name, password, personal_name, middle_name, family_name, gender_mf, address_line_1; Students: student_id, date_of_registration, date_of_latest_logon, login_name, password, personal_name, middle_name, family_name; Subjects: subject_id, subject_name; Courses: course_id, author_id, subject_id, course_name, course_description; Student_Course_Enrolment: registration_id, student_id, course_id, date_of_enrolment, date_of_completion; Student_Tests_Taken: registration_id, date_test_taken, test_result | How many students have personal names that contain the word \"son\"?", "sql": "SELECT COUNT(*) FROM Students WHERE personal_name LIKE \"%son%\"", "example": {"db_id": "e_learning", "query": "SELECT COUNT(*) FROM Students WHERE personal_name LIKE \"%son%\"", "query_toks": ["SELECT", "COUNT", "(", "*", ")", "FROM", "Students", "WHERE", "personal_name", "LIKE", "``", "%", "son", "%", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "students", "where", "personal_name", "like", "value"], "question": "How many students have personal names that contain the word \"son\"?", "question_toks": ["How", "many", "students", "have", "personal", "names", "that", "contain", "the", "word", "``", "son", "''", "?"], "guid": 1513}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Dorm: dormid, dorm_name, student_capacity, gender; Dorm_amenity: amenid, amenity_name; Has_amenity: dormid, amenid; Lives_in: stuid, dormid, room_number | What are the names and types of the dorms that have a capacity greater than 300 or less than 100?", "sql": "SELECT dorm_name ,  gender FROM dorm WHERE student_capacity  >  300 OR student_capacity  <  100", "example": {"db_id": "dorm_1", "query": "SELECT dorm_name ,  gender FROM dorm WHERE student_capacity  >  300 OR student_capacity  <  100", "query_toks": ["SELECT", "dorm_name", ",", "gender", "FROM", "dorm", "WHERE", "student_capacity", ">", "300", "OR", "student_capacity", "<", "100"], "query_toks_no_value": ["select", "dorm_name", ",", "gender", "from", "dorm", "where", "student_capacity", ">", "value", "or", "student_capacity", "<", "value"], "question": "What are the names and types of the dorms that have a capacity greater than 300 or less than 100?", "question_toks": ["What", "are", "the", "names", "and", "types", "of", "the", "dorms", "that", "have", "a", "capacity", "greater", "than", "300", "or", "less", "than", "100", "?"], "guid": 1514}}
{"text": "driver: Driver_ID, Name, Party, Home_city, Age; school: School_ID, Grade, School, Location, Type; school_bus: School_ID, Driver_ID, Years_Working, If_full_time | Show the name, home city, and age for all drivers.", "sql": "SELECT name ,  home_city ,  age FROM driver", "example": {"db_id": "school_bus", "query": "SELECT name ,  home_city ,  age FROM driver", "query_toks": ["SELECT", "name", ",", "home_city", ",", "age", "FROM", "driver"], "query_toks_no_value": ["select", "name", ",", "home_city", ",", "age", "from", "driver"], "question": "Show the name, home city, and age for all drivers.", "question_toks": ["Show", "the", "name", ",", "home", "city", ",", "and", "age", "for", "all", "drivers", "."], "guid": 1515}}
{"text": "Course_Authors_and_Tutors: author_id, author_tutor_ATB, login_name, password, personal_name, middle_name, family_name, gender_mf, address_line_1; Students: student_id, date_of_registration, date_of_latest_logon, login_name, password, personal_name, middle_name, family_name; Subjects: subject_id, subject_name; Courses: course_id, author_id, subject_id, course_name, course_description; Student_Course_Enrolment: registration_id, student_id, course_id, date_of_enrolment, date_of_completion; Student_Tests_Taken: registration_id, date_test_taken, test_result | List the dates of enrollment and completion of the student with personal name \"Karson\".", "sql": "SELECT T1.date_of_enrolment ,  T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.personal_name  =  \"Karson\"", "example": {"db_id": "e_learning", "query": "SELECT T1.date_of_enrolment ,  T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.personal_name  =  \"Karson\"", "query_toks": ["SELECT", "T1.date_of_enrolment", ",", "T1.date_of_completion", "FROM", "Student_Course_Enrolment", "AS", "T1", "JOIN", "Students", "AS", "T2", "ON", "T1.student_id", "=", "T2.student_id", "WHERE", "T2.personal_name", "=", "``", "Karson", "''"], "query_toks_no_value": ["select", "t1", ".", "date_of_enrolment", ",", "t1", ".", "date_of_completion", "from", "student_course_enrolment", "as", "t1", "join", "students", "as", "t2", "on", "t1", ".", "student_id", "=", "t2", ".", "student_id", "where", "t2", ".", "personal_name", "=", "value"], "question": "List the dates of enrollment and completion of the student with personal name \"Karson\".", "question_toks": ["List", "the", "dates", "of", "enrollment", "and", "completion", "of", "the", "student", "with", "personal", "name", "``", "Karson", "''", "."], "guid": 1516}}
{"text": "Activity: actid, activity_name; Participates_in: stuid, actid; Faculty_Participates_in: FacID, actid; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building | What are the first names of the professors who do not play Canoeing or Kayaking as activities?", "sql": "SELECT lname FROM faculty WHERE rank  =  'Professor' EXCEPT SELECT DISTINCT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' OR T3.activity_name  =  'Kayaking'", "example": {"db_id": "activity_1", "query": "SELECT lname FROM faculty WHERE rank  =  'Professor' EXCEPT SELECT DISTINCT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' OR T3.activity_name  =  'Kayaking'", "query_toks": ["SELECT", "lname", "FROM", "faculty", "WHERE", "rank", "=", "'Professor", "'", "EXCEPT", "SELECT", "DISTINCT", "T1.lname", "FROM", "Faculty", "AS", "T1", "JOIN", "Faculty_participates_in", "AS", "T2", "ON", "T1.facID", "=", "T2.facID", "JOIN", "activity", "AS", "T3", "ON", "T2.actid", "=", "T2.actid", "WHERE", "T3.activity_name", "=", "'Canoeing", "'", "OR", "T3.activity_name", "=", "'Kayaking", "'"], "query_toks_no_value": ["select", "lname", "from", "faculty", "where", "rank", "=", "value", "except", "select", "distinct", "t1", ".", "lname", "from", "faculty", "as", "t1", "join", "faculty_participates_in", "as", "t2", "on", "t1", ".", "facid", "=", "t2", ".", "facid", "join", "activity", "as", "t3", "on", "t2", ".", "actid", "=", "t2", ".", "actid", "where", "t3", ".", "activity_name", "=", "value", "or", "t3", ".", "activity_name", "=", "value"], "question": "What are the first names of the professors who do not play Canoeing or Kayaking as activities?", "question_toks": ["What", "are", "the", "first", "names", "of", "the", "professors", "who", "do", "not", "play", "Canoeing", "or", "Kayaking", "as", "activities", "?"], "guid": 1517}}
{"text": "Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Courses: course_id, course_name, course_description, other_details; Departments: department_id, department_name, department_description, other_details; Degree_Programs: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details; Sections: section_id, course_id, section_name, section_description, other_details; Semesters: semester_id, semester_name, semester_description, other_details; Students: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered; Student_Enrolment: student_enrolment_id, degree_program_id, semester_id, student_id, other_details; Student_Enrolment_Courses: student_course_id, course_id, student_enrolment_id; Transcripts: transcript_id, transcript_date, other_details | What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id?", "sql": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "student_transcripts_tracking", "query": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "student_course_id", "FROM", "Transcript_Contents", "GROUP", "BY", "student_course_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "student_course_id", "from", "transcript_contents", "group", "by", "student_course_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id?", "question_toks": ["What", "is", "the", "maximum", "number", "of", "times", "that", "a", "course", "shows", "up", "in", "different", "transcripts", "and", "what", "is", "that", "course", "'s", "enrollment", "id", "?"], "guid": 1518}}
{"text": "list: LastName, FirstName, Grade, Classroom; teachers: LastName, FirstName, Classroom | What are the first names of the teachers who teach grade 1?", "sql": "SELECT DISTINCT T2.firstname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE grade  =  1", "example": {"db_id": "student_1", "query": "SELECT DISTINCT T2.firstname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE grade  =  1", "query_toks": ["SELECT", "DISTINCT", "T2.firstname", "FROM", "list", "AS", "T1", "JOIN", "teachers", "AS", "T2", "ON", "T1.classroom", "=", "T2.classroom", "WHERE", "grade", "=", "1"], "query_toks_no_value": ["select", "distinct", "t2", ".", "firstname", "from", "list", "as", "t1", "join", "teachers", "as", "t2", "on", "t1", ".", "classroom", "=", "t2", ".", "classroom", "where", "grade", "=", "value"], "question": "What are the first names of the teachers who teach grade 1?", "question_toks": ["What", "are", "the", "first", "names", "of", "the", "teachers", "who", "teach", "grade", "1", "?"], "guid": 1519}}
{"text": "Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Courses: course_id, course_name, course_description, other_details; Departments: department_id, department_name, department_description, other_details; Degree_Programs: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details; Sections: section_id, course_id, section_name, section_description, other_details; Semesters: semester_id, semester_name, semester_description, other_details; Students: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered; Student_Enrolment: student_enrolment_id, degree_program_id, semester_id, student_id, other_details; Student_Enrolment_Courses: student_course_id, course_id, student_enrolment_id; Transcripts: transcript_id, transcript_date, other_details | What is the name and id of the department with the most number of degrees ?", "sql": "select t2.department_name ,  t1.department_id from degree_programs as t1 join departments as t2 on t1.department_id  =  t2.department_id group by t1.department_id order by count(*) desc limit 1", "example": {"db_id": "student_transcripts_tracking", "query": "select t2.department_name ,  t1.department_id from degree_programs as t1 join departments as t2 on t1.department_id  =  t2.department_id group by t1.department_id order by count(*) desc limit 1", "query_toks": ["select", "t2.department_name", ",", "t1.department_id", "from", "degree_programs", "as", "t1", "join", "departments", "as", "t2", "on", "t1.department_id", "=", "t2.department_id", "group", "by", "t1.department_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1"], "query_toks_no_value": ["select", "t2", ".", "department_name", ",", "t1", ".", "department_id", "from", "degree_programs", "as", "t1", "join", "departments", "as", "t2", "on", "t1", ".", "department_id", "=", "t2", ".", "department_id", "group", "by", "t1", ".", "department_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the name and id of the department with the most number of degrees ?", "question_toks": ["What", "is", "the", "name", "and", "id", "of", "the", "department", "with", "the", "most", "number", "of", "degrees", "?"], "guid": 1520}}
{"text": "Activity: actid, activity_name; Participates_in: stuid, actid; Faculty_Participates_in: FacID, actid; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building | Show the phone, room, and building for the faculty named Jerry Prince.", "sql": "SELECT phone ,  room ,  building FROM Faculty WHERE Fname  =  \"Jerry\" AND Lname  =  \"Prince\"", "example": {"db_id": "activity_1", "query": "SELECT phone ,  room ,  building FROM Faculty WHERE Fname  =  \"Jerry\" AND Lname  =  \"Prince\"", "query_toks": ["SELECT", "phone", ",", "room", ",", "building", "FROM", "Faculty", "WHERE", "Fname", "=", "``", "Jerry", "''", "AND", "Lname", "=", "``", "Prince", "''"], "query_toks_no_value": ["select", "phone", ",", "room", ",", "building", "from", "faculty", "where", "fname", "=", "value", "and", "lname", "=", "value"], "question": "Show the phone, room, and building for the faculty named Jerry Prince.", "question_toks": ["Show", "the", "phone", ",", "room", ",", "and", "building", "for", "the", "faculty", "named", "Jerry", "Prince", "."], "guid": 1521}}
{"text": "course: Course_ID, Staring_Date, Course; teacher: Teacher_ID, Name, Age, Hometown; course_arrange: Course_ID, Teacher_ID, Grade | Show the hometowns shared by at least two teachers.", "sql": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2", "example": {"db_id": "course_teach", "query": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2", "query_toks": ["SELECT", "Hometown", "FROM", "teacher", "GROUP", "BY", "Hometown", "HAVING", "COUNT", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "hometown", "from", "teacher", "group", "by", "hometown", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "Show the hometowns shared by at least two teachers.", "question_toks": ["Show", "the", "hometowns", "shared", "by", "at", "least", "two", "teachers", "."], "guid": 1522}}
{"text": "driver: Driver_ID, Name, Party, Home_city, Age; school: School_ID, Grade, School, Location, Type; school_bus: School_ID, Driver_ID, Years_Working, If_full_time | Show the name of drivers in descending order of age.", "sql": "SELECT name FROM driver ORDER BY age DESC", "example": {"db_id": "school_bus", "query": "SELECT name FROM driver ORDER BY age DESC", "query_toks": ["SELECT", "name", "FROM", "driver", "ORDER", "BY", "age", "DESC"], "query_toks_no_value": ["select", "name", "from", "driver", "order", "by", "age", "desc"], "question": "Show the name of drivers in descending order of age.", "question_toks": ["Show", "the", "name", "of", "drivers", "in", "descending", "order", "of", "age", "."], "guid": 1523}}
{"text": "Course_Authors_and_Tutors: author_id, author_tutor_ATB, login_name, password, personal_name, middle_name, family_name, gender_mf, address_line_1; Students: student_id, date_of_registration, date_of_latest_logon, login_name, password, personal_name, middle_name, family_name; Subjects: subject_id, subject_name; Courses: course_id, author_id, subject_id, course_name, course_description; Student_Course_Enrolment: registration_id, student_id, course_id, date_of_enrolment, date_of_completion; Student_Tests_Taken: registration_id, date_test_taken, test_result | What are the personal name, family name, and author ID of the course author who teaches the most courses?", "sql": "SELECT T1.personal_name ,  T1.family_name ,  T2.author_id FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id GROUP BY T2.author_id ORDER BY COUNT(*) DESC LIMIT 1", "example": {"db_id": "e_learning", "query": "SELECT T1.personal_name ,  T1.family_name ,  T2.author_id FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id GROUP BY T2.author_id ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.personal_name", ",", "T1.family_name", ",", "T2.author_id", "FROM", "Course_Authors_and_Tutors", "AS", "T1", "JOIN", "Courses", "AS", "T2", "ON", "T1.author_id", "=", "T2.author_id", "GROUP", "BY", "T2.author_id", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "personal_name", ",", "t1", ".", "family_name", ",", "t2", ".", "author_id", "from", "course_authors_and_tutors", "as", "t1", "join", "courses", "as", "t2", "on", "t1", ".", "author_id", "=", "t2", ".", "author_id", "group", "by", "t2", ".", "author_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What are the personal name, family name, and author ID of the course author who teaches the most courses?", "question_toks": ["What", "are", "the", "personal", "name", ",", "family", "name", ",", "and", "author", "ID", "of", "the", "course", "author", "who", "teaches", "the", "most", "courses", "?"], "guid": 1524}}
{"text": "Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Courses: course_id, course_name, course_description, other_details; Departments: department_id, department_name, department_description, other_details; Degree_Programs: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details; Sections: section_id, course_id, section_name, section_description, other_details; Semesters: semester_id, semester_name, semester_description, other_details; Students: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered; Student_Enrolment: student_enrolment_id, degree_program_id, semester_id, student_id, other_details; Student_Enrolment_Courses: student_course_id, course_id, student_enrolment_id; Transcripts: transcript_id, transcript_date, other_details | How many departments offer any degree?", "sql": "SELECT count(DISTINCT department_id) FROM Degree_Programs", "example": {"db_id": "student_transcripts_tracking", "query": "SELECT count(DISTINCT department_id) FROM Degree_Programs", "query_toks": ["SELECT", "count", "(", "DISTINCT", "department_id", ")", "FROM", "Degree_Programs"], "query_toks_no_value": ["select", "count", "(", "distinct", "department_id", ")", "from", "degree_programs"], "question": "How many departments offer any degree?", "question_toks": ["How", "many", "departments", "offer", "any", "degree", "?"], "guid": 1525}}
{"text": "Course_Authors_and_Tutors: author_id, author_tutor_ATB, login_name, password, personal_name, middle_name, family_name, gender_mf, address_line_1; Students: student_id, date_of_registration, date_of_latest_logon, login_name, password, personal_name, middle_name, family_name; Subjects: subject_id, subject_name; Courses: course_id, author_id, subject_id, course_name, course_description; Student_Course_Enrolment: registration_id, student_id, course_id, date_of_enrolment, date_of_completion; Student_Tests_Taken: registration_id, date_test_taken, test_result | Which student are enrolled in at least two courses? Give me the student ID and personal name.", "sql": "SELECT T1.student_id ,  T2.personal_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING COUNT(*)  >=  2", "example": {"db_id": "e_learning", "query": "SELECT T1.student_id ,  T2.personal_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING COUNT(*)  >=  2", "query_toks": ["SELECT", "T1.student_id", ",", "T2.personal_name", "FROM", "Student_Course_Enrolment", "AS", "T1", "JOIN", "Students", "AS", "T2", "ON", "T1.student_id", "=", "T2.student_id", "GROUP", "BY", "T1.student_id", "HAVING", "COUNT", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "t1", ".", "student_id", ",", "t2", ".", "personal_name", "from", "student_course_enrolment", "as", "t1", "join", "students", "as", "t2", "on", "t1", ".", "student_id", "=", "t2", ".", "student_id", "group", "by", "t1", ".", "student_id", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "Which student are enrolled in at least two courses? Give me the student ID and personal name.", "question_toks": ["Which", "student", "are", "enrolled", "in", "at", "least", "two", "courses", "?", "Give", "me", "the", "student", "ID", "and", "personal", "name", "."], "guid": 1526}}
{"text": "Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Courses: course_id, course_name, course_description, other_details; Departments: department_id, department_name, department_description, other_details; Degree_Programs: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details; Sections: section_id, course_id, section_name, section_description, other_details; Semesters: semester_id, semester_name, semester_description, other_details; Students: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered; Student_Enrolment: student_enrolment_id, degree_program_id, semester_id, student_id, other_details; Student_Enrolment_Courses: student_course_id, course_id, student_enrolment_id; Transcripts: transcript_id, transcript_date, other_details | How many different departments offer degrees?", "sql": "SELECT count(DISTINCT department_id) FROM Degree_Programs", "example": {"db_id": "student_transcripts_tracking", "query": "SELECT count(DISTINCT department_id) FROM Degree_Programs", "query_toks": ["SELECT", "count", "(", "DISTINCT", "department_id", ")", "FROM", "Degree_Programs"], "query_toks_no_value": ["select", "count", "(", "distinct", "department_id", ")", "from", "degree_programs"], "question": "How many different departments offer degrees?", "question_toks": ["How", "many", "different", "departments", "offer", "degrees", "?"], "guid": 1527}}
{"text": "course: Course_ID, Staring_Date, Course; teacher: Teacher_ID, Name, Age, Hometown; course_arrange: Course_ID, Teacher_ID, Grade | List the names of teachers who have not been arranged to teach courses.", "sql": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)", "example": {"db_id": "course_teach", "query": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)", "query_toks": ["SELECT", "Name", "FROM", "teacher", "WHERE", "Teacher_id", "NOT", "IN", "(", "SELECT", "Teacher_id", "FROM", "course_arrange", ")"], "query_toks_no_value": ["select", "name", "from", "teacher", "where", "teacher_id", "not", "in", "(", "select", "teacher_id", "from", "course_arrange", ")"], "question": "List the names of teachers who have not been arranged to teach courses.", "question_toks": ["List", "the", "names", "of", "teachers", "who", "have", "not", "been", "arranged", "to", "teach", "courses", "."], "guid": 1528}}
{"text": "Addresses: address_id, line_1, line_2, city, zip_postcode, state_province_county, country; People: person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password; Students: student_id, student_details; Courses: course_id, course_name, course_description, other_details; People_Addresses: person_address_id, person_id, address_id, date_from, date_to; Student_Course_Registrations: student_id, course_id, registration_date; Student_Course_Attendance: student_id, course_id, date_of_attendance; Candidates: candidate_id, candidate_details; Candidate_Assessments: candidate_id, qualification, assessment_date, asessment_outcome_code | What are the id of students who registered course 301?", "sql": "SELECT student_id FROM student_course_attendance WHERE course_id  =  301", "example": {"db_id": "student_assessment", "query": "SELECT student_id FROM student_course_attendance WHERE course_id  =  301", "query_toks": ["SELECT", "student_id", "FROM", "student_course_attendance", "WHERE", "course_id", "=", "301"], "query_toks_no_value": ["select", "student_id", "from", "student_course_attendance", "where", "course_id", "=", "value"], "question": "What are the id of students who registered course 301?", "question_toks": ["What", "are", "the", "id", "of", "students", "who", "registered", "course", "301", "?"], "guid": 1529}}
{"text": "Activity: actid, activity_name; Participates_in: stuid, actid; Faculty_Participates_in: FacID, actid; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building | Show ids for all the male faculty.", "sql": "SELECT FacID FROM Faculty WHERE Sex  =  'M'", "example": {"db_id": "activity_1", "query": "SELECT FacID FROM Faculty WHERE Sex  =  'M'", "query_toks": ["SELECT", "FacID", "FROM", "Faculty", "WHERE", "Sex", "=", "'M", "'"], "query_toks_no_value": ["select", "facid", "from", "faculty", "where", "sex", "=", "value"], "question": "Show ids for all the male faculty.", "question_toks": ["Show", "ids", "for", "all", "the", "male", "faculty", "."], "guid": 1530}}
{"text": "Course_Authors_and_Tutors: author_id, author_tutor_ATB, login_name, password, personal_name, middle_name, family_name, gender_mf, address_line_1; Students: student_id, date_of_registration, date_of_latest_logon, login_name, password, personal_name, middle_name, family_name; Subjects: subject_id, subject_name; Courses: course_id, author_id, subject_id, course_name, course_description; Student_Course_Enrolment: registration_id, student_id, course_id, date_of_enrolment, date_of_completion; Student_Tests_Taken: registration_id, date_test_taken, test_result | What are the login names of the students with family name \"Ward\"?", "sql": "SELECT login_name FROM Students WHERE family_name  =  \"Ward\"", "example": {"db_id": "e_learning", "query": "SELECT login_name FROM Students WHERE family_name  =  \"Ward\"", "query_toks": ["SELECT", "login_name", "FROM", "Students", "WHERE", "family_name", "=", "``", "Ward", "''"], "query_toks_no_value": ["select", "login_name", "from", "students", "where", "family_name", "=", "value"], "question": "What are the login names of the students with family name \"Ward\"?", "question_toks": ["What", "are", "the", "login", "names", "of", "the", "students", "with", "family", "name", "``", "Ward", "''", "?"], "guid": 1531}}
{"text": "School: School_id, School_name, Location, Mascot, Enrollment, IHSAA_Class, IHSAA_Football_Class, County; budget: School_id, Year, Budgeted, total_budget_percent_budgeted, Invested, total_budget_percent_invested, Budget_invested_percent; endowment: endowment_id, School_id, donator_name, amount | Show the names of all the donors except those whose donation amount less than 9.", "sql": "SELECT donator_name FROM endowment EXCEPT SELECT donator_name FROM endowment WHERE amount  <  9", "example": {"db_id": "school_finance", "query": "SELECT donator_name FROM endowment EXCEPT SELECT donator_name FROM endowment WHERE amount  <  9", "query_toks": ["SELECT", "donator_name", "FROM", "endowment", "EXCEPT", "SELECT", "donator_name", "FROM", "endowment", "WHERE", "amount", "<", "9"], "query_toks_no_value": ["select", "donator_name", "from", "endowment", "except", "select", "donator_name", "from", "endowment", "where", "amount", "<", "value"], "question": "Show the names of all the donors except those whose donation amount less than 9.", "question_toks": ["Show", "the", "names", "of", "all", "the", "donors", "except", "those", "whose", "donation", "amount", "less", "than", "9", "."], "guid": 1532}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Dorm: dormid, dorm_name, student_capacity, gender; Dorm_amenity: amenid, amenity_name; Has_amenity: dormid, amenid; Lives_in: stuid, dormid, room_number | Find the number of distinct gender for dorms.", "sql": "SELECT count(DISTINCT gender) FROM dorm", "example": {"db_id": "dorm_1", "query": "SELECT count(DISTINCT gender) FROM dorm", "query_toks": ["SELECT", "count", "(", "DISTINCT", "gender", ")", "FROM", "dorm"], "query_toks_no_value": ["select", "count", "(", "distinct", "gender", ")", "from", "dorm"], "question": "Find the number of distinct gender for dorms.", "question_toks": ["Find", "the", "number", "of", "distinct", "gender", "for", "dorms", "."], "guid": 1533}}
{"text": "Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Courses: course_id, course_name, course_description, other_details; Departments: department_id, department_name, department_description, other_details; Degree_Programs: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details; Sections: section_id, course_id, section_name, section_description, other_details; Semesters: semester_id, semester_name, semester_description, other_details; Students: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered; Student_Enrolment: student_enrolment_id, degree_program_id, semester_id, student_id, other_details; Student_Enrolment_Courses: student_course_id, course_id, student_enrolment_id; Transcripts: transcript_id, transcript_date, other_details | What is the department description for the one whose name has the word computer?", "sql": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'", "example": {"db_id": "student_transcripts_tracking", "query": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'", "query_toks": ["SELECT", "department_description", "FROM", "Departments", "WHERE", "department_name", "LIKE", "'", "%", "computer", "%", "'"], "query_toks_no_value": ["select", "department_description", "from", "departments", "where", "department_name", "like", "value"], "question": "What is the department description for the one whose name has the word computer?", "question_toks": ["What", "is", "the", "department", "description", "for", "the", "one", "whose", "name", "has", "the", "word", "computer", "?"], "guid": 1534}}
{"text": "Course_Authors_and_Tutors: author_id, author_tutor_ATB, login_name, password, personal_name, middle_name, family_name, gender_mf, address_line_1; Students: student_id, date_of_registration, date_of_latest_logon, login_name, password, personal_name, middle_name, family_name; Subjects: subject_id, subject_name; Courses: course_id, author_id, subject_id, course_name, course_description; Student_Course_Enrolment: registration_id, student_id, course_id, date_of_enrolment, date_of_completion; Student_Tests_Taken: registration_id, date_test_taken, test_result | What are the descriptions and names of the courses that have student enrollment bigger than 2?", "sql": "SELECT T1.course_description ,  T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name HAVING COUNT(*)  >  2", "example": {"db_id": "e_learning", "query": "SELECT T1.course_description ,  T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name HAVING COUNT(*)  >  2", "query_toks": ["SELECT", "T1.course_description", ",", "T1.course_name", "FROM", "Courses", "AS", "T1", "JOIN", "Student_Course_Enrolment", "AS", "T2", "ON", "T1.course_id", "=", "T2.course_id", "GROUP", "BY", "T1.course_name", "HAVING", "COUNT", "(", "*", ")", ">", "2"], "query_toks_no_value": ["select", "t1", ".", "course_description", ",", "t1", ".", "course_name", "from", "courses", "as", "t1", "join", "student_course_enrolment", "as", "t2", "on", "t1", ".", "course_id", "=", "t2", ".", "course_id", "group", "by", "t1", ".", "course_name", "having", "count", "(", "*", ")", ">", "value"], "question": "What are the descriptions and names of the courses that have student enrollment bigger than 2?", "question_toks": ["What", "are", "the", "descriptions", "and", "names", "of", "the", "courses", "that", "have", "student", "enrollment", "bigger", "than", "2", "?"], "guid": 1535}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Dorm: dormid, dorm_name, student_capacity, gender; Dorm_amenity: amenid, amenity_name; Has_amenity: dormid, amenid; Lives_in: stuid, dormid, room_number | What is the average age and how many male students are there in each city?", "sql": "SELECT count(*) ,  avg(age) ,  city_code FROM student WHERE sex  =  'M' GROUP BY city_code", "example": {"db_id": "dorm_1", "query": "SELECT count(*) ,  avg(age) ,  city_code FROM student WHERE sex  =  'M' GROUP BY city_code", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "avg", "(", "age", ")", ",", "city_code", "FROM", "student", "WHERE", "sex", "=", "'M", "'", "GROUP", "BY", "city_code"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "avg", "(", "age", ")", ",", "city_code", "from", "student", "where", "sex", "=", "value", "group", "by", "city_code"], "question": "What is the average age and how many male students are there in each city?", "question_toks": ["What", "is", "the", "average", "age", "and", "how", "many", "male", "students", "are", "there", "in", "each", "city", "?"], "guid": 1536}}
{"text": "Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Courses: course_id, course_name, course_description, other_details; Departments: department_id, department_name, department_description, other_details; Degree_Programs: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details; Sections: section_id, course_id, section_name, section_description, other_details; Semesters: semester_id, semester_name, semester_description, other_details; Students: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered; Student_Enrolment: student_enrolment_id, degree_program_id, semester_id, student_id, other_details; Student_Enrolment_Courses: student_course_id, course_id, student_enrolment_id; Transcripts: transcript_id, transcript_date, other_details | Find the program which most number of students are enrolled in. List both the id and the summary.", "sql": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "student_transcripts_tracking", "query": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.degree_program_id", ",", "T1.degree_summary_name", "FROM", "Degree_Programs", "AS", "T1", "JOIN", "Student_Enrolment", "AS", "T2", "ON", "T1.degree_program_id", "=", "T2.degree_program_id", "GROUP", "BY", "T1.degree_program_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "degree_program_id", ",", "t1", ".", "degree_summary_name", "from", "degree_programs", "as", "t1", "join", "student_enrolment", "as", "t2", "on", "t1", ".", "degree_program_id", "=", "t2", ".", "degree_program_id", "group", "by", "t1", ".", "degree_program_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Find the program which most number of students are enrolled in. List both the id and the summary.", "question_toks": ["Find", "the", "program", "which", "most", "number", "of", "students", "are", "enrolled", "in", ".", "List", "both", "the", "id", "and", "the", "summary", "."], "guid": 1537}}
{"text": "Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Courses: course_id, course_name, course_description, other_details; Departments: department_id, department_name, department_description, other_details; Degree_Programs: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details; Sections: section_id, course_id, section_name, section_description, other_details; Semesters: semester_id, semester_name, semester_description, other_details; Students: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered; Student_Enrolment: student_enrolment_id, degree_program_id, semester_id, student_id, other_details; Student_Enrolment_Courses: student_course_id, course_id, student_enrolment_id; Transcripts: transcript_id, transcript_date, other_details | What is the first and second line for all addresses?", "sql": "SELECT line_1 ,  line_2 FROM addresses", "example": {"db_id": "student_transcripts_tracking", "query": "SELECT line_1 ,  line_2 FROM addresses", "query_toks": ["SELECT", "line_1", ",", "line_2", "FROM", "addresses"], "query_toks_no_value": ["select", "line_1", ",", "line_2", "from", "addresses"], "question": "What is the first and second line for all addresses?", "question_toks": ["What", "is", "the", "first", "and", "second", "line", "for", "all", "addresses", "?"], "guid": 1538}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Dorm: dormid, dorm_name, student_capacity, gender; Dorm_amenity: amenid, amenity_name; Has_amenity: dormid, amenid; Lives_in: stuid, dormid, room_number | Find the average age and number of male students (with sex M) from each city.", "sql": "SELECT count(*) ,  avg(age) ,  city_code FROM student WHERE sex  =  'M' GROUP BY city_code", "example": {"db_id": "dorm_1", "query": "SELECT count(*) ,  avg(age) ,  city_code FROM student WHERE sex  =  'M' GROUP BY city_code", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "avg", "(", "age", ")", ",", "city_code", "FROM", "student", "WHERE", "sex", "=", "'M", "'", "GROUP", "BY", "city_code"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "avg", "(", "age", ")", ",", "city_code", "from", "student", "where", "sex", "=", "value", "group", "by", "city_code"], "question": "Find the average age and number of male students (with sex M) from each city.", "question_toks": ["Find", "the", "average", "age", "and", "number", "of", "male", "students", "(", "with", "sex", "M", ")", "from", "each", "city", "."], "guid": 1539}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Dorm: dormid, dorm_name, student_capacity, gender; Dorm_amenity: amenid, amenity_name; Has_amenity: dormid, amenid; Lives_in: stuid, dormid, room_number | Find the first name and age of students who are living in the dorms that do not have amenity TV Lounge.", "sql": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid WHERE T2.dormid NOT IN (SELECT T3.dormid FROM has_amenity AS T3 JOIN dorm_amenity AS T4 ON T3.amenid  =  T4.amenid WHERE T4.amenity_name  =  'TV Lounge')", "example": {"db_id": "dorm_1", "query": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid WHERE T2.dormid NOT IN (SELECT T3.dormid FROM has_amenity AS T3 JOIN dorm_amenity AS T4 ON T3.amenid  =  T4.amenid WHERE T4.amenity_name  =  'TV Lounge')", "query_toks": ["SELECT", "T1.fname", ",", "T1.age", "FROM", "student", "AS", "T1", "JOIN", "lives_in", "AS", "T2", "ON", "T1.stuid", "=", "T2.stuid", "WHERE", "T2.dormid", "NOT", "IN", "(", "SELECT", "T3.dormid", "FROM", "has_amenity", "AS", "T3", "JOIN", "dorm_amenity", "AS", "T4", "ON", "T3.amenid", "=", "T4.amenid", "WHERE", "T4.amenity_name", "=", "'TV", "Lounge", "'", ")"], "query_toks_no_value": ["select", "t1", ".", "fname", ",", "t1", ".", "age", "from", "student", "as", "t1", "join", "lives_in", "as", "t2", "on", "t1", ".", "stuid", "=", "t2", ".", "stuid", "where", "t2", ".", "dormid", "not", "in", "(", "select", "t3", ".", "dormid", "from", "has_amenity", "as", "t3", "join", "dorm_amenity", "as", "t4", "on", "t3", ".", "amenid", "=", "t4", ".", "amenid", "where", "t4", ".", "amenity_name", "=", "value", ")"], "question": "Find the first name and age of students who are living in the dorms that do not have amenity TV Lounge.", "question_toks": ["Find", "the", "first", "name", "and", "age", "of", "students", "who", "are", "living", "in", "the", "dorms", "that", "do", "not", "have", "amenity", "TV", "Lounge", "."], "guid": 1540}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Dorm: dormid, dorm_name, student_capacity, gender; Dorm_amenity: amenid, amenity_name; Has_amenity: dormid, amenid; Lives_in: stuid, dormid, room_number | Find the name of amenity that is most common in all dorms.", "sql": "SELECT T1.amenity_name FROM dorm_amenity AS T1 JOIN has_amenity AS T2 ON T1.amenid  =  T2.amenid GROUP BY T2.amenid ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "dorm_1", "query": "SELECT T1.amenity_name FROM dorm_amenity AS T1 JOIN has_amenity AS T2 ON T1.amenid  =  T2.amenid GROUP BY T2.amenid ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.amenity_name", "FROM", "dorm_amenity", "AS", "T1", "JOIN", "has_amenity", "AS", "T2", "ON", "T1.amenid", "=", "T2.amenid", "GROUP", "BY", "T2.amenid", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "amenity_name", "from", "dorm_amenity", "as", "t1", "join", "has_amenity", "as", "t2", "on", "t1", ".", "amenid", "=", "t2", ".", "amenid", "group", "by", "t2", ".", "amenid", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Find the name of amenity that is most common in all dorms.", "question_toks": ["Find", "the", "name", "of", "amenity", "that", "is", "most", "common", "in", "all", "dorms", "."], "guid": 1541}}
{"text": "School: School_id, School_name, Location, Mascot, Enrollment, IHSAA_Class, IHSAA_Football_Class, County; budget: School_id, Year, Budgeted, total_budget_percent_budgeted, Invested, total_budget_percent_invested, Budget_invested_percent; endowment: endowment_id, School_id, donator_name, amount | Show the names of donors who donated to both school \"Glenn\" and \"Triton.\"", "sql": "SELECT T1.donator_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T2.school_name  =  'Glenn' INTERSECT SELECT T1.donator_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T2.school_name  =  'Triton'", "example": {"db_id": "school_finance", "query": "SELECT T1.donator_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T2.school_name  =  'Glenn' INTERSECT SELECT T1.donator_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T2.school_name  =  'Triton'", "query_toks": ["SELECT", "T1.donator_name", "FROM", "endowment", "AS", "T1", "JOIN", "school", "AS", "T2", "ON", "T1.school_id", "=", "T2.school_id", "WHERE", "T2.school_name", "=", "'Glenn", "'", "INTERSECT", "SELECT", "T1.donator_name", "FROM", "endowment", "AS", "T1", "JOIN", "school", "AS", "T2", "ON", "T1.school_id", "=", "T2.school_id", "WHERE", "T2.school_name", "=", "'Triton", "'"], "query_toks_no_value": ["select", "t1", ".", "donator_name", "from", "endowment", "as", "t1", "join", "school", "as", "t2", "on", "t1", ".", "school_id", "=", "t2", ".", "school_id", "where", "t2", ".", "school_name", "=", "value", "intersect", "select", "t1", ".", "donator_name", "from", "endowment", "as", "t1", "join", "school", "as", "t2", "on", "t1", ".", "school_id", "=", "t2", ".", "school_id", "where", "t2", ".", "school_name", "=", "value"], "question": "Show the names of donors who donated to both school \"Glenn\" and \"Triton.\"", "question_toks": ["Show", "the", "names", "of", "donors", "who", "donated", "to", "both", "school", "``", "Glenn", "''", "and", "``", "Triton", ".", "''"], "guid": 1542}}
{"text": "Course_Authors_and_Tutors: author_id, author_tutor_ATB, login_name, password, personal_name, middle_name, family_name, gender_mf, address_line_1; Students: student_id, date_of_registration, date_of_latest_logon, login_name, password, personal_name, middle_name, family_name; Subjects: subject_id, subject_name; Courses: course_id, author_id, subject_id, course_name, course_description; Student_Course_Enrolment: registration_id, student_id, course_id, date_of_enrolment, date_of_completion; Student_Tests_Taken: registration_id, date_test_taken, test_result | List each test result and its count in descending order of count.", "sql": "SELECT test_result ,  COUNT(*) FROM Student_Tests_Taken GROUP BY test_result ORDER BY COUNT(*) DESC", "example": {"db_id": "e_learning", "query": "SELECT test_result ,  COUNT(*) FROM Student_Tests_Taken GROUP BY test_result ORDER BY COUNT(*) DESC", "query_toks": ["SELECT", "test_result", ",", "COUNT", "(", "*", ")", "FROM", "Student_Tests_Taken", "GROUP", "BY", "test_result", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC"], "query_toks_no_value": ["select", "test_result", ",", "count", "(", "*", ")", "from", "student_tests_taken", "group", "by", "test_result", "order", "by", "count", "(", "*", ")", "desc"], "question": "List each test result and its count in descending order of count.", "question_toks": ["List", "each", "test", "result", "and", "its", "count", "in", "descending", "order", "of", "count", "."], "guid": 1543}}
{"text": "list: LastName, FirstName, Grade, Classroom; teachers: LastName, FirstName, Classroom | Report the first name and last name of all the students.", "sql": "SELECT DISTINCT firstname ,  lastname FROM list", "example": {"db_id": "student_1", "query": "SELECT DISTINCT firstname ,  lastname FROM list", "query_toks": ["SELECT", "DISTINCT", "firstname", ",", "lastname", "FROM", "list"], "query_toks_no_value": ["select", "distinct", "firstname", ",", "lastname", "from", "list"], "question": "Report the first name and last name of all the students.", "question_toks": ["Report", "the", "first", "name", "and", "last", "name", "of", "all", "the", "students", "."], "guid": 1544}}
{"text": "Course_Authors_and_Tutors: author_id, author_tutor_ATB, login_name, password, personal_name, middle_name, family_name, gender_mf, address_line_1; Students: student_id, date_of_registration, date_of_latest_logon, login_name, password, personal_name, middle_name, family_name; Subjects: subject_id, subject_name; Courses: course_id, author_id, subject_id, course_name, course_description; Student_Course_Enrolment: registration_id, student_id, course_id, date_of_enrolment, date_of_completion; Student_Tests_Taken: registration_id, date_test_taken, test_result | How many courses are there in total?", "sql": "SELECT count(*) FROM COURSES", "example": {"db_id": "e_learning", "query": "SELECT count(*) FROM COURSES", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "COURSES"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "courses"], "question": "How many courses are there in total?", "question_toks": ["How", "many", "courses", "are", "there", "in", "total", "?"], "guid": 1545}}
{"text": "Addresses: address_id, line_1, line_2, city, zip_postcode, state_province_county, country; People: person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password; Students: student_id, student_details; Courses: course_id, course_name, course_description, other_details; People_Addresses: person_address_id, person_id, address_id, date_from, date_to; Student_Course_Registrations: student_id, course_id, registration_date; Student_Course_Attendance: student_id, course_id, date_of_attendance; Candidates: candidate_id, candidate_details; Candidate_Assessments: candidate_id, qualification, assessment_date, asessment_outcome_code | What are the ids of all students who have attended at least one course?", "sql": "SELECT student_id FROM student_course_attendance", "example": {"db_id": "student_assessment", "query": "SELECT student_id FROM student_course_attendance", "query_toks": ["SELECT", "student_id", "FROM", "student_course_attendance"], "query_toks_no_value": ["select", "student_id", "from", "student_course_attendance"], "question": "What are the ids of all students who have attended at least one course?", "question_toks": ["What", "are", "the", "ids", "of", "all", "students", "who", "have", "attended", "at", "least", "one", "course", "?"], "guid": 1546}}
{"text": "Addresses: address_id, line_1, line_2, city, zip_postcode, state_province_county, country; People: person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password; Students: student_id, student_details; Courses: course_id, course_name, course_description, other_details; People_Addresses: person_address_id, person_id, address_id, date_from, date_to; Student_Course_Registrations: student_id, course_id, registration_date; Student_Course_Attendance: student_id, course_id, date_of_attendance; Candidates: candidate_id, candidate_details; Candidate_Assessments: candidate_id, qualification, assessment_date, asessment_outcome_code | what is id of students who registered some courses but the least number of courses in these students?", "sql": "SELECT student_id FROM student_course_registrations GROUP BY student_id ORDER BY count(*) LIMIT 1", "example": {"db_id": "student_assessment", "query": "SELECT student_id FROM student_course_registrations GROUP BY student_id ORDER BY count(*) LIMIT 1", "query_toks": ["SELECT", "student_id", "FROM", "student_course_registrations", "GROUP", "BY", "student_id", "ORDER", "BY", "count", "(", "*", ")", "LIMIT", "1"], "query_toks_no_value": ["select", "student_id", "from", "student_course_registrations", "group", "by", "student_id", "order", "by", "count", "(", "*", ")", "limit", "value"], "question": "what is id of students who registered some courses but the least number of courses in these students?", "question_toks": ["what", "is", "id", "of", "students", "who", "registered", "some", "courses", "but", "the", "least", "number", "of", "courses", "in", "these", "students", "?"], "guid": 1547}}
{"text": "Activity: actid, activity_name; Participates_in: stuid, actid; Faculty_Participates_in: FacID, actid; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building | How many faculty members participate in an activity?", "sql": "SELECT count(DISTINCT FacID) FROM Faculty_participates_in", "example": {"db_id": "activity_1", "query": "SELECT count(DISTINCT FacID) FROM Faculty_participates_in", "query_toks": ["SELECT", "count", "(", "DISTINCT", "FacID", ")", "FROM", "Faculty_participates_in"], "query_toks_no_value": ["select", "count", "(", "distinct", "facid", ")", "from", "faculty_participates_in"], "question": "How many faculty members participate in an activity?", "question_toks": ["How", "many", "faculty", "members", "participate", "in", "an", "activity", "?"], "guid": 1548}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Dorm: dormid, dorm_name, student_capacity, gender; Dorm_amenity: amenid, amenity_name; Has_amenity: dormid, amenid; Lives_in: stuid, dormid, room_number | Find the average age of students living in each dorm and the name of dorm.", "sql": "SELECT avg(T1.age) ,  T3.dorm_name FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid GROUP BY T3.dorm_name", "example": {"db_id": "dorm_1", "query": "SELECT avg(T1.age) ,  T3.dorm_name FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid GROUP BY T3.dorm_name", "query_toks": ["SELECT", "avg", "(", "T1.age", ")", ",", "T3.dorm_name", "FROM", "student", "AS", "T1", "JOIN", "lives_in", "AS", "T2", "ON", "T1.stuid", "=", "T2.stuid", "JOIN", "dorm", "AS", "T3", "ON", "T3.dormid", "=", "T2.dormid", "GROUP", "BY", "T3.dorm_name"], "query_toks_no_value": ["select", "avg", "(", "t1", ".", "age", ")", ",", "t3", ".", "dorm_name", "from", "student", "as", "t1", "join", "lives_in", "as", "t2", "on", "t1", ".", "stuid", "=", "t2", ".", "stuid", "join", "dorm", "as", "t3", "on", "t3", ".", "dormid", "=", "t2", ".", "dormid", "group", "by", "t3", ".", "dorm_name"], "question": "Find the average age of students living in each dorm and the name of dorm.", "question_toks": ["Find", "the", "average", "age", "of", "students", "living", "in", "each", "dorm", "and", "the", "name", "of", "dorm", "."], "guid": 1549}}
{"text": "Activity: actid, activity_name; Participates_in: stuid, actid; Faculty_Participates_in: FacID, actid; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building | How many faculty members do we have for each rank and gender?", "sql": "SELECT rank ,  sex ,  count(*) FROM Faculty GROUP BY rank ,  sex", "example": {"db_id": "activity_1", "query": "SELECT rank ,  sex ,  count(*) FROM Faculty GROUP BY rank ,  sex", "query_toks": ["SELECT", "rank", ",", "sex", ",", "count", "(", "*", ")", "FROM", "Faculty", "GROUP", "BY", "rank", ",", "sex"], "query_toks_no_value": ["select", "rank", ",", "sex", ",", "count", "(", "*", ")", "from", "faculty", "group", "by", "rank", ",", "sex"], "question": "How many faculty members do we have for each rank and gender?", "question_toks": ["How", "many", "faculty", "members", "do", "we", "have", "for", "each", "rank", "and", "gender", "?"], "guid": 1550}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Dorm: dormid, dorm_name, student_capacity, gender; Dorm_amenity: amenid, amenity_name; Has_amenity: dormid, amenid; Lives_in: stuid, dormid, room_number | What is the average and oldest age for each gender of student?", "sql": "SELECT avg(age) ,  max(age) ,  sex FROM student GROUP BY sex", "example": {"db_id": "dorm_1", "query": "SELECT avg(age) ,  max(age) ,  sex FROM student GROUP BY sex", "query_toks": ["SELECT", "avg", "(", "age", ")", ",", "max", "(", "age", ")", ",", "sex", "FROM", "student", "GROUP", "BY", "sex"], "query_toks_no_value": ["select", "avg", "(", "age", ")", ",", "max", "(", "age", ")", ",", "sex", "from", "student", "group", "by", "sex"], "question": "What is the average and oldest age for each gender of student?", "question_toks": ["What", "is", "the", "average", "and", "oldest", "age", "for", "each", "gender", "of", "student", "?"], "guid": 1551}}
{"text": "course: Course_ID, Staring_Date, Course; teacher: Teacher_ID, Name, Age, Hometown; course_arrange: Course_ID, Teacher_ID, Grade | Show names of teachers and the courses they are arranged to teach.", "sql": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID", "example": {"db_id": "course_teach", "query": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID", "query_toks": ["SELECT", "T3.Name", ",", "T2.Course", "FROM", "course_arrange", "AS", "T1", "JOIN", "course", "AS", "T2", "ON", "T1.Course_ID", "=", "T2.Course_ID", "JOIN", "teacher", "AS", "T3", "ON", "T1.Teacher_ID", "=", "T3.Teacher_ID"], "query_toks_no_value": ["select", "t3", ".", "name", ",", "t2", ".", "course", "from", "course_arrange", "as", "t1", "join", "course", "as", "t2", "on", "t1", ".", "course_id", "=", "t2", ".", "course_id", "join", "teacher", "as", "t3", "on", "t1", ".", "teacher_id", "=", "t3", ".", "teacher_id"], "question": "Show names of teachers and the courses they are arranged to teach.", "question_toks": ["Show", "names", "of", "teachers", "and", "the", "courses", "they", "are", "arranged", "to", "teach", "."], "guid": 1552}}
{"text": "list: LastName, FirstName, Grade, Classroom; teachers: LastName, FirstName, Classroom | For each grade 0 classroom, report the total number of students.", "sql": "SELECT classroom ,  count(*) FROM list WHERE grade  =  \"0\" GROUP BY classroom", "example": {"db_id": "student_1", "query": "SELECT classroom ,  count(*) FROM list WHERE grade  =  \"0\" GROUP BY classroom", "query_toks": ["SELECT", "classroom", ",", "count", "(", "*", ")", "FROM", "list", "WHERE", "grade", "=", "``", "0", "''", "GROUP", "BY", "classroom"], "query_toks_no_value": ["select", "classroom", ",", "count", "(", "*", ")", "from", "list", "where", "grade", "=", "value", "group", "by", "classroom"], "question": "For each grade 0 classroom, report the total number of students.", "question_toks": ["For", "each", "grade", "0", "classroom", ",", "report", "the", "total", "number", "of", "students", "."], "guid": 1553}}
{"text": "Course_Authors_and_Tutors: author_id, author_tutor_ATB, login_name, password, personal_name, middle_name, family_name, gender_mf, address_line_1; Students: student_id, date_of_registration, date_of_latest_logon, login_name, password, personal_name, middle_name, family_name; Subjects: subject_id, subject_name; Courses: course_id, author_id, subject_id, course_name, course_description; Student_Course_Enrolment: registration_id, student_id, course_id, date_of_enrolment, date_of_completion; Student_Tests_Taken: registration_id, date_test_taken, test_result | Return the description for the courses named \"database\".", "sql": "SELECT course_description FROM COURSES WHERE course_name  =  \"database\"", "example": {"db_id": "e_learning", "query": "SELECT course_description FROM COURSES WHERE course_name  =  \"database\"", "query_toks": ["SELECT", "course_description", "FROM", "COURSES", "WHERE", "course_name", "=", "``", "database", "''"], "query_toks_no_value": ["select", "course_description", "from", "courses", "where", "course_name", "=", "value"], "question": "Return the description for the courses named \"database\".", "question_toks": ["Return", "the", "description", "for", "the", "courses", "named", "``", "database", "''", "."], "guid": 1554}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Dorm: dormid, dorm_name, student_capacity, gender; Dorm_amenity: amenid, amenity_name; Has_amenity: dormid, amenid; Lives_in: stuid, dormid, room_number | Find the first name of students who are living in the dorm that has most number of amenities.", "sql": "SELECT T1.fname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid WHERE T2.dormid IN (SELECT T2.dormid FROM dorm AS T3 JOIN has_amenity AS T4 ON T3.dormid  =  T4.dormid JOIN dorm_amenity AS T5 ON T4.amenid  =  T5.amenid GROUP BY T3.dormid ORDER BY count(*) DESC LIMIT 1)", "example": {"db_id": "dorm_1", "query": "SELECT T1.fname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid WHERE T2.dormid IN (SELECT T2.dormid FROM dorm AS T3 JOIN has_amenity AS T4 ON T3.dormid  =  T4.dormid JOIN dorm_amenity AS T5 ON T4.amenid  =  T5.amenid GROUP BY T3.dormid ORDER BY count(*) DESC LIMIT 1)", "query_toks": ["SELECT", "T1.fname", "FROM", "student", "AS", "T1", "JOIN", "lives_in", "AS", "T2", "ON", "T1.stuid", "=", "T2.stuid", "WHERE", "T2.dormid", "IN", "(", "SELECT", "T2.dormid", "FROM", "dorm", "AS", "T3", "JOIN", "has_amenity", "AS", "T4", "ON", "T3.dormid", "=", "T4.dormid", "JOIN", "dorm_amenity", "AS", "T5", "ON", "T4.amenid", "=", "T5.amenid", "GROUP", "BY", "T3.dormid", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1", ")"], "query_toks_no_value": ["select", "t1", ".", "fname", "from", "student", "as", "t1", "join", "lives_in", "as", "t2", "on", "t1", ".", "stuid", "=", "t2", ".", "stuid", "where", "t2", ".", "dormid", "in", "(", "select", "t2", ".", "dormid", "from", "dorm", "as", "t3", "join", "has_amenity", "as", "t4", "on", "t3", ".", "dormid", "=", "t4", ".", "dormid", "join", "dorm_amenity", "as", "t5", "on", "t4", ".", "amenid", "=", "t5", ".", "amenid", "group", "by", "t3", ".", "dormid", "order", "by", "count", "(", "*", ")", "desc", "limit", "value", ")"], "question": "Find the first name of students who are living in the dorm that has most number of amenities.", "question_toks": ["Find", "the", "first", "name", "of", "students", "who", "are", "living", "in", "the", "dorm", "that", "has", "most", "number", "of", "amenities", "."], "guid": 1555}}
{"text": "Course_Authors_and_Tutors: author_id, author_tutor_ATB, login_name, password, personal_name, middle_name, family_name, gender_mf, address_line_1; Students: student_id, date_of_registration, date_of_latest_logon, login_name, password, personal_name, middle_name, family_name; Subjects: subject_id, subject_name; Courses: course_id, author_id, subject_id, course_name, course_description; Student_Course_Enrolment: registration_id, student_id, course_id, date_of_enrolment, date_of_completion; Student_Tests_Taken: registration_id, date_test_taken, test_result | What are the personal names used both by some course authors and some students?", "sql": "SELECT personal_name FROM Course_Authors_and_Tutors INTERSECT SELECT personal_name FROM Students", "example": {"db_id": "e_learning", "query": "SELECT personal_name FROM Course_Authors_and_Tutors INTERSECT SELECT personal_name FROM Students", "query_toks": ["SELECT", "personal_name", "FROM", "Course_Authors_and_Tutors", "INTERSECT", "SELECT", "personal_name", "FROM", "Students"], "query_toks_no_value": ["select", "personal_name", "from", "course_authors_and_tutors", "intersect", "select", "personal_name", "from", "students"], "question": "What are the personal names used both by some course authors and some students?", "question_toks": ["What", "are", "the", "personal", "names", "used", "both", "by", "some", "course", "authors", "and", "some", "students", "?"], "guid": 1556}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Dorm: dormid, dorm_name, student_capacity, gender; Dorm_amenity: amenid, amenity_name; Has_amenity: dormid, amenid; Lives_in: stuid, dormid, room_number | Find the total number of students living in the male dorm (with gender M).", "sql": "SELECT count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.gender  =  'M'", "example": {"db_id": "dorm_1", "query": "SELECT count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.gender  =  'M'", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "student", "AS", "T1", "JOIN", "lives_in", "AS", "T2", "ON", "T1.stuid", "=", "T2.stuid", "JOIN", "dorm", "AS", "T3", "ON", "T3.dormid", "=", "T2.dormid", "WHERE", "T3.gender", "=", "'M", "'"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "student", "as", "t1", "join", "lives_in", "as", "t2", "on", "t1", ".", "stuid", "=", "t2", ".", "stuid", "join", "dorm", "as", "t3", "on", "t3", ".", "dormid", "=", "t2", ".", "dormid", "where", "t3", ".", "gender", "=", "value"], "question": "Find the total number of students living in the male dorm (with gender M).", "question_toks": ["Find", "the", "total", "number", "of", "students", "living", "in", "the", "male", "dorm", "(", "with", "gender", "M", ")", "."], "guid": 1557}}
{"text": "School: School_id, School_name, Location, Mascot, Enrollment, IHSAA_Class, IHSAA_Football_Class, County; budget: School_id, Year, Budgeted, total_budget_percent_budgeted, Invested, total_budget_percent_invested, Budget_invested_percent; endowment: endowment_id, School_id, donator_name, amount | Find the number of schools that have more than one donator whose donation amount is less than 8.5.", "sql": "SELECT count(*) FROM (SELECT * FROM endowment WHERE amount  >  8.5 GROUP BY school_id HAVING count(*)  >  1)", "example": {"db_id": "school_finance", "query": "SELECT count(*) FROM (SELECT * FROM endowment WHERE amount  >  8.5 GROUP BY school_id HAVING count(*)  >  1)", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "(", "SELECT", "*", "FROM", "endowment", "WHERE", "amount", ">", "8.5", "GROUP", "BY", "school_id", "HAVING", "count", "(", "*", ")", ">", "1", ")"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "(", "select", "*", "from", "endowment", "where", "amount", ">", "value", "group", "by", "school_id", "having", "count", "(", "*", ")", ">", "value", ")"], "question": "Find the number of schools that have more than one donator whose donation amount is less than 8.5.", "question_toks": ["Find", "the", "number", "of", "schools", "that", "have", "more", "than", "one", "donator", "whose", "donation", "amount", "is", "less", "than", "8.5", "."], "guid": 1558}}
{"text": "Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Courses: course_id, course_name, course_description, other_details; Departments: department_id, department_name, department_description, other_details; Degree_Programs: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details; Sections: section_id, course_id, section_name, section_description, other_details; Semesters: semester_id, semester_name, semester_description, other_details; Students: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered; Student_Enrolment: student_enrolment_id, degree_program_id, semester_id, student_id, other_details; Student_Enrolment_Courses: student_course_id, course_id, student_enrolment_id; Transcripts: transcript_id, transcript_date, other_details | How many different addresses do the students currently live?", "sql": "SELECT count(DISTINCT current_address_id) FROM Students", "example": {"db_id": "student_transcripts_tracking", "query": "SELECT count(DISTINCT current_address_id) FROM Students", "query_toks": ["SELECT", "count", "(", "DISTINCT", "current_address_id", ")", "FROM", "Students"], "query_toks_no_value": ["select", "count", "(", "distinct", "current_address_id", ")", "from", "students"], "question": "How many different addresses do the students currently live?", "question_toks": ["How", "many", "different", "addresses", "do", "the", "students", "currently", "live", "?"], "guid": 1559}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Dorm: dormid, dorm_name, student_capacity, gender; Dorm_amenity: amenid, amenity_name; Has_amenity: dormid, amenid; Lives_in: stuid, dormid, room_number | Find the average and oldest age for students with different sex.", "sql": "SELECT avg(age) ,  max(age) ,  sex FROM student GROUP BY sex", "example": {"db_id": "dorm_1", "query": "SELECT avg(age) ,  max(age) ,  sex FROM student GROUP BY sex", "query_toks": ["SELECT", "avg", "(", "age", ")", ",", "max", "(", "age", ")", ",", "sex", "FROM", "student", "GROUP", "BY", "sex"], "query_toks_no_value": ["select", "avg", "(", "age", ")", ",", "max", "(", "age", ")", ",", "sex", "from", "student", "group", "by", "sex"], "question": "Find the average and oldest age for students with different sex.", "question_toks": ["Find", "the", "average", "and", "oldest", "age", "for", "students", "with", "different", "sex", "."], "guid": 1560}}