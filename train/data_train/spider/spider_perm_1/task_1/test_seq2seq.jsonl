{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | Find the number of departments in each school.", "sql": "SELECT count(DISTINCT dept_name) ,  school_code FROM department GROUP BY school_code", "example": {"db_id": "college_1", "query": "SELECT count(DISTINCT dept_name) ,  school_code FROM department GROUP BY school_code", "query_toks": ["SELECT", "count", "(", "DISTINCT", "dept_name", ")", ",", "school_code", "FROM", "department", "GROUP", "BY", "school_code"], "query_toks_no_value": ["select", "count", "(", "distinct", "dept_name", ")", ",", "school_code", "from", "department", "group", "by", "school_code"], "question": "Find the number of departments in each school.", "question_toks": ["Find", "the", "number", "of", "departments", "in", "each", "school", "."], "guid": 8517}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | How many professors have a Ph.D. in each department?", "sql": "SELECT count(*) ,  dept_code FROM professor WHERE prof_high_degree  =  'Ph.D.' GROUP BY dept_code", "example": {"db_id": "college_1", "query": "SELECT count(*) ,  dept_code FROM professor WHERE prof_high_degree  =  'Ph.D.' GROUP BY dept_code", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "dept_code", "FROM", "professor", "WHERE", "prof_high_degree", "=", "'Ph.D", ".", "'", "GROUP", "BY", "dept_code"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "dept_code", "from", "professor", "where", "prof_high_degree", "=", "value", "group", "by", "dept_code"], "question": "How many professors have a Ph.D. in each department?", "question_toks": ["How", "many", "professors", "have", "a", "Ph.D.", "in", "each", "department", "?"], "guid": 8518}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | How many students are enrolled in some classes that are taught by an accounting professor?", "sql": "SELECT count(*) FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN department AS T4 ON T3.dept_code  =  T4.dept_code WHERE T4.dept_name  =  'Accounting'", "example": {"db_id": "college_1", "query": "SELECT count(*) FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN department AS T4 ON T3.dept_code  =  T4.dept_code WHERE T4.dept_name  =  'Accounting'", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "CLASS", "AS", "T1", "JOIN", "enroll", "AS", "T2", "ON", "T1.class_code", "=", "T2.class_code", "JOIN", "course", "AS", "T3", "ON", "T1.crs_code", "=", "T3.crs_code", "JOIN", "department", "AS", "T4", "ON", "T3.dept_code", "=", "T4.dept_code", "WHERE", "T4.dept_name", "=", "'Accounting", "'"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "class", "as", "t1", "join", "enroll", "as", "t2", "on", "t1", ".", "class_code", "=", "t2", ".", "class_code", "join", "course", "as", "t3", "on", "t1", ".", "crs_code", "=", "t3", ".", "crs_code", "join", "department", "as", "t4", "on", "t3", ".", "dept_code", "=", "t4", ".", "dept_code", "where", "t4", ".", "dept_name", "=", "value"], "question": "How many students are enrolled in some classes that are taught by an accounting professor?", "question_toks": ["How", "many", "students", "are", "enrolled", "in", "some", "classes", "that", "are", "taught", "by", "an", "accounting", "professor", "?"], "guid": 8519}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What is the name of the department that has the largest number of students enrolled?", "sql": "SELECT T4.dept_name FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN department AS T4 ON T3.dept_code  =  T4.dept_code GROUP BY T3.dept_code ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "college_1", "query": "SELECT T4.dept_name FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN department AS T4 ON T3.dept_code  =  T4.dept_code GROUP BY T3.dept_code ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T4.dept_name", "FROM", "CLASS", "AS", "T1", "JOIN", "enroll", "AS", "T2", "ON", "T1.class_code", "=", "T2.class_code", "JOIN", "course", "AS", "T3", "ON", "T1.crs_code", "=", "T3.crs_code", "JOIN", "department", "AS", "T4", "ON", "T3.dept_code", "=", "T4.dept_code", "GROUP", "BY", "T3.dept_code", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t4", ".", "dept_name", "from", "class", "as", "t1", "join", "enroll", "as", "t2", "on", "t1", ".", "class_code", "=", "t2", ".", "class_code", "join", "course", "as", "t3", "on", "t1", ".", "crs_code", "=", "t3", ".", "crs_code", "join", "department", "as", "t4", "on", "t3", ".", "dept_code", "=", "t4", ".", "dept_code", "group", "by", "t3", ".", "dept_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the name of the department that has the largest number of students enrolled?", "question_toks": ["What", "is", "the", "name", "of", "the", "department", "that", "has", "the", "largest", "number", "of", "students", "enrolled", "?"], "guid": 8520}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | What is the campus fee of \"San Francisco State University\" in year 2000?", "sql": "SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t2.campus  =  \"San Francisco State University\" AND t1.year  =  2000", "example": {"db_id": "csu_1", "query": "SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t2.campus  =  \"San Francisco State University\" AND t1.year  =  2000", "query_toks": ["SELECT", "t1.campusfee", "FROM", "csu_fees", "AS", "t1", "JOIN", "campuses", "AS", "t2", "ON", "t1.campus", "=", "t2.id", "WHERE", "t2.campus", "=", "``", "San", "Francisco", "State", "University", "''", "AND", "t1.year", "=", "2000"], "query_toks_no_value": ["select", "t1", ".", "campusfee", "from", "csu_fees", "as", "t1", "join", "campuses", "as", "t2", "on", "t1", ".", "campus", "=", "t2", ".", "id", "where", "t2", ".", "campus", "=", "value", "and", "t1", ".", "year", "=", "value"], "question": "What is the campus fee of \"San Francisco State University\" in year 2000?", "question_toks": ["What", "is", "the", "campus", "fee", "of", "``", "San", "Francisco", "State", "University", "''", "in", "year", "2000", "?"], "guid": 8521}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | How many sections does each course have?", "sql": "SELECT count(*) ,  crs_code FROM CLASS GROUP BY crs_code", "example": {"db_id": "college_1", "query": "SELECT count(*) ,  crs_code FROM CLASS GROUP BY crs_code", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "crs_code", "FROM", "CLASS", "GROUP", "BY", "crs_code"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "crs_code", "from", "class", "group", "by", "crs_code"], "question": "How many sections does each course have?", "question_toks": ["How", "many", "sections", "does", "each", "course", "have", "?"], "guid": 8522}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | List the physicians' employee ids together with their primary affiliation departments' ids.", "sql": "SELECT physician ,  department FROM affiliated_with WHERE primaryaffiliation  =  1", "example": {"db_id": "hospital_1", "query": "SELECT physician ,  department FROM affiliated_with WHERE primaryaffiliation  =  1", "query_toks": ["SELECT", "physician", ",", "department", "FROM", "affiliated_with", "WHERE", "primaryaffiliation", "=", "1"], "query_toks_no_value": ["select", "physician", ",", "department", "from", "affiliated_with", "where", "primaryaffiliation", "=", "value"], "question": "List the physicians' employee ids together with their primary affiliation departments' ids.", "question_toks": ["List", "the", "physicians", "'", "employee", "ids", "together", "with", "their", "primary", "affiliation", "departments", "'", "ids", "."], "guid": 8523}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | How many unique classes are offered?", "sql": "SELECT count(DISTINCT class_code) FROM CLASS", "example": {"db_id": "college_1", "query": "SELECT count(DISTINCT class_code) FROM CLASS", "query_toks": ["SELECT", "count", "(", "DISTINCT", "class_code", ")", "FROM", "CLASS"], "query_toks_no_value": ["select", "count", "(", "distinct", "class_code", ")", "from", "class"], "question": "How many unique classes are offered?", "question_toks": ["How", "many", "unique", "classes", "are", "offered", "?"], "guid": 8524}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Find the names of students who have taken any course in the fall semester of year 2003.", "sql": "SELECT name FROM student WHERE id IN (SELECT id FROM takes WHERE semester  =  'Fall' AND YEAR  =  2003)", "example": {"db_id": "college_2", "query": "SELECT name FROM student WHERE id IN (SELECT id FROM takes WHERE semester  =  'Fall' AND YEAR  =  2003)", "query_toks": ["SELECT", "name", "FROM", "student", "WHERE", "id", "IN", "(", "SELECT", "id", "FROM", "takes", "WHERE", "semester", "=", "'Fall", "'", "AND", "YEAR", "=", "2003", ")"], "query_toks_no_value": ["select", "name", "from", "student", "where", "id", "in", "(", "select", "id", "from", "takes", "where", "semester", "=", "value", "and", "year", "=", "value", ")"], "question": "Find the names of students who have taken any course in the fall semester of year 2003.", "question_toks": ["Find", "the", "names", "of", "students", "who", "have", "taken", "any", "course", "in", "the", "fall", "semester", "of", "year", "2003", "."], "guid": 8525}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | What is the number of faculty lines in campus \"Long Beach State University\" in 2002?", "sql": "SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  2002 AND T2.campus  =  \"Long Beach State University\"", "example": {"db_id": "csu_1", "query": "SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  2002 AND T2.campus  =  \"Long Beach State University\"", "query_toks": ["SELECT", "faculty", "FROM", "faculty", "AS", "T1", "JOIN", "campuses", "AS", "T2", "ON", "T1.campus", "=", "T2.id", "WHERE", "T1.year", "=", "2002", "AND", "T2.campus", "=", "``", "Long", "Beach", "State", "University", "''"], "query_toks_no_value": ["select", "faculty", "from", "faculty", "as", "t1", "join", "campuses", "as", "t2", "on", "t1", ".", "campus", "=", "t2", ".", "id", "where", "t1", ".", "year", "=", "value", "and", "t2", ".", "campus", "=", "value"], "question": "What is the number of faculty lines in campus \"Long Beach State University\" in 2002?", "question_toks": ["What", "is", "the", "number", "of", "faculty", "lines", "in", "campus", "``", "Long", "Beach", "State", "University", "''", "in", "2002", "?"], "guid": 8526}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | How many different instructors have taught some course?", "sql": "SELECT COUNT (DISTINCT id) FROM teaches", "example": {"db_id": "college_2", "query": "SELECT COUNT (DISTINCT id) FROM teaches", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "id", ")", "FROM", "teaches"], "query_toks_no_value": ["select", "count", "(", "distinct", "id", ")", "from", "teaches"], "question": "How many different instructors have taught some course?", "question_toks": ["How", "many", "different", "instructors", "have", "taught", "some", "course", "?"], "guid": 8527}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | How many students enrolled in class ACCT-211?", "sql": "SELECT count(*) FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code WHERE T1.crs_code  =  'ACCT-211'", "example": {"db_id": "college_1", "query": "SELECT count(*) FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code WHERE T1.crs_code  =  'ACCT-211'", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "CLASS", "AS", "T1", "JOIN", "enroll", "AS", "T2", "ON", "T1.class_code", "=", "T2.class_code", "WHERE", "T1.crs_code", "=", "'ACCT-211", "'"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "class", "as", "t1", "join", "enroll", "as", "t2", "on", "t1", ".", "class_code", "=", "t2", ".", "class_code", "where", "t1", ".", "crs_code", "=", "value"], "question": "How many students enrolled in class ACCT-211?", "question_toks": ["How", "many", "students", "enrolled", "in", "class", "ACCT-211", "?"], "guid": 8528}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Find the year and semester when offers the largest number of courses.", "sql": "SELECT semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "college_2", "query": "SELECT semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "semester", ",", "YEAR", "FROM", "SECTION", "GROUP", "BY", "semester", ",", "YEAR", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "semester", ",", "year", "from", "section", "group", "by", "semester", ",", "year", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Find the year and semester when offers the largest number of courses.", "question_toks": ["Find", "the", "year", "and", "semester", "when", "offers", "the", "largest", "number", "of", "courses", "."], "guid": 8529}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What is the number of different class sections offered in the course ACCT-211?", "sql": "SELECT count(DISTINCT class_section) FROM CLASS WHERE crs_code  =  'ACCT-211'", "example": {"db_id": "college_1", "query": "SELECT count(DISTINCT class_section) FROM CLASS WHERE crs_code  =  'ACCT-211'", "query_toks": ["SELECT", "count", "(", "DISTINCT", "class_section", ")", "FROM", "CLASS", "WHERE", "crs_code", "=", "'ACCT-211", "'"], "query_toks_no_value": ["select", "count", "(", "distinct", "class_section", ")", "from", "class", "where", "crs_code", "=", "value"], "question": "What is the number of different class sections offered in the course ACCT-211?", "question_toks": ["What", "is", "the", "number", "of", "different", "class", "sections", "offered", "in", "the", "course", "ACCT-211", "?"], "guid": 8530}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | In what year was the most degrees conferred?", "sql": "SELECT YEAR FROM degrees GROUP BY YEAR ORDER BY sum(degrees) DESC LIMIT 1", "example": {"db_id": "csu_1", "query": "SELECT YEAR FROM degrees GROUP BY YEAR ORDER BY sum(degrees) DESC LIMIT 1", "query_toks": ["SELECT", "YEAR", "FROM", "degrees", "GROUP", "BY", "YEAR", "ORDER", "BY", "sum", "(", "degrees", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "year", "from", "degrees", "group", "by", "year", "order", "by", "sum", "(", "degrees", ")", "desc", "limit", "value"], "question": "In what year was the most degrees conferred?", "question_toks": ["In", "what", "year", "was", "the", "most", "degrees", "conferred", "?"], "guid": 8531}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | Which patient is undergoing the most recent treatment?", "sql": "SELECT patient FROM undergoes ORDER BY dateundergoes LIMIT 1", "example": {"db_id": "hospital_1", "query": "SELECT patient FROM undergoes ORDER BY dateundergoes LIMIT 1", "query_toks": ["SELECT", "patient", "FROM", "undergoes", "ORDER", "BY", "dateundergoes", "LIMIT", "1"], "query_toks_no_value": ["select", "patient", "from", "undergoes", "order", "by", "dateundergoes", "limit", "value"], "question": "Which patient is undergoing the most recent treatment?", "question_toks": ["Which", "patient", "is", "undergoing", "the", "most", "recent", "treatment", "?"], "guid": 8532}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What are the first names of all students who got a grade C in a class?", "sql": "SELECT DISTINCT stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num WHERE enroll_grade  =  'C'", "example": {"db_id": "college_1", "query": "SELECT DISTINCT stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num WHERE enroll_grade  =  'C'", "query_toks": ["SELECT", "DISTINCT", "stu_fname", "FROM", "student", "AS", "T1", "JOIN", "enroll", "AS", "T2", "ON", "T1.stu_num", "=", "T2.stu_num", "WHERE", "enroll_grade", "=", "'C", "'"], "query_toks_no_value": ["select", "distinct", "stu_fname", "from", "student", "as", "t1", "join", "enroll", "as", "t2", "on", "t1", ".", "stu_num", "=", "t2", ".", "stu_num", "where", "enroll_grade", "=", "value"], "question": "What are the first names of all students who got a grade C in a class?", "question_toks": ["What", "are", "the", "first", "names", "of", "all", "students", "who", "got", "a", "grade", "C", "in", "a", "class", "?"], "guid": 8533}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | Find the first names and offices of all instructors who have taught some course and also find the course description.", "sql": "SELECT T2.emp_fname ,  T4.prof_office ,  T3.crs_description FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN professor AS T4 ON T2.emp_num  =  T4.emp_num", "example": {"db_id": "college_1", "query": "SELECT T2.emp_fname ,  T4.prof_office ,  T3.crs_description FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN professor AS T4 ON T2.emp_num  =  T4.emp_num", "query_toks": ["SELECT", "T2.emp_fname", ",", "T4.prof_office", ",", "T3.crs_description", "FROM", "CLASS", "AS", "T1", "JOIN", "employee", "AS", "T2", "ON", "T1.prof_num", "=", "T2.emp_num", "JOIN", "course", "AS", "T3", "ON", "T1.crs_code", "=", "T3.crs_code", "JOIN", "professor", "AS", "T4", "ON", "T2.emp_num", "=", "T4.emp_num"], "query_toks_no_value": ["select", "t2", ".", "emp_fname", ",", "t4", ".", "prof_office", ",", "t3", ".", "crs_description", "from", "class", "as", "t1", "join", "employee", "as", "t2", "on", "t1", ".", "prof_num", "=", "t2", ".", "emp_num", "join", "course", "as", "t3", "on", "t1", ".", "crs_code", "=", "t3", ".", "crs_code", "join", "professor", "as", "t4", "on", "t2", ".", "emp_num", "=", "t4", ".", "emp_num"], "question": "Find the first names and offices of all instructors who have taught some course and also find the course description.", "question_toks": ["Find", "the", "first", "names", "and", "offices", "of", "all", "instructors", "who", "have", "taught", "some", "course", "and", "also", "find", "the", "course", "description", "."], "guid": 8534}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | List all names of courses with 1 credit?", "sql": "SELECT CName FROM COURSE WHERE Credits  =  1", "example": {"db_id": "college_3", "query": "SELECT CName FROM COURSE WHERE Credits  =  1", "query_toks": ["SELECT", "CName", "FROM", "COURSE", "WHERE", "Credits", "=", "1"], "query_toks_no_value": ["select", "cname", "from", "course", "where", "credits", "=", "value"], "question": "List all names of courses with 1 credit?", "question_toks": ["List", "all", "names", "of", "courses", "with", "1", "credit", "?"], "guid": 8535}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | Count the number of courses.", "sql": "SELECT count(*) FROM COURSE", "example": {"db_id": "college_3", "query": "SELECT count(*) FROM COURSE", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "COURSE"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "course"], "question": "Count the number of courses.", "question_toks": ["Count", "the", "number", "of", "courses", "."], "guid": 8536}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | Find the number of professors in accounting department.", "sql": "SELECT count(*) FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE DEPT_NAME  =  \"Accounting\"", "example": {"db_id": "college_1", "query": "SELECT count(*) FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE DEPT_NAME  =  \"Accounting\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "professor", "AS", "T1", "JOIN", "department", "AS", "T2", "ON", "T1.dept_code", "=", "T2.dept_code", "WHERE", "DEPT_NAME", "=", "``", "Accounting", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "professor", "as", "t1", "join", "department", "as", "t2", "on", "t1", ".", "dept_code", "=", "t2", ".", "dept_code", "where", "dept_name", "=", "value"], "question": "Find the number of professors in accounting department.", "question_toks": ["Find", "the", "number", "of", "professors", "in", "accounting", "department", "."], "guid": 8537}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | What are the last names of faculty in building Barton, sorted by last name?", "sql": "SELECT Lname FROM FACULTY WHERE Building  =  \"Barton\" ORDER BY Lname", "example": {"db_id": "college_3", "query": "SELECT Lname FROM FACULTY WHERE Building  =  \"Barton\" ORDER BY Lname", "query_toks": ["SELECT", "Lname", "FROM", "FACULTY", "WHERE", "Building", "=", "``", "Barton", "''", "ORDER", "BY", "Lname"], "query_toks_no_value": ["select", "lname", "from", "faculty", "where", "building", "=", "value", "order", "by", "lname"], "question": "What are the last names of faculty in building Barton, sorted by last name?", "question_toks": ["What", "are", "the", "last", "names", "of", "faculty", "in", "building", "Barton", ",", "sorted", "by", "last", "name", "?"], "guid": 8538}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | List the names of all distinct nurses ordered by alphabetical order?", "sql": "SELECT DISTINCT name FROM nurse ORDER BY name", "example": {"db_id": "hospital_1", "query": "SELECT DISTINCT name FROM nurse ORDER BY name", "query_toks": ["SELECT", "DISTINCT", "name", "FROM", "nurse", "ORDER", "BY", "name"], "query_toks_no_value": ["select", "distinct", "name", "from", "nurse", "order", "by", "name"], "question": "List the names of all distinct nurses ordered by alphabetical order?", "question_toks": ["List", "the", "names", "of", "all", "distinct", "nurses", "ordered", "by", "alphabetical", "order", "?"], "guid": 8539}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What are the first names of all employees that are professors ordered by date of birth?", "sql": "SELECT emp_fname FROM employee WHERE emp_jobcode  =  'PROF' ORDER BY emp_dob", "example": {"db_id": "college_1", "query": "SELECT emp_fname FROM employee WHERE emp_jobcode  =  'PROF' ORDER BY emp_dob", "query_toks": ["SELECT", "emp_fname", "FROM", "employee", "WHERE", "emp_jobcode", "=", "'PROF", "'", "ORDER", "BY", "emp_dob"], "query_toks_no_value": ["select", "emp_fname", "from", "employee", "where", "emp_jobcode", "=", "value", "order", "by", "emp_dob"], "question": "What are the first names of all employees that are professors ordered by date of birth?", "question_toks": ["What", "are", "the", "first", "names", "of", "all", "employees", "that", "are", "professors", "ordered", "by", "date", "of", "birth", "?"], "guid": 8540}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | Which courses are taught on days MTW?", "sql": "SELECT CName FROM COURSE WHERE Days  =  \"MTW\"", "example": {"db_id": "college_3", "query": "SELECT CName FROM COURSE WHERE Days  =  \"MTW\"", "query_toks": ["SELECT", "CName", "FROM", "COURSE", "WHERE", "Days", "=", "``", "MTW", "''"], "query_toks_no_value": ["select", "cname", "from", "course", "where", "days", "=", "value"], "question": "Which courses are taught on days MTW?", "question_toks": ["Which", "courses", "are", "taught", "on", "days", "MTW", "?"], "guid": 8541}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | What are the department name and room for the course INTRODUCTION TO COMPUTER SCIENCE?", "sql": "SELECT T2.Dname ,  T2.Room FROM COURSE AS T1 JOIN DEPARTMENT AS T2 ON T1.DNO  =  T2.DNO WHERE T1.CName  =  \"INTRODUCTION TO COMPUTER SCIENCE\"", "example": {"db_id": "college_3", "query": "SELECT T2.Dname ,  T2.Room FROM COURSE AS T1 JOIN DEPARTMENT AS T2 ON T1.DNO  =  T2.DNO WHERE T1.CName  =  \"INTRODUCTION TO COMPUTER SCIENCE\"", "query_toks": ["SELECT", "T2.Dname", ",", "T2.Room", "FROM", "COURSE", "AS", "T1", "JOIN", "DEPARTMENT", "AS", "T2", "ON", "T1.DNO", "=", "T2.DNO", "WHERE", "T1.CName", "=", "``", "INTRODUCTION", "TO", "COMPUTER", "SCIENCE", "''"], "query_toks_no_value": ["select", "t2", ".", "dname", ",", "t2", ".", "room", "from", "course", "as", "t1", "join", "department", "as", "t2", "on", "t1", ".", "dno", "=", "t2", ".", "dno", "where", "t1", ".", "cname", "=", "value"], "question": "What are the department name and room for the course INTRODUCTION TO COMPUTER SCIENCE?", "question_toks": ["What", "are", "the", "department", "name", "and", "room", "for", "the", "course", "INTRODUCTION", "TO", "COMPUTER", "SCIENCE", "?"], "guid": 8542}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | How many departments are in the division AS?", "sql": "SELECT count(*) FROM DEPARTMENT WHERE Division  =  \"AS\"", "example": {"db_id": "college_3", "query": "SELECT count(*) FROM DEPARTMENT WHERE Division  =  \"AS\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "DEPARTMENT", "WHERE", "Division", "=", "``", "AS", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "department", "where", "division", "=", "value"], "question": "How many departments are in the division AS?", "question_toks": ["How", "many", "departments", "are", "in", "the", "division", "AS", "?"], "guid": 8543}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | Which department has the highest average student GPA, and what is the average gpa?", "sql": "SELECT T2.dept_name ,  avg(T1.stu_gpa) FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY avg(T1.stu_gpa) DESC LIMIT 1", "example": {"db_id": "college_1", "query": "SELECT T2.dept_name ,  avg(T1.stu_gpa) FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY avg(T1.stu_gpa) DESC LIMIT 1", "query_toks": ["SELECT", "T2.dept_name", ",", "avg", "(", "T1.stu_gpa", ")", "FROM", "student", "AS", "T1", "JOIN", "department", "AS", "T2", "ON", "T1.dept_code", "=", "T2.dept_code", "GROUP", "BY", "T1.dept_code", "ORDER", "BY", "avg", "(", "T1.stu_gpa", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "dept_name", ",", "avg", "(", "t1", ".", "stu_gpa", ")", "from", "student", "as", "t1", "join", "department", "as", "t2", "on", "t1", ".", "dept_code", "=", "t2", ".", "dept_code", "group", "by", "t1", ".", "dept_code", "order", "by", "avg", "(", "t1", ".", "stu_gpa", ")", "desc", "limit", "value"], "question": "Which department has the highest average student GPA, and what is the average gpa?", "question_toks": ["Which", "department", "has", "the", "highest", "average", "student", "GPA", ",", "and", "what", "is", "the", "average", "gpa", "?"], "guid": 8544}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What is the total number of professors with a Ph.D. ?", "sql": "SELECT count(*) FROM professor WHERE prof_high_degree  =  'Ph.D.'", "example": {"db_id": "college_1", "query": "SELECT count(*) FROM professor WHERE prof_high_degree  =  'Ph.D.'", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "professor", "WHERE", "prof_high_degree", "=", "'Ph.D", ".", "'"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "professor", "where", "prof_high_degree", "=", "value"], "question": "What is the total number of professors with a Ph.D. ?", "question_toks": ["What", "is", "the", "total", "number", "of", "professors", "with", "a", "Ph.D.", "?"], "guid": 8545}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | Where is the history department?", "sql": "SELECT dept_address FROM department WHERE dept_name  =  'History'", "example": {"db_id": "college_1", "query": "SELECT dept_address FROM department WHERE dept_name  =  'History'", "query_toks": ["SELECT", "dept_address", "FROM", "department", "WHERE", "dept_name", "=", "'History", "'"], "query_toks_no_value": ["select", "dept_address", "from", "department", "where", "dept_name", "=", "value"], "question": "Where is the history department?", "question_toks": ["Where", "is", "the", "history", "department", "?"], "guid": 8546}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What is the first name of each student enrolled in class ACCT-211?", "sql": "SELECT T3.stu_fname FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T2.stu_num  =  T3.stu_num WHERE T1.crs_code  =  'ACCT-211'", "example": {"db_id": "college_1", "query": "SELECT T3.stu_fname FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T2.stu_num  =  T3.stu_num WHERE T1.crs_code  =  'ACCT-211'", "query_toks": ["SELECT", "T3.stu_fname", "FROM", "CLASS", "AS", "T1", "JOIN", "enroll", "AS", "T2", "ON", "T1.class_code", "=", "T2.class_code", "JOIN", "student", "AS", "T3", "ON", "T2.stu_num", "=", "T3.stu_num", "WHERE", "T1.crs_code", "=", "'ACCT-211", "'"], "query_toks_no_value": ["select", "t3", ".", "stu_fname", "from", "class", "as", "t1", "join", "enroll", "as", "t2", "on", "t1", ".", "class_code", "=", "t2", ".", "class_code", "join", "student", "as", "t3", "on", "t2", ".", "stu_num", "=", "t3", ".", "stu_num", "where", "t1", ".", "crs_code", "=", "value"], "question": "What is the first name of each student enrolled in class ACCT-211?", "question_toks": ["What", "is", "the", "first", "name", "of", "each", "student", "enrolled", "in", "class", "ACCT-211", "?"], "guid": 8547}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | Tell me the highest, lowest, and average cost of procedures.", "sql": "SELECT MAX(cost) ,  MIN(cost) ,  AVG(cost) FROM procedures", "example": {"db_id": "hospital_1", "query": "SELECT MAX(cost) ,  MIN(cost) ,  AVG(cost) FROM procedures", "query_toks": ["SELECT", "MAX", "(", "cost", ")", ",", "MIN", "(", "cost", ")", ",", "AVG", "(", "cost", ")", "FROM", "procedures"], "query_toks_no_value": ["select", "max", "(", "cost", ")", ",", "min", "(", "cost", ")", ",", "avg", "(", "cost", ")", "from", "procedures"], "question": "Tell me the highest, lowest, and average cost of procedures.", "question_toks": ["Tell", "me", "the", "highest", ",", "lowest", ",", "and", "average", "cost", "of", "procedures", "."], "guid": 8548}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | How many professors do have a Ph.D. degree?", "sql": "SELECT count(*) FROM professor WHERE prof_high_degree  =  'Ph.D.'", "example": {"db_id": "college_1", "query": "SELECT count(*) FROM professor WHERE prof_high_degree  =  'Ph.D.'", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "professor", "WHERE", "prof_high_degree", "=", "'Ph.D", ".", "'"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "professor", "where", "prof_high_degree", "=", "value"], "question": "How many professors do have a Ph.D. degree?", "question_toks": ["How", "many", "professors", "do", "have", "a", "Ph.D.", "degree", "?"], "guid": 8549}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | Find the department name and room of the course INTRODUCTION TO COMPUTER SCIENCE.", "sql": "SELECT T2.Dname ,  T2.Room FROM COURSE AS T1 JOIN DEPARTMENT AS T2 ON T1.DNO  =  T2.DNO WHERE T1.CName  =  \"INTRODUCTION TO COMPUTER SCIENCE\"", "example": {"db_id": "college_3", "query": "SELECT T2.Dname ,  T2.Room FROM COURSE AS T1 JOIN DEPARTMENT AS T2 ON T1.DNO  =  T2.DNO WHERE T1.CName  =  \"INTRODUCTION TO COMPUTER SCIENCE\"", "query_toks": ["SELECT", "T2.Dname", ",", "T2.Room", "FROM", "COURSE", "AS", "T1", "JOIN", "DEPARTMENT", "AS", "T2", "ON", "T1.DNO", "=", "T2.DNO", "WHERE", "T1.CName", "=", "``", "INTRODUCTION", "TO", "COMPUTER", "SCIENCE", "''"], "query_toks_no_value": ["select", "t2", ".", "dname", ",", "t2", ".", "room", "from", "course", "as", "t1", "join", "department", "as", "t2", "on", "t1", ".", "dno", "=", "t2", ".", "dno", "where", "t1", ".", "cname", "=", "value"], "question": "Find the department name and room of the course INTRODUCTION TO COMPUTER SCIENCE.", "question_toks": ["Find", "the", "department", "name", "and", "room", "of", "the", "course", "INTRODUCTION", "TO", "COMPUTER", "SCIENCE", "."], "guid": 8550}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | How many CSU campuses are there?", "sql": "SELECT count(*) FROM campuses", "example": {"db_id": "csu_1", "query": "SELECT count(*) FROM campuses", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "campuses"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "campuses"], "question": "How many CSU campuses are there?", "question_toks": ["How", "many", "CSU", "campuses", "are", "there", "?"], "guid": 8551}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Give the name and building of the departments with greater than average budget.", "sql": "SELECT dept_name ,  building FROM department WHERE budget  >  (SELECT avg(budget) FROM department)", "example": {"db_id": "college_2", "query": "SELECT dept_name ,  building FROM department WHERE budget  >  (SELECT avg(budget) FROM department)", "query_toks": ["SELECT", "dept_name", ",", "building", "FROM", "department", "WHERE", "budget", ">", "(", "SELECT", "avg", "(", "budget", ")", "FROM", "department", ")"], "query_toks_no_value": ["select", "dept_name", ",", "building", "from", "department", "where", "budget", ">", "(", "select", "avg", "(", "budget", ")", "from", "department", ")"], "question": "Give the name and building of the departments with greater than average budget.", "question_toks": ["Give", "the", "name", "and", "building", "of", "the", "departments", "with", "greater", "than", "average", "budget", "."], "guid": 8552}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | What is the alphabetically ordered list of all distinct medications?", "sql": "SELECT DISTINCT name FROM medication ORDER BY name", "example": {"db_id": "hospital_1", "query": "SELECT DISTINCT name FROM medication ORDER BY name", "query_toks": ["SELECT", "DISTINCT", "name", "FROM", "medication", "ORDER", "BY", "name"], "query_toks_no_value": ["select", "distinct", "name", "from", "medication", "order", "by", "name"], "question": "What is the alphabetically ordered list of all distinct medications?", "question_toks": ["What", "is", "the", "alphabetically", "ordered", "list", "of", "all", "distinct", "medications", "?"], "guid": 8553}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | Find the first names of professors who are teaching more than one class.", "sql": "SELECT T2.emp_fname FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num GROUP BY T1.prof_num HAVING count(*)  >  1", "example": {"db_id": "college_1", "query": "SELECT T2.emp_fname FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num GROUP BY T1.prof_num HAVING count(*)  >  1", "query_toks": ["SELECT", "T2.emp_fname", "FROM", "CLASS", "AS", "T1", "JOIN", "employee", "AS", "T2", "ON", "T1.prof_num", "=", "T2.emp_num", "GROUP", "BY", "T1.prof_num", "HAVING", "count", "(", "*", ")", ">", "1"], "query_toks_no_value": ["select", "t2", ".", "emp_fname", "from", "class", "as", "t1", "join", "employee", "as", "t2", "on", "t1", ".", "prof_num", "=", "t2", ".", "emp_num", "group", "by", "t1", ".", "prof_num", "having", "count", "(", "*", ")", ">", "value"], "question": "Find the first names of professors who are teaching more than one class.", "question_toks": ["Find", "the", "first", "names", "of", "professors", "who", "are", "teaching", "more", "than", "one", "class", "."], "guid": 8554}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | Find the physician who prescribed the highest dose. What is his or her name?", "sql": "SELECT T1.name FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician ORDER BY T2.dose DESC LIMIT 1", "example": {"db_id": "hospital_1", "query": "SELECT T1.name FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician ORDER BY T2.dose DESC LIMIT 1", "query_toks": ["SELECT", "T1.name", "FROM", "physician", "AS", "T1", "JOIN", "prescribes", "AS", "T2", "ON", "T1.employeeid", "=", "T2.physician", "ORDER", "BY", "T2.dose", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "physician", "as", "t1", "join", "prescribes", "as", "t2", "on", "t1", ".", "employeeid", "=", "t2", ".", "physician", "order", "by", "t2", ".", "dose", "desc", "limit", "value"], "question": "Find the physician who prescribed the highest dose. What is his or her name?", "question_toks": ["Find", "the", "physician", "who", "prescribed", "the", "highest", "dose", ".", "What", "is", "his", "or", "her", "name", "?"], "guid": 8555}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | What campus had more than 400 total enrollment but more than 200 full time enrollment in year 1956?", "sql": "SELECT T1.campus FROM campuses AS t1 JOIN enrollments AS t2 ON t1.id  =  t2.campus WHERE t2.year  =  1956 AND totalenrollment_ay  >  400 AND FTE_AY  >  200", "example": {"db_id": "csu_1", "query": "SELECT T1.campus FROM campuses AS t1 JOIN enrollments AS t2 ON t1.id  =  t2.campus WHERE t2.year  =  1956 AND totalenrollment_ay  >  400 AND FTE_AY  >  200", "query_toks": ["SELECT", "T1.campus", "FROM", "campuses", "AS", "t1", "JOIN", "enrollments", "AS", "t2", "ON", "t1.id", "=", "t2.campus", "WHERE", "t2.year", "=", "1956", "AND", "totalenrollment_ay", ">", "400", "AND", "FTE_AY", ">", "200"], "query_toks_no_value": ["select", "t1", ".", "campus", "from", "campuses", "as", "t1", "join", "enrollments", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "campus", "where", "t2", ".", "year", "=", "value", "and", "totalenrollment_ay", ">", "value", "and", "fte_ay", ">", "value"], "question": "What campus had more than 400 total enrollment but more than 200 full time enrollment in year 1956?", "question_toks": ["What", "campus", "had", "more", "than", "400", "total", "enrollment", "but", "more", "than", "200", "full", "time", "enrollment", "in", "year", "1956", "?"], "guid": 8556}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | How many faculty lines are there in the university that conferred the most number of degrees in year 2002?", "sql": "SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  t2.campus JOIN degrees AS T3 ON T1.id  =  t3.campus AND t2.year  =  t3.year WHERE t2.year  =  2002 ORDER BY t3.degrees DESC LIMIT 1", "example": {"db_id": "csu_1", "query": "SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  t2.campus JOIN degrees AS T3 ON T1.id  =  t3.campus AND t2.year  =  t3.year WHERE t2.year  =  2002 ORDER BY t3.degrees DESC LIMIT 1", "query_toks": ["SELECT", "T2.faculty", "FROM", "campuses", "AS", "T1", "JOIN", "faculty", "AS", "T2", "ON", "T1.id", "=", "t2.campus", "JOIN", "degrees", "AS", "T3", "ON", "T1.id", "=", "t3.campus", "AND", "t2.year", "=", "t3.year", "WHERE", "t2.year", "=", "2002", "ORDER", "BY", "t3.degrees", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "faculty", "from", "campuses", "as", "t1", "join", "faculty", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "campus", "join", "degrees", "as", "t3", "on", "t1", ".", "id", "=", "t3", ".", "campus", "and", "t2", ".", "year", "=", "t3", ".", "year", "where", "t2", ".", "year", "=", "value", "order", "by", "t3", ".", "degrees", "desc", "limit", "value"], "question": "How many faculty lines are there in the university that conferred the most number of degrees in year 2002?", "question_toks": ["How", "many", "faculty", "lines", "are", "there", "in", "the", "university", "that", "conferred", "the", "most", "number", "of", "degrees", "in", "year", "2002", "?"], "guid": 8557}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | What are the building, room number, semester and year of courses in the Psychology department, sorted using course title?", "sql": "SELECT T2.building ,  T2.room_number ,  T2.semester ,  T2.year FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE T1.dept_name  =  'Psychology' ORDER BY T1.title", "example": {"db_id": "college_2", "query": "SELECT T2.building ,  T2.room_number ,  T2.semester ,  T2.year FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE T1.dept_name  =  'Psychology' ORDER BY T1.title", "query_toks": ["SELECT", "T2.building", ",", "T2.room_number", ",", "T2.semester", ",", "T2.year", "FROM", "course", "AS", "T1", "JOIN", "SECTION", "AS", "T2", "ON", "T1.course_id", "=", "T2.course_id", "WHERE", "T1.dept_name", "=", "'Psychology", "'", "ORDER", "BY", "T1.title"], "query_toks_no_value": ["select", "t2", ".", "building", ",", "t2", ".", "room_number", ",", "t2", ".", "semester", ",", "t2", ".", "year", "from", "course", "as", "t1", "join", "section", "as", "t2", "on", "t1", ".", "course_id", "=", "t2", ".", "course_id", "where", "t1", ".", "dept_name", "=", "value", "order", "by", "t1", ".", "title"], "question": "What are the building, room number, semester and year of courses in the Psychology department, sorted using course title?", "question_toks": ["What", "are", "the", "building", ",", "room", "number", ",", "semester", "and", "year", "of", "courses", "in", "the", "Psychology", "department", ",", "sorted", "using", "course", "title", "?"], "guid": 8558}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | How many total credits are offered by each department?", "sql": "SELECT sum(credits) ,  dept_name FROM course GROUP BY dept_name", "example": {"db_id": "college_2", "query": "SELECT sum(credits) ,  dept_name FROM course GROUP BY dept_name", "query_toks": ["SELECT", "sum", "(", "credits", ")", ",", "dept_name", "FROM", "course", "GROUP", "BY", "dept_name"], "query_toks_no_value": ["select", "sum", "(", "credits", ")", ",", "dept_name", "from", "course", "group", "by", "dept_name"], "question": "How many total credits are offered by each department?", "question_toks": ["How", "many", "total", "credits", "are", "offered", "by", "each", "department", "?"], "guid": 8559}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | How many credits does the department offer?", "sql": "SELECT sum(crs_credit) ,  dept_code FROM course GROUP BY dept_code", "example": {"db_id": "college_1", "query": "SELECT sum(crs_credit) ,  dept_code FROM course GROUP BY dept_code", "query_toks": ["SELECT", "sum", "(", "crs_credit", ")", ",", "dept_code", "FROM", "course", "GROUP", "BY", "dept_code"], "query_toks_no_value": ["select", "sum", "(", "crs_credit", ")", ",", "dept_code", "from", "course", "group", "by", "dept_code"], "question": "How many credits does the department offer?", "question_toks": ["How", "many", "credits", "does", "the", "department", "offer", "?"], "guid": 8560}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | How many rooms does each block floor have?", "sql": "SELECT count(*) ,  T1.blockfloor FROM BLOCK AS T1 JOIN room AS T2 ON T1.blockfloor  =  T2.blockfloor AND T1.blockcode  =  T2.blockcode GROUP BY T1.blockfloor", "example": {"db_id": "hospital_1", "query": "SELECT count(*) ,  T1.blockfloor FROM BLOCK AS T1 JOIN room AS T2 ON T1.blockfloor  =  T2.blockfloor AND T1.blockcode  =  T2.blockcode GROUP BY T1.blockfloor", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "T1.blockfloor", "FROM", "BLOCK", "AS", "T1", "JOIN", "room", "AS", "T2", "ON", "T1.blockfloor", "=", "T2.blockfloor", "AND", "T1.blockcode", "=", "T2.blockcode", "GROUP", "BY", "T1.blockfloor"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "t1", ".", "blockfloor", "from", "block", "as", "t1", "join", "room", "as", "t2", "on", "t1", ".", "blockfloor", "=", "t2", ".", "blockfloor", "and", "t1", ".", "blockcode", "=", "t2", ".", "blockcode", "group", "by", "t1", ".", "blockfloor"], "question": "How many rooms does each block floor have?", "question_toks": ["How", "many", "rooms", "does", "each", "block", "floor", "have", "?"], "guid": 8561}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | What are the names of the physician who prescribed the highest dose?", "sql": "SELECT T1.name FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician ORDER BY T2.dose DESC LIMIT 1", "example": {"db_id": "hospital_1", "query": "SELECT T1.name FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician ORDER BY T2.dose DESC LIMIT 1", "query_toks": ["SELECT", "T1.name", "FROM", "physician", "AS", "T1", "JOIN", "prescribes", "AS", "T2", "ON", "T1.employeeid", "=", "T2.physician", "ORDER", "BY", "T2.dose", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "physician", "as", "t1", "join", "prescribes", "as", "t2", "on", "t1", ".", "employeeid", "=", "t2", ".", "physician", "order", "by", "t2", ".", "dose", "desc", "limit", "value"], "question": "What are the names of the physician who prescribed the highest dose?", "question_toks": ["What", "are", "the", "names", "of", "the", "physician", "who", "prescribed", "the", "highest", "dose", "?"], "guid": 8562}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | How many undergraduates are there in \"San Jose State University\" in year 2004?", "sql": "SELECT sum(t1.undergraduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t1.year  =  2004 AND t2.campus  =  \"San Jose State University\"", "example": {"db_id": "csu_1", "query": "SELECT sum(t1.undergraduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t1.year  =  2004 AND t2.campus  =  \"San Jose State University\"", "query_toks": ["SELECT", "sum", "(", "t1.undergraduate", ")", "FROM", "discipline_enrollments", "AS", "t1", "JOIN", "campuses", "AS", "t2", "ON", "t1.campus", "=", "t2.id", "WHERE", "t1.year", "=", "2004", "AND", "t2.campus", "=", "``", "San", "Jose", "State", "University", "''"], "query_toks_no_value": ["select", "sum", "(", "t1", ".", "undergraduate", ")", "from", "discipline_enrollments", "as", "t1", "join", "campuses", "as", "t2", "on", "t1", ".", "campus", "=", "t2", ".", "id", "where", "t1", ".", "year", "=", "value", "and", "t2", ".", "campus", "=", "value"], "question": "How many undergraduates are there in \"San Jose State University\" in year 2004?", "question_toks": ["How", "many", "undergraduates", "are", "there", "in", "``", "San", "Jose", "State", "University", "''", "in", "year", "2004", "?"], "guid": 8563}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | Find the number of different departments in each school whose number of different departments is less than 5.", "sql": "SELECT count(DISTINCT dept_name) ,  school_code FROM department GROUP BY school_code HAVING count(DISTINCT dept_name)  <  5", "example": {"db_id": "college_1", "query": "SELECT count(DISTINCT dept_name) ,  school_code FROM department GROUP BY school_code HAVING count(DISTINCT dept_name)  <  5", "query_toks": ["SELECT", "count", "(", "DISTINCT", "dept_name", ")", ",", "school_code", "FROM", "department", "GROUP", "BY", "school_code", "HAVING", "count", "(", "DISTINCT", "dept_name", ")", "<", "5"], "query_toks_no_value": ["select", "count", "(", "distinct", "dept_name", ")", ",", "school_code", "from", "department", "group", "by", "school_code", "having", "count", "(", "distinct", "dept_name", ")", "<", "value"], "question": "Find the number of different departments in each school whose number of different departments is less than 5.", "question_toks": ["Find", "the", "number", "of", "different", "departments", "in", "each", "school", "whose", "number", "of", "different", "departments", "is", "less", "than", "5", "."], "guid": 8564}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | What are the names and salaries of instructors who advise students in the Math department?", "sql": "SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'Math'", "example": {"db_id": "college_2", "query": "SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'Math'", "query_toks": ["SELECT", "T2.name", ",", "T2.salary", "FROM", "advisor", "AS", "T1", "JOIN", "instructor", "AS", "T2", "ON", "T1.i_id", "=", "T2.id", "JOIN", "student", "AS", "T3", "ON", "T1.s_id", "=", "T3.id", "WHERE", "T3.dept_name", "=", "'Math", "'"], "query_toks_no_value": ["select", "t2", ".", "name", ",", "t2", ".", "salary", "from", "advisor", "as", "t1", "join", "instructor", "as", "t2", "on", "t1", ".", "i_id", "=", "t2", ".", "id", "join", "student", "as", "t3", "on", "t1", ".", "s_id", "=", "t3", ".", "id", "where", "t3", ".", "dept_name", "=", "value"], "question": "What are the names and salaries of instructors who advise students in the Math department?", "question_toks": ["What", "are", "the", "names", "and", "salaries", "of", "instructors", "who", "advise", "students", "in", "the", "Math", "department", "?"], "guid": 8565}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | How many faculty lines are there in the university that conferred the least number of degrees in year 2001?", "sql": "SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  t2.campus JOIN degrees AS T3 ON T1.id  =  t3.campus AND t2.year  =  t3.year WHERE t2.year  =  2001 ORDER BY t3.degrees LIMIT 1", "example": {"db_id": "csu_1", "query": "SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  t2.campus JOIN degrees AS T3 ON T1.id  =  t3.campus AND t2.year  =  t3.year WHERE t2.year  =  2001 ORDER BY t3.degrees LIMIT 1", "query_toks": ["SELECT", "T2.faculty", "FROM", "campuses", "AS", "T1", "JOIN", "faculty", "AS", "T2", "ON", "T1.id", "=", "t2.campus", "JOIN", "degrees", "AS", "T3", "ON", "T1.id", "=", "t3.campus", "AND", "t2.year", "=", "t3.year", "WHERE", "t2.year", "=", "2001", "ORDER", "BY", "t3.degrees", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "faculty", "from", "campuses", "as", "t1", "join", "faculty", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "campus", "join", "degrees", "as", "t3", "on", "t1", ".", "id", "=", "t3", ".", "campus", "and", "t2", ".", "year", "=", "t3", ".", "year", "where", "t2", ".", "year", "=", "value", "order", "by", "t3", ".", "degrees", "limit", "value"], "question": "How many faculty lines are there in the university that conferred the least number of degrees in year 2001?", "question_toks": ["How", "many", "faculty", "lines", "are", "there", "in", "the", "university", "that", "conferred", "the", "least", "number", "of", "degrees", "in", "year", "2001", "?"], "guid": 8566}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Find the title of course that is provided by Statistics but not Psychology departments.", "sql": "SELECT title FROM course WHERE dept_name  =  'Statistics' EXCEPT SELECT title FROM course WHERE dept_name  =  'Psychology'", "example": {"db_id": "college_2", "query": "SELECT title FROM course WHERE dept_name  =  'Statistics' EXCEPT SELECT title FROM course WHERE dept_name  =  'Psychology'", "query_toks": ["SELECT", "title", "FROM", "course", "WHERE", "dept_name", "=", "'Statistics", "'", "EXCEPT", "SELECT", "title", "FROM", "course", "WHERE", "dept_name", "=", "'Psychology", "'"], "query_toks_no_value": ["select", "title", "from", "course", "where", "dept_name", "=", "value", "except", "select", "title", "from", "course", "where", "dept_name", "=", "value"], "question": "Find the title of course that is provided by Statistics but not Psychology departments.", "question_toks": ["Find", "the", "title", "of", "course", "that", "is", "provided", "by", "Statistics", "but", "not", "Psychology", "departments", "."], "guid": 8567}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | Which physicians are affiliated with either Surgery or Psychiatry department? Give me their names.", "sql": "SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T3.name  =  'Surgery' OR T3.name  =  'Psychiatry'", "example": {"db_id": "hospital_1", "query": "SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T3.name  =  'Surgery' OR T3.name  =  'Psychiatry'", "query_toks": ["SELECT", "T1.name", "FROM", "physician", "AS", "T1", "JOIN", "affiliated_with", "AS", "T2", "ON", "T1.EmployeeID", "=", "T2.physician", "JOIN", "department", "AS", "T3", "ON", "T2.department", "=", "T3.DepartmentID", "WHERE", "T3.name", "=", "'Surgery", "'", "OR", "T3.name", "=", "'Psychiatry", "'"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "physician", "as", "t1", "join", "affiliated_with", "as", "t2", "on", "t1", ".", "employeeid", "=", "t2", ".", "physician", "join", "department", "as", "t3", "on", "t2", ".", "department", "=", "t3", ".", "departmentid", "where", "t3", ".", "name", "=", "value", "or", "t3", ".", "name", "=", "value"], "question": "Which physicians are affiliated with either Surgery or Psychiatry department? Give me their names.", "question_toks": ["Which", "physicians", "are", "affiliated", "with", "either", "Surgery", "or", "Psychiatry", "department", "?", "Give", "me", "their", "names", "."], "guid": 8568}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | How many undergraduates are there at San Jose State", "sql": "SELECT sum(t1.undergraduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t1.year  =  2004 AND t2.campus  =  \"San Jose State University\"", "example": {"db_id": "csu_1", "query": "SELECT sum(t1.undergraduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t1.year  =  2004 AND t2.campus  =  \"San Jose State University\"", "query_toks": ["SELECT", "sum", "(", "t1.undergraduate", ")", "FROM", "discipline_enrollments", "AS", "t1", "JOIN", "campuses", "AS", "t2", "ON", "t1.campus", "=", "t2.id", "WHERE", "t1.year", "=", "2004", "AND", "t2.campus", "=", "``", "San", "Jose", "State", "University", "''"], "query_toks_no_value": ["select", "sum", "(", "t1", ".", "undergraduate", ")", "from", "discipline_enrollments", "as", "t1", "join", "campuses", "as", "t2", "on", "t1", ".", "campus", "=", "t2", ".", "id", "where", "t1", ".", "year", "=", "value", "and", "t2", ".", "campus", "=", "value"], "question": "How many undergraduates are there at San Jose State", "question_toks": ["How", "many", "undergraduates", "are", "there", "at", "San", "Jose", "State"], "guid": 8569}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What are the description and credit of the course which the student whose last name is Smithson took?", "sql": "SELECT T4.crs_description ,  T4.crs_credit FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T3.stu_num  =  T2.stu_num JOIN course AS T4 ON T4.crs_code  =  T1.crs_code WHERE T3.stu_lname  =  'Smithson'", "example": {"db_id": "college_1", "query": "SELECT T4.crs_description ,  T4.crs_credit FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T3.stu_num  =  T2.stu_num JOIN course AS T4 ON T4.crs_code  =  T1.crs_code WHERE T3.stu_lname  =  'Smithson'", "query_toks": ["SELECT", "T4.crs_description", ",", "T4.crs_credit", "FROM", "CLASS", "AS", "T1", "JOIN", "enroll", "AS", "T2", "ON", "T1.class_code", "=", "T2.class_code", "JOIN", "student", "AS", "T3", "ON", "T3.stu_num", "=", "T2.stu_num", "JOIN", "course", "AS", "T4", "ON", "T4.crs_code", "=", "T1.crs_code", "WHERE", "T3.stu_lname", "=", "'Smithson", "'"], "query_toks_no_value": ["select", "t4", ".", "crs_description", ",", "t4", ".", "crs_credit", "from", "class", "as", "t1", "join", "enroll", "as", "t2", "on", "t1", ".", "class_code", "=", "t2", ".", "class_code", "join", "student", "as", "t3", "on", "t3", ".", "stu_num", "=", "t2", ".", "stu_num", "join", "course", "as", "t4", "on", "t4", ".", "crs_code", "=", "t1", ".", "crs_code", "where", "t3", ".", "stu_lname", "=", "value"], "question": "What are the description and credit of the course which the student whose last name is Smithson took?", "question_toks": ["What", "are", "the", "description", "and", "credit", "of", "the", "course", "which", "the", "student", "whose", "last", "name", "is", "Smithson", "took", "?"], "guid": 8570}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | Find the first name and gpa of the students whose gpa is lower than the average gpa of all students.", "sql": "SELECT stu_fname ,  stu_gpa FROM student WHERE stu_gpa  <  (SELECT avg(stu_gpa) FROM student)", "example": {"db_id": "college_1", "query": "SELECT stu_fname ,  stu_gpa FROM student WHERE stu_gpa  <  (SELECT avg(stu_gpa) FROM student)", "query_toks": ["SELECT", "stu_fname", ",", "stu_gpa", "FROM", "student", "WHERE", "stu_gpa", "<", "(", "SELECT", "avg", "(", "stu_gpa", ")", "FROM", "student", ")"], "query_toks_no_value": ["select", "stu_fname", ",", "stu_gpa", "from", "student", "where", "stu_gpa", "<", "(", "select", "avg", "(", "stu_gpa", ")", "from", "student", ")"], "question": "Find the first name and gpa of the students whose gpa is lower than the average gpa of all students.", "question_toks": ["Find", "the", "first", "name", "and", "gpa", "of", "the", "students", "whose", "gpa", "is", "lower", "than", "the", "average", "gpa", "of", "all", "students", "."], "guid": 8571}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | What is the maximum and minimum grade point of students who live in NYC?", "sql": "SELECT max(T2.gradepoint) ,  min(T2.gradepoint) FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID WHERE T3.city_code  =  \"NYC\"", "example": {"db_id": "college_3", "query": "SELECT max(T2.gradepoint) ,  min(T2.gradepoint) FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID WHERE T3.city_code  =  \"NYC\"", "query_toks": ["SELECT", "max", "(", "T2.gradepoint", ")", ",", "min", "(", "T2.gradepoint", ")", "FROM", "ENROLLED_IN", "AS", "T1", "JOIN", "GRADECONVERSION", "AS", "T2", "JOIN", "STUDENT", "AS", "T3", "ON", "T1.Grade", "=", "T2.lettergrade", "AND", "T1.StuID", "=", "T3.StuID", "WHERE", "T3.city_code", "=", "``", "NYC", "''"], "query_toks_no_value": ["select", "max", "(", "t2", ".", "gradepoint", ")", ",", "min", "(", "t2", ".", "gradepoint", ")", "from", "enrolled_in", "as", "t1", "join", "gradeconversion", "as", "t2", "join", "student", "as", "t3", "on", "t1", ".", "grade", "=", "t2", ".", "lettergrade", "and", "t1", ".", "stuid", "=", "t3", ".", "stuid", "where", "t3", ".", "city_code", "=", "value"], "question": "What is the maximum and minimum grade point of students who live in NYC?", "question_toks": ["What", "is", "the", "maximum", "and", "minimum", "grade", "point", "of", "students", "who", "live", "in", "NYC", "?"], "guid": 8572}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | Find the names of procedures which physician John Wen was trained in.", "sql": "SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"", "example": {"db_id": "hospital_1", "query": "SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"", "query_toks": ["SELECT", "T3.name", "FROM", "physician", "AS", "T1", "JOIN", "trained_in", "AS", "T2", "ON", "T1.employeeid", "=", "T2.physician", "JOIN", "procedures", "AS", "T3", "ON", "T3.code", "=", "T2.treatment", "WHERE", "T1.name", "=", "``", "John", "Wen", "''"], "query_toks_no_value": ["select", "t3", ".", "name", "from", "physician", "as", "t1", "join", "trained_in", "as", "t2", "on", "t1", ".", "employeeid", "=", "t2", ".", "physician", "join", "procedures", "as", "t3", "on", "t3", ".", "code", "=", "t2", ".", "treatment", "where", "t1", ".", "name", "=", "value"], "question": "Find the names of procedures which physician John Wen was trained in.", "question_toks": ["Find", "the", "names", "of", "procedures", "which", "physician", "John", "Wen", "was", "trained", "in", "."], "guid": 8573}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | What are the ids of instructors who didnt' teach?", "sql": "SELECT id FROM instructor EXCEPT SELECT id FROM teaches", "example": {"db_id": "college_2", "query": "SELECT id FROM instructor EXCEPT SELECT id FROM teaches", "query_toks": ["SELECT", "id", "FROM", "instructor", "EXCEPT", "SELECT", "id", "FROM", "teaches"], "query_toks_no_value": ["select", "id", "from", "instructor", "except", "select", "id", "from", "teaches"], "question": "What are the ids of instructors who didnt' teach?", "question_toks": ["What", "are", "the", "ids", "of", "instructors", "who", "didnt", "'", "teach", "?"], "guid": 8574}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | List all information about courses sorted by credits in the ascending order.", "sql": "SELECT * FROM COURSE ORDER BY Credits", "example": {"db_id": "college_3", "query": "SELECT * FROM COURSE ORDER BY Credits", "query_toks": ["SELECT", "*", "FROM", "COURSE", "ORDER", "BY", "Credits"], "query_toks_no_value": ["select", "*", "from", "course", "order", "by", "credits"], "question": "List all information about courses sorted by credits in the ascending order.", "question_toks": ["List", "all", "information", "about", "courses", "sorted", "by", "credits", "in", "the", "ascending", "order", "."], "guid": 8575}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Find the name of the students who have more than one advisor?", "sql": "SELECT T1.name FROM student AS T1 JOIN advisor AS T2 ON T1.id  =  T2.s_id GROUP BY T2.s_id HAVING count(*)  >  1", "example": {"db_id": "college_2", "query": "SELECT T1.name FROM student AS T1 JOIN advisor AS T2 ON T1.id  =  T2.s_id GROUP BY T2.s_id HAVING count(*)  >  1", "query_toks": ["SELECT", "T1.name", "FROM", "student", "AS", "T1", "JOIN", "advisor", "AS", "T2", "ON", "T1.id", "=", "T2.s_id", "GROUP", "BY", "T2.s_id", "HAVING", "count", "(", "*", ")", ">", "1"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "student", "as", "t1", "join", "advisor", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "s_id", "group", "by", "t2", ".", "s_id", "having", "count", "(", "*", ")", ">", "value"], "question": "Find the name of the students who have more than one advisor?", "question_toks": ["Find", "the", "name", "of", "the", "students", "who", "have", "more", "than", "one", "advisor", "?"], "guid": 8576}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What is the name of department where has the smallest number of professors?", "sql": "SELECT T2.dept_name FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) LIMIT 1", "example": {"db_id": "college_1", "query": "SELECT T2.dept_name FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) LIMIT 1", "query_toks": ["SELECT", "T2.dept_name", "FROM", "professor", "AS", "T1", "JOIN", "department", "AS", "T2", "ON", "T1.dept_code", "=", "T2.dept_code", "GROUP", "BY", "T1.dept_code", "ORDER", "BY", "count", "(", "*", ")", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "dept_name", "from", "professor", "as", "t1", "join", "department", "as", "t2", "on", "t1", ".", "dept_code", "=", "t2", ".", "dept_code", "group", "by", "t1", ".", "dept_code", "order", "by", "count", "(", "*", ")", "limit", "value"], "question": "What is the name of department where has the smallest number of professors?", "question_toks": ["What", "is", "the", "name", "of", "department", "where", "has", "the", "smallest", "number", "of", "professors", "?"], "guid": 8577}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Find the id of the courses that do not have any prerequisite?", "sql": "SELECT course_id FROM course EXCEPT SELECT course_id FROM prereq", "example": {"db_id": "college_2", "query": "SELECT course_id FROM course EXCEPT SELECT course_id FROM prereq", "query_toks": ["SELECT", "course_id", "FROM", "course", "EXCEPT", "SELECT", "course_id", "FROM", "prereq"], "query_toks_no_value": ["select", "course_id", "from", "course", "except", "select", "course_id", "from", "prereq"], "question": "Find the id of the courses that do not have any prerequisite?", "question_toks": ["Find", "the", "id", "of", "the", "courses", "that", "do", "not", "have", "any", "prerequisite", "?"], "guid": 8578}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | How many courses does the department of Computer Information Systmes offer?", "sql": "SELECT count(*) FROM department AS T1 JOIN course AS T2 ON T1.dept_code  =  T2.dept_code WHERE dept_name  =  \"Computer Info. Systems\"", "example": {"db_id": "college_1", "query": "SELECT count(*) FROM department AS T1 JOIN course AS T2 ON T1.dept_code  =  T2.dept_code WHERE dept_name  =  \"Computer Info. Systems\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "department", "AS", "T1", "JOIN", "course", "AS", "T2", "ON", "T1.dept_code", "=", "T2.dept_code", "WHERE", "dept_name", "=", "``", "Computer", "Info", ".", "Systems", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "department", "as", "t1", "join", "course", "as", "t2", "on", "t1", ".", "dept_code", "=", "t2", ".", "dept_code", "where", "dept_name", "=", "value"], "question": "How many courses does the department of Computer Information Systmes offer?", "question_toks": ["How", "many", "courses", "does", "the", "department", "of", "Computer", "Information", "Systmes", "offer", "?"], "guid": 8579}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | How many faculty members did the university that conferred the most degrees in 2002 have?", "sql": "SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  t2.campus JOIN degrees AS T3 ON T1.id  =  t3.campus AND t2.year  =  t3.year WHERE t2.year  =  2002 ORDER BY t3.degrees DESC LIMIT 1", "example": {"db_id": "csu_1", "query": "SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  t2.campus JOIN degrees AS T3 ON T1.id  =  t3.campus AND t2.year  =  t3.year WHERE t2.year  =  2002 ORDER BY t3.degrees DESC LIMIT 1", "query_toks": ["SELECT", "T2.faculty", "FROM", "campuses", "AS", "T1", "JOIN", "faculty", "AS", "T2", "ON", "T1.id", "=", "t2.campus", "JOIN", "degrees", "AS", "T3", "ON", "T1.id", "=", "t3.campus", "AND", "t2.year", "=", "t3.year", "WHERE", "t2.year", "=", "2002", "ORDER", "BY", "t3.degrees", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "faculty", "from", "campuses", "as", "t1", "join", "faculty", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "campus", "join", "degrees", "as", "t3", "on", "t1", ".", "id", "=", "t3", ".", "campus", "and", "t2", ".", "year", "=", "t3", ".", "year", "where", "t2", ".", "year", "=", "value", "order", "by", "t3", ".", "degrees", "desc", "limit", "value"], "question": "How many faculty members did the university that conferred the most degrees in 2002 have?", "question_toks": ["How", "many", "faculty", "members", "did", "the", "university", "that", "conferred", "the", "most", "degrees", "in", "2002", "have", "?"], "guid": 8580}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | Find the name of the department that has the fewest members.", "sql": "SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MEMBER_OF AS T2 ON T1.DNO  =  T2.DNO GROUP BY T2.DNO ORDER BY count(*) ASC LIMIT 1", "example": {"db_id": "college_3", "query": "SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MEMBER_OF AS T2 ON T1.DNO  =  T2.DNO GROUP BY T2.DNO ORDER BY count(*) ASC LIMIT 1", "query_toks": ["SELECT", "T1.DName", "FROM", "DEPARTMENT", "AS", "T1", "JOIN", "MEMBER_OF", "AS", "T2", "ON", "T1.DNO", "=", "T2.DNO", "GROUP", "BY", "T2.DNO", "ORDER", "BY", "count", "(", "*", ")", "ASC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "dname", "from", "department", "as", "t1", "join", "member_of", "as", "t2", "on", "t1", ".", "dno", "=", "t2", ".", "dno", "group", "by", "t2", ".", "dno", "order", "by", "count", "(", "*", ")", "asc", "limit", "value"], "question": "Find the name of the department that has the fewest members.", "question_toks": ["Find", "the", "name", "of", "the", "department", "that", "has", "the", "fewest", "members", "."], "guid": 8581}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What is the first and last name of the professor in biology department?", "sql": "SELECT T3.EMP_FNAME ,  T3.EMP_LNAME FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code JOIN employee AS T3 ON T1.EMP_NUM  =  T3.EMP_NUM WHERE DEPT_NAME  =  \"Biology\"", "example": {"db_id": "college_1", "query": "SELECT T3.EMP_FNAME ,  T3.EMP_LNAME FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code JOIN employee AS T3 ON T1.EMP_NUM  =  T3.EMP_NUM WHERE DEPT_NAME  =  \"Biology\"", "query_toks": ["SELECT", "T3.EMP_FNAME", ",", "T3.EMP_LNAME", "FROM", "professor", "AS", "T1", "JOIN", "department", "AS", "T2", "ON", "T1.dept_code", "=", "T2.dept_code", "JOIN", "employee", "AS", "T3", "ON", "T1.EMP_NUM", "=", "T3.EMP_NUM", "WHERE", "DEPT_NAME", "=", "``", "Biology", "''"], "query_toks_no_value": ["select", "t3", ".", "emp_fname", ",", "t3", ".", "emp_lname", "from", "professor", "as", "t1", "join", "department", "as", "t2", "on", "t1", ".", "dept_code", "=", "t2", ".", "dept_code", "join", "employee", "as", "t3", "on", "t1", ".", "emp_num", "=", "t3", ".", "emp_num", "where", "dept_name", "=", "value"], "question": "What is the first and last name of the professor in biology department?", "question_toks": ["What", "is", "the", "first", "and", "last", "name", "of", "the", "professor", "in", "biology", "department", "?"], "guid": 8582}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | Find the patient who has the most recent undergoing treatment?", "sql": "SELECT patient FROM undergoes ORDER BY dateundergoes LIMIT 1", "example": {"db_id": "hospital_1", "query": "SELECT patient FROM undergoes ORDER BY dateundergoes LIMIT 1", "query_toks": ["SELECT", "patient", "FROM", "undergoes", "ORDER", "BY", "dateundergoes", "LIMIT", "1"], "query_toks_no_value": ["select", "patient", "from", "undergoes", "order", "by", "dateundergoes", "limit", "value"], "question": "Find the patient who has the most recent undergoing treatment?", "question_toks": ["Find", "the", "patient", "who", "has", "the", "most", "recent", "undergoing", "treatment", "?"], "guid": 8583}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What is the average gpa of the students enrolled in the course with code ACCT-211?", "sql": "SELECT avg(T2.stu_gpa) FROM enroll AS T1 JOIN student AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T1.class_code  =  T3.class_code WHERE T3.crs_code  =  'ACCT-211'", "example": {"db_id": "college_1", "query": "SELECT avg(T2.stu_gpa) FROM enroll AS T1 JOIN student AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T1.class_code  =  T3.class_code WHERE T3.crs_code  =  'ACCT-211'", "query_toks": ["SELECT", "avg", "(", "T2.stu_gpa", ")", "FROM", "enroll", "AS", "T1", "JOIN", "student", "AS", "T2", "ON", "T1.stu_num", "=", "T2.stu_num", "JOIN", "CLASS", "AS", "T3", "ON", "T1.class_code", "=", "T3.class_code", "WHERE", "T3.crs_code", "=", "'ACCT-211", "'"], "query_toks_no_value": ["select", "avg", "(", "t2", ".", "stu_gpa", ")", "from", "enroll", "as", "t1", "join", "student", "as", "t2", "on", "t1", ".", "stu_num", "=", "t2", ".", "stu_num", "join", "class", "as", "t3", "on", "t1", ".", "class_code", "=", "t3", ".", "class_code", "where", "t3", ".", "crs_code", "=", "value"], "question": "What is the average gpa of the students enrolled in the course with code ACCT-211?", "question_toks": ["What", "is", "the", "average", "gpa", "of", "the", "students", "enrolled", "in", "the", "course", "with", "code", "ACCT-211", "?"], "guid": 8584}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What are the different locations of the school with the code BUS?", "sql": "SELECT count(DISTINCT dept_address) FROM department WHERE school_code  =  'BUS'", "example": {"db_id": "college_1", "query": "SELECT count(DISTINCT dept_address) FROM department WHERE school_code  =  'BUS'", "query_toks": ["SELECT", "count", "(", "DISTINCT", "dept_address", ")", "FROM", "department", "WHERE", "school_code", "=", "'BUS", "'"], "query_toks_no_value": ["select", "count", "(", "distinct", "dept_address", ")", "from", "department", "where", "school_code", "=", "value"], "question": "What are the different locations of the school with the code BUS?", "question_toks": ["What", "are", "the", "different", "locations", "of", "the", "school", "with", "the", "code", "BUS", "?"], "guid": 8585}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What is the first, last name, gpa of the youngest one among students whose GPA is above 3?", "sql": "SELECT stu_fname ,  stu_lname ,  stu_gpa FROM student WHERE stu_gpa  >  3 ORDER BY stu_dob DESC LIMIT 1", "example": {"db_id": "college_1", "query": "SELECT stu_fname ,  stu_lname ,  stu_gpa FROM student WHERE stu_gpa  >  3 ORDER BY stu_dob DESC LIMIT 1", "query_toks": ["SELECT", "stu_fname", ",", "stu_lname", ",", "stu_gpa", "FROM", "student", "WHERE", "stu_gpa", ">", "3", "ORDER", "BY", "stu_dob", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "stu_fname", ",", "stu_lname", ",", "stu_gpa", "from", "student", "where", "stu_gpa", ">", "value", "order", "by", "stu_dob", "desc", "limit", "value"], "question": "What is the first, last name, gpa of the youngest one among students whose GPA is above 3?", "question_toks": ["What", "is", "the", "first", ",", "last", "name", ",", "gpa", "of", "the", "youngest", "one", "among", "students", "whose", "GPA", "is", "above", "3", "?"], "guid": 8586}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | What is the course title of the prerequisite of course Mobile Computing?", "sql": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'Mobile Computing')", "example": {"db_id": "college_2", "query": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'Mobile Computing')", "query_toks": ["SELECT", "title", "FROM", "course", "WHERE", "course_id", "IN", "(", "SELECT", "T1.prereq_id", "FROM", "prereq", "AS", "T1", "JOIN", "course", "AS", "T2", "ON", "T1.course_id", "=", "T2.course_id", "WHERE", "T2.title", "=", "'Mobile", "Computing", "'", ")"], "query_toks_no_value": ["select", "title", "from", "course", "where", "course_id", "in", "(", "select", "t1", ".", "prereq_id", "from", "prereq", "as", "t1", "join", "course", "as", "t2", "on", "t1", ".", "course_id", "=", "t2", ".", "course_id", "where", "t2", ".", "title", "=", "value", ")"], "question": "What is the course title of the prerequisite of course Mobile Computing?", "question_toks": ["What", "is", "the", "course", "title", "of", "the", "prerequisite", "of", "course", "Mobile", "Computing", "?"], "guid": 8587}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | What is the name of the department with the fewest members?", "sql": "SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MEMBER_OF AS T2 ON T1.DNO  =  T2.DNO GROUP BY T2.DNO ORDER BY count(*) ASC LIMIT 1", "example": {"db_id": "college_3", "query": "SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MEMBER_OF AS T2 ON T1.DNO  =  T2.DNO GROUP BY T2.DNO ORDER BY count(*) ASC LIMIT 1", "query_toks": ["SELECT", "T1.DName", "FROM", "DEPARTMENT", "AS", "T1", "JOIN", "MEMBER_OF", "AS", "T2", "ON", "T1.DNO", "=", "T2.DNO", "GROUP", "BY", "T2.DNO", "ORDER", "BY", "count", "(", "*", ")", "ASC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "dname", "from", "department", "as", "t1", "join", "member_of", "as", "t2", "on", "t1", ".", "dno", "=", "t2", ".", "dno", "group", "by", "t2", ".", "dno", "order", "by", "count", "(", "*", ")", "asc", "limit", "value"], "question": "What is the name of the department with the fewest members?", "question_toks": ["What", "is", "the", "name", "of", "the", "department", "with", "the", "fewest", "members", "?"], "guid": 8588}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What is the first name of students enrolled in class ACCT-211 and got grade C?", "sql": "SELECT T3.stu_fname FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T2.stu_num  =  T3.stu_num WHERE T1.crs_code  =  'ACCT-211' AND T2.enroll_grade  =  'C'", "example": {"db_id": "college_1", "query": "SELECT T3.stu_fname FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T2.stu_num  =  T3.stu_num WHERE T1.crs_code  =  'ACCT-211' AND T2.enroll_grade  =  'C'", "query_toks": ["SELECT", "T3.stu_fname", "FROM", "CLASS", "AS", "T1", "JOIN", "enroll", "AS", "T2", "ON", "T1.class_code", "=", "T2.class_code", "JOIN", "student", "AS", "T3", "ON", "T2.stu_num", "=", "T3.stu_num", "WHERE", "T1.crs_code", "=", "'ACCT-211", "'", "AND", "T2.enroll_grade", "=", "'C", "'"], "query_toks_no_value": ["select", "t3", ".", "stu_fname", "from", "class", "as", "t1", "join", "enroll", "as", "t2", "on", "t1", ".", "class_code", "=", "t2", ".", "class_code", "join", "student", "as", "t3", "on", "t2", ".", "stu_num", "=", "t3", ".", "stu_num", "where", "t1", ".", "crs_code", "=", "value", "and", "t2", ".", "enroll_grade", "=", "value"], "question": "What is the first name of students enrolled in class ACCT-211 and got grade C?", "question_toks": ["What", "is", "the", "first", "name", "of", "students", "enrolled", "in", "class", "ACCT-211", "and", "got", "grade", "C", "?"], "guid": 8589}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | What are the distinct first names for students with a grade point of 3.8 or above in at least one course?", "sql": "SELECT DISTINCT T3.Fname FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID WHERE T2.gradepoint  >=  3.8", "example": {"db_id": "college_3", "query": "SELECT DISTINCT T3.Fname FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID WHERE T2.gradepoint  >=  3.8", "query_toks": ["SELECT", "DISTINCT", "T3.Fname", "FROM", "ENROLLED_IN", "AS", "T1", "JOIN", "GRADECONVERSION", "AS", "T2", "JOIN", "STUDENT", "AS", "T3", "ON", "T1.Grade", "=", "T2.lettergrade", "AND", "T1.StuID", "=", "T3.StuID", "WHERE", "T2.gradepoint", ">", "=", "3.8"], "query_toks_no_value": ["select", "distinct", "t3", ".", "fname", "from", "enrolled_in", "as", "t1", "join", "gradeconversion", "as", "t2", "join", "student", "as", "t3", "on", "t1", ".", "grade", "=", "t2", ".", "lettergrade", "and", "t1", ".", "stuid", "=", "t3", ".", "stuid", "where", "t2", ".", "gradepoint", ">", "=", "value"], "question": "What are the distinct first names for students with a grade point of 3.8 or above in at least one course?", "question_toks": ["What", "are", "the", "distinct", "first", "names", "for", "students", "with", "a", "grade", "point", "of", "3.8", "or", "above", "in", "at", "least", "one", "course", "?"], "guid": 8590}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What is the last name of the student who received an A in the class with the code 10018?", "sql": "SELECT T1.stu_lname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num WHERE T2.enroll_grade  =  'A' AND T2.class_code  =  10018", "example": {"db_id": "college_1", "query": "SELECT T1.stu_lname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num WHERE T2.enroll_grade  =  'A' AND T2.class_code  =  10018", "query_toks": ["SELECT", "T1.stu_lname", "FROM", "student", "AS", "T1", "JOIN", "enroll", "AS", "T2", "ON", "T1.stu_num", "=", "T2.stu_num", "WHERE", "T2.enroll_grade", "=", "'A", "'", "AND", "T2.class_code", "=", "10018"], "query_toks_no_value": ["select", "t1", ".", "stu_lname", "from", "student", "as", "t1", "join", "enroll", "as", "t2", "on", "t1", ".", "stu_num", "=", "t2", ".", "stu_num", "where", "t2", ".", "enroll_grade", "=", "value", "and", "t2", ".", "class_code", "=", "value"], "question": "What is the last name of the student who received an A in the class with the code 10018?", "question_toks": ["What", "is", "the", "last", "name", "of", "the", "student", "who", "received", "an", "A", "in", "the", "class", "with", "the", "code", "10018", "?"], "guid": 8591}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | What are the names of patients who are not taking the medication of Procrastin-X.", "sql": "SELECT name FROM patient EXCEPT SELECT T1.name FROM patient AS T1 JOIN Prescribes AS T2 ON T2.Patient  =  T1.SSN JOIN Medication AS T3 ON T2.Medication  =  T3.Code WHERE T3.name  =  'Procrastin-X'", "example": {"db_id": "hospital_1", "query": "SELECT name FROM patient EXCEPT SELECT T1.name FROM patient AS T1 JOIN Prescribes AS T2 ON T2.Patient  =  T1.SSN JOIN Medication AS T3 ON T2.Medication  =  T3.Code WHERE T3.name  =  'Procrastin-X'", "query_toks": ["SELECT", "name", "FROM", "patient", "EXCEPT", "SELECT", "T1.name", "FROM", "patient", "AS", "T1", "JOIN", "Prescribes", "AS", "T2", "ON", "T2.Patient", "=", "T1.SSN", "JOIN", "Medication", "AS", "T3", "ON", "T2.Medication", "=", "T3.Code", "WHERE", "T3.name", "=", "'Procrastin-X", "'"], "query_toks_no_value": ["select", "name", "from", "patient", "except", "select", "t1", ".", "name", "from", "patient", "as", "t1", "join", "prescribes", "as", "t2", "on", "t2", ".", "patient", "=", "t1", ".", "ssn", "join", "medication", "as", "t3", "on", "t2", ".", "medication", "=", "t3", ".", "code", "where", "t3", ".", "name", "=", "value"], "question": "What are the names of patients who are not taking the medication of Procrastin-X.", "question_toks": ["What", "are", "the", "names", "of", "patients", "who", "are", "not", "taking", "the", "medication", "of", "Procrastin-X", "."], "guid": 8592}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What is the first name and GPA of every student that has a GPA lower than average?", "sql": "SELECT stu_fname ,  stu_gpa FROM student WHERE stu_gpa  <  (SELECT avg(stu_gpa) FROM student)", "example": {"db_id": "college_1", "query": "SELECT stu_fname ,  stu_gpa FROM student WHERE stu_gpa  <  (SELECT avg(stu_gpa) FROM student)", "query_toks": ["SELECT", "stu_fname", ",", "stu_gpa", "FROM", "student", "WHERE", "stu_gpa", "<", "(", "SELECT", "avg", "(", "stu_gpa", ")", "FROM", "student", ")"], "query_toks_no_value": ["select", "stu_fname", ",", "stu_gpa", "from", "student", "where", "stu_gpa", "<", "(", "select", "avg", "(", "stu_gpa", ")", "from", "student", ")"], "question": "What is the first name and GPA of every student that has a GPA lower than average?", "question_toks": ["What", "is", "the", "first", "name", "and", "GPA", "of", "every", "student", "that", "has", "a", "GPA", "lower", "than", "average", "?"], "guid": 8593}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | What is the name and building of the departments whose budget is more than the average budget?", "sql": "SELECT dept_name ,  building FROM department WHERE budget  >  (SELECT avg(budget) FROM department)", "example": {"db_id": "college_2", "query": "SELECT dept_name ,  building FROM department WHERE budget  >  (SELECT avg(budget) FROM department)", "query_toks": ["SELECT", "dept_name", ",", "building", "FROM", "department", "WHERE", "budget", ">", "(", "SELECT", "avg", "(", "budget", ")", "FROM", "department", ")"], "query_toks_no_value": ["select", "dept_name", ",", "building", "from", "department", "where", "budget", ">", "(", "select", "avg", "(", "budget", ")", "from", "department", ")"], "question": "What is the name and building of the departments whose budget is more than the average budget?", "question_toks": ["What", "is", "the", "name", "and", "building", "of", "the", "departments", "whose", "budget", "is", "more", "than", "the", "average", "budget", "?"], "guid": 8594}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What is the school code of the accounting department?", "sql": "SELECT school_code FROM department WHERE dept_name  =  \"Accounting\"", "example": {"db_id": "college_1", "query": "SELECT school_code FROM department WHERE dept_name  =  \"Accounting\"", "query_toks": ["SELECT", "school_code", "FROM", "department", "WHERE", "dept_name", "=", "``", "Accounting", "''"], "query_toks_no_value": ["select", "school_code", "from", "department", "where", "dept_name", "=", "value"], "question": "What is the school code of the accounting department?", "question_toks": ["What", "is", "the", "school", "code", "of", "the", "accounting", "department", "?"], "guid": 8595}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Find the name and building of the department with the highest budget.", "sql": "SELECT dept_name ,  building FROM department ORDER BY budget DESC LIMIT 1", "example": {"db_id": "college_2", "query": "SELECT dept_name ,  building FROM department ORDER BY budget DESC LIMIT 1", "query_toks": ["SELECT", "dept_name", ",", "building", "FROM", "department", "ORDER", "BY", "budget", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "dept_name", ",", "building", "from", "department", "order", "by", "budget", "desc", "limit", "value"], "question": "Find the name and building of the department with the highest budget.", "question_toks": ["Find", "the", "name", "and", "building", "of", "the", "department", "with", "the", "highest", "budget", "."], "guid": 8596}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What are the first names and office of the professors who are in the history department and have a Ph.D?", "sql": "SELECT T1.emp_fname ,  T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T3.dept_code  =  T2.dept_code WHERE T3.dept_name  =  'History' AND T2.prof_high_degree  =  'Ph.D.'", "example": {"db_id": "college_1", "query": "SELECT T1.emp_fname ,  T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T3.dept_code  =  T2.dept_code WHERE T3.dept_name  =  'History' AND T2.prof_high_degree  =  'Ph.D.'", "query_toks": ["SELECT", "T1.emp_fname", ",", "T2.prof_office", "FROM", "employee", "AS", "T1", "JOIN", "professor", "AS", "T2", "ON", "T1.emp_num", "=", "T2.emp_num", "JOIN", "department", "AS", "T3", "ON", "T3.dept_code", "=", "T2.dept_code", "WHERE", "T3.dept_name", "=", "'History", "'", "AND", "T2.prof_high_degree", "=", "'Ph.D", ".", "'"], "query_toks_no_value": ["select", "t1", ".", "emp_fname", ",", "t2", ".", "prof_office", "from", "employee", "as", "t1", "join", "professor", "as", "t2", "on", "t1", ".", "emp_num", "=", "t2", ".", "emp_num", "join", "department", "as", "t3", "on", "t3", ".", "dept_code", "=", "t2", ".", "dept_code", "where", "t3", ".", "dept_name", "=", "value", "and", "t2", ".", "prof_high_degree", "=", "value"], "question": "What are the first names and office of the professors who are in the history department and have a Ph.D?", "question_toks": ["What", "are", "the", "first", "names", "and", "office", "of", "the", "professors", "who", "are", "in", "the", "history", "department", "and", "have", "a", "Ph.D", "?"], "guid": 8597}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | Find the distinct student first names of all students that have grade point at least 3.8 in one course.", "sql": "SELECT DISTINCT T3.Fname FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID WHERE T2.gradepoint  >=  3.8", "example": {"db_id": "college_3", "query": "SELECT DISTINCT T3.Fname FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID WHERE T2.gradepoint  >=  3.8", "query_toks": ["SELECT", "DISTINCT", "T3.Fname", "FROM", "ENROLLED_IN", "AS", "T1", "JOIN", "GRADECONVERSION", "AS", "T2", "JOIN", "STUDENT", "AS", "T3", "ON", "T1.Grade", "=", "T2.lettergrade", "AND", "T1.StuID", "=", "T3.StuID", "WHERE", "T2.gradepoint", ">", "=", "3.8"], "query_toks_no_value": ["select", "distinct", "t3", ".", "fname", "from", "enrolled_in", "as", "t1", "join", "gradeconversion", "as", "t2", "join", "student", "as", "t3", "on", "t1", ".", "grade", "=", "t2", ".", "lettergrade", "and", "t1", ".", "stuid", "=", "t3", ".", "stuid", "where", "t2", ".", "gradepoint", ">", "=", "value"], "question": "Find the distinct student first names of all students that have grade point at least 3.8 in one course.", "question_toks": ["Find", "the", "distinct", "student", "first", "names", "of", "all", "students", "that", "have", "grade", "point", "at", "least", "3.8", "in", "one", "course", "."], "guid": 8598}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | How many departments are in each school?", "sql": "SELECT count(DISTINCT dept_name) ,  school_code FROM department GROUP BY school_code", "example": {"db_id": "college_1", "query": "SELECT count(DISTINCT dept_name) ,  school_code FROM department GROUP BY school_code", "query_toks": ["SELECT", "count", "(", "DISTINCT", "dept_name", ")", ",", "school_code", "FROM", "department", "GROUP", "BY", "school_code"], "query_toks_no_value": ["select", "count", "(", "distinct", "dept_name", ")", ",", "school_code", "from", "department", "group", "by", "school_code"], "question": "How many departments are in each school?", "question_toks": ["How", "many", "departments", "are", "in", "each", "school", "?"], "guid": 8599}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | For each Orange county campus, report the number of degrees granted after 2000.", "sql": "SELECT T1.campus ,  sum(T2.degrees) FROM campuses AS T1 JOIN degrees AS T2 ON T1.id  =  T2.campus WHERE T1.county  =  \"Orange\" AND T2.year  >=  2000 GROUP BY T1.campus", "example": {"db_id": "csu_1", "query": "SELECT T1.campus ,  sum(T2.degrees) FROM campuses AS T1 JOIN degrees AS T2 ON T1.id  =  T2.campus WHERE T1.county  =  \"Orange\" AND T2.year  >=  2000 GROUP BY T1.campus", "query_toks": ["SELECT", "T1.campus", ",", "sum", "(", "T2.degrees", ")", "FROM", "campuses", "AS", "T1", "JOIN", "degrees", "AS", "T2", "ON", "T1.id", "=", "T2.campus", "WHERE", "T1.county", "=", "``", "Orange", "''", "AND", "T2.year", ">", "=", "2000", "GROUP", "BY", "T1.campus"], "query_toks_no_value": ["select", "t1", ".", "campus", ",", "sum", "(", "t2", ".", "degrees", ")", "from", "campuses", "as", "t1", "join", "degrees", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "campus", "where", "t1", ".", "county", "=", "value", "and", "t2", ".", "year", ">", "=", "value", "group", "by", "t1", ".", "campus"], "question": "For each Orange county campus, report the number of degrees granted after 2000.", "question_toks": ["For", "each", "Orange", "county", "campus", ",", "report", "the", "number", "of", "degrees", "granted", "after", "2000", "."], "guid": 8600}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Find the name of students who have taken the prerequisite course of the course with title International Finance.", "sql": "SELECT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE T2.course_id IN (SELECT T4.prereq_id FROM course AS T3 JOIN prereq AS T4 ON T3.course_id  =  T4.course_id WHERE T3.title  =  'International Finance')", "example": {"db_id": "college_2", "query": "SELECT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE T2.course_id IN (SELECT T4.prereq_id FROM course AS T3 JOIN prereq AS T4 ON T3.course_id  =  T4.course_id WHERE T3.title  =  'International Finance')", "query_toks": ["SELECT", "T1.name", "FROM", "student", "AS", "T1", "JOIN", "takes", "AS", "T2", "ON", "T1.id", "=", "T2.id", "WHERE", "T2.course_id", "IN", "(", "SELECT", "T4.prereq_id", "FROM", "course", "AS", "T3", "JOIN", "prereq", "AS", "T4", "ON", "T3.course_id", "=", "T4.course_id", "WHERE", "T3.title", "=", "'International", "Finance", "'", ")"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "student", "as", "t1", "join", "takes", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "id", "where", "t2", ".", "course_id", "in", "(", "select", "t4", ".", "prereq_id", "from", "course", "as", "t3", "join", "prereq", "as", "t4", "on", "t3", ".", "course_id", "=", "t4", ".", "course_id", "where", "t3", ".", "title", "=", "value", ")"], "question": "Find the name of students who have taken the prerequisite course of the course with title International Finance.", "question_toks": ["Find", "the", "name", "of", "students", "who", "have", "taken", "the", "prerequisite", "course", "of", "the", "course", "with", "title", "International", "Finance", "."], "guid": 8601}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | What are the procedures that cost more than 1000 or are specialized in by physician John Wen?", "sql": "SELECT name FROM procedures WHERE cost  >  1000 UNION SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"", "example": {"db_id": "hospital_1", "query": "SELECT name FROM procedures WHERE cost  >  1000 UNION SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"", "query_toks": ["SELECT", "name", "FROM", "procedures", "WHERE", "cost", ">", "1000", "UNION", "SELECT", "T3.name", "FROM", "physician", "AS", "T1", "JOIN", "trained_in", "AS", "T2", "ON", "T1.employeeid", "=", "T2.physician", "JOIN", "procedures", "AS", "T3", "ON", "T3.code", "=", "T2.treatment", "WHERE", "T1.name", "=", "``", "John", "Wen", "''"], "query_toks_no_value": ["select", "name", "from", "procedures", "where", "cost", ">", "value", "union", "select", "t3", ".", "name", "from", "physician", "as", "t1", "join", "trained_in", "as", "t2", "on", "t1", ".", "employeeid", "=", "t2", ".", "physician", "join", "procedures", "as", "t3", "on", "t3", ".", "code", "=", "t2", ".", "treatment", "where", "t1", ".", "name", "=", "value"], "question": "What are the procedures that cost more than 1000 or are specialized in by physician John Wen?", "question_toks": ["What", "are", "the", "procedures", "that", "cost", "more", "than", "1000", "or", "are", "specialized", "in", "by", "physician", "John", "Wen", "?"], "guid": 8602}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | What are the ids for courses in the Fall of 2009 or the Spring of 2010?", "sql": "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 UNION SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010", "example": {"db_id": "college_2", "query": "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 UNION SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010", "query_toks": ["SELECT", "course_id", "FROM", "SECTION", "WHERE", "semester", "=", "'Fall", "'", "AND", "YEAR", "=", "2009", "UNION", "SELECT", "course_id", "FROM", "SECTION", "WHERE", "semester", "=", "'Spring", "'", "AND", "YEAR", "=", "2010"], "query_toks_no_value": ["select", "course_id", "from", "section", "where", "semester", "=", "value", "and", "year", "=", "value", "union", "select", "course_id", "from", "section", "where", "semester", "=", "value", "and", "year", "=", "value"], "question": "What are the ids for courses in the Fall of 2009 or the Spring of 2010?", "question_toks": ["What", "are", "the", "ids", "for", "courses", "in", "the", "Fall", "of", "2009", "or", "the", "Spring", "of", "2010", "?"], "guid": 8603}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Find courses that ran in Fall 2009 but not in Spring 2010.", "sql": "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 EXCEPT SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010", "example": {"db_id": "college_2", "query": "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 EXCEPT SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010", "query_toks": ["SELECT", "course_id", "FROM", "SECTION", "WHERE", "semester", "=", "'Fall", "'", "AND", "YEAR", "=", "2009", "EXCEPT", "SELECT", "course_id", "FROM", "SECTION", "WHERE", "semester", "=", "'Spring", "'", "AND", "YEAR", "=", "2010"], "query_toks_no_value": ["select", "course_id", "from", "section", "where", "semester", "=", "value", "and", "year", "=", "value", "except", "select", "course_id", "from", "section", "where", "semester", "=", "value", "and", "year", "=", "value"], "question": "Find courses that ran in Fall 2009 but not in Spring 2010.", "question_toks": ["Find", "courses", "that", "ran", "in", "Fall", "2009", "but", "not", "in", "Spring", "2010", "."], "guid": 8604}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What is the first name, GPA, and phone number of the students with the top 5 GPAs?", "sql": "SELECT stu_gpa ,  stu_phone ,  stu_fname FROM student ORDER BY stu_gpa DESC LIMIT 5", "example": {"db_id": "college_1", "query": "SELECT stu_gpa ,  stu_phone ,  stu_fname FROM student ORDER BY stu_gpa DESC LIMIT 5", "query_toks": ["SELECT", "stu_gpa", ",", "stu_phone", ",", "stu_fname", "FROM", "student", "ORDER", "BY", "stu_gpa", "DESC", "LIMIT", "5"], "query_toks_no_value": ["select", "stu_gpa", ",", "stu_phone", ",", "stu_fname", "from", "student", "order", "by", "stu_gpa", "desc", "limit", "value"], "question": "What is the first name, GPA, and phone number of the students with the top 5 GPAs?", "question_toks": ["What", "is", "the", "first", "name", ",", "GPA", ",", "and", "phone", "number", "of", "the", "students", "with", "the", "top", "5", "GPAs", "?"], "guid": 8605}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | How many courses are offered?", "sql": "SELECT count(DISTINCT crs_code) FROM CLASS", "example": {"db_id": "college_1", "query": "SELECT count(DISTINCT crs_code) FROM CLASS", "query_toks": ["SELECT", "count", "(", "DISTINCT", "crs_code", ")", "FROM", "CLASS"], "query_toks_no_value": ["select", "count", "(", "distinct", "crs_code", ")", "from", "class"], "question": "How many courses are offered?", "question_toks": ["How", "many", "courses", "are", "offered", "?"], "guid": 8606}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What is the name, address, and number of students in the departments that have the 3 most students?", "sql": "SELECT T2.dept_name ,  T2.dept_address ,  count(*) FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 3", "example": {"db_id": "college_1", "query": "SELECT T2.dept_name ,  T2.dept_address ,  count(*) FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 3", "query_toks": ["SELECT", "T2.dept_name", ",", "T2.dept_address", ",", "count", "(", "*", ")", "FROM", "student", "AS", "T1", "JOIN", "department", "AS", "T2", "ON", "T1.dept_code", "=", "T2.dept_code", "GROUP", "BY", "T1.dept_code", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "3"], "query_toks_no_value": ["select", "t2", ".", "dept_name", ",", "t2", ".", "dept_address", ",", "count", "(", "*", ")", "from", "student", "as", "t1", "join", "department", "as", "t2", "on", "t1", ".", "dept_code", "=", "t2", ".", "dept_code", "group", "by", "t1", ".", "dept_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the name, address, and number of students in the departments that have the 3 most students?", "question_toks": ["What", "is", "the", "name", ",", "address", ",", "and", "number", "of", "students", "in", "the", "departments", "that", "have", "the", "3", "most", "students", "?"], "guid": 8607}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | What campus has the most degrees  conferrred over its entire existence?", "sql": "SELECT campus FROM degrees GROUP BY campus ORDER BY sum(degrees) DESC LIMIT 1", "example": {"db_id": "csu_1", "query": "SELECT campus FROM degrees GROUP BY campus ORDER BY sum(degrees) DESC LIMIT 1", "query_toks": ["SELECT", "campus", "FROM", "degrees", "GROUP", "BY", "campus", "ORDER", "BY", "sum", "(", "degrees", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "campus", "from", "degrees", "group", "by", "campus", "order", "by", "sum", "(", "degrees", ")", "desc", "limit", "value"], "question": "What campus has the most degrees  conferrred over its entire existence?", "question_toks": ["What", "campus", "has", "the", "most", "degrees", "conferrred", "over", "its", "entire", "existence", "?"], "guid": 8608}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | For each classroom with at least 2 classes, how many classes are offered?", "sql": "SELECT count(*) ,  class_room FROM CLASS GROUP BY class_room HAVING count(*)  >=  2", "example": {"db_id": "college_1", "query": "SELECT count(*) ,  class_room FROM CLASS GROUP BY class_room HAVING count(*)  >=  2", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "class_room", "FROM", "CLASS", "GROUP", "BY", "class_room", "HAVING", "count", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "class_room", "from", "class", "group", "by", "class_room", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "For each classroom with at least 2 classes, how many classes are offered?", "question_toks": ["For", "each", "classroom", "with", "at", "least", "2", "classes", ",", "how", "many", "classes", "are", "offered", "?"], "guid": 8609}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Find the department name of the instructor whose name contains 'Soisalon'.", "sql": "SELECT dept_name FROM instructor WHERE name LIKE '%Soisalon%'", "example": {"db_id": "college_2", "query": "SELECT dept_name FROM instructor WHERE name LIKE '%Soisalon%'", "query_toks": ["SELECT", "dept_name", "FROM", "instructor", "WHERE", "name", "LIKE", "'", "%", "Soisalon", "%", "'"], "query_toks_no_value": ["select", "dept_name", "from", "instructor", "where", "name", "like", "value"], "question": "Find the department name of the instructor whose name contains 'Soisalon'.", "question_toks": ["Find", "the", "department", "name", "of", "the", "instructor", "whose", "name", "contains", "'Soisalon", "'", "."], "guid": 8610}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | What are the names of all the physicians who took appointments.", "sql": "SELECT T2.name FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician  =  T2.EmployeeID", "example": {"db_id": "hospital_1", "query": "SELECT T2.name FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician  =  T2.EmployeeID", "query_toks": ["SELECT", "T2.name", "FROM", "appointment", "AS", "T1", "JOIN", "physician", "AS", "T2", "ON", "T1.Physician", "=", "T2.EmployeeID"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "appointment", "as", "t1", "join", "physician", "as", "t2", "on", "t1", ".", "physician", "=", "t2", ".", "employeeid"], "question": "What are the names of all the physicians who took appointments.", "question_toks": ["What", "are", "the", "names", "of", "all", "the", "physicians", "who", "took", "appointments", "."], "guid": 8611}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | How many students are enrolled in the class taught by some professor from the accounting department?", "sql": "SELECT count(*) FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN department AS T4 ON T3.dept_code  =  T4.dept_code WHERE T4.dept_name  =  'Accounting'", "example": {"db_id": "college_1", "query": "SELECT count(*) FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN department AS T4 ON T3.dept_code  =  T4.dept_code WHERE T4.dept_name  =  'Accounting'", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "CLASS", "AS", "T1", "JOIN", "enroll", "AS", "T2", "ON", "T1.class_code", "=", "T2.class_code", "JOIN", "course", "AS", "T3", "ON", "T1.crs_code", "=", "T3.crs_code", "JOIN", "department", "AS", "T4", "ON", "T3.dept_code", "=", "T4.dept_code", "WHERE", "T4.dept_name", "=", "'Accounting", "'"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "class", "as", "t1", "join", "enroll", "as", "t2", "on", "t1", ".", "class_code", "=", "t2", ".", "class_code", "join", "course", "as", "t3", "on", "t1", ".", "crs_code", "=", "t3", ".", "crs_code", "join", "department", "as", "t4", "on", "t3", ".", "dept_code", "=", "t4", ".", "dept_code", "where", "t4", ".", "dept_name", "=", "value"], "question": "How many students are enrolled in the class taught by some professor from the accounting department?", "question_toks": ["How", "many", "students", "are", "enrolled", "in", "the", "class", "taught", "by", "some", "professor", "from", "the", "accounting", "department", "?"], "guid": 8612}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | What are the campuses that had between 600 and 1000 faculty members in 2004?", "sql": "SELECT T1.campus FROM campuses AS t1 JOIN faculty AS t2 ON t1.id  =  t2.campus WHERE t2.faculty  >=  600 AND t2.faculty  <=  1000 AND T1.year  =  2004", "example": {"db_id": "csu_1", "query": "SELECT T1.campus FROM campuses AS t1 JOIN faculty AS t2 ON t1.id  =  t2.campus WHERE t2.faculty  >=  600 AND t2.faculty  <=  1000 AND T1.year  =  2004", "query_toks": ["SELECT", "T1.campus", "FROM", "campuses", "AS", "t1", "JOIN", "faculty", "AS", "t2", "ON", "t1.id", "=", "t2.campus", "WHERE", "t2.faculty", ">", "=", "600", "AND", "t2.faculty", "<", "=", "1000", "AND", "T1.year", "=", "2004"], "query_toks_no_value": ["select", "t1", ".", "campus", "from", "campuses", "as", "t1", "join", "faculty", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "campus", "where", "t2", ".", "faculty", ">", "=", "value", "and", "t2", ".", "faculty", "<", "=", "value", "and", "t1", ".", "year", "=", "value"], "question": "What are the campuses that had between 600 and 1000 faculty members in 2004?", "question_toks": ["What", "are", "the", "campuses", "that", "had", "between", "600", "and", "1000", "faculty", "members", "in", "2004", "?"], "guid": 8613}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | List the name of physicians who took some appointment.", "sql": "SELECT T2.name FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician  =  T2.EmployeeID", "example": {"db_id": "hospital_1", "query": "SELECT T2.name FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician  =  T2.EmployeeID", "query_toks": ["SELECT", "T2.name", "FROM", "appointment", "AS", "T1", "JOIN", "physician", "AS", "T2", "ON", "T1.Physician", "=", "T2.EmployeeID"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "appointment", "as", "t1", "join", "physician", "as", "t2", "on", "t1", ".", "physician", "=", "t2", ".", "employeeid"], "question": "List the name of physicians who took some appointment.", "question_toks": ["List", "the", "name", "of", "physicians", "who", "took", "some", "appointment", "."], "guid": 8614}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | What is the department name and corresponding building for the department with the greatest budget?", "sql": "SELECT dept_name ,  building FROM department ORDER BY budget DESC LIMIT 1", "example": {"db_id": "college_2", "query": "SELECT dept_name ,  building FROM department ORDER BY budget DESC LIMIT 1", "query_toks": ["SELECT", "dept_name", ",", "building", "FROM", "department", "ORDER", "BY", "budget", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "dept_name", ",", "building", "from", "department", "order", "by", "budget", "desc", "limit", "value"], "question": "What is the department name and corresponding building for the department with the greatest budget?", "question_toks": ["What", "is", "the", "department", "name", "and", "corresponding", "building", "for", "the", "department", "with", "the", "greatest", "budget", "?"], "guid": 8615}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | What are the first and last names of the instructors who teach the top 3 number of courses?", "sql": "SELECT T2.Fname ,  T2.Lname FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor  =  T2.FacID GROUP BY T1.Instructor ORDER BY count(*) DESC LIMIT 3", "example": {"db_id": "college_3", "query": "SELECT T2.Fname ,  T2.Lname FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor  =  T2.FacID GROUP BY T1.Instructor ORDER BY count(*) DESC LIMIT 3", "query_toks": ["SELECT", "T2.Fname", ",", "T2.Lname", "FROM", "COURSE", "AS", "T1", "JOIN", "FACULTY", "AS", "T2", "ON", "T1.Instructor", "=", "T2.FacID", "GROUP", "BY", "T1.Instructor", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "3"], "query_toks_no_value": ["select", "t2", ".", "fname", ",", "t2", ".", "lname", "from", "course", "as", "t1", "join", "faculty", "as", "t2", "on", "t1", ".", "instructor", "=", "t2", ".", "facid", "group", "by", "t1", ".", "instructor", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What are the first and last names of the instructors who teach the top 3 number of courses?", "question_toks": ["What", "are", "the", "first", "and", "last", "names", "of", "the", "instructors", "who", "teach", "the", "top", "3", "number", "of", "courses", "?"], "guid": 8616}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Give all information regarding instructors, in order of salary from least to greatest.", "sql": "SELECT * FROM instructor ORDER BY salary", "example": {"db_id": "college_2", "query": "SELECT * FROM instructor ORDER BY salary", "query_toks": ["SELECT", "*", "FROM", "instructor", "ORDER", "BY", "salary"], "query_toks_no_value": ["select", "*", "from", "instructor", "order", "by", "salary"], "question": "Give all information regarding instructors, in order of salary from least to greatest.", "question_toks": ["Give", "all", "information", "regarding", "instructors", ",", "in", "order", "of", "salary", "from", "least", "to", "greatest", "."], "guid": 8617}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | How many rooms does the Lamberton building have?", "sql": "SELECT count(*) FROM classroom WHERE building  =  'Lamberton'", "example": {"db_id": "college_2", "query": "SELECT count(*) FROM classroom WHERE building  =  'Lamberton'", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "classroom", "WHERE", "building", "=", "'Lamberton", "'"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "classroom", "where", "building", "=", "value"], "question": "How many rooms does the Lamberton building have?", "question_toks": ["How", "many", "rooms", "does", "the", "Lamberton", "building", "have", "?"], "guid": 8618}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | What are the names of departments either in division AS, or in division EN and in building NEB?", "sql": "SELECT DName FROM DEPARTMENT WHERE Division  =  \"AS\" UNION SELECT DName FROM DEPARTMENT WHERE Division  =  \"EN\" AND Building  =  \"NEB\"", "example": {"db_id": "college_3", "query": "SELECT DName FROM DEPARTMENT WHERE Division  =  \"AS\" UNION SELECT DName FROM DEPARTMENT WHERE Division  =  \"EN\" AND Building  =  \"NEB\"", "query_toks": ["SELECT", "DName", "FROM", "DEPARTMENT", "WHERE", "Division", "=", "``", "AS", "''", "UNION", "SELECT", "DName", "FROM", "DEPARTMENT", "WHERE", "Division", "=", "``", "EN", "''", "AND", "Building", "=", "``", "NEB", "''"], "query_toks_no_value": ["select", "dname", "from", "department", "where", "division", "=", "value", "union", "select", "dname", "from", "department", "where", "division", "=", "value", "and", "building", "=", "value"], "question": "What are the names of departments either in division AS, or in division EN and in building NEB?", "question_toks": ["What", "are", "the", "names", "of", "departments", "either", "in", "division", "AS", ",", "or", "in", "division", "EN", "and", "in", "building", "NEB", "?"], "guid": 8619}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What is the name of the department with the student that has the lowest GPA?", "sql": "SELECT T2.dept_name FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code ORDER BY stu_gpa LIMIT 1", "example": {"db_id": "college_1", "query": "SELECT T2.dept_name FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code ORDER BY stu_gpa LIMIT 1", "query_toks": ["SELECT", "T2.dept_name", "FROM", "student", "AS", "T1", "JOIN", "department", "AS", "T2", "ON", "T1.dept_code", "=", "T2.dept_code", "ORDER", "BY", "stu_gpa", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "dept_name", "from", "student", "as", "t1", "join", "department", "as", "t2", "on", "t1", ".", "dept_code", "=", "t2", ".", "dept_code", "order", "by", "stu_gpa", "limit", "value"], "question": "What is the name of the department with the student that has the lowest GPA?", "question_toks": ["What", "is", "the", "name", "of", "the", "department", "with", "the", "student", "that", "has", "the", "lowest", "GPA", "?"], "guid": 8620}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | What is the name of the department with the most credits?", "sql": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY sum(credits) DESC LIMIT 1", "example": {"db_id": "college_2", "query": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY sum(credits) DESC LIMIT 1", "query_toks": ["SELECT", "dept_name", "FROM", "course", "GROUP", "BY", "dept_name", "ORDER", "BY", "sum", "(", "credits", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "dept_name", "from", "course", "group", "by", "dept_name", "order", "by", "sum", "(", "credits", ")", "desc", "limit", "value"], "question": "What is the name of the department with the most credits?", "question_toks": ["What", "is", "the", "name", "of", "the", "department", "with", "the", "most", "credits", "?"], "guid": 8621}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | Find the id of the appointment with the most recent start date?", "sql": "SELECT appointmentid FROM appointment ORDER BY START DESC LIMIT 1", "example": {"db_id": "hospital_1", "query": "SELECT appointmentid FROM appointment ORDER BY START DESC LIMIT 1", "query_toks": ["SELECT", "appointmentid", "FROM", "appointment", "ORDER", "BY", "START", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "appointmentid", "from", "appointment", "order", "by", "start", "desc", "limit", "value"], "question": "Find the id of the appointment with the most recent start date?", "question_toks": ["Find", "the", "id", "of", "the", "appointment", "with", "the", "most", "recent", "start", "date", "?"], "guid": 8622}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | Find the first name of students not enrolled in any course.", "sql": "SELECT Fname FROM STUDENT WHERE StuID NOT IN (SELECT StuID FROM ENROLLED_IN)", "example": {"db_id": "college_3", "query": "SELECT Fname FROM STUDENT WHERE StuID NOT IN (SELECT StuID FROM ENROLLED_IN)", "query_toks": ["SELECT", "Fname", "FROM", "STUDENT", "WHERE", "StuID", "NOT", "IN", "(", "SELECT", "StuID", "FROM", "ENROLLED_IN", ")"], "query_toks_no_value": ["select", "fname", "from", "student", "where", "stuid", "not", "in", "(", "select", "stuid", "from", "enrolled_in", ")"], "question": "Find the first name of students not enrolled in any course.", "question_toks": ["Find", "the", "first", "name", "of", "students", "not", "enrolled", "in", "any", "course", "."], "guid": 8623}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | Give the building that the instructor who teaches the greatest number of courses lives in.", "sql": "SELECT T2.Building FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor  =  T2.FacID GROUP BY T1.Instructor ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "college_3", "query": "SELECT T2.Building FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor  =  T2.FacID GROUP BY T1.Instructor ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T2.Building", "FROM", "COURSE", "AS", "T1", "JOIN", "FACULTY", "AS", "T2", "ON", "T1.Instructor", "=", "T2.FacID", "GROUP", "BY", "T1.Instructor", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "building", "from", "course", "as", "t1", "join", "faculty", "as", "t2", "on", "t1", ".", "instructor", "=", "t2", ".", "facid", "group", "by", "t1", ".", "instructor", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Give the building that the instructor who teaches the greatest number of courses lives in.", "question_toks": ["Give", "the", "building", "that", "the", "instructor", "who", "teaches", "the", "greatest", "number", "of", "courses", "lives", "in", "."], "guid": 8624}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | How many classes does the professor whose last name is Graztevski teach?", "sql": "SELECT count(*) FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM  =  T2.PROF_NUM WHERE T1.EMP_LNAME  =  'Graztevski'", "example": {"db_id": "college_1", "query": "SELECT count(*) FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM  =  T2.PROF_NUM WHERE T1.EMP_LNAME  =  'Graztevski'", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "employee", "AS", "T1", "JOIN", "CLASS", "AS", "T2", "ON", "T1.EMP_NUM", "=", "T2.PROF_NUM", "WHERE", "T1.EMP_LNAME", "=", "'Graztevski", "'"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "employee", "as", "t1", "join", "class", "as", "t2", "on", "t1", ".", "emp_num", "=", "t2", ".", "prof_num", "where", "t1", ".", "emp_lname", "=", "value"], "question": "How many classes does the professor whose last name is Graztevski teach?", "question_toks": ["How", "many", "classes", "does", "the", "professor", "whose", "last", "name", "is", "Graztevski", "teach", "?"], "guid": 8625}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | How many professors teach a class with the code ACCT-211?", "sql": "SELECT count(DISTINCT PROF_NUM) FROM CLASS WHERE CRS_CODE  =  \"ACCT-211\"", "example": {"db_id": "college_1", "query": "SELECT count(DISTINCT PROF_NUM) FROM CLASS WHERE CRS_CODE  =  \"ACCT-211\"", "query_toks": ["SELECT", "count", "(", "DISTINCT", "PROF_NUM", ")", "FROM", "CLASS", "WHERE", "CRS_CODE", "=", "``", "ACCT-211", "''"], "query_toks_no_value": ["select", "count", "(", "distinct", "prof_num", ")", "from", "class", "where", "crs_code", "=", "value"], "question": "How many professors teach a class with the code ACCT-211?", "question_toks": ["How", "many", "professors", "teach", "a", "class", "with", "the", "code", "ACCT-211", "?"], "guid": 8626}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What are the names of all departments in alphabetical order?", "sql": "SELECT dept_name FROM department ORDER BY dept_name", "example": {"db_id": "college_1", "query": "SELECT dept_name FROM department ORDER BY dept_name", "query_toks": ["SELECT", "dept_name", "FROM", "department", "ORDER", "BY", "dept_name"], "query_toks_no_value": ["select", "dept_name", "from", "department", "order", "by", "dept_name"], "question": "What are the names of all departments in alphabetical order?", "question_toks": ["What", "are", "the", "names", "of", "all", "departments", "in", "alphabetical", "order", "?"], "guid": 8627}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What are the first names of student who only took one course?", "sql": "SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num GROUP BY T2.stu_num HAVING count(*)  =  1", "example": {"db_id": "college_1", "query": "SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num GROUP BY T2.stu_num HAVING count(*)  =  1", "query_toks": ["SELECT", "T1.stu_fname", "FROM", "student", "AS", "T1", "JOIN", "enroll", "AS", "T2", "ON", "T1.stu_num", "=", "T2.stu_num", "GROUP", "BY", "T2.stu_num", "HAVING", "count", "(", "*", ")", "=", "1"], "query_toks_no_value": ["select", "t1", ".", "stu_fname", "from", "student", "as", "t1", "join", "enroll", "as", "t2", "on", "t1", ".", "stu_num", "=", "t2", ".", "stu_num", "group", "by", "t2", ".", "stu_num", "having", "count", "(", "*", ")", "=", "value"], "question": "What are the first names of student who only took one course?", "question_toks": ["What", "are", "the", "first", "names", "of", "student", "who", "only", "took", "one", "course", "?"], "guid": 8628}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | Find the number of distinct room types available.", "sql": "SELECT count(DISTINCT roomtype) FROM room", "example": {"db_id": "hospital_1", "query": "SELECT count(DISTINCT roomtype) FROM room", "query_toks": ["SELECT", "count", "(", "DISTINCT", "roomtype", ")", "FROM", "room"], "query_toks_no_value": ["select", "count", "(", "distinct", "roomtype", ")", "from", "room"], "question": "Find the number of distinct room types available.", "question_toks": ["Find", "the", "number", "of", "distinct", "room", "types", "available", "."], "guid": 8629}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What are the first names of all students taking accoutning and Computer Information Systems classes?", "sql": "SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code JOIN course AS T4 ON T3.crs_code  =  T4.crs_code JOIN department AS T5 ON T5.dept_code  =  T4.dept_code WHERE T5.dept_name  =  'Accounting' INTERSECT SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code JOIN course AS T4 ON T3.crs_code  =  T4.crs_code JOIN department AS T5 ON T5.dept_code  =  T4.dept_code WHERE T5.dept_name  =  'Computer Info. Systems'", "example": {"db_id": "college_1", "query": "SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code JOIN course AS T4 ON T3.crs_code  =  T4.crs_code JOIN department AS T5 ON T5.dept_code  =  T4.dept_code WHERE T5.dept_name  =  'Accounting' INTERSECT SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code JOIN course AS T4 ON T3.crs_code  =  T4.crs_code JOIN department AS T5 ON T5.dept_code  =  T4.dept_code WHERE T5.dept_name  =  'Computer Info. Systems'", "query_toks": ["SELECT", "T1.stu_fname", "FROM", "student", "AS", "T1", "JOIN", "enroll", "AS", "T2", "ON", "T1.stu_num", "=", "T2.stu_num", "JOIN", "CLASS", "AS", "T3", "ON", "T2.class_code", "=", "T3.class_code", "JOIN", "course", "AS", "T4", "ON", "T3.crs_code", "=", "T4.crs_code", "JOIN", "department", "AS", "T5", "ON", "T5.dept_code", "=", "T4.dept_code", "WHERE", "T5.dept_name", "=", "'Accounting", "'", "INTERSECT", "SELECT", "T1.stu_fname", "FROM", "student", "AS", "T1", "JOIN", "enroll", "AS", "T2", "ON", "T1.stu_num", "=", "T2.stu_num", "JOIN", "CLASS", "AS", "T3", "ON", "T2.class_code", "=", "T3.class_code", "JOIN", "course", "AS", "T4", "ON", "T3.crs_code", "=", "T4.crs_code", "JOIN", "department", "AS", "T5", "ON", "T5.dept_code", "=", "T4.dept_code", "WHERE", "T5.dept_name", "=", "'Computer", "Info", ".", "Systems", "'"], "query_toks_no_value": ["select", "t1", ".", "stu_fname", "from", "student", "as", "t1", "join", "enroll", "as", "t2", "on", "t1", ".", "stu_num", "=", "t2", ".", "stu_num", "join", "class", "as", "t3", "on", "t2", ".", "class_code", "=", "t3", ".", "class_code", "join", "course", "as", "t4", "on", "t3", ".", "crs_code", "=", "t4", ".", "crs_code", "join", "department", "as", "t5", "on", "t5", ".", "dept_code", "=", "t4", ".", "dept_code", "where", "t5", ".", "dept_name", "=", "value", "intersect", "select", "t1", ".", "stu_fname", "from", "student", "as", "t1", "join", "enroll", "as", "t2", "on", "t1", ".", "stu_num", "=", "t2", ".", "stu_num", "join", "class", "as", "t3", "on", "t2", ".", "class_code", "=", "t3", ".", "class_code", "join", "course", "as", "t4", "on", "t3", ".", "crs_code", "=", "t4", ".", "crs_code", "join", "department", "as", "t5", "on", "t5", ".", "dept_code", "=", "t4", ".", "dept_code", "where", "t5", ".", "dept_name", "=", "value"], "question": "What are the first names of all students taking accoutning and Computer Information Systems classes?", "question_toks": ["What", "are", "the", "first", "names", "of", "all", "students", "taking", "accoutning", "and", "Computer", "Information", "Systems", "classes", "?"], "guid": 8630}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | What are the names of all instructors who have taught a course, as well as the corresponding course id?", "sql": "SELECT name ,  course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID  =  T2.ID", "example": {"db_id": "college_2", "query": "SELECT name ,  course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID  =  T2.ID", "query_toks": ["SELECT", "name", ",", "course_id", "FROM", "instructor", "AS", "T1", "JOIN", "teaches", "AS", "T2", "ON", "T1.ID", "=", "T2.ID"], "query_toks_no_value": ["select", "name", ",", "course_id", "from", "instructor", "as", "t1", "join", "teaches", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "id"], "question": "What are the names of all instructors who have taught a course, as well as the corresponding course id?", "question_toks": ["What", "are", "the", "names", "of", "all", "instructors", "who", "have", "taught", "a", "course", ",", "as", "well", "as", "the", "corresponding", "course", "id", "?"], "guid": 8631}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | What are the highest cost, lowest cost and average cost of procedures?", "sql": "SELECT MAX(cost) ,  MIN(cost) ,  AVG(cost) FROM procedures", "example": {"db_id": "hospital_1", "query": "SELECT MAX(cost) ,  MIN(cost) ,  AVG(cost) FROM procedures", "query_toks": ["SELECT", "MAX", "(", "cost", ")", ",", "MIN", "(", "cost", ")", ",", "AVG", "(", "cost", ")", "FROM", "procedures"], "query_toks_no_value": ["select", "max", "(", "cost", ")", ",", "min", "(", "cost", ")", ",", "avg", "(", "cost", ")", "from", "procedures"], "question": "What are the highest cost, lowest cost and average cost of procedures?", "question_toks": ["What", "are", "the", "highest", "cost", ",", "lowest", "cost", "and", "average", "cost", "of", "procedures", "?"], "guid": 8632}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | Find the name, address, number of students in the departments that have the top 3 highest number of students.", "sql": "SELECT T2.dept_name ,  T2.dept_address ,  count(*) FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 3", "example": {"db_id": "college_1", "query": "SELECT T2.dept_name ,  T2.dept_address ,  count(*) FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 3", "query_toks": ["SELECT", "T2.dept_name", ",", "T2.dept_address", ",", "count", "(", "*", ")", "FROM", "student", "AS", "T1", "JOIN", "department", "AS", "T2", "ON", "T1.dept_code", "=", "T2.dept_code", "GROUP", "BY", "T1.dept_code", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "3"], "query_toks_no_value": ["select", "t2", ".", "dept_name", ",", "t2", ".", "dept_address", ",", "count", "(", "*", ")", "from", "student", "as", "t1", "join", "department", "as", "t2", "on", "t1", ".", "dept_code", "=", "t2", ".", "dept_code", "group", "by", "t1", ".", "dept_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Find the name, address, number of students in the departments that have the top 3 highest number of students.", "question_toks": ["Find", "the", "name", ",", "address", ",", "number", "of", "students", "in", "the", "departments", "that", "have", "the", "top", "3", "highest", "number", "of", "students", "."], "guid": 8633}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | What campuses opened between 1935 and 1939?", "sql": "SELECT campus FROM campuses WHERE YEAR  >=  1935 AND YEAR  <=  1939", "example": {"db_id": "csu_1", "query": "SELECT campus FROM campuses WHERE YEAR  >=  1935 AND YEAR  <=  1939", "query_toks": ["SELECT", "campus", "FROM", "campuses", "WHERE", "YEAR", ">", "=", "1935", "AND", "YEAR", "<", "=", "1939"], "query_toks_no_value": ["select", "campus", "from", "campuses", "where", "year", ">", "=", "value", "and", "year", "<", "=", "value"], "question": "What campuses opened between 1935 and 1939?", "question_toks": ["What", "campuses", "opened", "between", "1935", "and", "1939", "?"], "guid": 8634}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | What is the campus fee in the year 2000 for San Jose State University?", "sql": "SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t2.campus  =  \"San Jose State University\" AND t1.year  =  2000", "example": {"db_id": "csu_1", "query": "SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t2.campus  =  \"San Jose State University\" AND t1.year  =  2000", "query_toks": ["SELECT", "t1.campusfee", "FROM", "csu_fees", "AS", "t1", "JOIN", "campuses", "AS", "t2", "ON", "t1.campus", "=", "t2.id", "WHERE", "t2.campus", "=", "``", "San", "Jose", "State", "University", "''", "AND", "t1.year", "=", "2000"], "query_toks_no_value": ["select", "t1", ".", "campusfee", "from", "csu_fees", "as", "t1", "join", "campuses", "as", "t2", "on", "t1", ".", "campus", "=", "t2", ".", "id", "where", "t2", ".", "campus", "=", "value", "and", "t1", ".", "year", "=", "value"], "question": "What is the campus fee in the year 2000 for San Jose State University?", "question_toks": ["What", "is", "the", "campus", "fee", "in", "the", "year", "2000", "for", "San", "Jose", "State", "University", "?"], "guid": 8635}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | What are the names of the physicians who have 'senior' in their titles.", "sql": "SELECT name FROM physician WHERE POSITION LIKE '%senior%'", "example": {"db_id": "hospital_1", "query": "SELECT name FROM physician WHERE POSITION LIKE '%senior%'", "query_toks": ["SELECT", "name", "FROM", "physician", "WHERE", "POSITION", "LIKE", "'", "%", "senior", "%", "'"], "query_toks_no_value": ["select", "name", "from", "physician", "where", "position", "like", "value"], "question": "What are the names of the physicians who have 'senior' in their titles.", "question_toks": ["What", "are", "the", "names", "of", "the", "physicians", "who", "have", "'senior", "'", "in", "their", "titles", "."], "guid": 8636}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | Which school has the fewest professors?", "sql": "SELECT T1.school_code FROM department AS T1 JOIN professor AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.school_code ORDER BY count(*) LIMIT 1", "example": {"db_id": "college_1", "query": "SELECT T1.school_code FROM department AS T1 JOIN professor AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.school_code ORDER BY count(*) LIMIT 1", "query_toks": ["SELECT", "T1.school_code", "FROM", "department", "AS", "T1", "JOIN", "professor", "AS", "T2", "ON", "T1.dept_code", "=", "T2.dept_code", "GROUP", "BY", "T1.school_code", "ORDER", "BY", "count", "(", "*", ")", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "school_code", "from", "department", "as", "t1", "join", "professor", "as", "t2", "on", "t1", ".", "dept_code", "=", "t2", ".", "dept_code", "group", "by", "t1", ".", "school_code", "order", "by", "count", "(", "*", ")", "limit", "value"], "question": "Which school has the fewest professors?", "question_toks": ["Which", "school", "has", "the", "fewest", "professors", "?"], "guid": 8637}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Count the number of courses in the Physics department.", "sql": "SELECT count(DISTINCT course_id) FROM course WHERE dept_name  =  'Physics'", "example": {"db_id": "college_2", "query": "SELECT count(DISTINCT course_id) FROM course WHERE dept_name  =  'Physics'", "query_toks": ["SELECT", "count", "(", "DISTINCT", "course_id", ")", "FROM", "course", "WHERE", "dept_name", "=", "'Physics", "'"], "query_toks_no_value": ["select", "count", "(", "distinct", "course_id", ")", "from", "course", "where", "dept_name", "=", "value"], "question": "Count the number of courses in the Physics department.", "question_toks": ["Count", "the", "number", "of", "courses", "in", "the", "Physics", "department", "."], "guid": 8638}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | Find the count of universities whose campus fee is greater than the average campus fee.", "sql": "SELECT count(*) FROM csu_fees WHERE campusfee  >  (SELECT avg(campusfee) FROM csu_fees)", "example": {"db_id": "csu_1", "query": "SELECT count(*) FROM csu_fees WHERE campusfee  >  (SELECT avg(campusfee) FROM csu_fees)", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "csu_fees", "WHERE", "campusfee", ">", "(", "SELECT", "avg", "(", "campusfee", ")", "FROM", "csu_fees", ")"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "csu_fees", "where", "campusfee", ">", "(", "select", "avg", "(", "campusfee", ")", "from", "csu_fees", ")"], "question": "Find the count of universities whose campus fee is greater than the average campus fee.", "question_toks": ["Find", "the", "count", "of", "universities", "whose", "campus", "fee", "is", "greater", "than", "the", "average", "campus", "fee", "."], "guid": 8639}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Find the name of instructors who are advising more than one student.", "sql": "SELECT T1.name FROM instructor AS T1 JOIN advisor AS T2 ON T1.id  =  T2.i_id GROUP BY T2.i_id HAVING count(*)  >  1", "example": {"db_id": "college_2", "query": "SELECT T1.name FROM instructor AS T1 JOIN advisor AS T2 ON T1.id  =  T2.i_id GROUP BY T2.i_id HAVING count(*)  >  1", "query_toks": ["SELECT", "T1.name", "FROM", "instructor", "AS", "T1", "JOIN", "advisor", "AS", "T2", "ON", "T1.id", "=", "T2.i_id", "GROUP", "BY", "T2.i_id", "HAVING", "count", "(", "*", ")", ">", "1"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "instructor", "as", "t1", "join", "advisor", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "i_id", "group", "by", "t2", ".", "i_id", "having", "count", "(", "*", ")", ">", "value"], "question": "Find the name of instructors who are advising more than one student.", "question_toks": ["Find", "the", "name", "of", "instructors", "who", "are", "advising", "more", "than", "one", "student", "."], "guid": 8640}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | What is the name of the student who has the highest total credits in the History department.", "sql": "SELECT name FROM student WHERE dept_name  =  'History' ORDER BY tot_cred DESC LIMIT 1", "example": {"db_id": "college_2", "query": "SELECT name FROM student WHERE dept_name  =  'History' ORDER BY tot_cred DESC LIMIT 1", "query_toks": ["SELECT", "name", "FROM", "student", "WHERE", "dept_name", "=", "'History", "'", "ORDER", "BY", "tot_cred", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "name", "from", "student", "where", "dept_name", "=", "value", "order", "by", "tot_cred", "desc", "limit", "value"], "question": "What is the name of the student who has the highest total credits in the History department.", "question_toks": ["What", "is", "the", "name", "of", "the", "student", "who", "has", "the", "highest", "total", "credits", "in", "the", "History", "department", "."], "guid": 8641}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | What campuses are in Los Angeles county?", "sql": "SELECT campus FROM campuses WHERE county  =  \"Los Angeles\"", "example": {"db_id": "csu_1", "query": "SELECT campus FROM campuses WHERE county  =  \"Los Angeles\"", "query_toks": ["SELECT", "campus", "FROM", "campuses", "WHERE", "county", "=", "``", "Los", "Angeles", "''"], "query_toks_no_value": ["select", "campus", "from", "campuses", "where", "county", "=", "value"], "question": "What campuses are in Los Angeles county?", "question_toks": ["What", "campuses", "are", "in", "Los", "Angeles", "county", "?"], "guid": 8642}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | What is the lowest salary in departments with average salary greater than the overall average.", "sql": "SELECT min(salary) ,  dept_name FROM instructor GROUP BY dept_name HAVING avg(salary)  >  (SELECT avg(salary) FROM instructor)", "example": {"db_id": "college_2", "query": "SELECT min(salary) ,  dept_name FROM instructor GROUP BY dept_name HAVING avg(salary)  >  (SELECT avg(salary) FROM instructor)", "query_toks": ["SELECT", "min", "(", "salary", ")", ",", "dept_name", "FROM", "instructor", "GROUP", "BY", "dept_name", "HAVING", "avg", "(", "salary", ")", ">", "(", "SELECT", "avg", "(", "salary", ")", "FROM", "instructor", ")"], "query_toks_no_value": ["select", "min", "(", "salary", ")", ",", "dept_name", "from", "instructor", "group", "by", "dept_name", "having", "avg", "(", "salary", ")", ">", "(", "select", "avg", "(", "salary", ")", "from", "instructor", ")"], "question": "What is the lowest salary in departments with average salary greater than the overall average.", "question_toks": ["What", "is", "the", "lowest", "salary", "in", "departments", "with", "average", "salary", "greater", "than", "the", "overall", "average", "."], "guid": 8643}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | What are the names of students who have more than one advisor?", "sql": "SELECT T1.name FROM student AS T1 JOIN advisor AS T2 ON T1.id  =  T2.s_id GROUP BY T2.s_id HAVING count(*)  >  1", "example": {"db_id": "college_2", "query": "SELECT T1.name FROM student AS T1 JOIN advisor AS T2 ON T1.id  =  T2.s_id GROUP BY T2.s_id HAVING count(*)  >  1", "query_toks": ["SELECT", "T1.name", "FROM", "student", "AS", "T1", "JOIN", "advisor", "AS", "T2", "ON", "T1.id", "=", "T2.s_id", "GROUP", "BY", "T2.s_id", "HAVING", "count", "(", "*", ")", ">", "1"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "student", "as", "t1", "join", "advisor", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "s_id", "group", "by", "t2", ".", "s_id", "having", "count", "(", "*", ")", ">", "value"], "question": "What are the names of students who have more than one advisor?", "question_toks": ["What", "are", "the", "names", "of", "students", "who", "have", "more", "than", "one", "advisor", "?"], "guid": 8644}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | Find the name of the campuses opened before 1800.", "sql": "SELECT campus FROM campuses WHERE YEAR  <  1800", "example": {"db_id": "csu_1", "query": "SELECT campus FROM campuses WHERE YEAR  <  1800", "query_toks": ["SELECT", "campus", "FROM", "campuses", "WHERE", "YEAR", "<", "1800"], "query_toks_no_value": ["select", "campus", "from", "campuses", "where", "year", "<", "value"], "question": "Find the name of the campuses opened before 1800.", "question_toks": ["Find", "the", "name", "of", "the", "campuses", "opened", "before", "1800", "."], "guid": 8645}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Give the name of the highest paid instructor.", "sql": "SELECT name FROM instructor ORDER BY salary DESC LIMIT 1", "example": {"db_id": "college_2", "query": "SELECT name FROM instructor ORDER BY salary DESC LIMIT 1", "query_toks": ["SELECT", "name", "FROM", "instructor", "ORDER", "BY", "salary", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "name", "from", "instructor", "order", "by", "salary", "desc", "limit", "value"], "question": "Give the name of the highest paid instructor.", "question_toks": ["Give", "the", "name", "of", "the", "highest", "paid", "instructor", "."], "guid": 8646}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | What are the names of the instructors in the Comp. Sci. department who earn more than 80000?", "sql": "SELECT name FROM instructor WHERE dept_name  =  'Comp. Sci.'  AND salary  >  80000", "example": {"db_id": "college_2", "query": "SELECT name FROM instructor WHERE dept_name  =  'Comp. Sci.'  AND salary  >  80000", "query_toks": ["SELECT", "name", "FROM", "instructor", "WHERE", "dept_name", "=", "'Comp", ".", "Sci", ".", "'", "AND", "salary", ">", "80000"], "query_toks_no_value": ["select", "name", "from", "instructor", "where", "dept_name", "=", "value", "and", "salary", ">", "value"], "question": "What are the names of the instructors in the Comp. Sci. department who earn more than 80000?", "question_toks": ["What", "are", "the", "names", "of", "the", "instructors", "in", "the", "Comp", ".", "Sci", ".", "department", "who", "earn", "more", "than", "80000", "?"], "guid": 8647}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Find the names of all instructors in Comp. Sci. department with salary > 80000.", "sql": "SELECT name FROM instructor WHERE dept_name  =  'Comp. Sci.'  AND salary  >  80000", "example": {"db_id": "college_2", "query": "SELECT name FROM instructor WHERE dept_name  =  'Comp. Sci.'  AND salary  >  80000", "query_toks": ["SELECT", "name", "FROM", "instructor", "WHERE", "dept_name", "=", "'Comp", ".", "Sci", ".", "'", "AND", "salary", ">", "80000"], "query_toks_no_value": ["select", "name", "from", "instructor", "where", "dept_name", "=", "value", "and", "salary", ">", "value"], "question": "Find the names of all instructors in Comp. Sci. department with salary > 80000.", "question_toks": ["Find", "the", "names", "of", "all", "instructors", "in", "Comp", ".", "Sci", ".", "department", "with", "salary", ">", "80000", "."], "guid": 8648}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | What is the campus fee for San Francisco State University in 1996?", "sql": "SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id  =  t2.campus WHERE t1.campus  =  \"San Francisco State University\" AND T2.year  =  1996", "example": {"db_id": "csu_1", "query": "SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id  =  t2.campus WHERE t1.campus  =  \"San Francisco State University\" AND T2.year  =  1996", "query_toks": ["SELECT", "campusfee", "FROM", "campuses", "AS", "T1", "JOIN", "csu_fees", "AS", "T2", "ON", "T1.id", "=", "t2.campus", "WHERE", "t1.campus", "=", "``", "San", "Francisco", "State", "University", "''", "AND", "T2.year", "=", "1996"], "query_toks_no_value": ["select", "campusfee", "from", "campuses", "as", "t1", "join", "csu_fees", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "campus", "where", "t1", ".", "campus", "=", "value", "and", "t2", ".", "year", "=", "value"], "question": "What is the campus fee for San Francisco State University in 1996?", "question_toks": ["What", "is", "the", "campus", "fee", "for", "San", "Francisco", "State", "University", "in", "1996", "?"], "guid": 8649}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | Among the procedures that cost more than 1000, which were not specialized in by physician John Wen?", "sql": "SELECT name FROM procedures WHERE cost  >  1000 EXCEPT SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"", "example": {"db_id": "hospital_1", "query": "SELECT name FROM procedures WHERE cost  >  1000 EXCEPT SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"", "query_toks": ["SELECT", "name", "FROM", "procedures", "WHERE", "cost", ">", "1000", "EXCEPT", "SELECT", "T3.name", "FROM", "physician", "AS", "T1", "JOIN", "trained_in", "AS", "T2", "ON", "T1.employeeid", "=", "T2.physician", "JOIN", "procedures", "AS", "T3", "ON", "T3.code", "=", "T2.treatment", "WHERE", "T1.name", "=", "``", "John", "Wen", "''"], "query_toks_no_value": ["select", "name", "from", "procedures", "where", "cost", ">", "value", "except", "select", "t3", ".", "name", "from", "physician", "as", "t1", "join", "trained_in", "as", "t2", "on", "t1", ".", "employeeid", "=", "t2", ".", "physician", "join", "procedures", "as", "t3", "on", "t3", ".", "code", "=", "t2", ".", "treatment", "where", "t1", ".", "name", "=", "value"], "question": "Among the procedures that cost more than 1000, which were not specialized in by physician John Wen?", "question_toks": ["Among", "the", "procedures", "that", "cost", "more", "than", "1000", ",", "which", "were", "not", "specialized", "in", "by", "physician", "John", "Wen", "?"], "guid": 8650}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | How many faculty is there in total in the year of 2002?", "sql": "SELECT sum(faculty) FROM faculty WHERE YEAR  =  2002", "example": {"db_id": "csu_1", "query": "SELECT sum(faculty) FROM faculty WHERE YEAR  =  2002", "query_toks": ["SELECT", "sum", "(", "faculty", ")", "FROM", "faculty", "WHERE", "YEAR", "=", "2002"], "query_toks_no_value": ["select", "sum", "(", "faculty", ")", "from", "faculty", "where", "year", "=", "value"], "question": "How many faculty is there in total in the year of 2002?", "question_toks": ["How", "many", "faculty", "is", "there", "in", "total", "in", "the", "year", "of", "2002", "?"], "guid": 8651}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Count the number of classrooms in Lamberton.", "sql": "SELECT count(*) FROM classroom WHERE building  =  'Lamberton'", "example": {"db_id": "college_2", "query": "SELECT count(*) FROM classroom WHERE building  =  'Lamberton'", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "classroom", "WHERE", "building", "=", "'Lamberton", "'"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "classroom", "where", "building", "=", "value"], "question": "Count the number of classrooms in Lamberton.", "question_toks": ["Count", "the", "number", "of", "classrooms", "in", "Lamberton", "."], "guid": 8652}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What is the highest, lowest, and average student GPA for every department?", "sql": "SELECT max(stu_gpa) ,  avg(stu_gpa) ,  min(stu_gpa) ,  dept_code FROM student GROUP BY dept_code", "example": {"db_id": "college_1", "query": "SELECT max(stu_gpa) ,  avg(stu_gpa) ,  min(stu_gpa) ,  dept_code FROM student GROUP BY dept_code", "query_toks": ["SELECT", "max", "(", "stu_gpa", ")", ",", "avg", "(", "stu_gpa", ")", ",", "min", "(", "stu_gpa", ")", ",", "dept_code", "FROM", "student", "GROUP", "BY", "dept_code"], "query_toks_no_value": ["select", "max", "(", "stu_gpa", ")", ",", "avg", "(", "stu_gpa", ")", ",", "min", "(", "stu_gpa", ")", ",", "dept_code", "from", "student", "group", "by", "dept_code"], "question": "What is the highest, lowest, and average student GPA for every department?", "question_toks": ["What", "is", "the", "highest", ",", "lowest", ",", "and", "average", "student", "GPA", "for", "every", "department", "?"], "guid": 8653}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | How many sections does each course has?", "sql": "SELECT count(*) ,  crs_code FROM CLASS GROUP BY crs_code", "example": {"db_id": "college_1", "query": "SELECT count(*) ,  crs_code FROM CLASS GROUP BY crs_code", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "crs_code", "FROM", "CLASS", "GROUP", "BY", "crs_code"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "crs_code", "from", "class", "group", "by", "crs_code"], "question": "How many sections does each course has?", "question_toks": ["How", "many", "sections", "does", "each", "course", "has", "?"], "guid": 8654}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Find the name of the students and their department names sorted by their total credits in ascending order.", "sql": "SELECT name ,  dept_name FROM student ORDER BY tot_cred", "example": {"db_id": "college_2", "query": "SELECT name ,  dept_name FROM student ORDER BY tot_cred", "query_toks": ["SELECT", "name", ",", "dept_name", "FROM", "student", "ORDER", "BY", "tot_cred"], "query_toks_no_value": ["select", "name", ",", "dept_name", "from", "student", "order", "by", "tot_cred"], "question": "Find the name of the students and their department names sorted by their total credits in ascending order.", "question_toks": ["Find", "the", "name", "of", "the", "students", "and", "their", "department", "names", "sorted", "by", "their", "total", "credits", "in", "ascending", "order", "."], "guid": 8655}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What is the name and the average gpa of department whose students have the highest average gpa?", "sql": "SELECT T2.dept_name ,  avg(T1.stu_gpa) FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY avg(T1.stu_gpa) DESC LIMIT 1", "example": {"db_id": "college_1", "query": "SELECT T2.dept_name ,  avg(T1.stu_gpa) FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY avg(T1.stu_gpa) DESC LIMIT 1", "query_toks": ["SELECT", "T2.dept_name", ",", "avg", "(", "T1.stu_gpa", ")", "FROM", "student", "AS", "T1", "JOIN", "department", "AS", "T2", "ON", "T1.dept_code", "=", "T2.dept_code", "GROUP", "BY", "T1.dept_code", "ORDER", "BY", "avg", "(", "T1.stu_gpa", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "dept_name", ",", "avg", "(", "t1", ".", "stu_gpa", ")", "from", "student", "as", "t1", "join", "department", "as", "t2", "on", "t1", ".", "dept_code", "=", "t2", ".", "dept_code", "group", "by", "t1", ".", "dept_code", "order", "by", "avg", "(", "t1", ".", "stu_gpa", ")", "desc", "limit", "value"], "question": "What is the name and the average gpa of department whose students have the highest average gpa?", "question_toks": ["What", "is", "the", "name", "and", "the", "average", "gpa", "of", "department", "whose", "students", "have", "the", "highest", "average", "gpa", "?"], "guid": 8656}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | What is the names of the physicians who prescribe medication Thesisin?", "sql": "SELECT DISTINCT T1.name FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician JOIN medication AS T3 ON T3.code = T2.medication WHERE T3.name  =  \"Thesisin\"", "example": {"db_id": "hospital_1", "query": "SELECT DISTINCT T1.name FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician JOIN medication AS T3 ON T3.code = T2.medication WHERE T3.name  =  \"Thesisin\"", "query_toks": ["SELECT", "DISTINCT", "T1.name", "FROM", "physician", "AS", "T1", "JOIN", "prescribes", "AS", "T2", "ON", "T1.employeeid", "=", "T2.physician", "JOIN", "medication", "AS", "T3", "ON", "T3.code", "=", "T2.medication", "WHERE", "T3.name", "=", "``", "Thesisin", "''"], "query_toks_no_value": ["select", "distinct", "t1", ".", "name", "from", "physician", "as", "t1", "join", "prescribes", "as", "t2", "on", "t1", ".", "employeeid", "=", "t2", ".", "physician", "join", "medication", "as", "t3", "on", "t3", ".", "code", "=", "t2", ".", "medication", "where", "t3", ".", "name", "=", "value"], "question": "What is the names of the physicians who prescribe medication Thesisin?", "question_toks": ["What", "is", "the", "names", "of", "the", "physicians", "who", "prescribe", "medication", "Thesisin", "?"], "guid": 8657}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What is the last name and office of the professor from the history department?", "sql": "SELECT T1.emp_lname ,  T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T2.dept_code  =  T3.dept_code WHERE T3.dept_name  =  'History'", "example": {"db_id": "college_1", "query": "SELECT T1.emp_lname ,  T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T2.dept_code  =  T3.dept_code WHERE T3.dept_name  =  'History'", "query_toks": ["SELECT", "T1.emp_lname", ",", "T2.prof_office", "FROM", "employee", "AS", "T1", "JOIN", "professor", "AS", "T2", "ON", "T1.emp_num", "=", "T2.emp_num", "JOIN", "department", "AS", "T3", "ON", "T2.dept_code", "=", "T3.dept_code", "WHERE", "T3.dept_name", "=", "'History", "'"], "query_toks_no_value": ["select", "t1", ".", "emp_lname", ",", "t2", ".", "prof_office", "from", "employee", "as", "t1", "join", "professor", "as", "t2", "on", "t1", ".", "emp_num", "=", "t2", ".", "emp_num", "join", "department", "as", "t3", "on", "t2", ".", "dept_code", "=", "t3", ".", "dept_code", "where", "t3", ".", "dept_name", "=", "value"], "question": "What is the last name and office of the professor from the history department?", "question_toks": ["What", "is", "the", "last", "name", "and", "office", "of", "the", "professor", "from", "the", "history", "department", "?"], "guid": 8658}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | Find the number of rooms for different block code?", "sql": "SELECT count(*) ,  T1.blockcode FROM BLOCK AS T1 JOIN room AS T2 ON T1.blockfloor  =  T2.blockfloor AND T1.blockcode  =  T2.blockcode GROUP BY T1.blockcode", "example": {"db_id": "hospital_1", "query": "SELECT count(*) ,  T1.blockcode FROM BLOCK AS T1 JOIN room AS T2 ON T1.blockfloor  =  T2.blockfloor AND T1.blockcode  =  T2.blockcode GROUP BY T1.blockcode", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "T1.blockcode", "FROM", "BLOCK", "AS", "T1", "JOIN", "room", "AS", "T2", "ON", "T1.blockfloor", "=", "T2.blockfloor", "AND", "T1.blockcode", "=", "T2.blockcode", "GROUP", "BY", "T1.blockcode"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "t1", ".", "blockcode", "from", "block", "as", "t1", "join", "room", "as", "t2", "on", "t1", ".", "blockfloor", "=", "t2", ".", "blockfloor", "and", "t1", ".", "blockcode", "=", "t2", ".", "blockcode", "group", "by", "t1", ".", "blockcode"], "question": "Find the number of rooms for different block code?", "question_toks": ["Find", "the", "number", "of", "rooms", "for", "different", "block", "code", "?"], "guid": 8659}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | How many instructors teach a course in the Spring of 2010?", "sql": "SELECT COUNT (DISTINCT ID) FROM teaches WHERE semester  =  'Spring' AND YEAR  =  2010", "example": {"db_id": "college_2", "query": "SELECT COUNT (DISTINCT ID) FROM teaches WHERE semester  =  'Spring' AND YEAR  =  2010", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "ID", ")", "FROM", "teaches", "WHERE", "semester", "=", "'Spring", "'", "AND", "YEAR", "=", "2010"], "query_toks_no_value": ["select", "count", "(", "distinct", "id", ")", "from", "teaches", "where", "semester", "=", "value", "and", "year", "=", "value"], "question": "How many instructors teach a course in the Spring of 2010?", "question_toks": ["How", "many", "instructors", "teach", "a", "course", "in", "the", "Spring", "of", "2010", "?"], "guid": 8660}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | What is the number of departments in Division \"AS\"?", "sql": "SELECT count(*) FROM DEPARTMENT WHERE Division  =  \"AS\"", "example": {"db_id": "college_3", "query": "SELECT count(*) FROM DEPARTMENT WHERE Division  =  \"AS\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "DEPARTMENT", "WHERE", "Division", "=", "``", "AS", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "department", "where", "division", "=", "value"], "question": "What is the number of departments in Division \"AS\"?", "question_toks": ["What", "is", "the", "number", "of", "departments", "in", "Division", "``", "AS", "''", "?"], "guid": 8661}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What is the first name, gpa and phone number of the top 5 students with highest gpa?", "sql": "SELECT stu_gpa ,  stu_phone ,  stu_fname FROM student ORDER BY stu_gpa DESC LIMIT 5", "example": {"db_id": "college_1", "query": "SELECT stu_gpa ,  stu_phone ,  stu_fname FROM student ORDER BY stu_gpa DESC LIMIT 5", "query_toks": ["SELECT", "stu_gpa", ",", "stu_phone", ",", "stu_fname", "FROM", "student", "ORDER", "BY", "stu_gpa", "DESC", "LIMIT", "5"], "query_toks_no_value": ["select", "stu_gpa", ",", "stu_phone", ",", "stu_fname", "from", "student", "order", "by", "stu_gpa", "desc", "limit", "value"], "question": "What is the first name, gpa and phone number of the top 5 students with highest gpa?", "question_toks": ["What", "is", "the", "first", "name", ",", "gpa", "and", "phone", "number", "of", "the", "top", "5", "students", "with", "highest", "gpa", "?"], "guid": 8662}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | What are the names of the campus that have more faculties in 2002 than the maximum number in Orange county?", "sql": "SELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2002 AND faculty  >  (SELECT max(faculty) FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2002 AND T1.county  =  \"Orange\")", "example": {"db_id": "csu_1", "query": "SELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2002 AND faculty  >  (SELECT max(faculty) FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2002 AND T1.county  =  \"Orange\")", "query_toks": ["SELECT", "T1.campus", "FROM", "campuses", "AS", "T1", "JOIN", "faculty", "AS", "T2", "ON", "T1.id", "=", "T2.campus", "WHERE", "T2.year", "=", "2002", "AND", "faculty", ">", "(", "SELECT", "max", "(", "faculty", ")", "FROM", "campuses", "AS", "T1", "JOIN", "faculty", "AS", "T2", "ON", "T1.id", "=", "T2.campus", "WHERE", "T2.year", "=", "2002", "AND", "T1.county", "=", "``", "Orange", "''", ")"], "query_toks_no_value": ["select", "t1", ".", "campus", "from", "campuses", "as", "t1", "join", "faculty", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "campus", "where", "t2", ".", "year", "=", "value", "and", "faculty", ">", "(", "select", "max", "(", "faculty", ")", "from", "campuses", "as", "t1", "join", "faculty", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "campus", "where", "t2", ".", "year", "=", "value", "and", "t1", ".", "county", "=", "value", ")"], "question": "What are the names of the campus that have more faculties in 2002 than the maximum number in Orange county?", "question_toks": ["What", "are", "the", "names", "of", "the", "campus", "that", "have", "more", "faculties", "in", "2002", "than", "the", "maximum", "number", "in", "Orange", "county", "?"], "guid": 8663}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Find the name of the department which has the highest average salary of professors.", "sql": "SELECT dept_name FROM instructor GROUP BY dept_name ORDER BY avg(salary) DESC LIMIT 1", "example": {"db_id": "college_2", "query": "SELECT dept_name FROM instructor GROUP BY dept_name ORDER BY avg(salary) DESC LIMIT 1", "query_toks": ["SELECT", "dept_name", "FROM", "instructor", "GROUP", "BY", "dept_name", "ORDER", "BY", "avg", "(", "salary", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "dept_name", "from", "instructor", "group", "by", "dept_name", "order", "by", "avg", "(", "salary", ")", "desc", "limit", "value"], "question": "Find the name of the department which has the highest average salary of professors.", "question_toks": ["Find", "the", "name", "of", "the", "department", "which", "has", "the", "highest", "average", "salary", "of", "professors", "."], "guid": 8664}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | How many departments offer courses?", "sql": "SELECT count(DISTINCT dept_name) FROM course", "example": {"db_id": "college_2", "query": "SELECT count(DISTINCT dept_name) FROM course", "query_toks": ["SELECT", "count", "(", "DISTINCT", "dept_name", ")", "FROM", "course"], "query_toks_no_value": ["select", "count", "(", "distinct", "dept_name", ")", "from", "course"], "question": "How many departments offer courses?", "question_toks": ["How", "many", "departments", "offer", "courses", "?"], "guid": 8665}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | Find the total number of hours have done for all students in each department.", "sql": "SELECT sum(stu_hrs) ,  dept_code FROM student GROUP BY dept_code", "example": {"db_id": "college_1", "query": "SELECT sum(stu_hrs) ,  dept_code FROM student GROUP BY dept_code", "query_toks": ["SELECT", "sum", "(", "stu_hrs", ")", ",", "dept_code", "FROM", "student", "GROUP", "BY", "dept_code"], "query_toks_no_value": ["select", "sum", "(", "stu_hrs", ")", ",", "dept_code", "from", "student", "group", "by", "dept_code"], "question": "Find the total number of hours have done for all students in each department.", "question_toks": ["Find", "the", "total", "number", "of", "hours", "have", "done", "for", "all", "students", "in", "each", "department", "."], "guid": 8666}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | What are the name and primarily affiliated department name of each physician?", "sql": "SELECT T1.name ,  T3.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T2.PrimaryAffiliation  =  1", "example": {"db_id": "hospital_1", "query": "SELECT T1.name ,  T3.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T2.PrimaryAffiliation  =  1", "query_toks": ["SELECT", "T1.name", ",", "T3.name", "FROM", "physician", "AS", "T1", "JOIN", "affiliated_with", "AS", "T2", "ON", "T1.EmployeeID", "=", "T2.physician", "JOIN", "department", "AS", "T3", "ON", "T2.department", "=", "T3.DepartmentID", "WHERE", "T2.PrimaryAffiliation", "=", "1"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "t3", ".", "name", "from", "physician", "as", "t1", "join", "affiliated_with", "as", "t2", "on", "t1", ".", "employeeid", "=", "t2", ".", "physician", "join", "department", "as", "t3", "on", "t2", ".", "department", "=", "t3", ".", "departmentid", "where", "t2", ".", "primaryaffiliation", "=", "value"], "question": "What are the name and primarily affiliated department name of each physician?", "question_toks": ["What", "are", "the", "name", "and", "primarily", "affiliated", "department", "name", "of", "each", "physician", "?"], "guid": 8667}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What is the first name of the student whose last name starts with the letter S and is taking ACCT-211?", "sql": "SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code WHERE T3.crs_code  =  'ACCT-211' AND T1.stu_lname LIKE 'S%'", "example": {"db_id": "college_1", "query": "SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code WHERE T3.crs_code  =  'ACCT-211' AND T1.stu_lname LIKE 'S%'", "query_toks": ["SELECT", "T1.stu_fname", "FROM", "student", "AS", "T1", "JOIN", "enroll", "AS", "T2", "ON", "T1.stu_num", "=", "T2.stu_num", "JOIN", "CLASS", "AS", "T3", "ON", "T2.class_code", "=", "T3.class_code", "WHERE", "T3.crs_code", "=", "'ACCT-211", "'", "AND", "T1.stu_lname", "LIKE", "'S", "%", "'"], "query_toks_no_value": ["select", "t1", ".", "stu_fname", "from", "student", "as", "t1", "join", "enroll", "as", "t2", "on", "t1", ".", "stu_num", "=", "t2", ".", "stu_num", "join", "class", "as", "t3", "on", "t2", ".", "class_code", "=", "t3", ".", "class_code", "where", "t3", ".", "crs_code", "=", "value", "and", "t1", ".", "stu_lname", "like", "value"], "question": "What is the first name of the student whose last name starts with the letter S and is taking ACCT-211?", "question_toks": ["What", "is", "the", "first", "name", "of", "the", "student", "whose", "last", "name", "starts", "with", "the", "letter", "S", "and", "is", "taking", "ACCT-211", "?"], "guid": 8668}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Count the number of courses without prerequisites.", "sql": "SELECT count(*) FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)", "example": {"db_id": "college_2", "query": "SELECT count(*) FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "course", "WHERE", "course_id", "NOT", "IN", "(", "SELECT", "course_id", "FROM", "prereq", ")"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "course", "where", "course_id", "not", "in", "(", "select", "course_id", "from", "prereq", ")"], "question": "Count the number of courses without prerequisites.", "question_toks": ["Count", "the", "number", "of", "courses", "without", "prerequisites", "."], "guid": 8669}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | Find the student first and last names and grade points of all enrollments.", "sql": "SELECT T3.Fname ,  T3.LName ,  T2.gradepoint FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID", "example": {"db_id": "college_3", "query": "SELECT T3.Fname ,  T3.LName ,  T2.gradepoint FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID", "query_toks": ["SELECT", "T3.Fname", ",", "T3.LName", ",", "T2.gradepoint", "FROM", "ENROLLED_IN", "AS", "T1", "JOIN", "GRADECONVERSION", "AS", "T2", "JOIN", "STUDENT", "AS", "T3", "ON", "T1.Grade", "=", "T2.lettergrade", "AND", "T1.StuID", "=", "T3.StuID"], "query_toks_no_value": ["select", "t3", ".", "fname", ",", "t3", ".", "lname", ",", "t2", ".", "gradepoint", "from", "enrolled_in", "as", "t1", "join", "gradeconversion", "as", "t2", "join", "student", "as", "t3", "on", "t1", ".", "grade", "=", "t2", ".", "lettergrade", "and", "t1", ".", "stuid", "=", "t3", ".", "stuid"], "question": "Find the student first and last names and grade points of all enrollments.", "question_toks": ["Find", "the", "student", "first", "and", "last", "names", "and", "grade", "points", "of", "all", "enrollments", "."], "guid": 8670}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | What are the names of instructors who didn't teach?", "sql": "SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches)", "example": {"db_id": "college_2", "query": "SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches)", "query_toks": ["SELECT", "name", "FROM", "instructor", "WHERE", "id", "NOT", "IN", "(", "SELECT", "id", "FROM", "teaches", ")"], "query_toks_no_value": ["select", "name", "from", "instructor", "where", "id", "not", "in", "(", "select", "id", "from", "teaches", ")"], "question": "What are the names of instructors who didn't teach?", "question_toks": ["What", "are", "the", "names", "of", "instructors", "who", "did", "n't", "teach", "?"], "guid": 8671}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | What are the distinct salaries of all instructors who earned less than the maximum salary?", "sql": "SELECT DISTINCT salary FROM instructor WHERE salary  <  (SELECT max(salary) FROM instructor)", "example": {"db_id": "college_2", "query": "SELECT DISTINCT salary FROM instructor WHERE salary  <  (SELECT max(salary) FROM instructor)", "query_toks": ["SELECT", "DISTINCT", "salary", "FROM", "instructor", "WHERE", "salary", "<", "(", "SELECT", "max", "(", "salary", ")", "FROM", "instructor", ")"], "query_toks_no_value": ["select", "distinct", "salary", "from", "instructor", "where", "salary", "<", "(", "select", "max", "(", "salary", ")", "from", "instructor", ")"], "question": "What are the distinct salaries of all instructors who earned less than the maximum salary?", "question_toks": ["What", "are", "the", "distinct", "salaries", "of", "all", "instructors", "who", "earned", "less", "than", "the", "maximum", "salary", "?"], "guid": 8672}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | What are the names of the students who took classes in 2009 or 2010?", "sql": "SELECT DISTINCT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE YEAR  =  2009 OR YEAR  =  2010", "example": {"db_id": "college_2", "query": "SELECT DISTINCT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE YEAR  =  2009 OR YEAR  =  2010", "query_toks": ["SELECT", "DISTINCT", "T1.name", "FROM", "student", "AS", "T1", "JOIN", "takes", "AS", "T2", "ON", "T1.id", "=", "T2.id", "WHERE", "YEAR", "=", "2009", "OR", "YEAR", "=", "2010"], "query_toks_no_value": ["select", "distinct", "t1", ".", "name", "from", "student", "as", "t1", "join", "takes", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "id", "where", "year", "=", "value", "or", "year", "=", "value"], "question": "What are the names of the students who took classes in 2009 or 2010?", "question_toks": ["What", "are", "the", "names", "of", "the", "students", "who", "took", "classes", "in", "2009", "or", "2010", "?"], "guid": 8673}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | What is the average cost of procedures that physician John Wen was trained in?", "sql": "SELECT avg(T3.cost) FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"", "example": {"db_id": "hospital_1", "query": "SELECT avg(T3.cost) FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"", "query_toks": ["SELECT", "avg", "(", "T3.cost", ")", "FROM", "physician", "AS", "T1", "JOIN", "trained_in", "AS", "T2", "ON", "T1.employeeid", "=", "T2.physician", "JOIN", "procedures", "AS", "T3", "ON", "T3.code", "=", "T2.treatment", "WHERE", "T1.name", "=", "``", "John", "Wen", "''"], "query_toks_no_value": ["select", "avg", "(", "t3", ".", "cost", ")", "from", "physician", "as", "t1", "join", "trained_in", "as", "t2", "on", "t1", ".", "employeeid", "=", "t2", ".", "physician", "join", "procedures", "as", "t3", "on", "t3", ".", "code", "=", "t2", ".", "treatment", "where", "t1", ".", "name", "=", "value"], "question": "What is the average cost of procedures that physician John Wen was trained in?", "question_toks": ["What", "is", "the", "average", "cost", "of", "procedures", "that", "physician", "John", "Wen", "was", "trained", "in", "?"], "guid": 8674}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | Find the name and position of physicians who prescribe some medication whose brand is X?", "sql": "SELECT DISTINCT T1.name ,  T1.position FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician JOIN medication AS T3 ON T3.code = T2.medication WHERE T3.Brand  =  \"X\"", "example": {"db_id": "hospital_1", "query": "SELECT DISTINCT T1.name ,  T1.position FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician JOIN medication AS T3 ON T3.code = T2.medication WHERE T3.Brand  =  \"X\"", "query_toks": ["SELECT", "DISTINCT", "T1.name", ",", "T1.position", "FROM", "physician", "AS", "T1", "JOIN", "prescribes", "AS", "T2", "ON", "T1.employeeid", "=", "T2.physician", "JOIN", "medication", "AS", "T3", "ON", "T3.code", "=", "T2.medication", "WHERE", "T3.Brand", "=", "``", "X", "''"], "query_toks_no_value": ["select", "distinct", "t1", ".", "name", ",", "t1", ".", "position", "from", "physician", "as", "t1", "join", "prescribes", "as", "t2", "on", "t1", ".", "employeeid", "=", "t2", ".", "physician", "join", "medication", "as", "t3", "on", "t3", ".", "code", "=", "t2", ".", "medication", "where", "t3", ".", "brand", "=", "value"], "question": "Find the name and position of physicians who prescribe some medication whose brand is X?", "question_toks": ["Find", "the", "name", "and", "position", "of", "physicians", "who", "prescribe", "some", "medication", "whose", "brand", "is", "X", "?"], "guid": 8675}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | Find the number of students that have at least one grade \"B\".", "sql": "SELECT COUNT(DISTINCT StuID) FROM ENROLLED_IN WHERE Grade  =  \"B\"", "example": {"db_id": "college_3", "query": "SELECT COUNT(DISTINCT StuID) FROM ENROLLED_IN WHERE Grade  =  \"B\"", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "StuID", ")", "FROM", "ENROLLED_IN", "WHERE", "Grade", "=", "``", "B", "''"], "query_toks_no_value": ["select", "count", "(", "distinct", "stuid", ")", "from", "enrolled_in", "where", "grade", "=", "value"], "question": "Find the number of students that have at least one grade \"B\".", "question_toks": ["Find", "the", "number", "of", "students", "that", "have", "at", "least", "one", "grade", "``", "B", "''", "."], "guid": 8676}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | Find the number of patients' prescriptions physician John Dorian made.", "sql": "SELECT count(T1.SSN) FROM patient AS T1 JOIN prescribes AS T2 ON T1.SSN  =  T2.patient JOIN physician AS T3 ON T2.physician  =  T3.employeeid WHERE T3.name = \"John Dorian\"", "example": {"db_id": "hospital_1", "query": "SELECT count(T1.SSN) FROM patient AS T1 JOIN prescribes AS T2 ON T1.SSN  =  T2.patient JOIN physician AS T3 ON T2.physician  =  T3.employeeid WHERE T3.name = \"John Dorian\"", "query_toks": ["SELECT", "count", "(", "T1.SSN", ")", "FROM", "patient", "AS", "T1", "JOIN", "prescribes", "AS", "T2", "ON", "T1.SSN", "=", "T2.patient", "JOIN", "physician", "AS", "T3", "ON", "T2.physician", "=", "T3.employeeid", "WHERE", "T3.name", "=", "``", "John", "Dorian", "''"], "query_toks_no_value": ["select", "count", "(", "t1", ".", "ssn", ")", "from", "patient", "as", "t1", "join", "prescribes", "as", "t2", "on", "t1", ".", "ssn", "=", "t2", ".", "patient", "join", "physician", "as", "t3", "on", "t2", ".", "physician", "=", "t3", ".", "employeeid", "where", "t3", ".", "name", "=", "value"], "question": "Find the number of patients' prescriptions physician John Dorian made.", "question_toks": ["Find", "the", "number", "of", "patients", "'", "prescriptions", "physician", "John", "Dorian", "made", "."], "guid": 8677}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | Which department offers the most credits all together?", "sql": "SELECT T3.dept_name FROM course AS T1 JOIN CLASS AS T2 ON T1.crs_code  =  T2.crs_code JOIN department AS T3 ON T1.dept_code  =  T3.dept_code GROUP BY T1.dept_code ORDER BY sum(T1.crs_credit) DESC LIMIT 1", "example": {"db_id": "college_1", "query": "SELECT T3.dept_name FROM course AS T1 JOIN CLASS AS T2 ON T1.crs_code  =  T2.crs_code JOIN department AS T3 ON T1.dept_code  =  T3.dept_code GROUP BY T1.dept_code ORDER BY sum(T1.crs_credit) DESC LIMIT 1", "query_toks": ["SELECT", "T3.dept_name", "FROM", "course", "AS", "T1", "JOIN", "CLASS", "AS", "T2", "ON", "T1.crs_code", "=", "T2.crs_code", "JOIN", "department", "AS", "T3", "ON", "T1.dept_code", "=", "T3.dept_code", "GROUP", "BY", "T1.dept_code", "ORDER", "BY", "sum", "(", "T1.crs_credit", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t3", ".", "dept_name", "from", "course", "as", "t1", "join", "class", "as", "t2", "on", "t1", ".", "crs_code", "=", "t2", ".", "crs_code", "join", "department", "as", "t3", "on", "t1", ".", "dept_code", "=", "t3", ".", "dept_code", "group", "by", "t1", ".", "dept_code", "order", "by", "sum", "(", "t1", ".", "crs_credit", ")", "desc", "limit", "value"], "question": "Which department offers the most credits all together?", "question_toks": ["Which", "department", "offers", "the", "most", "credits", "all", "together", "?"], "guid": 8678}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | What are the course names, ordered by credits?", "sql": "SELECT CName FROM COURSE ORDER BY Credits", "example": {"db_id": "college_3", "query": "SELECT CName FROM COURSE ORDER BY Credits", "query_toks": ["SELECT", "CName", "FROM", "COURSE", "ORDER", "BY", "Credits"], "query_toks_no_value": ["select", "cname", "from", "course", "order", "by", "credits"], "question": "What are the course names, ordered by credits?", "question_toks": ["What", "are", "the", "course", "names", ",", "ordered", "by", "credits", "?"], "guid": 8679}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | What are the names of all instructors with names that include \"dar\"?", "sql": "SELECT name FROM instructor WHERE name LIKE '%dar%'", "example": {"db_id": "college_2", "query": "SELECT name FROM instructor WHERE name LIKE '%dar%'", "query_toks": ["SELECT", "name", "FROM", "instructor", "WHERE", "name", "LIKE", "'", "%", "dar", "%", "'"], "query_toks_no_value": ["select", "name", "from", "instructor", "where", "name", "like", "value"], "question": "What are the names of all instructors with names that include \"dar\"?", "question_toks": ["What", "are", "the", "names", "of", "all", "instructors", "with", "names", "that", "include", "``", "dar", "''", "?"], "guid": 8680}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | Which building does the instructor who teaches the most number of courses live in?", "sql": "SELECT T2.Building FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor  =  T2.FacID GROUP BY T1.Instructor ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "college_3", "query": "SELECT T2.Building FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor  =  T2.FacID GROUP BY T1.Instructor ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T2.Building", "FROM", "COURSE", "AS", "T1", "JOIN", "FACULTY", "AS", "T2", "ON", "T1.Instructor", "=", "T2.FacID", "GROUP", "BY", "T1.Instructor", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "building", "from", "course", "as", "t1", "join", "faculty", "as", "t2", "on", "t1", ".", "instructor", "=", "t2", ".", "facid", "group", "by", "t1", ".", "instructor", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which building does the instructor who teaches the most number of courses live in?", "question_toks": ["Which", "building", "does", "the", "instructor", "who", "teaches", "the", "most", "number", "of", "courses", "live", "in", "?"], "guid": 8681}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | How many different departments are there in each school that has less than 5 apartments?", "sql": "SELECT count(DISTINCT dept_name) ,  school_code FROM department GROUP BY school_code HAVING count(DISTINCT dept_name)  <  5", "example": {"db_id": "college_1", "query": "SELECT count(DISTINCT dept_name) ,  school_code FROM department GROUP BY school_code HAVING count(DISTINCT dept_name)  <  5", "query_toks": ["SELECT", "count", "(", "DISTINCT", "dept_name", ")", ",", "school_code", "FROM", "department", "GROUP", "BY", "school_code", "HAVING", "count", "(", "DISTINCT", "dept_name", ")", "<", "5"], "query_toks_no_value": ["select", "count", "(", "distinct", "dept_name", ")", ",", "school_code", "from", "department", "group", "by", "school_code", "having", "count", "(", "distinct", "dept_name", ")", "<", "value"], "question": "How many different departments are there in each school that has less than 5 apartments?", "question_toks": ["How", "many", "different", "departments", "are", "there", "in", "each", "school", "that", "has", "less", "than", "5", "apartments", "?"], "guid": 8682}}