{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | Find the count of universities whose campus fee is greater than the average campus fee.", "sql": "SELECT COUNT(*) FROM csu_fees WHERE campusfee > (SELECT AVG(campusfee) FROM csu_fees);", "example": {"db_id": "csu_1", "query": "SELECT count(*) FROM csu_fees WHERE campusfee  >  (SELECT avg(campusfee) FROM csu_fees)", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "csu_fees", "WHERE", "campusfee", ">", "(", "SELECT", "avg", "(", "campusfee", ")", "FROM", "csu_fees", ")"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "csu_fees", "where", "campusfee", ">", "(", "select", "avg", "(", "campusfee", ")", "from", "csu_fees", ")"], "question": "Find the count of universities whose campus fee is greater than the average campus fee.", "question_toks": ["Find", "the", "count", "of", "universities", "whose", "campus", "fee", "is", "greater", "than", "the", "average", "campus", "fee", "."], "guid": 8244}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | List the campuses in Los Angeles county.", "sql": "SELECT campus FROM campuses WHERE county = \"Los Angeles\"", "example": {"db_id": "csu_1", "query": "SELECT campus FROM campuses WHERE county  =  \"Los Angeles\"", "query_toks": ["SELECT", "campus", "FROM", "campuses", "WHERE", "county", "=", "``", "Los", "Angeles", "''"], "query_toks_no_value": ["select", "campus", "from", "campuses", "where", "county", "=", "value"], "question": "List the campuses in Los Angeles county.", "question_toks": ["List", "the", "campuses", "in", "Los", "Angeles", "county", "."], "guid": 8422}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | What are the greatest and average capacity for rooms in each building?", "sql": "SELECT max(capacity) , avg(capacity) , building FROM classroom GROUP BY building", "example": {"db_id": "college_2", "query": "SELECT max(capacity) ,  avg(capacity) ,  building FROM classroom GROUP BY building", "query_toks": ["SELECT", "max", "(", "capacity", ")", ",", "avg", "(", "capacity", ")", ",", "building", "FROM", "classroom", "GROUP", "BY", "building"], "query_toks_no_value": ["select", "max", "(", "capacity", ")", ",", "avg", "(", "capacity", ")", ",", "building", "from", "classroom", "group", "by", "building"], "question": "What are the greatest and average capacity for rooms in each building?", "question_toks": ["What", "are", "the", "greatest", "and", "average", "capacity", "for", "rooms", "in", "each", "building", "?"], "guid": 8380}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | Find the total credits of all classes offered by each department.", "sql": "SELECT sum(T1.crs_credit) , T1.dept_code FROM course AS T1 JOIN CLASS AS T2 ON T1.crs_code = T2.crs_code GROUP BY T1.dept_code", "example": {"db_id": "college_1", "query": "SELECT sum(T1.crs_credit) ,  T1.dept_code FROM course AS T1 JOIN CLASS AS T2 ON T1.crs_code  =  T2.crs_code GROUP BY T1.dept_code", "query_toks": ["SELECT", "sum", "(", "T1.crs_credit", ")", ",", "T1.dept_code", "FROM", "course", "AS", "T1", "JOIN", "CLASS", "AS", "T2", "ON", "T1.crs_code", "=", "T2.crs_code", "GROUP", "BY", "T1.dept_code"], "query_toks_no_value": ["select", "sum", "(", "t1", ".", "crs_credit", ")", ",", "t1", ".", "dept_code", "from", "course", "as", "t1", "join", "class", "as", "t2", "on", "t1", ".", "crs_code", "=", "t2", ".", "crs_code", "group", "by", "t1", ".", "dept_code"], "question": "Find the total credits of all classes offered by each department.", "question_toks": ["Find", "the", "total", "credits", "of", "all", "classes", "offered", "by", "each", "department", "."], "guid": 8137}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | What are the names of instructors who earn more than at least one instructor from the Biology department?", "sql": "SELECT name FROM instructor WHERE salary > (SELECT min(salary) FROM instructor WHERE dept_name = 'Biology')", "example": {"db_id": "college_2", "query": "SELECT name FROM instructor WHERE salary  >  (SELECT min(salary) FROM instructor WHERE dept_name  =  'Biology')", "query_toks": ["SELECT", "name", "FROM", "instructor", "WHERE", "salary", ">", "(", "SELECT", "min", "(", "salary", ")", "FROM", "instructor", "WHERE", "dept_name", "=", "'Biology", "'", ")"], "query_toks_no_value": ["select", "name", "from", "instructor", "where", "salary", ">", "(", "select", "min", "(", "salary", ")", "from", "instructor", "where", "dept_name", "=", "value", ")"], "question": "What are the names of instructors who earn more than at least one instructor from the Biology department?", "question_toks": ["What", "are", "the", "names", "of", "instructors", "who", "earn", "more", "than", "at", "least", "one", "instructor", "from", "the", "Biology", "department", "?"], "guid": 8265}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | How many campuses exist are in the county of LA?", "sql": "SELECT COUNT(*) FROM campuses WHERE county = 'Los Angeles'", "example": {"db_id": "csu_1", "query": "SELECT count(*) FROM campuses WHERE county  =  \"Los Angeles\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "campuses", "WHERE", "county", "=", "``", "Los", "Angeles", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "campuses", "where", "county", "=", "value"], "question": "How many campuses exist are in the county of LA?", "question_toks": ["How", "many", "campuses", "exist", "are", "in", "the", "county", "of", "LA", "?"], "guid": 8289}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What are the first names and date of birth of professors teaching course ACCT-211?", "sql": "SELECT DISTINCT T1.EMP_FNAME , T1.EMP_DOB FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM = T2.PROF_NUM WHERE CRS_CODE = \"ACCT-211\"", "example": {"db_id": "college_1", "query": "SELECT DISTINCT T1.EMP_FNAME ,  T1.EMP_DOB FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM  =  T2.PROF_NUM WHERE CRS_CODE  =  \"ACCT-211\"", "query_toks": ["SELECT", "DISTINCT", "T1.EMP_FNAME", ",", "T1.EMP_DOB", "FROM", "employee", "AS", "T1", "JOIN", "CLASS", "AS", "T2", "ON", "T1.EMP_NUM", "=", "T2.PROF_NUM", "WHERE", "CRS_CODE", "=", "``", "ACCT-211", "''"], "query_toks_no_value": ["select", "distinct", "t1", ".", "emp_fname", ",", "t1", ".", "emp_dob", "from", "employee", "as", "t1", "join", "class", "as", "t2", "on", "t1", ".", "emp_num", "=", "t2", ".", "prof_num", "where", "crs_code", "=", "value"], "question": "What are the first names and date of birth of professors teaching course ACCT-211?", "question_toks": ["What", "are", "the", "first", "names", "and", "date", "of", "birth", "of", "professors", "teaching", "course", "ACCT-211", "?"], "guid": 8308}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Find the name of the instructors who taught C Programming course before.", "sql": "SELECT T1.name FROM instructor AS T1 JOIN teaches AS T2 ON T1.id = T2.id JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T3.title = 'C Programming'", "example": {"db_id": "college_2", "query": "SELECT T1.name FROM instructor AS T1 JOIN teaches AS T2 ON T1.id  =  T2.id JOIN course AS T3 ON T2.course_id  =  T3.course_id WHERE T3.title  =  'C Programming'", "query_toks": ["SELECT", "T1.name", "FROM", "instructor", "AS", "T1", "JOIN", "teaches", "AS", "T2", "ON", "T1.id", "=", "T2.id", "JOIN", "course", "AS", "T3", "ON", "T2.course_id", "=", "T3.course_id", "WHERE", "T3.title", "=", "'C", "Programming", "'"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "instructor", "as", "t1", "join", "teaches", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "id", "join", "course", "as", "t3", "on", "t2", ".", "course_id", "=", "t3", ".", "course_id", "where", "t3", ".", "title", "=", "value"], "question": "Find the name of the instructors who taught C Programming course before.", "question_toks": ["Find", "the", "name", "of", "the", "instructors", "who", "taught", "C", "Programming", "course", "before", "."], "guid": 8408}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | Find the first name of student who is taking classes from accounting and Computer Info. Systems departments", "sql": "SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code JOIN course AS T4 ON T3.crs_code  =  T4.crs_code JOIN department AS T5 ON T5.dept_code  =  T4.dept_code WHERE T5.dept_name  =  'Accounting' INTERSECT SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code JOIN course AS T4 ON T3.crs_code  =  T4.crs_code JOIN department AS T5 ON T5.dept_code  =  T4.dept_code WHERE T5.dept_name  =  'Computer Info. Systems'", "example": {"db_id": "college_1", "query": "SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code JOIN course AS T4 ON T3.crs_code  =  T4.crs_code JOIN department AS T5 ON T5.dept_code  =  T4.dept_code WHERE T5.dept_name  =  'Accounting' INTERSECT SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code JOIN course AS T4 ON T3.crs_code  =  T4.crs_code JOIN department AS T5 ON T5.dept_code  =  T4.dept_code WHERE T5.dept_name  =  'Computer Info. Systems'", "query_toks": ["SELECT", "T1.stu_fname", "FROM", "student", "AS", "T1", "JOIN", "enroll", "AS", "T2", "ON", "T1.stu_num", "=", "T2.stu_num", "JOIN", "CLASS", "AS", "T3", "ON", "T2.class_code", "=", "T3.class_code", "JOIN", "course", "AS", "T4", "ON", "T3.crs_code", "=", "T4.crs_code", "JOIN", "department", "AS", "T5", "ON", "T5.dept_code", "=", "T4.dept_code", "WHERE", "T5.dept_name", "=", "'Accounting", "'", "INTERSECT", "SELECT", "T1.stu_fname", "FROM", "student", "AS", "T1", "JOIN", "enroll", "AS", "T2", "ON", "T1.stu_num", "=", "T2.stu_num", "JOIN", "CLASS", "AS", "T3", "ON", "T2.class_code", "=", "T3.class_code", "JOIN", "course", "AS", "T4", "ON", "T3.crs_code", "=", "T4.crs_code", "JOIN", "department", "AS", "T5", "ON", "T5.dept_code", "=", "T4.dept_code", "WHERE", "T5.dept_name", "=", "'Computer", "Info", ".", "Systems", "'"], "query_toks_no_value": ["select", "t1", ".", "stu_fname", "from", "student", "as", "t1", "join", "enroll", "as", "t2", "on", "t1", ".", "stu_num", "=", "t2", ".", "stu_num", "join", "class", "as", "t3", "on", "t2", ".", "class_code", "=", "t3", ".", "class_code", "join", "course", "as", "t4", "on", "t3", ".", "crs_code", "=", "t4", ".", "crs_code", "join", "department", "as", "t5", "on", "t5", ".", "dept_code", "=", "t4", ".", "dept_code", "where", "t5", ".", "dept_name", "=", "value", "intersect", "select", "t1", ".", "stu_fname", "from", "student", "as", "t1", "join", "enroll", "as", "t2", "on", "t1", ".", "stu_num", "=", "t2", ".", "stu_num", "join", "class", "as", "t3", "on", "t2", ".", "class_code", "=", "t3", ".", "class_code", "join", "course", "as", "t4", "on", "t3", ".", "crs_code", "=", "t4", ".", "crs_code", "join", "department", "as", "t5", "on", "t5", ".", "dept_code", "=", "t4", ".", "dept_code", "where", "t5", ".", "dept_name", "=", "value"], "question": "Find the first name of student who is taking classes from accounting and Computer Info. Systems departments", "question_toks": ["Find", "the", "first", "name", "of", "student", "who", "is", "taking", "classes", "from", "accounting", "and", "Computer", "Info", ".", "Systems", "departments"], "guid": 8257}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | How many universities have a campus fee greater than the average?", "sql": "SELECT count(*) FROM csu_fees WHERE campusfee > (SELECT avg(campusfee) FROM csu_fees)", "example": {"db_id": "csu_1", "query": "SELECT count(*) FROM csu_fees WHERE campusfee  >  (SELECT avg(campusfee) FROM csu_fees)", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "csu_fees", "WHERE", "campusfee", ">", "(", "SELECT", "avg", "(", "campusfee", ")", "FROM", "csu_fees", ")"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "csu_fees", "where", "campusfee", ">", "(", "select", "avg", "(", "campusfee", ")", "from", "csu_fees", ")"], "question": "How many universities have a campus fee greater than the average?", "question_toks": ["How", "many", "universities", "have", "a", "campus", "fee", "greater", "than", "the", "average", "?"], "guid": 8199}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | Which physicians have never taken any appointment? Find their names.", "sql": "SELECT name FROM physician EXCEPT SELECT T2.name FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician = T2.EmployeeID", "example": {"db_id": "hospital_1", "query": "SELECT name FROM physician EXCEPT SELECT T2.name FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician  =  T2.EmployeeID", "query_toks": ["SELECT", "name", "FROM", "physician", "EXCEPT", "SELECT", "T2.name", "FROM", "appointment", "AS", "T1", "JOIN", "physician", "AS", "T2", "ON", "T1.Physician", "=", "T2.EmployeeID"], "query_toks_no_value": ["select", "name", "from", "physician", "except", "select", "t2", ".", "name", "from", "appointment", "as", "t1", "join", "physician", "as", "t2", "on", "t1", ".", "physician", "=", "t2", ".", "employeeid"], "question": "Which physicians have never taken any appointment? Find their names.", "question_toks": ["Which", "physicians", "have", "never", "taken", "any", "appointment", "?", "Find", "their", "names", "."], "guid": 8108}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | List the names of all courses ordered by their titles and credits.", "sql": "SELECT title FROM course ORDER BY title , credits", "example": {"db_id": "college_2", "query": "SELECT title FROM course ORDER BY title ,  credits", "query_toks": ["SELECT", "title", "FROM", "course", "ORDER", "BY", "title", ",", "credits"], "query_toks_no_value": ["select", "title", "from", "course", "order", "by", "title", ",", "credits"], "question": "List the names of all courses ordered by their titles and credits.", "question_toks": ["List", "the", "names", "of", "all", "courses", "ordered", "by", "their", "titles", "and", "credits", "."], "guid": 8267}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | How many faculty, in total, are there in the year 2002?", "sql": "SELECT SUM(faculty) FROM faculty WHERE year = 2002", "example": {"db_id": "csu_1", "query": "SELECT sum(faculty) FROM faculty WHERE YEAR  =  2002", "query_toks": ["SELECT", "sum", "(", "faculty", ")", "FROM", "faculty", "WHERE", "YEAR", "=", "2002"], "query_toks_no_value": ["select", "sum", "(", "faculty", ")", "from", "faculty", "where", "year", "=", "value"], "question": "How many faculty, in total, are there in the year 2002?", "question_toks": ["How", "many", "faculty", ",", "in", "total", ",", "are", "there", "in", "the", "year", "2002", "?"], "guid": 8295}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | How many professors attained either Ph.D. or Masters degrees?", "sql": "SELECT COUNT(*) FROM professor WHERE prof_high_degree = 'Ph.D.' OR prof_high_degree = 'MA'", "example": {"db_id": "college_1", "query": "SELECT count(*) FROM professor WHERE prof_high_degree  =  'Ph.D.' OR prof_high_degree  =  'MA'", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "professor", "WHERE", "prof_high_degree", "=", "'Ph.D", ".", "'", "OR", "prof_high_degree", "=", "'MA", "'"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "professor", "where", "prof_high_degree", "=", "value", "or", "prof_high_degree", "=", "value"], "question": "How many professors attained either Ph.D. or Masters degrees?", "question_toks": ["How", "many", "professors", "attained", "either", "Ph.D.", "or", "Masters", "degrees", "?"], "guid": 8168}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | Compute the mean price of procedures physician John Wen was trained in.", "sql": "SELECT AVG(T3.cost) FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid = T2.physician JOIN procedures AS T3 ON T3.code = T2.treatment WHERE T1.name = \"John Wen\"", "example": {"db_id": "hospital_1", "query": "SELECT avg(T3.cost) FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"", "query_toks": ["SELECT", "avg", "(", "T3.cost", ")", "FROM", "physician", "AS", "T1", "JOIN", "trained_in", "AS", "T2", "ON", "T1.employeeid", "=", "T2.physician", "JOIN", "procedures", "AS", "T3", "ON", "T3.code", "=", "T2.treatment", "WHERE", "T1.name", "=", "``", "John", "Wen", "''"], "query_toks_no_value": ["select", "avg", "(", "t3", ".", "cost", ")", "from", "physician", "as", "t1", "join", "trained_in", "as", "t2", "on", "t1", ".", "employeeid", "=", "t2", ".", "physician", "join", "procedures", "as", "t3", "on", "t3", ".", "code", "=", "t2", ".", "treatment", "where", "t1", ".", "name", "=", "value"], "question": "Compute the mean price of procedures physician John Wen was trained in.", "question_toks": ["Compute", "the", "mean", "price", "of", "procedures", "physician", "John", "Wen", "was", "trained", "in", "."], "guid": 8200}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | Find the rooms of faculties with rank professor who live in building NEB.", "sql": "SELECT Room FROM FACULTY WHERE Rank = \"Professor\" AND Building = \"NEB\"", "example": {"db_id": "college_3", "query": "SELECT Room FROM FACULTY WHERE Rank  =  \"Professor\" AND Building  =  \"NEB\"", "query_toks": ["SELECT", "Room", "FROM", "FACULTY", "WHERE", "Rank", "=", "``", "Professor", "''", "AND", "Building", "=", "``", "NEB", "''"], "query_toks_no_value": ["select", "room", "from", "faculty", "where", "rank", "=", "value", "and", "building", "=", "value"], "question": "Find the rooms of faculties with rank professor who live in building NEB.", "question_toks": ["Find", "the", "rooms", "of", "faculties", "with", "rank", "professor", "who", "live", "in", "building", "NEB", "."], "guid": 8302}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | What nurses are on call with block floor 1 and block code 1? Tell me their names.", "sql": "SELECT nurse FROM on_call WHERE blockfloor  =  1 AND blockcode  =  1", "example": {"db_id": "hospital_1", "query": "SELECT nurse FROM on_call WHERE blockfloor  =  1 AND blockcode  =  1", "query_toks": ["SELECT", "nurse", "FROM", "on_call", "WHERE", "blockfloor", "=", "1", "AND", "blockcode", "=", "1"], "query_toks_no_value": ["select", "nurse", "from", "on_call", "where", "blockfloor", "=", "value", "and", "blockcode", "=", "value"], "question": "What nurses are on call with block floor 1 and block code 1? Tell me their names.", "question_toks": ["What", "nurses", "are", "on", "call", "with", "block", "floor", "1", "and", "block", "code", "1", "?", "Tell", "me", "their", "names", "."], "guid": 8421}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | Find the first names of students whose first names contain letter \"a\".", "sql": "SELECT Fname FROM STUDENT WHERE Fname LIKE '%a%'", "example": {"db_id": "college_3", "query": "SELECT DISTINCT Fname FROM STUDENT WHERE Fname LIKE '%a%'", "query_toks": ["SELECT", "DISTINCT", "Fname", "FROM", "STUDENT", "WHERE", "Fname", "LIKE", "'", "%", "a", "%", "'"], "query_toks_no_value": ["select", "distinct", "fname", "from", "student", "where", "fname", "like", "value"], "question": "Find the first names of students whose first names contain letter \"a\".", "question_toks": ["Find", "the", "first", "names", "of", "students", "whose", "first", "names", "contain", "letter", "``", "a", "''", "."], "guid": 8382}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What is the last name of the student who got a grade A in the class with code 10018.", "sql": "SELECT T1.stu_lname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num WHERE T2.enroll_grade = 'A' AND T2.class_code = 10018", "example": {"db_id": "college_1", "query": "SELECT T1.stu_lname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num WHERE T2.enroll_grade  =  'A' AND T2.class_code  =  10018", "query_toks": ["SELECT", "T1.stu_lname", "FROM", "student", "AS", "T1", "JOIN", "enroll", "AS", "T2", "ON", "T1.stu_num", "=", "T2.stu_num", "WHERE", "T2.enroll_grade", "=", "'A", "'", "AND", "T2.class_code", "=", "10018"], "query_toks_no_value": ["select", "t1", ".", "stu_lname", "from", "student", "as", "t1", "join", "enroll", "as", "t2", "on", "t1", ".", "stu_num", "=", "t2", ".", "stu_num", "where", "t2", ".", "enroll_grade", "=", "value", "and", "t2", ".", "class_code", "=", "value"], "question": "What is the last name of the student who got a grade A in the class with code 10018.", "question_toks": ["What", "is", "the", "last", "name", "of", "the", "student", "who", "got", "a", "grade", "A", "in", "the", "class", "with", "code", "10018", "."], "guid": 8142}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | What are the names of all instructors in the Comp. Sci. department?", "sql": "SELECT name FROM instructor WHERE dept_name = 'Comp. Sci.'", "example": {"db_id": "college_2", "query": "SELECT name FROM instructor WHERE dept_name  =  'Comp. Sci.'", "query_toks": ["SELECT", "name", "FROM", "instructor", "WHERE", "dept_name", "=", "'Comp", ".", "Sci", ".", "'"], "query_toks_no_value": ["select", "name", "from", "instructor", "where", "dept_name", "=", "value"], "question": "What are the names of all instructors in the Comp. Sci. department?", "question_toks": ["What", "are", "the", "names", "of", "all", "instructors", "in", "the", "Comp", ".", "Sci", ".", "department", "?"], "guid": 8114}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | What are the distinct names of nurses on call?", "sql": "SELECT DISTINCT T1.name FROM nurse AS T1 JOIN on_call AS T2 ON T1.EmployeeID = T2.nurse", "example": {"db_id": "hospital_1", "query": "SELECT DISTINCT T1.name FROM nurse AS T1 JOIN on_call AS T2 ON T1.EmployeeID  =  T2.nurse", "query_toks": ["SELECT", "DISTINCT", "T1.name", "FROM", "nurse", "AS", "T1", "JOIN", "on_call", "AS", "T2", "ON", "T1.EmployeeID", "=", "T2.nurse"], "query_toks_no_value": ["select", "distinct", "t1", ".", "name", "from", "nurse", "as", "t1", "join", "on_call", "as", "t2", "on", "t1", ".", "employeeid", "=", "t2", ".", "nurse"], "question": "What are the distinct names of nurses on call?", "question_toks": ["What", "are", "the", "distinct", "names", "of", "nurses", "on", "call", "?"], "guid": 8190}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | List the campus that have between 600 and 1000 faculty lines in year 2004.", "sql": "SELECT T1.campus FROM campuses AS t1 JOIN faculty AS t2 ON t1.id = t2.campus WHERE t2.faculty >= 600 AND t2.faculty <= 1000 AND T1.year = 2004", "example": {"db_id": "csu_1", "query": "SELECT T1.campus FROM campuses AS t1 JOIN faculty AS t2 ON t1.id  =  t2.campus WHERE t2.faculty  >=  600 AND t2.faculty  <=  1000 AND T1.year  =  2004", "query_toks": ["SELECT", "T1.campus", "FROM", "campuses", "AS", "t1", "JOIN", "faculty", "AS", "t2", "ON", "t1.id", "=", "t2.campus", "WHERE", "t2.faculty", ">", "=", "600", "AND", "t2.faculty", "<", "=", "1000", "AND", "T1.year", "=", "2004"], "query_toks_no_value": ["select", "t1", ".", "campus", "from", "campuses", "as", "t1", "join", "faculty", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "campus", "where", "t2", ".", "faculty", ">", "=", "value", "and", "t2", ".", "faculty", "<", "=", "value", "and", "t1", ".", "year", "=", "value"], "question": "List the campus that have between 600 and 1000 faculty lines in year 2004.", "question_toks": ["List", "the", "campus", "that", "have", "between", "600", "and", "1000", "faculty", "lines", "in", "year", "2004", "."], "guid": 8305}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | What are the first names of students, ordered by age from greatest to least?", "sql": "SELECT Fname FROM STUDENT ORDER BY Age DESC", "example": {"db_id": "college_3", "query": "SELECT Fname FROM STUDENT ORDER BY Age DESC", "query_toks": ["SELECT", "Fname", "FROM", "STUDENT", "ORDER", "BY", "Age", "DESC"], "query_toks_no_value": ["select", "fname", "from", "student", "order", "by", "age", "desc"], "question": "What are the first names of students, ordered by age from greatest to least?", "question_toks": ["What", "are", "the", "first", "names", "of", "students", ",", "ordered", "by", "age", "from", "greatest", "to", "least", "?"], "guid": 8148}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | Find the max, average, and minimum gpa of all students in each department.", "sql": "SELECT max(stu_gpa) , avg(stu_gpa) , min(stu_gpa) , dept_code FROM student GROUP BY dept_code", "example": {"db_id": "college_1", "query": "SELECT max(stu_gpa) ,  avg(stu_gpa) ,  min(stu_gpa) ,  dept_code FROM student GROUP BY dept_code", "query_toks": ["SELECT", "max", "(", "stu_gpa", ")", ",", "avg", "(", "stu_gpa", ")", ",", "min", "(", "stu_gpa", ")", ",", "dept_code", "FROM", "student", "GROUP", "BY", "dept_code"], "query_toks_no_value": ["select", "max", "(", "stu_gpa", ")", ",", "avg", "(", "stu_gpa", ")", ",", "min", "(", "stu_gpa", ")", ",", "dept_code", "from", "student", "group", "by", "dept_code"], "question": "Find the max, average, and minimum gpa of all students in each department.", "question_toks": ["Find", "the", "max", ",", "average", ",", "and", "minimum", "gpa", "of", "all", "students", "in", "each", "department", "."], "guid": 8118}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Find the id of instructors who didn't teach any courses?", "sql": "SELECT id FROM instructor EXCEPT SELECT id FROM teaches", "example": {"db_id": "college_2", "query": "SELECT id FROM instructor EXCEPT SELECT id FROM teaches", "query_toks": ["SELECT", "id", "FROM", "instructor", "EXCEPT", "SELECT", "id", "FROM", "teaches"], "query_toks_no_value": ["select", "id", "from", "instructor", "except", "select", "id", "from", "teaches"], "question": "Find the id of instructors who didn't teach any courses?", "question_toks": ["Find", "the", "id", "of", "instructors", "who", "did", "n't", "teach", "any", "courses", "?"], "guid": 8376}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Find the names of instructors who didn't each any courses in any Spring semester.", "sql": "SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches WHERE semester = 'Spring')", "example": {"db_id": "college_2", "query": "SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches WHERE semester  =  'Spring')", "query_toks": ["SELECT", "name", "FROM", "instructor", "WHERE", "id", "NOT", "IN", "(", "SELECT", "id", "FROM", "teaches", "WHERE", "semester", "=", "'Spring", "'", ")"], "query_toks_no_value": ["select", "name", "from", "instructor", "where", "id", "not", "in", "(", "select", "id", "from", "teaches", "where", "semester", "=", "value", ")"], "question": "Find the names of instructors who didn't each any courses in any Spring semester.", "question_toks": ["Find", "the", "names", "of", "instructors", "who", "did", "n't", "each", "any", "courses", "in", "any", "Spring", "semester", "."], "guid": 8315}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | Find the average grade point of student whose last name is Smith.", "sql": "SELECT AVG(T2.gradepoint) FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade = T2.lettergrade AND T1.StuID = T3.StuID WHERE T3.LName = \"Smith\"", "example": {"db_id": "college_3", "query": "SELECT avg(T2.gradepoint) FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID WHERE T3.LName  =  \"Smith\"", "query_toks": ["SELECT", "avg", "(", "T2.gradepoint", ")", "FROM", "ENROLLED_IN", "AS", "T1", "JOIN", "GRADECONVERSION", "AS", "T2", "JOIN", "STUDENT", "AS", "T3", "ON", "T1.Grade", "=", "T2.lettergrade", "AND", "T1.StuID", "=", "T3.StuID", "WHERE", "T3.LName", "=", "``", "Smith", "''"], "query_toks_no_value": ["select", "avg", "(", "t2", ".", "gradepoint", ")", "from", "enrolled_in", "as", "t1", "join", "gradeconversion", "as", "t2", "join", "student", "as", "t3", "on", "t1", ".", "grade", "=", "t2", ".", "lettergrade", "and", "t1", ".", "stuid", "=", "t3", ".", "stuid", "where", "t3", ".", "lname", "=", "value"], "question": "Find the average grade point of student whose last name is Smith.", "question_toks": ["Find", "the", "average", "grade", "point", "of", "student", "whose", "last", "name", "is", "Smith", "."], "guid": 8116}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Find the title of courses that have two prerequisites?", "sql": "SELECT T1.title FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  =  2", "example": {"db_id": "college_2", "query": "SELECT T1.title FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  =  2", "query_toks": ["SELECT", "T1.title", "FROM", "course", "AS", "T1", "JOIN", "prereq", "AS", "T2", "ON", "T1.course_id", "=", "T2.course_id", "GROUP", "BY", "T2.course_id", "HAVING", "count", "(", "*", ")", "=", "2"], "query_toks_no_value": ["select", "t1", ".", "title", "from", "course", "as", "t1", "join", "prereq", "as", "t2", "on", "t1", ".", "course_id", "=", "t2", ".", "course_id", "group", "by", "t2", ".", "course_id", "having", "count", "(", "*", ")", "=", "value"], "question": "Find the title of courses that have two prerequisites?", "question_toks": ["Find", "the", "title", "of", "courses", "that", "have", "two", "prerequisites", "?"], "guid": 8433}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | How many different courses offered by Physics department?", "sql": "SELECT COUNT(DISTINCT course_id) FROM course WHERE dept_name = 'Physics'", "example": {"db_id": "college_2", "query": "SELECT count(DISTINCT course_id) FROM course WHERE dept_name  =  'Physics'", "query_toks": ["SELECT", "count", "(", "DISTINCT", "course_id", ")", "FROM", "course", "WHERE", "dept_name", "=", "'Physics", "'"], "query_toks_no_value": ["select", "count", "(", "distinct", "course_id", ")", "from", "course", "where", "dept_name", "=", "value"], "question": "How many different courses offered by Physics department?", "question_toks": ["How", "many", "different", "courses", "offered", "by", "Physics", "department", "?"], "guid": 8338}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | How many different professors are there for the different schools?", "sql": "SELECT count(*) ,  T1.school_code FROM department AS T1 JOIN professor AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.school_code", "example": {"db_id": "college_1", "query": "SELECT count(*) ,  T1.school_code FROM department AS T1 JOIN professor AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.school_code", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "T1.school_code", "FROM", "department", "AS", "T1", "JOIN", "professor", "AS", "T2", "ON", "T1.dept_code", "=", "T2.dept_code", "GROUP", "BY", "T1.school_code"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "t1", ".", "school_code", "from", "department", "as", "t1", "join", "professor", "as", "t2", "on", "t1", ".", "dept_code", "=", "t2", ".", "dept_code", "group", "by", "t1", ".", "school_code"], "question": "How many different professors are there for the different schools?", "question_toks": ["How", "many", "different", "professors", "are", "there", "for", "the", "different", "schools", "?"], "guid": 8136}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | Find the number of medications prescribed for each brand.", "sql": "SELECT count(*) ,  T1.name FROM medication AS T1 JOIN prescribes AS T2 ON T1.code = T2.medication GROUP BY T1.brand", "example": {"db_id": "hospital_1", "query": "SELECT count(*) ,  T1.name FROM medication AS T1 JOIN prescribes AS T2 ON T1.code = T2.medication GROUP BY T1.brand", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "T1.name", "FROM", "medication", "AS", "T1", "JOIN", "prescribes", "AS", "T2", "ON", "T1.code", "=", "T2.medication", "GROUP", "BY", "T1.brand"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "t1", ".", "name", "from", "medication", "as", "t1", "join", "prescribes", "as", "t2", "on", "t1", ".", "code", "=", "t2", ".", "medication", "group", "by", "t1", ".", "brand"], "question": "Find the number of medications prescribed for each brand.", "question_toks": ["Find", "the", "number", "of", "medications", "prescribed", "for", "each", "brand", "."], "guid": 8402}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | Find the physicians who are trained in a procedure that costs more than 5000.", "sql": "SELECT T1.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid = T2.physician JOIN procedures AS T3 ON T3.code = T2.treatment WHERE T3.cost > 5000", "example": {"db_id": "hospital_1", "query": "SELECT T1.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T3.cost  >  5000", "query_toks": ["SELECT", "T1.name", "FROM", "physician", "AS", "T1", "JOIN", "trained_in", "AS", "T2", "ON", "T1.employeeid", "=", "T2.physician", "JOIN", "procedures", "AS", "T3", "ON", "T3.code", "=", "T2.treatment", "WHERE", "T3.cost", ">", "5000"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "physician", "as", "t1", "join", "trained_in", "as", "t2", "on", "t1", ".", "employeeid", "=", "t2", ".", "physician", "join", "procedures", "as", "t3", "on", "t3", ".", "code", "=", "t2", ".", "treatment", "where", "t3", ".", "cost", ">", "value"], "question": "Find the physicians who are trained in a procedure that costs more than 5000.", "question_toks": ["Find", "the", "physicians", "who", "are", "trained", "in", "a", "procedure", "that", "costs", "more", "than", "5000", "."], "guid": 8387}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | What procedures cost less than 5000 and have John Wen as a trained physician?", "sql": "SELECT name FROM procedures WHERE cost < 5000 INTERSECT SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid = T2.physician JOIN procedures AS T3 ON T3.code = T2.treatment WHERE T1.name = \"John Wen\"", "example": {"db_id": "hospital_1", "query": "SELECT name FROM procedures WHERE cost  <  5000 INTERSECT SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"", "query_toks": ["SELECT", "name", "FROM", "procedures", "WHERE", "cost", "<", "5000", "INTERSECT", "SELECT", "T3.name", "FROM", "physician", "AS", "T1", "JOIN", "trained_in", "AS", "T2", "ON", "T1.employeeid", "=", "T2.physician", "JOIN", "procedures", "AS", "T3", "ON", "T3.code", "=", "T2.treatment", "WHERE", "T1.name", "=", "``", "John", "Wen", "''"], "query_toks_no_value": ["select", "name", "from", "procedures", "where", "cost", "<", "value", "intersect", "select", "t3", ".", "name", "from", "physician", "as", "t1", "join", "trained_in", "as", "t2", "on", "t1", ".", "employeeid", "=", "t2", ".", "physician", "join", "procedures", "as", "t3", "on", "t3", ".", "code", "=", "t2", ".", "treatment", "where", "t1", ".", "name", "=", "value"], "question": "What procedures cost less than 5000 and have John Wen as a trained physician?", "question_toks": ["What", "procedures", "cost", "less", "than", "5000", "and", "have", "John", "Wen", "as", "a", "trained", "physician", "?"], "guid": 8158}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | What are the names and buildings of the deparments, sorted by budget descending?", "sql": "SELECT dept_name, building FROM department ORDER BY budget DESC", "example": {"db_id": "college_2", "query": "SELECT dept_name ,  building FROM department ORDER BY budget DESC", "query_toks": ["SELECT", "dept_name", ",", "building", "FROM", "department", "ORDER", "BY", "budget", "DESC"], "query_toks_no_value": ["select", "dept_name", ",", "building", "from", "department", "order", "by", "budget", "desc"], "question": "What are the names and buildings of the deparments, sorted by budget descending?", "question_toks": ["What", "are", "the", "names", "and", "buildings", "of", "the", "deparments", ",", "sorted", "by", "budget", "descending", "?"], "guid": 8228}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Find the name and salary of instructors whose salary is below the average salary of the instructors in the Physics department.", "sql": "SELECT name , salary FROM instructor WHERE salary < (SELECT avg(salary) FROM instructor WHERE dept_name = 'Physics')", "example": {"db_id": "college_2", "query": "SELECT name ,  salary FROM instructor WHERE salary  <  (SELECT avg(salary) FROM instructor WHERE dept_name  =  'Physics')", "query_toks": ["SELECT", "name", ",", "salary", "FROM", "instructor", "WHERE", "salary", "<", "(", "SELECT", "avg", "(", "salary", ")", "FROM", "instructor", "WHERE", "dept_name", "=", "'Physics", "'", ")"], "query_toks_no_value": ["select", "name", ",", "salary", "from", "instructor", "where", "salary", "<", "(", "select", "avg", "(", "salary", ")", "from", "instructor", "where", "dept_name", "=", "value", ")"], "question": "Find the name and salary of instructors whose salary is below the average salary of the instructors in the Physics department.", "question_toks": ["Find", "the", "name", "and", "salary", "of", "instructors", "whose", "salary", "is", "below", "the", "average", "salary", "of", "the", "instructors", "in", "the", "Physics", "department", "."], "guid": 8318}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | How many schools are there in the department?", "sql": "SELECT COUNT(DISTINCT school_code) FROM department", "example": {"db_id": "college_1", "query": "SELECT count(DISTINCT school_code) FROM department", "query_toks": ["SELECT", "count", "(", "DISTINCT", "school_code", ")", "FROM", "department"], "query_toks_no_value": ["select", "count", "(", "distinct", "school_code", ")", "from", "department"], "question": "How many schools are there in the department?", "question_toks": ["How", "many", "schools", "are", "there", "in", "the", "department", "?"], "guid": 8226}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | How many faculty members are at the university that gave the least number of degrees in 2001?", "sql": "SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id = t2.campus JOIN degrees AS T3 ON T1.id = t3.campus AND t2.year = t3.year WHERE t2.year = 2001 ORDER BY t3.degrees ASC LIMIT 1", "example": {"db_id": "csu_1", "query": "SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  t2.campus JOIN degrees AS T3 ON T1.id  =  t3.campus AND t2.year  =  t3.year WHERE t2.year  =  2001 ORDER BY t3.degrees LIMIT 1", "query_toks": ["SELECT", "T2.faculty", "FROM", "campuses", "AS", "T1", "JOIN", "faculty", "AS", "T2", "ON", "T1.id", "=", "t2.campus", "JOIN", "degrees", "AS", "T3", "ON", "T1.id", "=", "t3.campus", "AND", "t2.year", "=", "t3.year", "WHERE", "t2.year", "=", "2001", "ORDER", "BY", "t3.degrees", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "faculty", "from", "campuses", "as", "t1", "join", "faculty", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "campus", "join", "degrees", "as", "t3", "on", "t1", ".", "id", "=", "t3", ".", "campus", "and", "t2", ".", "year", "=", "t3", ".", "year", "where", "t2", ".", "year", "=", "value", "order", "by", "t3", ".", "degrees", "limit", "value"], "question": "How many faculty members are at the university that gave the least number of degrees in 2001?", "question_toks": ["How", "many", "faculty", "members", "are", "at", "the", "university", "that", "gave", "the", "least", "number", "of", "degrees", "in", "2001", "?"], "guid": 8273}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | What is the year and semester with the most courses?", "sql": "SELECT semester, YEAR FROM SECTION GROUP BY semester, YEAR ORDER BY COUNT(*) DESC LIMIT 1", "example": {"db_id": "college_2", "query": "SELECT semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "semester", ",", "YEAR", "FROM", "SECTION", "GROUP", "BY", "semester", ",", "YEAR", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "semester", ",", "year", "from", "section", "group", "by", "semester", ",", "year", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the year and semester with the most courses?", "question_toks": ["What", "is", "the", "year", "and", "semester", "with", "the", "most", "courses", "?"], "guid": 8355}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | Find the name of the department that has the biggest number of students minored in?", "sql": "SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MINOR_IN AS T2 ON T1.DNO = T2.DNO GROUP BY T2.DNO ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "college_3", "query": "SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MINOR_IN AS T2 ON T1.DNO  =  T2.DNO GROUP BY T2.DNO ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.DName", "FROM", "DEPARTMENT", "AS", "T1", "JOIN", "MINOR_IN", "AS", "T2", "ON", "T1.DNO", "=", "T2.DNO", "GROUP", "BY", "T2.DNO", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "dname", "from", "department", "as", "t1", "join", "minor_in", "as", "t2", "on", "t1", ".", "dno", "=", "t2", ".", "dno", "group", "by", "t2", ".", "dno", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Find the name of the department that has the biggest number of students minored in?", "question_toks": ["Find", "the", "name", "of", "the", "department", "that", "has", "the", "biggest", "number", "of", "students", "minored", "in", "?"], "guid": 8321}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | Which year has the most degrees conferred?", "sql": "SELECT YEAR FROM degrees GROUP BY YEAR ORDER BY SUM(degrees) DESC LIMIT 1", "example": {"db_id": "csu_1", "query": "SELECT YEAR FROM degrees GROUP BY YEAR ORDER BY sum(degrees) DESC LIMIT 1", "query_toks": ["SELECT", "YEAR", "FROM", "degrees", "GROUP", "BY", "YEAR", "ORDER", "BY", "sum", "(", "degrees", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "year", "from", "degrees", "group", "by", "year", "order", "by", "sum", "(", "degrees", ")", "desc", "limit", "value"], "question": "Which year has the most degrees conferred?", "question_toks": ["Which", "year", "has", "the", "most", "degrees", "conferred", "?"], "guid": 8119}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | What are the names of students who took a course in the Fall of 2003?", "sql": "SELECT name FROM student WHERE id IN (SELECT id FROM takes WHERE semester  =  'Fall' AND YEAR  =  2003)", "example": {"db_id": "college_2", "query": "SELECT name FROM student WHERE id IN (SELECT id FROM takes WHERE semester  =  'Fall' AND YEAR  =  2003)", "query_toks": ["SELECT", "name", "FROM", "student", "WHERE", "id", "IN", "(", "SELECT", "id", "FROM", "takes", "WHERE", "semester", "=", "'Fall", "'", "AND", "YEAR", "=", "2003", ")"], "query_toks_no_value": ["select", "name", "from", "student", "where", "id", "in", "(", "select", "id", "from", "takes", "where", "semester", "=", "value", "and", "year", "=", "value", ")"], "question": "What are the names of students who took a course in the Fall of 2003?", "question_toks": ["What", "are", "the", "names", "of", "students", "who", "took", "a", "course", "in", "the", "Fall", "of", "2003", "?"], "guid": 8128}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | What is the least common faculty rank?", "sql": "SELECT Rank FROM Faculty GROUP BY Rank ORDER BY COUNT(*) ASC LIMIT 1", "example": {"db_id": "college_3", "query": "SELECT Rank FROM FACULTY GROUP BY Rank ORDER BY count(*) ASC LIMIT 1", "query_toks": ["SELECT", "Rank", "FROM", "FACULTY", "GROUP", "BY", "Rank", "ORDER", "BY", "count", "(", "*", ")", "ASC", "LIMIT", "1"], "query_toks_no_value": ["select", "rank", "from", "faculty", "group", "by", "rank", "order", "by", "count", "(", "*", ")", "asc", "limit", "value"], "question": "What is the least common faculty rank?", "question_toks": ["What", "is", "the", "least", "common", "faculty", "rank", "?"], "guid": 8428}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Which semeseter and year had the fewest students?", "sql": "SELECT semester ,  YEAR FROM takes GROUP BY semester ,  YEAR ORDER BY count(*) LIMIT 1", "example": {"db_id": "college_2", "query": "SELECT semester ,  YEAR FROM takes GROUP BY semester ,  YEAR ORDER BY count(*) LIMIT 1", "query_toks": ["SELECT", "semester", ",", "YEAR", "FROM", "takes", "GROUP", "BY", "semester", ",", "YEAR", "ORDER", "BY", "count", "(", "*", ")", "LIMIT", "1"], "query_toks_no_value": ["select", "semester", ",", "year", "from", "takes", "group", "by", "semester", ",", "year", "order", "by", "count", "(", "*", ")", "limit", "value"], "question": "Which semeseter and year had the fewest students?", "question_toks": ["Which", "semeseter", "and", "year", "had", "the", "fewest", "students", "?"], "guid": 8174}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Show all titles and their instructors' names for courses in 2008, in alphabetical order by title.", "sql": "SELECT T1.title , T3.name FROM course AS T1 JOIN teaches AS T2 ON T1.course_id = T2.course_id JOIN instructor AS T3 ON T2.id = T3.id WHERE YEAR = 2008 ORDER BY T1.title", "example": {"db_id": "college_2", "query": "SELECT T1.title ,  T3.name FROM course AS T1 JOIN teaches AS T2 ON T1.course_id  =  T2.course_id JOIN instructor AS T3 ON T2.id  =  T3.id WHERE YEAR  =  2008 ORDER BY T1.title", "query_toks": ["SELECT", "T1.title", ",", "T3.name", "FROM", "course", "AS", "T1", "JOIN", "teaches", "AS", "T2", "ON", "T1.course_id", "=", "T2.course_id", "JOIN", "instructor", "AS", "T3", "ON", "T2.id", "=", "T3.id", "WHERE", "YEAR", "=", "2008", "ORDER", "BY", "T1.title"], "query_toks_no_value": ["select", "t1", ".", "title", ",", "t3", ".", "name", "from", "course", "as", "t1", "join", "teaches", "as", "t2", "on", "t1", ".", "course_id", "=", "t2", ".", "course_id", "join", "instructor", "as", "t3", "on", "t2", ".", "id", "=", "t3", ".", "id", "where", "year", "=", "value", "order", "by", "t1", ".", "title"], "question": "Show all titles and their instructors' names for courses in 2008, in alphabetical order by title.", "question_toks": ["Show", "all", "titles", "and", "their", "instructors", "'", "names", "for", "courses", "in", "2008", ",", "in", "alphabetical", "order", "by", "title", "."], "guid": 8361}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | Find the names of all procedures which cost more than 1000 but which physician John Wen was not trained in?", "sql": "SELECT name FROM procedures WHERE cost > 1000 EXCEPT SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid = T2.physician JOIN procedures AS T3 ON T3.code = T2.treatment WHERE T1.name = \"John Wen\"", "example": {"db_id": "hospital_1", "query": "SELECT name FROM procedures WHERE cost  >  1000 EXCEPT SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"", "query_toks": ["SELECT", "name", "FROM", "procedures", "WHERE", "cost", ">", "1000", "EXCEPT", "SELECT", "T3.name", "FROM", "physician", "AS", "T1", "JOIN", "trained_in", "AS", "T2", "ON", "T1.employeeid", "=", "T2.physician", "JOIN", "procedures", "AS", "T3", "ON", "T3.code", "=", "T2.treatment", "WHERE", "T1.name", "=", "``", "John", "Wen", "''"], "query_toks_no_value": ["select", "name", "from", "procedures", "where", "cost", ">", "value", "except", "select", "t3", ".", "name", "from", "physician", "as", "t1", "join", "trained_in", "as", "t2", "on", "t1", ".", "employeeid", "=", "t2", ".", "physician", "join", "procedures", "as", "t3", "on", "t3", ".", "code", "=", "t2", ".", "treatment", "where", "t1", ".", "name", "=", "value"], "question": "Find the names of all procedures which cost more than 1000 but which physician John Wen was not trained in?", "question_toks": ["Find", "the", "names", "of", "all", "procedures", "which", "cost", "more", "than", "1000", "but", "which", "physician", "John", "Wen", "was", "not", "trained", "in", "?"], "guid": 8175}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | Find the name of physicians who are affiliated with both Surgery and Psychiatry departments.", "sql": "SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID = T2.physician JOIN department AS T3 ON T2.department = T3.DepartmentID WHERE T3.name = 'Surgery' INTERSECT SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID = T2.physician JOIN department AS T3 ON T2.department = T3.DepartmentID WHERE T3.name = 'Psychiatry'", "example": {"db_id": "hospital_1", "query": "SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T3.name  =  'Surgery' INTERSECT SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T3.name  =  'Psychiatry'", "query_toks": ["SELECT", "T1.name", "FROM", "physician", "AS", "T1", "JOIN", "affiliated_with", "AS", "T2", "ON", "T1.EmployeeID", "=", "T2.physician", "JOIN", "department", "AS", "T3", "ON", "T2.department", "=", "T3.DepartmentID", "WHERE", "T3.name", "=", "'Surgery", "'", "INTERSECT", "SELECT", "T1.name", "FROM", "physician", "AS", "T1", "JOIN", "affiliated_with", "AS", "T2", "ON", "T1.EmployeeID", "=", "T2.physician", "JOIN", "department", "AS", "T3", "ON", "T2.department", "=", "T3.DepartmentID", "WHERE", "T3.name", "=", "'Psychiatry", "'"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "physician", "as", "t1", "join", "affiliated_with", "as", "t2", "on", "t1", ".", "employeeid", "=", "t2", ".", "physician", "join", "department", "as", "t3", "on", "t2", ".", "department", "=", "t3", ".", "departmentid", "where", "t3", ".", "name", "=", "value", "intersect", "select", "t1", ".", "name", "from", "physician", "as", "t1", "join", "affiliated_with", "as", "t2", "on", "t1", ".", "employeeid", "=", "t2", ".", "physician", "join", "department", "as", "t3", "on", "t2", ".", "department", "=", "t3", ".", "departmentid", "where", "t3", ".", "name", "=", "value"], "question": "Find the name of physicians who are affiliated with both Surgery and Psychiatry departments.", "question_toks": ["Find", "the", "name", "of", "physicians", "who", "are", "affiliated", "with", "both", "Surgery", "and", "Psychiatry", "departments", "."], "guid": 8182}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | Which university is in Los Angeles county and opened after 1950?", "sql": "SELECT campus FROM campuses WHERE county = \"Los Angeles\" AND YEAR > 1950", "example": {"db_id": "csu_1", "query": "SELECT campus FROM campuses WHERE county  =  \"Los Angeles\" AND YEAR  >  1950", "query_toks": ["SELECT", "campus", "FROM", "campuses", "WHERE", "county", "=", "``", "Los", "Angeles", "''", "AND", "YEAR", ">", "1950"], "query_toks_no_value": ["select", "campus", "from", "campuses", "where", "county", "=", "value", "and", "year", ">", "value"], "question": "Which university is in Los Angeles county and opened after 1950?", "question_toks": ["Which", "university", "is", "in", "Los", "Angeles", "county", "and", "opened", "after", "1950", "?"], "guid": 8375}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What are the course codes for every class that the student with the last name Smithson took?", "sql": "SELECT T1.crs_code FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code = T2.class_code JOIN student AS T3 ON T3.stu_num = T2.stu_num WHERE T3.stu_lname = 'Smithson'", "example": {"db_id": "college_1", "query": "SELECT T1.crs_code FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T3.stu_num  =  T2.stu_num WHERE T3.stu_lname  =  'Smithson'", "query_toks": ["SELECT", "T1.crs_code", "FROM", "CLASS", "AS", "T1", "JOIN", "enroll", "AS", "T2", "ON", "T1.class_code", "=", "T2.class_code", "JOIN", "student", "AS", "T3", "ON", "T3.stu_num", "=", "T2.stu_num", "WHERE", "T3.stu_lname", "=", "'Smithson", "'"], "query_toks_no_value": ["select", "t1", ".", "crs_code", "from", "class", "as", "t1", "join", "enroll", "as", "t2", "on", "t1", ".", "class_code", "=", "t2", ".", "class_code", "join", "student", "as", "t3", "on", "t3", ".", "stu_num", "=", "t2", ".", "stu_num", "where", "t3", ".", "stu_lname", "=", "value"], "question": "What are the course codes for every class that the student with the last name Smithson took?", "question_toks": ["What", "are", "the", "course", "codes", "for", "every", "class", "that", "the", "student", "with", "the", "last", "name", "Smithson", "took", "?"], "guid": 8290}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | Which department has the most professors with a Ph.D.?", "sql": "SELECT T2.dept_name , T1.dept_code FROM professor AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code WHERE T1.prof_high_degree = 'Ph.D.' GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "college_1", "query": "SELECT T2.dept_name ,  T1.dept_code FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE T1.prof_high_degree  =  'Ph.D.' GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T2.dept_name", ",", "T1.dept_code", "FROM", "professor", "AS", "T1", "JOIN", "department", "AS", "T2", "ON", "T1.dept_code", "=", "T2.dept_code", "WHERE", "T1.prof_high_degree", "=", "'Ph.D", ".", "'", "GROUP", "BY", "T1.dept_code", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "dept_name", ",", "t1", ".", "dept_code", "from", "professor", "as", "t1", "join", "department", "as", "t2", "on", "t1", ".", "dept_code", "=", "t2", ".", "dept_code", "where", "t1", ".", "prof_high_degree", "=", "value", "group", "by", "t1", ".", "dept_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which department has the most professors with a Ph.D.?", "question_toks": ["Which", "department", "has", "the", "most", "professors", "with", "a", "Ph.D.", "?"], "guid": 8181}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Find names of instructors with salary greater than that of some (at least one) instructor in the Biology department.", "sql": "SELECT name FROM instructor WHERE salary > (SELECT min(salary) FROM instructor WHERE dept_name = 'Biology')", "example": {"db_id": "college_2", "query": "SELECT name FROM instructor WHERE salary  >  (SELECT min(salary) FROM instructor WHERE dept_name  =  'Biology')", "query_toks": ["SELECT", "name", "FROM", "instructor", "WHERE", "salary", ">", "(", "SELECT", "min", "(", "salary", ")", "FROM", "instructor", "WHERE", "dept_name", "=", "'Biology", "'", ")"], "query_toks_no_value": ["select", "name", "from", "instructor", "where", "salary", ">", "(", "select", "min", "(", "salary", ")", "from", "instructor", "where", "dept_name", "=", "value", ")"], "question": "Find names of instructors with salary greater than that of some (at least one) instructor in the Biology department.", "question_toks": ["Find", "names", "of", "instructors", "with", "salary", "greater", "than", "that", "of", "some", "(", "at", "least", "one", ")", "instructor", "in", "the", "Biology", "department", "."], "guid": 8179}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | What are the names of procedures physician John Wen was trained in?", "sql": "SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid = T2.physician JOIN procedures AS T3 ON T3.code = T2.treatment WHERE T1.name = \"John Wen\"", "example": {"db_id": "hospital_1", "query": "SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"", "query_toks": ["SELECT", "T3.name", "FROM", "physician", "AS", "T1", "JOIN", "trained_in", "AS", "T2", "ON", "T1.employeeid", "=", "T2.physician", "JOIN", "procedures", "AS", "T3", "ON", "T3.code", "=", "T2.treatment", "WHERE", "T1.name", "=", "``", "John", "Wen", "''"], "query_toks_no_value": ["select", "t3", ".", "name", "from", "physician", "as", "t1", "join", "trained_in", "as", "t2", "on", "t1", ".", "employeeid", "=", "t2", ".", "physician", "join", "procedures", "as", "t3", "on", "t3", ".", "code", "=", "t2", ".", "treatment", "where", "t1", ".", "name", "=", "value"], "question": "What are the names of procedures physician John Wen was trained in?", "question_toks": ["What", "are", "the", "names", "of", "procedures", "physician", "John", "Wen", "was", "trained", "in", "?"], "guid": 8413}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | What is the campus fee of \"San Francisco State University\" in year 1996?", "sql": "SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id = t2.campus WHERE t1.campus = \"San Francisco State University\" AND T2.year = 1996", "example": {"db_id": "csu_1", "query": "SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id  =  t2.campus WHERE t1.campus  =  \"San Francisco State University\" AND T2.year  =  1996", "query_toks": ["SELECT", "campusfee", "FROM", "campuses", "AS", "T1", "JOIN", "csu_fees", "AS", "T2", "ON", "T1.id", "=", "t2.campus", "WHERE", "t1.campus", "=", "``", "San", "Francisco", "State", "University", "''", "AND", "T2.year", "=", "1996"], "query_toks_no_value": ["select", "campusfee", "from", "campuses", "as", "t1", "join", "csu_fees", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "campus", "where", "t1", ".", "campus", "=", "value", "and", "t2", ".", "year", "=", "value"], "question": "What is the campus fee of \"San Francisco State University\" in year 1996?", "question_toks": ["What", "is", "the", "campus", "fee", "of", "``", "San", "Francisco", "State", "University", "''", "in", "year", "1996", "?"], "guid": 8165}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | List the information of all instructors ordered by their salary in ascending order.", "sql": "SELECT * FROM instructor ORDER BY salary ASC", "example": {"db_id": "college_2", "query": "SELECT * FROM instructor ORDER BY salary", "query_toks": ["SELECT", "*", "FROM", "instructor", "ORDER", "BY", "salary"], "query_toks_no_value": ["select", "*", "from", "instructor", "order", "by", "salary"], "question": "List the information of all instructors ordered by their salary in ascending order.", "question_toks": ["List", "the", "information", "of", "all", "instructors", "ordered", "by", "their", "salary", "in", "ascending", "order", "."], "guid": 8292}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What are the first names, office locations of all lecturers who have taught some course?", "sql": "SELECT T2.emp_fname , T4.prof_office , T3.crs_description FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN professor AS T4 ON T2.emp_num = T4.emp_num", "example": {"db_id": "college_1", "query": "SELECT T2.emp_fname ,  T4.prof_office ,  T3.crs_description FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN professor AS T4 ON T2.emp_num  =  T4.emp_num", "query_toks": ["SELECT", "T2.emp_fname", ",", "T4.prof_office", ",", "T3.crs_description", "FROM", "CLASS", "AS", "T1", "JOIN", "employee", "AS", "T2", "ON", "T1.prof_num", "=", "T2.emp_num", "JOIN", "course", "AS", "T3", "ON", "T1.crs_code", "=", "T3.crs_code", "JOIN", "professor", "AS", "T4", "ON", "T2.emp_num", "=", "T4.emp_num"], "query_toks_no_value": ["select", "t2", ".", "emp_fname", ",", "t4", ".", "prof_office", ",", "t3", ".", "crs_description", "from", "class", "as", "t1", "join", "employee", "as", "t2", "on", "t1", ".", "prof_num", "=", "t2", ".", "emp_num", "join", "course", "as", "t3", "on", "t1", ".", "crs_code", "=", "t3", ".", "crs_code", "join", "professor", "as", "t4", "on", "t2", ".", "emp_num", "=", "t4", ".", "emp_num"], "question": "What are the first names, office locations of all lecturers who have taught some course?", "question_toks": ["What", "are", "the", "first", "names", ",", "office", "locations", "of", "all", "lecturers", "who", "have", "taught", "some", "course", "?"], "guid": 8368}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | What is the name of the instructor who advises the student with the greatest number of total credits?", "sql": "SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id = T2.id JOIN student AS T3 ON T1.s_id = T3.id ORDER BY T3.tot_cred DESC LIMIT 1", "example": {"db_id": "college_2", "query": "SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id ORDER BY T3.tot_cred DESC LIMIT 1", "query_toks": ["SELECT", "T2.name", "FROM", "advisor", "AS", "T1", "JOIN", "instructor", "AS", "T2", "ON", "T1.i_id", "=", "T2.id", "JOIN", "student", "AS", "T3", "ON", "T1.s_id", "=", "T3.id", "ORDER", "BY", "T3.tot_cred", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "advisor", "as", "t1", "join", "instructor", "as", "t2", "on", "t1", ".", "i_id", "=", "t2", ".", "id", "join", "student", "as", "t3", "on", "t1", ".", "s_id", "=", "t3", ".", "id", "order", "by", "t3", ".", "tot_cred", "desc", "limit", "value"], "question": "What is the name of the instructor who advises the student with the greatest number of total credits?", "question_toks": ["What", "is", "the", "name", "of", "the", "instructor", "who", "advises", "the", "student", "with", "the", "greatest", "number", "of", "total", "credits", "?"], "guid": 8166}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | What are the names of courses that give either 3 credits, or 1 credit and 4 hours?", "sql": "SELECT CName FROM COURSE WHERE Credits  =  3 UNION SELECT CName FROM COURSE WHERE Credits  =  1 AND Hours  =  4", "example": {"db_id": "college_3", "query": "SELECT CName FROM COURSE WHERE Credits  =  3 UNION SELECT CName FROM COURSE WHERE Credits  =  1 AND Hours  =  4", "query_toks": ["SELECT", "CName", "FROM", "COURSE", "WHERE", "Credits", "=", "3", "UNION", "SELECT", "CName", "FROM", "COURSE", "WHERE", "Credits", "=", "1", "AND", "Hours", "=", "4"], "query_toks_no_value": ["select", "cname", "from", "course", "where", "credits", "=", "value", "union", "select", "cname", "from", "course", "where", "credits", "=", "value", "and", "hours", "=", "value"], "question": "What are the names of courses that give either 3 credits, or 1 credit and 4 hours?", "question_toks": ["What", "are", "the", "names", "of", "courses", "that", "give", "either", "3", "credits", ",", "or", "1", "credit", "and", "4", "hours", "?"], "guid": 8358}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | Which school has the smallest amount of professors?", "sql": "SELECT T1.school_code FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY count(*) ASC LIMIT 1", "example": {"db_id": "college_1", "query": "SELECT T1.school_code FROM department AS T1 JOIN professor AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.school_code ORDER BY count(*) LIMIT 1", "query_toks": ["SELECT", "T1.school_code", "FROM", "department", "AS", "T1", "JOIN", "professor", "AS", "T2", "ON", "T1.dept_code", "=", "T2.dept_code", "GROUP", "BY", "T1.school_code", "ORDER", "BY", "count", "(", "*", ")", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "school_code", "from", "department", "as", "t1", "join", "professor", "as", "t2", "on", "t1", ".", "dept_code", "=", "t2", ".", "dept_code", "group", "by", "t1", ".", "school_code", "order", "by", "count", "(", "*", ")", "limit", "value"], "question": "Which school has the smallest amount of professors?", "question_toks": ["Which", "school", "has", "the", "smallest", "amount", "of", "professors", "?"], "guid": 8379}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Find the name and salary of the instructors who are advisors of any student from History department?", "sql": "SELECT T2.name, T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id = T2.id JOIN student AS T3 ON T1.s_id = T3.id WHERE T3.dept_name = 'History'", "example": {"db_id": "college_2", "query": "SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'History'", "query_toks": ["SELECT", "T2.name", ",", "T2.salary", "FROM", "advisor", "AS", "T1", "JOIN", "instructor", "AS", "T2", "ON", "T1.i_id", "=", "T2.id", "JOIN", "student", "AS", "T3", "ON", "T1.s_id", "=", "T3.id", "WHERE", "T3.dept_name", "=", "'History", "'"], "query_toks_no_value": ["select", "t2", ".", "name", ",", "t2", ".", "salary", "from", "advisor", "as", "t1", "join", "instructor", "as", "t2", "on", "t1", ".", "i_id", "=", "t2", ".", "id", "join", "student", "as", "t3", "on", "t1", ".", "s_id", "=", "t3", ".", "id", "where", "t3", ".", "dept_name", "=", "value"], "question": "Find the name and salary of the instructors who are advisors of any student from History department?", "question_toks": ["Find", "the", "name", "and", "salary", "of", "the", "instructors", "who", "are", "advisors", "of", "any", "student", "from", "History", "department", "?"], "guid": 8258}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What is the number of professors who are in the Accounting or Biology departments?", "sql": "SELECT COUNT(*) FROM professor AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code WHERE T2.dept_name = 'Accounting' OR T2.dept_name = 'Biology'", "example": {"db_id": "college_1", "query": "SELECT count(*) FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE T2.dept_name  =  'Accounting' OR T2.dept_name  =  'Biology'", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "professor", "AS", "T1", "JOIN", "department", "AS", "T2", "ON", "T1.dept_code", "=", "T2.dept_code", "WHERE", "T2.dept_name", "=", "'Accounting", "'", "OR", "T2.dept_name", "=", "'Biology", "'"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "professor", "as", "t1", "join", "department", "as", "t2", "on", "t1", ".", "dept_code", "=", "t2", ".", "dept_code", "where", "t2", ".", "dept_name", "=", "value", "or", "t2", ".", "dept_name", "=", "value"], "question": "What is the number of professors who are in the Accounting or Biology departments?", "question_toks": ["What", "is", "the", "number", "of", "professors", "who", "are", "in", "the", "Accounting", "or", "Biology", "departments", "?"], "guid": 8269}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | Find the last name and hire date of the professor who is in office DRE 102.", "sql": "SELECT T1.emp_lname , T1.emp_hiredate FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num = T2.emp_num WHERE T2.prof_office = 'DRE 102'", "example": {"db_id": "college_1", "query": "SELECT T1.emp_lname ,  T1.emp_hiredate FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num WHERE T2.prof_office  =  'DRE 102'", "query_toks": ["SELECT", "T1.emp_lname", ",", "T1.emp_hiredate", "FROM", "employee", "AS", "T1", "JOIN", "professor", "AS", "T2", "ON", "T1.emp_num", "=", "T2.emp_num", "WHERE", "T2.prof_office", "=", "'DRE", "102", "'"], "query_toks_no_value": ["select", "t1", ".", "emp_lname", ",", "t1", ".", "emp_hiredate", "from", "employee", "as", "t1", "join", "professor", "as", "t2", "on", "t1", ".", "emp_num", "=", "t2", ".", "emp_num", "where", "t2", ".", "prof_office", "=", "value"], "question": "Find the last name and hire date of the professor who is in office DRE 102.", "question_toks": ["Find", "the", "last", "name", "and", "hire", "date", "of", "the", "professor", "who", "is", "in", "office", "DRE", "102", "."], "guid": 8274}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | How many patients do each physician take care of? List their names and number of patients they take care of.", "sql": "SELECT T1.name , count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid", "example": {"db_id": "hospital_1", "query": "SELECT T1.name ,  count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid  =  T2.PCP GROUP BY T1.employeeid", "query_toks": ["SELECT", "T1.name", ",", "count", "(", "*", ")", "FROM", "physician", "AS", "T1", "JOIN", "patient", "AS", "T2", "ON", "T1.employeeid", "=", "T2.PCP", "GROUP", "BY", "T1.employeeid"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "count", "(", "*", ")", "from", "physician", "as", "t1", "join", "patient", "as", "t2", "on", "t1", ".", "employeeid", "=", "t2", ".", "pcp", "group", "by", "t1", ".", "employeeid"], "question": "How many patients do each physician take care of? List their names and number of patients they take care of.", "question_toks": ["How", "many", "patients", "do", "each", "physician", "take", "care", "of", "?", "List", "their", "names", "and", "number", "of", "patients", "they", "take", "care", "of", "."], "guid": 8149}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | What is the full name of the instructor who has a course named COMPUTER LITERACY?", "sql": "SELECT T2.Fname ,  T2.Lname FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor  =  T2.FacID WHERE T1.CName  =  \"COMPUTER LITERACY\"", "example": {"db_id": "college_3", "query": "SELECT T2.Fname ,  T2.Lname FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor  =  T2.FacID WHERE T1.CName  =  \"COMPUTER LITERACY\"", "query_toks": ["SELECT", "T2.Fname", ",", "T2.Lname", "FROM", "COURSE", "AS", "T1", "JOIN", "FACULTY", "AS", "T2", "ON", "T1.Instructor", "=", "T2.FacID", "WHERE", "T1.CName", "=", "``", "COMPUTER", "LITERACY", "''"], "query_toks_no_value": ["select", "t2", ".", "fname", ",", "t2", ".", "lname", "from", "course", "as", "t1", "join", "faculty", "as", "t2", "on", "t1", ".", "instructor", "=", "t2", ".", "facid", "where", "t1", ".", "cname", "=", "value"], "question": "What is the full name of the instructor who has a course named COMPUTER LITERACY?", "question_toks": ["What", "is", "the", "full", "name", "of", "the", "instructor", "who", "has", "a", "course", "named", "COMPUTER", "LITERACY", "?"], "guid": 8328}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | How many rooms in each building have a capacity of over 50?", "sql": "SELECT count(*) , building FROM classroom WHERE capacity > 50 GROUP BY building", "example": {"db_id": "college_2", "query": "SELECT count(*) ,  building FROM classroom WHERE capacity  >  50 GROUP BY building", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "building", "FROM", "classroom", "WHERE", "capacity", ">", "50", "GROUP", "BY", "building"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "building", "from", "classroom", "where", "capacity", ">", "value", "group", "by", "building"], "question": "How many rooms in each building have a capacity of over 50?", "question_toks": ["How", "many", "rooms", "in", "each", "building", "have", "a", "capacity", "of", "over", "50", "?"], "guid": 8362}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | Tell me the distinct block codes where some rooms are available.", "sql": "SELECT DISTINCT blockcode FROM room WHERE unavailable = 0", "example": {"db_id": "hospital_1", "query": "SELECT DISTINCT blockcode FROM room WHERE unavailable  =  0", "query_toks": ["SELECT", "DISTINCT", "blockcode", "FROM", "room", "WHERE", "unavailable", "=", "0"], "query_toks_no_value": ["select", "distinct", "blockcode", "from", "room", "where", "unavailable", "=", "value"], "question": "Tell me the distinct block codes where some rooms are available.", "question_toks": ["Tell", "me", "the", "distinct", "block", "codes", "where", "some", "rooms", "are", "available", "."], "guid": 8319}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | How many universities have a campus fee higher than average?", "sql": "SELECT COUNT(*) FROM csu_fees WHERE campusfee > (SELECT AVG(campusfee) FROM csu_fees);", "example": {"db_id": "csu_1", "query": "SELECT count(*) FROM csu_fees WHERE campusfee  >  (SELECT avg(campusfee) FROM csu_fees)", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "csu_fees", "WHERE", "campusfee", ">", "(", "SELECT", "avg", "(", "campusfee", ")", "FROM", "csu_fees", ")"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "csu_fees", "where", "campusfee", ">", "(", "select", "avg", "(", "campusfee", ")", "from", "csu_fees", ")"], "question": "How many universities have a campus fee higher than average?", "question_toks": ["How", "many", "universities", "have", "a", "campus", "fee", "higher", "than", "average", "?"], "guid": 8152}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | How many professors who are from either Accounting or Biology department?", "sql": "SELECT COUNT(*) FROM professor AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code WHERE T2.dept_name = 'Accounting' OR T2.dept_name = 'Biology'", "example": {"db_id": "college_1", "query": "SELECT count(*) FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE T2.dept_name  =  'Accounting' OR T2.dept_name  =  'Biology'", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "professor", "AS", "T1", "JOIN", "department", "AS", "T2", "ON", "T1.dept_code", "=", "T2.dept_code", "WHERE", "T2.dept_name", "=", "'Accounting", "'", "OR", "T2.dept_name", "=", "'Biology", "'"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "professor", "as", "t1", "join", "department", "as", "t2", "on", "t1", ".", "dept_code", "=", "t2", ".", "dept_code", "where", "t2", ".", "dept_name", "=", "value", "or", "t2", ".", "dept_name", "=", "value"], "question": "How many professors who are from either Accounting or Biology department?", "question_toks": ["How", "many", "professors", "who", "are", "from", "either", "Accounting", "or", "Biology", "department", "?"], "guid": 8393}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | What are the full names of students minoring in department 140?", "sql": "SELECT T2.Fname, T2.Lname FROM MINOR_IN AS T1 JOIN STUDENT AS T2 ON T1.StuID = T2.StuID WHERE T1.DNO = 140", "example": {"db_id": "college_3", "query": "SELECT T2.Fname ,  T2.Lname FROM MINOR_IN AS T1 JOIN STUDENT AS T2 ON T1.StuID  =  T2.StuID WHERE T1.DNO  =  140", "query_toks": ["SELECT", "T2.Fname", ",", "T2.Lname", "FROM", "MINOR_IN", "AS", "T1", "JOIN", "STUDENT", "AS", "T2", "ON", "T1.StuID", "=", "T2.StuID", "WHERE", "T1.DNO", "=", "140"], "query_toks_no_value": ["select", "t2", ".", "fname", ",", "t2", ".", "lname", "from", "minor_in", "as", "t1", "join", "student", "as", "t2", "on", "t1", ".", "stuid", "=", "t2", ".", "stuid", "where", "t1", ".", "dno", "=", "value"], "question": "What are the full names of students minoring in department 140?", "question_toks": ["What", "are", "the", "full", "names", "of", "students", "minoring", "in", "department", "140", "?"], "guid": 8346}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Find the name and budget of departments whose budgets are more than the average budget.", "sql": "SELECT dept_name, budget FROM department WHERE budget > (SELECT AVG(budget) FROM department);", "example": {"db_id": "college_2", "query": "SELECT dept_name ,  budget FROM department WHERE budget  >  (SELECT avg(budget) FROM department)", "query_toks": ["SELECT", "dept_name", ",", "budget", "FROM", "department", "WHERE", "budget", ">", "(", "SELECT", "avg", "(", "budget", ")", "FROM", "department", ")"], "query_toks_no_value": ["select", "dept_name", ",", "budget", "from", "department", "where", "budget", ">", "(", "select", "avg", "(", "budget", ")", "from", "department", ")"], "question": "Find the name and budget of departments whose budgets are more than the average budget.", "question_toks": ["Find", "the", "name", "and", "budget", "of", "departments", "whose", "budgets", "are", "more", "than", "the", "average", "budget", "."], "guid": 8241}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Count the number of rooms that are not in the Lamberton building.", "sql": "SELECT COUNT(*) FROM classroom WHERE building != 'Lamberton'", "example": {"db_id": "college_2", "query": "SELECT count(*) FROM classroom WHERE building != 'Lamberton'", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "classroom", "WHERE", "building", "!", "=", "'Lamberton", "'"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "classroom", "where", "building", "!", "=", "value"], "question": "Count the number of rooms that are not in the Lamberton building.", "question_toks": ["Count", "the", "number", "of", "rooms", "that", "are", "not", "in", "the", "Lamberton", "building", "."], "guid": 8407}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Find the number and averaged salary of all instructors who are in the department with the highest budget.", "sql": "SELECT avg(T1.salary) , count(*) FROM instructor AS T1 JOIN department AS T2 ON T1.dept_name = T2.dept_name ORDER BY T2.budget DESC LIMIT 1", "example": {"db_id": "college_2", "query": "SELECT avg(T1.salary) ,  count(*) FROM instructor AS T1 JOIN department AS T2 ON T1.dept_name  =  T2.dept_name ORDER BY T2.budget DESC LIMIT 1", "query_toks": ["SELECT", "avg", "(", "T1.salary", ")", ",", "count", "(", "*", ")", "FROM", "instructor", "AS", "T1", "JOIN", "department", "AS", "T2", "ON", "T1.dept_name", "=", "T2.dept_name", "ORDER", "BY", "T2.budget", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "avg", "(", "t1", ".", "salary", ")", ",", "count", "(", "*", ")", "from", "instructor", "as", "t1", "join", "department", "as", "t2", "on", "t1", ".", "dept_name", "=", "t2", ".", "dept_name", "order", "by", "t2", ".", "budget", "desc", "limit", "value"], "question": "Find the number and averaged salary of all instructors who are in the department with the highest budget.", "question_toks": ["Find", "the", "number", "and", "averaged", "salary", "of", "all", "instructors", "who", "are", "in", "the", "department", "with", "the", "highest", "budget", "."], "guid": 8314}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Find the name of students who took any class in the years of 2009 and 2010.", "sql": "SELECT DISTINCT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE YEAR  =  2009 OR YEAR  =  2010", "example": {"db_id": "college_2", "query": "SELECT DISTINCT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE YEAR  =  2009 OR YEAR  =  2010", "query_toks": ["SELECT", "DISTINCT", "T1.name", "FROM", "student", "AS", "T1", "JOIN", "takes", "AS", "T2", "ON", "T1.id", "=", "T2.id", "WHERE", "YEAR", "=", "2009", "OR", "YEAR", "=", "2010"], "query_toks_no_value": ["select", "distinct", "t1", ".", "name", "from", "student", "as", "t1", "join", "takes", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "id", "where", "year", "=", "value", "or", "year", "=", "value"], "question": "Find the name of students who took any class in the years of 2009 and 2010.", "question_toks": ["Find", "the", "name", "of", "students", "who", "took", "any", "class", "in", "the", "years", "of", "2009", "and", "2010", "."], "guid": 8296}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What is the total credit does each department offer?", "sql": "SELECT sum(crs_credit) ,  dept_code FROM course GROUP BY dept_code", "example": {"db_id": "college_1", "query": "SELECT sum(crs_credit) ,  dept_code FROM course GROUP BY dept_code", "query_toks": ["SELECT", "sum", "(", "crs_credit", ")", ",", "dept_code", "FROM", "course", "GROUP", "BY", "dept_code"], "query_toks_no_value": ["select", "sum", "(", "crs_credit", ")", ",", "dept_code", "from", "course", "group", "by", "dept_code"], "question": "What is the total credit does each department offer?", "question_toks": ["What", "is", "the", "total", "credit", "does", "each", "department", "offer", "?"], "guid": 8216}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | list names of all departments ordered by their names.", "sql": "SELECT dept_name FROM department ORDER BY dept_name", "example": {"db_id": "college_1", "query": "SELECT dept_name FROM department ORDER BY dept_name", "query_toks": ["SELECT", "dept_name", "FROM", "department", "ORDER", "BY", "dept_name"], "query_toks_no_value": ["select", "dept_name", "from", "department", "order", "by", "dept_name"], "question": "list names of all departments ordered by their names.", "question_toks": ["list", "names", "of", "all", "departments", "ordered", "by", "their", "names", "."], "guid": 8171}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | Find the department name that is in Building \"Mergenthaler\".", "sql": "SELECT dname FROM department WHERE building = 'Mergenthaler'", "example": {"db_id": "college_3", "query": "SELECT DName FROM DEPARTMENT WHERE Building  =  \"Mergenthaler\"", "query_toks": ["SELECT", "DName", "FROM", "DEPARTMENT", "WHERE", "Building", "=", "``", "Mergenthaler", "''"], "query_toks_no_value": ["select", "dname", "from", "department", "where", "building", "=", "value"], "question": "Find the department name that is in Building \"Mergenthaler\".", "question_toks": ["Find", "the", "department", "name", "that", "is", "in", "Building", "``", "Mergenthaler", "''", "."], "guid": 8235}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | How many rooms whose capacity is less than 50 does the Lamberton building have?", "sql": "SELECT COUNT(*) FROM classroom WHERE building = 'Lamberton' AND capacity < 50", "example": {"db_id": "college_2", "query": "SELECT count(*) FROM classroom WHERE building  =  'Lamberton' AND capacity  <  50", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "classroom", "WHERE", "building", "=", "'Lamberton", "'", "AND", "capacity", "<", "50"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "classroom", "where", "building", "=", "value", "and", "capacity", "<", "value"], "question": "How many rooms whose capacity is less than 50 does the Lamberton building have?", "question_toks": ["How", "many", "rooms", "whose", "capacity", "is", "less", "than", "50", "does", "the", "Lamberton", "building", "have", "?"], "guid": 8293}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | What campuses are located in Northridge, Los Angeles or in San Francisco, San Francisco?", "sql": "SELECT campus FROM campuses WHERE LOCATION = \"Northridge\" AND county = \"Los Angeles\" UNION SELECT campus FROM campuses WHERE LOCATION = \"San Francisco\" AND county = \"San Francisco\"", "example": {"db_id": "csu_1", "query": "SELECT campus FROM campuses WHERE LOCATION  =  \"Northridge\" AND county  =  \"Los Angeles\" UNION SELECT campus FROM campuses WHERE LOCATION  =  \"San Francisco\" AND county  =  \"San Francisco\"", "query_toks": ["SELECT", "campus", "FROM", "campuses", "WHERE", "LOCATION", "=", "``", "Northridge", "''", "AND", "county", "=", "``", "Los", "Angeles", "''", "UNION", "SELECT", "campus", "FROM", "campuses", "WHERE", "LOCATION", "=", "``", "San", "Francisco", "''", "AND", "county", "=", "``", "San", "Francisco", "''"], "query_toks_no_value": ["select", "campus", "from", "campuses", "where", "location", "=", "value", "and", "county", "=", "value", "union", "select", "campus", "from", "campuses", "where", "location", "=", "value", "and", "county", "=", "value"], "question": "What campuses are located in Northridge, Los Angeles or in San Francisco, San Francisco?", "question_toks": ["What", "campuses", "are", "located", "in", "Northridge", ",", "Los", "Angeles", "or", "in", "San", "Francisco", ",", "San", "Francisco", "?"], "guid": 8282}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Find the total credits of courses provided by different department.", "sql": "SELECT sum(credits) , dept_name FROM course GROUP BY dept_name", "example": {"db_id": "college_2", "query": "SELECT sum(credits) ,  dept_name FROM course GROUP BY dept_name", "query_toks": ["SELECT", "sum", "(", "credits", ")", ",", "dept_name", "FROM", "course", "GROUP", "BY", "dept_name"], "query_toks_no_value": ["select", "sum", "(", "credits", ")", ",", "dept_name", "from", "course", "group", "by", "dept_name"], "question": "Find the total credits of courses provided by different department.", "question_toks": ["Find", "the", "total", "credits", "of", "courses", "provided", "by", "different", "department", "."], "guid": 8172}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | Find the first name of the professor who is teaching two courses with code CIS-220 and QM-261.", "sql": "SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num = T2.prof_num WHERE crs_code = 'CIS-220' INTERSECT SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num = T2.prof_num WHERE crs_code = 'QM-261'", "example": {"db_id": "college_1", "query": "SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num  =  T2.prof_num WHERE crs_code  =  'CIS-220' INTERSECT SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num  =  T2.prof_num WHERE crs_code  =  'QM-261'", "query_toks": ["SELECT", "T1.emp_fname", "FROM", "employee", "AS", "T1", "JOIN", "CLASS", "AS", "T2", "ON", "T1.emp_num", "=", "T2.prof_num", "WHERE", "crs_code", "=", "'CIS-220", "'", "INTERSECT", "SELECT", "T1.emp_fname", "FROM", "employee", "AS", "T1", "JOIN", "CLASS", "AS", "T2", "ON", "T1.emp_num", "=", "T2.prof_num", "WHERE", "crs_code", "=", "'QM-261", "'"], "query_toks_no_value": ["select", "t1", ".", "emp_fname", "from", "employee", "as", "t1", "join", "class", "as", "t2", "on", "t1", ".", "emp_num", "=", "t2", ".", "prof_num", "where", "crs_code", "=", "value", "intersect", "select", "t1", ".", "emp_fname", "from", "employee", "as", "t1", "join", "class", "as", "t2", "on", "t1", ".", "emp_num", "=", "t2", ".", "prof_num", "where", "crs_code", "=", "value"], "question": "Find the first name of the professor who is teaching two courses with code CIS-220 and QM-261.", "question_toks": ["Find", "the", "first", "name", "of", "the", "professor", "who", "is", "teaching", "two", "courses", "with", "code", "CIS-220", "and", "QM-261", "."], "guid": 8281}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What is the name of the department and office location for the professor with the last name of Heffington?", "sql": "SELECT T3.dept_name , T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num = T2.emp_num JOIN department AS T3 ON T2.dept_code = T3.dept_code WHERE T1.emp_lname = 'Heffington'", "example": {"db_id": "college_1", "query": "SELECT T3.dept_name  ,  T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T2.dept_code  =  T3.dept_code WHERE T1.emp_lname  =  'Heffington'", "query_toks": ["SELECT", "T3.dept_name", ",", "T2.prof_office", "FROM", "employee", "AS", "T1", "JOIN", "professor", "AS", "T2", "ON", "T1.emp_num", "=", "T2.emp_num", "JOIN", "department", "AS", "T3", "ON", "T2.dept_code", "=", "T3.dept_code", "WHERE", "T1.emp_lname", "=", "'Heffington", "'"], "query_toks_no_value": ["select", "t3", ".", "dept_name", ",", "t2", ".", "prof_office", "from", "employee", "as", "t1", "join", "professor", "as", "t2", "on", "t1", ".", "emp_num", "=", "t2", ".", "emp_num", "join", "department", "as", "t3", "on", "t2", ".", "dept_code", "=", "t3", ".", "dept_code", "where", "t1", ".", "emp_lname", "=", "value"], "question": "What is the name of the department and office location for the professor with the last name of Heffington?", "question_toks": ["What", "is", "the", "name", "of", "the", "department", "and", "office", "location", "for", "the", "professor", "with", "the", "last", "name", "of", "Heffington", "?"], "guid": 8390}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | How many different locations does each school have?", "sql": "SELECT COUNT(DISTINCT dept_address), school_code FROM department GROUP BY school_code", "example": {"db_id": "college_1", "query": "SELECT count(DISTINCT dept_address) ,  school_code FROM department GROUP BY school_code", "query_toks": ["SELECT", "count", "(", "DISTINCT", "dept_address", ")", ",", "school_code", "FROM", "department", "GROUP", "BY", "school_code"], "query_toks_no_value": ["select", "count", "(", "distinct", "dept_address", ")", ",", "school_code", "from", "department", "group", "by", "school_code"], "question": "How many different locations does each school have?", "question_toks": ["How", "many", "different", "locations", "does", "each", "school", "have", "?"], "guid": 8381}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | What are the names and salaries of instructors who advises students in the History department?", "sql": "SELECT T2.name, T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id = T2.id JOIN student AS T3 ON T1.s_id = T3.id WHERE T3.dept_name = 'History'", "example": {"db_id": "college_2", "query": "SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'History'", "query_toks": ["SELECT", "T2.name", ",", "T2.salary", "FROM", "advisor", "AS", "T1", "JOIN", "instructor", "AS", "T2", "ON", "T1.i_id", "=", "T2.id", "JOIN", "student", "AS", "T3", "ON", "T1.s_id", "=", "T3.id", "WHERE", "T3.dept_name", "=", "'History", "'"], "query_toks_no_value": ["select", "t2", ".", "name", ",", "t2", ".", "salary", "from", "advisor", "as", "t1", "join", "instructor", "as", "t2", "on", "t1", ".", "i_id", "=", "t2", ".", "id", "join", "student", "as", "t3", "on", "t1", ".", "s_id", "=", "t3", ".", "id", "where", "t3", ".", "dept_name", "=", "value"], "question": "What are the names and salaries of instructors who advises students in the History department?", "question_toks": ["What", "are", "the", "names", "and", "salaries", "of", "instructors", "who", "advises", "students", "in", "the", "History", "department", "?"], "guid": 8353}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | What is the name of the department with the most students minoring in it?", "sql": "SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MINOR_IN AS T2 ON T1.DNO = T2.DNO GROUP BY T2.DNO ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "college_3", "query": "SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MINOR_IN AS T2 ON T1.DNO  =  T2.DNO GROUP BY T2.DNO ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.DName", "FROM", "DEPARTMENT", "AS", "T1", "JOIN", "MINOR_IN", "AS", "T2", "ON", "T1.DNO", "=", "T2.DNO", "GROUP", "BY", "T2.DNO", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "dname", "from", "department", "as", "t1", "join", "minor_in", "as", "t2", "on", "t1", ".", "dno", "=", "t2", ".", "dno", "group", "by", "t2", ".", "dno", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the name of the department with the most students minoring in it?", "question_toks": ["What", "is", "the", "name", "of", "the", "department", "with", "the", "most", "students", "minoring", "in", "it", "?"], "guid": 8242}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | What are names of patients who made an appointment?", "sql": "SELECT name FROM appointment AS T1 JOIN patient AS T2 ON T1.patient = T2.ssn", "example": {"db_id": "hospital_1", "query": "SELECT name FROM appointment AS T1 JOIN patient AS T2 ON T1.patient  =  T2.ssn", "query_toks": ["SELECT", "name", "FROM", "appointment", "AS", "T1", "JOIN", "patient", "AS", "T2", "ON", "T1.patient", "=", "T2.ssn"], "query_toks_no_value": ["select", "name", "from", "appointment", "as", "t1", "join", "patient", "as", "t2", "on", "t1", ".", "patient", "=", "t2", ".", "ssn"], "question": "What are names of patients who made an appointment?", "question_toks": ["What", "are", "names", "of", "patients", "who", "made", "an", "appointment", "?"], "guid": 8370}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | Find the first names of students who took exactly one class.", "sql": "SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num GROUP BY T2.stu_num HAVING count(*) = 1", "example": {"db_id": "college_1", "query": "SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num GROUP BY T2.stu_num HAVING count(*)  =  1", "query_toks": ["SELECT", "T1.stu_fname", "FROM", "student", "AS", "T1", "JOIN", "enroll", "AS", "T2", "ON", "T1.stu_num", "=", "T2.stu_num", "GROUP", "BY", "T2.stu_num", "HAVING", "count", "(", "*", ")", "=", "1"], "query_toks_no_value": ["select", "t1", ".", "stu_fname", "from", "student", "as", "t1", "join", "enroll", "as", "t2", "on", "t1", ".", "stu_num", "=", "t2", ".", "stu_num", "group", "by", "t2", ".", "stu_num", "having", "count", "(", "*", ")", "=", "value"], "question": "Find the first names of students who took exactly one class.", "question_toks": ["Find", "the", "first", "names", "of", "students", "who", "took", "exactly", "one", "class", "."], "guid": 8236}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | Find the number of classes offered for all class rooms that held at least 2 classes.", "sql": "SELECT COUNT(*), class_room FROM CLASS GROUP BY class_room HAVING COUNT(*) >= 2", "example": {"db_id": "college_1", "query": "SELECT count(*) ,  class_room FROM CLASS GROUP BY class_room HAVING count(*)  >=  2", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "class_room", "FROM", "CLASS", "GROUP", "BY", "class_room", "HAVING", "count", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "class_room", "from", "class", "group", "by", "class_room", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "Find the number of classes offered for all class rooms that held at least 2 classes.", "question_toks": ["Find", "the", "number", "of", "classes", "offered", "for", "all", "class", "rooms", "that", "held", "at", "least", "2", "classes", "."], "guid": 8329}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | What is the sum of budgets of the Marketing and Finance departments?", "sql": "SELECT SUM(budget) FROM department WHERE dept_name = 'Marketing' OR dept_name = 'Finance'", "example": {"db_id": "college_2", "query": "SELECT sum(budget) FROM department WHERE dept_name  =  'Marketing' OR dept_name  =  'Finance'", "query_toks": ["SELECT", "sum", "(", "budget", ")", "FROM", "department", "WHERE", "dept_name", "=", "'Marketing", "'", "OR", "dept_name", "=", "'Finance", "'"], "query_toks_no_value": ["select", "sum", "(", "budget", ")", "from", "department", "where", "dept_name", "=", "value", "or", "dept_name", "=", "value"], "question": "What is the sum of budgets of the Marketing and Finance departments?", "question_toks": ["What", "is", "the", "sum", "of", "budgets", "of", "the", "Marketing", "and", "Finance", "departments", "?"], "guid": 8109}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | What are the titles of courses that are in the Statistics department but not the Psychology department?", "sql": "SELECT title FROM course WHERE dept_name  =  'Statistics' EXCEPT SELECT title FROM course WHERE dept_name  =  'Psychology'", "example": {"db_id": "college_2", "query": "SELECT title FROM course WHERE dept_name  =  'Statistics' EXCEPT SELECT title FROM course WHERE dept_name  =  'Psychology'", "query_toks": ["SELECT", "title", "FROM", "course", "WHERE", "dept_name", "=", "'Statistics", "'", "EXCEPT", "SELECT", "title", "FROM", "course", "WHERE", "dept_name", "=", "'Psychology", "'"], "query_toks_no_value": ["select", "title", "from", "course", "where", "dept_name", "=", "value", "except", "select", "title", "from", "course", "where", "dept_name", "=", "value"], "question": "What are the titles of courses that are in the Statistics department but not the Psychology department?", "question_toks": ["What", "are", "the", "titles", "of", "courses", "that", "are", "in", "the", "Statistics", "department", "but", "not", "the", "Psychology", "department", "?"], "guid": 8299}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What are the total number of credits offered by each department?", "sql": "SELECT sum(T1.crs_credit) , T1.dept_code FROM course AS T1 JOIN CLASS AS T2 ON T1.crs_code = T2.crs_code GROUP BY T1.dept_code", "example": {"db_id": "college_1", "query": "SELECT sum(T1.crs_credit) ,  T1.dept_code FROM course AS T1 JOIN CLASS AS T2 ON T1.crs_code  =  T2.crs_code GROUP BY T1.dept_code", "query_toks": ["SELECT", "sum", "(", "T1.crs_credit", ")", ",", "T1.dept_code", "FROM", "course", "AS", "T1", "JOIN", "CLASS", "AS", "T2", "ON", "T1.crs_code", "=", "T2.crs_code", "GROUP", "BY", "T1.dept_code"], "query_toks_no_value": ["select", "sum", "(", "t1", ".", "crs_credit", ")", ",", "t1", ".", "dept_code", "from", "course", "as", "t1", "join", "class", "as", "t2", "on", "t1", ".", "crs_code", "=", "t2", ".", "crs_code", "group", "by", "t1", ".", "dept_code"], "question": "What are the total number of credits offered by each department?", "question_toks": ["What", "are", "the", "total", "number", "of", "credits", "offered", "by", "each", "department", "?"], "guid": 8285}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | Find the names of all procedures such that the cost is less than 5000 and physician John Wen was trained in.", "sql": "SELECT name FROM procedures WHERE cost < 5000 INTERSECT SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid = T2.physician JOIN procedures AS T3 ON T3.code = T2.treatment WHERE T1.name = \"John Wen\"", "example": {"db_id": "hospital_1", "query": "SELECT name FROM procedures WHERE cost  <  5000 INTERSECT SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"", "query_toks": ["SELECT", "name", "FROM", "procedures", "WHERE", "cost", "<", "5000", "INTERSECT", "SELECT", "T3.name", "FROM", "physician", "AS", "T1", "JOIN", "trained_in", "AS", "T2", "ON", "T1.employeeid", "=", "T2.physician", "JOIN", "procedures", "AS", "T3", "ON", "T3.code", "=", "T2.treatment", "WHERE", "T1.name", "=", "``", "John", "Wen", "''"], "query_toks_no_value": ["select", "name", "from", "procedures", "where", "cost", "<", "value", "intersect", "select", "t3", ".", "name", "from", "physician", "as", "t1", "join", "trained_in", "as", "t2", "on", "t1", ".", "employeeid", "=", "t2", ".", "physician", "join", "procedures", "as", "t3", "on", "t3", ".", "code", "=", "t2", ".", "treatment", "where", "t1", ".", "name", "=", "value"], "question": "Find the names of all procedures such that the cost is less than 5000 and physician John Wen was trained in.", "question_toks": ["Find", "the", "names", "of", "all", "procedures", "such", "that", "the", "cost", "is", "less", "than", "5000", "and", "physician", "John", "Wen", "was", "trained", "in", "."], "guid": 8262}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | Find the campus fee of \"San Jose State University\" in year 2000.", "sql": "SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus = t2.id WHERE t2.campus = \"San Jose State University\" AND t1.year = 2000", "example": {"db_id": "csu_1", "query": "SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t2.campus  =  \"San Jose State University\" AND t1.year  =  2000", "query_toks": ["SELECT", "t1.campusfee", "FROM", "csu_fees", "AS", "t1", "JOIN", "campuses", "AS", "t2", "ON", "t1.campus", "=", "t2.id", "WHERE", "t2.campus", "=", "``", "San", "Jose", "State", "University", "''", "AND", "t1.year", "=", "2000"], "query_toks_no_value": ["select", "t1", ".", "campusfee", "from", "csu_fees", "as", "t1", "join", "campuses", "as", "t2", "on", "t1", ".", "campus", "=", "t2", ".", "id", "where", "t2", ".", "campus", "=", "value", "and", "t1", ".", "year", "=", "value"], "question": "Find the campus fee of \"San Jose State University\" in year 2000.", "question_toks": ["Find", "the", "campus", "fee", "of", "``", "San", "Jose", "State", "University", "''", "in", "year", "2000", "."], "guid": 8248}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | What are the names of students and their respective departments, ordered by number of credits from least to greatest?", "sql": "SELECT name ,  dept_name FROM student ORDER BY tot_cred", "example": {"db_id": "college_2", "query": "SELECT name ,  dept_name FROM student ORDER BY tot_cred", "query_toks": ["SELECT", "name", ",", "dept_name", "FROM", "student", "ORDER", "BY", "tot_cred"], "query_toks_no_value": ["select", "name", ",", "dept_name", "from", "student", "order", "by", "tot_cred"], "question": "What are the names of students and their respective departments, ordered by number of credits from least to greatest?", "question_toks": ["What", "are", "the", "names", "of", "students", "and", "their", "respective", "departments", ",", "ordered", "by", "number", "of", "credits", "from", "least", "to", "greatest", "?"], "guid": 8320}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | Find the last names of faculties who are members of computer science department.", "sql": "SELECT T2.Lname FROM DEPARTMENT AS T1 JOIN FACULTY AS T2 ON T1.DNO = T3.DNO JOIN MEMBER_OF AS T3 ON T2.FacID = T3.FacID WHERE T1.DName = \"Computer Science\"", "example": {"db_id": "college_3", "query": "SELECT T2.Lname FROM DEPARTMENT AS T1 JOIN FACULTY AS T2 ON T1.DNO  =  T3.DNO JOIN MEMBER_OF AS T3 ON T2.FacID  =  T3.FacID WHERE T1.DName  =  \"Computer Science\"", "query_toks": ["SELECT", "T2.Lname", "FROM", "DEPARTMENT", "AS", "T1", "JOIN", "FACULTY", "AS", "T2", "ON", "T1.DNO", "=", "T3.DNO", "JOIN", "MEMBER_OF", "AS", "T3", "ON", "T2.FacID", "=", "T3.FacID", "WHERE", "T1.DName", "=", "``", "Computer", "Science", "''"], "query_toks_no_value": ["select", "t2", ".", "lname", "from", "department", "as", "t1", "join", "faculty", "as", "t2", "on", "t1", ".", "dno", "=", "t3", ".", "dno", "join", "member_of", "as", "t3", "on", "t2", ".", "facid", "=", "t3", ".", "facid", "where", "t1", ".", "dname", "=", "value"], "question": "Find the last names of faculties who are members of computer science department.", "question_toks": ["Find", "the", "last", "names", "of", "faculties", "who", "are", "members", "of", "computer", "science", "department", "."], "guid": 8434}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | What are the full names of faculties with sex M and who live in building NEB?", "sql": "SELECT Fname, Lname FROM Faculty WHERE Sex = 'M' AND Building = 'NEB'", "example": {"db_id": "college_3", "query": "SELECT Fname ,  Lname FROM FACULTY WHERE sex  =  \"M\" AND Building  =  \"NEB\"", "query_toks": ["SELECT", "Fname", ",", "Lname", "FROM", "FACULTY", "WHERE", "sex", "=", "``", "M", "''", "AND", "Building", "=", "``", "NEB", "''"], "query_toks_no_value": ["select", "fname", ",", "lname", "from", "faculty", "where", "sex", "=", "value", "and", "building", "=", "value"], "question": "What are the full names of faculties with sex M and who live in building NEB?", "question_toks": ["What", "are", "the", "full", "names", "of", "faculties", "with", "sex", "M", "and", "who", "live", "in", "building", "NEB", "?"], "guid": 8326}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | What are the titles of courses that are offered in more than one department?", "sql": "SELECT title FROM course GROUP BY title HAVING count(*) > 1", "example": {"db_id": "college_2", "query": "SELECT title FROM course GROUP BY title HAVING count(*)  >  1", "query_toks": ["SELECT", "title", "FROM", "course", "GROUP", "BY", "title", "HAVING", "count", "(", "*", ")", ">", "1"], "query_toks_no_value": ["select", "title", "from", "course", "group", "by", "title", "having", "count", "(", "*", ")", ">", "value"], "question": "What are the titles of courses that are offered in more than one department?", "question_toks": ["What", "are", "the", "titles", "of", "courses", "that", "are", "offered", "in", "more", "than", "one", "department", "?"], "guid": 8330}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What is the code of the school where the accounting department belongs to?", "sql": "SELECT school_code FROM department WHERE dept_name = 'Accounting'", "example": {"db_id": "college_1", "query": "SELECT school_code FROM department WHERE dept_name  =  \"Accounting\"", "query_toks": ["SELECT", "school_code", "FROM", "department", "WHERE", "dept_name", "=", "``", "Accounting", "''"], "query_toks_no_value": ["select", "school_code", "from", "department", "where", "dept_name", "=", "value"], "question": "What is the code of the school where the accounting department belongs to?", "question_toks": ["What", "is", "the", "code", "of", "the", "school", "where", "the", "accounting", "department", "belongs", "to", "?"], "guid": 8251}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Find the buildings which have rooms with capacity more than 50.", "sql": "SELECT DISTINCT building FROM classroom WHERE capacity > 50", "example": {"db_id": "college_2", "query": "SELECT DISTINCT building FROM classroom WHERE capacity  >  50", "query_toks": ["SELECT", "DISTINCT", "building", "FROM", "classroom", "WHERE", "capacity", ">", "50"], "query_toks_no_value": ["select", "distinct", "building", "from", "classroom", "where", "capacity", ">", "value"], "question": "Find the buildings which have rooms with capacity more than 50.", "question_toks": ["Find", "the", "buildings", "which", "have", "rooms", "with", "capacity", "more", "than", "50", "."], "guid": 8331}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | What are the names of instructors who didn't teach courses in the Spring?", "sql": "SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches WHERE semester = 'Spring')", "example": {"db_id": "college_2", "query": "SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches WHERE semester  =  'Spring')", "query_toks": ["SELECT", "name", "FROM", "instructor", "WHERE", "id", "NOT", "IN", "(", "SELECT", "id", "FROM", "teaches", "WHERE", "semester", "=", "'Spring", "'", ")"], "query_toks_no_value": ["select", "name", "from", "instructor", "where", "id", "not", "in", "(", "select", "id", "from", "teaches", "where", "semester", "=", "value", ")"], "question": "What are the names of instructors who didn't teach courses in the Spring?", "question_toks": ["What", "are", "the", "names", "of", "instructors", "who", "did", "n't", "teach", "courses", "in", "the", "Spring", "?"], "guid": 8332}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | Find the number of students for each department.", "sql": "SELECT count(*) ,  dept_code FROM student GROUP BY dept_code", "example": {"db_id": "college_1", "query": "SELECT count(*) ,  dept_code FROM student GROUP BY dept_code", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "dept_code", "FROM", "student", "GROUP", "BY", "dept_code"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "dept_code", "from", "student", "group", "by", "dept_code"], "question": "Find the number of students for each department.", "question_toks": ["Find", "the", "number", "of", "students", "for", "each", "department", "."], "guid": 8186}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | What are the first names for all faculty professors, ordered by first name?", "sql": "SELECT fname FROM faculty WHERE rank = 'Professor' ORDER BY fname", "example": {"db_id": "college_3", "query": "SELECT Fname FROM FACULTY WHERE Rank  =  \"Professor\" ORDER BY Fname", "query_toks": ["SELECT", "Fname", "FROM", "FACULTY", "WHERE", "Rank", "=", "``", "Professor", "''", "ORDER", "BY", "Fname"], "query_toks_no_value": ["select", "fname", "from", "faculty", "where", "rank", "=", "value", "order", "by", "fname"], "question": "What are the first names for all faculty professors, ordered by first name?", "question_toks": ["What", "are", "the", "first", "names", "for", "all", "faculty", "professors", ",", "ordered", "by", "first", "name", "?"], "guid": 8398}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | Find the number of classes in each department.", "sql": "SELECT count(*) , T2.dept_code FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code = T2.crs_code GROUP BY T2.dept_code", "example": {"db_id": "college_1", "query": "SELECT count(*) ,  dept_code FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code  =  T2.crs_code GROUP BY dept_code", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "dept_code", "FROM", "CLASS", "AS", "T1", "JOIN", "course", "AS", "T2", "ON", "T1.crs_code", "=", "T2.crs_code", "GROUP", "BY", "dept_code"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "dept_code", "from", "class", "as", "t1", "join", "course", "as", "t2", "on", "t1", ".", "crs_code", "=", "t2", ".", "crs_code", "group", "by", "dept_code"], "question": "Find the number of classes in each department.", "question_toks": ["Find", "the", "number", "of", "classes", "in", "each", "department", "."], "guid": 8184}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | What are the ids for courses that were offered in both Fall of 2009 and Spring of 2010?", "sql": "SELECT course_id FROM section WHERE semester = 'Fall' AND year = 2009 INTERSECT SELECT course_id FROM section WHERE semester = 'Spring' AND year = 2010", "example": {"db_id": "college_2", "query": "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 INTERSECT SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010", "query_toks": ["SELECT", "course_id", "FROM", "SECTION", "WHERE", "semester", "=", "'Fall", "'", "AND", "YEAR", "=", "2009", "INTERSECT", "SELECT", "course_id", "FROM", "SECTION", "WHERE", "semester", "=", "'Spring", "'", "AND", "YEAR", "=", "2010"], "query_toks_no_value": ["select", "course_id", "from", "section", "where", "semester", "=", "value", "and", "year", "=", "value", "intersect", "select", "course_id", "from", "section", "where", "semester", "=", "value", "and", "year", "=", "value"], "question": "What are the ids for courses that were offered in both Fall of 2009 and Spring of 2010?", "question_toks": ["What", "are", "the", "ids", "for", "courses", "that", "were", "offered", "in", "both", "Fall", "of", "2009", "and", "Spring", "of", "2010", "?"], "guid": 8120}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | Which department has the largest number of employees?", "sql": "SELECT name FROM department GROUP BY departmentID ORDER BY count(departmentID) DESC LIMIT 1;", "example": {"db_id": "hospital_1", "query": "SELECT name FROM department GROUP BY departmentID ORDER BY count(departmentID) DESC LIMIT 1;", "query_toks": ["SELECT", "name", "FROM", "department", "GROUP", "BY", "departmentID", "ORDER", "BY", "count", "(", "departmentID", ")", "DESC", "LIMIT", "1", ";"], "query_toks_no_value": ["select", "name", "from", "department", "group", "by", "departmentid", "order", "by", "count", "(", "departmentid", ")", "desc", "limit", "value"], "question": "Which department has the largest number of employees?", "question_toks": ["Which", "department", "has", "the", "largest", "number", "of", "employees", "?"], "guid": 8431}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | List the names and buildings of all departments sorted by the budget from large to small.", "sql": "SELECT dept_name, building FROM department ORDER BY budget DESC", "example": {"db_id": "college_2", "query": "SELECT dept_name ,  building FROM department ORDER BY budget DESC", "query_toks": ["SELECT", "dept_name", ",", "building", "FROM", "department", "ORDER", "BY", "budget", "DESC"], "query_toks_no_value": ["select", "dept_name", ",", "building", "from", "department", "order", "by", "budget", "desc"], "question": "List the names and buildings of all departments sorted by the budget from large to small.", "question_toks": ["List", "the", "names", "and", "buildings", "of", "all", "departments", "sorted", "by", "the", "budget", "from", "large", "to", "small", "."], "guid": 8180}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | How many employees are there all together?", "sql": "SELECT COUNT(*) FROM employee", "example": {"db_id": "college_1", "query": "SELECT count(*) FROM employee", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "employee"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "employee"], "question": "How many employees are there all together?", "question_toks": ["How", "many", "employees", "are", "there", "all", "together", "?"], "guid": 8298}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | Find the names of all physicians and their primary affiliated departments' names.", "sql": "SELECT T1.name, T3.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID = T2.physician JOIN department AS T3 ON T2.department = T3.DepartmentID WHERE T2.PrimaryAffiliation = 1", "example": {"db_id": "hospital_1", "query": "SELECT T1.name ,  T3.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T2.PrimaryAffiliation  =  1", "query_toks": ["SELECT", "T1.name", ",", "T3.name", "FROM", "physician", "AS", "T1", "JOIN", "affiliated_with", "AS", "T2", "ON", "T1.EmployeeID", "=", "T2.physician", "JOIN", "department", "AS", "T3", "ON", "T2.department", "=", "T3.DepartmentID", "WHERE", "T2.PrimaryAffiliation", "=", "1"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "t3", ".", "name", "from", "physician", "as", "t1", "join", "affiliated_with", "as", "t2", "on", "t1", ".", "employeeid", "=", "t2", ".", "physician", "join", "department", "as", "t3", "on", "t2", ".", "department", "=", "t3", ".", "departmentid", "where", "t2", ".", "primaryaffiliation", "=", "value"], "question": "Find the names of all physicians and their primary affiliated departments' names.", "question_toks": ["Find", "the", "names", "of", "all", "physicians", "and", "their", "primary", "affiliated", "departments", "'", "names", "."], "guid": 8157}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | Find names of all students who took some course and the course description.", "sql": "SELECT T1.stu_fname , T1.stu_lname , T4.crs_description FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num JOIN class AS T3 ON T2.class_code = T3.class_code JOIN course AS T4 ON T3.crs_code = T4.crs_code", "example": {"db_id": "college_1", "query": "SELECT T1.stu_fname ,  T1.stu_lname ,  T4.crs_description FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code JOIN course AS T4 ON T3.crs_code  =  T4.crs_code", "query_toks": ["SELECT", "T1.stu_fname", ",", "T1.stu_lname", ",", "T4.crs_description", "FROM", "student", "AS", "T1", "JOIN", "enroll", "AS", "T2", "ON", "T1.stu_num", "=", "T2.stu_num", "JOIN", "CLASS", "AS", "T3", "ON", "T2.class_code", "=", "T3.class_code", "JOIN", "course", "AS", "T4", "ON", "T3.crs_code", "=", "T4.crs_code"], "query_toks_no_value": ["select", "t1", ".", "stu_fname", ",", "t1", ".", "stu_lname", ",", "t4", ".", "crs_description", "from", "student", "as", "t1", "join", "enroll", "as", "t2", "on", "t1", ".", "stu_num", "=", "t2", ".", "stu_num", "join", "class", "as", "t3", "on", "t2", ".", "class_code", "=", "t3", ".", "class_code", "join", "course", "as", "t4", "on", "t3", ".", "crs_code", "=", "t4", ".", "crs_code"], "question": "Find names of all students who took some course and the course description.", "question_toks": ["Find", "names", "of", "all", "students", "who", "took", "some", "course", "and", "the", "course", "description", "."], "guid": 8306}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | What are the titles of courses without prerequisites?", "sql": "SELECT title FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)", "example": {"db_id": "college_2", "query": "SELECT title FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)", "query_toks": ["SELECT", "title", "FROM", "course", "WHERE", "course_id", "NOT", "IN", "(", "SELECT", "course_id", "FROM", "prereq", ")"], "query_toks_no_value": ["select", "title", "from", "course", "where", "course_id", "not", "in", "(", "select", "course_id", "from", "prereq", ")"], "question": "What are the titles of courses without prerequisites?", "question_toks": ["What", "are", "the", "titles", "of", "courses", "without", "prerequisites", "?"], "guid": 8238}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | Find the names of nurses who are nursing an undergoing treatment.", "sql": "SELECT DISTINCT T2.name FROM undergoes AS T1 JOIN nurse AS T2 ON T1.AssistingNurse = T2.EmployeeID", "example": {"db_id": "hospital_1", "query": "SELECT DISTINCT T2.name FROM undergoes AS T1 JOIN nurse AS T2 ON T1.AssistingNurse  =  T2.EmployeeID", "query_toks": ["SELECT", "DISTINCT", "T2.name", "FROM", "undergoes", "AS", "T1", "JOIN", "nurse", "AS", "T2", "ON", "T1.AssistingNurse", "=", "T2.EmployeeID"], "query_toks_no_value": ["select", "distinct", "t2", ".", "name", "from", "undergoes", "as", "t1", "join", "nurse", "as", "t2", "on", "t1", ".", "assistingnurse", "=", "t2", ".", "employeeid"], "question": "Find the names of nurses who are nursing an undergoing treatment.", "question_toks": ["Find", "the", "names", "of", "nurses", "who", "are", "nursing", "an", "undergoing", "treatment", "."], "guid": 8222}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What is the first name of the student whose last name starting with the letter S and is taking ACCT-211 class?", "sql": "SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num JOIN CLASS AS T3 ON T2.class_code = T3.class_code WHERE T3.crs_code = 'ACCT-211' AND T1.stu_lname LIKE 'S%'", "example": {"db_id": "college_1", "query": "SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code WHERE T3.crs_code  =  'ACCT-211' AND T1.stu_lname LIKE 'S%'", "query_toks": ["SELECT", "T1.stu_fname", "FROM", "student", "AS", "T1", "JOIN", "enroll", "AS", "T2", "ON", "T1.stu_num", "=", "T2.stu_num", "JOIN", "CLASS", "AS", "T3", "ON", "T2.class_code", "=", "T3.class_code", "WHERE", "T3.crs_code", "=", "'ACCT-211", "'", "AND", "T1.stu_lname", "LIKE", "'S", "%", "'"], "query_toks_no_value": ["select", "t1", ".", "stu_fname", "from", "student", "as", "t1", "join", "enroll", "as", "t2", "on", "t1", ".", "stu_num", "=", "t2", ".", "stu_num", "join", "class", "as", "t3", "on", "t2", ".", "class_code", "=", "t3", ".", "class_code", "where", "t3", ".", "crs_code", "=", "value", "and", "t1", ".", "stu_lname", "like", "value"], "question": "What is the first name of the student whose last name starting with the letter S and is taking ACCT-211 class?", "question_toks": ["What", "is", "the", "first", "name", "of", "the", "student", "whose", "last", "name", "starting", "with", "the", "letter", "S", "and", "is", "taking", "ACCT-211", "class", "?"], "guid": 8300}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | How many departments does the college has?", "sql": "SELECT count(DISTINCT dept_name) FROM department", "example": {"db_id": "college_1", "query": "SELECT count(DISTINCT dept_name) FROM department", "query_toks": ["SELECT", "count", "(", "DISTINCT", "dept_name", ")", "FROM", "department"], "query_toks_no_value": ["select", "count", "(", "distinct", "dept_name", ")", "from", "department"], "question": "How many departments does the college has?", "question_toks": ["How", "many", "departments", "does", "the", "college", "has", "?"], "guid": 8277}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | What are the names of Art instructors who have taught a course, and the corresponding course id?", "sql": "SELECT T1.name, T2.course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID = T2.ID WHERE T1.dept_name = 'Art'", "example": {"db_id": "college_2", "query": "SELECT name ,  course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID  =  T2.ID WHERE T1.dept_name  =  'Art'", "query_toks": ["SELECT", "name", ",", "course_id", "FROM", "instructor", "AS", "T1", "JOIN", "teaches", "AS", "T2", "ON", "T1.ID", "=", "T2.ID", "WHERE", "T1.dept_name", "=", "'Art", "'"], "query_toks_no_value": ["select", "name", ",", "course_id", "from", "instructor", "as", "t1", "join", "teaches", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "id", "where", "t1", ".", "dept_name", "=", "value"], "question": "What are the names of Art instructors who have taught a course, and the corresponding course id?", "question_toks": ["What", "are", "the", "names", "of", "Art", "instructors", "who", "have", "taught", "a", "course", ",", "and", "the", "corresponding", "course", "id", "?"], "guid": 8354}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | What is the average fee on a CSU campus in 2005?", "sql": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR = 2005", "example": {"db_id": "csu_1", "query": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  2005", "query_toks": ["SELECT", "avg", "(", "campusfee", ")", "FROM", "csu_fees", "WHERE", "YEAR", "=", "2005"], "query_toks_no_value": ["select", "avg", "(", "campusfee", ")", "from", "csu_fees", "where", "year", "=", "value"], "question": "What is the average fee on a CSU campus in 2005?", "question_toks": ["What", "is", "the", "average", "fee", "on", "a", "CSU", "campus", "in", "2005", "?"], "guid": 8209}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | report the total number of degrees granted between 1998 and 2002.", "sql": "SELECT T1.campus ,  sum(T2.degrees) FROM campuses AS T1 JOIN degrees AS T2 ON T1.id  =  T2.campus WHERE T2.year  >=  1998 AND T2.year  <=  2002 GROUP BY T1.campus", "example": {"db_id": "csu_1", "query": "SELECT T1.campus ,  sum(T2.degrees) FROM campuses AS T1 JOIN degrees AS T2 ON T1.id  =  T2.campus WHERE T2.year  >=  1998 AND T2.year  <=  2002 GROUP BY T1.campus", "query_toks": ["SELECT", "T1.campus", ",", "sum", "(", "T2.degrees", ")", "FROM", "campuses", "AS", "T1", "JOIN", "degrees", "AS", "T2", "ON", "T1.id", "=", "T2.campus", "WHERE", "T2.year", ">", "=", "1998", "AND", "T2.year", "<", "=", "2002", "GROUP", "BY", "T1.campus"], "query_toks_no_value": ["select", "t1", ".", "campus", ",", "sum", "(", "t2", ".", "degrees", ")", "from", "campuses", "as", "t1", "join", "degrees", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "campus", "where", "t2", ".", "year", ">", "=", "value", "and", "t2", ".", "year", "<", "=", "value", "group", "by", "t1", ".", "campus"], "question": "report the total number of degrees granted between 1998 and 2002.", "question_toks": ["report", "the", "total", "number", "of", "degrees", "granted", "between", "1998", "and", "2002", "."], "guid": 8110}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | What is the title, credit value, and department name for courses with more than one prerequisite?", "sql": "SELECT T1.title ,  T1.credits , T1.dept_name FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  >  1", "example": {"db_id": "college_2", "query": "SELECT T1.title ,  T1.credits , T1.dept_name FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  >  1", "query_toks": ["SELECT", "T1.title", ",", "T1.credits", ",", "T1.dept_name", "FROM", "course", "AS", "T1", "JOIN", "prereq", "AS", "T2", "ON", "T1.course_id", "=", "T2.course_id", "GROUP", "BY", "T2.course_id", "HAVING", "count", "(", "*", ")", ">", "1"], "query_toks_no_value": ["select", "t1", ".", "title", ",", "t1", ".", "credits", ",", "t1", ".", "dept_name", "from", "course", "as", "t1", "join", "prereq", "as", "t2", "on", "t1", ".", "course_id", "=", "t2", ".", "course_id", "group", "by", "t2", ".", "course_id", "having", "count", "(", "*", ")", ">", "value"], "question": "What is the title, credit value, and department name for courses with more than one prerequisite?", "question_toks": ["What", "is", "the", "title", ",", "credit", "value", ",", "and", "department", "name", "for", "courses", "with", "more", "than", "one", "prerequisite", "?"], "guid": 8378}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Find the semester and year which has the least number of student taking any class.", "sql": "SELECT semester, YEAR FROM takes GROUP BY semester, YEAR ORDER BY COUNT(*) LIMIT 1", "example": {"db_id": "college_2", "query": "SELECT semester ,  YEAR FROM takes GROUP BY semester ,  YEAR ORDER BY count(*) LIMIT 1", "query_toks": ["SELECT", "semester", ",", "YEAR", "FROM", "takes", "GROUP", "BY", "semester", ",", "YEAR", "ORDER", "BY", "count", "(", "*", ")", "LIMIT", "1"], "query_toks_no_value": ["select", "semester", ",", "year", "from", "takes", "group", "by", "semester", ",", "year", "order", "by", "count", "(", "*", ")", "limit", "value"], "question": "Find the semester and year which has the least number of student taking any class.", "question_toks": ["Find", "the", "semester", "and", "year", "which", "has", "the", "least", "number", "of", "student", "taking", "any", "class", "."], "guid": 8399}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | Find the first name and last name of the instructor of course that has course name", "sql": "SELECT T2.fname, T2.lname FROM course AS T1 JOIN faculty AS T2 ON T1.instructor = T2.facid WHERE T1.cname = 'COMPUTER LITERACY'", "example": {"db_id": "college_3", "query": "SELECT T2.Fname ,  T2.Lname FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor  =  T2.FacID WHERE T1.CName  =  \"COMPUTER LITERACY\"", "query_toks": ["SELECT", "T2.Fname", ",", "T2.Lname", "FROM", "COURSE", "AS", "T1", "JOIN", "FACULTY", "AS", "T2", "ON", "T1.Instructor", "=", "T2.FacID", "WHERE", "T1.CName", "=", "``", "COMPUTER", "LITERACY", "''"], "query_toks_no_value": ["select", "t2", ".", "fname", ",", "t2", ".", "lname", "from", "course", "as", "t1", "join", "faculty", "as", "t2", "on", "t1", ".", "instructor", "=", "t2", ".", "facid", "where", "t1", ".", "cname", "=", "value"], "question": "Find the first name and last name of the instructor of course that has course name", "question_toks": ["Find", "the", "first", "name", "and", "last", "name", "of", "the", "instructor", "of", "course", "that", "has", "course", "name"], "guid": 8263}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | Count the number of courses with more than 2 credits.", "sql": "SELECT COUNT(*) FROM course WHERE credits > 2", "example": {"db_id": "college_3", "query": "SELECT count(*) FROM COURSE WHERE Credits  >  2", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "COURSE", "WHERE", "Credits", ">", "2"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "course", "where", "credits", ">", "value"], "question": "Count the number of courses with more than 2 credits.", "question_toks": ["Count", "the", "number", "of", "courses", "with", "more", "than", "2", "credits", "."], "guid": 8388}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | List the codes of all courses that take place in room KLR209.", "sql": "SELECT class_code FROM CLASS WHERE class_room = 'KLR209'", "example": {"db_id": "college_1", "query": "SELECT class_code FROM CLASS WHERE class_room  =  'KLR209'", "query_toks": ["SELECT", "class_code", "FROM", "CLASS", "WHERE", "class_room", "=", "'KLR209", "'"], "query_toks_no_value": ["select", "class_code", "from", "class", "where", "class_room", "=", "value"], "question": "List the codes of all courses that take place in room KLR209.", "question_toks": ["List", "the", "codes", "of", "all", "courses", "that", "take", "place", "in", "room", "KLR209", "."], "guid": 8392}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Find the total number of instructors who teach a course in the Spring 2010 semester.", "sql": "SELECT COUNT (DISTINCT ID) FROM teaches WHERE semester  =  'Spring' AND YEAR  =  2010", "example": {"db_id": "college_2", "query": "SELECT COUNT (DISTINCT ID) FROM teaches WHERE semester  =  'Spring' AND YEAR  =  2010", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "ID", ")", "FROM", "teaches", "WHERE", "semester", "=", "'Spring", "'", "AND", "YEAR", "=", "2010"], "query_toks_no_value": ["select", "count", "(", "distinct", "id", ")", "from", "teaches", "where", "semester", "=", "value", "and", "year", "=", "value"], "question": "Find the total number of instructors who teach a course in the Spring 2010 semester.", "question_toks": ["Find", "the", "total", "number", "of", "instructors", "who", "teach", "a", "course", "in", "the", "Spring", "2010", "semester", "."], "guid": 8154}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | Find the name of the nurse who has the largest number of appointments.", "sql": "SELECT T1.name FROM nurse AS T1 JOIN appointment AS T2 ON T1.employeeid = T2.prepnurse GROUP BY T1.employeeid ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "hospital_1", "query": "SELECT T1.name FROM nurse AS T1 JOIN appointment AS T2 ON T1.employeeid  =  T2.prepnurse GROUP BY T1.employeeid ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.name", "FROM", "nurse", "AS", "T1", "JOIN", "appointment", "AS", "T2", "ON", "T1.employeeid", "=", "T2.prepnurse", "GROUP", "BY", "T1.employeeid", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "nurse", "as", "t1", "join", "appointment", "as", "t2", "on", "t1", ".", "employeeid", "=", "t2", ".", "prepnurse", "group", "by", "t1", ".", "employeeid", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Find the name of the nurse who has the largest number of appointments.", "question_toks": ["Find", "the", "name", "of", "the", "nurse", "who", "has", "the", "largest", "number", "of", "appointments", "."], "guid": 8169}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | Find the first name and office of the professor who is in the history department and has a Ph.D. degree.", "sql": "SELECT T1.emp_fname , T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num = T2.emp_num JOIN department AS T3 ON T3.dept_code = T2.dept_code WHERE T3.dept_name = 'History' AND T2.prof_high_degree = 'Ph.D.'", "example": {"db_id": "college_1", "query": "SELECT T1.emp_fname ,  T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T3.dept_code  =  T2.dept_code WHERE T3.dept_name  =  'History' AND T2.prof_high_degree  =  'Ph.D.'", "query_toks": ["SELECT", "T1.emp_fname", ",", "T2.prof_office", "FROM", "employee", "AS", "T1", "JOIN", "professor", "AS", "T2", "ON", "T1.emp_num", "=", "T2.emp_num", "JOIN", "department", "AS", "T3", "ON", "T3.dept_code", "=", "T2.dept_code", "WHERE", "T3.dept_name", "=", "'History", "'", "AND", "T2.prof_high_degree", "=", "'Ph.D", ".", "'"], "query_toks_no_value": ["select", "t1", ".", "emp_fname", ",", "t2", ".", "prof_office", "from", "employee", "as", "t1", "join", "professor", "as", "t2", "on", "t1", ".", "emp_num", "=", "t2", ".", "emp_num", "join", "department", "as", "t3", "on", "t3", ".", "dept_code", "=", "t2", ".", "dept_code", "where", "t3", ".", "dept_name", "=", "value", "and", "t2", ".", "prof_high_degree", "=", "value"], "question": "Find the first name and office of the professor who is in the history department and has a Ph.D. degree.", "question_toks": ["Find", "the", "first", "name", "and", "office", "of", "the", "professor", "who", "is", "in", "the", "history", "department", "and", "has", "a", "Ph.D.", "degree", "."], "guid": 8207}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | What is the id of the patient who stayed in room 111 most recently?", "sql": "SELECT patient FROM stay WHERE room = 111 ORDER BY staystart DESC LIMIT 1", "example": {"db_id": "hospital_1", "query": "SELECT patient FROM stay WHERE room  =  111 ORDER BY staystart DESC LIMIT 1", "query_toks": ["SELECT", "patient", "FROM", "stay", "WHERE", "room", "=", "111", "ORDER", "BY", "staystart", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "patient", "from", "stay", "where", "room", "=", "value", "order", "by", "staystart", "desc", "limit", "value"], "question": "What is the id of the patient who stayed in room 111 most recently?", "question_toks": ["What", "is", "the", "id", "of", "the", "patient", "who", "stayed", "in", "room", "111", "most", "recently", "?"], "guid": 8133}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What is the description for the CIS-220 and how many credits does it have?", "sql": "SELECT crs_description, crs_credit FROM course WHERE crs_code = 'CIS-220'", "example": {"db_id": "college_1", "query": "SELECT crs_credit ,  crs_description FROM course WHERE crs_code  =  'CIS-220'", "query_toks": ["SELECT", "crs_credit", ",", "crs_description", "FROM", "course", "WHERE", "crs_code", "=", "'CIS-220", "'"], "query_toks_no_value": ["select", "crs_credit", ",", "crs_description", "from", "course", "where", "crs_code", "=", "value"], "question": "What is the description for the CIS-220 and how many credits does it have?", "question_toks": ["What", "is", "the", "description", "for", "the", "CIS-220", "and", "how", "many", "credits", "does", "it", "have", "?"], "guid": 8374}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | How many different locations does the school with code BUS has?", "sql": "SELECT COUNT(DISTINCT dept_address) FROM department WHERE school_code = 'BUS'", "example": {"db_id": "college_1", "query": "SELECT count(DISTINCT dept_address) FROM department WHERE school_code  =  'BUS'", "query_toks": ["SELECT", "count", "(", "DISTINCT", "dept_address", ")", "FROM", "department", "WHERE", "school_code", "=", "'BUS", "'"], "query_toks_no_value": ["select", "count", "(", "distinct", "dept_address", ")", "from", "department", "where", "school_code", "=", "value"], "question": "How many different locations does the school with code BUS has?", "question_toks": ["How", "many", "different", "locations", "does", "the", "school", "with", "code", "BUS", "has", "?"], "guid": 8123}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | Find the name of the campuses that is in Northridge, Los Angeles or in San Francisco, San Francisco.", "sql": "SELECT campus FROM campuses WHERE LOCATION = \"Northridge\" AND county = \"Los Angeles\" UNION SELECT campus FROM campuses WHERE LOCATION = \"San Francisco\" AND county = \"San Francisco\"", "example": {"db_id": "csu_1", "query": "SELECT campus FROM campuses WHERE LOCATION  =  \"Northridge\" AND county  =  \"Los Angeles\" UNION SELECT campus FROM campuses WHERE LOCATION  =  \"San Francisco\" AND county  =  \"San Francisco\"", "query_toks": ["SELECT", "campus", "FROM", "campuses", "WHERE", "LOCATION", "=", "``", "Northridge", "''", "AND", "county", "=", "``", "Los", "Angeles", "''", "UNION", "SELECT", "campus", "FROM", "campuses", "WHERE", "LOCATION", "=", "``", "San", "Francisco", "''", "AND", "county", "=", "``", "San", "Francisco", "''"], "query_toks_no_value": ["select", "campus", "from", "campuses", "where", "location", "=", "value", "and", "county", "=", "value", "union", "select", "campus", "from", "campuses", "where", "location", "=", "value", "and", "county", "=", "value"], "question": "Find the name of the campuses that is in Northridge, Los Angeles or in San Francisco, San Francisco.", "question_toks": ["Find", "the", "name", "of", "the", "campuses", "that", "is", "in", "Northridge", ",", "Los", "Angeles", "or", "in", "San", "Francisco", ",", "San", "Francisco", "."], "guid": 8397}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | What is the title of the prerequisite class of International Finance course?", "sql": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id = T2.course_id WHERE T2.title = 'International Finance')", "example": {"db_id": "college_2", "query": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'International Finance')", "query_toks": ["SELECT", "title", "FROM", "course", "WHERE", "course_id", "IN", "(", "SELECT", "T1.prereq_id", "FROM", "prereq", "AS", "T1", "JOIN", "course", "AS", "T2", "ON", "T1.course_id", "=", "T2.course_id", "WHERE", "T2.title", "=", "'International", "Finance", "'", ")"], "query_toks_no_value": ["select", "title", "from", "course", "where", "course_id", "in", "(", "select", "t1", ".", "prereq_id", "from", "prereq", "as", "t1", "join", "course", "as", "t2", "on", "t1", ".", "course_id", "=", "t2", ".", "course_id", "where", "t2", ".", "title", "=", "value", ")"], "question": "What is the title of the prerequisite class of International Finance course?", "question_toks": ["What", "is", "the", "title", "of", "the", "prerequisite", "class", "of", "International", "Finance", "course", "?"], "guid": 8141}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | What is the average fee for a CSU campus in the year of 1996?", "sql": "SELECT AVG(campusfee) FROM csu_fees WHERE YEAR = 1996", "example": {"db_id": "csu_1", "query": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  1996", "query_toks": ["SELECT", "avg", "(", "campusfee", ")", "FROM", "csu_fees", "WHERE", "YEAR", "=", "1996"], "query_toks_no_value": ["select", "avg", "(", "campusfee", ")", "from", "csu_fees", "where", "year", "=", "value"], "question": "What is the average fee for a CSU campus in the year of 1996?", "question_toks": ["What", "is", "the", "average", "fee", "for", "a", "CSU", "campus", "in", "the", "year", "of", "1996", "?"], "guid": 8177}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | How many faculty lines are there at San Francisco State University in 2004?", "sql": "SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus = T2.id WHERE T1.year = 2004 AND T2.campus = \"San Francisco State University\"", "example": {"db_id": "csu_1", "query": "SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  2004 AND T2.campus  =  \"San Francisco State University\"", "query_toks": ["SELECT", "faculty", "FROM", "faculty", "AS", "T1", "JOIN", "campuses", "AS", "T2", "ON", "T1.campus", "=", "T2.id", "WHERE", "T1.year", "=", "2004", "AND", "T2.campus", "=", "``", "San", "Francisco", "State", "University", "''"], "query_toks_no_value": ["select", "faculty", "from", "faculty", "as", "t1", "join", "campuses", "as", "t2", "on", "t1", ".", "campus", "=", "t2", ".", "id", "where", "t1", ".", "year", "=", "value", "and", "t2", ".", "campus", "=", "value"], "question": "How many faculty lines are there at San Francisco State University in 2004?", "question_toks": ["How", "many", "faculty", "lines", "are", "there", "at", "San", "Francisco", "State", "University", "in", "2004", "?"], "guid": 8106}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | List the names of departments where some physicians are primarily affiliated with.", "sql": "SELECT DISTINCT T2.name FROM affiliated_with AS T1 JOIN department AS T2 ON T1.department = T2.departmentid WHERE PrimaryAffiliation = 1", "example": {"db_id": "hospital_1", "query": "SELECT DISTINCT T2.name FROM affiliated_with AS T1 JOIN department AS T2 ON T1.department = T2.departmentid WHERE PrimaryAffiliation  =  1", "query_toks": ["SELECT", "DISTINCT", "T2.name", "FROM", "affiliated_with", "AS", "T1", "JOIN", "department", "AS", "T2", "ON", "T1.department", "=", "T2.departmentid", "WHERE", "PrimaryAffiliation", "=", "1"], "query_toks_no_value": ["select", "distinct", "t2", ".", "name", "from", "affiliated_with", "as", "t1", "join", "department", "as", "t2", "on", "t1", ".", "department", "=", "t2", ".", "departmentid", "where", "primaryaffiliation", "=", "value"], "question": "List the names of departments where some physicians are primarily affiliated with.", "question_toks": ["List", "the", "names", "of", "departments", "where", "some", "physicians", "are", "primarily", "affiliated", "with", "."], "guid": 8201}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | What is the average gradepoint for students with the last name Smith?", "sql": "SELECT AVG(T2.gradepoint) FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade = T2.lettergrade AND T1.StuID = T3.StuID WHERE T3.LName = \"Smith\"", "example": {"db_id": "college_3", "query": "SELECT avg(T2.gradepoint) FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID WHERE T3.LName  =  \"Smith\"", "query_toks": ["SELECT", "avg", "(", "T2.gradepoint", ")", "FROM", "ENROLLED_IN", "AS", "T1", "JOIN", "GRADECONVERSION", "AS", "T2", "JOIN", "STUDENT", "AS", "T3", "ON", "T1.Grade", "=", "T2.lettergrade", "AND", "T1.StuID", "=", "T3.StuID", "WHERE", "T3.LName", "=", "``", "Smith", "''"], "query_toks_no_value": ["select", "avg", "(", "t2", ".", "gradepoint", ")", "from", "enrolled_in", "as", "t1", "join", "gradeconversion", "as", "t2", "join", "student", "as", "t3", "on", "t1", ".", "grade", "=", "t2", ".", "lettergrade", "and", "t1", ".", "stuid", "=", "t3", ".", "stuid", "where", "t3", ".", "lname", "=", "value"], "question": "What is the average gradepoint for students with the last name Smith?", "question_toks": ["What", "is", "the", "average", "gradepoint", "for", "students", "with", "the", "last", "name", "Smith", "?"], "guid": 8255}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | What are the first names and last names of the students that minor in the department with DNO 140.", "sql": "SELECT T2.Fname , T2.Lname FROM MINOR_IN AS T1 JOIN STUDENT AS T2 ON T1.StuID = T2.StuID WHERE T1.DNO = 140", "example": {"db_id": "college_3", "query": "SELECT T2.Fname ,  T2.Lname FROM MINOR_IN AS T1 JOIN STUDENT AS T2 ON T1.StuID  =  T2.StuID WHERE T1.DNO  =  140", "query_toks": ["SELECT", "T2.Fname", ",", "T2.Lname", "FROM", "MINOR_IN", "AS", "T1", "JOIN", "STUDENT", "AS", "T2", "ON", "T1.StuID", "=", "T2.StuID", "WHERE", "T1.DNO", "=", "140"], "query_toks_no_value": ["select", "t2", ".", "fname", ",", "t2", ".", "lname", "from", "minor_in", "as", "t1", "join", "student", "as", "t2", "on", "t1", ".", "stuid", "=", "t2", ".", "stuid", "where", "t1", ".", "dno", "=", "value"], "question": "What are the first names and last names of the students that minor in the department with DNO 140.", "question_toks": ["What", "are", "the", "first", "names", "and", "last", "names", "of", "the", "students", "that", "minor", "in", "the", "department", "with", "DNO", "140", "."], "guid": 8395}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | What are the names and salaries for instructors who earn less than the average salary of instructors in the Physics department?", "sql": "SELECT name ,  salary FROM instructor WHERE salary  <  (SELECT avg(salary) FROM instructor WHERE dept_name  =  'Physics')", "example": {"db_id": "college_2", "query": "SELECT name ,  salary FROM instructor WHERE salary  <  (SELECT avg(salary) FROM instructor WHERE dept_name  =  'Physics')", "query_toks": ["SELECT", "name", ",", "salary", "FROM", "instructor", "WHERE", "salary", "<", "(", "SELECT", "avg", "(", "salary", ")", "FROM", "instructor", "WHERE", "dept_name", "=", "'Physics", "'", ")"], "query_toks_no_value": ["select", "name", ",", "salary", "from", "instructor", "where", "salary", "<", "(", "select", "avg", "(", "salary", ")", "from", "instructor", "where", "dept_name", "=", "value", ")"], "question": "What are the names and salaries for instructors who earn less than the average salary of instructors in the Physics department?", "question_toks": ["What", "are", "the", "names", "and", "salaries", "for", "instructors", "who", "earn", "less", "than", "the", "average", "salary", "of", "instructors", "in", "the", "Physics", "department", "?"], "guid": 8333}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | Which physicians are in charge of more than one patient? Give me their names.", "sql": "SELECT T1.name FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid HAVING count(*) > 1", "example": {"db_id": "hospital_1", "query": "SELECT T1.name FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid  =  T2.PCP GROUP BY T1.employeeid HAVING count(*)  >  1", "query_toks": ["SELECT", "T1.name", "FROM", "physician", "AS", "T1", "JOIN", "patient", "AS", "T2", "ON", "T1.employeeid", "=", "T2.PCP", "GROUP", "BY", "T1.employeeid", "HAVING", "count", "(", "*", ")", ">", "1"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "physician", "as", "t1", "join", "patient", "as", "t2", "on", "t1", ".", "employeeid", "=", "t2", ".", "pcp", "group", "by", "t1", ".", "employeeid", "having", "count", "(", "*", ")", ">", "value"], "question": "Which physicians are in charge of more than one patient? Give me their names.", "question_toks": ["Which", "physicians", "are", "in", "charge", "of", "more", "than", "one", "patient", "?", "Give", "me", "their", "names", "."], "guid": 8406}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | Find names of all students who took some course and got A or C.", "sql": "SELECT T1.stu_fname , T1.stu_lname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num WHERE T2.enroll_grade = 'C' OR T2.enroll_grade = 'A'", "example": {"db_id": "college_1", "query": "SELECT T1.stu_fname ,  T1.stu_lname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num WHERE T2.enroll_grade  =  'C' OR T2.enroll_grade  =  'A'", "query_toks": ["SELECT", "T1.stu_fname", ",", "T1.stu_lname", "FROM", "student", "AS", "T1", "JOIN", "enroll", "AS", "T2", "ON", "T1.stu_num", "=", "T2.stu_num", "WHERE", "T2.enroll_grade", "=", "'C", "'", "OR", "T2.enroll_grade", "=", "'A", "'"], "query_toks_no_value": ["select", "t1", ".", "stu_fname", ",", "t1", ".", "stu_lname", "from", "student", "as", "t1", "join", "enroll", "as", "t2", "on", "t1", ".", "stu_num", "=", "t2", ".", "stu_num", "where", "t2", ".", "enroll_grade", "=", "value", "or", "t2", ".", "enroll_grade", "=", "value"], "question": "Find names of all students who took some course and got A or C.", "question_toks": ["Find", "names", "of", "all", "students", "who", "took", "some", "course", "and", "got", "A", "or", "C", "."], "guid": 8183}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Find the total budgets of the Marketing or Finance department.", "sql": "SELECT sum(budget) FROM department WHERE dept_name = 'Marketing' OR dept_name = 'Finance'", "example": {"db_id": "college_2", "query": "SELECT sum(budget) FROM department WHERE dept_name  =  'Marketing' OR dept_name  =  'Finance'", "query_toks": ["SELECT", "sum", "(", "budget", ")", "FROM", "department", "WHERE", "dept_name", "=", "'Marketing", "'", "OR", "dept_name", "=", "'Finance", "'"], "query_toks_no_value": ["select", "sum", "(", "budget", ")", "from", "department", "where", "dept_name", "=", "value", "or", "dept_name", "=", "value"], "question": "Find the total budgets of the Marketing or Finance department.", "question_toks": ["Find", "the", "total", "budgets", "of", "the", "Marketing", "or", "Finance", "department", "."], "guid": 8339}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | What are the first names for students who have an \"a\" in their first name?", "sql": "SELECT Fname FROM student WHERE Fname LIKE '%a%'", "example": {"db_id": "college_3", "query": "SELECT DISTINCT Fname FROM STUDENT WHERE Fname LIKE '%a%'", "query_toks": ["SELECT", "DISTINCT", "Fname", "FROM", "STUDENT", "WHERE", "Fname", "LIKE", "'", "%", "a", "%", "'"], "query_toks_no_value": ["select", "distinct", "fname", "from", "student", "where", "fname", "like", "value"], "question": "What are the first names for students who have an \"a\" in their first name?", "question_toks": ["What", "are", "the", "first", "names", "for", "students", "who", "have", "an", "``", "a", "''", "in", "their", "first", "name", "?"], "guid": 8249}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What is the average GPA of students taking ACCT-211?", "sql": "SELECT AVG(T2.stu_gpa) FROM enroll AS T1 JOIN student AS T2 ON T1.stu_num = T2.stu_num JOIN CLASS AS T3 ON T1.class_code = T3.class_code WHERE T3.crs_code = 'ACCT-211'", "example": {"db_id": "college_1", "query": "SELECT avg(T2.stu_gpa) FROM enroll AS T1 JOIN student AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T1.class_code  =  T3.class_code WHERE T3.crs_code  =  'ACCT-211'", "query_toks": ["SELECT", "avg", "(", "T2.stu_gpa", ")", "FROM", "enroll", "AS", "T1", "JOIN", "student", "AS", "T2", "ON", "T1.stu_num", "=", "T2.stu_num", "JOIN", "CLASS", "AS", "T3", "ON", "T1.class_code", "=", "T3.class_code", "WHERE", "T3.crs_code", "=", "'ACCT-211", "'"], "query_toks_no_value": ["select", "avg", "(", "t2", ".", "stu_gpa", ")", "from", "enroll", "as", "t1", "join", "student", "as", "t2", "on", "t1", ".", "stu_num", "=", "t2", ".", "stu_num", "join", "class", "as", "t3", "on", "t1", ".", "class_code", "=", "t3", ".", "class_code", "where", "t3", ".", "crs_code", "=", "value"], "question": "What is the average GPA of students taking ACCT-211?", "question_toks": ["What", "is", "the", "average", "GPA", "of", "students", "taking", "ACCT-211", "?"], "guid": 8383}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What is the number of professors for different school?", "sql": "SELECT COUNT(*) , T1.school_code FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code", "example": {"db_id": "college_1", "query": "SELECT count(*) ,  T1.school_code FROM department AS T1 JOIN professor AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.school_code", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "T1.school_code", "FROM", "department", "AS", "T1", "JOIN", "professor", "AS", "T2", "ON", "T1.dept_code", "=", "T2.dept_code", "GROUP", "BY", "T1.school_code"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "t1", ".", "school_code", "from", "department", "as", "t1", "join", "professor", "as", "t2", "on", "t1", ".", "dept_code", "=", "t2", ".", "dept_code", "group", "by", "t1", ".", "school_code"], "question": "What is the number of professors for different school?", "question_toks": ["What", "is", "the", "number", "of", "professors", "for", "different", "school", "?"], "guid": 8187}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | Find the average fee on a CSU campus in 1996", "sql": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR = 1996", "example": {"db_id": "csu_1", "query": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  1996", "query_toks": ["SELECT", "avg", "(", "campusfee", ")", "FROM", "csu_fees", "WHERE", "YEAR", "=", "1996"], "query_toks_no_value": ["select", "avg", "(", "campusfee", ")", "from", "csu_fees", "where", "year", "=", "value"], "question": "Find the average fee on a CSU campus in 1996", "question_toks": ["Find", "the", "average", "fee", "on", "a", "CSU", "campus", "in", "1996"], "guid": 8259}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Find the total number of students in each department.", "sql": "SELECT count(*) , dept_name FROM student GROUP BY dept_name", "example": {"db_id": "college_2", "query": "SELECT count(*) ,  dept_name FROM student GROUP BY dept_name", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "dept_name", "FROM", "student", "GROUP", "BY", "dept_name"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "dept_name", "from", "student", "group", "by", "dept_name"], "question": "Find the total number of students in each department.", "question_toks": ["Find", "the", "total", "number", "of", "students", "in", "each", "department", "."], "guid": 8107}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What is the department name of the students with lowest gpa belongs to?", "sql": "SELECT T2.dept_name FROM student AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code ORDER BY stu_gpa LIMIT 1", "example": {"db_id": "college_1", "query": "SELECT T2.dept_name FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code ORDER BY stu_gpa LIMIT 1", "query_toks": ["SELECT", "T2.dept_name", "FROM", "student", "AS", "T1", "JOIN", "department", "AS", "T2", "ON", "T1.dept_code", "=", "T2.dept_code", "ORDER", "BY", "stu_gpa", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "dept_name", "from", "student", "as", "t1", "join", "department", "as", "t2", "on", "t1", ".", "dept_code", "=", "t2", ".", "dept_code", "order", "by", "stu_gpa", "limit", "value"], "question": "What is the department name of the students with lowest gpa belongs to?", "question_toks": ["What", "is", "the", "department", "name", "of", "the", "students", "with", "lowest", "gpa", "belongs", "to", "?"], "guid": 8178}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | Find the name of physicians who are in charge of more than one patient.", "sql": "SELECT T1.name FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid HAVING count(*) > 1", "example": {"db_id": "hospital_1", "query": "SELECT T1.name FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid  =  T2.PCP GROUP BY T1.employeeid HAVING count(*)  >  1", "query_toks": ["SELECT", "T1.name", "FROM", "physician", "AS", "T1", "JOIN", "patient", "AS", "T2", "ON", "T1.employeeid", "=", "T2.PCP", "GROUP", "BY", "T1.employeeid", "HAVING", "count", "(", "*", ")", ">", "1"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "physician", "as", "t1", "join", "patient", "as", "t2", "on", "t1", ".", "employeeid", "=", "t2", ".", "pcp", "group", "by", "t1", ".", "employeeid", "having", "count", "(", "*", ")", ">", "value"], "question": "Find the name of physicians who are in charge of more than one patient.", "question_toks": ["Find", "the", "name", "of", "physicians", "who", "are", "in", "charge", "of", "more", "than", "one", "patient", "."], "guid": 8139}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | Find the first names and offices of all professors sorted by alphabetical order of their first name.", "sql": "SELECT T2.emp_fname , T1.prof_office FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num = T2.emp_num ORDER BY T2.emp_fname", "example": {"db_id": "college_1", "query": "SELECT T2.emp_fname ,  T1.prof_office FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num  =  T2.emp_num ORDER BY T2.emp_fname", "query_toks": ["SELECT", "T2.emp_fname", ",", "T1.prof_office", "FROM", "professor", "AS", "T1", "JOIN", "employee", "AS", "T2", "ON", "T1.emp_num", "=", "T2.emp_num", "ORDER", "BY", "T2.emp_fname"], "query_toks_no_value": ["select", "t2", ".", "emp_fname", ",", "t1", ".", "prof_office", "from", "professor", "as", "t1", "join", "employee", "as", "t2", "on", "t1", ".", "emp_num", "=", "t2", ".", "emp_num", "order", "by", "t2", ".", "emp_fname"], "question": "Find the first names and offices of all professors sorted by alphabetical order of their first name.", "question_toks": ["Find", "the", "first", "names", "and", "offices", "of", "all", "professors", "sorted", "by", "alphabetical", "order", "of", "their", "first", "name", "."], "guid": 8401}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | What is the total number of degrees granted after 2000 for each Orange county campus?", "sql": "SELECT T1.campus, SUM(T2.degrees) FROM campuses AS T1 JOIN degrees AS T2 ON T1.id = T2.campus WHERE T1.county = \"Orange\" AND T2.year >= 2000 GROUP BY T1.campus", "example": {"db_id": "csu_1", "query": "SELECT T1.campus ,  sum(T2.degrees) FROM campuses AS T1 JOIN degrees AS T2 ON T1.id  =  T2.campus WHERE T1.county  =  \"Orange\" AND T2.year  >=  2000 GROUP BY T1.campus", "query_toks": ["SELECT", "T1.campus", ",", "sum", "(", "T2.degrees", ")", "FROM", "campuses", "AS", "T1", "JOIN", "degrees", "AS", "T2", "ON", "T1.id", "=", "T2.campus", "WHERE", "T1.county", "=", "``", "Orange", "''", "AND", "T2.year", ">", "=", "2000", "GROUP", "BY", "T1.campus"], "query_toks_no_value": ["select", "t1", ".", "campus", ",", "sum", "(", "t2", ".", "degrees", ")", "from", "campuses", "as", "t1", "join", "degrees", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "campus", "where", "t1", ".", "county", "=", "value", "and", "t2", ".", "year", ">", "=", "value", "group", "by", "t1", ".", "campus"], "question": "What is the total number of degrees granted after 2000 for each Orange county campus?", "question_toks": ["What", "is", "the", "total", "number", "of", "degrees", "granted", "after", "2000", "for", "each", "Orange", "county", "campus", "?"], "guid": 8159}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What is the first name of the professor who is teaching CIS-220 and QM-261?", "sql": "SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num = T2.prof_num WHERE crs_code = 'CIS-220' INTERSECT SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num = T2.prof_num WHERE crs_code = 'QM-261'", "example": {"db_id": "college_1", "query": "SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num  =  T2.prof_num WHERE crs_code  =  'CIS-220' INTERSECT SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num  =  T2.prof_num WHERE crs_code  =  'QM-261'", "query_toks": ["SELECT", "T1.emp_fname", "FROM", "employee", "AS", "T1", "JOIN", "CLASS", "AS", "T2", "ON", "T1.emp_num", "=", "T2.prof_num", "WHERE", "crs_code", "=", "'CIS-220", "'", "INTERSECT", "SELECT", "T1.emp_fname", "FROM", "employee", "AS", "T1", "JOIN", "CLASS", "AS", "T2", "ON", "T1.emp_num", "=", "T2.prof_num", "WHERE", "crs_code", "=", "'QM-261", "'"], "query_toks_no_value": ["select", "t1", ".", "emp_fname", "from", "employee", "as", "t1", "join", "class", "as", "t2", "on", "t1", ".", "emp_num", "=", "t2", ".", "prof_num", "where", "crs_code", "=", "value", "intersect", "select", "t1", ".", "emp_fname", "from", "employee", "as", "t1", "join", "class", "as", "t2", "on", "t1", ".", "emp_num", "=", "t2", ".", "prof_num", "where", "crs_code", "=", "value"], "question": "What is the first name of the professor who is teaching CIS-220 and QM-261?", "question_toks": ["What", "is", "the", "first", "name", "of", "the", "professor", "who", "is", "teaching", "CIS-220", "and", "QM-261", "?"], "guid": 8316}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What is the first name of students who got grade C in any class?", "sql": "SELECT DISTINCT stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num WHERE enroll_grade = 'C'", "example": {"db_id": "college_1", "query": "SELECT DISTINCT stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num WHERE enroll_grade  =  'C'", "query_toks": ["SELECT", "DISTINCT", "stu_fname", "FROM", "student", "AS", "T1", "JOIN", "enroll", "AS", "T2", "ON", "T1.stu_num", "=", "T2.stu_num", "WHERE", "enroll_grade", "=", "'C", "'"], "query_toks_no_value": ["select", "distinct", "stu_fname", "from", "student", "as", "t1", "join", "enroll", "as", "t2", "on", "t1", ".", "stu_num", "=", "t2", ".", "stu_num", "where", "enroll_grade", "=", "value"], "question": "What is the first name of students who got grade C in any class?", "question_toks": ["What", "is", "the", "first", "name", "of", "students", "who", "got", "grade", "C", "in", "any", "class", "?"], "guid": 8372}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | How many courses that do not have prerequisite?", "sql": "SELECT count(*) FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)", "example": {"db_id": "college_2", "query": "SELECT count(*) FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "course", "WHERE", "course_id", "NOT", "IN", "(", "SELECT", "course_id", "FROM", "prereq", ")"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "course", "where", "course_id", "not", "in", "(", "select", "course_id", "from", "prereq", ")"], "question": "How many courses that do not have prerequisite?", "question_toks": ["How", "many", "courses", "that", "do", "not", "have", "prerequisite", "?"], "guid": 8313}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | How many classes exist for each school?", "sql": "SELECT count(*) , T3.school_code FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code = T2.crs_code JOIN department AS T3 ON T2.dept_code = T3.dept_code GROUP BY T3.school_code", "example": {"db_id": "college_1", "query": "SELECT count(*) ,  T3.school_code FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code  =  T2.crs_code JOIN department AS T3 ON T2.dept_code  =  T3.dept_code GROUP BY T3.school_code", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "T3.school_code", "FROM", "CLASS", "AS", "T1", "JOIN", "course", "AS", "T2", "ON", "T1.crs_code", "=", "T2.crs_code", "JOIN", "department", "AS", "T3", "ON", "T2.dept_code", "=", "T3.dept_code", "GROUP", "BY", "T3.school_code"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "t3", ".", "school_code", "from", "class", "as", "t1", "join", "course", "as", "t2", "on", "t1", ".", "crs_code", "=", "t2", ".", "crs_code", "join", "department", "as", "t3", "on", "t2", ".", "dept_code", "=", "t3", ".", "dept_code", "group", "by", "t3", ".", "school_code"], "question": "How many classes exist for each school?", "question_toks": ["How", "many", "classes", "exist", "for", "each", "school", "?"], "guid": 8130}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | What are the full names of faculty members who are a part of department 520?", "sql": "SELECT T1.Fname , T1.Lname FROM FACULTY AS T1 JOIN MEMBER_OF AS T2 ON T1.FacID = T2.FacID WHERE T2.DNO = 520", "example": {"db_id": "college_3", "query": "SELECT T1.Fname ,  T1.Lname FROM FACULTY AS T1 JOIN MEMBER_OF AS T2 ON T1.FacID  =  T2.FacID WHERE T2.DNO  =  520", "query_toks": ["SELECT", "T1.Fname", ",", "T1.Lname", "FROM", "FACULTY", "AS", "T1", "JOIN", "MEMBER_OF", "AS", "T2", "ON", "T1.FacID", "=", "T2.FacID", "WHERE", "T2.DNO", "=", "520"], "query_toks_no_value": ["select", "t1", ".", "fname", ",", "t1", ".", "lname", "from", "faculty", "as", "t1", "join", "member_of", "as", "t2", "on", "t1", ".", "facid", "=", "t2", ".", "facid", "where", "t2", ".", "dno", "=", "value"], "question": "What are the full names of faculty members who are a part of department 520?", "question_toks": ["What", "are", "the", "full", "names", "of", "faculty", "members", "who", "are", "a", "part", "of", "department", "520", "?"], "guid": 8396}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | What is the average fee for a CSU campus in the year of 2005?", "sql": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR = 2005", "example": {"db_id": "csu_1", "query": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  2005", "query_toks": ["SELECT", "avg", "(", "campusfee", ")", "FROM", "csu_fees", "WHERE", "YEAR", "=", "2005"], "query_toks_no_value": ["select", "avg", "(", "campusfee", ")", "from", "csu_fees", "where", "year", "=", "value"], "question": "What is the average fee for a CSU campus in the year of 2005?", "question_toks": ["What", "is", "the", "average", "fee", "for", "a", "CSU", "campus", "in", "the", "year", "of", "2005", "?"], "guid": 8425}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What is the first and last name of the youngest student with a GPA above 3, and what is their GPA?", "sql": "SELECT stu_fname, stu_lname, stu_gpa FROM student WHERE stu_gpa > 3 ORDER BY stu_dob DESC LIMIT 1", "example": {"db_id": "college_1", "query": "SELECT stu_fname ,  stu_lname ,  stu_gpa FROM student WHERE stu_gpa  >  3 ORDER BY stu_dob DESC LIMIT 1", "query_toks": ["SELECT", "stu_fname", ",", "stu_lname", ",", "stu_gpa", "FROM", "student", "WHERE", "stu_gpa", ">", "3", "ORDER", "BY", "stu_dob", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "stu_fname", ",", "stu_lname", ",", "stu_gpa", "from", "student", "where", "stu_gpa", ">", "value", "order", "by", "stu_dob", "desc", "limit", "value"], "question": "What is the first and last name of the youngest student with a GPA above 3, and what is their GPA?", "question_toks": ["What", "is", "the", "first", "and", "last", "name", "of", "the", "youngest", "student", "with", "a", "GPA", "above", "3", ",", "and", "what", "is", "their", "GPA", "?"], "guid": 8349}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | What are the first names of all students that are not enrolled in courses?", "sql": "SELECT fname FROM student WHERE stuid NOT IN (SELECT stuid FROM enrolled_in)", "example": {"db_id": "college_3", "query": "SELECT Fname FROM STUDENT WHERE StuID NOT IN (SELECT StuID FROM ENROLLED_IN)", "query_toks": ["SELECT", "Fname", "FROM", "STUDENT", "WHERE", "StuID", "NOT", "IN", "(", "SELECT", "StuID", "FROM", "ENROLLED_IN", ")"], "query_toks_no_value": ["select", "fname", "from", "student", "where", "stuid", "not", "in", "(", "select", "stuid", "from", "enrolled_in", ")"], "question": "What are the first names of all students that are not enrolled in courses?", "question_toks": ["What", "are", "the", "first", "names", "of", "all", "students", "that", "are", "not", "enrolled", "in", "courses", "?"], "guid": 8205}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What are the first and last names of the employee with the earliest date of birth?", "sql": "SELECT emp_fname, emp_lname FROM employee ORDER BY emp_dob LIMIT 1", "example": {"db_id": "college_1", "query": "SELECT emp_fname ,  emp_lname FROM employee ORDER BY emp_dob LIMIT 1", "query_toks": ["SELECT", "emp_fname", ",", "emp_lname", "FROM", "employee", "ORDER", "BY", "emp_dob", "LIMIT", "1"], "query_toks_no_value": ["select", "emp_fname", ",", "emp_lname", "from", "employee", "order", "by", "emp_dob", "limit", "value"], "question": "What are the first and last names of the employee with the earliest date of birth?", "question_toks": ["What", "are", "the", "first", "and", "last", "names", "of", "the", "employee", "with", "the", "earliest", "date", "of", "birth", "?"], "guid": 8323}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Find the building, room number, semester and year of all courses offered by Psychology department sorted by course titles.", "sql": "SELECT T2.building, T2.room_number, T2.semester, T2.year FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id = T2.course_id WHERE T1.dept_name = 'Psychology' ORDER BY T1.title", "example": {"db_id": "college_2", "query": "SELECT T2.building ,  T2.room_number ,  T2.semester ,  T2.year FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE T1.dept_name  =  'Psychology' ORDER BY T1.title", "query_toks": ["SELECT", "T2.building", ",", "T2.room_number", ",", "T2.semester", ",", "T2.year", "FROM", "course", "AS", "T1", "JOIN", "SECTION", "AS", "T2", "ON", "T1.course_id", "=", "T2.course_id", "WHERE", "T1.dept_name", "=", "'Psychology", "'", "ORDER", "BY", "T1.title"], "query_toks_no_value": ["select", "t2", ".", "building", ",", "t2", ".", "room_number", ",", "t2", ".", "semester", ",", "t2", ".", "year", "from", "course", "as", "t1", "join", "section", "as", "t2", "on", "t1", ".", "course_id", "=", "t2", ".", "course_id", "where", "t1", ".", "dept_name", "=", "value", "order", "by", "t1", ".", "title"], "question": "Find the building, room number, semester and year of all courses offered by Psychology department sorted by course titles.", "question_toks": ["Find", "the", "building", ",", "room", "number", ",", "semester", "and", "year", "of", "all", "courses", "offered", "by", "Psychology", "department", "sorted", "by", "course", "titles", "."], "guid": 8188}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What are the names of all students who took a class and the corresponding course descriptions?", "sql": "SELECT T1.stu_fname , T1.stu_lname , T4.crs_description FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num JOIN class AS T3 ON T2.class_code = T3.class_code JOIN course AS T4 ON T3.crs_code = T4.crs_code", "example": {"db_id": "college_1", "query": "SELECT T1.stu_fname ,  T1.stu_lname ,  T4.crs_description FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code JOIN course AS T4 ON T3.crs_code  =  T4.crs_code", "query_toks": ["SELECT", "T1.stu_fname", ",", "T1.stu_lname", ",", "T4.crs_description", "FROM", "student", "AS", "T1", "JOIN", "enroll", "AS", "T2", "ON", "T1.stu_num", "=", "T2.stu_num", "JOIN", "CLASS", "AS", "T3", "ON", "T2.class_code", "=", "T3.class_code", "JOIN", "course", "AS", "T4", "ON", "T3.crs_code", "=", "T4.crs_code"], "query_toks_no_value": ["select", "t1", ".", "stu_fname", ",", "t1", ".", "stu_lname", ",", "t4", ".", "crs_description", "from", "student", "as", "t1", "join", "enroll", "as", "t2", "on", "t1", ".", "stu_num", "=", "t2", ".", "stu_num", "join", "class", "as", "t3", "on", "t2", ".", "class_code", "=", "t3", ".", "class_code", "join", "course", "as", "t4", "on", "t3", ".", "crs_code", "=", "t4", ".", "crs_code"], "question": "What are the names of all students who took a class and the corresponding course descriptions?", "question_toks": ["What", "are", "the", "names", "of", "all", "students", "who", "took", "a", "class", "and", "the", "corresponding", "course", "descriptions", "?"], "guid": 8364}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | What is the name of the department in the Building Mergenthaler?", "sql": "SELECT DName FROM DEPARTMENT WHERE Building = \"Mergenthaler\"", "example": {"db_id": "college_3", "query": "SELECT DName FROM DEPARTMENT WHERE Building  =  \"Mergenthaler\"", "query_toks": ["SELECT", "DName", "FROM", "DEPARTMENT", "WHERE", "Building", "=", "``", "Mergenthaler", "''"], "query_toks_no_value": ["select", "dname", "from", "department", "where", "building", "=", "value"], "question": "What is the name of the department in the Building Mergenthaler?", "question_toks": ["What", "is", "the", "name", "of", "the", "department", "in", "the", "Building", "Mergenthaler", "?"], "guid": 8213}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Give the name of the lowest earning instructor in the Statistics department.", "sql": "SELECT name FROM instructor WHERE dept_name = 'Statistics' ORDER BY salary LIMIT 1", "example": {"db_id": "college_2", "query": "SELECT name FROM instructor WHERE dept_name  =  'Statistics' ORDER BY salary LIMIT 1", "query_toks": ["SELECT", "name", "FROM", "instructor", "WHERE", "dept_name", "=", "'Statistics", "'", "ORDER", "BY", "salary", "LIMIT", "1"], "query_toks_no_value": ["select", "name", "from", "instructor", "where", "dept_name", "=", "value", "order", "by", "salary", "limit", "value"], "question": "Give the name of the lowest earning instructor in the Statistics department.", "question_toks": ["Give", "the", "name", "of", "the", "lowest", "earning", "instructor", "in", "the", "Statistics", "department", "."], "guid": 8221}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | What is the title of the course that is a prerequisite for Mobile Computing?", "sql": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'Mobile Computing')", "example": {"db_id": "college_2", "query": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'Mobile Computing')", "query_toks": ["SELECT", "title", "FROM", "course", "WHERE", "course_id", "IN", "(", "SELECT", "T1.prereq_id", "FROM", "prereq", "AS", "T1", "JOIN", "course", "AS", "T2", "ON", "T1.course_id", "=", "T2.course_id", "WHERE", "T2.title", "=", "'Mobile", "Computing", "'", ")"], "query_toks_no_value": ["select", "title", "from", "course", "where", "course_id", "in", "(", "select", "t1", ".", "prereq_id", "from", "prereq", "as", "t1", "join", "course", "as", "t2", "on", "t1", ".", "course_id", "=", "t2", ".", "course_id", "where", "t2", ".", "title", "=", "value", ")"], "question": "What is the title of the course that is a prerequisite for Mobile Computing?", "question_toks": ["What", "is", "the", "title", "of", "the", "course", "that", "is", "a", "prerequisite", "for", "Mobile", "Computing", "?"], "guid": 8366}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | Give the maximum and minimum gradepoints for students living in NYC?", "sql": "SELECT max(T2.gradepoint) , min(T2.gradepoint) FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade = T2.lettergrade AND T1.StuID = T3.StuID WHERE T3.city_code = \"NYC\"", "example": {"db_id": "college_3", "query": "SELECT max(T2.gradepoint) ,  min(T2.gradepoint) FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID WHERE T3.city_code  =  \"NYC\"", "query_toks": ["SELECT", "max", "(", "T2.gradepoint", ")", ",", "min", "(", "T2.gradepoint", ")", "FROM", "ENROLLED_IN", "AS", "T1", "JOIN", "GRADECONVERSION", "AS", "T2", "JOIN", "STUDENT", "AS", "T3", "ON", "T1.Grade", "=", "T2.lettergrade", "AND", "T1.StuID", "=", "T3.StuID", "WHERE", "T3.city_code", "=", "``", "NYC", "''"], "query_toks_no_value": ["select", "max", "(", "t2", ".", "gradepoint", ")", ",", "min", "(", "t2", ".", "gradepoint", ")", "from", "enrolled_in", "as", "t1", "join", "gradeconversion", "as", "t2", "join", "student", "as", "t3", "on", "t1", ".", "grade", "=", "t2", ".", "lettergrade", "and", "t1", ".", "stuid", "=", "t3", ".", "stuid", "where", "t3", ".", "city_code", "=", "value"], "question": "Give the maximum and minimum gradepoints for students living in NYC?", "question_toks": ["Give", "the", "maximum", "and", "minimum", "gradepoints", "for", "students", "living", "in", "NYC", "?"], "guid": 8418}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Find the names of the top 3 departments that provide the largest amount of courses?", "sql": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY count(*) DESC LIMIT 3", "example": {"db_id": "college_2", "query": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY count(*) DESC LIMIT 3", "query_toks": ["SELECT", "dept_name", "FROM", "course", "GROUP", "BY", "dept_name", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "3"], "query_toks_no_value": ["select", "dept_name", "from", "course", "group", "by", "dept_name", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Find the names of the top 3 departments that provide the largest amount of courses?", "question_toks": ["Find", "the", "names", "of", "the", "top", "3", "departments", "that", "provide", "the", "largest", "amount", "of", "courses", "?"], "guid": 8219}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What is department name and office for the professor whose last name is Heffington?", "sql": "SELECT T3.dept_name, T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num = T2.emp_num JOIN department AS T3 ON T2.dept_code = T3.dept_code WHERE T1.emp_lname = 'Heffington'", "example": {"db_id": "college_1", "query": "SELECT T3.dept_name  ,  T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T2.dept_code  =  T3.dept_code WHERE T1.emp_lname  =  'Heffington'", "query_toks": ["SELECT", "T3.dept_name", ",", "T2.prof_office", "FROM", "employee", "AS", "T1", "JOIN", "professor", "AS", "T2", "ON", "T1.emp_num", "=", "T2.emp_num", "JOIN", "department", "AS", "T3", "ON", "T2.dept_code", "=", "T3.dept_code", "WHERE", "T1.emp_lname", "=", "'Heffington", "'"], "query_toks_no_value": ["select", "t3", ".", "dept_name", ",", "t2", ".", "prof_office", "from", "employee", "as", "t1", "join", "professor", "as", "t2", "on", "t1", ".", "emp_num", "=", "t2", ".", "emp_num", "join", "department", "as", "t3", "on", "t2", ".", "dept_code", "=", "t3", ".", "dept_code", "where", "t1", ".", "emp_lname", "=", "value"], "question": "What is department name and office for the professor whose last name is Heffington?", "question_toks": ["What", "is", "department", "name", "and", "office", "for", "the", "professor", "whose", "last", "name", "is", "Heffington", "?"], "guid": 8327}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | What is the id of the instructor who advises of all students from History department?", "sql": "SELECT i_id FROM advisor AS T1 JOIN student AS T2 ON T1.s_id = T2.id WHERE T2.dept_name = 'History'", "example": {"db_id": "college_2", "query": "SELECT i_id FROM advisor AS T1 JOIN student AS T2 ON T1.s_id  =  T2.id WHERE T2.dept_name  =  'History'", "query_toks": ["SELECT", "i_id", "FROM", "advisor", "AS", "T1", "JOIN", "student", "AS", "T2", "ON", "T1.s_id", "=", "T2.id", "WHERE", "T2.dept_name", "=", "'History", "'"], "query_toks_no_value": ["select", "i_id", "from", "advisor", "as", "t1", "join", "student", "as", "t2", "on", "t1", ".", "s_id", "=", "t2", ".", "id", "where", "t2", ".", "dept_name", "=", "value"], "question": "What is the id of the instructor who advises of all students from History department?", "question_toks": ["What", "is", "the", "id", "of", "the", "instructor", "who", "advises", "of", "all", "students", "from", "History", "department", "?"], "guid": 8135}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | Return the name of each physician and the number of patients he or she treats.", "sql": "SELECT T1.name , count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid", "example": {"db_id": "hospital_1", "query": "SELECT T1.name ,  count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid  =  T2.PCP GROUP BY T1.employeeid", "query_toks": ["SELECT", "T1.name", ",", "count", "(", "*", ")", "FROM", "physician", "AS", "T1", "JOIN", "patient", "AS", "T2", "ON", "T1.employeeid", "=", "T2.PCP", "GROUP", "BY", "T1.employeeid"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "count", "(", "*", ")", "from", "physician", "as", "t1", "join", "patient", "as", "t2", "on", "t1", ".", "employeeid", "=", "t2", ".", "pcp", "group", "by", "t1", ".", "employeeid"], "question": "Return the name of each physician and the number of patients he or she treats.", "question_toks": ["Return", "the", "name", "of", "each", "physician", "and", "the", "number", "of", "patients", "he", "or", "she", "treats", "."], "guid": 8232}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | Count the number of patients who stayed in room 112.", "sql": "SELECT COUNT(patient) FROM stay WHERE room = 112", "example": {"db_id": "hospital_1", "query": "SELECT count(patient) FROM stay WHERE room  =  112", "query_toks": ["SELECT", "count", "(", "patient", ")", "FROM", "stay", "WHERE", "room", "=", "112"], "query_toks_no_value": ["select", "count", "(", "patient", ")", "from", "stay", "where", "room", "=", "value"], "question": "Count the number of patients who stayed in room 112.", "question_toks": ["Count", "the", "number", "of", "patients", "who", "stayed", "in", "room", "112", "."], "guid": 8415}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | How many patients are not using Procrastin-X as medication?", "sql": "SELECT COUNT(*) FROM patient WHERE SSN NOT IN (SELECT T1.patient FROM Prescribes AS T1 JOIN Medication AS T2 ON T1.Medication = T2.Code WHERE T2.name = 'Procrastin-X')", "example": {"db_id": "hospital_1", "query": "SELECT count(*) FROM patient WHERE SSN NOT IN ( SELECT T1.patient FROM Prescribes AS T1 JOIN Medication AS T2 ON T1.Medication  =  T2.Code WHERE T2.name  =  'Procrastin-X' )", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "patient", "WHERE", "SSN", "NOT", "IN", "(", "SELECT", "T1.patient", "FROM", "Prescribes", "AS", "T1", "JOIN", "Medication", "AS", "T2", "ON", "T1.Medication", "=", "T2.Code", "WHERE", "T2.name", "=", "'Procrastin-X", "'", ")"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "patient", "where", "ssn", "not", "in", "(", "select", "t1", ".", "patient", "from", "prescribes", "as", "t1", "join", "medication", "as", "t2", "on", "t1", ".", "medication", "=", "t2", ".", "code", "where", "t2", ".", "name", "=", "value", ")"], "question": "How many patients are not using Procrastin-X as medication?", "question_toks": ["How", "many", "patients", "are", "not", "using", "Procrastin-X", "as", "medication", "?"], "guid": 8125}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | What are the ids of courses offered in Fall of 2009 but not in Spring of 2010?", "sql": "SELECT course_id FROM SECTION WHERE semester = 'Fall' AND year = 2009 EXCEPT SELECT course_id FROM SECTION WHERE semester = 'Spring' AND year = 2010", "example": {"db_id": "college_2", "query": "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 EXCEPT SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010", "query_toks": ["SELECT", "course_id", "FROM", "SECTION", "WHERE", "semester", "=", "'Fall", "'", "AND", "YEAR", "=", "2009", "EXCEPT", "SELECT", "course_id", "FROM", "SECTION", "WHERE", "semester", "=", "'Spring", "'", "AND", "YEAR", "=", "2010"], "query_toks_no_value": ["select", "course_id", "from", "section", "where", "semester", "=", "value", "and", "year", "=", "value", "except", "select", "course_id", "from", "section", "where", "semester", "=", "value", "and", "year", "=", "value"], "question": "What are the ids of courses offered in Fall of 2009 but not in Spring of 2010?", "question_toks": ["What", "are", "the", "ids", "of", "courses", "offered", "in", "Fall", "of", "2009", "but", "not", "in", "Spring", "of", "2010", "?"], "guid": 8294}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | What is the title and credits of the course that is taught in the largest classroom (with the highest capacity)?", "sql": "SELECT T3.title, T3.credits FROM classroom AS T1 JOIN section AS T2 ON T1.building = T2.building AND T1.room_number = T2.room_number JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T1.capacity = (SELECT MAX(capacity) FROM classroom)", "example": {"db_id": "college_2", "query": "SELECT T3.title ,  T3.credits FROM classroom AS T1 JOIN SECTION AS T2 ON T1.building  =  T2.building AND T1.room_number  =  T2.room_number JOIN course AS T3 ON T2.course_id  =  T3.course_id WHERE T1.capacity  =  (SELECT max(capacity) FROM classroom)", "query_toks": ["SELECT", "T3.title", ",", "T3.credits", "FROM", "classroom", "AS", "T1", "JOIN", "SECTION", "AS", "T2", "ON", "T1.building", "=", "T2.building", "AND", "T1.room_number", "=", "T2.room_number", "JOIN", "course", "AS", "T3", "ON", "T2.course_id", "=", "T3.course_id", "WHERE", "T1.capacity", "=", "(", "SELECT", "max", "(", "capacity", ")", "FROM", "classroom", ")"], "query_toks_no_value": ["select", "t3", ".", "title", ",", "t3", ".", "credits", "from", "classroom", "as", "t1", "join", "section", "as", "t2", "on", "t1", ".", "building", "=", "t2", ".", "building", "and", "t1", ".", "room_number", "=", "t2", ".", "room_number", "join", "course", "as", "t3", "on", "t2", ".", "course_id", "=", "t3", ".", "course_id", "where", "t1", ".", "capacity", "=", "(", "select", "max", "(", "capacity", ")", "from", "classroom", ")"], "question": "What is the title and credits of the course that is taught in the largest classroom (with the highest capacity)?", "question_toks": ["What", "is", "the", "title", "and", "credits", "of", "the", "course", "that", "is", "taught", "in", "the", "largest", "classroom", "(", "with", "the", "highest", "capacity", ")", "?"], "guid": 8350}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Give the title of the course offered in Chandler during the Fall of 2010.", "sql": "SELECT T1.title FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE building  =  'Chandler' AND semester  =  'Fall' AND YEAR  =  2010", "example": {"db_id": "college_2", "query": "SELECT T1.title FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE building  =  'Chandler' AND semester  =  'Fall' AND YEAR  =  2010", "query_toks": ["SELECT", "T1.title", "FROM", "course", "AS", "T1", "JOIN", "SECTION", "AS", "T2", "ON", "T1.course_id", "=", "T2.course_id", "WHERE", "building", "=", "'Chandler", "'", "AND", "semester", "=", "'Fall", "'", "AND", "YEAR", "=", "2010"], "query_toks_no_value": ["select", "t1", ".", "title", "from", "course", "as", "t1", "join", "section", "as", "t2", "on", "t1", ".", "course_id", "=", "t2", ".", "course_id", "where", "building", "=", "value", "and", "semester", "=", "value", "and", "year", "=", "value"], "question": "Give the title of the course offered in Chandler during the Fall of 2010.", "question_toks": ["Give", "the", "title", "of", "the", "course", "offered", "in", "Chandler", "during", "the", "Fall", "of", "2010", "."], "guid": 8280}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Find the title of course that is provided by both Statistics and Psychology departments.", "sql": "SELECT title FROM course WHERE dept_name  =  'Statistics' INTERSECT SELECT title FROM course WHERE dept_name  =  'Psychology'", "example": {"db_id": "college_2", "query": "SELECT title FROM course WHERE dept_name  =  'Statistics' INTERSECT SELECT title FROM course WHERE dept_name  =  'Psychology'", "query_toks": ["SELECT", "title", "FROM", "course", "WHERE", "dept_name", "=", "'Statistics", "'", "INTERSECT", "SELECT", "title", "FROM", "course", "WHERE", "dept_name", "=", "'Psychology", "'"], "query_toks_no_value": ["select", "title", "from", "course", "where", "dept_name", "=", "value", "intersect", "select", "title", "from", "course", "where", "dept_name", "=", "value"], "question": "Find the title of course that is provided by both Statistics and Psychology departments.", "question_toks": ["Find", "the", "title", "of", "course", "that", "is", "provided", "by", "both", "Statistics", "and", "Psychology", "departments", "."], "guid": 8391}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | What are the names of departments that have primarily affiliated physicians.", "sql": "SELECT DISTINCT T2.name FROM affiliated_with AS T1 JOIN department AS T2 ON T1.department = T2.departmentid WHERE PrimaryAffiliation = 1", "example": {"db_id": "hospital_1", "query": "SELECT DISTINCT T2.name FROM affiliated_with AS T1 JOIN department AS T2 ON T1.department = T2.departmentid WHERE PrimaryAffiliation  =  1", "query_toks": ["SELECT", "DISTINCT", "T2.name", "FROM", "affiliated_with", "AS", "T1", "JOIN", "department", "AS", "T2", "ON", "T1.department", "=", "T2.departmentid", "WHERE", "PrimaryAffiliation", "=", "1"], "query_toks_no_value": ["select", "distinct", "t2", ".", "name", "from", "affiliated_with", "as", "t1", "join", "department", "as", "t2", "on", "t1", ".", "department", "=", "t2", ".", "departmentid", "where", "primaryaffiliation", "=", "value"], "question": "What are the names of departments that have primarily affiliated physicians.", "question_toks": ["What", "are", "the", "names", "of", "departments", "that", "have", "primarily", "affiliated", "physicians", "."], "guid": 8206}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | Count different addresses of each school.", "sql": "SELECT count(DISTINCT dept_address) , school_code FROM department GROUP BY school_code", "example": {"db_id": "college_1", "query": "SELECT count(DISTINCT dept_address) ,  school_code FROM department GROUP BY school_code", "query_toks": ["SELECT", "count", "(", "DISTINCT", "dept_address", ")", ",", "school_code", "FROM", "department", "GROUP", "BY", "school_code"], "query_toks_no_value": ["select", "count", "(", "distinct", "dept_address", ")", ",", "school_code", "from", "department", "group", "by", "school_code"], "question": "Count different addresses of each school.", "question_toks": ["Count", "different", "addresses", "of", "each", "school", "."], "guid": 8385}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | What campus started in year 1956, has more than 200 full time students, and more than 400 students enrolled?", "sql": "SELECT t1.campus FROM campuses AS t1 JOIN enrollments AS t2 ON t1.id = t2.campus WHERE t2.year = 1956 AND totalenrollment_ay > 400 AND FTE_AY > 200", "example": {"db_id": "csu_1", "query": "SELECT T1.campus FROM campuses AS t1 JOIN enrollments AS t2 ON t1.id  =  t2.campus WHERE t2.year  =  1956 AND totalenrollment_ay  >  400 AND FTE_AY  >  200", "query_toks": ["SELECT", "T1.campus", "FROM", "campuses", "AS", "t1", "JOIN", "enrollments", "AS", "t2", "ON", "t1.id", "=", "t2.campus", "WHERE", "t2.year", "=", "1956", "AND", "totalenrollment_ay", ">", "400", "AND", "FTE_AY", ">", "200"], "query_toks_no_value": ["select", "t1", ".", "campus", "from", "campuses", "as", "t1", "join", "enrollments", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "campus", "where", "t2", ".", "year", "=", "value", "and", "totalenrollment_ay", ">", "value", "and", "fte_ay", ">", "value"], "question": "What campus started in year 1956, has more than 200 full time students, and more than 400 students enrolled?", "question_toks": ["What", "campus", "started", "in", "year", "1956", ",", "has", "more", "than", "200", "full", "time", "students", ",", "and", "more", "than", "400", "students", "enrolled", "?"], "guid": 8217}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | Find the names of nurses who are on call.", "sql": "SELECT DISTINCT T1.name FROM nurse AS T1 JOIN on_call AS T2 ON T1.EmployeeID = T2.nurse", "example": {"db_id": "hospital_1", "query": "SELECT DISTINCT T1.name FROM nurse AS T1 JOIN on_call AS T2 ON T1.EmployeeID  =  T2.nurse", "query_toks": ["SELECT", "DISTINCT", "T1.name", "FROM", "nurse", "AS", "T1", "JOIN", "on_call", "AS", "T2", "ON", "T1.EmployeeID", "=", "T2.nurse"], "query_toks_no_value": ["select", "distinct", "t1", ".", "name", "from", "nurse", "as", "t1", "join", "on_call", "as", "t2", "on", "t1", ".", "employeeid", "=", "t2", ".", "nurse"], "question": "Find the names of nurses who are on call.", "question_toks": ["Find", "the", "names", "of", "nurses", "who", "are", "on", "call", "."], "guid": 8210}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | Find the name of physicians whose position title contains the word 'senior'.", "sql": "SELECT name FROM physician WHERE POSITION LIKE '%senior%'", "example": {"db_id": "hospital_1", "query": "SELECT name FROM physician WHERE POSITION LIKE '%senior%'", "query_toks": ["SELECT", "name", "FROM", "physician", "WHERE", "POSITION", "LIKE", "'", "%", "senior", "%", "'"], "query_toks_no_value": ["select", "name", "from", "physician", "where", "position", "like", "value"], "question": "Find the name of physicians whose position title contains the word 'senior'.", "question_toks": ["Find", "the", "name", "of", "physicians", "whose", "position", "title", "contains", "the", "word", "'senior", "'", "."], "guid": 8215}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | Find the first name and office of history professor who did not get a Ph.D. degree.", "sql": "SELECT T2.emp_fname , T1.prof_office FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num = T2.emp_num JOIN department AS T3 ON T1.dept_code = T3.dept_code WHERE T3.dept_name = 'History' AND T1.prof_high_degree != 'Ph.D.'", "example": {"db_id": "college_1", "query": "SELECT T2.emp_fname ,  T1.prof_office FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T1.dept_code  =  T3.dept_code WHERE T3.dept_name  =  'History' AND T1.prof_high_degree != 'Ph.D.'", "query_toks": ["SELECT", "T2.emp_fname", ",", "T1.prof_office", "FROM", "professor", "AS", "T1", "JOIN", "employee", "AS", "T2", "ON", "T1.emp_num", "=", "T2.emp_num", "JOIN", "department", "AS", "T3", "ON", "T1.dept_code", "=", "T3.dept_code", "WHERE", "T3.dept_name", "=", "'History", "'", "AND", "T1.prof_high_degree", "!", "=", "'Ph.D", ".", "'"], "query_toks_no_value": ["select", "t2", ".", "emp_fname", ",", "t1", ".", "prof_office", "from", "professor", "as", "t1", "join", "employee", "as", "t2", "on", "t1", ".", "emp_num", "=", "t2", ".", "emp_num", "join", "department", "as", "t3", "on", "t1", ".", "dept_code", "=", "t3", ".", "dept_code", "where", "t3", ".", "dept_name", "=", "value", "and", "t1", ".", "prof_high_degree", "!", "=", "value"], "question": "Find the first name and office of history professor who did not get a Ph.D. degree.", "question_toks": ["Find", "the", "first", "name", "and", "office", "of", "history", "professor", "who", "did", "not", "get", "a", "Ph.D.", "degree", "."], "guid": 8140}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | Which physicians prescribe a medication of brand X? Tell me the name and position of those physicians.", "sql": "SELECT DISTINCT T1.name, T1.position FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician JOIN medication AS T3 ON T3.code = T2.medication WHERE T3.Brand = \"X\"", "example": {"db_id": "hospital_1", "query": "SELECT DISTINCT T1.name ,  T1.position FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician JOIN medication AS T3 ON T3.code = T2.medication WHERE T3.Brand  =  \"X\"", "query_toks": ["SELECT", "DISTINCT", "T1.name", ",", "T1.position", "FROM", "physician", "AS", "T1", "JOIN", "prescribes", "AS", "T2", "ON", "T1.employeeid", "=", "T2.physician", "JOIN", "medication", "AS", "T3", "ON", "T3.code", "=", "T2.medication", "WHERE", "T3.Brand", "=", "``", "X", "''"], "query_toks_no_value": ["select", "distinct", "t1", ".", "name", ",", "t1", ".", "position", "from", "physician", "as", "t1", "join", "prescribes", "as", "t2", "on", "t1", ".", "employeeid", "=", "t2", ".", "physician", "join", "medication", "as", "t3", "on", "t3", ".", "code", "=", "t2", ".", "medication", "where", "t3", ".", "brand", "=", "value"], "question": "Which physicians prescribe a medication of brand X? Tell me the name and position of those physicians.", "question_toks": ["Which", "physicians", "prescribe", "a", "medication", "of", "brand", "X", "?", "Tell", "me", "the", "name", "and", "position", "of", "those", "physicians", "."], "guid": 8211}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | How many students and instructors are in each department?", "sql": "SELECT count(DISTINCT T2.id) , count(DISTINCT T3.id) , T3.dept_name FROM department AS T1 JOIN student AS T2 ON T1.dept_name = T2.dept_name JOIN instructor AS T3 ON T1.dept_name = T3.dept_name GROUP BY T3.dept_name", "example": {"db_id": "college_2", "query": "SELECT count(DISTINCT T2.id) ,  count(DISTINCT T3.id) ,  T3.dept_name FROM department AS T1 JOIN student AS T2 ON T1.dept_name  =  T2.dept_name JOIN instructor AS T3 ON T1.dept_name  =  T3.dept_name GROUP BY T3.dept_name", "query_toks": ["SELECT", "count", "(", "DISTINCT", "T2.id", ")", ",", "count", "(", "DISTINCT", "T3.id", ")", ",", "T3.dept_name", "FROM", "department", "AS", "T1", "JOIN", "student", "AS", "T2", "ON", "T1.dept_name", "=", "T2.dept_name", "JOIN", "instructor", "AS", "T3", "ON", "T1.dept_name", "=", "T3.dept_name", "GROUP", "BY", "T3.dept_name"], "query_toks_no_value": ["select", "count", "(", "distinct", "t2", ".", "id", ")", ",", "count", "(", "distinct", "t3", ".", "id", ")", ",", "t3", ".", "dept_name", "from", "department", "as", "t1", "join", "student", "as", "t2", "on", "t1", ".", "dept_name", "=", "t2", ".", "dept_name", "join", "instructor", "as", "t3", "on", "t1", ".", "dept_name", "=", "t3", ".", "dept_name", "group", "by", "t3", ".", "dept_name"], "question": "How many students and instructors are in each department?", "question_toks": ["How", "many", "students", "and", "instructors", "are", "in", "each", "department", "?"], "guid": 8220}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What are the first names and birthdates of the professors in charge of ACCT-211?", "sql": "SELECT DISTINCT T1.EMP_FNAME , T1.EMP_DOB FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM = T2.PROF_NUM WHERE CRS_CODE = \"ACCT-211\"", "example": {"db_id": "college_1", "query": "SELECT DISTINCT T1.EMP_FNAME ,  T1.EMP_DOB FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM  =  T2.PROF_NUM WHERE CRS_CODE  =  \"ACCT-211\"", "query_toks": ["SELECT", "DISTINCT", "T1.EMP_FNAME", ",", "T1.EMP_DOB", "FROM", "employee", "AS", "T1", "JOIN", "CLASS", "AS", "T2", "ON", "T1.EMP_NUM", "=", "T2.PROF_NUM", "WHERE", "CRS_CODE", "=", "``", "ACCT-211", "''"], "query_toks_no_value": ["select", "distinct", "t1", ".", "emp_fname", ",", "t1", ".", "emp_dob", "from", "employee", "as", "t1", "join", "class", "as", "t2", "on", "t1", ".", "emp_num", "=", "t2", ".", "prof_num", "where", "crs_code", "=", "value"], "question": "What are the first names and birthdates of the professors in charge of ACCT-211?", "question_toks": ["What", "are", "the", "first", "names", "and", "birthdates", "of", "the", "professors", "in", "charge", "of", "ACCT-211", "?"], "guid": 8115}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | what is the address of history department?", "sql": "SELECT dept_address FROM department WHERE dept_name = 'History'", "example": {"db_id": "college_1", "query": "SELECT dept_address FROM department WHERE dept_name  =  'History'", "query_toks": ["SELECT", "dept_address", "FROM", "department", "WHERE", "dept_name", "=", "'History", "'"], "query_toks_no_value": ["select", "dept_address", "from", "department", "where", "dept_name", "=", "value"], "question": "what is the address of history department?", "question_toks": ["what", "is", "the", "address", "of", "history", "department", "?"], "guid": 8272}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | How many courses are provided in each semester and year?", "sql": "SELECT count(*) , semester , YEAR FROM SECTION GROUP BY semester , YEAR", "example": {"db_id": "college_2", "query": "SELECT count(*) ,  semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "semester", ",", "YEAR", "FROM", "SECTION", "GROUP", "BY", "semester", ",", "YEAR"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "semester", ",", "year", "from", "section", "group", "by", "semester", ",", "year"], "question": "How many courses are provided in each semester and year?", "question_toks": ["How", "many", "courses", "are", "provided", "in", "each", "semester", "and", "year", "?"], "guid": 8256}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | How many different types of rooms are there?", "sql": "SELECT COUNT(DISTINCT roomtype) FROM room", "example": {"db_id": "hospital_1", "query": "SELECT count(DISTINCT roomtype) FROM room", "query_toks": ["SELECT", "count", "(", "DISTINCT", "roomtype", ")", "FROM", "room"], "query_toks_no_value": ["select", "count", "(", "distinct", "roomtype", ")", "from", "room"], "question": "How many different types of rooms are there?", "question_toks": ["How", "many", "different", "types", "of", "rooms", "are", "there", "?"], "guid": 8189}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | Find the physician who was trained in the most expensive procedure?", "sql": "SELECT T1.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid = T2.physician JOIN procedures AS T3 ON T3.code = T2.treatment ORDER BY T3.cost DESC LIMIT 1", "example": {"db_id": "hospital_1", "query": "SELECT T1.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment ORDER BY T3.cost DESC LIMIT 1", "query_toks": ["SELECT", "T1.name", "FROM", "physician", "AS", "T1", "JOIN", "trained_in", "AS", "T2", "ON", "T1.employeeid", "=", "T2.physician", "JOIN", "procedures", "AS", "T3", "ON", "T3.code", "=", "T2.treatment", "ORDER", "BY", "T3.cost", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "physician", "as", "t1", "join", "trained_in", "as", "t2", "on", "t1", ".", "employeeid", "=", "t2", ".", "physician", "join", "procedures", "as", "t3", "on", "t3", ".", "code", "=", "t2", ".", "treatment", "order", "by", "t3", ".", "cost", "desc", "limit", "value"], "question": "Find the physician who was trained in the most expensive procedure?", "question_toks": ["Find", "the", "physician", "who", "was", "trained", "in", "the", "most", "expensive", "procedure", "?"], "guid": 8194}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | List the names of patients who have made appointments.", "sql": "SELECT name FROM appointment AS T1 JOIN patient AS T2 ON T1.patient = T2.ssn", "example": {"db_id": "hospital_1", "query": "SELECT name FROM appointment AS T1 JOIN patient AS T2 ON T1.patient  =  T2.ssn", "query_toks": ["SELECT", "name", "FROM", "appointment", "AS", "T1", "JOIN", "patient", "AS", "T2", "ON", "T1.patient", "=", "T2.ssn"], "query_toks_no_value": ["select", "name", "from", "appointment", "as", "t1", "join", "patient", "as", "t2", "on", "t1", ".", "patient", "=", "t2", ".", "ssn"], "question": "List the names of patients who have made appointments.", "question_toks": ["List", "the", "names", "of", "patients", "who", "have", "made", "appointments", "."], "guid": 8155}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | What campuses are located in Chico?", "sql": "SELECT campus FROM campuses WHERE LOCATION = \"Chico\"", "example": {"db_id": "csu_1", "query": "SELECT campus FROM campuses WHERE LOCATION  =  \"Chico\"", "query_toks": ["SELECT", "campus", "FROM", "campuses", "WHERE", "LOCATION", "=", "``", "Chico", "''"], "query_toks_no_value": ["select", "campus", "from", "campuses", "where", "location", "=", "value"], "question": "What campuses are located in Chico?", "question_toks": ["What", "campuses", "are", "located", "in", "Chico", "?"], "guid": 8279}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | List the name of physicians who never took any appointment.", "sql": "SELECT name FROM physician EXCEPT SELECT T2.name FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician = T2.EmployeeID", "example": {"db_id": "hospital_1", "query": "SELECT name FROM physician EXCEPT SELECT T2.name FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician  =  T2.EmployeeID", "query_toks": ["SELECT", "name", "FROM", "physician", "EXCEPT", "SELECT", "T2.name", "FROM", "appointment", "AS", "T1", "JOIN", "physician", "AS", "T2", "ON", "T1.Physician", "=", "T2.EmployeeID"], "query_toks_no_value": ["select", "name", "from", "physician", "except", "select", "t2", ".", "name", "from", "appointment", "as", "t1", "join", "physician", "as", "t2", "on", "t1", ".", "physician", "=", "t2", ".", "employeeid"], "question": "List the name of physicians who never took any appointment.", "question_toks": ["List", "the", "name", "of", "physicians", "who", "never", "took", "any", "appointment", "."], "guid": 8151}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | How many rooms are located for each block code?", "sql": "SELECT count(*) , T1.blockcode FROM BLOCK AS T1 JOIN room AS T2 ON T1.blockfloor = T2.blockfloor AND T1.blockcode = T2.blockcode GROUP BY T1.blockcode", "example": {"db_id": "hospital_1", "query": "SELECT count(*) ,  T1.blockcode FROM BLOCK AS T1 JOIN room AS T2 ON T1.blockfloor  =  T2.blockfloor AND T1.blockcode  =  T2.blockcode GROUP BY T1.blockcode", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "T1.blockcode", "FROM", "BLOCK", "AS", "T1", "JOIN", "room", "AS", "T2", "ON", "T1.blockfloor", "=", "T2.blockfloor", "AND", "T1.blockcode", "=", "T2.blockcode", "GROUP", "BY", "T1.blockcode"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "t1", ".", "blockcode", "from", "block", "as", "t1", "join", "room", "as", "t2", "on", "t1", ".", "blockfloor", "=", "t2", ".", "blockfloor", "and", "t1", ".", "blockcode", "=", "t2", ".", "blockcode", "group", "by", "t1", ".", "blockcode"], "question": "How many rooms are located for each block code?", "question_toks": ["How", "many", "rooms", "are", "located", "for", "each", "block", "code", "?"], "guid": 8132}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | How many faculty lines are there in \"San Francisco State University\" in year 2004?", "sql": "SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus = T2.id WHERE T1.year = 2004 AND T2.campus = \"San Francisco State University\"", "example": {"db_id": "csu_1", "query": "SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  2004 AND T2.campus  =  \"San Francisco State University\"", "query_toks": ["SELECT", "faculty", "FROM", "faculty", "AS", "T1", "JOIN", "campuses", "AS", "T2", "ON", "T1.campus", "=", "T2.id", "WHERE", "T1.year", "=", "2004", "AND", "T2.campus", "=", "``", "San", "Francisco", "State", "University", "''"], "query_toks_no_value": ["select", "faculty", "from", "faculty", "as", "t1", "join", "campuses", "as", "t2", "on", "t1", ".", "campus", "=", "t2", ".", "id", "where", "t1", ".", "year", "=", "value", "and", "t2", ".", "campus", "=", "value"], "question": "How many faculty lines are there in \"San Francisco State University\" in year 2004?", "question_toks": ["How", "many", "faculty", "lines", "are", "there", "in", "``", "San", "Francisco", "State", "University", "''", "in", "year", "2004", "?"], "guid": 8384}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Find the name of instructor who is the advisor of the student who has the highest number of total credits.", "sql": "SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id = T2.id JOIN student AS T3 ON T1.s_id = T3.id ORDER BY T3.tot_cred DESC LIMIT 1", "example": {"db_id": "college_2", "query": "SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id ORDER BY T3.tot_cred DESC LIMIT 1", "query_toks": ["SELECT", "T2.name", "FROM", "advisor", "AS", "T1", "JOIN", "instructor", "AS", "T2", "ON", "T1.i_id", "=", "T2.id", "JOIN", "student", "AS", "T3", "ON", "T1.s_id", "=", "T3.id", "ORDER", "BY", "T3.tot_cred", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "advisor", "as", "t1", "join", "instructor", "as", "t2", "on", "t1", ".", "i_id", "=", "t2", ".", "id", "join", "student", "as", "t3", "on", "t1", ".", "s_id", "=", "t3", ".", "id", "order", "by", "t3", ".", "tot_cred", "desc", "limit", "value"], "question": "Find the name of instructor who is the advisor of the student who has the highest number of total credits.", "question_toks": ["Find", "the", "name", "of", "instructor", "who", "is", "the", "advisor", "of", "the", "student", "who", "has", "the", "highest", "number", "of", "total", "credits", "."], "guid": 8163}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What are the total number of students enrolled in ACCT-211?", "sql": "SELECT COUNT(*) FROM enroll AS T1 JOIN class AS T2 ON T1.class_code = T2.class_code WHERE T2.crs_code = 'ACCT-211'", "example": {"db_id": "college_1", "query": "SELECT count(*) FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code WHERE T1.crs_code  =  'ACCT-211'", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "CLASS", "AS", "T1", "JOIN", "enroll", "AS", "T2", "ON", "T1.class_code", "=", "T2.class_code", "WHERE", "T1.crs_code", "=", "'ACCT-211", "'"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "class", "as", "t1", "join", "enroll", "as", "t2", "on", "t1", ".", "class_code", "=", "t2", ".", "class_code", "where", "t1", ".", "crs_code", "=", "value"], "question": "What are the total number of students enrolled in ACCT-211?", "question_toks": ["What", "are", "the", "total", "number", "of", "students", "enrolled", "in", "ACCT-211", "?"], "guid": 8312}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | How many courses are offered by the Computer Info. Systems department?", "sql": "SELECT COUNT(*) FROM department AS T1 JOIN course AS T2 ON T1.dept_code = T2.dept_code WHERE dept_name = \"Computer Info. Systems\"", "example": {"db_id": "college_1", "query": "SELECT count(*) FROM department AS T1 JOIN course AS T2 ON T1.dept_code  =  T2.dept_code WHERE dept_name  =  \"Computer Info. Systems\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "department", "AS", "T1", "JOIN", "course", "AS", "T2", "ON", "T1.dept_code", "=", "T2.dept_code", "WHERE", "dept_name", "=", "``", "Computer", "Info", ".", "Systems", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "department", "as", "t1", "join", "course", "as", "t2", "on", "t1", ".", "dept_code", "=", "t2", ".", "dept_code", "where", "dept_name", "=", "value"], "question": "How many courses are offered by the Computer Info. Systems department?", "question_toks": ["How", "many", "courses", "are", "offered", "by", "the", "Computer", "Info", ".", "Systems", "department", "?"], "guid": 8417}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | Find the name and address of the department that has the highest number of students.", "sql": "SELECT T2.dept_name, T2.dept_address FROM student AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "college_1", "query": "SELECT T2.dept_name ,  T2.dept_address FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T2.dept_name", ",", "T2.dept_address", "FROM", "student", "AS", "T1", "JOIN", "department", "AS", "T2", "ON", "T1.dept_code", "=", "T2.dept_code", "GROUP", "BY", "T1.dept_code", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "dept_name", ",", "t2", ".", "dept_address", "from", "student", "as", "t1", "join", "department", "as", "t2", "on", "t1", ".", "dept_code", "=", "t2", ".", "dept_code", "group", "by", "t1", ".", "dept_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Find the name and address of the department that has the highest number of students.", "question_toks": ["Find", "the", "name", "and", "address", "of", "the", "department", "that", "has", "the", "highest", "number", "of", "students", "."], "guid": 8223}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What are the first names and offices of history professors who don't have Ph.D.s?", "sql": "SELECT T2.emp_fname , T1.prof_office FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num = T2.emp_num JOIN department AS T3 ON T1.dept_code = T3.dept_code WHERE T3.dept_name = 'History' AND T1.prof_high_degree != 'Ph.D.'", "example": {"db_id": "college_1", "query": "SELECT T2.emp_fname ,  T1.prof_office FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T1.dept_code  =  T3.dept_code WHERE T3.dept_name  =  'History' AND T1.prof_high_degree != 'Ph.D.'", "query_toks": ["SELECT", "T2.emp_fname", ",", "T1.prof_office", "FROM", "professor", "AS", "T1", "JOIN", "employee", "AS", "T2", "ON", "T1.emp_num", "=", "T2.emp_num", "JOIN", "department", "AS", "T3", "ON", "T1.dept_code", "=", "T3.dept_code", "WHERE", "T3.dept_name", "=", "'History", "'", "AND", "T1.prof_high_degree", "!", "=", "'Ph.D", ".", "'"], "query_toks_no_value": ["select", "t2", ".", "emp_fname", ",", "t1", ".", "prof_office", "from", "professor", "as", "t1", "join", "employee", "as", "t2", "on", "t1", ".", "emp_num", "=", "t2", ".", "emp_num", "join", "department", "as", "t3", "on", "t1", ".", "dept_code", "=", "t3", ".", "dept_code", "where", "t3", ".", "dept_name", "=", "value", "and", "t1", ".", "prof_high_degree", "!", "=", "value"], "question": "What are the first names and offices of history professors who don't have Ph.D.s?", "question_toks": ["What", "are", "the", "first", "names", "and", "offices", "of", "history", "professors", "who", "do", "n't", "have", "Ph.D.s", "?"], "guid": 8411}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What is the code of the course which the student whose last name is Smithson took?", "sql": "SELECT T1.crs_code FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code = T2.class_code JOIN student AS T3 ON T3.stu_num = T2.stu_num WHERE T3.stu_lname = 'Smithson'", "example": {"db_id": "college_1", "query": "SELECT T1.crs_code FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T3.stu_num  =  T2.stu_num WHERE T3.stu_lname  =  'Smithson'", "query_toks": ["SELECT", "T1.crs_code", "FROM", "CLASS", "AS", "T1", "JOIN", "enroll", "AS", "T2", "ON", "T1.class_code", "=", "T2.class_code", "JOIN", "student", "AS", "T3", "ON", "T3.stu_num", "=", "T2.stu_num", "WHERE", "T3.stu_lname", "=", "'Smithson", "'"], "query_toks_no_value": ["select", "t1", ".", "crs_code", "from", "class", "as", "t1", "join", "enroll", "as", "t2", "on", "t1", ".", "class_code", "=", "t2", ".", "class_code", "join", "student", "as", "t3", "on", "t3", ".", "stu_num", "=", "t2", ".", "stu_num", "where", "t3", ".", "stu_lname", "=", "value"], "question": "What is the code of the course which the student whose last name is Smithson took?", "question_toks": ["What", "is", "the", "code", "of", "the", "course", "which", "the", "student", "whose", "last", "name", "is", "Smithson", "took", "?"], "guid": 8153}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | What degrees were conferred in San Francisco State University in the year 2001?", "sql": "SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id = t2.campus WHERE t1.campus = \"San Francisco State University\" AND t2.year = 2001", "example": {"db_id": "csu_1", "query": "SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  \"San Francisco State University\" AND t2.year  =  2001", "query_toks": ["SELECT", "degrees", "FROM", "campuses", "AS", "T1", "JOIN", "degrees", "AS", "T2", "ON", "t1.id", "=", "t2.campus", "WHERE", "t1.campus", "=", "``", "San", "Francisco", "State", "University", "''", "AND", "t2.year", "=", "2001"], "query_toks_no_value": ["select", "degrees", "from", "campuses", "as", "t1", "join", "degrees", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "campus", "where", "t1", ".", "campus", "=", "value", "and", "t2", ".", "year", "=", "value"], "question": "What degrees were conferred in San Francisco State University in the year 2001?", "question_toks": ["What", "degrees", "were", "conferred", "in", "San", "Francisco", "State", "University", "in", "the", "year", "2001", "?"], "guid": 8430}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | Find the number of patients who are not using the medication of Procrastin-X.", "sql": "SELECT count(*) FROM patient WHERE SSN NOT IN ( SELECT T1.patient FROM Prescribes AS T1 JOIN Medication AS T2 ON T1.Medication = T2.Code WHERE T2.name = 'Procrastin-X' )", "example": {"db_id": "hospital_1", "query": "SELECT count(*) FROM patient WHERE SSN NOT IN ( SELECT T1.patient FROM Prescribes AS T1 JOIN Medication AS T2 ON T1.Medication  =  T2.Code WHERE T2.name  =  'Procrastin-X' )", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "patient", "WHERE", "SSN", "NOT", "IN", "(", "SELECT", "T1.patient", "FROM", "Prescribes", "AS", "T1", "JOIN", "Medication", "AS", "T2", "ON", "T1.Medication", "=", "T2.Code", "WHERE", "T2.name", "=", "'Procrastin-X", "'", ")"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "patient", "where", "ssn", "not", "in", "(", "select", "t1", ".", "patient", "from", "prescribes", "as", "t1", "join", "medication", "as", "t2", "on", "t1", ".", "medication", "=", "t2", ".", "code", "where", "t2", ".", "name", "=", "value", ")"], "question": "Find the number of patients who are not using the medication of Procrastin-X.", "question_toks": ["Find", "the", "number", "of", "patients", "who", "are", "not", "using", "the", "medication", "of", "Procrastin-X", "."], "guid": 8167}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | List the names of all the physicians who prescribe Thesisin as medication.", "sql": "SELECT DISTINCT T1.name FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician JOIN medication AS T3 ON T3.code = T2.medication WHERE T3.name = \"Thesisin\"", "example": {"db_id": "hospital_1", "query": "SELECT DISTINCT T1.name FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician JOIN medication AS T3 ON T3.code = T2.medication WHERE T3.name  =  \"Thesisin\"", "query_toks": ["SELECT", "DISTINCT", "T1.name", "FROM", "physician", "AS", "T1", "JOIN", "prescribes", "AS", "T2", "ON", "T1.employeeid", "=", "T2.physician", "JOIN", "medication", "AS", "T3", "ON", "T3.code", "=", "T2.medication", "WHERE", "T3.name", "=", "``", "Thesisin", "''"], "query_toks_no_value": ["select", "distinct", "t1", ".", "name", "from", "physician", "as", "t1", "join", "prescribes", "as", "t2", "on", "t1", ".", "employeeid", "=", "t2", ".", "physician", "join", "medication", "as", "t3", "on", "t3", ".", "code", "=", "t2", ".", "medication", "where", "t3", ".", "name", "=", "value"], "question": "List the names of all the physicians who prescribe Thesisin as medication.", "question_toks": ["List", "the", "names", "of", "all", "the", "physicians", "who", "prescribe", "Thesisin", "as", "medication", "."], "guid": 8134}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | Count how many appointments have been made in total.", "sql": "SELECT COUNT(*) FROM appointment", "example": {"db_id": "hospital_1", "query": "SELECT count(*) FROM appointment", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "appointment"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "appointment"], "question": "Count how many appointments have been made in total.", "question_toks": ["Count", "how", "many", "appointments", "have", "been", "made", "in", "total", "."], "guid": 8147}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Find the maximum and average capacity among rooms in each building.", "sql": "SELECT max(capacity) , avg(capacity) , building FROM classroom GROUP BY building", "example": {"db_id": "college_2", "query": "SELECT max(capacity) ,  avg(capacity) ,  building FROM classroom GROUP BY building", "query_toks": ["SELECT", "max", "(", "capacity", ")", ",", "avg", "(", "capacity", ")", ",", "building", "FROM", "classroom", "GROUP", "BY", "building"], "query_toks_no_value": ["select", "max", "(", "capacity", ")", ",", "avg", "(", "capacity", ")", ",", "building", "from", "classroom", "group", "by", "building"], "question": "Find the maximum and average capacity among rooms in each building.", "question_toks": ["Find", "the", "maximum", "and", "average", "capacity", "among", "rooms", "in", "each", "building", "."], "guid": 8284}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | What are the distinct buildings with capacities of greater than 50?", "sql": "SELECT DISTINCT building FROM classroom WHERE capacity > 50", "example": {"db_id": "college_2", "query": "SELECT DISTINCT building FROM classroom WHERE capacity  >  50", "query_toks": ["SELECT", "DISTINCT", "building", "FROM", "classroom", "WHERE", "capacity", ">", "50"], "query_toks_no_value": ["select", "distinct", "building", "from", "classroom", "where", "capacity", ">", "value"], "question": "What are the distinct buildings with capacities of greater than 50?", "question_toks": ["What", "are", "the", "distinct", "buildings", "with", "capacities", "of", "greater", "than", "50", "?"], "guid": 8231}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | Find the first names and last names of male (sex is M) faculties who live in building NEB.", "sql": "SELECT Fname, Lname FROM FACULTY WHERE Sex = 'M' AND Building = 'NEB'", "example": {"db_id": "college_3", "query": "SELECT Fname ,  Lname FROM FACULTY WHERE sex  =  \"M\" AND Building  =  \"NEB\"", "query_toks": ["SELECT", "Fname", ",", "Lname", "FROM", "FACULTY", "WHERE", "sex", "=", "``", "M", "''", "AND", "Building", "=", "``", "NEB", "''"], "query_toks_no_value": ["select", "fname", ",", "lname", "from", "faculty", "where", "sex", "=", "value", "and", "building", "=", "value"], "question": "Find the first names and last names of male (sex is M) faculties who live in building NEB.", "question_toks": ["Find", "the", "first", "names", "and", "last", "names", "of", "male", "(", "sex", "is", "M", ")", "faculties", "who", "live", "in", "building", "NEB", "."], "guid": 8117}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | What is the title of a course that is listed in both the Statistics and Psychology departments?", "sql": "SELECT title FROM course WHERE dept_name  =  'Statistics' INTERSECT SELECT title FROM course WHERE dept_name  =  'Psychology'", "example": {"db_id": "college_2", "query": "SELECT title FROM course WHERE dept_name  =  'Statistics' INTERSECT SELECT title FROM course WHERE dept_name  =  'Psychology'", "query_toks": ["SELECT", "title", "FROM", "course", "WHERE", "dept_name", "=", "'Statistics", "'", "INTERSECT", "SELECT", "title", "FROM", "course", "WHERE", "dept_name", "=", "'Psychology", "'"], "query_toks_no_value": ["select", "title", "from", "course", "where", "dept_name", "=", "value", "intersect", "select", "title", "from", "course", "where", "dept_name", "=", "value"], "question": "What is the title of a course that is listed in both the Statistics and Psychology departments?", "question_toks": ["What", "is", "the", "title", "of", "a", "course", "that", "is", "listed", "in", "both", "the", "Statistics", "and", "Psychology", "departments", "?"], "guid": 8357}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | What is the name of the deparment with the highest enrollment?", "sql": "SELECT dept_name FROM student GROUP BY dept_name ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "college_2", "query": "SELECT dept_name FROM student GROUP BY dept_name ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "dept_name", "FROM", "student", "GROUP", "BY", "dept_name", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "dept_name", "from", "student", "group", "by", "dept_name", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the name of the deparment with the highest enrollment?", "question_toks": ["What", "is", "the", "name", "of", "the", "deparment", "with", "the", "highest", "enrollment", "?"], "guid": 8204}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | Which patients made more than one appointment? Tell me the name and phone number of these patients.", "sql": "SELECT name, phone FROM appointment AS T1 JOIN patient AS T2 ON T1.patient = T2.ssn GROUP BY T1.patient HAVING count(*) > 1", "example": {"db_id": "hospital_1", "query": "SELECT name ,  phone FROM appointment AS T1 JOIN patient AS T2 ON T1.patient  =  T2.ssn GROUP BY T1.patient HAVING count(*)  >  1", "query_toks": ["SELECT", "name", ",", "phone", "FROM", "appointment", "AS", "T1", "JOIN", "patient", "AS", "T2", "ON", "T1.patient", "=", "T2.ssn", "GROUP", "BY", "T1.patient", "HAVING", "count", "(", "*", ")", ">", "1"], "query_toks_no_value": ["select", "name", ",", "phone", "from", "appointment", "as", "t1", "join", "patient", "as", "t2", "on", "t1", ".", "patient", "=", "t2", ".", "ssn", "group", "by", "t1", ".", "patient", "having", "count", "(", "*", ")", ">", "value"], "question": "Which patients made more than one appointment? Tell me the name and phone number of these patients.", "question_toks": ["Which", "patients", "made", "more", "than", "one", "appointment", "?", "Tell", "me", "the", "name", "and", "phone", "number", "of", "these", "patients", "."], "guid": 8266}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | Find the name of physicians who are affiliated with Surgery or Psychiatry department.", "sql": "SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID = T2.physician JOIN department AS T3 ON T2.department = T3.DepartmentID WHERE T3.name = 'Surgery' OR T3.name = 'Psychiatry'", "example": {"db_id": "hospital_1", "query": "SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T3.name  =  'Surgery' OR T3.name  =  'Psychiatry'", "query_toks": ["SELECT", "T1.name", "FROM", "physician", "AS", "T1", "JOIN", "affiliated_with", "AS", "T2", "ON", "T1.EmployeeID", "=", "T2.physician", "JOIN", "department", "AS", "T3", "ON", "T2.department", "=", "T3.DepartmentID", "WHERE", "T3.name", "=", "'Surgery", "'", "OR", "T3.name", "=", "'Psychiatry", "'"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "physician", "as", "t1", "join", "affiliated_with", "as", "t2", "on", "t1", ".", "employeeid", "=", "t2", ".", "physician", "join", "department", "as", "t3", "on", "t2", ".", "department", "=", "t3", ".", "departmentid", "where", "t3", ".", "name", "=", "value", "or", "t3", ".", "name", "=", "value"], "question": "Find the name of physicians who are affiliated with Surgery or Psychiatry department.", "question_toks": ["Find", "the", "name", "of", "physicians", "who", "are", "affiliated", "with", "Surgery", "or", "Psychiatry", "department", "."], "guid": 8367}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | How many sections does course ACCT-211 has?", "sql": "SELECT COUNT(DISTINCT class_section) FROM CLASS WHERE crs_code = 'ACCT-211'", "example": {"db_id": "college_1", "query": "SELECT count(DISTINCT class_section) FROM CLASS WHERE crs_code  =  'ACCT-211'", "query_toks": ["SELECT", "count", "(", "DISTINCT", "class_section", ")", "FROM", "CLASS", "WHERE", "crs_code", "=", "'ACCT-211", "'"], "query_toks_no_value": ["select", "count", "(", "distinct", "class_section", ")", "from", "class", "where", "crs_code", "=", "value"], "question": "How many sections does course ACCT-211 has?", "question_toks": ["How", "many", "sections", "does", "course", "ACCT-211", "has", "?"], "guid": 8351}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | What is all the information about courses, ordered by credits ascending?", "sql": "SELECT * FROM course ORDER BY credits ASC", "example": {"db_id": "college_3", "query": "SELECT * FROM COURSE ORDER BY Credits", "query_toks": ["SELECT", "*", "FROM", "COURSE", "ORDER", "BY", "Credits"], "query_toks_no_value": ["select", "*", "from", "course", "order", "by", "credits"], "question": "What is all the information about courses, ordered by credits ascending?", "question_toks": ["What", "is", "all", "the", "information", "about", "courses", ",", "ordered", "by", "credits", "ascending", "?"], "guid": 8237}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | What are the maximum and minumum grade points?", "sql": "SELECT max(gradepoint) ,  min(gradepoint) FROM GRADECONVERSION", "example": {"db_id": "college_3", "query": "SELECT max(gradepoint) ,  min(gradepoint) FROM GRADECONVERSION", "query_toks": ["SELECT", "max", "(", "gradepoint", ")", ",", "min", "(", "gradepoint", ")", "FROM", "GRADECONVERSION"], "query_toks_no_value": ["select", "max", "(", "gradepoint", ")", ",", "min", "(", "gradepoint", ")", "from", "gradeconversion"], "question": "What are the maximum and minumum grade points?", "question_toks": ["What", "are", "the", "maximum", "and", "minumum", "grade", "points", "?"], "guid": 8371}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | What campuses opened before 1800?", "sql": "SELECT campus FROM campuses WHERE YEAR < 1800", "example": {"db_id": "csu_1", "query": "SELECT campus FROM campuses WHERE YEAR  <  1800", "query_toks": ["SELECT", "campus", "FROM", "campuses", "WHERE", "YEAR", "<", "1800"], "query_toks_no_value": ["select", "campus", "from", "campuses", "where", "year", "<", "value"], "question": "What campuses opened before 1800?", "question_toks": ["What", "campuses", "opened", "before", "1800", "?"], "guid": 8345}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | How many courses are there in total?", "sql": "SELECT COUNT(*) FROM course", "example": {"db_id": "college_3", "query": "SELECT count(*) FROM COURSE", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "COURSE"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "course"], "question": "How many courses are there in total?", "question_toks": ["How", "many", "courses", "are", "there", "in", "total", "?"], "guid": 8160}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | Find the number of rooms located on each block floor.", "sql": "SELECT COUNT(*) , T1.blockfloor FROM block AS T1 JOIN room AS T2 ON T1.blockfloor = T2.blockfloor AND T1.blockcode = T2.blockcode GROUP BY T1.blockfloor", "example": {"db_id": "hospital_1", "query": "SELECT count(*) ,  T1.blockfloor FROM BLOCK AS T1 JOIN room AS T2 ON T1.blockfloor  =  T2.blockfloor AND T1.blockcode  =  T2.blockcode GROUP BY T1.blockfloor", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "T1.blockfloor", "FROM", "BLOCK", "AS", "T1", "JOIN", "room", "AS", "T2", "ON", "T1.blockfloor", "=", "T2.blockfloor", "AND", "T1.blockcode", "=", "T2.blockcode", "GROUP", "BY", "T1.blockfloor"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "t1", ".", "blockfloor", "from", "block", "as", "t1", "join", "room", "as", "t2", "on", "t1", ".", "blockfloor", "=", "t2", ".", "blockfloor", "and", "t1", ".", "blockcode", "=", "t2", ".", "blockcode", "group", "by", "t1", ".", "blockfloor"], "question": "Find the number of rooms located on each block floor.", "question_toks": ["Find", "the", "number", "of", "rooms", "located", "on", "each", "block", "floor", "."], "guid": 8301}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | What are the degrees conferred in \"San Francisco State University\" in 2001.", "sql": "SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id = t2.campus WHERE t1.campus = \"San Francisco State University\" AND t2.year = 2001", "example": {"db_id": "csu_1", "query": "SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  \"San Francisco State University\" AND t2.year  =  2001", "query_toks": ["SELECT", "degrees", "FROM", "campuses", "AS", "T1", "JOIN", "degrees", "AS", "T2", "ON", "t1.id", "=", "t2.campus", "WHERE", "t1.campus", "=", "``", "San", "Francisco", "State", "University", "''", "AND", "t2.year", "=", "2001"], "query_toks_no_value": ["select", "degrees", "from", "campuses", "as", "t1", "join", "degrees", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "campus", "where", "t1", ".", "campus", "=", "value", "and", "t2", ".", "year", "=", "value"], "question": "What are the degrees conferred in \"San Francisco State University\" in 2001.", "question_toks": ["What", "are", "the", "degrees", "conferred", "in", "``", "San", "Francisco", "State", "University", "''", "in", "2001", "."], "guid": 8145}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | Find the name and position of the head of the department with the least employees.", "sql": "SELECT T2.name, T2.position FROM department AS T1 JOIN physician AS T2 ON T1.head = T2.EmployeeID GROUP BY departmentID ORDER BY count(departmentID) LIMIT 1", "example": {"db_id": "hospital_1", "query": "SELECT T2.name ,  T2.position FROM department AS T1 JOIN physician AS T2 ON T1.head  =  T2.EmployeeID GROUP BY departmentID ORDER BY count(departmentID) LIMIT 1;", "query_toks": ["SELECT", "T2.name", ",", "T2.position", "FROM", "department", "AS", "T1", "JOIN", "physician", "AS", "T2", "ON", "T1.head", "=", "T2.EmployeeID", "GROUP", "BY", "departmentID", "ORDER", "BY", "count", "(", "departmentID", ")", "LIMIT", "1", ";"], "query_toks_no_value": ["select", "t2", ".", "name", ",", "t2", ".", "position", "from", "department", "as", "t1", "join", "physician", "as", "t2", "on", "t1", ".", "head", "=", "t2", ".", "employeeid", "group", "by", "departmentid", "order", "by", "count", "(", "departmentid", ")", "limit", "value"], "question": "Find the name and position of the head of the department with the least employees.", "question_toks": ["Find", "the", "name", "and", "position", "of", "the", "head", "of", "the", "department", "with", "the", "least", "employees", "."], "guid": 8224}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | What are the course names for courses taught on MTW?", "sql": "SELECT cname FROM course WHERE days = 'MTW'", "example": {"db_id": "college_3", "query": "SELECT CName FROM COURSE WHERE Days  =  \"MTW\"", "query_toks": ["SELECT", "CName", "FROM", "COURSE", "WHERE", "Days", "=", "``", "MTW", "''"], "query_toks_no_value": ["select", "cname", "from", "course", "where", "days", "=", "value"], "question": "What are the course names for courses taught on MTW?", "question_toks": ["What", "are", "the", "course", "names", "for", "courses", "taught", "on", "MTW", "?"], "guid": 8334}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Give id of the instructor who advises students in the History department.", "sql": "SELECT i_id FROM advisor AS T1 JOIN student AS T2 ON T1.s_id = T2.id WHERE T2.dept_name = 'History'", "example": {"db_id": "college_2", "query": "SELECT i_id FROM advisor AS T1 JOIN student AS T2 ON T1.s_id  =  T2.id WHERE T2.dept_name  =  'History'", "query_toks": ["SELECT", "i_id", "FROM", "advisor", "AS", "T1", "JOIN", "student", "AS", "T2", "ON", "T1.s_id", "=", "T2.id", "WHERE", "T2.dept_name", "=", "'History", "'"], "query_toks_no_value": ["select", "i_id", "from", "advisor", "as", "t1", "join", "student", "as", "t2", "on", "t1", ".", "s_id", "=", "t2", ".", "id", "where", "t2", ".", "dept_name", "=", "value"], "question": "Give id of the instructor who advises students in the History department.", "question_toks": ["Give", "id", "of", "the", "instructor", "who", "advises", "students", "in", "the", "History", "department", "."], "guid": 8198}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | How many campuses are there in Los Angeles county?", "sql": "SELECT COUNT(*) FROM campuses WHERE county = 'Los Angeles'", "example": {"db_id": "csu_1", "query": "SELECT count(*) FROM campuses WHERE county  =  \"Los Angeles\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "campuses", "WHERE", "county", "=", "``", "Los", "Angeles", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "campuses", "where", "county", "=", "value"], "question": "How many campuses are there in Los Angeles county?", "question_toks": ["How", "many", "campuses", "are", "there", "in", "Los", "Angeles", "county", "?"], "guid": 8227}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | What is the id of the appointment that started most recently?", "sql": "SELECT appointmentid FROM appointment ORDER BY start DESC LIMIT 1", "example": {"db_id": "hospital_1", "query": "SELECT appointmentid FROM appointment ORDER BY START DESC LIMIT 1", "query_toks": ["SELECT", "appointmentid", "FROM", "appointment", "ORDER", "BY", "START", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "appointmentid", "from", "appointment", "order", "by", "start", "desc", "limit", "value"], "question": "What is the id of the appointment that started most recently?", "question_toks": ["What", "is", "the", "id", "of", "the", "appointment", "that", "started", "most", "recently", "?"], "guid": 8287}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Count the number of students who have advisors.", "sql": "SELECT COUNT(DISTINCT s_id) FROM advisor", "example": {"db_id": "college_2", "query": "SELECT count(DISTINCT s_id) FROM advisor", "query_toks": ["SELECT", "count", "(", "DISTINCT", "s_id", ")", "FROM", "advisor"], "query_toks_no_value": ["select", "count", "(", "distinct", "s_id", ")", "from", "advisor"], "question": "Count the number of students who have advisors.", "question_toks": ["Count", "the", "number", "of", "students", "who", "have", "advisors", "."], "guid": 8253}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What are the first names of all teachers who have taught a course and the corresponding course codes?", "sql": "SELECT T2.emp_fname , T1.crs_code FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num", "example": {"db_id": "college_1", "query": "SELECT T2.emp_fname ,  T1.crs_code FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num", "query_toks": ["SELECT", "T2.emp_fname", ",", "T1.crs_code", "FROM", "CLASS", "AS", "T1", "JOIN", "employee", "AS", "T2", "ON", "T1.prof_num", "=", "T2.emp_num"], "query_toks_no_value": ["select", "t2", ".", "emp_fname", ",", "t1", ".", "crs_code", "from", "class", "as", "t1", "join", "employee", "as", "t2", "on", "t1", ".", "prof_num", "=", "t2", ".", "emp_num"], "question": "What are the first names of all teachers who have taught a course and the corresponding course codes?", "question_toks": ["What", "are", "the", "first", "names", "of", "all", "teachers", "who", "have", "taught", "a", "course", "and", "the", "corresponding", "course", "codes", "?"], "guid": 8344}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | What campuses are located in Los Angeles county and opened after 1950?", "sql": "SELECT campus FROM campuses WHERE county = \"Los Angeles\" AND YEAR > 1950", "example": {"db_id": "csu_1", "query": "SELECT campus FROM campuses WHERE county  =  \"Los Angeles\" AND YEAR  >  1950", "query_toks": ["SELECT", "campus", "FROM", "campuses", "WHERE", "county", "=", "``", "Los", "Angeles", "''", "AND", "YEAR", ">", "1950"], "query_toks_no_value": ["select", "campus", "from", "campuses", "where", "county", "=", "value", "and", "year", ">", "value"], "question": "What campuses are located in Los Angeles county and opened after 1950?", "question_toks": ["What", "campuses", "are", "located", "in", "Los", "Angeles", "county", "and", "opened", "after", "1950", "?"], "guid": 8304}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | Find all procedures which cost more than 1000 or which physician John Wen was trained in.", "sql": "SELECT name FROM procedures WHERE cost > 1000 UNION SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid = T2.physician JOIN procedures AS T3 ON T3.code = T2.treatment WHERE T1.name = \"John Wen\"", "example": {"db_id": "hospital_1", "query": "SELECT name FROM procedures WHERE cost  >  1000 UNION SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"", "query_toks": ["SELECT", "name", "FROM", "procedures", "WHERE", "cost", ">", "1000", "UNION", "SELECT", "T3.name", "FROM", "physician", "AS", "T1", "JOIN", "trained_in", "AS", "T2", "ON", "T1.employeeid", "=", "T2.physician", "JOIN", "procedures", "AS", "T3", "ON", "T3.code", "=", "T2.treatment", "WHERE", "T1.name", "=", "``", "John", "Wen", "''"], "query_toks_no_value": ["select", "name", "from", "procedures", "where", "cost", ">", "value", "union", "select", "t3", ".", "name", "from", "physician", "as", "t1", "join", "trained_in", "as", "t2", "on", "t1", ".", "employeeid", "=", "t2", ".", "physician", "join", "procedures", "as", "t3", "on", "t3", ".", "code", "=", "t2", ".", "treatment", "where", "t1", ".", "name", "=", "value"], "question": "Find all procedures which cost more than 1000 or which physician John Wen was trained in.", "question_toks": ["Find", "all", "procedures", "which", "cost", "more", "than", "1000", "or", "which", "physician", "John", "Wen", "was", "trained", "in", "."], "guid": 8373}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | Sort the list of names and costs of all procedures in the descending order of cost.", "sql": "SELECT name, cost FROM procedures ORDER BY cost DESC", "example": {"db_id": "hospital_1", "query": "SELECT name ,  cost FROM procedures ORDER BY cost DESC", "query_toks": ["SELECT", "name", ",", "cost", "FROM", "procedures", "ORDER", "BY", "cost", "DESC"], "query_toks_no_value": ["select", "name", ",", "cost", "from", "procedures", "order", "by", "cost", "desc"], "question": "Sort the list of names and costs of all procedures in the descending order of cost.", "question_toks": ["Sort", "the", "list", "of", "names", "and", "costs", "of", "all", "procedures", "in", "the", "descending", "order", "of", "cost", "."], "guid": 8342}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What are the number of different course codes?", "sql": "SELECT count(DISTINCT crs_code) FROM CLASS", "example": {"db_id": "college_1", "query": "SELECT count(DISTINCT crs_code) FROM CLASS", "query_toks": ["SELECT", "count", "(", "DISTINCT", "crs_code", ")", "FROM", "CLASS"], "query_toks_no_value": ["select", "count", "(", "distinct", "crs_code", ")", "from", "class"], "question": "What are the number of different course codes?", "question_toks": ["What", "are", "the", "number", "of", "different", "course", "codes", "?"], "guid": 8283}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | What are the names of students who have taken Statistics courses?", "sql": "SELECT T3.name FROM course AS T1 JOIN takes AS T2 ON T1.course_id = T2.course_id JOIN student AS T3 ON T2.id = T3.id WHERE T1.dept_name = 'Statistics'", "example": {"db_id": "college_2", "query": "SELECT T3.name FROM course AS T1 JOIN takes AS T2 ON T1.course_id  =  T2.course_id JOIN student AS T3 ON T2.id  =  T3.id WHERE T1.dept_name  =  'Statistics'", "query_toks": ["SELECT", "T3.name", "FROM", "course", "AS", "T1", "JOIN", "takes", "AS", "T2", "ON", "T1.course_id", "=", "T2.course_id", "JOIN", "student", "AS", "T3", "ON", "T2.id", "=", "T3.id", "WHERE", "T1.dept_name", "=", "'Statistics", "'"], "query_toks_no_value": ["select", "t3", ".", "name", "from", "course", "as", "t1", "join", "takes", "as", "t2", "on", "t1", ".", "course_id", "=", "t2", ".", "course_id", "join", "student", "as", "t3", "on", "t2", ".", "id", "=", "t3", ".", "id", "where", "t1", ".", "dept_name", "=", "value"], "question": "What are the names of students who have taken Statistics courses?", "question_toks": ["What", "are", "the", "names", "of", "students", "who", "have", "taken", "Statistics", "courses", "?"], "guid": 8126}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | Which physicians are affiliated with both Surgery and Psychiatry departments? Tell me their names.", "sql": "SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID = T2.physician JOIN department AS T3 ON T2.department = T3.DepartmentID WHERE T3.name = 'Surgery' INTERSECT SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID = T2.physician JOIN department AS T3 ON T2.department = T3.DepartmentID WHERE T3.name = 'Psychiatry'", "example": {"db_id": "hospital_1", "query": "SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T3.name  =  'Surgery' INTERSECT SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T3.name  =  'Psychiatry'", "query_toks": ["SELECT", "T1.name", "FROM", "physician", "AS", "T1", "JOIN", "affiliated_with", "AS", "T2", "ON", "T1.EmployeeID", "=", "T2.physician", "JOIN", "department", "AS", "T3", "ON", "T2.department", "=", "T3.DepartmentID", "WHERE", "T3.name", "=", "'Surgery", "'", "INTERSECT", "SELECT", "T1.name", "FROM", "physician", "AS", "T1", "JOIN", "affiliated_with", "AS", "T2", "ON", "T1.EmployeeID", "=", "T2.physician", "JOIN", "department", "AS", "T3", "ON", "T2.department", "=", "T3.DepartmentID", "WHERE", "T3.name", "=", "'Psychiatry", "'"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "physician", "as", "t1", "join", "affiliated_with", "as", "t2", "on", "t1", ".", "employeeid", "=", "t2", ".", "physician", "join", "department", "as", "t3", "on", "t2", ".", "department", "=", "t3", ".", "departmentid", "where", "t3", ".", "name", "=", "value", "intersect", "select", "t1", ".", "name", "from", "physician", "as", "t1", "join", "affiliated_with", "as", "t2", "on", "t1", ".", "employeeid", "=", "t2", ".", "physician", "join", "department", "as", "t3", "on", "t2", ".", "department", "=", "t3", ".", "departmentid", "where", "t3", ".", "name", "=", "value"], "question": "Which physicians are affiliated with both Surgery and Psychiatry departments? Tell me their names.", "question_toks": ["Which", "physicians", "are", "affiliated", "with", "both", "Surgery", "and", "Psychiatry", "departments", "?", "Tell", "me", "their", "names", "."], "guid": 8161}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Find the names of all instructors in the Art department who have taught some course and the course_id.", "sql": "SELECT T1.name, T2.course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID = T2.ID WHERE T1.dept_name = 'Art'", "example": {"db_id": "college_2", "query": "SELECT name ,  course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID  =  T2.ID WHERE T1.dept_name  =  'Art'", "query_toks": ["SELECT", "name", ",", "course_id", "FROM", "instructor", "AS", "T1", "JOIN", "teaches", "AS", "T2", "ON", "T1.ID", "=", "T2.ID", "WHERE", "T1.dept_name", "=", "'Art", "'"], "query_toks_no_value": ["select", "name", ",", "course_id", "from", "instructor", "as", "t1", "join", "teaches", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "id", "where", "t1", ".", "dept_name", "=", "value"], "question": "Find the names of all instructors in the Art department who have taught some course and the course_id.", "question_toks": ["Find", "the", "names", "of", "all", "instructors", "in", "the", "Art", "department", "who", "have", "taught", "some", "course", "and", "the", "course_id", "."], "guid": 8291}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What are the codes of all the courses that are located in room KLR209?", "sql": "SELECT class_code FROM CLASS WHERE class_room = 'KLR209'", "example": {"db_id": "college_1", "query": "SELECT class_code FROM CLASS WHERE class_room  =  'KLR209'", "query_toks": ["SELECT", "class_code", "FROM", "CLASS", "WHERE", "class_room", "=", "'KLR209", "'"], "query_toks_no_value": ["select", "class_code", "from", "class", "where", "class_room", "=", "value"], "question": "What are the codes of all the courses that are located in room KLR209?", "question_toks": ["What", "are", "the", "codes", "of", "all", "the", "courses", "that", "are", "located", "in", "room", "KLR209", "?"], "guid": 8112}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Who is the instructor with the highest salary?", "sql": "SELECT name FROM instructor ORDER BY salary DESC LIMIT 1", "example": {"db_id": "college_2", "query": "SELECT name FROM instructor ORDER BY salary DESC LIMIT 1", "query_toks": ["SELECT", "name", "FROM", "instructor", "ORDER", "BY", "salary", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "name", "from", "instructor", "order", "by", "salary", "desc", "limit", "value"], "question": "Who is the instructor with the highest salary?", "question_toks": ["Who", "is", "the", "instructor", "with", "the", "highest", "salary", "?"], "guid": 8234}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | List the first name of all employees with job code PROF ordered by their date of birth.", "sql": "SELECT emp_fname FROM employee WHERE emp_jobcode = 'PROF' ORDER BY emp_dob", "example": {"db_id": "college_1", "query": "SELECT emp_fname FROM employee WHERE emp_jobcode  =  'PROF' ORDER BY emp_dob", "query_toks": ["SELECT", "emp_fname", "FROM", "employee", "WHERE", "emp_jobcode", "=", "'PROF", "'", "ORDER", "BY", "emp_dob"], "query_toks_no_value": ["select", "emp_fname", "from", "employee", "where", "emp_jobcode", "=", "value", "order", "by", "emp_dob"], "question": "List the first name of all employees with job code PROF ordered by their date of birth.", "question_toks": ["List", "the", "first", "name", "of", "all", "employees", "with", "job", "code", "PROF", "ordered", "by", "their", "date", "of", "birth", "."], "guid": 8341}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | what is the name and position of the head whose department has least number of employees?", "sql": "SELECT T2.name , T2.position FROM department AS T1 JOIN physician AS T2 ON T1.head = T2.EmployeeID GROUP BY departmentID ORDER BY count(departmentID) LIMIT 1", "example": {"db_id": "hospital_1", "query": "SELECT T2.name ,  T2.position FROM department AS T1 JOIN physician AS T2 ON T1.head  =  T2.EmployeeID GROUP BY departmentID ORDER BY count(departmentID) LIMIT 1;", "query_toks": ["SELECT", "T2.name", ",", "T2.position", "FROM", "department", "AS", "T1", "JOIN", "physician", "AS", "T2", "ON", "T1.head", "=", "T2.EmployeeID", "GROUP", "BY", "departmentID", "ORDER", "BY", "count", "(", "departmentID", ")", "LIMIT", "1", ";"], "query_toks_no_value": ["select", "t2", ".", "name", ",", "t2", ".", "position", "from", "department", "as", "t1", "join", "physician", "as", "t2", "on", "t1", ".", "head", "=", "t2", ".", "employeeid", "group", "by", "departmentid", "order", "by", "count", "(", "departmentid", ")", "limit", "value"], "question": "what is the name and position of the head whose department has least number of employees?", "question_toks": ["what", "is", "the", "name", "and", "position", "of", "the", "head", "whose", "department", "has", "least", "number", "of", "employees", "?"], "guid": 8271}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | What campuses are located in the county of Los Angeles?", "sql": "SELECT campus FROM campuses WHERE county = \"Los Angeles\"", "example": {"db_id": "csu_1", "query": "SELECT campus FROM campuses WHERE county  =  \"Los Angeles\"", "query_toks": ["SELECT", "campus", "FROM", "campuses", "WHERE", "county", "=", "``", "Los", "Angeles", "''"], "query_toks_no_value": ["select", "campus", "from", "campuses", "where", "county", "=", "value"], "question": "What campuses are located in the county of Los Angeles?", "question_toks": ["What", "campuses", "are", "located", "in", "the", "county", "of", "Los", "Angeles", "?"], "guid": 8131}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | Find all the campuses opened in 1958.", "sql": "SELECT campus FROM campuses WHERE YEAR = 1958", "example": {"db_id": "csu_1", "query": "SELECT campus FROM campuses WHERE YEAR  =  1958", "query_toks": ["SELECT", "campus", "FROM", "campuses", "WHERE", "YEAR", "=", "1958"], "query_toks_no_value": ["select", "campus", "from", "campuses", "where", "year", "=", "value"], "question": "Find all the campuses opened in 1958.", "question_toks": ["Find", "all", "the", "campuses", "opened", "in", "1958", "."], "guid": 8197}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | How many classes are professor whose last name is Graztevski has?", "sql": "SELECT COUNT(*) FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM = T2.PROF_NUM WHERE T1.EMP_LNAME = 'Graztevski'", "example": {"db_id": "college_1", "query": "SELECT count(*) FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM  =  T2.PROF_NUM WHERE T1.EMP_LNAME  =  'Graztevski'", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "employee", "AS", "T1", "JOIN", "CLASS", "AS", "T2", "ON", "T1.EMP_NUM", "=", "T2.PROF_NUM", "WHERE", "T1.EMP_LNAME", "=", "'Graztevski", "'"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "employee", "as", "t1", "join", "class", "as", "t2", "on", "t1", ".", "emp_num", "=", "t2", ".", "prof_num", "where", "t1", ".", "emp_lname", "=", "value"], "question": "How many classes are professor whose last name is Graztevski has?", "question_toks": ["How", "many", "classes", "are", "professor", "whose", "last", "name", "is", "Graztevski", "has", "?"], "guid": 8420}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | how many degrees were conferred between 1998 and 2002?", "sql": "SELECT T1.campus ,  sum(T2.degrees) FROM campuses AS T1 JOIN degrees AS T2 ON T1.id  =  T2.campus WHERE T2.year  >=  1998 AND T2.year  <=  2002 GROUP BY T1.campus", "example": {"db_id": "csu_1", "query": "SELECT T1.campus ,  sum(T2.degrees) FROM campuses AS T1 JOIN degrees AS T2 ON T1.id  =  T2.campus WHERE T2.year  >=  1998 AND T2.year  <=  2002 GROUP BY T1.campus", "query_toks": ["SELECT", "T1.campus", ",", "sum", "(", "T2.degrees", ")", "FROM", "campuses", "AS", "T1", "JOIN", "degrees", "AS", "T2", "ON", "T1.id", "=", "T2.campus", "WHERE", "T2.year", ">", "=", "1998", "AND", "T2.year", "<", "=", "2002", "GROUP", "BY", "T1.campus"], "query_toks_no_value": ["select", "t1", ".", "campus", ",", "sum", "(", "t2", ".", "degrees", ")", "from", "campuses", "as", "t1", "join", "degrees", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "campus", "where", "t2", ".", "year", ">", "=", "value", "and", "t2", ".", "year", "<", "=", "value", "group", "by", "t1", ".", "campus"], "question": "how many degrees were conferred between 1998 and 2002?", "question_toks": ["how", "many", "degrees", "were", "conferred", "between", "1998", "and", "2002", "?"], "guid": 8264}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | What is the total number of campuses?", "sql": "SELECT COUNT(*) FROM campuses", "example": {"db_id": "csu_1", "query": "SELECT count(*) FROM campuses", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "campuses"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "campuses"], "question": "What is the total number of campuses?", "question_toks": ["What", "is", "the", "total", "number", "of", "campuses", "?"], "guid": 8203}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | What are the ids of instructors who taught in the Fall of 2009 but not in the Spring of 2010?", "sql": "SELECT id FROM teaches WHERE semester = 'Fall' AND YEAR = 2009 EXCEPT SELECT id FROM teaches WHERE semester = 'Spring' AND YEAR = 2010", "example": {"db_id": "college_2", "query": "SELECT id FROM teaches WHERE semester  =  'Fall' AND YEAR  =  2009 EXCEPT SELECT id FROM teaches WHERE semester  =  'Spring' AND YEAR  =  2010", "query_toks": ["SELECT", "id", "FROM", "teaches", "WHERE", "semester", "=", "'Fall", "'", "AND", "YEAR", "=", "2009", "EXCEPT", "SELECT", "id", "FROM", "teaches", "WHERE", "semester", "=", "'Spring", "'", "AND", "YEAR", "=", "2010"], "query_toks_no_value": ["select", "id", "from", "teaches", "where", "semester", "=", "value", "and", "year", "=", "value", "except", "select", "id", "from", "teaches", "where", "semester", "=", "value", "and", "year", "=", "value"], "question": "What are the ids of instructors who taught in the Fall of 2009 but not in the Spring of 2010?", "question_toks": ["What", "are", "the", "ids", "of", "instructors", "who", "taught", "in", "the", "Fall", "of", "2009", "but", "not", "in", "the", "Spring", "of", "2010", "?"], "guid": 8412}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | Find the count and code of the job has most employees.", "sql": "SELECT emp_jobcode, COUNT(*) FROM employee GROUP BY emp_jobcode ORDER BY COUNT(*) DESC LIMIT 1", "example": {"db_id": "college_1", "query": "SELECT emp_jobcode ,  count(*) FROM employee GROUP BY emp_jobcode ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "emp_jobcode", ",", "count", "(", "*", ")", "FROM", "employee", "GROUP", "BY", "emp_jobcode", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "emp_jobcode", ",", "count", "(", "*", ")", "from", "employee", "group", "by", "emp_jobcode", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Find the count and code of the job has most employees.", "question_toks": ["Find", "the", "count", "and", "code", "of", "the", "job", "has", "most", "employees", "."], "guid": 8260}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | How many different classes are there?", "sql": "SELECT COUNT(DISTINCT class_code) FROM class", "example": {"db_id": "college_1", "query": "SELECT count(DISTINCT class_code) FROM CLASS", "query_toks": ["SELECT", "count", "(", "DISTINCT", "class_code", ")", "FROM", "CLASS"], "query_toks_no_value": ["select", "count", "(", "distinct", "class_code", ")", "from", "class"], "question": "How many different classes are there?", "question_toks": ["How", "many", "different", "classes", "are", "there", "?"], "guid": 8303}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Which year had the greatest number of courses?", "sql": "SELECT YEAR FROM SECTION GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "college_2", "query": "SELECT YEAR FROM SECTION GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "YEAR", "FROM", "SECTION", "GROUP", "BY", "YEAR", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "year", "from", "section", "group", "by", "year", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which year had the greatest number of courses?", "question_toks": ["Which", "year", "had", "the", "greatest", "number", "of", "courses", "?"], "guid": 8386}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | What is the name of the department htat has no students minoring in it?", "sql": "SELECT DName FROM DEPARTMENT EXCEPT SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MINOR_IN AS T2 ON T1.DNO = T2.DNO", "example": {"db_id": "college_3", "query": "SELECT DName FROM DEPARTMENT EXCEPT SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MINOR_IN AS T2 ON T1.DNO  =  T2.DNO", "query_toks": ["SELECT", "DName", "FROM", "DEPARTMENT", "EXCEPT", "SELECT", "T1.DName", "FROM", "DEPARTMENT", "AS", "T1", "JOIN", "MINOR_IN", "AS", "T2", "ON", "T1.DNO", "=", "T2.DNO"], "query_toks_no_value": ["select", "dname", "from", "department", "except", "select", "t1", ".", "dname", "from", "department", "as", "t1", "join", "minor_in", "as", "t2", "on", "t1", ".", "dno", "=", "t2", ".", "dno"], "question": "What is the name of the department htat has no students minoring in it?", "question_toks": ["What", "is", "the", "name", "of", "the", "department", "htat", "has", "no", "students", "minoring", "in", "it", "?"], "guid": 8270}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What are the different first names and highest degree attained for professors teaching in the Computer Information Systems department?", "sql": "SELECT DISTINCT T2.emp_fname , T3.prof_high_degree FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN professor AS T3 ON T2.emp_num = T3.emp_num JOIN department AS T4 ON T4.dept_code = T3.dept_code WHERE T4.dept_name = 'Computer Info. Systems'", "example": {"db_id": "college_1", "query": "SELECT DISTINCT T2.emp_fname ,  T3.prof_high_degree FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN professor AS T3 ON T2.emp_num  =  T3.emp_num JOIN department AS T4 ON T4.dept_code  =  T3.dept_code WHERE T4.dept_name  =  'Computer Info. Systems'", "query_toks": ["SELECT", "DISTINCT", "T2.emp_fname", ",", "T3.prof_high_degree", "FROM", "CLASS", "AS", "T1", "JOIN", "employee", "AS", "T2", "ON", "T1.prof_num", "=", "T2.emp_num", "JOIN", "professor", "AS", "T3", "ON", "T2.emp_num", "=", "T3.emp_num", "JOIN", "department", "AS", "T4", "ON", "T4.dept_code", "=", "T3.dept_code", "WHERE", "T4.dept_name", "=", "'Computer", "Info", ".", "Systems", "'"], "query_toks_no_value": ["select", "distinct", "t2", ".", "emp_fname", ",", "t3", ".", "prof_high_degree", "from", "class", "as", "t1", "join", "employee", "as", "t2", "on", "t1", ".", "prof_num", "=", "t2", ".", "emp_num", "join", "professor", "as", "t3", "on", "t2", ".", "emp_num", "=", "t3", ".", "emp_num", "join", "department", "as", "t4", "on", "t4", ".", "dept_code", "=", "t3", ".", "dept_code", "where", "t4", ".", "dept_name", "=", "value"], "question": "What are the different first names and highest degree attained for professors teaching in the Computer Information Systems department?", "question_toks": ["What", "are", "the", "different", "first", "names", "and", "highest", "degree", "attained", "for", "professors", "teaching", "in", "the", "Computer", "Information", "Systems", "department", "?"], "guid": 8143}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Find the title of the course that is offered by more than one department.", "sql": "SELECT title FROM course GROUP BY title HAVING count(*) > 1", "example": {"db_id": "college_2", "query": "SELECT title FROM course GROUP BY title HAVING count(*)  >  1", "query_toks": ["SELECT", "title", "FROM", "course", "GROUP", "BY", "title", "HAVING", "count", "(", "*", ")", ">", "1"], "query_toks_no_value": ["select", "title", "from", "course", "group", "by", "title", "having", "count", "(", "*", ")", ">", "value"], "question": "Find the title of the course that is offered by more than one department.", "question_toks": ["Find", "the", "title", "of", "the", "course", "that", "is", "offered", "by", "more", "than", "one", "department", "."], "guid": 8146}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | What are the names of all campuses located at Chico?", "sql": "SELECT campus FROM campuses WHERE location = 'Chico'", "example": {"db_id": "csu_1", "query": "SELECT campus FROM campuses WHERE LOCATION  =  \"Chico\"", "query_toks": ["SELECT", "campus", "FROM", "campuses", "WHERE", "LOCATION", "=", "``", "Chico", "''"], "query_toks_no_value": ["select", "campus", "from", "campuses", "where", "location", "=", "value"], "question": "What are the names of all campuses located at Chico?", "question_toks": ["What", "are", "the", "names", "of", "all", "campuses", "located", "at", "Chico", "?"], "guid": 8250}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | How many patients stay in room 112?", "sql": "SELECT COUNT(patient) FROM stay WHERE room = 112", "example": {"db_id": "hospital_1", "query": "SELECT count(patient) FROM stay WHERE room  =  112", "query_toks": ["SELECT", "count", "(", "patient", ")", "FROM", "stay", "WHERE", "room", "=", "112"], "query_toks_no_value": ["select", "count", "(", "patient", ")", "from", "stay", "where", "room", "=", "value"], "question": "How many patients stay in room 112?", "question_toks": ["How", "many", "patients", "stay", "in", "room", "112", "?"], "guid": 8405}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | Find the ids of the nurses who are on call in block floor 1 and block code 1.", "sql": "SELECT nurse FROM on_call WHERE blockfloor = 1 AND blockcode = 1", "example": {"db_id": "hospital_1", "query": "SELECT nurse FROM on_call WHERE blockfloor  =  1 AND blockcode  =  1", "query_toks": ["SELECT", "nurse", "FROM", "on_call", "WHERE", "blockfloor", "=", "1", "AND", "blockcode", "=", "1"], "query_toks_no_value": ["select", "nurse", "from", "on_call", "where", "blockfloor", "=", "value", "and", "blockcode", "=", "value"], "question": "Find the ids of the nurses who are on call in block floor 1 and block code 1.", "question_toks": ["Find", "the", "ids", "of", "the", "nurses", "who", "are", "on", "call", "in", "block", "floor", "1", "and", "block", "code", "1", "."], "guid": 8254}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Find the title, credit, and department name of courses that have more than one prerequisites?", "sql": "SELECT T1.title , T1.credits , T1.dept_name FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY T2.course_id HAVING count(*) > 1", "example": {"db_id": "college_2", "query": "SELECT T1.title ,  T1.credits , T1.dept_name FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  >  1", "query_toks": ["SELECT", "T1.title", ",", "T1.credits", ",", "T1.dept_name", "FROM", "course", "AS", "T1", "JOIN", "prereq", "AS", "T2", "ON", "T1.course_id", "=", "T2.course_id", "GROUP", "BY", "T2.course_id", "HAVING", "count", "(", "*", ")", ">", "1"], "query_toks_no_value": ["select", "t1", ".", "title", ",", "t1", ".", "credits", ",", "t1", ".", "dept_name", "from", "course", "as", "t1", "join", "prereq", "as", "t2", "on", "t1", ".", "course_id", "=", "t2", ".", "course_id", "group", "by", "t2", ".", "course_id", "having", "count", "(", "*", ")", ">", "value"], "question": "Find the title, credit, and department name of courses that have more than one prerequisites?", "question_toks": ["Find", "the", "title", ",", "credit", ",", "and", "department", "name", "of", "courses", "that", "have", "more", "than", "one", "prerequisites", "?"], "guid": 8416}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | In the year 2000, what is the campus fee for San Francisco State University?", "sql": "SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus = t2.id WHERE t2.campus = \"San Francisco State University\" AND t1.year = 2000", "example": {"db_id": "csu_1", "query": "SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t2.campus  =  \"San Francisco State University\" AND t1.year  =  2000", "query_toks": ["SELECT", "t1.campusfee", "FROM", "csu_fees", "AS", "t1", "JOIN", "campuses", "AS", "t2", "ON", "t1.campus", "=", "t2.id", "WHERE", "t2.campus", "=", "``", "San", "Francisco", "State", "University", "''", "AND", "t1.year", "=", "2000"], "query_toks_no_value": ["select", "t1", ".", "campusfee", "from", "csu_fees", "as", "t1", "join", "campuses", "as", "t2", "on", "t1", ".", "campus", "=", "t2", ".", "id", "where", "t2", ".", "campus", "=", "value", "and", "t1", ".", "year", "=", "value"], "question": "In the year 2000, what is the campus fee for San Francisco State University?", "question_toks": ["In", "the", "year", "2000", ",", "what", "is", "the", "campus", "fee", "for", "San", "Francisco", "State", "University", "?"], "guid": 8233}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | What is the alphabetically ordered list of all the distinct names of nurses?", "sql": "SELECT DISTINCT name FROM nurse ORDER BY name", "example": {"db_id": "hospital_1", "query": "SELECT DISTINCT name FROM nurse ORDER BY name", "query_toks": ["SELECT", "DISTINCT", "name", "FROM", "nurse", "ORDER", "BY", "name"], "query_toks_no_value": ["select", "distinct", "name", "from", "nurse", "order", "by", "name"], "question": "What is the alphabetically ordered list of all the distinct names of nurses?", "question_toks": ["What", "is", "the", "alphabetically", "ordered", "list", "of", "all", "the", "distinct", "names", "of", "nurses", "?"], "guid": 8218}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Which department has the highest average instructor salary?", "sql": "SELECT dept_name FROM instructor GROUP BY dept_name ORDER BY avg(salary) DESC LIMIT 1", "example": {"db_id": "college_2", "query": "SELECT dept_name FROM instructor GROUP BY dept_name ORDER BY avg(salary) DESC LIMIT 1", "query_toks": ["SELECT", "dept_name", "FROM", "instructor", "GROUP", "BY", "dept_name", "ORDER", "BY", "avg", "(", "salary", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "dept_name", "from", "instructor", "group", "by", "dept_name", "order", "by", "avg", "(", "salary", ")", "desc", "limit", "value"], "question": "Which department has the highest average instructor salary?", "question_toks": ["Which", "department", "has", "the", "highest", "average", "instructor", "salary", "?"], "guid": 8365}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What is the name of the department with the fewest professors?", "sql": "SELECT T2.dept_name FROM professor AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) LIMIT 1", "example": {"db_id": "college_1", "query": "SELECT T2.dept_name FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) LIMIT 1", "query_toks": ["SELECT", "T2.dept_name", "FROM", "professor", "AS", "T1", "JOIN", "department", "AS", "T2", "ON", "T1.dept_code", "=", "T2.dept_code", "GROUP", "BY", "T1.dept_code", "ORDER", "BY", "count", "(", "*", ")", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "dept_name", "from", "professor", "as", "t1", "join", "department", "as", "t2", "on", "t1", ".", "dept_code", "=", "t2", ".", "dept_code", "group", "by", "t1", ".", "dept_code", "order", "by", "count", "(", "*", ")", "limit", "value"], "question": "What is the name of the department with the fewest professors?", "question_toks": ["What", "is", "the", "name", "of", "the", "department", "with", "the", "fewest", "professors", "?"], "guid": 8297}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What are the names of all students taking a course who received an A or C?", "sql": "SELECT T1.stu_fname , T1.stu_lname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num WHERE T2.enroll_grade = 'C' OR T2.enroll_grade = 'A'", "example": {"db_id": "college_1", "query": "SELECT T1.stu_fname ,  T1.stu_lname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num WHERE T2.enroll_grade  =  'C' OR T2.enroll_grade  =  'A'", "query_toks": ["SELECT", "T1.stu_fname", ",", "T1.stu_lname", "FROM", "student", "AS", "T1", "JOIN", "enroll", "AS", "T2", "ON", "T1.stu_num", "=", "T2.stu_num", "WHERE", "T2.enroll_grade", "=", "'C", "'", "OR", "T2.enroll_grade", "=", "'A", "'"], "query_toks_no_value": ["select", "t1", ".", "stu_fname", ",", "t1", ".", "stu_lname", "from", "student", "as", "t1", "join", "enroll", "as", "t2", "on", "t1", ".", "stu_num", "=", "t2", ".", "stu_num", "where", "t2", ".", "enroll_grade", "=", "value", "or", "t2", ".", "enroll_grade", "=", "value"], "question": "What are the names of all students taking a course who received an A or C?", "question_toks": ["What", "are", "the", "names", "of", "all", "students", "taking", "a", "course", "who", "received", "an", "A", "or", "C", "?"], "guid": 8356}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What are the first names of all students in course ACCT-211?", "sql": "SELECT T3.stu_fname FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code = T2.class_code JOIN student AS T3 ON T2.stu_num = T3.stu_num WHERE T1.crs_code = 'ACCT-211'", "example": {"db_id": "college_1", "query": "SELECT T3.stu_fname FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T2.stu_num  =  T3.stu_num WHERE T1.crs_code  =  'ACCT-211'", "query_toks": ["SELECT", "T3.stu_fname", "FROM", "CLASS", "AS", "T1", "JOIN", "enroll", "AS", "T2", "ON", "T1.class_code", "=", "T2.class_code", "JOIN", "student", "AS", "T3", "ON", "T2.stu_num", "=", "T3.stu_num", "WHERE", "T1.crs_code", "=", "'ACCT-211", "'"], "query_toks_no_value": ["select", "t3", ".", "stu_fname", "from", "class", "as", "t1", "join", "enroll", "as", "t2", "on", "t1", ".", "class_code", "=", "t2", ".", "class_code", "join", "student", "as", "t3", "on", "t2", ".", "stu_num", "=", "t3", ".", "stu_num", "where", "t1", ".", "crs_code", "=", "value"], "question": "What are the first names of all students in course ACCT-211?", "question_toks": ["What", "are", "the", "first", "names", "of", "all", "students", "in", "course", "ACCT-211", "?"], "guid": 8191}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | Find the department with the most employees.", "sql": "SELECT name FROM department GROUP BY departmentID ORDER BY count(departmentID) DESC LIMIT 1;", "example": {"db_id": "hospital_1", "query": "SELECT name FROM department GROUP BY departmentID ORDER BY count(departmentID) DESC LIMIT 1;", "query_toks": ["SELECT", "name", "FROM", "department", "GROUP", "BY", "departmentID", "ORDER", "BY", "count", "(", "departmentID", ")", "DESC", "LIMIT", "1", ";"], "query_toks_no_value": ["select", "name", "from", "department", "group", "by", "departmentid", "order", "by", "count", "(", "departmentid", ")", "desc", "limit", "value"], "question": "Find the department with the most employees.", "question_toks": ["Find", "the", "department", "with", "the", "most", "employees", "."], "guid": 8309}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | Which campus was opened between 1935 and 1939?", "sql": "SELECT campus FROM campuses WHERE YEAR >= 1935 AND YEAR <= 1939", "example": {"db_id": "csu_1", "query": "SELECT campus FROM campuses WHERE YEAR  >=  1935 AND YEAR  <=  1939", "query_toks": ["SELECT", "campus", "FROM", "campuses", "WHERE", "YEAR", ">", "=", "1935", "AND", "YEAR", "<", "=", "1939"], "query_toks_no_value": ["select", "campus", "from", "campuses", "where", "year", ">", "=", "value", "and", "year", "<", "=", "value"], "question": "Which campus was opened between 1935 and 1939?", "question_toks": ["Which", "campus", "was", "opened", "between", "1935", "and", "1939", "?"], "guid": 8129}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Find the room number of the rooms which can sit 50 to 100 students and their buildings.", "sql": "SELECT building, room_number FROM classroom WHERE capacity BETWEEN 50 AND 100", "example": {"db_id": "college_2", "query": "SELECT building ,  room_number FROM classroom WHERE capacity BETWEEN 50 AND 100", "query_toks": ["SELECT", "building", ",", "room_number", "FROM", "classroom", "WHERE", "capacity", "BETWEEN", "50", "AND", "100"], "query_toks_no_value": ["select", "building", ",", "room_number", "from", "classroom", "where", "capacity", "between", "value", "and", "value"], "question": "Find the room number of the rooms which can sit 50 to 100 students and their buildings.", "question_toks": ["Find", "the", "room", "number", "of", "the", "rooms", "which", "can", "sit", "50", "to", "100", "students", "and", "their", "buildings", "."], "guid": 8111}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | What are the names of the 3 departments with the most courses?", "sql": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY COUNT(*) DESC LIMIT 3", "example": {"db_id": "college_2", "query": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY count(*) DESC LIMIT 3", "query_toks": ["SELECT", "dept_name", "FROM", "course", "GROUP", "BY", "dept_name", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "3"], "query_toks_no_value": ["select", "dept_name", "from", "course", "group", "by", "dept_name", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What are the names of the 3 departments with the most courses?", "question_toks": ["What", "are", "the", "names", "of", "the", "3", "departments", "with", "the", "most", "courses", "?"], "guid": 8243}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Find the total number of students and total number of instructors for each department.", "sql": "SELECT count(DISTINCT T2.id) , count(DISTINCT T3.id) , T3.dept_name FROM department AS T1 JOIN student AS T2 ON T1.dept_name = T2.dept_name JOIN instructor AS T3 ON T1.dept_name = T3.dept_name GROUP BY T3.dept_name", "example": {"db_id": "college_2", "query": "SELECT count(DISTINCT T2.id) ,  count(DISTINCT T3.id) ,  T3.dept_name FROM department AS T1 JOIN student AS T2 ON T1.dept_name  =  T2.dept_name JOIN instructor AS T3 ON T1.dept_name  =  T3.dept_name GROUP BY T3.dept_name", "query_toks": ["SELECT", "count", "(", "DISTINCT", "T2.id", ")", ",", "count", "(", "DISTINCT", "T3.id", ")", ",", "T3.dept_name", "FROM", "department", "AS", "T1", "JOIN", "student", "AS", "T2", "ON", "T1.dept_name", "=", "T2.dept_name", "JOIN", "instructor", "AS", "T3", "ON", "T1.dept_name", "=", "T3.dept_name", "GROUP", "BY", "T3.dept_name"], "query_toks_no_value": ["select", "count", "(", "distinct", "t2", ".", "id", ")", ",", "count", "(", "distinct", "t3", ".", "id", ")", ",", "t3", ".", "dept_name", "from", "department", "as", "t1", "join", "student", "as", "t2", "on", "t1", ".", "dept_name", "=", "t2", ".", "dept_name", "join", "instructor", "as", "t3", "on", "t1", ".", "dept_name", "=", "t3", ".", "dept_name", "group", "by", "t3", ".", "dept_name"], "question": "Find the total number of students and total number of instructors for each department.", "question_toks": ["Find", "the", "total", "number", "of", "students", "and", "total", "number", "of", "instructors", "for", "each", "department", "."], "guid": 8261}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | Find the total number of employees.", "sql": "SELECT COUNT(*) FROM employee", "example": {"db_id": "college_1", "query": "SELECT count(*) FROM employee", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "employee"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "employee"], "question": "Find the total number of employees.", "question_toks": ["Find", "the", "total", "number", "of", "employees", "."], "guid": 8138}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | Find the first names of faculties of rank Professor in alphabetic order.", "sql": "SELECT fname FROM faculty WHERE rank = 'Professor' ORDER BY fname", "example": {"db_id": "college_3", "query": "SELECT Fname FROM FACULTY WHERE Rank  =  \"Professor\" ORDER BY Fname", "query_toks": ["SELECT", "Fname", "FROM", "FACULTY", "WHERE", "Rank", "=", "``", "Professor", "''", "ORDER", "BY", "Fname"], "query_toks_no_value": ["select", "fname", "from", "faculty", "where", "rank", "=", "value", "order", "by", "fname"], "question": "Find the first names of faculties of rank Professor in alphabetic order.", "question_toks": ["Find", "the", "first", "names", "of", "faculties", "of", "rank", "Professor", "in", "alphabetic", "order", "."], "guid": 8360}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | How many degrees were conferred in \"San Jose State University\" in 2000?", "sql": "SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id = t2.campus WHERE t1.campus = \"San Jose State University\" AND t2.year = 2000", "example": {"db_id": "csu_1", "query": "SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  \"San Jose State University\" AND t2.year  =  2000", "query_toks": ["SELECT", "degrees", "FROM", "campuses", "AS", "T1", "JOIN", "degrees", "AS", "T2", "ON", "t1.id", "=", "t2.campus", "WHERE", "t1.campus", "=", "``", "San", "Jose", "State", "University", "''", "AND", "t2.year", "=", "2000"], "query_toks_no_value": ["select", "degrees", "from", "campuses", "as", "t1", "join", "degrees", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "campus", "where", "t1", ".", "campus", "=", "value", "and", "t2", ".", "year", "=", "value"], "question": "How many degrees were conferred in \"San Jose State University\" in 2000?", "question_toks": ["How", "many", "degrees", "were", "conferred", "in", "``", "San", "Jose", "State", "University", "''", "in", "2000", "?"], "guid": 8156}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Find the number of courses provided in each semester and year.", "sql": "SELECT count(*) , semester , YEAR FROM SECTION GROUP BY semester , YEAR", "example": {"db_id": "college_2", "query": "SELECT count(*) ,  semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "semester", ",", "YEAR", "FROM", "SECTION", "GROUP", "BY", "semester", ",", "YEAR"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "semester", ",", "year", "from", "section", "group", "by", "semester", ",", "year"], "question": "Find the number of courses provided in each semester and year.", "question_toks": ["Find", "the", "number", "of", "courses", "provided", "in", "each", "semester", "and", "year", "."], "guid": 8311}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | Which campus has the most degrees conferred in all times?", "sql": "SELECT campus FROM degrees GROUP BY campus ORDER BY sum(degrees) DESC LIMIT 1", "example": {"db_id": "csu_1", "query": "SELECT campus FROM degrees GROUP BY campus ORDER BY sum(degrees) DESC LIMIT 1", "query_toks": ["SELECT", "campus", "FROM", "degrees", "GROUP", "BY", "campus", "ORDER", "BY", "sum", "(", "degrees", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "campus", "from", "degrees", "group", "by", "campus", "order", "by", "sum", "(", "degrees", ")", "desc", "limit", "value"], "question": "Which campus has the most degrees conferred in all times?", "question_toks": ["Which", "campus", "has", "the", "most", "degrees", "conferred", "in", "all", "times", "?"], "guid": 8246}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | What is the name of the department with an instructure who has a name like 'Soisalon'?", "sql": "SELECT dept_name FROM instructor WHERE name LIKE '%Soisalon%'", "example": {"db_id": "college_2", "query": "SELECT dept_name FROM instructor WHERE name LIKE '%Soisalon%'", "query_toks": ["SELECT", "dept_name", "FROM", "instructor", "WHERE", "name", "LIKE", "'", "%", "Soisalon", "%", "'"], "query_toks_no_value": ["select", "dept_name", "from", "instructor", "where", "name", "like", "value"], "question": "What is the name of the department with an instructure who has a name like 'Soisalon'?", "question_toks": ["What", "is", "the", "name", "of", "the", "department", "with", "an", "instructure", "who", "has", "a", "name", "like", "'Soisalon", "'", "?"], "guid": 8113}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | What are the last names of faculty who are part of the computer science department?", "sql": "SELECT T2.Lname FROM DEPARTMENT AS T1 JOIN FACULTY AS T2 ON T1.DNO  =  T3.DNO JOIN MEMBER_OF AS T3 ON T2.FacID  =  T3.FacID WHERE T1.DName  =  \"Computer Science\"", "example": {"db_id": "college_3", "query": "SELECT T2.Lname FROM DEPARTMENT AS T1 JOIN FACULTY AS T2 ON T1.DNO  =  T3.DNO JOIN MEMBER_OF AS T3 ON T2.FacID  =  T3.FacID WHERE T1.DName  =  \"Computer Science\"", "query_toks": ["SELECT", "T2.Lname", "FROM", "DEPARTMENT", "AS", "T1", "JOIN", "FACULTY", "AS", "T2", "ON", "T1.DNO", "=", "T3.DNO", "JOIN", "MEMBER_OF", "AS", "T3", "ON", "T2.FacID", "=", "T3.FacID", "WHERE", "T1.DName", "=", "``", "Computer", "Science", "''"], "query_toks_no_value": ["select", "t2", ".", "lname", "from", "department", "as", "t1", "join", "faculty", "as", "t2", "on", "t1", ".", "dno", "=", "t3", ".", "dno", "join", "member_of", "as", "t3", "on", "t2", ".", "facid", "=", "t3", ".", "facid", "where", "t1", ".", "dname", "=", "value"], "question": "What are the last names of faculty who are part of the computer science department?", "question_toks": ["What", "are", "the", "last", "names", "of", "faculty", "who", "are", "part", "of", "the", "computer", "science", "department", "?"], "guid": 8389}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Find the name of the department that offers the highest total credits?", "sql": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY sum(credits) DESC LIMIT 1", "example": {"db_id": "college_2", "query": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY sum(credits) DESC LIMIT 1", "query_toks": ["SELECT", "dept_name", "FROM", "course", "GROUP", "BY", "dept_name", "ORDER", "BY", "sum", "(", "credits", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "dept_name", "from", "course", "group", "by", "dept_name", "order", "by", "sum", "(", "credits", ")", "desc", "limit", "value"], "question": "Find the name of the department that offers the highest total credits?", "question_toks": ["Find", "the", "name", "of", "the", "department", "that", "offers", "the", "highest", "total", "credits", "?"], "guid": 8122}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What is the name of department where has the largest number of professors with a Ph.D. degree?", "sql": "SELECT T2.dept_name , T1.dept_code FROM professor AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code WHERE T1.prof_high_degree = 'Ph.D.' GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "college_1", "query": "SELECT T2.dept_name ,  T1.dept_code FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE T1.prof_high_degree  =  'Ph.D.' GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T2.dept_name", ",", "T1.dept_code", "FROM", "professor", "AS", "T1", "JOIN", "department", "AS", "T2", "ON", "T1.dept_code", "=", "T2.dept_code", "WHERE", "T1.prof_high_degree", "=", "'Ph.D", ".", "'", "GROUP", "BY", "T1.dept_code", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "dept_name", ",", "t1", ".", "dept_code", "from", "professor", "as", "t1", "join", "department", "as", "t2", "on", "t1", ".", "dept_code", "=", "t2", ".", "dept_code", "where", "t1", ".", "prof_high_degree", "=", "value", "group", "by", "t1", ".", "dept_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the name of department where has the largest number of professors with a Ph.D. degree?", "question_toks": ["What", "is", "the", "name", "of", "department", "where", "has", "the", "largest", "number", "of", "professors", "with", "a", "Ph.D.", "degree", "?"], "guid": 8150}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | Give the phones for departments in room 268.", "sql": "SELECT dphone FROM department WHERE room = 268", "example": {"db_id": "college_3", "query": "SELECT DPhone FROM DEPARTMENT WHERE Room  =  268", "query_toks": ["SELECT", "DPhone", "FROM", "DEPARTMENT", "WHERE", "Room", "=", "268"], "query_toks_no_value": ["select", "dphone", "from", "department", "where", "room", "=", "value"], "question": "Give the phones for departments in room 268.", "question_toks": ["Give", "the", "phones", "for", "departments", "in", "room", "268", "."], "guid": 8394}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | How many hours do the students spend studying in each department?", "sql": "SELECT sum(stu_hrs) , dept_code FROM student GROUP BY dept_code", "example": {"db_id": "college_1", "query": "SELECT sum(stu_hrs) ,  dept_code FROM student GROUP BY dept_code", "query_toks": ["SELECT", "sum", "(", "stu_hrs", ")", ",", "dept_code", "FROM", "student", "GROUP", "BY", "dept_code"], "query_toks_no_value": ["select", "sum", "(", "stu_hrs", ")", ",", "dept_code", "from", "student", "group", "by", "dept_code"], "question": "How many hours do the students spend studying in each department?", "question_toks": ["How", "many", "hours", "do", "the", "students", "spend", "studying", "in", "each", "department", "?"], "guid": 8363}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Find the name of students who didn't take any course from Biology department.", "sql": "SELECT name FROM student WHERE id NOT IN (SELECT T1.id FROM takes AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.dept_name  =  'Biology')", "example": {"db_id": "college_2", "query": "SELECT name FROM student WHERE id NOT IN (SELECT T1.id FROM takes AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.dept_name  =  'Biology')", "query_toks": ["SELECT", "name", "FROM", "student", "WHERE", "id", "NOT", "IN", "(", "SELECT", "T1.id", "FROM", "takes", "AS", "T1", "JOIN", "course", "AS", "T2", "ON", "T1.course_id", "=", "T2.course_id", "WHERE", "T2.dept_name", "=", "'Biology", "'", ")"], "query_toks_no_value": ["select", "name", "from", "student", "where", "id", "not", "in", "(", "select", "t1", ".", "id", "from", "takes", "as", "t1", "join", "course", "as", "t2", "on", "t1", ".", "course_id", "=", "t2", ".", "course_id", "where", "t2", ".", "dept_name", "=", "value", ")"], "question": "Find the name of students who didn't take any course from Biology department.", "question_toks": ["Find", "the", "name", "of", "students", "who", "did", "n't", "take", "any", "course", "from", "Biology", "department", "."], "guid": 8121}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | What are the names of all instructors with a higher salary than any of the instructors in the Biology department?", "sql": "SELECT name FROM instructor WHERE salary > (SELECT MAX(salary) FROM instructor WHERE dept_name = 'Biology')", "example": {"db_id": "college_2", "query": "SELECT name FROM instructor WHERE salary  >  (SELECT max(salary) FROM instructor WHERE dept_name  =  'Biology')", "query_toks": ["SELECT", "name", "FROM", "instructor", "WHERE", "salary", ">", "(", "SELECT", "max", "(", "salary", ")", "FROM", "instructor", "WHERE", "dept_name", "=", "'Biology", "'", ")"], "query_toks_no_value": ["select", "name", "from", "instructor", "where", "salary", ">", "(", "select", "max", "(", "salary", ")", "from", "instructor", "where", "dept_name", "=", "value", ")"], "question": "What are the names of all instructors with a higher salary than any of the instructors in the Biology department?", "question_toks": ["What", "are", "the", "names", "of", "all", "instructors", "with", "a", "higher", "salary", "than", "any", "of", "the", "instructors", "in", "the", "Biology", "department", "?"], "guid": 8310}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | Give the names of the courses with at least five enrollments.", "sql": "SELECT T1.CName FROM COURSE AS T1 JOIN ENROLLED_IN AS T2 ON T1.CID  =  T2.CID GROUP BY T2.CID HAVING COUNT(*)  >=  5", "example": {"db_id": "college_3", "query": "SELECT T1.CName FROM COURSE AS T1 JOIN ENROLLED_IN AS T2 ON T1.CID  =  T2.CID GROUP BY T2.CID HAVING COUNT(*)  >=  5", "query_toks": ["SELECT", "T1.CName", "FROM", "COURSE", "AS", "T1", "JOIN", "ENROLLED_IN", "AS", "T2", "ON", "T1.CID", "=", "T2.CID", "GROUP", "BY", "T2.CID", "HAVING", "COUNT", "(", "*", ")", ">", "=", "5"], "query_toks_no_value": ["select", "t1", ".", "cname", "from", "course", "as", "t1", "join", "enrolled_in", "as", "t2", "on", "t1", ".", "cid", "=", "t2", ".", "cid", "group", "by", "t2", ".", "cid", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "Give the names of the courses with at least five enrollments.", "question_toks": ["Give", "the", "names", "of", "the", "courses", "with", "at", "least", "five", "enrollments", "."], "guid": 8426}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | Find the last name of female (sex is F) students in the descending order of age.", "sql": "SELECT lname FROM student WHERE sex = 'F' ORDER BY age DESC", "example": {"db_id": "college_3", "query": "SELECT LName FROM STUDENT WHERE Sex  =  \"F\" ORDER BY Age DESC", "query_toks": ["SELECT", "LName", "FROM", "STUDENT", "WHERE", "Sex", "=", "``", "F", "''", "ORDER", "BY", "Age", "DESC"], "query_toks_no_value": ["select", "lname", "from", "student", "where", "sex", "=", "value", "order", "by", "age", "desc"], "question": "Find the last name of female (sex is F) students in the descending order of age.", "question_toks": ["Find", "the", "last", "name", "of", "female", "(", "sex", "is", "F", ")", "students", "in", "the", "descending", "order", "of", "age", "."], "guid": 8404}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | How many students are in each department?", "sql": "SELECT count(*) ,  dept_name FROM student GROUP BY dept_name", "example": {"db_id": "college_2", "query": "SELECT count(*) ,  dept_name FROM student GROUP BY dept_name", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "dept_name", "FROM", "student", "GROUP", "BY", "dept_name"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "dept_name", "from", "student", "group", "by", "dept_name"], "question": "How many students are in each department?", "question_toks": ["How", "many", "students", "are", "in", "each", "department", "?"], "guid": 8208}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What is the count and code of the job with the most employee?", "sql": "SELECT emp_jobcode , count(*) FROM employee GROUP BY emp_jobcode ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "college_1", "query": "SELECT emp_jobcode ,  count(*) FROM employee GROUP BY emp_jobcode ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "emp_jobcode", ",", "count", "(", "*", ")", "FROM", "employee", "GROUP", "BY", "emp_jobcode", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "emp_jobcode", ",", "count", "(", "*", ")", "from", "employee", "group", "by", "emp_jobcode", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the count and code of the job with the most employee?", "question_toks": ["What", "is", "the", "count", "and", "code", "of", "the", "job", "with", "the", "most", "employee", "?"], "guid": 8432}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | Find the rank of the faculty that the fewest faculties belong to.", "sql": "SELECT Rank FROM FACULTY GROUP BY Rank ORDER BY COUNT(*) ASC LIMIT 1", "example": {"db_id": "college_3", "query": "SELECT Rank FROM FACULTY GROUP BY Rank ORDER BY count(*) ASC LIMIT 1", "query_toks": ["SELECT", "Rank", "FROM", "FACULTY", "GROUP", "BY", "Rank", "ORDER", "BY", "count", "(", "*", ")", "ASC", "LIMIT", "1"], "query_toks_no_value": ["select", "rank", "from", "faculty", "group", "by", "rank", "order", "by", "count", "(", "*", ")", "asc", "limit", "value"], "question": "Find the rank of the faculty that the fewest faculties belong to.", "question_toks": ["Find", "the", "rank", "of", "the", "faculty", "that", "the", "fewest", "faculties", "belong", "to", "."], "guid": 8410}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | Find the name of the department that offers the largest number of credits of all classes.", "sql": "SELECT T3.dept_name FROM course AS T1 JOIN class AS T2 ON T1.crs_code = T2.crs_code JOIN department AS T3 ON T1.dept_code = T3.dept_code GROUP BY T1.dept_code ORDER BY SUM(T1.crs_credit) DESC LIMIT 1", "example": {"db_id": "college_1", "query": "SELECT T3.dept_name FROM course AS T1 JOIN CLASS AS T2 ON T1.crs_code  =  T2.crs_code JOIN department AS T3 ON T1.dept_code  =  T3.dept_code GROUP BY T1.dept_code ORDER BY sum(T1.crs_credit) DESC LIMIT 1", "query_toks": ["SELECT", "T3.dept_name", "FROM", "course", "AS", "T1", "JOIN", "CLASS", "AS", "T2", "ON", "T1.crs_code", "=", "T2.crs_code", "JOIN", "department", "AS", "T3", "ON", "T1.dept_code", "=", "T3.dept_code", "GROUP", "BY", "T1.dept_code", "ORDER", "BY", "sum", "(", "T1.crs_credit", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t3", ".", "dept_name", "from", "course", "as", "t1", "join", "class", "as", "t2", "on", "t1", ".", "crs_code", "=", "t2", ".", "crs_code", "join", "department", "as", "t3", "on", "t1", ".", "dept_code", "=", "t3", ".", "dept_code", "group", "by", "t1", ".", "dept_code", "order", "by", "sum", "(", "t1", ".", "crs_credit", ")", "desc", "limit", "value"], "question": "Find the name of the department that offers the largest number of credits of all classes.", "question_toks": ["Find", "the", "name", "of", "the", "department", "that", "offers", "the", "largest", "number", "of", "credits", "of", "all", "classes", "."], "guid": 8359}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | What are the unique block codes that have available rooms?", "sql": "SELECT DISTINCT blockcode FROM room WHERE unavailable = 0", "example": {"db_id": "hospital_1", "query": "SELECT DISTINCT blockcode FROM room WHERE unavailable  =  0", "query_toks": ["SELECT", "DISTINCT", "blockcode", "FROM", "room", "WHERE", "unavailable", "=", "0"], "query_toks_no_value": ["select", "distinct", "blockcode", "from", "room", "where", "unavailable", "=", "value"], "question": "What are the unique block codes that have available rooms?", "question_toks": ["What", "are", "the", "unique", "block", "codes", "that", "have", "available", "rooms", "?"], "guid": 8124}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | Find the name of department that offers the class whose description has the word \"Statistics\".", "sql": "SELECT T2.dept_name FROM course AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code WHERE T1.crs_description LIKE '%Statistics%'", "example": {"db_id": "college_1", "query": "SELECT T2.dept_name FROM course AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE T1.crs_description LIKE '%Statistics%'", "query_toks": ["SELECT", "T2.dept_name", "FROM", "course", "AS", "T1", "JOIN", "department", "AS", "T2", "ON", "T1.dept_code", "=", "T2.dept_code", "WHERE", "T1.crs_description", "LIKE", "'", "%", "Statistics", "%", "'"], "query_toks_no_value": ["select", "t2", ".", "dept_name", "from", "course", "as", "t1", "join", "department", "as", "t2", "on", "t1", ".", "dept_code", "=", "t2", ".", "dept_code", "where", "t1", ".", "crs_description", "like", "value"], "question": "Find the name of department that offers the class whose description has the word \"Statistics\".", "question_toks": ["Find", "the", "name", "of", "department", "that", "offers", "the", "class", "whose", "description", "has", "the", "word", "``", "Statistics", "''", "."], "guid": 8247}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Give the name of the department with the lowest budget.", "sql": "SELECT dept_name FROM department ORDER BY budget ASC LIMIT 1", "example": {"db_id": "college_2", "query": "SELECT dept_name FROM department ORDER BY budget LIMIT 1", "query_toks": ["SELECT", "dept_name", "FROM", "department", "ORDER", "BY", "budget", "LIMIT", "1"], "query_toks_no_value": ["select", "dept_name", "from", "department", "order", "by", "budget", "limit", "value"], "question": "Give the name of the department with the lowest budget.", "question_toks": ["Give", "the", "name", "of", "the", "department", "with", "the", "lowest", "budget", "."], "guid": 8185}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What is the name and address of the department with the most students?", "sql": "SELECT T2.dept_name, T2.dept_address FROM student AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "college_1", "query": "SELECT T2.dept_name ,  T2.dept_address FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T2.dept_name", ",", "T2.dept_address", "FROM", "student", "AS", "T1", "JOIN", "department", "AS", "T2", "ON", "T1.dept_code", "=", "T2.dept_code", "GROUP", "BY", "T1.dept_code", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "dept_name", ",", "t2", ".", "dept_address", "from", "student", "as", "t1", "join", "department", "as", "t2", "on", "t1", ".", "dept_code", "=", "t2", ".", "dept_code", "group", "by", "t1", ".", "dept_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the name and address of the department with the most students?", "question_toks": ["What", "is", "the", "name", "and", "address", "of", "the", "department", "with", "the", "most", "students", "?"], "guid": 8245}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Give the name of the student in the History department with the most credits.", "sql": "SELECT name FROM student WHERE dept_name = 'History' ORDER BY tot_cred DESC LIMIT 1", "example": {"db_id": "college_2", "query": "SELECT name FROM student WHERE dept_name  =  'History' ORDER BY tot_cred DESC LIMIT 1", "query_toks": ["SELECT", "name", "FROM", "student", "WHERE", "dept_name", "=", "'History", "'", "ORDER", "BY", "tot_cred", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "name", "from", "student", "where", "dept_name", "=", "value", "order", "by", "tot_cred", "desc", "limit", "value"], "question": "Give the name of the student in the History department with the most credits.", "question_toks": ["Give", "the", "name", "of", "the", "student", "in", "the", "History", "department", "with", "the", "most", "credits", "."], "guid": 8307}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | Which nurses are in charge of patients undergoing treatments?", "sql": "SELECT DISTINCT T2.name FROM undergoes AS T1 JOIN nurse AS T2 ON T1.AssistingNurse = T2.EmployeeID", "example": {"db_id": "hospital_1", "query": "SELECT DISTINCT T2.name FROM undergoes AS T1 JOIN nurse AS T2 ON T1.AssistingNurse  =  T2.EmployeeID", "query_toks": ["SELECT", "DISTINCT", "T2.name", "FROM", "undergoes", "AS", "T1", "JOIN", "nurse", "AS", "T2", "ON", "T1.AssistingNurse", "=", "T2.EmployeeID"], "query_toks_no_value": ["select", "distinct", "t2", ".", "name", "from", "undergoes", "as", "t1", "join", "nurse", "as", "t2", "on", "t1", ".", "assistingnurse", "=", "t2", ".", "employeeid"], "question": "Which nurses are in charge of patients undergoing treatments?", "question_toks": ["Which", "nurses", "are", "in", "charge", "of", "patients", "undergoing", "treatments", "?"], "guid": 8414}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | What are the names of students who have taken the prerequisite for the course International Finance?", "sql": "SELECT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE T2.course_id IN (SELECT T4.prereq_id FROM course AS T3 JOIN prereq AS T4 ON T3.course_id  =  T4.course_id WHERE T3.title  =  'International Finance')", "example": {"db_id": "college_2", "query": "SELECT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE T2.course_id IN (SELECT T4.prereq_id FROM course AS T3 JOIN prereq AS T4 ON T3.course_id  =  T4.course_id WHERE T3.title  =  'International Finance')", "query_toks": ["SELECT", "T1.name", "FROM", "student", "AS", "T1", "JOIN", "takes", "AS", "T2", "ON", "T1.id", "=", "T2.id", "WHERE", "T2.course_id", "IN", "(", "SELECT", "T4.prereq_id", "FROM", "course", "AS", "T3", "JOIN", "prereq", "AS", "T4", "ON", "T3.course_id", "=", "T4.course_id", "WHERE", "T3.title", "=", "'International", "Finance", "'", ")"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "student", "as", "t1", "join", "takes", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "id", "where", "t2", ".", "course_id", "in", "(", "select", "t4", ".", "prereq_id", "from", "course", "as", "t3", "join", "prereq", "as", "t4", "on", "t3", ".", "course_id", "=", "t4", ".", "course_id", "where", "t3", ".", "title", "=", "value", ")"], "question": "What are the names of students who have taken the prerequisite for the course International Finance?", "question_toks": ["What", "are", "the", "names", "of", "students", "who", "have", "taken", "the", "prerequisite", "for", "the", "course", "International", "Finance", "?"], "guid": 8348}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | What are the ids of courses without prerequisites?", "sql": "SELECT course_id FROM course EXCEPT SELECT course_id FROM prereq", "example": {"db_id": "college_2", "query": "SELECT course_id FROM course EXCEPT SELECT course_id FROM prereq", "query_toks": ["SELECT", "course_id", "FROM", "course", "EXCEPT", "SELECT", "course_id", "FROM", "prereq"], "query_toks_no_value": ["select", "course_id", "from", "course", "except", "select", "course_id", "from", "prereq"], "question": "What are the ids of courses without prerequisites?", "question_toks": ["What", "are", "the", "ids", "of", "courses", "without", "prerequisites", "?"], "guid": 8252}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | What are the names of patients who are staying in room 111 and have an undergoing treatment?", "sql": "SELECT DISTINCT T2.name FROM undergoes AS T1 JOIN patient AS T2 ON T1.patient = T2.SSN JOIN stay AS T3 ON T1.Stay = T3.StayID WHERE T3.room = 111", "example": {"db_id": "hospital_1", "query": "SELECT DISTINCT T2.name FROM undergoes AS T1 JOIN patient AS T2 ON T1.patient = T2.SSN JOIN stay AS T3 ON T1.Stay  =  T3.StayID WHERE T3.room  =  111", "query_toks": ["SELECT", "DISTINCT", "T2.name", "FROM", "undergoes", "AS", "T1", "JOIN", "patient", "AS", "T2", "ON", "T1.patient", "=", "T2.SSN", "JOIN", "stay", "AS", "T3", "ON", "T1.Stay", "=", "T3.StayID", "WHERE", "T3.room", "=", "111"], "query_toks_no_value": ["select", "distinct", "t2", ".", "name", "from", "undergoes", "as", "t1", "join", "patient", "as", "t2", "on", "t1", ".", "patient", "=", "t2", ".", "ssn", "join", "stay", "as", "t3", "on", "t1", ".", "stay", "=", "t3", ".", "stayid", "where", "t3", ".", "room", "=", "value"], "question": "What are the names of patients who are staying in room 111 and have an undergoing treatment?", "question_toks": ["What", "are", "the", "names", "of", "patients", "who", "are", "staying", "in", "room", "111", "and", "have", "an", "undergoing", "treatment", "?"], "guid": 8369}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Find the name of students who took some course offered by Statistics department.", "sql": "SELECT T3.name FROM course AS T1 JOIN takes AS T2 ON T1.course_id = T2.course_id JOIN student AS T3 ON T2.id = T3.id WHERE T1.dept_name = 'Statistics'", "example": {"db_id": "college_2", "query": "SELECT T3.name FROM course AS T1 JOIN takes AS T2 ON T1.course_id  =  T2.course_id JOIN student AS T3 ON T2.id  =  T3.id WHERE T1.dept_name  =  'Statistics'", "query_toks": ["SELECT", "T3.name", "FROM", "course", "AS", "T1", "JOIN", "takes", "AS", "T2", "ON", "T1.course_id", "=", "T2.course_id", "JOIN", "student", "AS", "T3", "ON", "T2.id", "=", "T3.id", "WHERE", "T1.dept_name", "=", "'Statistics", "'"], "query_toks_no_value": ["select", "t3", ".", "name", "from", "course", "as", "t1", "join", "takes", "as", "t2", "on", "t1", ".", "course_id", "=", "t2", ".", "course_id", "join", "student", "as", "t3", "on", "t2", ".", "id", "=", "t3", ".", "id", "where", "t1", ".", "dept_name", "=", "value"], "question": "Find the name of students who took some course offered by Statistics department.", "question_toks": ["Find", "the", "name", "of", "students", "who", "took", "some", "course", "offered", "by", "Statistics", "department", "."], "guid": 8239}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | Tell me the employee id of the head of the department with the least employees.", "sql": "SELECT head FROM department GROUP BY departmentID ORDER BY count(departmentID) LIMIT 1", "example": {"db_id": "hospital_1", "query": "SELECT head FROM department GROUP BY departmentID ORDER BY count(departmentID) LIMIT 1;", "query_toks": ["SELECT", "head", "FROM", "department", "GROUP", "BY", "departmentID", "ORDER", "BY", "count", "(", "departmentID", ")", "LIMIT", "1", ";"], "query_toks_no_value": ["select", "head", "from", "department", "group", "by", "departmentid", "order", "by", "count", "(", "departmentid", ")", "limit", "value"], "question": "Tell me the employee id of the head of the department with the least employees.", "question_toks": ["Tell", "me", "the", "employee", "id", "of", "the", "head", "of", "the", "department", "with", "the", "least", "employees", "."], "guid": 8127}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What are the last name and office of all history professors?", "sql": "SELECT T1.emp_lname , T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num = T2.emp_num JOIN department AS T3 ON T2.dept_code = T3.dept_code WHERE T3.dept_name = 'History'", "example": {"db_id": "college_1", "query": "SELECT T1.emp_lname ,  T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T2.dept_code  =  T3.dept_code WHERE T3.dept_name  =  'History'", "query_toks": ["SELECT", "T1.emp_lname", ",", "T2.prof_office", "FROM", "employee", "AS", "T1", "JOIN", "professor", "AS", "T2", "ON", "T1.emp_num", "=", "T2.emp_num", "JOIN", "department", "AS", "T3", "ON", "T2.dept_code", "=", "T3.dept_code", "WHERE", "T3.dept_name", "=", "'History", "'"], "query_toks_no_value": ["select", "t1", ".", "emp_lname", ",", "t2", ".", "prof_office", "from", "employee", "as", "t1", "join", "professor", "as", "t2", "on", "t1", ".", "emp_num", "=", "t2", ".", "emp_num", "join", "department", "as", "t3", "on", "t2", ".", "dept_code", "=", "t3", ".", "dept_code", "where", "t3", ".", "dept_name", "=", "value"], "question": "What are the last name and office of all history professors?", "question_toks": ["What", "are", "the", "last", "name", "and", "office", "of", "all", "history", "professors", "?"], "guid": 8409}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Given the titles of all courses, in order of titles and credits.", "sql": "SELECT title FROM course ORDER BY title, credits", "example": {"db_id": "college_2", "query": "SELECT title FROM course ORDER BY title ,  credits", "query_toks": ["SELECT", "title", "FROM", "course", "ORDER", "BY", "title", ",", "credits"], "query_toks_no_value": ["select", "title", "from", "course", "order", "by", "title", ",", "credits"], "question": "Given the titles of all courses, in order of titles and credits.", "question_toks": ["Given", "the", "titles", "of", "all", "courses", ",", "in", "order", "of", "titles", "and", "credits", "."], "guid": 8325}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | What are the names of instructors who have taught C Programming courses?", "sql": "SELECT T1.name FROM instructor AS T1 JOIN teaches AS T2 ON T1.id = T2.id JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T3.title = 'C Programming'", "example": {"db_id": "college_2", "query": "SELECT T1.name FROM instructor AS T1 JOIN teaches AS T2 ON T1.id  =  T2.id JOIN course AS T3 ON T2.course_id  =  T3.course_id WHERE T3.title  =  'C Programming'", "query_toks": ["SELECT", "T1.name", "FROM", "instructor", "AS", "T1", "JOIN", "teaches", "AS", "T2", "ON", "T1.id", "=", "T2.id", "JOIN", "course", "AS", "T3", "ON", "T2.course_id", "=", "T3.course_id", "WHERE", "T3.title", "=", "'C", "Programming", "'"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "instructor", "as", "t1", "join", "teaches", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "id", "join", "course", "as", "t3", "on", "t2", ".", "course_id", "=", "t3", ".", "course_id", "where", "t3", ".", "title", "=", "value"], "question": "What are the names of instructors who have taught C Programming courses?", "question_toks": ["What", "are", "the", "names", "of", "instructors", "who", "have", "taught", "C", "Programming", "courses", "?"], "guid": 8195}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | what are name and phone number of patients who had more than one appointment?", "sql": "SELECT name , phone FROM appointment AS T1 JOIN patient AS T2 ON T1.patient = T2.ssn GROUP BY T1.patient HAVING count(*) > 1", "example": {"db_id": "hospital_1", "query": "SELECT name ,  phone FROM appointment AS T1 JOIN patient AS T2 ON T1.patient  =  T2.ssn GROUP BY T1.patient HAVING count(*)  >  1", "query_toks": ["SELECT", "name", ",", "phone", "FROM", "appointment", "AS", "T1", "JOIN", "patient", "AS", "T2", "ON", "T1.patient", "=", "T2.ssn", "GROUP", "BY", "T1.patient", "HAVING", "count", "(", "*", ")", ">", "1"], "query_toks_no_value": ["select", "name", ",", "phone", "from", "appointment", "as", "t1", "join", "patient", "as", "t2", "on", "t1", ".", "patient", "=", "t2", ".", "ssn", "group", "by", "t1", ".", "patient", "having", "count", "(", "*", ")", ">", "value"], "question": "what are name and phone number of patients who had more than one appointment?", "question_toks": ["what", "are", "name", "and", "phone", "number", "of", "patients", "who", "had", "more", "than", "one", "appointment", "?"], "guid": 8340}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | What are the rooms for members of the faculty who are professors and who live in building NEB?", "sql": "SELECT Room FROM FACULTY WHERE Rank = \"Professor\" AND Building = \"NEB\"", "example": {"db_id": "college_3", "query": "SELECT Room FROM FACULTY WHERE Rank  =  \"Professor\" AND Building  =  \"NEB\"", "query_toks": ["SELECT", "Room", "FROM", "FACULTY", "WHERE", "Rank", "=", "``", "Professor", "''", "AND", "Building", "=", "``", "NEB", "''"], "query_toks_no_value": ["select", "room", "from", "faculty", "where", "rank", "=", "value", "and", "building", "=", "value"], "question": "What are the rooms for members of the faculty who are professors and who live in building NEB?", "question_toks": ["What", "are", "the", "rooms", "for", "members", "of", "the", "faculty", "who", "are", "professors", "and", "who", "live", "in", "building", "NEB", "?"], "guid": 8347}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Find the minimum salary for the departments whose average salary is above the average payment of all instructors.", "sql": "SELECT min(salary) , dept_name FROM instructor GROUP BY dept_name HAVING avg(salary) > (SELECT avg(salary) FROM instructor)", "example": {"db_id": "college_2", "query": "SELECT min(salary) ,  dept_name FROM instructor GROUP BY dept_name HAVING avg(salary)  >  (SELECT avg(salary) FROM instructor)", "query_toks": ["SELECT", "min", "(", "salary", ")", ",", "dept_name", "FROM", "instructor", "GROUP", "BY", "dept_name", "HAVING", "avg", "(", "salary", ")", ">", "(", "SELECT", "avg", "(", "salary", ")", "FROM", "instructor", ")"], "query_toks_no_value": ["select", "min", "(", "salary", ")", ",", "dept_name", "from", "instructor", "group", "by", "dept_name", "having", "avg", "(", "salary", ")", ">", "(", "select", "avg", "(", "salary", ")", "from", "instructor", ")"], "question": "Find the minimum salary for the departments whose average salary is above the average payment of all instructors.", "question_toks": ["Find", "the", "minimum", "salary", "for", "the", "departments", "whose", "average", "salary", "is", "above", "the", "average", "payment", "of", "all", "instructors", "."], "guid": 8286}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | How many credits is the course that the student with the last name Smithson took, and what is its description?", "sql": "SELECT T4.crs_description , T4.crs_credit FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code = T2.class_code JOIN student AS T3 ON T3.stu_num = T2.stu_num JOIN course AS T4 ON T4.crs_code = T1.crs_code WHERE T3.stu_lname = 'Smithson'", "example": {"db_id": "college_1", "query": "SELECT T4.crs_description ,  T4.crs_credit FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T3.stu_num  =  T2.stu_num JOIN course AS T4 ON T4.crs_code  =  T1.crs_code WHERE T3.stu_lname  =  'Smithson'", "query_toks": ["SELECT", "T4.crs_description", ",", "T4.crs_credit", "FROM", "CLASS", "AS", "T1", "JOIN", "enroll", "AS", "T2", "ON", "T1.class_code", "=", "T2.class_code", "JOIN", "student", "AS", "T3", "ON", "T3.stu_num", "=", "T2.stu_num", "JOIN", "course", "AS", "T4", "ON", "T4.crs_code", "=", "T1.crs_code", "WHERE", "T3.stu_lname", "=", "'Smithson", "'"], "query_toks_no_value": ["select", "t4", ".", "crs_description", ",", "t4", ".", "crs_credit", "from", "class", "as", "t1", "join", "enroll", "as", "t2", "on", "t1", ".", "class_code", "=", "t2", ".", "class_code", "join", "student", "as", "t3", "on", "t3", ".", "stu_num", "=", "t2", ".", "stu_num", "join", "course", "as", "t4", "on", "t4", ".", "crs_code", "=", "t1", ".", "crs_code", "where", "t3", ".", "stu_lname", "=", "value"], "question": "How many credits is the course that the student with the last name Smithson took, and what is its description?", "question_toks": ["How", "many", "credits", "is", "the", "course", "that", "the", "student", "with", "the", "last", "name", "Smithson", "took", ",", "and", "what", "is", "its", "description", "?"], "guid": 8170}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | What is the employee id of the head whose department has the least number of employees?", "sql": "SELECT head FROM department GROUP BY departmentID ORDER BY count(departmentID) LIMIT 1", "example": {"db_id": "hospital_1", "query": "SELECT head FROM department GROUP BY departmentID ORDER BY count(departmentID) LIMIT 1;", "query_toks": ["SELECT", "head", "FROM", "department", "GROUP", "BY", "departmentID", "ORDER", "BY", "count", "(", "departmentID", ")", "LIMIT", "1", ";"], "query_toks_no_value": ["select", "head", "from", "department", "group", "by", "departmentid", "order", "by", "count", "(", "departmentid", ")", "limit", "value"], "question": "What is the employee id of the head whose department has the least number of employees?", "question_toks": ["What", "is", "the", "employee", "id", "of", "the", "head", "whose", "department", "has", "the", "least", "number", "of", "employees", "?"], "guid": 8424}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | Find the names of departments that are either in division AS or in division EN and in Building NEB.", "sql": "SELECT DName FROM DEPARTMENT WHERE Division  =  \"AS\" UNION SELECT DName FROM DEPARTMENT WHERE Division  =  \"EN\" AND Building  =  \"NEB\"", "example": {"db_id": "college_3", "query": "SELECT DName FROM DEPARTMENT WHERE Division  =  \"AS\" UNION SELECT DName FROM DEPARTMENT WHERE Division  =  \"EN\" AND Building  =  \"NEB\"", "query_toks": ["SELECT", "DName", "FROM", "DEPARTMENT", "WHERE", "Division", "=", "``", "AS", "''", "UNION", "SELECT", "DName", "FROM", "DEPARTMENT", "WHERE", "Division", "=", "``", "EN", "''", "AND", "Building", "=", "``", "NEB", "''"], "query_toks_no_value": ["select", "dname", "from", "department", "where", "division", "=", "value", "union", "select", "dname", "from", "department", "where", "division", "=", "value", "and", "building", "=", "value"], "question": "Find the names of departments that are either in division AS or in division EN and in Building NEB.", "question_toks": ["Find", "the", "names", "of", "departments", "that", "are", "either", "in", "division", "AS", "or", "in", "division", "EN", "and", "in", "Building", "NEB", "."], "guid": 8423}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | What are the names of courses without prerequisites?", "sql": "SELECT title FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)", "example": {"db_id": "college_2", "query": "SELECT title FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)", "query_toks": ["SELECT", "title", "FROM", "course", "WHERE", "course_id", "NOT", "IN", "(", "SELECT", "course_id", "FROM", "prereq", ")"], "query_toks_no_value": ["select", "title", "from", "course", "where", "course_id", "not", "in", "(", "select", "course_id", "from", "prereq", ")"], "question": "What are the names of courses without prerequisites?", "question_toks": ["What", "are", "the", "names", "of", "courses", "without", "prerequisites", "?"], "guid": 8212}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Find courses that ran in Fall 2009 and in Spring 2010.", "sql": "SELECT course_id FROM section WHERE semester = 'Fall' AND year = 2009 INTERSECT SELECT course_id FROM section WHERE semester = 'Spring' AND year = 2010", "example": {"db_id": "college_2", "query": "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 INTERSECT SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010", "query_toks": ["SELECT", "course_id", "FROM", "SECTION", "WHERE", "semester", "=", "'Fall", "'", "AND", "YEAR", "=", "2009", "INTERSECT", "SELECT", "course_id", "FROM", "SECTION", "WHERE", "semester", "=", "'Spring", "'", "AND", "YEAR", "=", "2010"], "query_toks_no_value": ["select", "course_id", "from", "section", "where", "semester", "=", "value", "and", "year", "=", "value", "intersect", "select", "course_id", "from", "section", "where", "semester", "=", "value", "and", "year", "=", "value"], "question": "Find courses that ran in Fall 2009 and in Spring 2010.", "question_toks": ["Find", "courses", "that", "ran", "in", "Fall", "2009", "and", "in", "Spring", "2010", "."], "guid": 8335}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What are the first names of all students who took ACCT-211 and received a C?", "sql": "SELECT T3.stu_fname FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code = T2.class_code JOIN student AS T3 ON T2.stu_num = T3.stu_num WHERE T1.crs_code = 'ACCT-211' AND T2.enroll_grade = 'C'", "example": {"db_id": "college_1", "query": "SELECT T3.stu_fname FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T2.stu_num  =  T3.stu_num WHERE T1.crs_code  =  'ACCT-211' AND T2.enroll_grade  =  'C'", "query_toks": ["SELECT", "T3.stu_fname", "FROM", "CLASS", "AS", "T1", "JOIN", "enroll", "AS", "T2", "ON", "T1.class_code", "=", "T2.class_code", "JOIN", "student", "AS", "T3", "ON", "T2.stu_num", "=", "T3.stu_num", "WHERE", "T1.crs_code", "=", "'ACCT-211", "'", "AND", "T2.enroll_grade", "=", "'C", "'"], "query_toks_no_value": ["select", "t3", ".", "stu_fname", "from", "class", "as", "t1", "join", "enroll", "as", "t2", "on", "t1", ".", "class_code", "=", "t2", ".", "class_code", "join", "student", "as", "t3", "on", "t2", ".", "stu_num", "=", "t3", ".", "stu_num", "where", "t1", ".", "crs_code", "=", "value", "and", "t2", ".", "enroll_grade", "=", "value"], "question": "What are the first names of all students who took ACCT-211 and received a C?", "question_toks": ["What", "are", "the", "first", "names", "of", "all", "students", "who", "took", "ACCT-211", "and", "received", "a", "C", "?"], "guid": 8377}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | Find the first names and degree of all professors who are teaching some class in Computer Info. Systems department.", "sql": "SELECT DISTINCT T2.emp_fname , T3.prof_high_degree FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN professor AS T3 ON T2.emp_num = T3.emp_num JOIN department AS T4 ON T4.dept_code = T3.dept_code WHERE T4.dept_name = 'Computer Info. Systems'", "example": {"db_id": "college_1", "query": "SELECT DISTINCT T2.emp_fname ,  T3.prof_high_degree FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN professor AS T3 ON T2.emp_num  =  T3.emp_num JOIN department AS T4 ON T4.dept_code  =  T3.dept_code WHERE T4.dept_name  =  'Computer Info. Systems'", "query_toks": ["SELECT", "DISTINCT", "T2.emp_fname", ",", "T3.prof_high_degree", "FROM", "CLASS", "AS", "T1", "JOIN", "employee", "AS", "T2", "ON", "T1.prof_num", "=", "T2.emp_num", "JOIN", "professor", "AS", "T3", "ON", "T2.emp_num", "=", "T3.emp_num", "JOIN", "department", "AS", "T4", "ON", "T4.dept_code", "=", "T3.dept_code", "WHERE", "T4.dept_name", "=", "'Computer", "Info", ".", "Systems", "'"], "query_toks_no_value": ["select", "distinct", "t2", ".", "emp_fname", ",", "t3", ".", "prof_high_degree", "from", "class", "as", "t1", "join", "employee", "as", "t2", "on", "t1", ".", "prof_num", "=", "t2", ".", "emp_num", "join", "professor", "as", "t3", "on", "t2", ".", "emp_num", "=", "t3", ".", "emp_num", "join", "department", "as", "t4", "on", "t4", ".", "dept_code", "=", "t3", ".", "dept_code", "where", "t4", ".", "dept_name", "=", "value"], "question": "Find the first names and degree of all professors who are teaching some class in Computer Info. Systems department.", "question_toks": ["Find", "the", "first", "names", "and", "degree", "of", "all", "professors", "who", "are", "teaching", "some", "class", "in", "Computer", "Info", ".", "Systems", "department", "."], "guid": 8225}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Find the name of instructors who are advisors of the students from the Math department, and sort the results by students' total credit.", "sql": "SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id = T2.id JOIN student AS T3 ON T1.s_id = T3.id WHERE T3.dept_name = 'Math' ORDER BY T3.tot_cred", "example": {"db_id": "college_2", "query": "SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'Math' ORDER BY T3.tot_cred", "query_toks": ["SELECT", "T2.name", "FROM", "advisor", "AS", "T1", "JOIN", "instructor", "AS", "T2", "ON", "T1.i_id", "=", "T2.id", "JOIN", "student", "AS", "T3", "ON", "T1.s_id", "=", "T3.id", "WHERE", "T3.dept_name", "=", "'Math", "'", "ORDER", "BY", "T3.tot_cred"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "advisor", "as", "t1", "join", "instructor", "as", "t2", "on", "t1", ".", "i_id", "=", "t2", ".", "id", "join", "student", "as", "t3", "on", "t1", ".", "s_id", "=", "t3", ".", "id", "where", "t3", ".", "dept_name", "=", "value", "order", "by", "t3", ".", "tot_cred"], "question": "Find the name of instructors who are advisors of the students from the Math department, and sort the results by students' total credit.", "question_toks": ["Find", "the", "name", "of", "instructors", "who", "are", "advisors", "of", "the", "students", "from", "the", "Math", "department", ",", "and", "sort", "the", "results", "by", "students", "'", "total", "credit", "."], "guid": 8176}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | List the course name of courses sorted by credits.", "sql": "SELECT cname FROM course ORDER BY credits", "example": {"db_id": "college_3", "query": "SELECT CName FROM COURSE ORDER BY Credits", "query_toks": ["SELECT", "CName", "FROM", "COURSE", "ORDER", "BY", "Credits"], "query_toks_no_value": ["select", "cname", "from", "course", "order", "by", "credits"], "question": "List the course name of courses sorted by credits.", "question_toks": ["List", "the", "course", "name", "of", "courses", "sorted", "by", "credits", "."], "guid": 8403}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What are the first names of all professors not teaching any classes?", "sql": "SELECT emp_fname FROM employee WHERE emp_jobcode = 'PROF' EXCEPT SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num = T2.prof_num", "example": {"db_id": "college_1", "query": "SELECT emp_fname FROM employee WHERE emp_jobcode  =  'PROF' EXCEPT SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num  =  T2.prof_num", "query_toks": ["SELECT", "emp_fname", "FROM", "employee", "WHERE", "emp_jobcode", "=", "'PROF", "'", "EXCEPT", "SELECT", "T1.emp_fname", "FROM", "employee", "AS", "T1", "JOIN", "CLASS", "AS", "T2", "ON", "T1.emp_num", "=", "T2.prof_num"], "query_toks_no_value": ["select", "emp_fname", "from", "employee", "where", "emp_jobcode", "=", "value", "except", "select", "t1", ".", "emp_fname", "from", "employee", "as", "t1", "join", "class", "as", "t2", "on", "t1", ".", "emp_num", "=", "t2", ".", "prof_num"], "question": "What are the first names of all professors not teaching any classes?", "question_toks": ["What", "are", "the", "first", "names", "of", "all", "professors", "not", "teaching", "any", "classes", "?"], "guid": 8275}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | Find the names of courses that have either 3 credits or 1 credit but 4 hours.", "sql": "SELECT CName FROM COURSE WHERE Credits = 3 UNION SELECT CName FROM COURSE WHERE Credits = 1 AND Hours = 4", "example": {"db_id": "college_3", "query": "SELECT CName FROM COURSE WHERE Credits  =  3 UNION SELECT CName FROM COURSE WHERE Credits  =  1 AND Hours  =  4", "query_toks": ["SELECT", "CName", "FROM", "COURSE", "WHERE", "Credits", "=", "3", "UNION", "SELECT", "CName", "FROM", "COURSE", "WHERE", "Credits", "=", "1", "AND", "Hours", "=", "4"], "query_toks_no_value": ["select", "cname", "from", "course", "where", "credits", "=", "value", "union", "select", "cname", "from", "course", "where", "credits", "=", "value", "and", "hours", "=", "value"], "question": "Find the names of courses that have either 3 credits or 1 credit but 4 hours.", "question_toks": ["Find", "the", "names", "of", "courses", "that", "have", "either", "3", "credits", "or", "1", "credit", "but", "4", "hours", "."], "guid": 8400}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | Find the names of patients who are not using the medication of Procrastin-X.", "sql": "SELECT name FROM patient EXCEPT SELECT T1.name FROM patient AS T1 JOIN Prescribes AS T2 ON T2.Patient = T1.SSN JOIN Medication AS T3 ON T2.Medication = T3.Code WHERE T3.name = 'Procrastin-X'", "example": {"db_id": "hospital_1", "query": "SELECT name FROM patient EXCEPT SELECT T1.name FROM patient AS T1 JOIN Prescribes AS T2 ON T2.Patient  =  T1.SSN JOIN Medication AS T3 ON T2.Medication  =  T3.Code WHERE T3.name  =  'Procrastin-X'", "query_toks": ["SELECT", "name", "FROM", "patient", "EXCEPT", "SELECT", "T1.name", "FROM", "patient", "AS", "T1", "JOIN", "Prescribes", "AS", "T2", "ON", "T2.Patient", "=", "T1.SSN", "JOIN", "Medication", "AS", "T3", "ON", "T2.Medication", "=", "T3.Code", "WHERE", "T3.name", "=", "'Procrastin-X", "'"], "query_toks_no_value": ["select", "name", "from", "patient", "except", "select", "t1", ".", "name", "from", "patient", "as", "t1", "join", "prescribes", "as", "t2", "on", "t2", ".", "patient", "=", "t1", ".", "ssn", "join", "medication", "as", "t3", "on", "t2", ".", "medication", "=", "t3", ".", "code", "where", "t3", ".", "name", "=", "value"], "question": "Find the names of patients who are not using the medication of Procrastin-X.", "question_toks": ["Find", "the", "names", "of", "patients", "who", "are", "not", "using", "the", "medication", "of", "Procrastin-X", "."], "guid": 8419}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | How many patients' prescriptions are made by physician John Dorian?", "sql": "SELECT COUNT(T1.SSN) FROM patient AS T1 JOIN prescribes AS T2 ON T1.SSN = T2.patient JOIN physician AS T3 ON T2.physician = T3.employeeid WHERE T3.name = \"John Dorian\"", "example": {"db_id": "hospital_1", "query": "SELECT count(T1.SSN) FROM patient AS T1 JOIN prescribes AS T2 ON T1.SSN  =  T2.patient JOIN physician AS T3 ON T2.physician  =  T3.employeeid WHERE T3.name = \"John Dorian\"", "query_toks": ["SELECT", "count", "(", "T1.SSN", ")", "FROM", "patient", "AS", "T1", "JOIN", "prescribes", "AS", "T2", "ON", "T1.SSN", "=", "T2.patient", "JOIN", "physician", "AS", "T3", "ON", "T2.physician", "=", "T3.employeeid", "WHERE", "T3.name", "=", "``", "John", "Dorian", "''"], "query_toks_no_value": ["select", "count", "(", "t1", ".", "ssn", ")", "from", "patient", "as", "t1", "join", "prescribes", "as", "t2", "on", "t1", ".", "ssn", "=", "t2", ".", "patient", "join", "physician", "as", "t3", "on", "t2", ".", "physician", "=", "t3", ".", "employeeid", "where", "t3", ".", "name", "=", "value"], "question": "How many patients' prescriptions are made by physician John Dorian?", "question_toks": ["How", "many", "patients", "'", "prescriptions", "are", "made", "by", "physician", "John", "Dorian", "?"], "guid": 8193}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Find the id of instructors who taught a class in Fall 2009 but not in Spring 2010.", "sql": "SELECT id FROM teaches WHERE semester = 'Fall' AND YEAR = 2009 EXCEPT SELECT id FROM teaches WHERE semester = 'Spring' AND YEAR = 2010", "example": {"db_id": "college_2", "query": "SELECT id FROM teaches WHERE semester  =  'Fall' AND YEAR  =  2009 EXCEPT SELECT id FROM teaches WHERE semester  =  'Spring' AND YEAR  =  2010", "query_toks": ["SELECT", "id", "FROM", "teaches", "WHERE", "semester", "=", "'Fall", "'", "AND", "YEAR", "=", "2009", "EXCEPT", "SELECT", "id", "FROM", "teaches", "WHERE", "semester", "=", "'Spring", "'", "AND", "YEAR", "=", "2010"], "query_toks_no_value": ["select", "id", "from", "teaches", "where", "semester", "=", "value", "and", "year", "=", "value", "except", "select", "id", "from", "teaches", "where", "semester", "=", "value", "and", "year", "=", "value"], "question": "Find the id of instructors who taught a class in Fall 2009 but not in Spring 2010.", "question_toks": ["Find", "the", "id", "of", "instructors", "who", "taught", "a", "class", "in", "Fall", "2009", "but", "not", "in", "Spring", "2010", "."], "guid": 8162}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | Find the name of the patient who made the appointment with the most recent start date.", "sql": "SELECT T1.name FROM patient AS T1 JOIN appointment AS T2 ON T1.ssn = T2.patient ORDER BY T2.start DESC LIMIT 1", "example": {"db_id": "hospital_1", "query": "SELECT T1.name FROM patient AS T1 JOIN appointment AS T2 ON T1.ssn = T2.patient ORDER BY T2.start DESC LIMIT 1", "query_toks": ["SELECT", "T1.name", "FROM", "patient", "AS", "T1", "JOIN", "appointment", "AS", "T2", "ON", "T1.ssn", "=", "T2.patient", "ORDER", "BY", "T2.start", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "patient", "as", "t1", "join", "appointment", "as", "t2", "on", "t1", ".", "ssn", "=", "t2", ".", "patient", "order", "by", "t2", ".", "start", "desc", "limit", "value"], "question": "Find the name of the patient who made the appointment with the most recent start date.", "question_toks": ["Find", "the", "name", "of", "the", "patient", "who", "made", "the", "appointment", "with", "the", "most", "recent", "start", "date", "."], "guid": 8343}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What is the first and last name of the oldest employee?", "sql": "SELECT emp_fname, emp_lname FROM employee ORDER BY emp_dob LIMIT 1", "example": {"db_id": "college_1", "query": "SELECT emp_fname ,  emp_lname FROM employee ORDER BY emp_dob LIMIT 1", "query_toks": ["SELECT", "emp_fname", ",", "emp_lname", "FROM", "employee", "ORDER", "BY", "emp_dob", "LIMIT", "1"], "query_toks_no_value": ["select", "emp_fname", ",", "emp_lname", "from", "employee", "order", "by", "emp_dob", "limit", "value"], "question": "What is the first and last name of the oldest employee?", "question_toks": ["What", "is", "the", "first", "and", "last", "name", "of", "the", "oldest", "employee", "?"], "guid": 8317}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | Find the first names of all instructors who have taught some course and the course code.", "sql": "SELECT T2.emp_fname, T1.crs_code FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num", "example": {"db_id": "college_1", "query": "SELECT T2.emp_fname ,  T1.crs_code FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num", "query_toks": ["SELECT", "T2.emp_fname", ",", "T1.crs_code", "FROM", "CLASS", "AS", "T1", "JOIN", "employee", "AS", "T2", "ON", "T1.prof_num", "=", "T2.emp_num"], "query_toks_no_value": ["select", "t2", ".", "emp_fname", ",", "t1", ".", "crs_code", "from", "class", "as", "t1", "join", "employee", "as", "t2", "on", "t1", ".", "prof_num", "=", "t2", ".", "emp_num"], "question": "Find the first names of all instructors who have taught some course and the course code.", "question_toks": ["Find", "the", "first", "names", "of", "all", "instructors", "who", "have", "taught", "some", "course", "and", "the", "course", "code", "."], "guid": 8268}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Find the names of all instructors whose name includes the substring \u201cdar\u201d.", "sql": "SELECT name FROM instructor WHERE name LIKE '%dar%'", "example": {"db_id": "college_2", "query": "SELECT name FROM instructor WHERE name LIKE '%dar%'", "query_toks": ["SELECT", "name", "FROM", "instructor", "WHERE", "name", "LIKE", "'", "%", "dar", "%", "'"], "query_toks_no_value": ["select", "name", "from", "instructor", "where", "name", "like", "value"], "question": "Find the names of all instructors whose name includes the substring \u201cdar\u201d.", "question_toks": ["Find", "the", "names", "of", "all", "instructors", "whose", "name", "includes", "the", "substring", "\u201cdar\u201d", "."], "guid": 8240}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What are the first names of all professors who teach more than one class?", "sql": "SELECT T2.emp_fname FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num GROUP BY T1.prof_num HAVING count(*) > 1", "example": {"db_id": "college_1", "query": "SELECT T2.emp_fname FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num GROUP BY T1.prof_num HAVING count(*)  >  1", "query_toks": ["SELECT", "T2.emp_fname", "FROM", "CLASS", "AS", "T1", "JOIN", "employee", "AS", "T2", "ON", "T1.prof_num", "=", "T2.emp_num", "GROUP", "BY", "T1.prof_num", "HAVING", "count", "(", "*", ")", ">", "1"], "query_toks_no_value": ["select", "t2", ".", "emp_fname", "from", "class", "as", "t1", "join", "employee", "as", "t2", "on", "t1", ".", "prof_num", "=", "t2", ".", "emp_num", "group", "by", "t1", ".", "prof_num", "having", "count", "(", "*", ")", ">", "value"], "question": "What are the first names of all professors who teach more than one class?", "question_toks": ["What", "are", "the", "first", "names", "of", "all", "professors", "who", "teach", "more", "than", "one", "class", "?"], "guid": 8324}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | How many classrooms are not in Lamberton?", "sql": "SELECT COUNT(*) FROM classroom WHERE building != 'Lamberton'", "example": {"db_id": "college_2", "query": "SELECT count(*) FROM classroom WHERE building != 'Lamberton'", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "classroom", "WHERE", "building", "!", "=", "'Lamberton", "'"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "classroom", "where", "building", "!", "=", "value"], "question": "How many classrooms are not in Lamberton?", "question_toks": ["How", "many", "classrooms", "are", "not", "in", "Lamberton", "?"], "guid": 8322}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | How many instructors are in the department with the highest budget, and what is their average salary?", "sql": "SELECT AVG(T1.salary), COUNT(*) FROM instructor AS T1 JOIN department AS T2 ON T1.dept_name = T2.dept_name ORDER BY T2.budget DESC LIMIT 1", "example": {"db_id": "college_2", "query": "SELECT avg(T1.salary) ,  count(*) FROM instructor AS T1 JOIN department AS T2 ON T1.dept_name  =  T2.dept_name ORDER BY T2.budget DESC LIMIT 1", "query_toks": ["SELECT", "avg", "(", "T1.salary", ")", ",", "count", "(", "*", ")", "FROM", "instructor", "AS", "T1", "JOIN", "department", "AS", "T2", "ON", "T1.dept_name", "=", "T2.dept_name", "ORDER", "BY", "T2.budget", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "avg", "(", "t1", ".", "salary", ")", ",", "count", "(", "*", ")", "from", "instructor", "as", "t1", "join", "department", "as", "t2", "on", "t1", ".", "dept_name", "=", "t2", ".", "dept_name", "order", "by", "t2", ".", "budget", "desc", "limit", "value"], "question": "How many instructors are in the department with the highest budget, and what is their average salary?", "question_toks": ["How", "many", "instructors", "are", "in", "the", "department", "with", "the", "highest", "budget", ",", "and", "what", "is", "their", "average", "salary", "?"], "guid": 8214}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | Find the name of medication used on the patient who stays in room 111?", "sql": "SELECT T4.name FROM stay AS T1 JOIN patient AS T2 ON T1.Patient = T2.SSN JOIN Prescribes AS T3 ON T3.Patient = T2.SSN JOIN Medication AS T4 ON T3.Medication = T4.Code WHERE room = 111", "example": {"db_id": "hospital_1", "query": "SELECT T4.name FROM stay AS T1 JOIN patient AS T2 ON T1.Patient  =  T2.SSN JOIN Prescribes AS T3 ON T3.Patient  =  T2.SSN JOIN Medication AS T4 ON T3.Medication  =  T4.Code WHERE room  =  111", "query_toks": ["SELECT", "T4.name", "FROM", "stay", "AS", "T1", "JOIN", "patient", "AS", "T2", "ON", "T1.Patient", "=", "T2.SSN", "JOIN", "Prescribes", "AS", "T3", "ON", "T3.Patient", "=", "T2.SSN", "JOIN", "Medication", "AS", "T4", "ON", "T3.Medication", "=", "T4.Code", "WHERE", "room", "=", "111"], "query_toks_no_value": ["select", "t4", ".", "name", "from", "stay", "as", "t1", "join", "patient", "as", "t2", "on", "t1", ".", "patient", "=", "t2", ".", "ssn", "join", "prescribes", "as", "t3", "on", "t3", ".", "patient", "=", "t2", ".", "ssn", "join", "medication", "as", "t4", "on", "t3", ".", "medication", "=", "t4", ".", "code", "where", "room", "=", "value"], "question": "Find the name of medication used on the patient who stays in room 111?", "question_toks": ["Find", "the", "name", "of", "medication", "used", "on", "the", "patient", "who", "stays", "in", "room", "111", "?"], "guid": 8173}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | Find the names of all patients who have an undergoing treatment and are staying in room 111.", "sql": "SELECT DISTINCT T2.name FROM undergoes AS T1 JOIN patient AS T2 ON T1.patient = T2.SSN JOIN stay AS T3 ON T1.Stay = T3.StayID WHERE T3.room = 111", "example": {"db_id": "hospital_1", "query": "SELECT DISTINCT T2.name FROM undergoes AS T1 JOIN patient AS T2 ON T1.patient = T2.SSN JOIN stay AS T3 ON T1.Stay  =  T3.StayID WHERE T3.room  =  111", "query_toks": ["SELECT", "DISTINCT", "T2.name", "FROM", "undergoes", "AS", "T1", "JOIN", "patient", "AS", "T2", "ON", "T1.patient", "=", "T2.SSN", "JOIN", "stay", "AS", "T3", "ON", "T1.Stay", "=", "T3.StayID", "WHERE", "T3.room", "=", "111"], "query_toks_no_value": ["select", "distinct", "t2", ".", "name", "from", "undergoes", "as", "t1", "join", "patient", "as", "t2", "on", "t1", ".", "patient", "=", "t2", ".", "ssn", "join", "stay", "as", "t3", "on", "t1", ".", "stay", "=", "t3", ".", "stayid", "where", "t3", ".", "room", "=", "value"], "question": "Find the names of all patients who have an undergoing treatment and are staying in room 111.", "question_toks": ["Find", "the", "names", "of", "all", "patients", "who", "have", "an", "undergoing", "treatment", "and", "are", "staying", "in", "room", "111", "."], "guid": 8230}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What is the first names of the professors from the history department who do not teach a class.", "sql": "SELECT T1.emp_fname FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num = T2.emp_num JOIN department AS T3 ON T2.dept_code = T3.dept_code WHERE T3.dept_name = 'History' EXCEPT SELECT T4.emp_fname FROM employee AS T4 JOIN class AS T5 ON T4.emp_num = T5.prof_num", "example": {"db_id": "college_1", "query": "SELECT T1.emp_fname FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T2.dept_code  =  T3.dept_code WHERE T3.dept_name  =  'History' EXCEPT SELECT T4.emp_fname FROM employee AS T4 JOIN CLASS AS T5 ON T4.emp_num  =  T5.prof_num", "query_toks": ["SELECT", "T1.emp_fname", "FROM", "employee", "AS", "T1", "JOIN", "professor", "AS", "T2", "ON", "T1.emp_num", "=", "T2.emp_num", "JOIN", "department", "AS", "T3", "ON", "T2.dept_code", "=", "T3.dept_code", "WHERE", "T3.dept_name", "=", "'History", "'", "EXCEPT", "SELECT", "T4.emp_fname", "FROM", "employee", "AS", "T4", "JOIN", "CLASS", "AS", "T5", "ON", "T4.emp_num", "=", "T5.prof_num"], "query_toks_no_value": ["select", "t1", ".", "emp_fname", "from", "employee", "as", "t1", "join", "professor", "as", "t2", "on", "t1", ".", "emp_num", "=", "t2", ".", "emp_num", "join", "department", "as", "t3", "on", "t2", ".", "dept_code", "=", "t3", ".", "dept_code", "where", "t3", ".", "dept_name", "=", "value", "except", "select", "t4", ".", "emp_fname", "from", "employee", "as", "t4", "join", "class", "as", "t5", "on", "t4", ".", "emp_num", "=", "t5", ".", "prof_num"], "question": "What is the first names of the professors from the history department who do not teach a class.", "question_toks": ["What", "is", "the", "first", "names", "of", "the", "professors", "from", "the", "history", "department", "who", "do", "not", "teach", "a", "class", "."], "guid": 8336}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | Find the number of professors with a Ph.D. degree in each department.", "sql": "SELECT count(*), dept_code FROM professor WHERE prof_high_degree = 'Ph.D.' GROUP BY dept_code", "example": {"db_id": "college_1", "query": "SELECT count(*) ,  dept_code FROM professor WHERE prof_high_degree  =  'Ph.D.' GROUP BY dept_code", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "dept_code", "FROM", "professor", "WHERE", "prof_high_degree", "=", "'Ph.D", ".", "'", "GROUP", "BY", "dept_code"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "dept_code", "from", "professor", "where", "prof_high_degree", "=", "value", "group", "by", "dept_code"], "question": "Find the number of professors with a Ph.D. degree in each department.", "question_toks": ["Find", "the", "number", "of", "professors", "with", "a", "Ph.D.", "degree", "in", "each", "department", "."], "guid": 8229}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Give the title of the prerequisite to the course International Finance.", "sql": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'International Finance')", "example": {"db_id": "college_2", "query": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'International Finance')", "query_toks": ["SELECT", "title", "FROM", "course", "WHERE", "course_id", "IN", "(", "SELECT", "T1.prereq_id", "FROM", "prereq", "AS", "T1", "JOIN", "course", "AS", "T2", "ON", "T1.course_id", "=", "T2.course_id", "WHERE", "T2.title", "=", "'International", "Finance", "'", ")"], "query_toks_no_value": ["select", "title", "from", "course", "where", "course_id", "in", "(", "select", "t1", ".", "prereq_id", "from", "prereq", "as", "t1", "join", "course", "as", "t2", "on", "t1", ".", "course_id", "=", "t2", ".", "course_id", "where", "t2", ".", "title", "=", "value", ")"], "question": "Give the title of the prerequisite to the course International Finance.", "question_toks": ["Give", "the", "title", "of", "the", "prerequisite", "to", "the", "course", "International", "Finance", "."], "guid": 8105}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | How many different departments are there?", "sql": "SELECT count(DISTINCT dept_name) FROM department", "example": {"db_id": "college_1", "query": "SELECT count(DISTINCT dept_name) FROM department", "query_toks": ["SELECT", "count", "(", "DISTINCT", "dept_name", ")", "FROM", "department"], "query_toks_no_value": ["select", "count", "(", "distinct", "dept_name", ")", "from", "department"], "question": "How many different departments are there?", "question_toks": ["How", "many", "different", "departments", "are", "there", "?"], "guid": 8429}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Find the name and salary of instructors who are advisors of the students from the Math department.", "sql": "SELECT T2.name, T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id = T2.id JOIN student AS T3 ON T1.s_id = T3.id WHERE T3.dept_name = 'Math'", "example": {"db_id": "college_2", "query": "SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'Math'", "query_toks": ["SELECT", "T2.name", ",", "T2.salary", "FROM", "advisor", "AS", "T1", "JOIN", "instructor", "AS", "T2", "ON", "T1.i_id", "=", "T2.id", "JOIN", "student", "AS", "T3", "ON", "T1.s_id", "=", "T3.id", "WHERE", "T3.dept_name", "=", "'Math", "'"], "query_toks_no_value": ["select", "t2", ".", "name", ",", "t2", ".", "salary", "from", "advisor", "as", "t1", "join", "instructor", "as", "t2", "on", "t1", ".", "i_id", "=", "t2", ".", "id", "join", "student", "as", "t3", "on", "t1", ".", "s_id", "=", "t3", ".", "id", "where", "t3", ".", "dept_name", "=", "value"], "question": "Find the name and salary of instructors who are advisors of the students from the Math department.", "question_toks": ["Find", "the", "name", "and", "salary", "of", "instructors", "who", "are", "advisors", "of", "the", "students", "from", "the", "Math", "department", "."], "guid": 8337}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Find the name of the courses that do not have any prerequisite?", "sql": "SELECT title FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)", "example": {"db_id": "college_2", "query": "SELECT title FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)", "query_toks": ["SELECT", "title", "FROM", "course", "WHERE", "course_id", "NOT", "IN", "(", "SELECT", "course_id", "FROM", "prereq", ")"], "query_toks_no_value": ["select", "title", "from", "course", "where", "course_id", "not", "in", "(", "select", "course_id", "from", "prereq", ")"], "question": "Find the name of the courses that do not have any prerequisite?", "question_toks": ["Find", "the", "name", "of", "the", "courses", "that", "do", "not", "have", "any", "prerequisite", "?"], "guid": 8144}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | Find the max and min grade point for all letter grade.", "sql": "SELECT max(gradepoint) ,  min(gradepoint) FROM GRADECONVERSION", "example": {"db_id": "college_3", "query": "SELECT max(gradepoint) ,  min(gradepoint) FROM GRADECONVERSION", "query_toks": ["SELECT", "max", "(", "gradepoint", ")", ",", "min", "(", "gradepoint", ")", "FROM", "GRADECONVERSION"], "query_toks_no_value": ["select", "max", "(", "gradepoint", ")", ",", "min", "(", "gradepoint", ")", "from", "gradeconversion"], "question": "Find the max and min grade point for all letter grade.", "question_toks": ["Find", "the", "max", "and", "min", "grade", "point", "for", "all", "letter", "grade", "."], "guid": 8276}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | What is the name of the medication used for the patient staying in room 111?", "sql": "SELECT T4.name FROM stay AS T1 JOIN patient AS T2 ON T1.Patient = T2.SSN JOIN Prescribes AS T3 ON T3.Patient = T2.SSN JOIN Medication AS T4 ON T3.Medication = T4.Code WHERE room = 111", "example": {"db_id": "hospital_1", "query": "SELECT T4.name FROM stay AS T1 JOIN patient AS T2 ON T1.Patient  =  T2.SSN JOIN Prescribes AS T3 ON T3.Patient  =  T2.SSN JOIN Medication AS T4 ON T3.Medication  =  T4.Code WHERE room  =  111", "query_toks": ["SELECT", "T4.name", "FROM", "stay", "AS", "T1", "JOIN", "patient", "AS", "T2", "ON", "T1.Patient", "=", "T2.SSN", "JOIN", "Prescribes", "AS", "T3", "ON", "T3.Patient", "=", "T2.SSN", "JOIN", "Medication", "AS", "T4", "ON", "T3.Medication", "=", "T4.Code", "WHERE", "room", "=", "111"], "query_toks_no_value": ["select", "t4", ".", "name", "from", "stay", "as", "t1", "join", "patient", "as", "t2", "on", "t1", ".", "patient", "=", "t2", ".", "ssn", "join", "prescribes", "as", "t3", "on", "t3", ".", "patient", "=", "t2", ".", "ssn", "join", "medication", "as", "t4", "on", "t3", ".", "medication", "=", "t4", ".", "code", "where", "room", "=", "value"], "question": "What is the name of the medication used for the patient staying in room 111?", "question_toks": ["What", "is", "the", "name", "of", "the", "medication", "used", "for", "the", "patient", "staying", "in", "room", "111", "?"], "guid": 8427}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What is the name of the department that offers a course that has a description including the word \"Statistics\"?", "sql": "SELECT T2.dept_name FROM course AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code WHERE T1.crs_description LIKE '%Statistics%'", "example": {"db_id": "college_1", "query": "SELECT T2.dept_name FROM course AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE T1.crs_description LIKE '%Statistics%'", "query_toks": ["SELECT", "T2.dept_name", "FROM", "course", "AS", "T1", "JOIN", "department", "AS", "T2", "ON", "T1.dept_code", "=", "T2.dept_code", "WHERE", "T1.crs_description", "LIKE", "'", "%", "Statistics", "%", "'"], "query_toks_no_value": ["select", "t2", ".", "dept_name", "from", "course", "as", "t1", "join", "department", "as", "t2", "on", "t1", ".", "dept_code", "=", "t2", ".", "dept_code", "where", "t1", ".", "crs_description", "like", "value"], "question": "What is the name of the department that offers a course that has a description including the word \"Statistics\"?", "question_toks": ["What", "is", "the", "name", "of", "the", "department", "that", "offers", "a", "course", "that", "has", "a", "description", "including", "the", "word", "``", "Statistics", "''", "?"], "guid": 8352}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | Find the first names and offices of all instructors who have taught some course and the course description and the department name.", "sql": "SELECT T2.emp_fname, T4.prof_office, T3.crs_description, T5.dept_name FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN professor AS T4 ON T2.emp_num = T4.emp_num JOIN department AS T5 ON T4.dept_code = T5.dept_code", "example": {"db_id": "college_1", "query": "SELECT T2.emp_fname ,  T4.prof_office ,  T3.crs_description ,  T5.dept_name FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN professor AS T4 ON T2.emp_num  =  T4.emp_num JOIN department AS T5 ON T4.dept_code  =  T5.dept_code", "query_toks": ["SELECT", "T2.emp_fname", ",", "T4.prof_office", ",", "T3.crs_description", ",", "T5.dept_name", "FROM", "CLASS", "AS", "T1", "JOIN", "employee", "AS", "T2", "ON", "T1.prof_num", "=", "T2.emp_num", "JOIN", "course", "AS", "T3", "ON", "T1.crs_code", "=", "T3.crs_code", "JOIN", "professor", "AS", "T4", "ON", "T2.emp_num", "=", "T4.emp_num", "JOIN", "department", "AS", "T5", "ON", "T4.dept_code", "=", "T5.dept_code"], "query_toks_no_value": ["select", "t2", ".", "emp_fname", ",", "t4", ".", "prof_office", ",", "t3", ".", "crs_description", ",", "t5", ".", "dept_name", "from", "class", "as", "t1", "join", "employee", "as", "t2", "on", "t1", ".", "prof_num", "=", "t2", ".", "emp_num", "join", "course", "as", "t3", "on", "t1", ".", "crs_code", "=", "t3", ".", "crs_code", "join", "professor", "as", "t4", "on", "t2", ".", "emp_num", "=", "t4", ".", "emp_num", "join", "department", "as", "t5", "on", "t4", ".", "dept_code", "=", "t5", ".", "dept_code"], "question": "Find the first names and offices of all instructors who have taught some course and the course description and the department name.", "question_toks": ["Find", "the", "first", "names", "and", "offices", "of", "all", "instructors", "who", "have", "taught", "some", "course", "and", "the", "course", "description", "and", "the", "department", "name", "."], "guid": 8196}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Count the number of distinct instructors who have taught a course.", "sql": "SELECT COUNT(DISTINCT id) FROM teaches", "example": {"db_id": "college_2", "query": "SELECT COUNT (DISTINCT id) FROM teaches", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "id", ")", "FROM", "teaches"], "query_toks_no_value": ["select", "count", "(", "distinct", "id", ")", "from", "teaches"], "question": "Count the number of distinct instructors who have taught a course.", "question_toks": ["Count", "the", "number", "of", "distinct", "instructors", "who", "have", "taught", "a", "course", "."], "guid": 8202}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | How many professors who has a either Ph.D. or MA degree?", "sql": "SELECT COUNT(*) FROM professor WHERE prof_high_degree = 'Ph.D.' OR prof_high_degree = 'MA'", "example": {"db_id": "college_1", "query": "SELECT count(*) FROM professor WHERE prof_high_degree  =  'Ph.D.' OR prof_high_degree  =  'MA'", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "professor", "WHERE", "prof_high_degree", "=", "'Ph.D", ".", "'", "OR", "prof_high_degree", "=", "'MA", "'"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "professor", "where", "prof_high_degree", "=", "value", "or", "prof_high_degree", "=", "value"], "question": "How many professors who has a either Ph.D. or MA degree?", "question_toks": ["How", "many", "professors", "who", "has", "a", "either", "Ph.D.", "or", "MA", "degree", "?"], "guid": 8164}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Find the name of instructors who didn't teach any courses?", "sql": "SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches)", "example": {"db_id": "college_2", "query": "SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches)", "query_toks": ["SELECT", "name", "FROM", "instructor", "WHERE", "id", "NOT", "IN", "(", "SELECT", "id", "FROM", "teaches", ")"], "query_toks_no_value": ["select", "name", "from", "instructor", "where", "id", "not", "in", "(", "select", "id", "from", "teaches", ")"], "question": "Find the name of instructors who didn't teach any courses?", "question_toks": ["Find", "the", "name", "of", "instructors", "who", "did", "n't", "teach", "any", "courses", "?"], "guid": 8288}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | List the name and cost of all procedures sorted by the cost from the highest to the lowest.", "sql": "SELECT name, cost FROM procedures ORDER BY cost DESC", "example": {"db_id": "hospital_1", "query": "SELECT name ,  cost FROM procedures ORDER BY cost DESC", "query_toks": ["SELECT", "name", ",", "cost", "FROM", "procedures", "ORDER", "BY", "cost", "DESC"], "query_toks_no_value": ["select", "name", ",", "cost", "from", "procedures", "order", "by", "cost", "desc"], "question": "List the name and cost of all procedures sorted by the cost from the highest to the lowest.", "question_toks": ["List", "the", "name", "and", "cost", "of", "all", "procedures", "sorted", "by", "the", "cost", "from", "the", "highest", "to", "the", "lowest", "."], "guid": 8192}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | What are the three most costly procedures?", "sql": "SELECT name FROM procedures ORDER BY cost LIMIT 3", "example": {"db_id": "hospital_1", "query": "SELECT name FROM procedures ORDER BY cost LIMIT 3", "query_toks": ["SELECT", "name", "FROM", "procedures", "ORDER", "BY", "cost", "LIMIT", "3"], "query_toks_no_value": ["select", "name", "from", "procedures", "order", "by", "cost", "limit", "value"], "question": "What are the three most costly procedures?", "question_toks": ["What", "are", "the", "three", "most", "costly", "procedures", "?"], "guid": 8278}}