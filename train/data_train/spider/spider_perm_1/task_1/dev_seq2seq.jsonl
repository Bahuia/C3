{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | How many courses have more than 2 credits?", "sql": "SELECT count(*) FROM COURSE WHERE Credits  >  2", "example": {"db_id": "college_3", "query": "SELECT count(*) FROM COURSE WHERE Credits  >  2", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "COURSE", "WHERE", "Credits", ">", "2"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "course", "where", "credits", ">", "value"], "question": "How many courses have more than 2 credits?", "question_toks": ["How", "many", "courses", "have", "more", "than", "2", "credits", "?"], "guid": 8435}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Give the title and credits for the course that is taught in the classroom with the greatest capacity.", "sql": "SELECT T3.title ,  T3.credits FROM classroom AS T1 JOIN SECTION AS T2 ON T1.building  =  T2.building AND T1.room_number  =  T2.room_number JOIN course AS T3 ON T2.course_id  =  T3.course_id WHERE T1.capacity  =  (SELECT max(capacity) FROM classroom)", "example": {"db_id": "college_2", "query": "SELECT T3.title ,  T3.credits FROM classroom AS T1 JOIN SECTION AS T2 ON T1.building  =  T2.building AND T1.room_number  =  T2.room_number JOIN course AS T3 ON T2.course_id  =  T3.course_id WHERE T1.capacity  =  (SELECT max(capacity) FROM classroom)", "query_toks": ["SELECT", "T3.title", ",", "T3.credits", "FROM", "classroom", "AS", "T1", "JOIN", "SECTION", "AS", "T2", "ON", "T1.building", "=", "T2.building", "AND", "T1.room_number", "=", "T2.room_number", "JOIN", "course", "AS", "T3", "ON", "T2.course_id", "=", "T3.course_id", "WHERE", "T1.capacity", "=", "(", "SELECT", "max", "(", "capacity", ")", "FROM", "classroom", ")"], "query_toks_no_value": ["select", "t3", ".", "title", ",", "t3", ".", "credits", "from", "classroom", "as", "t1", "join", "section", "as", "t2", "on", "t1", ".", "building", "=", "t2", ".", "building", "and", "t1", ".", "room_number", "=", "t2", ".", "room_number", "join", "course", "as", "t3", "on", "t2", ".", "course_id", "=", "t3", ".", "course_id", "where", "t1", ".", "capacity", "=", "(", "select", "max", "(", "capacity", ")", "from", "classroom", ")"], "question": "Give the title and credits for the course that is taught in the classroom with the greatest capacity.", "question_toks": ["Give", "the", "title", "and", "credits", "for", "the", "course", "that", "is", "taught", "in", "the", "classroom", "with", "the", "greatest", "capacity", "."], "guid": 8436}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | Find the first name of students in the descending order of age.", "sql": "SELECT Fname FROM STUDENT ORDER BY Age DESC", "example": {"db_id": "college_3", "query": "SELECT Fname FROM STUDENT ORDER BY Age DESC", "query_toks": ["SELECT", "Fname", "FROM", "STUDENT", "ORDER", "BY", "Age", "DESC"], "query_toks_no_value": ["select", "fname", "from", "student", "order", "by", "age", "desc"], "question": "Find the first name of students in the descending order of age.", "question_toks": ["Find", "the", "first", "name", "of", "students", "in", "the", "descending", "order", "of", "age", "."], "guid": 8437}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Find the number of rooms with more than 50 capacity for each building.", "sql": "SELECT count(*) ,  building FROM classroom WHERE capacity  >  50 GROUP BY building", "example": {"db_id": "college_2", "query": "SELECT count(*) ,  building FROM classroom WHERE capacity  >  50 GROUP BY building", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "building", "FROM", "classroom", "WHERE", "capacity", ">", "50", "GROUP", "BY", "building"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "building", "from", "classroom", "where", "capacity", ">", "value", "group", "by", "building"], "question": "Find the number of rooms with more than 50 capacity for each building.", "question_toks": ["Find", "the", "number", "of", "rooms", "with", "more", "than", "50", "capacity", "for", "each", "building", "."], "guid": 8438}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | Find the description and credit for the course QM-261?", "sql": "SELECT crs_credit ,  crs_description FROM course WHERE crs_code  =  'QM-261'", "example": {"db_id": "college_1", "query": "SELECT crs_credit ,  crs_description FROM course WHERE crs_code  =  'QM-261'", "query_toks": ["SELECT", "crs_credit", ",", "crs_description", "FROM", "course", "WHERE", "crs_code", "=", "'QM-261", "'"], "query_toks_no_value": ["select", "crs_credit", ",", "crs_description", "from", "course", "where", "crs_code", "=", "value"], "question": "Find the description and credit for the course QM-261?", "question_toks": ["Find", "the", "description", "and", "credit", "for", "the", "course", "QM-261", "?"], "guid": 8439}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | What is the number of faculty at Long Beach State University in 2002?", "sql": "SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  2002 AND T2.campus  =  \"Long Beach State University\"", "example": {"db_id": "csu_1", "query": "SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  2002 AND T2.campus  =  \"Long Beach State University\"", "query_toks": ["SELECT", "faculty", "FROM", "faculty", "AS", "T1", "JOIN", "campuses", "AS", "T2", "ON", "T1.campus", "=", "T2.id", "WHERE", "T1.year", "=", "2002", "AND", "T2.campus", "=", "``", "Long", "Beach", "State", "University", "''"], "query_toks_no_value": ["select", "faculty", "from", "faculty", "as", "t1", "join", "campuses", "as", "t2", "on", "t1", ".", "campus", "=", "t2", ".", "id", "where", "t1", ".", "year", "=", "value", "and", "t2", ".", "campus", "=", "value"], "question": "What is the number of faculty at Long Beach State University in 2002?", "question_toks": ["What", "is", "the", "number", "of", "faculty", "at", "Long", "Beach", "State", "University", "in", "2002", "?"], "guid": 8440}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | Find the name of the department that has no students minored in?", "sql": "SELECT DName FROM DEPARTMENT EXCEPT SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MINOR_IN AS T2 ON T1.DNO  =  T2.DNO", "example": {"db_id": "college_3", "query": "SELECT DName FROM DEPARTMENT EXCEPT SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MINOR_IN AS T2 ON T1.DNO  =  T2.DNO", "query_toks": ["SELECT", "DName", "FROM", "DEPARTMENT", "EXCEPT", "SELECT", "T1.DName", "FROM", "DEPARTMENT", "AS", "T1", "JOIN", "MINOR_IN", "AS", "T2", "ON", "T1.DNO", "=", "T2.DNO"], "query_toks_no_value": ["select", "dname", "from", "department", "except", "select", "t1", ".", "dname", "from", "department", "as", "t1", "join", "minor_in", "as", "t2", "on", "t1", ".", "dno", "=", "t2", ".", "dno"], "question": "Find the name of the department that has no students minored in?", "question_toks": ["Find", "the", "name", "of", "the", "department", "that", "has", "no", "students", "minored", "in", "?"], "guid": 8441}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | list in alphabetic order all course names and their instructors' names in year 2008.", "sql": "SELECT T1.title ,  T3.name FROM course AS T1 JOIN teaches AS T2 ON T1.course_id  =  T2.course_id JOIN instructor AS T3 ON T2.id  =  T3.id WHERE YEAR  =  2008 ORDER BY T1.title", "example": {"db_id": "college_2", "query": "SELECT T1.title ,  T3.name FROM course AS T1 JOIN teaches AS T2 ON T1.course_id  =  T2.course_id JOIN instructor AS T3 ON T2.id  =  T3.id WHERE YEAR  =  2008 ORDER BY T1.title", "query_toks": ["SELECT", "T1.title", ",", "T3.name", "FROM", "course", "AS", "T1", "JOIN", "teaches", "AS", "T2", "ON", "T1.course_id", "=", "T2.course_id", "JOIN", "instructor", "AS", "T3", "ON", "T2.id", "=", "T3.id", "WHERE", "YEAR", "=", "2008", "ORDER", "BY", "T1.title"], "query_toks_no_value": ["select", "t1", ".", "title", ",", "t3", ".", "name", "from", "course", "as", "t1", "join", "teaches", "as", "t2", "on", "t1", ".", "course_id", "=", "t2", ".", "course_id", "join", "instructor", "as", "t3", "on", "t2", ".", "id", "=", "t3", ".", "id", "where", "year", "=", "value", "order", "by", "t1", ".", "title"], "question": "list in alphabetic order all course names and their instructors' names in year 2008.", "question_toks": ["list", "in", "alphabetic", "order", "all", "course", "names", "and", "their", "instructors", "'", "names", "in", "year", "2008", "."], "guid": 8442}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | What are the titles for courses with two prerequisites?", "sql": "SELECT T1.title FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  =  2", "example": {"db_id": "college_2", "query": "SELECT T1.title FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  =  2", "query_toks": ["SELECT", "T1.title", "FROM", "course", "AS", "T1", "JOIN", "prereq", "AS", "T2", "ON", "T1.course_id", "=", "T2.course_id", "GROUP", "BY", "T2.course_id", "HAVING", "count", "(", "*", ")", "=", "2"], "query_toks_no_value": ["select", "t1", ".", "title", "from", "course", "as", "t1", "join", "prereq", "as", "t2", "on", "t1", ".", "course_id", "=", "t2", ".", "course_id", "group", "by", "t2", ".", "course_id", "having", "count", "(", "*", ")", "=", "value"], "question": "What are the titles for courses with two prerequisites?", "question_toks": ["What", "are", "the", "titles", "for", "courses", "with", "two", "prerequisites", "?"], "guid": 8443}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | What campus has the most faculties in 2003?", "sql": "SELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2003 ORDER BY T2.faculty DESC LIMIT 1", "example": {"db_id": "csu_1", "query": "SELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2003 ORDER BY T2.faculty DESC LIMIT 1", "query_toks": ["SELECT", "T1.campus", "FROM", "campuses", "AS", "T1", "JOIN", "faculty", "AS", "T2", "ON", "T1.id", "=", "T2.campus", "WHERE", "T2.year", "=", "2003", "ORDER", "BY", "T2.faculty", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "campus", "from", "campuses", "as", "t1", "join", "faculty", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "campus", "where", "t2", ".", "year", "=", "value", "order", "by", "t2", ".", "faculty", "desc", "limit", "value"], "question": "What campus has the most faculties in 2003?", "question_toks": ["What", "campus", "has", "the", "most", "faculties", "in", "2003", "?"], "guid": 8444}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | What are the last names of female students, ordered by age descending?", "sql": "SELECT LName FROM STUDENT WHERE Sex  =  \"F\" ORDER BY Age DESC", "example": {"db_id": "college_3", "query": "SELECT LName FROM STUDENT WHERE Sex  =  \"F\" ORDER BY Age DESC", "query_toks": ["SELECT", "LName", "FROM", "STUDENT", "WHERE", "Sex", "=", "``", "F", "''", "ORDER", "BY", "Age", "DESC"], "query_toks_no_value": ["select", "lname", "from", "student", "where", "sex", "=", "value", "order", "by", "age", "desc"], "question": "What are the last names of female students, ordered by age descending?", "question_toks": ["What", "are", "the", "last", "names", "of", "female", "students", ",", "ordered", "by", "age", "descending", "?"], "guid": 8445}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Find the title of course whose prerequisite is course Differential Geometry.", "sql": "SELECT title FROM course WHERE course_id IN (SELECT T1.course_id FROM prereq AS T1 JOIN course AS T2 ON T1.prereq_id  =  T2.course_id WHERE T2.title  =  'Differential Geometry')", "example": {"db_id": "college_2", "query": "SELECT title FROM course WHERE course_id IN (SELECT T1.course_id FROM prereq AS T1 JOIN course AS T2 ON T1.prereq_id  =  T2.course_id WHERE T2.title  =  'Differential Geometry')", "query_toks": ["SELECT", "title", "FROM", "course", "WHERE", "course_id", "IN", "(", "SELECT", "T1.course_id", "FROM", "prereq", "AS", "T1", "JOIN", "course", "AS", "T2", "ON", "T1.prereq_id", "=", "T2.course_id", "WHERE", "T2.title", "=", "'Differential", "Geometry", "'", ")"], "query_toks_no_value": ["select", "title", "from", "course", "where", "course_id", "in", "(", "select", "t1", ".", "course_id", "from", "prereq", "as", "t1", "join", "course", "as", "t2", "on", "t1", ".", "prereq_id", "=", "t2", ".", "course_id", "where", "t2", ".", "title", "=", "value", ")"], "question": "Find the title of course whose prerequisite is course Differential Geometry.", "question_toks": ["Find", "the", "title", "of", "course", "whose", "prerequisite", "is", "course", "Differential", "Geometry", "."], "guid": 8446}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | How many people graduated from San Francisco State University in 2004?", "sql": "SELECT sum(t1.graduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t1.year  =  2004 AND t2.campus  =  \"San Francisco State University\"", "example": {"db_id": "csu_1", "query": "SELECT sum(t1.graduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t1.year  =  2004 AND t2.campus  =  \"San Francisco State University\"", "query_toks": ["SELECT", "sum", "(", "t1.graduate", ")", "FROM", "discipline_enrollments", "AS", "t1", "JOIN", "campuses", "AS", "t2", "ON", "t1.campus", "=", "t2.id", "WHERE", "t1.year", "=", "2004", "AND", "t2.campus", "=", "``", "San", "Francisco", "State", "University", "''"], "query_toks_no_value": ["select", "sum", "(", "t1", ".", "graduate", ")", "from", "discipline_enrollments", "as", "t1", "join", "campuses", "as", "t2", "on", "t1", ".", "campus", "=", "t2", ".", "id", "where", "t1", ".", "year", "=", "value", "and", "t2", ".", "campus", "=", "value"], "question": "How many people graduated from San Francisco State University in 2004?", "question_toks": ["How", "many", "people", "graduated", "from", "San", "Francisco", "State", "University", "in", "2004", "?"], "guid": 8447}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | How many professors are teaching class with code ACCT-211?", "sql": "SELECT count(DISTINCT PROF_NUM) FROM CLASS WHERE CRS_CODE  =  \"ACCT-211\"", "example": {"db_id": "college_1", "query": "SELECT count(DISTINCT PROF_NUM) FROM CLASS WHERE CRS_CODE  =  \"ACCT-211\"", "query_toks": ["SELECT", "count", "(", "DISTINCT", "PROF_NUM", ")", "FROM", "CLASS", "WHERE", "CRS_CODE", "=", "``", "ACCT-211", "''"], "query_toks_no_value": ["select", "count", "(", "distinct", "prof_num", ")", "from", "class", "where", "crs_code", "=", "value"], "question": "How many professors are teaching class with code ACCT-211?", "question_toks": ["How", "many", "professors", "are", "teaching", "class", "with", "code", "ACCT-211", "?"], "guid": 8448}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What are the first names of all teachers who have taught a course and the corresponding descriptions?", "sql": "SELECT T2.emp_fname ,  T3.crs_description FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN course AS T3 ON T1.crs_code  =  T3.crs_code", "example": {"db_id": "college_1", "query": "SELECT T2.emp_fname ,  T3.crs_description FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN course AS T3 ON T1.crs_code  =  T3.crs_code", "query_toks": ["SELECT", "T2.emp_fname", ",", "T3.crs_description", "FROM", "CLASS", "AS", "T1", "JOIN", "employee", "AS", "T2", "ON", "T1.prof_num", "=", "T2.emp_num", "JOIN", "course", "AS", "T3", "ON", "T1.crs_code", "=", "T3.crs_code"], "query_toks_no_value": ["select", "t2", ".", "emp_fname", ",", "t3", ".", "crs_description", "from", "class", "as", "t1", "join", "employee", "as", "t2", "on", "t1", ".", "prof_num", "=", "t2", ".", "emp_num", "join", "course", "as", "t3", "on", "t1", ".", "crs_code", "=", "t3", ".", "crs_code"], "question": "What are the first names of all teachers who have taught a course and the corresponding descriptions?", "question_toks": ["What", "are", "the", "first", "names", "of", "all", "teachers", "who", "have", "taught", "a", "course", "and", "the", "corresponding", "descriptions", "?"], "guid": 8449}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | What are the names of courses with 1 credit?", "sql": "SELECT CName FROM COURSE WHERE Credits  =  1", "example": {"db_id": "college_3", "query": "SELECT CName FROM COURSE WHERE Credits  =  1", "query_toks": ["SELECT", "CName", "FROM", "COURSE", "WHERE", "Credits", "=", "1"], "query_toks_no_value": ["select", "cname", "from", "course", "where", "credits", "=", "value"], "question": "What are the names of courses with 1 credit?", "question_toks": ["What", "are", "the", "names", "of", "courses", "with", "1", "credit", "?"], "guid": 8450}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Count the number of departments which offer courses.", "sql": "SELECT count(DISTINCT dept_name) FROM course", "example": {"db_id": "college_2", "query": "SELECT count(DISTINCT dept_name) FROM course", "query_toks": ["SELECT", "count", "(", "DISTINCT", "dept_name", ")", "FROM", "course"], "query_toks_no_value": ["select", "count", "(", "distinct", "dept_name", ")", "from", "course"], "question": "Count the number of departments which offer courses.", "question_toks": ["Count", "the", "number", "of", "departments", "which", "offer", "courses", "."], "guid": 8451}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What are the first names of all Accounting professors who teach and what are the classrooms of the courses they teach?", "sql": "SELECT T2.emp_fname ,  T1.class_room FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN professor AS T3 ON T2.emp_num  =  T3.emp_num JOIN department AS T4 ON T4.dept_code  =  T3.dept_code WHERE T4.dept_name  =  'Accounting'", "example": {"db_id": "college_1", "query": "SELECT T2.emp_fname ,  T1.class_room FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN professor AS T3 ON T2.emp_num  =  T3.emp_num JOIN department AS T4 ON T4.dept_code  =  T3.dept_code WHERE T4.dept_name  =  'Accounting'", "query_toks": ["SELECT", "T2.emp_fname", ",", "T1.class_room", "FROM", "CLASS", "AS", "T1", "JOIN", "employee", "AS", "T2", "ON", "T1.prof_num", "=", "T2.emp_num", "JOIN", "professor", "AS", "T3", "ON", "T2.emp_num", "=", "T3.emp_num", "JOIN", "department", "AS", "T4", "ON", "T4.dept_code", "=", "T3.dept_code", "WHERE", "T4.dept_name", "=", "'Accounting", "'"], "query_toks_no_value": ["select", "t2", ".", "emp_fname", ",", "t1", ".", "class_room", "from", "class", "as", "t1", "join", "employee", "as", "t2", "on", "t1", ".", "prof_num", "=", "t2", ".", "emp_num", "join", "professor", "as", "t3", "on", "t2", ".", "emp_num", "=", "t3", ".", "emp_num", "join", "department", "as", "t4", "on", "t4", ".", "dept_code", "=", "t3", ".", "dept_code", "where", "t4", ".", "dept_name", "=", "value"], "question": "What are the first names of all Accounting professors who teach and what are the classrooms of the courses they teach?", "question_toks": ["What", "are", "the", "first", "names", "of", "all", "Accounting", "professors", "who", "teach", "and", "what", "are", "the", "classrooms", "of", "the", "courses", "they", "teach", "?"], "guid": 8452}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | What is the name of the nurse has the most appointments?", "sql": "SELECT T1.name FROM nurse AS T1 JOIN appointment AS T2 ON T1.employeeid  =  T2.prepnurse GROUP BY T1.employeeid ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "hospital_1", "query": "SELECT T1.name FROM nurse AS T1 JOIN appointment AS T2 ON T1.employeeid  =  T2.prepnurse GROUP BY T1.employeeid ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.name", "FROM", "nurse", "AS", "T1", "JOIN", "appointment", "AS", "T2", "ON", "T1.employeeid", "=", "T2.prepnurse", "GROUP", "BY", "T1.employeeid", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "nurse", "as", "t1", "join", "appointment", "as", "t2", "on", "t1", ".", "employeeid", "=", "t2", ".", "prepnurse", "group", "by", "t1", ".", "employeeid", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the name of the nurse has the most appointments?", "question_toks": ["What", "is", "the", "name", "of", "the", "nurse", "has", "the", "most", "appointments", "?"], "guid": 8453}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | Find the number of classes in each school.", "sql": "SELECT count(*) ,  T3.school_code FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code  =  T2.crs_code JOIN department AS T3 ON T2.dept_code  =  T3.dept_code GROUP BY T3.school_code", "example": {"db_id": "college_1", "query": "SELECT count(*) ,  T3.school_code FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code  =  T2.crs_code JOIN department AS T3 ON T2.dept_code  =  T3.dept_code GROUP BY T3.school_code", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "T3.school_code", "FROM", "CLASS", "AS", "T1", "JOIN", "course", "AS", "T2", "ON", "T1.crs_code", "=", "T2.crs_code", "JOIN", "department", "AS", "T3", "ON", "T2.dept_code", "=", "T3.dept_code", "GROUP", "BY", "T3.school_code"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "t3", ".", "school_code", "from", "class", "as", "t1", "join", "course", "as", "t2", "on", "t1", ".", "crs_code", "=", "t2", ".", "crs_code", "join", "department", "as", "t3", "on", "t2", ".", "dept_code", "=", "t3", ".", "dept_code", "group", "by", "t3", ".", "school_code"], "question": "Find the number of classes in each school.", "question_toks": ["Find", "the", "number", "of", "classes", "in", "each", "school", "."], "guid": 8454}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | Find the first names of all professors in the Accounting department who is teaching some course and the class room.", "sql": "SELECT T2.emp_fname ,  T1.class_room FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN professor AS T3 ON T2.emp_num  =  T3.emp_num JOIN department AS T4 ON T4.dept_code  =  T3.dept_code WHERE T4.dept_name  =  'Accounting'", "example": {"db_id": "college_1", "query": "SELECT T2.emp_fname ,  T1.class_room FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN professor AS T3 ON T2.emp_num  =  T3.emp_num JOIN department AS T4 ON T4.dept_code  =  T3.dept_code WHERE T4.dept_name  =  'Accounting'", "query_toks": ["SELECT", "T2.emp_fname", ",", "T1.class_room", "FROM", "CLASS", "AS", "T1", "JOIN", "employee", "AS", "T2", "ON", "T1.prof_num", "=", "T2.emp_num", "JOIN", "professor", "AS", "T3", "ON", "T2.emp_num", "=", "T3.emp_num", "JOIN", "department", "AS", "T4", "ON", "T4.dept_code", "=", "T3.dept_code", "WHERE", "T4.dept_name", "=", "'Accounting", "'"], "query_toks_no_value": ["select", "t2", ".", "emp_fname", ",", "t1", ".", "class_room", "from", "class", "as", "t1", "join", "employee", "as", "t2", "on", "t1", ".", "prof_num", "=", "t2", ".", "emp_num", "join", "professor", "as", "t3", "on", "t2", ".", "emp_num", "=", "t3", ".", "emp_num", "join", "department", "as", "t4", "on", "t4", ".", "dept_code", "=", "t3", ".", "dept_code", "where", "t4", ".", "dept_name", "=", "value"], "question": "Find the first names of all professors in the Accounting department who is teaching some course and the class room.", "question_toks": ["Find", "the", "first", "names", "of", "all", "professors", "in", "the", "Accounting", "department", "who", "is", "teaching", "some", "course", "and", "the", "class", "room", "."], "guid": 8455}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | What are the campuses that opened in 1958?", "sql": "SELECT campus FROM campuses WHERE YEAR  =  1958", "example": {"db_id": "csu_1", "query": "SELECT campus FROM campuses WHERE YEAR  =  1958", "query_toks": ["SELECT", "campus", "FROM", "campuses", "WHERE", "YEAR", "=", "1958"], "query_toks_no_value": ["select", "campus", "from", "campuses", "where", "year", "=", "value"], "question": "What are the campuses that opened in 1958?", "question_toks": ["What", "are", "the", "campuses", "that", "opened", "in", "1958", "?"], "guid": 8456}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Find the year which offers the largest number of courses.", "sql": "SELECT YEAR FROM SECTION GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "college_2", "query": "SELECT YEAR FROM SECTION GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "YEAR", "FROM", "SECTION", "GROUP", "BY", "YEAR", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "year", "from", "section", "group", "by", "year", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Find the year which offers the largest number of courses.", "question_toks": ["Find", "the", "year", "which", "offers", "the", "largest", "number", "of", "courses", "."], "guid": 8457}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | What are the names of instructors who advise more than one student?", "sql": "SELECT T1.name FROM instructor AS T1 JOIN advisor AS T2 ON T1.id  =  T2.i_id GROUP BY T2.i_id HAVING count(*)  >  1", "example": {"db_id": "college_2", "query": "SELECT T1.name FROM instructor AS T1 JOIN advisor AS T2 ON T1.id  =  T2.i_id GROUP BY T2.i_id HAVING count(*)  >  1", "query_toks": ["SELECT", "T1.name", "FROM", "instructor", "AS", "T1", "JOIN", "advisor", "AS", "T2", "ON", "T1.id", "=", "T2.i_id", "GROUP", "BY", "T2.i_id", "HAVING", "count", "(", "*", ")", ">", "1"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "instructor", "as", "t1", "join", "advisor", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "i_id", "group", "by", "t2", ".", "i_id", "having", "count", "(", "*", ")", ">", "value"], "question": "What are the names of instructors who advise more than one student?", "question_toks": ["What", "are", "the", "names", "of", "instructors", "who", "advise", "more", "than", "one", "student", "?"], "guid": 8458}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | What are the names of all instructors who advise students in the math depart sorted by total credits of the student.", "sql": "SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'Math' ORDER BY T3.tot_cred", "example": {"db_id": "college_2", "query": "SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'Math' ORDER BY T3.tot_cred", "query_toks": ["SELECT", "T2.name", "FROM", "advisor", "AS", "T1", "JOIN", "instructor", "AS", "T2", "ON", "T1.i_id", "=", "T2.id", "JOIN", "student", "AS", "T3", "ON", "T1.s_id", "=", "T3.id", "WHERE", "T3.dept_name", "=", "'Math", "'", "ORDER", "BY", "T3.tot_cred"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "advisor", "as", "t1", "join", "instructor", "as", "t2", "on", "t1", ".", "i_id", "=", "t2", ".", "id", "join", "student", "as", "t3", "on", "t1", ".", "s_id", "=", "t3", ".", "id", "where", "t3", ".", "dept_name", "=", "value", "order", "by", "t3", ".", "tot_cred"], "question": "What are the names of all instructors who advise students in the math depart sorted by total credits of the student.", "question_toks": ["What", "are", "the", "names", "of", "all", "instructors", "who", "advise", "students", "in", "the", "math", "depart", "sorted", "by", "total", "credits", "of", "the", "student", "."], "guid": 8459}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | Find the patient who most recently stayed in room 111.", "sql": "SELECT patient FROM stay WHERE room  =  111 ORDER BY staystart DESC LIMIT 1", "example": {"db_id": "hospital_1", "query": "SELECT patient FROM stay WHERE room  =  111 ORDER BY staystart DESC LIMIT 1", "query_toks": ["SELECT", "patient", "FROM", "stay", "WHERE", "room", "=", "111", "ORDER", "BY", "staystart", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "patient", "from", "stay", "where", "room", "=", "value", "order", "by", "staystart", "desc", "limit", "value"], "question": "Find the patient who most recently stayed in room 111.", "question_toks": ["Find", "the", "patient", "who", "most", "recently", "stayed", "in", "room", "111", "."], "guid": 8460}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | What are the name of courses that have at least five enrollments?", "sql": "SELECT T1.CName FROM COURSE AS T1 JOIN ENROLLED_IN AS T2 ON T1.CID  =  T2.CID GROUP BY T2.CID HAVING COUNT(*)  >=  5", "example": {"db_id": "college_3", "query": "SELECT T1.CName FROM COURSE AS T1 JOIN ENROLLED_IN AS T2 ON T1.CID  =  T2.CID GROUP BY T2.CID HAVING COUNT(*)  >=  5", "query_toks": ["SELECT", "T1.CName", "FROM", "COURSE", "AS", "T1", "JOIN", "ENROLLED_IN", "AS", "T2", "ON", "T1.CID", "=", "T2.CID", "GROUP", "BY", "T2.CID", "HAVING", "COUNT", "(", "*", ")", ">", "=", "5"], "query_toks_no_value": ["select", "t1", ".", "cname", "from", "course", "as", "t1", "join", "enrolled_in", "as", "t2", "on", "t1", ".", "cid", "=", "t2", ".", "cid", "group", "by", "t2", ".", "cid", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "What are the name of courses that have at least five enrollments?", "question_toks": ["What", "are", "the", "name", "of", "courses", "that", "have", "at", "least", "five", "enrollments", "?"], "guid": 8461}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | Find the first names of all instructors who have taught some course and the course description.", "sql": "SELECT T2.emp_fname ,  T3.crs_description FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN course AS T3 ON T1.crs_code  =  T3.crs_code", "example": {"db_id": "college_1", "query": "SELECT T2.emp_fname ,  T3.crs_description FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN course AS T3 ON T1.crs_code  =  T3.crs_code", "query_toks": ["SELECT", "T2.emp_fname", ",", "T3.crs_description", "FROM", "CLASS", "AS", "T1", "JOIN", "employee", "AS", "T2", "ON", "T1.prof_num", "=", "T2.emp_num", "JOIN", "course", "AS", "T3", "ON", "T1.crs_code", "=", "T3.crs_code"], "query_toks_no_value": ["select", "t2", ".", "emp_fname", ",", "t3", ".", "crs_description", "from", "class", "as", "t1", "join", "employee", "as", "t2", "on", "t1", ".", "prof_num", "=", "t2", ".", "emp_num", "join", "course", "as", "t3", "on", "t1", ".", "crs_code", "=", "t3", ".", "crs_code"], "question": "Find the first names of all instructors who have taught some course and the course description.", "question_toks": ["Find", "the", "first", "names", "of", "all", "instructors", "who", "have", "taught", "some", "course", "and", "the", "course", "description", "."], "guid": 8462}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | Which campus has the most faculties in year 2003?", "sql": "SELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2003 ORDER BY T2.faculty DESC LIMIT 1", "example": {"db_id": "csu_1", "query": "SELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2003 ORDER BY T2.faculty DESC LIMIT 1", "query_toks": ["SELECT", "T1.campus", "FROM", "campuses", "AS", "T1", "JOIN", "faculty", "AS", "T2", "ON", "T1.id", "=", "T2.campus", "WHERE", "T2.year", "=", "2003", "ORDER", "BY", "T2.faculty", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "campus", "from", "campuses", "as", "t1", "join", "faculty", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "campus", "where", "t2", ".", "year", "=", "value", "order", "by", "t2", ".", "faculty", "desc", "limit", "value"], "question": "Which campus has the most faculties in year 2003?", "question_toks": ["Which", "campus", "has", "the", "most", "faculties", "in", "year", "2003", "?"], "guid": 8463}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | Find the three most expensive procedures.", "sql": "SELECT name FROM procedures ORDER BY cost LIMIT 3", "example": {"db_id": "hospital_1", "query": "SELECT name FROM procedures ORDER BY cost LIMIT 3", "query_toks": ["SELECT", "name", "FROM", "procedures", "ORDER", "BY", "cost", "LIMIT", "3"], "query_toks_no_value": ["select", "name", "from", "procedures", "order", "by", "cost", "limit", "value"], "question": "Find the three most expensive procedures.", "question_toks": ["Find", "the", "three", "most", "expensive", "procedures", "."], "guid": 8464}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | How many classes are held in each department?", "sql": "SELECT count(*) ,  dept_code FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code  =  T2.crs_code GROUP BY dept_code", "example": {"db_id": "college_1", "query": "SELECT count(*) ,  dept_code FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code  =  T2.crs_code GROUP BY dept_code", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "dept_code", "FROM", "CLASS", "AS", "T1", "JOIN", "course", "AS", "T2", "ON", "T1.crs_code", "=", "T2.crs_code", "GROUP", "BY", "dept_code"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "dept_code", "from", "class", "as", "t1", "join", "course", "as", "t2", "on", "t1", ".", "crs_code", "=", "t2", ".", "crs_code", "group", "by", "dept_code"], "question": "How many classes are held in each department?", "question_toks": ["How", "many", "classes", "are", "held", "in", "each", "department", "?"], "guid": 8465}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What is the last name of the professor whose office is located in DRE 102, and when were they hired?", "sql": "SELECT T1.emp_lname ,  T1.emp_hiredate FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num WHERE T2.prof_office  =  'DRE 102'", "example": {"db_id": "college_1", "query": "SELECT T1.emp_lname ,  T1.emp_hiredate FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num WHERE T2.prof_office  =  'DRE 102'", "query_toks": ["SELECT", "T1.emp_lname", ",", "T1.emp_hiredate", "FROM", "employee", "AS", "T1", "JOIN", "professor", "AS", "T2", "ON", "T1.emp_num", "=", "T2.emp_num", "WHERE", "T2.prof_office", "=", "'DRE", "102", "'"], "query_toks_no_value": ["select", "t1", ".", "emp_lname", ",", "t1", ".", "emp_hiredate", "from", "employee", "as", "t1", "join", "professor", "as", "t2", "on", "t1", ".", "emp_num", "=", "t2", ".", "emp_num", "where", "t2", ".", "prof_office", "=", "value"], "question": "What is the last name of the professor whose office is located in DRE 102, and when were they hired?", "question_toks": ["What", "is", "the", "last", "name", "of", "the", "professor", "whose", "office", "is", "located", "in", "DRE", "102", ",", "and", "when", "were", "they", "hired", "?"], "guid": 8466}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | What are the phones of departments in Room 268?", "sql": "SELECT DPhone FROM DEPARTMENT WHERE Room  =  268", "example": {"db_id": "college_3", "query": "SELECT DPhone FROM DEPARTMENT WHERE Room  =  268", "query_toks": ["SELECT", "DPhone", "FROM", "DEPARTMENT", "WHERE", "Room", "=", "268"], "query_toks_no_value": ["select", "dphone", "from", "department", "where", "room", "=", "value"], "question": "What are the phones of departments in Room 268?", "question_toks": ["What", "are", "the", "phones", "of", "departments", "in", "Room", "268", "?"], "guid": 8467}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | Find the full names of faculties who are members of department with department number 520.", "sql": "SELECT T1.Fname ,  T1.Lname FROM FACULTY AS T1 JOIN MEMBER_OF AS T2 ON T1.FacID  =  T2.FacID WHERE T2.DNO  =  520", "example": {"db_id": "college_3", "query": "SELECT T1.Fname ,  T1.Lname FROM FACULTY AS T1 JOIN MEMBER_OF AS T2 ON T1.FacID  =  T2.FacID WHERE T2.DNO  =  520", "query_toks": ["SELECT", "T1.Fname", ",", "T1.Lname", "FROM", "FACULTY", "AS", "T1", "JOIN", "MEMBER_OF", "AS", "T2", "ON", "T1.FacID", "=", "T2.FacID", "WHERE", "T2.DNO", "=", "520"], "query_toks_no_value": ["select", "t1", ".", "fname", ",", "t1", ".", "lname", "from", "faculty", "as", "t1", "join", "member_of", "as", "t2", "on", "t1", ".", "facid", "=", "t2", ".", "facid", "where", "t2", ".", "dno", "=", "value"], "question": "Find the full names of faculties who are members of department with department number 520.", "question_toks": ["Find", "the", "full", "names", "of", "faculties", "who", "are", "members", "of", "department", "with", "department", "number", "520", "."], "guid": 8468}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | What are the full names of the 3 instructors who teach the most courses?", "sql": "SELECT T2.Fname ,  T2.Lname FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor  =  T2.FacID GROUP BY T1.Instructor ORDER BY count(*) DESC LIMIT 3", "example": {"db_id": "college_3", "query": "SELECT T2.Fname ,  T2.Lname FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor  =  T2.FacID GROUP BY T1.Instructor ORDER BY count(*) DESC LIMIT 3", "query_toks": ["SELECT", "T2.Fname", ",", "T2.Lname", "FROM", "COURSE", "AS", "T1", "JOIN", "FACULTY", "AS", "T2", "ON", "T1.Instructor", "=", "T2.FacID", "GROUP", "BY", "T1.Instructor", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "3"], "query_toks_no_value": ["select", "t2", ".", "fname", ",", "t2", ".", "lname", "from", "course", "as", "t1", "join", "faculty", "as", "t2", "on", "t1", ".", "instructor", "=", "t2", ".", "facid", "group", "by", "t1", ".", "instructor", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What are the full names of the 3 instructors who teach the most courses?", "question_toks": ["What", "are", "the", "full", "names", "of", "the", "3", "instructors", "who", "teach", "the", "most", "courses", "?"], "guid": 8469}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What is the name of the department with the most students enrolled?", "sql": "SELECT T4.dept_name FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN department AS T4 ON T3.dept_code  =  T4.dept_code GROUP BY T3.dept_code ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "college_1", "query": "SELECT T4.dept_name FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN department AS T4 ON T3.dept_code  =  T4.dept_code GROUP BY T3.dept_code ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T4.dept_name", "FROM", "CLASS", "AS", "T1", "JOIN", "enroll", "AS", "T2", "ON", "T1.class_code", "=", "T2.class_code", "JOIN", "course", "AS", "T3", "ON", "T1.crs_code", "=", "T3.crs_code", "JOIN", "department", "AS", "T4", "ON", "T3.dept_code", "=", "T4.dept_code", "GROUP", "BY", "T3.dept_code", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t4", ".", "dept_name", "from", "class", "as", "t1", "join", "enroll", "as", "t2", "on", "t1", ".", "class_code", "=", "t2", ".", "class_code", "join", "course", "as", "t3", "on", "t1", ".", "crs_code", "=", "t3", ".", "crs_code", "join", "department", "as", "t4", "on", "t3", ".", "dept_code", "=", "t4", ".", "dept_code", "group", "by", "t3", ".", "dept_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the name of the department with the most students enrolled?", "question_toks": ["What", "is", "the", "name", "of", "the", "department", "with", "the", "most", "students", "enrolled", "?"], "guid": 8470}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | List in alphabetic order the names of all distinct instructors.", "sql": "SELECT DISTINCT name FROM  instructor ORDER BY name", "example": {"db_id": "college_2", "query": "SELECT DISTINCT name FROM  instructor ORDER BY name", "query_toks": ["SELECT", "DISTINCT", "name", "FROM", "instructor", "ORDER", "BY", "name"], "query_toks_no_value": ["select", "distinct", "name", "from", "instructor", "order", "by", "name"], "question": "List in alphabetic order the names of all distinct instructors.", "question_toks": ["List", "in", "alphabetic", "order", "the", "names", "of", "all", "distinct", "instructors", "."], "guid": 8471}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Find the salaries of all distinct instructors that are less than the largest salary.", "sql": "SELECT DISTINCT salary FROM instructor WHERE salary  <  (SELECT max(salary) FROM instructor)", "example": {"db_id": "college_2", "query": "SELECT DISTINCT salary FROM instructor WHERE salary  <  (SELECT max(salary) FROM instructor)", "query_toks": ["SELECT", "DISTINCT", "salary", "FROM", "instructor", "WHERE", "salary", "<", "(", "SELECT", "max", "(", "salary", ")", "FROM", "instructor", ")"], "query_toks_no_value": ["select", "distinct", "salary", "from", "instructor", "where", "salary", "<", "(", "select", "max", "(", "salary", ")", "from", "instructor", ")"], "question": "Find the salaries of all distinct instructors that are less than the largest salary.", "question_toks": ["Find", "the", "salaries", "of", "all", "distinct", "instructors", "that", "are", "less", "than", "the", "largest", "salary", "."], "guid": 8472}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What are the first and last name of all biology professors?", "sql": "SELECT T3.EMP_FNAME ,  T3.EMP_LNAME FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code JOIN employee AS T3 ON T1.EMP_NUM  =  T3.EMP_NUM WHERE DEPT_NAME  =  \"Biology\"", "example": {"db_id": "college_1", "query": "SELECT T3.EMP_FNAME ,  T3.EMP_LNAME FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code JOIN employee AS T3 ON T1.EMP_NUM  =  T3.EMP_NUM WHERE DEPT_NAME  =  \"Biology\"", "query_toks": ["SELECT", "T3.EMP_FNAME", ",", "T3.EMP_LNAME", "FROM", "professor", "AS", "T1", "JOIN", "department", "AS", "T2", "ON", "T1.dept_code", "=", "T2.dept_code", "JOIN", "employee", "AS", "T3", "ON", "T1.EMP_NUM", "=", "T3.EMP_NUM", "WHERE", "DEPT_NAME", "=", "``", "Biology", "''"], "query_toks_no_value": ["select", "t3", ".", "emp_fname", ",", "t3", ".", "emp_lname", "from", "professor", "as", "t1", "join", "department", "as", "t2", "on", "t1", ".", "dept_code", "=", "t2", ".", "dept_code", "join", "employee", "as", "t3", "on", "t1", ".", "emp_num", "=", "t3", ".", "emp_num", "where", "dept_name", "=", "value"], "question": "What are the first and last name of all biology professors?", "question_toks": ["What", "are", "the", "first", "and", "last", "name", "of", "all", "biology", "professors", "?"], "guid": 8473}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | List the names of all distinct medications, ordered in an alphabetical order.", "sql": "SELECT DISTINCT name FROM medication ORDER BY name", "example": {"db_id": "hospital_1", "query": "SELECT DISTINCT name FROM medication ORDER BY name", "query_toks": ["SELECT", "DISTINCT", "name", "FROM", "medication", "ORDER", "BY", "name"], "query_toks_no_value": ["select", "distinct", "name", "from", "medication", "order", "by", "name"], "question": "List the names of all distinct medications, ordered in an alphabetical order.", "question_toks": ["List", "the", "names", "of", "all", "distinct", "medications", ",", "ordered", "in", "an", "alphabetical", "order", "."], "guid": 8474}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | How many students have had at least one \"B\" grade?", "sql": "SELECT COUNT(DISTINCT StuID) FROM ENROLLED_IN WHERE Grade  =  \"B\"", "example": {"db_id": "college_3", "query": "SELECT COUNT(DISTINCT StuID) FROM ENROLLED_IN WHERE Grade  =  \"B\"", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "StuID", ")", "FROM", "ENROLLED_IN", "WHERE", "Grade", "=", "``", "B", "''"], "query_toks_no_value": ["select", "count", "(", "distinct", "stuid", ")", "from", "enrolled_in", "where", "grade", "=", "value"], "question": "How many students have had at least one \"B\" grade?", "question_toks": ["How", "many", "students", "have", "had", "at", "least", "one", "``", "B", "''", "grade", "?"], "guid": 8475}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What are the first names, office locations, and departments of all instructors, and also what are the descriptions of the courses they teach?", "sql": "SELECT T2.emp_fname ,  T4.prof_office ,  T3.crs_description ,  T5.dept_name FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN professor AS T4 ON T2.emp_num  =  T4.emp_num JOIN department AS T5 ON T4.dept_code  =  T5.dept_code", "example": {"db_id": "college_1", "query": "SELECT T2.emp_fname ,  T4.prof_office ,  T3.crs_description ,  T5.dept_name FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN professor AS T4 ON T2.emp_num  =  T4.emp_num JOIN department AS T5 ON T4.dept_code  =  T5.dept_code", "query_toks": ["SELECT", "T2.emp_fname", ",", "T4.prof_office", ",", "T3.crs_description", ",", "T5.dept_name", "FROM", "CLASS", "AS", "T1", "JOIN", "employee", "AS", "T2", "ON", "T1.prof_num", "=", "T2.emp_num", "JOIN", "course", "AS", "T3", "ON", "T1.crs_code", "=", "T3.crs_code", "JOIN", "professor", "AS", "T4", "ON", "T2.emp_num", "=", "T4.emp_num", "JOIN", "department", "AS", "T5", "ON", "T4.dept_code", "=", "T5.dept_code"], "query_toks_no_value": ["select", "t2", ".", "emp_fname", ",", "t4", ".", "prof_office", ",", "t3", ".", "crs_description", ",", "t5", ".", "dept_name", "from", "class", "as", "t1", "join", "employee", "as", "t2", "on", "t1", ".", "prof_num", "=", "t2", ".", "emp_num", "join", "course", "as", "t3", "on", "t1", ".", "crs_code", "=", "t3", ".", "crs_code", "join", "professor", "as", "t4", "on", "t2", ".", "emp_num", "=", "t4", ".", "emp_num", "join", "department", "as", "t5", "on", "t4", ".", "dept_code", "=", "t5", ".", "dept_code"], "question": "What are the first names, office locations, and departments of all instructors, and also what are the descriptions of the courses they teach?", "question_toks": ["What", "are", "the", "first", "names", ",", "office", "locations", ",", "and", "departments", "of", "all", "instructors", ",", "and", "also", "what", "are", "the", "descriptions", "of", "the", "courses", "they", "teach", "?"], "guid": 8476}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Count the number of rooms in Lamberton with capacity lower than 50.", "sql": "SELECT count(*) FROM classroom WHERE building  =  'Lamberton' AND capacity  <  50", "example": {"db_id": "college_2", "query": "SELECT count(*) FROM classroom WHERE building  =  'Lamberton' AND capacity  <  50", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "classroom", "WHERE", "building", "=", "'Lamberton", "'", "AND", "capacity", "<", "50"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "classroom", "where", "building", "=", "value", "and", "capacity", "<", "value"], "question": "Count the number of rooms in Lamberton with capacity lower than 50.", "question_toks": ["Count", "the", "number", "of", "rooms", "in", "Lamberton", "with", "capacity", "lower", "than", "50", "."], "guid": 8477}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Find courses that ran in Fall 2009 or in Spring 2010.", "sql": "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 UNION SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010", "example": {"db_id": "college_2", "query": "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 UNION SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010", "query_toks": ["SELECT", "course_id", "FROM", "SECTION", "WHERE", "semester", "=", "'Fall", "'", "AND", "YEAR", "=", "2009", "UNION", "SELECT", "course_id", "FROM", "SECTION", "WHERE", "semester", "=", "'Spring", "'", "AND", "YEAR", "=", "2010"], "query_toks_no_value": ["select", "course_id", "from", "section", "where", "semester", "=", "value", "and", "year", "=", "value", "union", "select", "course_id", "from", "section", "where", "semester", "=", "value", "and", "year", "=", "value"], "question": "Find courses that ran in Fall 2009 or in Spring 2010.", "question_toks": ["Find", "courses", "that", "ran", "in", "Fall", "2009", "or", "in", "Spring", "2010", "."], "guid": 8478}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | how many schools exist in total?", "sql": "SELECT count(DISTINCT school_code) FROM department", "example": {"db_id": "college_1", "query": "SELECT count(DISTINCT school_code) FROM department", "query_toks": ["SELECT", "count", "(", "DISTINCT", "school_code", ")", "FROM", "department"], "query_toks_no_value": ["select", "count", "(", "distinct", "school_code", ")", "from", "department"], "question": "how many schools exist in total?", "question_toks": ["how", "many", "schools", "exist", "in", "total", "?"], "guid": 8479}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | List the distinct names of the instructors, ordered by name.", "sql": "SELECT DISTINCT name FROM  instructor ORDER BY name", "example": {"db_id": "college_2", "query": "SELECT DISTINCT name FROM  instructor ORDER BY name", "query_toks": ["SELECT", "DISTINCT", "name", "FROM", "instructor", "ORDER", "BY", "name"], "query_toks_no_value": ["select", "distinct", "name", "from", "instructor", "order", "by", "name"], "question": "List the distinct names of the instructors, ordered by name.", "question_toks": ["List", "the", "distinct", "names", "of", "the", "instructors", ",", "ordered", "by", "name", "."], "guid": 8480}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | How many professors are in the accounting dept?", "sql": "SELECT count(*) FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE DEPT_NAME  =  \"Accounting\"", "example": {"db_id": "college_1", "query": "SELECT count(*) FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE DEPT_NAME  =  \"Accounting\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "professor", "AS", "T1", "JOIN", "department", "AS", "T2", "ON", "T1.dept_code", "=", "T2.dept_code", "WHERE", "DEPT_NAME", "=", "``", "Accounting", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "professor", "as", "t1", "join", "department", "as", "t2", "on", "t1", ".", "dept_code", "=", "t2", ".", "dept_code", "where", "dept_name", "=", "value"], "question": "How many professors are in the accounting dept?", "question_toks": ["How", "many", "professors", "are", "in", "the", "accounting", "dept", "?"], "guid": 8481}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | What is the title of the course with Differential Geometry as a prerequisite?", "sql": "SELECT title FROM course WHERE course_id IN (SELECT T1.course_id FROM prereq AS T1 JOIN course AS T2 ON T1.prereq_id  =  T2.course_id WHERE T2.title  =  'Differential Geometry')", "example": {"db_id": "college_2", "query": "SELECT title FROM course WHERE course_id IN (SELECT T1.course_id FROM prereq AS T1 JOIN course AS T2 ON T1.prereq_id  =  T2.course_id WHERE T2.title  =  'Differential Geometry')", "query_toks": ["SELECT", "title", "FROM", "course", "WHERE", "course_id", "IN", "(", "SELECT", "T1.course_id", "FROM", "prereq", "AS", "T1", "JOIN", "course", "AS", "T2", "ON", "T1.prereq_id", "=", "T2.course_id", "WHERE", "T2.title", "=", "'Differential", "Geometry", "'", ")"], "query_toks_no_value": ["select", "title", "from", "course", "where", "course_id", "in", "(", "select", "t1", ".", "course_id", "from", "prereq", "as", "t1", "join", "course", "as", "t2", "on", "t1", ".", "prereq_id", "=", "t2", ".", "course_id", "where", "t2", ".", "title", "=", "value", ")"], "question": "What is the title of the course with Differential Geometry as a prerequisite?", "question_toks": ["What", "is", "the", "title", "of", "the", "course", "with", "Differential", "Geometry", "as", "a", "prerequisite", "?"], "guid": 8482}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | What is the name of the patient who made the most recent appointment?", "sql": "SELECT T1.name FROM patient AS T1 JOIN appointment AS T2 ON T1.ssn = T2.patient ORDER BY T2.start DESC LIMIT 1", "example": {"db_id": "hospital_1", "query": "SELECT T1.name FROM patient AS T1 JOIN appointment AS T2 ON T1.ssn = T2.patient ORDER BY T2.start DESC LIMIT 1", "query_toks": ["SELECT", "T1.name", "FROM", "patient", "AS", "T1", "JOIN", "appointment", "AS", "T2", "ON", "T1.ssn", "=", "T2.patient", "ORDER", "BY", "T2.start", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "patient", "as", "t1", "join", "appointment", "as", "t2", "on", "t1", ".", "ssn", "=", "t2", ".", "patient", "order", "by", "t2", ".", "start", "desc", "limit", "value"], "question": "What is the name of the patient who made the most recent appointment?", "question_toks": ["What", "is", "the", "name", "of", "the", "patient", "who", "made", "the", "most", "recent", "appointment", "?"], "guid": 8483}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | How many students are in each department?", "sql": "SELECT count(*) ,  dept_code FROM student GROUP BY dept_code", "example": {"db_id": "college_1", "query": "SELECT count(*) ,  dept_code FROM student GROUP BY dept_code", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "dept_code", "FROM", "student", "GROUP", "BY", "dept_code"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "dept_code", "from", "student", "group", "by", "dept_code"], "question": "How many students are in each department?", "question_toks": ["How", "many", "students", "are", "in", "each", "department", "?"], "guid": 8484}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | What are the full names and gradepoints for all enrollments?", "sql": "SELECT T3.Fname ,  T3.LName ,  T2.gradepoint FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID", "example": {"db_id": "college_3", "query": "SELECT T3.Fname ,  T3.LName ,  T2.gradepoint FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID", "query_toks": ["SELECT", "T3.Fname", ",", "T3.LName", ",", "T2.gradepoint", "FROM", "ENROLLED_IN", "AS", "T1", "JOIN", "GRADECONVERSION", "AS", "T2", "JOIN", "STUDENT", "AS", "T3", "ON", "T1.Grade", "=", "T2.lettergrade", "AND", "T1.StuID", "=", "T3.StuID"], "query_toks_no_value": ["select", "t3", ".", "fname", ",", "t3", ".", "lname", ",", "t2", ".", "gradepoint", "from", "enrolled_in", "as", "t1", "join", "gradeconversion", "as", "t2", "join", "student", "as", "t3", "on", "t1", ".", "grade", "=", "t2", ".", "lettergrade", "and", "t1", ".", "stuid", "=", "t3", ".", "stuid"], "question": "What are the full names and gradepoints for all enrollments?", "question_toks": ["What", "are", "the", "full", "names", "and", "gradepoints", "for", "all", "enrollments", "?"], "guid": 8485}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | What is the campus fee of \"San Jose State University\" in year 1996?", "sql": "SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id  =  t2.campus WHERE t1.campus  =  \"San Jose State University\" AND T2.year  =  1996", "example": {"db_id": "csu_1", "query": "SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id  =  t2.campus WHERE t1.campus  =  \"San Jose State University\" AND T2.year  =  1996", "query_toks": ["SELECT", "campusfee", "FROM", "campuses", "AS", "T1", "JOIN", "csu_fees", "AS", "T2", "ON", "T1.id", "=", "t2.campus", "WHERE", "t1.campus", "=", "``", "San", "Jose", "State", "University", "''", "AND", "T2.year", "=", "1996"], "query_toks_no_value": ["select", "campusfee", "from", "campuses", "as", "t1", "join", "csu_fees", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "campus", "where", "t1", ".", "campus", "=", "value", "and", "t2", ".", "year", "=", "value"], "question": "What is the campus fee of \"San Jose State University\" in year 1996?", "question_toks": ["What", "is", "the", "campus", "fee", "of", "``", "San", "Jose", "State", "University", "''", "in", "year", "1996", "?"], "guid": 8486}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Find the name of department has the highest amount of students?", "sql": "SELECT dept_name FROM student GROUP BY dept_name ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "college_2", "query": "SELECT dept_name FROM student GROUP BY dept_name ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "dept_name", "FROM", "student", "GROUP", "BY", "dept_name", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "dept_name", "from", "student", "group", "by", "dept_name", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Find the name of department has the highest amount of students?", "question_toks": ["Find", "the", "name", "of", "department", "has", "the", "highest", "amount", "of", "students", "?"], "guid": 8487}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | What are the names and average salaries for departments with average salary higher than 42000?", "sql": "SELECT dept_name ,  AVG (salary) FROM instructor GROUP BY dept_name HAVING AVG (salary)  >  42000", "example": {"db_id": "college_2", "query": "SELECT dept_name ,  AVG (salary) FROM instructor GROUP BY dept_name HAVING AVG (salary)  >  42000", "query_toks": ["SELECT", "dept_name", ",", "AVG", "(", "salary", ")", "FROM", "instructor", "GROUP", "BY", "dept_name", "HAVING", "AVG", "(", "salary", ")", ">", "42000"], "query_toks_no_value": ["select", "dept_name", ",", "avg", "(", "salary", ")", "from", "instructor", "group", "by", "dept_name", "having", "avg", "(", "salary", ")", ">", "value"], "question": "What are the names and average salaries for departments with average salary higher than 42000?", "question_toks": ["What", "are", "the", "names", "and", "average", "salaries", "for", "departments", "with", "average", "salary", "higher", "than", "42000", "?"], "guid": 8488}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | Which physicians are trained in procedures that are more expensive than 5000?", "sql": "SELECT T1.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T3.cost  >  5000", "example": {"db_id": "hospital_1", "query": "SELECT T1.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T3.cost  >  5000", "query_toks": ["SELECT", "T1.name", "FROM", "physician", "AS", "T1", "JOIN", "trained_in", "AS", "T2", "ON", "T1.employeeid", "=", "T2.physician", "JOIN", "procedures", "AS", "T3", "ON", "T3.code", "=", "T2.treatment", "WHERE", "T3.cost", ">", "5000"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "physician", "as", "t1", "join", "trained_in", "as", "t2", "on", "t1", ".", "employeeid", "=", "t2", ".", "physician", "join", "procedures", "as", "t3", "on", "t3", ".", "code", "=", "t2", ".", "treatment", "where", "t3", ".", "cost", ">", "value"], "question": "Which physicians are trained in procedures that are more expensive than 5000?", "question_toks": ["Which", "physicians", "are", "trained", "in", "procedures", "that", "are", "more", "expensive", "than", "5000", "?"], "guid": 8489}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Find the names and average salaries of all departments whose average salary is greater than 42000.", "sql": "SELECT dept_name ,  AVG (salary) FROM instructor GROUP BY dept_name HAVING AVG (salary)  >  42000", "example": {"db_id": "college_2", "query": "SELECT dept_name ,  AVG (salary) FROM instructor GROUP BY dept_name HAVING AVG (salary)  >  42000", "query_toks": ["SELECT", "dept_name", ",", "AVG", "(", "salary", ")", "FROM", "instructor", "GROUP", "BY", "dept_name", "HAVING", "AVG", "(", "salary", ")", ">", "42000"], "query_toks_no_value": ["select", "dept_name", ",", "avg", "(", "salary", ")", "from", "instructor", "group", "by", "dept_name", "having", "avg", "(", "salary", ")", ">", "value"], "question": "Find the names and average salaries of all departments whose average salary is greater than 42000.", "question_toks": ["Find", "the", "names", "and", "average", "salaries", "of", "all", "departments", "whose", "average", "salary", "is", "greater", "than", "42000", "."], "guid": 8490}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Which department has the lowest budget?", "sql": "SELECT dept_name FROM department ORDER BY budget LIMIT 1", "example": {"db_id": "college_2", "query": "SELECT dept_name FROM department ORDER BY budget LIMIT 1", "query_toks": ["SELECT", "dept_name", "FROM", "department", "ORDER", "BY", "budget", "LIMIT", "1"], "query_toks_no_value": ["select", "dept_name", "from", "department", "order", "by", "budget", "limit", "value"], "question": "Which department has the lowest budget?", "question_toks": ["Which", "department", "has", "the", "lowest", "budget", "?"], "guid": 8491}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | Find the last names of faculties in building Barton in alphabetic order.", "sql": "SELECT Lname FROM FACULTY WHERE Building  =  \"Barton\" ORDER BY Lname", "example": {"db_id": "college_3", "query": "SELECT Lname FROM FACULTY WHERE Building  =  \"Barton\" ORDER BY Lname", "query_toks": ["SELECT", "Lname", "FROM", "FACULTY", "WHERE", "Building", "=", "``", "Barton", "''", "ORDER", "BY", "Lname"], "query_toks_no_value": ["select", "lname", "from", "faculty", "where", "building", "=", "value", "order", "by", "lname"], "question": "Find the last names of faculties in building Barton in alphabetic order.", "question_toks": ["Find", "the", "last", "names", "of", "faculties", "in", "building", "Barton", "in", "alphabetic", "order", "."], "guid": 8492}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What are the first names and office locations for all professors sorted alphabetically by first name?", "sql": "SELECT T2.emp_fname ,  T1.prof_office FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num  =  T2.emp_num ORDER BY T2.emp_fname", "example": {"db_id": "college_1", "query": "SELECT T2.emp_fname ,  T1.prof_office FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num  =  T2.emp_num ORDER BY T2.emp_fname", "query_toks": ["SELECT", "T2.emp_fname", ",", "T1.prof_office", "FROM", "professor", "AS", "T1", "JOIN", "employee", "AS", "T2", "ON", "T1.emp_num", "=", "T2.emp_num", "ORDER", "BY", "T2.emp_fname"], "query_toks_no_value": ["select", "t2", ".", "emp_fname", ",", "t1", ".", "prof_office", "from", "professor", "as", "t1", "join", "employee", "as", "t2", "on", "t1", ".", "emp_num", "=", "t2", ".", "emp_num", "order", "by", "t2", ".", "emp_fname"], "question": "What are the first names and office locations for all professors sorted alphabetically by first name?", "question_toks": ["What", "are", "the", "first", "names", "and", "office", "locations", "for", "all", "professors", "sorted", "alphabetically", "by", "first", "name", "?"], "guid": 8493}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | What are the names of students who haven't taken any Biology courses?", "sql": "SELECT name FROM student WHERE id NOT IN (SELECT T1.id FROM takes AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.dept_name  =  'Biology')", "example": {"db_id": "college_2", "query": "SELECT name FROM student WHERE id NOT IN (SELECT T1.id FROM takes AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.dept_name  =  'Biology')", "query_toks": ["SELECT", "name", "FROM", "student", "WHERE", "id", "NOT", "IN", "(", "SELECT", "T1.id", "FROM", "takes", "AS", "T1", "JOIN", "course", "AS", "T2", "ON", "T1.course_id", "=", "T2.course_id", "WHERE", "T2.dept_name", "=", "'Biology", "'", ")"], "query_toks_no_value": ["select", "name", "from", "student", "where", "id", "not", "in", "(", "select", "t1", ".", "id", "from", "takes", "as", "t1", "join", "course", "as", "t2", "on", "t1", ".", "course_id", "=", "t2", ".", "course_id", "where", "t2", ".", "dept_name", "=", "value", ")"], "question": "What are the names of students who haven't taken any Biology courses?", "question_toks": ["What", "are", "the", "names", "of", "students", "who", "have", "n't", "taken", "any", "Biology", "courses", "?"], "guid": 8494}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | What are each physician's employee id and department id primarily affiliated.", "sql": "SELECT physician ,  department FROM affiliated_with WHERE primaryaffiliation  =  1", "example": {"db_id": "hospital_1", "query": "SELECT physician ,  department FROM affiliated_with WHERE primaryaffiliation  =  1", "query_toks": ["SELECT", "physician", ",", "department", "FROM", "affiliated_with", "WHERE", "primaryaffiliation", "=", "1"], "query_toks_no_value": ["select", "physician", ",", "department", "from", "affiliated_with", "where", "primaryaffiliation", "=", "value"], "question": "What are each physician's employee id and department id primarily affiliated.", "question_toks": ["What", "are", "each", "physician", "'s", "employee", "id", "and", "department", "id", "primarily", "affiliated", "."], "guid": 8495}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Find the names of all instructors who have taught some course and the course_id.", "sql": "SELECT name ,  course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID  =  T2.ID", "example": {"db_id": "college_2", "query": "SELECT name ,  course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID  =  T2.ID", "query_toks": ["SELECT", "name", ",", "course_id", "FROM", "instructor", "AS", "T1", "JOIN", "teaches", "AS", "T2", "ON", "T1.ID", "=", "T2.ID"], "query_toks_no_value": ["select", "name", ",", "course_id", "from", "instructor", "as", "t1", "join", "teaches", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "id"], "question": "Find the names of all instructors who have taught some course and the course_id.", "question_toks": ["Find", "the", "names", "of", "all", "instructors", "who", "have", "taught", "some", "course", "and", "the", "course_id", "."], "guid": 8496}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What are the first names of the professors who do not teach a class.", "sql": "SELECT emp_fname FROM employee WHERE emp_jobcode  =  'PROF' EXCEPT SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num  =  T2.prof_num", "example": {"db_id": "college_1", "query": "SELECT emp_fname FROM employee WHERE emp_jobcode  =  'PROF' EXCEPT SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num  =  T2.prof_num", "query_toks": ["SELECT", "emp_fname", "FROM", "employee", "WHERE", "emp_jobcode", "=", "'PROF", "'", "EXCEPT", "SELECT", "T1.emp_fname", "FROM", "employee", "AS", "T1", "JOIN", "CLASS", "AS", "T2", "ON", "T1.emp_num", "=", "T2.prof_num"], "query_toks_no_value": ["select", "emp_fname", "from", "employee", "where", "emp_jobcode", "=", "value", "except", "select", "t1", ".", "emp_fname", "from", "employee", "as", "t1", "join", "class", "as", "t2", "on", "t1", ".", "emp_num", "=", "t2", ".", "prof_num"], "question": "What are the first names of the professors who do not teach a class.", "question_toks": ["What", "are", "the", "first", "names", "of", "the", "professors", "who", "do", "not", "teach", "a", "class", "."], "guid": 8497}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | Which physician was trained in the procedure that costs the most.", "sql": "SELECT T1.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment ORDER BY T3.cost DESC LIMIT 1", "example": {"db_id": "hospital_1", "query": "SELECT T1.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment ORDER BY T3.cost DESC LIMIT 1", "query_toks": ["SELECT", "T1.name", "FROM", "physician", "AS", "T1", "JOIN", "trained_in", "AS", "T2", "ON", "T1.employeeid", "=", "T2.physician", "JOIN", "procedures", "AS", "T3", "ON", "T3.code", "=", "T2.treatment", "ORDER", "BY", "T3.cost", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "physician", "as", "t1", "join", "trained_in", "as", "t2", "on", "t1", ".", "employeeid", "=", "t2", ".", "physician", "join", "procedures", "as", "t3", "on", "t3", ".", "code", "=", "t2", ".", "treatment", "order", "by", "t3", ".", "cost", "desc", "limit", "value"], "question": "Which physician was trained in the procedure that costs the most.", "question_toks": ["Which", "physician", "was", "trained", "in", "the", "procedure", "that", "costs", "the", "most", "."], "guid": 8498}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Find the names of all instructors whose salary is greater than the salary of all instructors in the Biology department.", "sql": "SELECT name FROM instructor WHERE salary  >  (SELECT max(salary) FROM instructor WHERE dept_name  =  'Biology')", "example": {"db_id": "college_2", "query": "SELECT name FROM instructor WHERE salary  >  (SELECT max(salary) FROM instructor WHERE dept_name  =  'Biology')", "query_toks": ["SELECT", "name", "FROM", "instructor", "WHERE", "salary", ">", "(", "SELECT", "max", "(", "salary", ")", "FROM", "instructor", "WHERE", "dept_name", "=", "'Biology", "'", ")"], "query_toks_no_value": ["select", "name", "from", "instructor", "where", "salary", ">", "(", "select", "max", "(", "salary", ")", "from", "instructor", "where", "dept_name", "=", "value", ")"], "question": "Find the names of all instructors whose salary is greater than the salary of all instructors in the Biology department.", "question_toks": ["Find", "the", "names", "of", "all", "instructors", "whose", "salary", "is", "greater", "than", "the", "salary", "of", "all", "instructors", "in", "the", "Biology", "department", "."], "guid": 8499}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Find the name of the courses that do not have any prerequisite?", "sql": "SELECT title FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)", "example": {"db_id": "college_2", "query": "SELECT title FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)", "query_toks": ["SELECT", "title", "FROM", "course", "WHERE", "course_id", "NOT", "IN", "(", "SELECT", "course_id", "FROM", "prereq", ")"], "query_toks_no_value": ["select", "title", "from", "course", "where", "course_id", "not", "in", "(", "select", "course_id", "from", "prereq", ")"], "question": "Find the name of the courses that do not have any prerequisite?", "question_toks": ["Find", "the", "name", "of", "the", "courses", "that", "do", "not", "have", "any", "prerequisite", "?"], "guid": 8500}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | What is the campus fee for San Jose State University in 1996?", "sql": "SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id  =  t2.campus WHERE t1.campus  =  \"San Jose State University\" AND T2.year  =  1996", "example": {"db_id": "csu_1", "query": "SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id  =  t2.campus WHERE t1.campus  =  \"San Jose State University\" AND T2.year  =  1996", "query_toks": ["SELECT", "campusfee", "FROM", "campuses", "AS", "T1", "JOIN", "csu_fees", "AS", "T2", "ON", "T1.id", "=", "t2.campus", "WHERE", "t1.campus", "=", "``", "San", "Jose", "State", "University", "''", "AND", "T2.year", "=", "1996"], "query_toks_no_value": ["select", "campusfee", "from", "campuses", "as", "t1", "join", "csu_fees", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "campus", "where", "t1", ".", "campus", "=", "value", "and", "t2", ".", "year", "=", "value"], "question": "What is the campus fee for San Jose State University in 1996?", "question_toks": ["What", "is", "the", "campus", "fee", "for", "San", "Jose", "State", "University", "in", "1996", "?"], "guid": 8501}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | How many credits does course CIS-220 have, and what its description?", "sql": "SELECT crs_credit ,  crs_description FROM course WHERE crs_code  =  'CIS-220'", "example": {"db_id": "college_1", "query": "SELECT crs_credit ,  crs_description FROM course WHERE crs_code  =  'CIS-220'", "query_toks": ["SELECT", "crs_credit", ",", "crs_description", "FROM", "course", "WHERE", "crs_code", "=", "'CIS-220", "'"], "query_toks_no_value": ["select", "crs_credit", ",", "crs_description", "from", "course", "where", "crs_code", "=", "value"], "question": "How many credits does course CIS-220 have, and what its description?", "question_toks": ["How", "many", "credits", "does", "course", "CIS-220", "have", ",", "and", "what", "its", "description", "?"], "guid": 8502}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | How many degrees were conferred at San Jose State University in 2000?", "sql": "SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  \"San Jose State University\" AND t2.year  =  2000", "example": {"db_id": "csu_1", "query": "SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  \"San Jose State University\" AND t2.year  =  2000", "query_toks": ["SELECT", "degrees", "FROM", "campuses", "AS", "T1", "JOIN", "degrees", "AS", "T2", "ON", "t1.id", "=", "t2.campus", "WHERE", "t1.campus", "=", "``", "San", "Jose", "State", "University", "''", "AND", "t2.year", "=", "2000"], "query_toks_no_value": ["select", "degrees", "from", "campuses", "as", "t1", "join", "degrees", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "campus", "where", "t1", ".", "campus", "=", "value", "and", "t2", ".", "year", "=", "value"], "question": "How many degrees were conferred at San Jose State University in 2000?", "question_toks": ["How", "many", "degrees", "were", "conferred", "at", "San", "Jose", "State", "University", "in", "2000", "?"], "guid": 8503}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | How many appointments are there?", "sql": "SELECT count(*) FROM appointment", "example": {"db_id": "hospital_1", "query": "SELECT count(*) FROM appointment", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "appointment"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "appointment"], "question": "How many appointments are there?", "question_toks": ["How", "many", "appointments", "are", "there", "?"], "guid": 8504}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | How many students have advisors?", "sql": "SELECT count(DISTINCT s_id) FROM advisor", "example": {"db_id": "college_2", "query": "SELECT count(DISTINCT s_id) FROM advisor", "query_toks": ["SELECT", "count", "(", "DISTINCT", "s_id", ")", "FROM", "advisor"], "query_toks_no_value": ["select", "count", "(", "distinct", "s_id", ")", "from", "advisor"], "question": "How many students have advisors?", "question_toks": ["How", "many", "students", "have", "advisors", "?"], "guid": 8505}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | What are the room numbers and corresponding buildings for classrooms which can seat between 50 to 100 students?", "sql": "SELECT building ,  room_number FROM classroom WHERE capacity BETWEEN 50 AND 100", "example": {"db_id": "college_2", "query": "SELECT building ,  room_number FROM classroom WHERE capacity BETWEEN 50 AND 100", "query_toks": ["SELECT", "building", ",", "room_number", "FROM", "classroom", "WHERE", "capacity", "BETWEEN", "50", "AND", "100"], "query_toks_no_value": ["select", "building", ",", "room_number", "from", "classroom", "where", "capacity", "between", "value", "and", "value"], "question": "What are the room numbers and corresponding buildings for classrooms which can seat between 50 to 100 students?", "question_toks": ["What", "are", "the", "room", "numbers", "and", "corresponding", "buildings", "for", "classrooms", "which", "can", "seat", "between", "50", "to", "100", "students", "?"], "guid": 8506}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | What are the names and budgets of departments with budgets greater than the average?", "sql": "SELECT dept_name ,  budget FROM department WHERE budget  >  (SELECT avg(budget) FROM department)", "example": {"db_id": "college_2", "query": "SELECT dept_name ,  budget FROM department WHERE budget  >  (SELECT avg(budget) FROM department)", "query_toks": ["SELECT", "dept_name", ",", "budget", "FROM", "department", "WHERE", "budget", ">", "(", "SELECT", "avg", "(", "budget", ")", "FROM", "department", ")"], "query_toks_no_value": ["select", "dept_name", ",", "budget", "from", "department", "where", "budget", ">", "(", "select", "avg", "(", "budget", ")", "from", "department", ")"], "question": "What are the names and budgets of departments with budgets greater than the average?", "question_toks": ["What", "are", "the", "names", "and", "budgets", "of", "departments", "with", "budgets", "greater", "than", "the", "average", "?"], "guid": 8507}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | What is the title of the course that was offered at building Chandler during the fall semester in the year of 2010?", "sql": "SELECT T1.title FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE building  =  'Chandler' AND semester  =  'Fall' AND YEAR  =  2010", "example": {"db_id": "college_2", "query": "SELECT T1.title FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE building  =  'Chandler' AND semester  =  'Fall' AND YEAR  =  2010", "query_toks": ["SELECT", "T1.title", "FROM", "course", "AS", "T1", "JOIN", "SECTION", "AS", "T2", "ON", "T1.course_id", "=", "T2.course_id", "WHERE", "building", "=", "'Chandler", "'", "AND", "semester", "=", "'Fall", "'", "AND", "YEAR", "=", "2010"], "query_toks_no_value": ["select", "t1", ".", "title", "from", "course", "as", "t1", "join", "section", "as", "t2", "on", "t1", ".", "course_id", "=", "t2", ".", "course_id", "where", "building", "=", "value", "and", "semester", "=", "value", "and", "year", "=", "value"], "question": "What is the title of the course that was offered at building Chandler during the fall semester in the year of 2010?", "question_toks": ["What", "is", "the", "title", "of", "the", "course", "that", "was", "offered", "at", "building", "Chandler", "during", "the", "fall", "semester", "in", "the", "year", "of", "2010", "?"], "guid": 8508}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | what is the name of the instructor who is in Statistics department and earns the lowest salary?", "sql": "SELECT name FROM instructor WHERE dept_name  =  'Statistics' ORDER BY salary LIMIT 1", "example": {"db_id": "college_2", "query": "SELECT name FROM instructor WHERE dept_name  =  'Statistics' ORDER BY salary LIMIT 1", "query_toks": ["SELECT", "name", "FROM", "instructor", "WHERE", "dept_name", "=", "'Statistics", "'", "ORDER", "BY", "salary", "LIMIT", "1"], "query_toks_no_value": ["select", "name", "from", "instructor", "where", "dept_name", "=", "value", "order", "by", "salary", "limit", "value"], "question": "what is the name of the instructor who is in Statistics department and earns the lowest salary?", "question_toks": ["what", "is", "the", "name", "of", "the", "instructor", "who", "is", "in", "Statistics", "department", "and", "earns", "the", "lowest", "salary", "?"], "guid": 8509}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What is the course description and number of credits for QM-261?", "sql": "SELECT crs_credit ,  crs_description FROM course WHERE crs_code  =  'QM-261'", "example": {"db_id": "college_1", "query": "SELECT crs_credit ,  crs_description FROM course WHERE crs_code  =  'QM-261'", "query_toks": ["SELECT", "crs_credit", ",", "crs_description", "FROM", "course", "WHERE", "crs_code", "=", "'QM-261", "'"], "query_toks_no_value": ["select", "crs_credit", ",", "crs_description", "from", "course", "where", "crs_code", "=", "value"], "question": "What is the course description and number of credits for QM-261?", "question_toks": ["What", "is", "the", "course", "description", "and", "number", "of", "credits", "for", "QM-261", "?"], "guid": 8510}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | How many medications are prescribed for each brand?", "sql": "SELECT count(*) ,  T1.name FROM medication AS T1 JOIN prescribes AS T2 ON T1.code = T2.medication GROUP BY T1.brand", "example": {"db_id": "hospital_1", "query": "SELECT count(*) ,  T1.name FROM medication AS T1 JOIN prescribes AS T2 ON T1.code = T2.medication GROUP BY T1.brand", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "T1.name", "FROM", "medication", "AS", "T1", "JOIN", "prescribes", "AS", "T2", "ON", "T1.code", "=", "T2.medication", "GROUP", "BY", "T1.brand"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "t1", ".", "name", "from", "medication", "as", "t1", "join", "prescribes", "as", "t2", "on", "t1", ".", "code", "=", "t2", ".", "medication", "group", "by", "t1", ".", "brand"], "question": "How many medications are prescribed for each brand?", "question_toks": ["How", "many", "medications", "are", "prescribed", "for", "each", "brand", "?"], "guid": 8511}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | Find the names of the campus which has more faculties in 2002 than every campus in Orange county.", "sql": "SELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2002 AND faculty  >  (SELECT max(faculty) FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2002 AND T1.county  =  \"Orange\")", "example": {"db_id": "csu_1", "query": "SELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2002 AND faculty  >  (SELECT max(faculty) FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2002 AND T1.county  =  \"Orange\")", "query_toks": ["SELECT", "T1.campus", "FROM", "campuses", "AS", "T1", "JOIN", "faculty", "AS", "T2", "ON", "T1.id", "=", "T2.campus", "WHERE", "T2.year", "=", "2002", "AND", "faculty", ">", "(", "SELECT", "max", "(", "faculty", ")", "FROM", "campuses", "AS", "T1", "JOIN", "faculty", "AS", "T2", "ON", "T1.id", "=", "T2.campus", "WHERE", "T2.year", "=", "2002", "AND", "T1.county", "=", "``", "Orange", "''", ")"], "query_toks_no_value": ["select", "t1", ".", "campus", "from", "campuses", "as", "t1", "join", "faculty", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "campus", "where", "t2", ".", "year", "=", "value", "and", "faculty", ">", "(", "select", "max", "(", "faculty", ")", "from", "campuses", "as", "t1", "join", "faculty", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "campus", "where", "t2", ".", "year", "=", "value", "and", "t1", ".", "county", "=", "value", ")"], "question": "Find the names of the campus which has more faculties in 2002 than every campus in Orange county.", "question_toks": ["Find", "the", "names", "of", "the", "campus", "which", "has", "more", "faculties", "in", "2002", "than", "every", "campus", "in", "Orange", "county", "."], "guid": 8512}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | What is the number of graduates in \"San Francisco State University\" in year 2004?", "sql": "SELECT sum(t1.graduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t1.year  =  2004 AND t2.campus  =  \"San Francisco State University\"", "example": {"db_id": "csu_1", "query": "SELECT sum(t1.graduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t1.year  =  2004 AND t2.campus  =  \"San Francisco State University\"", "query_toks": ["SELECT", "sum", "(", "t1.graduate", ")", "FROM", "discipline_enrollments", "AS", "t1", "JOIN", "campuses", "AS", "t2", "ON", "t1.campus", "=", "t2.id", "WHERE", "t1.year", "=", "2004", "AND", "t2.campus", "=", "``", "San", "Francisco", "State", "University", "''"], "query_toks_no_value": ["select", "sum", "(", "t1", ".", "graduate", ")", "from", "discipline_enrollments", "as", "t1", "join", "campuses", "as", "t2", "on", "t1", ".", "campus", "=", "t2", ".", "id", "where", "t1", ".", "year", "=", "value", "and", "t2", ".", "campus", "=", "value"], "question": "What is the number of graduates in \"San Francisco State University\" in year 2004?", "question_toks": ["What", "is", "the", "number", "of", "graduates", "in", "``", "San", "Francisco", "State", "University", "''", "in", "year", "2004", "?"], "guid": 8513}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What are the first names of all history professors who do not teach?", "sql": "SELECT T1.emp_fname FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T2.dept_code  =  T3.dept_code WHERE T3.dept_name  =  'History' EXCEPT SELECT T4.emp_fname FROM employee AS T4 JOIN CLASS AS T5 ON T4.emp_num  =  T5.prof_num", "example": {"db_id": "college_1", "query": "SELECT T1.emp_fname FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T2.dept_code  =  T3.dept_code WHERE T3.dept_name  =  'History' EXCEPT SELECT T4.emp_fname FROM employee AS T4 JOIN CLASS AS T5 ON T4.emp_num  =  T5.prof_num", "query_toks": ["SELECT", "T1.emp_fname", "FROM", "employee", "AS", "T1", "JOIN", "professor", "AS", "T2", "ON", "T1.emp_num", "=", "T2.emp_num", "JOIN", "department", "AS", "T3", "ON", "T2.dept_code", "=", "T3.dept_code", "WHERE", "T3.dept_name", "=", "'History", "'", "EXCEPT", "SELECT", "T4.emp_fname", "FROM", "employee", "AS", "T4", "JOIN", "CLASS", "AS", "T5", "ON", "T4.emp_num", "=", "T5.prof_num"], "query_toks_no_value": ["select", "t1", ".", "emp_fname", "from", "employee", "as", "t1", "join", "professor", "as", "t2", "on", "t1", ".", "emp_num", "=", "t2", ".", "emp_num", "join", "department", "as", "t3", "on", "t2", ".", "dept_code", "=", "t3", ".", "dept_code", "where", "t3", ".", "dept_name", "=", "value", "except", "select", "t4", ".", "emp_fname", "from", "employee", "as", "t4", "join", "class", "as", "t5", "on", "t4", ".", "emp_num", "=", "t5", ".", "prof_num"], "question": "What are the first names of all history professors who do not teach?", "question_toks": ["What", "are", "the", "first", "names", "of", "all", "history", "professors", "who", "do", "not", "teach", "?"], "guid": 8514}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | Report the name of all campuses in Los Angeles county.", "sql": "SELECT campus FROM campuses WHERE county  =  \"Los Angeles\"", "example": {"db_id": "csu_1", "query": "SELECT campus FROM campuses WHERE county  =  \"Los Angeles\"", "query_toks": ["SELECT", "campus", "FROM", "campuses", "WHERE", "county", "=", "``", "Los", "Angeles", "''"], "query_toks_no_value": ["select", "campus", "from", "campuses", "where", "county", "=", "value"], "question": "Report the name of all campuses in Los Angeles county.", "question_toks": ["Report", "the", "name", "of", "all", "campuses", "in", "Los", "Angeles", "county", "."], "guid": 8515}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Find the names of all instructors in computer science department", "sql": "SELECT name FROM instructor WHERE dept_name  =  'Comp. Sci.'", "example": {"db_id": "college_2", "query": "SELECT name FROM instructor WHERE dept_name  =  'Comp. Sci.'", "query_toks": ["SELECT", "name", "FROM", "instructor", "WHERE", "dept_name", "=", "'Comp", ".", "Sci", ".", "'"], "query_toks_no_value": ["select", "name", "from", "instructor", "where", "dept_name", "=", "value"], "question": "Find the names of all instructors in computer science department", "question_toks": ["Find", "the", "names", "of", "all", "instructors", "in", "computer", "science", "department"], "guid": 8516}}