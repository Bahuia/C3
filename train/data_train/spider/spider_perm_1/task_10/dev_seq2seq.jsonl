{"text": "Ref_Address_Types: address_type_code, address_type_description; Ref_Detention_Type: detention_type_code, detention_type_description; Ref_Incident_Type: incident_type_code, incident_type_description; Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Students: student_id, address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, date_first_rental, date_left_university, other_student_details; Teachers: teacher_id, address_id, first_name, middle_name, last_name, gender, cell_mobile_number, email_address, other_details; Assessment_Notes: notes_id, student_id, teacher_id, date_of_notes, text_of_notes, other_details; Behavior_Incident: incident_id, incident_type_code, student_id, date_incident_start, date_incident_end, incident_summary, recommendations, other_details; Detention: detention_id, detention_type_code, teacher_id, datetime_detention_start, datetime_detention_end, detention_summary, other_details; Student_Addresses: student_id, address_id, date_address_from, date_address_to, monthly_rental, other_details | Find the start and end dates of behavior incidents of students with last name \"Fahey\".", "sql": "SELECT T1.date_incident_start ,  date_incident_end FROM Behavior_Incident AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.last_name  =  \"Fahey\"", "example": {"db_id": "behavior_monitoring", "query": "SELECT T1.date_incident_start ,  date_incident_end FROM Behavior_Incident AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.last_name  =  \"Fahey\"", "query_toks": ["SELECT", "T1.date_incident_start", ",", "date_incident_end", "FROM", "Behavior_Incident", "AS", "T1", "JOIN", "Students", "AS", "T2", "ON", "T1.student_id", "=", "T2.student_id", "WHERE", "T2.last_name", "=", "``", "Fahey", "''"], "query_toks_no_value": ["select", "t1", ".", "date_incident_start", ",", "date_incident_end", "from", "behavior_incident", "as", "t1", "join", "students", "as", "t2", "on", "t1", ".", "student_id", "=", "t2", ".", "student_id", "where", "t2", ".", "last_name", "=", "value"], "question": "Find the start and end dates of behavior incidents of students with last name \"Fahey\".", "question_toks": ["Find", "the", "start", "and", "end", "dates", "of", "behavior", "incidents", "of", "students", "with", "last", "name", "``", "Fahey", "''", "."], "guid": 9312}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | What are the names and scores of wines that are made of white color grapes?", "sql": "SELECT T2.Name ,   T2.Score FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  \"White\"", "example": {"db_id": "wine_1", "query": "SELECT T2.Name ,   T2.Score FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  \"White\"", "query_toks": ["SELECT", "T2.Name", ",", "T2.Score", "FROM", "GRAPES", "AS", "T1", "JOIN", "WINE", "AS", "T2", "ON", "T1.Grape", "=", "T2.Grape", "WHERE", "T1.Color", "=", "``", "White", "''"], "query_toks_no_value": ["select", "t2", ".", "name", ",", "t2", ".", "score", "from", "grapes", "as", "t1", "join", "wine", "as", "t2", "on", "t1", ".", "grape", "=", "t2", ".", "grape", "where", "t1", ".", "color", "=", "value"], "question": "What are the names and scores of wines that are made of white color grapes?", "question_toks": ["What", "are", "the", "names", "and", "scores", "of", "wines", "that", "are", "made", "of", "white", "color", "grapes", "?"], "guid": 9313}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | What are the distinct names of wines that have appellations in the North Coast area?", "sql": "SELECT DISTINCT T2.Name FROM APPELLATIONs AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.Area  =  \"North Coast\"", "example": {"db_id": "wine_1", "query": "SELECT DISTINCT T2.Name FROM APPELLATIONs AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.Area  =  \"North Coast\"", "query_toks": ["SELECT", "DISTINCT", "T2.Name", "FROM", "APPELLATIONs", "AS", "T1", "JOIN", "WINE", "AS", "T2", "ON", "T1.Appelation", "=", "T2.Appelation", "WHERE", "T1.Area", "=", "``", "North", "Coast", "''"], "query_toks_no_value": ["select", "distinct", "t2", ".", "name", "from", "appellations", "as", "t1", "join", "wine", "as", "t2", "on", "t1", ".", "appelation", "=", "t2", ".", "appelation", "where", "t1", ".", "area", "=", "value"], "question": "What are the distinct names of wines that have appellations in the North Coast area?", "question_toks": ["What", "are", "the", "distinct", "names", "of", "wines", "that", "have", "appellations", "in", "the", "North", "Coast", "area", "?"], "guid": 9314}}
{"text": "county_public_safety: County_ID, Name, Population, Police_officers, Residents_per_officer, Case_burden, Crime_rate, Police_force, Location; city: City_ID, County_ID, Name, White, Black, Amerindian, Asian, Multiracial, Hispanic | Show white percentages of cities and the crime rates of counties they are in.", "sql": "SELECT T1.White ,  T2.Crime_rate FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID  =  T2.County_ID", "example": {"db_id": "county_public_safety", "query": "SELECT T1.White ,  T2.Crime_rate FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID  =  T2.County_ID", "query_toks": ["SELECT", "T1.White", ",", "T2.Crime_rate", "FROM", "city", "AS", "T1", "JOIN", "county_public_safety", "AS", "T2", "ON", "T1.County_ID", "=", "T2.County_ID"], "query_toks_no_value": ["select", "t1", ".", "white", ",", "t2", ".", "crime_rate", "from", "city", "as", "t1", "join", "county_public_safety", "as", "t2", "on", "t1", ".", "county_id", "=", "t2", ".", "county_id"], "question": "Show white percentages of cities and the crime rates of counties they are in.", "question_toks": ["Show", "white", "percentages", "of", "cities", "and", "the", "crime", "rates", "of", "counties", "they", "are", "in", "."], "guid": 9315}}
{"text": "people: People_ID, Name, Country, Is_Male, Age; church: Church_ID, Name, Organized_by, Open_Date, Continuation_of; wedding: Church_ID, Male_ID, Female_ID, Year | How many churches have a wedding in year 2016?", "sql": "SELECT COUNT (DISTINCT church_id) FROM wedding WHERE YEAR  =  2016", "example": {"db_id": "wedding", "query": "SELECT COUNT (DISTINCT church_id) FROM wedding WHERE YEAR  =  2016", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "church_id", ")", "FROM", "wedding", "WHERE", "YEAR", "=", "2016"], "query_toks_no_value": ["select", "count", "(", "distinct", "church_id", ")", "from", "wedding", "where", "year", "=", "value"], "question": "How many churches have a wedding in year 2016?", "question_toks": ["How", "many", "churches", "have", "a", "wedding", "in", "year", "2016", "?"], "guid": 9316}}
{"text": "repair: repair_ID, name, Launch_Date, Notes; machine: Machine_ID, Making_Year, Class, Team, Machine_series, value_points, quality_rank; technician: technician_id, Name, Team, Starting_Year, Age; repair_assignment: technician_id, repair_ID, Machine_ID | What are the teams with the most technicians?", "sql": "SELECT Team FROM technician GROUP BY Team ORDER BY COUNT(*) DESC LIMIT 1", "example": {"db_id": "machine_repair", "query": "SELECT Team FROM technician GROUP BY Team ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "Team", "FROM", "technician", "GROUP", "BY", "Team", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "team", "from", "technician", "group", "by", "team", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What are the teams with the most technicians?", "question_toks": ["What", "are", "the", "teams", "with", "the", "most", "technicians", "?"], "guid": 9317}}
{"text": "Third_Party_Companies: company_id, company_type, company_name, company_address, other_company_details; Maintenance_Contracts: maintenance_contract_id, maintenance_contract_company_id, contract_start_date, contract_end_date, other_contract_details; Parts: part_id, part_name, chargeable_yn, chargeable_amount, other_part_details; Skills: skill_id, skill_code, skill_description; Staff: staff_id, staff_name, gender, other_staff_details; Assets: asset_id, maintenance_contract_id, supplier_company_id, asset_details, asset_make, asset_model, asset_acquired_date, asset_disposed_date, other_asset_details; Asset_Parts: asset_id, part_id; Maintenance_Engineers: engineer_id, company_id, first_name, last_name, other_details; Engineer_Skills: engineer_id, skill_id; Fault_Log: fault_log_entry_id, asset_id, recorded_by_staff_id, fault_log_entry_datetime, fault_description, other_fault_details | For all the faults of different parts, what are all the decriptions of the skills required to fix them? List the name of the faults and the skill description.", "sql": "SELECT T1.fault_short_name ,  T3.skill_description FROM Part_Faults AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.part_fault_id  =  T2.part_fault_id JOIN Skills AS T3 ON T2.skill_id  =  T3.skill_id", "example": {"db_id": "assets_maintenance", "query": "SELECT T1.fault_short_name ,  T3.skill_description FROM Part_Faults AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.part_fault_id  =  T2.part_fault_id JOIN Skills AS T3 ON T2.skill_id  =  T3.skill_id", "query_toks": ["SELECT", "T1.fault_short_name", ",", "T3.skill_description", "FROM", "Part_Faults", "AS", "T1", "JOIN", "Skills_Required_To_Fix", "AS", "T2", "ON", "T1.part_fault_id", "=", "T2.part_fault_id", "JOIN", "Skills", "AS", "T3", "ON", "T2.skill_id", "=", "T3.skill_id"], "query_toks_no_value": ["select", "t1", ".", "fault_short_name", ",", "t3", ".", "skill_description", "from", "part_faults", "as", "t1", "join", "skills_required_to_fix", "as", "t2", "on", "t1", ".", "part_fault_id", "=", "t2", ".", "part_fault_id", "join", "skills", "as", "t3", "on", "t2", ".", "skill_id", "=", "t3", ".", "skill_id"], "question": "For all the faults of different parts, what are all the decriptions of the skills required to fix them? List the name of the faults and the skill description.", "question_toks": ["For", "all", "the", "faults", "of", "different", "parts", ",", "what", "are", "all", "the", "decriptions", "of", "the", "skills", "required", "to", "fix", "them", "?", "List", "the", "name", "of", "the", "faults", "and", "the", "skill", "description", "."], "guid": 9318}}
{"text": "battle: id, name, date, bulgarian_commander, latin_commander, result; ship: lost_in_battle, id, name, tonnage, ship_type, location, disposition_of_ship; death: caused_by_ship_id, id, note, killed, injured | What is maximum and minimum death toll caused each time?", "sql": "SELECT max(killed) ,  min(killed) FROM death", "example": {"db_id": "battle_death", "query": "SELECT max(killed) ,  min(killed) FROM death", "query_toks": ["SELECT", "max", "(", "killed", ")", ",", "min", "(", "killed", ")", "FROM", "death"], "query_toks_no_value": ["select", "max", "(", "killed", ")", ",", "min", "(", "killed", ")", "from", "death"], "question": "What is maximum and minimum death toll caused each time?", "question_toks": ["What", "is", "maximum", "and", "minimum", "death", "toll", "caused", "each", "time", "?"], "guid": 9319}}
{"text": "Third_Party_Companies: company_id, company_type, company_name, company_address, other_company_details; Maintenance_Contracts: maintenance_contract_id, maintenance_contract_company_id, contract_start_date, contract_end_date, other_contract_details; Parts: part_id, part_name, chargeable_yn, chargeable_amount, other_part_details; Skills: skill_id, skill_code, skill_description; Staff: staff_id, staff_name, gender, other_staff_details; Assets: asset_id, maintenance_contract_id, supplier_company_id, asset_details, asset_make, asset_model, asset_acquired_date, asset_disposed_date, other_asset_details; Asset_Parts: asset_id, part_id; Maintenance_Engineers: engineer_id, company_id, first_name, last_name, other_details; Engineer_Skills: engineer_id, skill_id; Fault_Log: fault_log_entry_id, asset_id, recorded_by_staff_id, fault_log_entry_datetime, fault_description, other_fault_details | Which third party companies have at least 2 maintenance engineers or have at least 2 maintenance contracts? List the company id and name.", "sql": "SELECT T1.company_id ,  T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Engineers AS T2 ON T1.company_id  =  T2.company_id GROUP BY T1.company_id HAVING count(*)  >=  2 UNION SELECT T3.company_id ,  T3.company_name FROM Third_Party_Companies AS T3 JOIN Maintenance_Contracts AS T4 ON T3.company_id  =  T4.maintenance_contract_company_id GROUP BY T3.company_id HAVING count(*)  >=  2", "example": {"db_id": "assets_maintenance", "query": "SELECT T1.company_id ,  T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Engineers AS T2 ON T1.company_id  =  T2.company_id GROUP BY T1.company_id HAVING count(*)  >=  2 UNION SELECT T3.company_id ,  T3.company_name FROM Third_Party_Companies AS T3 JOIN Maintenance_Contracts AS T4 ON T3.company_id  =  T4.maintenance_contract_company_id GROUP BY T3.company_id HAVING count(*)  >=  2", "query_toks": ["SELECT", "T1.company_id", ",", "T1.company_name", "FROM", "Third_Party_Companies", "AS", "T1", "JOIN", "Maintenance_Engineers", "AS", "T2", "ON", "T1.company_id", "=", "T2.company_id", "GROUP", "BY", "T1.company_id", "HAVING", "count", "(", "*", ")", ">", "=", "2", "UNION", "SELECT", "T3.company_id", ",", "T3.company_name", "FROM", "Third_Party_Companies", "AS", "T3", "JOIN", "Maintenance_Contracts", "AS", "T4", "ON", "T3.company_id", "=", "T4.maintenance_contract_company_id", "GROUP", "BY", "T3.company_id", "HAVING", "count", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "t1", ".", "company_id", ",", "t1", ".", "company_name", "from", "third_party_companies", "as", "t1", "join", "maintenance_engineers", "as", "t2", "on", "t1", ".", "company_id", "=", "t2", ".", "company_id", "group", "by", "t1", ".", "company_id", "having", "count", "(", "*", ")", ">", "=", "value", "union", "select", "t3", ".", "company_id", ",", "t3", ".", "company_name", "from", "third_party_companies", "as", "t3", "join", "maintenance_contracts", "as", "t4", "on", "t3", ".", "company_id", "=", "t4", ".", "maintenance_contract_company_id", "group", "by", "t3", ".", "company_id", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "Which third party companies have at least 2 maintenance engineers or have at least 2 maintenance contracts? List the company id and name.", "question_toks": ["Which", "third", "party", "companies", "have", "at", "least", "2", "maintenance", "engineers", "or", "have", "at", "least", "2", "maintenance", "contracts", "?", "List", "the", "company", "id", "and", "name", "."], "guid": 9320}}
{"text": "county_public_safety: County_ID, Name, Population, Police_officers, Residents_per_officer, Case_burden, Crime_rate, Police_force, Location; city: City_ID, County_ID, Name, White, Black, Amerindian, Asian, Multiracial, Hispanic | What are the names of the counties of public safety, ordered by population descending?", "sql": "SELECT Name FROM county_public_safety ORDER BY Population DESC", "example": {"db_id": "county_public_safety", "query": "SELECT Name FROM county_public_safety ORDER BY Population DESC", "query_toks": ["SELECT", "Name", "FROM", "county_public_safety", "ORDER", "BY", "Population", "DESC"], "query_toks_no_value": ["select", "name", "from", "county_public_safety", "order", "by", "population", "desc"], "question": "What are the names of the counties of public safety, ordered by population descending?", "question_toks": ["What", "are", "the", "names", "of", "the", "counties", "of", "public", "safety", ",", "ordered", "by", "population", "descending", "?"], "guid": 9321}}
{"text": "Ref_Address_Types: address_type_code, address_type_description; Ref_Detention_Type: detention_type_code, detention_type_description; Ref_Incident_Type: incident_type_code, incident_type_description; Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Students: student_id, address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, date_first_rental, date_left_university, other_student_details; Teachers: teacher_id, address_id, first_name, middle_name, last_name, gender, cell_mobile_number, email_address, other_details; Assessment_Notes: notes_id, student_id, teacher_id, date_of_notes, text_of_notes, other_details; Behavior_Incident: incident_id, incident_type_code, student_id, date_incident_start, date_incident_end, incident_summary, recommendations, other_details; Detention: detention_id, detention_type_code, teacher_id, datetime_detention_start, datetime_detention_end, detention_summary, other_details; Student_Addresses: student_id, address_id, date_address_from, date_address_to, monthly_rental, other_details | What are the email addresses of teachers whose address has zip code \"918\"?", "sql": "SELECT T2.email_address FROM Addresses AS T1 JOIN Teachers AS T2 ON T1.address_id  =  T2.address_id WHERE T1.zip_postcode  =  \"918\"", "example": {"db_id": "behavior_monitoring", "query": "SELECT T2.email_address FROM Addresses AS T1 JOIN Teachers AS T2 ON T1.address_id  =  T2.address_id WHERE T1.zip_postcode  =  \"918\"", "query_toks": ["SELECT", "T2.email_address", "FROM", "Addresses", "AS", "T1", "JOIN", "Teachers", "AS", "T2", "ON", "T1.address_id", "=", "T2.address_id", "WHERE", "T1.zip_postcode", "=", "``", "918", "''"], "query_toks_no_value": ["select", "t2", ".", "email_address", "from", "addresses", "as", "t1", "join", "teachers", "as", "t2", "on", "t1", ".", "address_id", "=", "t2", ".", "address_id", "where", "t1", ".", "zip_postcode", "=", "value"], "question": "What are the email addresses of teachers whose address has zip code \"918\"?", "question_toks": ["What", "are", "the", "email", "addresses", "of", "teachers", "whose", "address", "has", "zip", "code", "``", "918", "''", "?"], "guid": 9322}}
{"text": "county_public_safety: County_ID, Name, Population, Police_officers, Residents_per_officer, Case_burden, Crime_rate, Police_force, Location; city: City_ID, County_ID, Name, White, Black, Amerindian, Asian, Multiracial, Hispanic | Which police forces operate in both counties that are located in the East and in the West?", "sql": "SELECT Police_force FROM county_public_safety WHERE LOCATION  =  \"East\" INTERSECT SELECT Police_force FROM county_public_safety WHERE LOCATION  =  \"West\"", "example": {"db_id": "county_public_safety", "query": "SELECT Police_force FROM county_public_safety WHERE LOCATION  =  \"East\" INTERSECT SELECT Police_force FROM county_public_safety WHERE LOCATION  =  \"West\"", "query_toks": ["SELECT", "Police_force", "FROM", "county_public_safety", "WHERE", "LOCATION", "=", "``", "East", "''", "INTERSECT", "SELECT", "Police_force", "FROM", "county_public_safety", "WHERE", "LOCATION", "=", "``", "West", "''"], "query_toks_no_value": ["select", "police_force", "from", "county_public_safety", "where", "location", "=", "value", "intersect", "select", "police_force", "from", "county_public_safety", "where", "location", "=", "value"], "question": "Which police forces operate in both counties that are located in the East and in the West?", "question_toks": ["Which", "police", "forces", "operate", "in", "both", "counties", "that", "are", "located", "in", "the", "East", "and", "in", "the", "West", "?"], "guid": 9323}}
{"text": "perpetrator: Perpetrator_ID, People_ID, Date, Year, Location, Country, Killed, Injured; people: People_ID, Name, Height, Weight, Home_Town | What are the names of perpetrators in country \"China\" or \"Japan\"?", "sql": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Country  =  \"China\" OR T2.Country  =  \"Japan\"", "example": {"db_id": "perpetrator", "query": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Country  =  \"China\" OR T2.Country  =  \"Japan\"", "query_toks": ["SELECT", "T1.Name", "FROM", "people", "AS", "T1", "JOIN", "perpetrator", "AS", "T2", "ON", "T1.People_ID", "=", "T2.People_ID", "WHERE", "T2.Country", "=", "``", "China", "''", "OR", "T2.Country", "=", "``", "Japan", "''"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "people", "as", "t1", "join", "perpetrator", "as", "t2", "on", "t1", ".", "people_id", "=", "t2", ".", "people_id", "where", "t2", ".", "country", "=", "value", "or", "t2", ".", "country", "=", "value"], "question": "What are the names of perpetrators in country \"China\" or \"Japan\"?", "question_toks": ["What", "are", "the", "names", "of", "perpetrators", "in", "country", "``", "China", "''", "or", "``", "Japan", "''", "?"], "guid": 9324}}
{"text": "city: City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking; farm: Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats; farm_competition: Competition_ID, Year, Theme, Host_city_ID, Hosts; competition_record: Competition_ID, Farm_ID, Rank | Show the status of the city that has hosted the greatest number of competitions.", "sql": "SELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT 1", "example": {"db_id": "farm", "query": "SELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.Status", "FROM", "city", "AS", "T1", "JOIN", "farm_competition", "AS", "T2", "ON", "T1.City_ID", "=", "T2.Host_city_ID", "GROUP", "BY", "T2.Host_city_ID", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "status", "from", "city", "as", "t1", "join", "farm_competition", "as", "t2", "on", "t1", ".", "city_id", "=", "t2", ".", "host_city_id", "group", "by", "t2", ".", "host_city_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Show the status of the city that has hosted the greatest number of competitions.", "question_toks": ["Show", "the", "status", "of", "the", "city", "that", "has", "hosted", "the", "greatest", "number", "of", "competitions", "."], "guid": 9325}}
{"text": "city: City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking; farm: Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats; farm_competition: Competition_ID, Year, Theme, Host_city_ID, Hosts; competition_record: Competition_ID, Farm_ID, Rank | What are the official names of cities that have not hosted a farm competition?", "sql": "SELECT Official_Name FROM city WHERE City_ID NOT IN (SELECT Host_city_ID FROM farm_competition)", "example": {"db_id": "farm", "query": "SELECT Official_Name FROM city WHERE City_ID NOT IN (SELECT Host_city_ID FROM farm_competition)", "query_toks": ["SELECT", "Official_Name", "FROM", "city", "WHERE", "City_ID", "NOT", "IN", "(", "SELECT", "Host_city_ID", "FROM", "farm_competition", ")"], "query_toks_no_value": ["select", "official_name", "from", "city", "where", "city_id", "not", "in", "(", "select", "host_city_id", "from", "farm_competition", ")"], "question": "What are the official names of cities that have not hosted a farm competition?", "question_toks": ["What", "are", "the", "official", "names", "of", "cities", "that", "have", "not", "hosted", "a", "farm", "competition", "?"], "guid": 9326}}
{"text": "people: People_ID, Name, Country, Is_Male, Age; church: Church_ID, Name, Organized_by, Open_Date, Continuation_of; wedding: Church_ID, Male_ID, Female_ID, Year | Show all church names that have hosted least two weddings.", "sql": "SELECT T1.name FROM church AS T1 JOIN wedding AS T2 ON T1.church_id  =  T2.church_id GROUP BY T1.church_id HAVING count(*)  >=  2", "example": {"db_id": "wedding", "query": "SELECT T1.name FROM church AS T1 JOIN wedding AS T2 ON T1.church_id  =  T2.church_id GROUP BY T1.church_id HAVING count(*)  >=  2", "query_toks": ["SELECT", "T1.name", "FROM", "church", "AS", "T1", "JOIN", "wedding", "AS", "T2", "ON", "T1.church_id", "=", "T2.church_id", "GROUP", "BY", "T1.church_id", "HAVING", "count", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "church", "as", "t1", "join", "wedding", "as", "t2", "on", "t1", ".", "church_id", "=", "t2", ".", "church_id", "group", "by", "t1", ".", "church_id", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "Show all church names that have hosted least two weddings.", "question_toks": ["Show", "all", "church", "names", "that", "have", "hosted", "least", "two", "weddings", "."], "guid": 9327}}
{"text": "city: City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking; farm: Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats; farm_competition: Competition_ID, Year, Theme, Host_city_ID, Hosts; competition_record: Competition_ID, Farm_ID, Rank | Please show the different statuses, ordered by the number of cities that have each.", "sql": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) ASC", "example": {"db_id": "farm", "query": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) ASC", "query_toks": ["SELECT", "Status", "FROM", "city", "GROUP", "BY", "Status", "ORDER", "BY", "COUNT", "(", "*", ")", "ASC"], "query_toks_no_value": ["select", "status", "from", "city", "group", "by", "status", "order", "by", "count", "(", "*", ")", "asc"], "question": "Please show the different statuses, ordered by the number of cities that have each.", "question_toks": ["Please", "show", "the", "different", "statuses", ",", "ordered", "by", "the", "number", "of", "cities", "that", "have", "each", "."], "guid": 9328}}
{"text": "county_public_safety: County_ID, Name, Population, Police_officers, Residents_per_officer, Case_burden, Crime_rate, Police_force, Location; city: City_ID, County_ID, Name, White, Black, Amerindian, Asian, Multiracial, Hispanic | Count the number of countries.", "sql": "SELECT count(*) FROM county_public_safety", "example": {"db_id": "county_public_safety", "query": "SELECT count(*) FROM county_public_safety", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "county_public_safety"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "county_public_safety"], "question": "Count the number of countries.", "question_toks": ["Count", "the", "number", "of", "countries", "."], "guid": 9329}}
{"text": "perpetrator: Perpetrator_ID, People_ID, Date, Year, Location, Country, Killed, Injured; people: People_ID, Name, Height, Weight, Home_Town | What is the name of the perpetrator with the biggest weight.", "sql": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Weight DESC LIMIT 1", "example": {"db_id": "perpetrator", "query": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Weight DESC LIMIT 1", "query_toks": ["SELECT", "T1.Name", "FROM", "people", "AS", "T1", "JOIN", "perpetrator", "AS", "T2", "ON", "T1.People_ID", "=", "T2.People_ID", "ORDER", "BY", "T1.Weight", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "people", "as", "t1", "join", "perpetrator", "as", "t2", "on", "t1", ".", "people_id", "=", "t2", ".", "people_id", "order", "by", "t1", ".", "weight", "desc", "limit", "value"], "question": "What is the name of the perpetrator with the biggest weight.", "question_toks": ["What", "is", "the", "name", "of", "the", "perpetrator", "with", "the", "biggest", "weight", "."], "guid": 9330}}
{"text": "Third_Party_Companies: company_id, company_type, company_name, company_address, other_company_details; Maintenance_Contracts: maintenance_contract_id, maintenance_contract_company_id, contract_start_date, contract_end_date, other_contract_details; Parts: part_id, part_name, chargeable_yn, chargeable_amount, other_part_details; Skills: skill_id, skill_code, skill_description; Staff: staff_id, staff_name, gender, other_staff_details; Assets: asset_id, maintenance_contract_id, supplier_company_id, asset_details, asset_make, asset_model, asset_acquired_date, asset_disposed_date, other_asset_details; Asset_Parts: asset_id, part_id; Maintenance_Engineers: engineer_id, company_id, first_name, last_name, other_details; Engineer_Skills: engineer_id, skill_id; Fault_Log: fault_log_entry_id, asset_id, recorded_by_staff_id, fault_log_entry_datetime, fault_description, other_fault_details | What are all the fault descriptions and the fault status of all the faults recoreded in the logs?", "sql": "SELECT T1.fault_description ,  T2.fault_status FROM Fault_Log AS T1 JOIN Fault_Log_Parts AS T2 ON T1.fault_log_entry_id  =  T2.fault_log_entry_id", "example": {"db_id": "assets_maintenance", "query": "SELECT T1.fault_description ,  T2.fault_status FROM Fault_Log AS T1 JOIN Fault_Log_Parts AS T2 ON T1.fault_log_entry_id  =  T2.fault_log_entry_id", "query_toks": ["SELECT", "T1.fault_description", ",", "T2.fault_status", "FROM", "Fault_Log", "AS", "T1", "JOIN", "Fault_Log_Parts", "AS", "T2", "ON", "T1.fault_log_entry_id", "=", "T2.fault_log_entry_id"], "query_toks_no_value": ["select", "t1", ".", "fault_description", ",", "t2", ".", "fault_status", "from", "fault_log", "as", "t1", "join", "fault_log_parts", "as", "t2", "on", "t1", ".", "fault_log_entry_id", "=", "t2", ".", "fault_log_entry_id"], "question": "What are all the fault descriptions and the fault status of all the faults recoreded in the logs?", "question_toks": ["What", "are", "all", "the", "fault", "descriptions", "and", "the", "fault", "status", "of", "all", "the", "faults", "recoreded", "in", "the", "logs", "?"], "guid": 9331}}
{"text": "architect: id, name, nationality, gender; bridge: architect_id, id, name, location, length_meters, length_feet; mill: architect_id, id, location, name, type, built_year, notes | How many architects are female?", "sql": "SELECT count(*) FROM architect WHERE gender  =  'female'", "example": {"db_id": "architecture", "query": "SELECT count(*) FROM architect WHERE gender  =  'female'", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "architect", "WHERE", "gender", "=", "'female", "'"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "architect", "where", "gender", "=", "value"], "question": "How many architects are female?", "question_toks": ["How", "many", "architects", "are", "female", "?"], "guid": 9332}}
{"text": "battle: id, name, date, bulgarian_commander, latin_commander, result; ship: lost_in_battle, id, name, tonnage, ship_type, location, disposition_of_ship; death: caused_by_ship_id, id, note, killed, injured | List the name, date and result of each battle.", "sql": "SELECT name ,  date FROM battle", "example": {"db_id": "battle_death", "query": "SELECT name ,  date FROM battle", "query_toks": ["SELECT", "name", ",", "date", "FROM", "battle"], "query_toks_no_value": ["select", "name", ",", "date", "from", "battle"], "question": "List the name, date and result of each battle.", "question_toks": ["List", "the", "name", ",", "date", "and", "result", "of", "each", "battle", "."], "guid": 9333}}
{"text": "repair: repair_ID, name, Launch_Date, Notes; machine: Machine_ID, Making_Year, Class, Team, Machine_series, value_points, quality_rank; technician: technician_id, Name, Team, Starting_Year, Age; repair_assignment: technician_id, repair_ID, Machine_ID | Show names of technicians and series of machines they are assigned to repair.", "sql": "SELECT T3.Name ,  T2.Machine_series FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id  =  T2.machine_id JOIN technician AS T3 ON T1.technician_ID  =  T3.technician_ID", "example": {"db_id": "machine_repair", "query": "SELECT T3.Name ,  T2.Machine_series FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id  =  T2.machine_id JOIN technician AS T3 ON T1.technician_ID  =  T3.technician_ID", "query_toks": ["SELECT", "T3.Name", ",", "T2.Machine_series", "FROM", "repair_assignment", "AS", "T1", "JOIN", "machine", "AS", "T2", "ON", "T1.machine_id", "=", "T2.machine_id", "JOIN", "technician", "AS", "T3", "ON", "T1.technician_ID", "=", "T3.technician_ID"], "query_toks_no_value": ["select", "t3", ".", "name", ",", "t2", ".", "machine_series", "from", "repair_assignment", "as", "t1", "join", "machine", "as", "t2", "on", "t1", ".", "machine_id", "=", "t2", ".", "machine_id", "join", "technician", "as", "t3", "on", "t1", ".", "technician_id", "=", "t3", ".", "technician_id"], "question": "Show names of technicians and series of machines they are assigned to repair.", "question_toks": ["Show", "names", "of", "technicians", "and", "series", "of", "machines", "they", "are", "assigned", "to", "repair", "."], "guid": 9334}}
{"text": "Ref_Address_Types: address_type_code, address_type_description; Ref_Detention_Type: detention_type_code, detention_type_description; Ref_Incident_Type: incident_type_code, incident_type_description; Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Students: student_id, address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, date_first_rental, date_left_university, other_student_details; Teachers: teacher_id, address_id, first_name, middle_name, last_name, gender, cell_mobile_number, email_address, other_details; Assessment_Notes: notes_id, student_id, teacher_id, date_of_notes, text_of_notes, other_details; Behavior_Incident: incident_id, incident_type_code, student_id, date_incident_start, date_incident_end, incident_summary, recommendations, other_details; Detention: detention_id, detention_type_code, teacher_id, datetime_detention_start, datetime_detention_end, detention_summary, other_details; Student_Addresses: student_id, address_id, date_address_from, date_address_to, monthly_rental, other_details | Return all distinct detention type codes.", "sql": "SELECT DISTINCT detention_type_code FROM Detention", "example": {"db_id": "behavior_monitoring", "query": "SELECT DISTINCT detention_type_code FROM Detention", "query_toks": ["SELECT", "DISTINCT", "detention_type_code", "FROM", "Detention"], "query_toks_no_value": ["select", "distinct", "detention_type_code", "from", "detention"], "question": "Return all distinct detention type codes.", "question_toks": ["Return", "all", "distinct", "detention", "type", "codes", "."], "guid": 9335}}
{"text": "Ref_Address_Types: address_type_code, address_type_description; Ref_Detention_Type: detention_type_code, detention_type_description; Ref_Incident_Type: incident_type_code, incident_type_description; Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Students: student_id, address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, date_first_rental, date_left_university, other_student_details; Teachers: teacher_id, address_id, first_name, middle_name, last_name, gender, cell_mobile_number, email_address, other_details; Assessment_Notes: notes_id, student_id, teacher_id, date_of_notes, text_of_notes, other_details; Behavior_Incident: incident_id, incident_type_code, student_id, date_incident_start, date_incident_end, incident_summary, recommendations, other_details; Detention: detention_id, detention_type_code, teacher_id, datetime_detention_start, datetime_detention_end, detention_summary, other_details; Student_Addresses: student_id, address_id, date_address_from, date_address_to, monthly_rental, other_details | Find the start and end dates of detentions of teachers with last name \"Schultz\".", "sql": "SELECT T1.datetime_detention_start ,  datetime_detention_end FROM Detention AS T1 JOIN Teachers AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T2.last_name  =  \"Schultz\"", "example": {"db_id": "behavior_monitoring", "query": "SELECT T1.datetime_detention_start ,  datetime_detention_end FROM Detention AS T1 JOIN Teachers AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T2.last_name  =  \"Schultz\"", "query_toks": ["SELECT", "T1.datetime_detention_start", ",", "datetime_detention_end", "FROM", "Detention", "AS", "T1", "JOIN", "Teachers", "AS", "T2", "ON", "T1.teacher_id", "=", "T2.teacher_id", "WHERE", "T2.last_name", "=", "``", "Schultz", "''"], "query_toks_no_value": ["select", "t1", ".", "datetime_detention_start", ",", "datetime_detention_end", "from", "detention", "as", "t1", "join", "teachers", "as", "t2", "on", "t1", ".", "teacher_id", "=", "t2", ".", "teacher_id", "where", "t2", ".", "last_name", "=", "value"], "question": "Find the start and end dates of detentions of teachers with last name \"Schultz\".", "question_toks": ["Find", "the", "start", "and", "end", "dates", "of", "detentions", "of", "teachers", "with", "last", "name", "``", "Schultz", "''", "."], "guid": 9336}}
{"text": "city: City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking; farm: Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats; farm_competition: Competition_ID, Year, Theme, Host_city_ID, Hosts; competition_record: Competition_ID, Farm_ID, Rank | What is the most common status across all cities?", "sql": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1", "example": {"db_id": "farm", "query": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "Status", "FROM", "city", "GROUP", "BY", "Status", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "status", "from", "city", "group", "by", "status", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the most common status across all cities?", "question_toks": ["What", "is", "the", "most", "common", "status", "across", "all", "cities", "?"], "guid": 9337}}
{"text": "Third_Party_Companies: company_id, company_type, company_name, company_address, other_company_details; Maintenance_Contracts: maintenance_contract_id, maintenance_contract_company_id, contract_start_date, contract_end_date, other_contract_details; Parts: part_id, part_name, chargeable_yn, chargeable_amount, other_part_details; Skills: skill_id, skill_code, skill_description; Staff: staff_id, staff_name, gender, other_staff_details; Assets: asset_id, maintenance_contract_id, supplier_company_id, asset_details, asset_make, asset_model, asset_acquired_date, asset_disposed_date, other_asset_details; Asset_Parts: asset_id, part_id; Maintenance_Engineers: engineer_id, company_id, first_name, last_name, other_details; Engineer_Skills: engineer_id, skill_id; Fault_Log: fault_log_entry_id, asset_id, recorded_by_staff_id, fault_log_entry_datetime, fault_description, other_fault_details | Which part fault requires the most number of skills to fix? List part id and name.", "sql": "SELECT T1.part_id ,  T1.part_name FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id  =  T2.part_id JOIN Skills_Required_To_Fix AS T3 ON T2.part_fault_id  =  T3.part_fault_id GROUP BY T1.part_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "assets_maintenance", "query": "SELECT T1.part_id ,  T1.part_name FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id  =  T2.part_id JOIN Skills_Required_To_Fix AS T3 ON T2.part_fault_id  =  T3.part_fault_id GROUP BY T1.part_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.part_id", ",", "T1.part_name", "FROM", "Parts", "AS", "T1", "JOIN", "Part_Faults", "AS", "T2", "ON", "T1.part_id", "=", "T2.part_id", "JOIN", "Skills_Required_To_Fix", "AS", "T3", "ON", "T2.part_fault_id", "=", "T3.part_fault_id", "GROUP", "BY", "T1.part_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "part_id", ",", "t1", ".", "part_name", "from", "parts", "as", "t1", "join", "part_faults", "as", "t2", "on", "t1", ".", "part_id", "=", "t2", ".", "part_id", "join", "skills_required_to_fix", "as", "t3", "on", "t2", ".", "part_fault_id", "=", "t3", ".", "part_fault_id", "group", "by", "t1", ".", "part_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which part fault requires the most number of skills to fix? List part id and name.", "question_toks": ["Which", "part", "fault", "requires", "the", "most", "number", "of", "skills", "to", "fix", "?", "List", "part", "id", "and", "name", "."], "guid": 9338}}
{"text": "county_public_safety: County_ID, Name, Population, Police_officers, Residents_per_officer, Case_burden, Crime_rate, Police_force, Location; city: City_ID, County_ID, Name, White, Black, Amerindian, Asian, Multiracial, Hispanic | Show the names of cities in counties that have a crime rate less than 100.", "sql": "SELECT name FROM city WHERE county_id IN (SELECT county_id FROM county_public_safety WHERE Crime_rate  <  100)", "example": {"db_id": "county_public_safety", "query": "SELECT name FROM city WHERE county_id IN (SELECT county_id FROM county_public_safety WHERE Crime_rate  <  100)", "query_toks": ["SELECT", "name", "FROM", "city", "WHERE", "county_id", "IN", "(", "SELECT", "county_id", "FROM", "county_public_safety", "WHERE", "Crime_rate", "<", "100", ")"], "query_toks_no_value": ["select", "name", "from", "city", "where", "county_id", "in", "(", "select", "county_id", "from", "county_public_safety", "where", "crime_rate", "<", "value", ")"], "question": "Show the names of cities in counties that have a crime rate less than 100.", "question_toks": ["Show", "the", "names", "of", "cities", "in", "counties", "that", "have", "a", "crime", "rate", "less", "than", "100", "."], "guid": 9339}}
{"text": "county_public_safety: County_ID, Name, Population, Police_officers, Residents_per_officer, Case_burden, Crime_rate, Police_force, Location; city: City_ID, County_ID, Name, White, Black, Amerindian, Asian, Multiracial, Hispanic | What are the names of the five cities with the greatest proportion of white people?", "sql": "SELECT Name FROM city ORDER BY White DESC LIMIT 5", "example": {"db_id": "county_public_safety", "query": "SELECT Name FROM city ORDER BY White DESC LIMIT 5", "query_toks": ["SELECT", "Name", "FROM", "city", "ORDER", "BY", "White", "DESC", "LIMIT", "5"], "query_toks_no_value": ["select", "name", "from", "city", "order", "by", "white", "desc", "limit", "value"], "question": "What are the names of the five cities with the greatest proportion of white people?", "question_toks": ["What", "are", "the", "names", "of", "the", "five", "cities", "with", "the", "greatest", "proportion", "of", "white", "people", "?"], "guid": 9340}}
{"text": "people: People_ID, District, Name, Party, Age; debate: Debate_ID, Date, Venue, Num_of_Audience; debate_people: Debate_ID, Affirmative, Negative, If_Affirmative_Win | List the venues of debates in ascending order of the number of audience.", "sql": "SELECT Venue FROM debate ORDER BY Num_of_Audience ASC", "example": {"db_id": "debate", "query": "SELECT Venue FROM debate ORDER BY Num_of_Audience ASC", "query_toks": ["SELECT", "Venue", "FROM", "debate", "ORDER", "BY", "Num_of_Audience", "ASC"], "query_toks_no_value": ["select", "venue", "from", "debate", "order", "by", "num_of_audience", "asc"], "question": "List the venues of debates in ascending order of the number of audience.", "question_toks": ["List", "the", "venues", "of", "debates", "in", "ascending", "order", "of", "the", "number", "of", "audience", "."], "guid": 9341}}
{"text": "city: City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking; farm: Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats; farm_competition: Competition_ID, Year, Theme, Host_city_ID, Hosts; competition_record: Competition_ID, Farm_ID, Rank | Find the official names of cities with population bigger than 1500 or smaller than 500.", "sql": "SELECT Official_Name FROM city WHERE Population  >  1500 OR Population  <  500", "example": {"db_id": "farm", "query": "SELECT Official_Name FROM city WHERE Population  >  1500 OR Population  <  500", "query_toks": ["SELECT", "Official_Name", "FROM", "city", "WHERE", "Population", ">", "1500", "OR", "Population", "<", "500"], "query_toks_no_value": ["select", "official_name", "from", "city", "where", "population", ">", "value", "or", "population", "<", "value"], "question": "Find the official names of cities with population bigger than 1500 or smaller than 500.", "question_toks": ["Find", "the", "official", "names", "of", "cities", "with", "population", "bigger", "than", "1500", "or", "smaller", "than", "500", "."], "guid": 9342}}
{"text": "stadium: id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage; game: stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition; injury_accident: game_id, id, Player, Injury, Number_of_matches, Source | How many different kinds of information sources are there for injury accidents?", "sql": "SELECT count(DISTINCT SOURCE) FROM injury_accident", "example": {"db_id": "game_injury", "query": "SELECT count(DISTINCT SOURCE) FROM injury_accident", "query_toks": ["SELECT", "count", "(", "DISTINCT", "SOURCE", ")", "FROM", "injury_accident"], "query_toks_no_value": ["select", "count", "(", "distinct", "source", ")", "from", "injury_accident"], "question": "How many different kinds of information sources are there for injury accidents?", "question_toks": ["How", "many", "different", "kinds", "of", "information", "sources", "are", "there", "for", "injury", "accidents", "?"], "guid": 9343}}
{"text": "Third_Party_Companies: company_id, company_type, company_name, company_address, other_company_details; Maintenance_Contracts: maintenance_contract_id, maintenance_contract_company_id, contract_start_date, contract_end_date, other_contract_details; Parts: part_id, part_name, chargeable_yn, chargeable_amount, other_part_details; Skills: skill_id, skill_code, skill_description; Staff: staff_id, staff_name, gender, other_staff_details; Assets: asset_id, maintenance_contract_id, supplier_company_id, asset_details, asset_make, asset_model, asset_acquired_date, asset_disposed_date, other_asset_details; Asset_Parts: asset_id, part_id; Maintenance_Engineers: engineer_id, company_id, first_name, last_name, other_details; Engineer_Skills: engineer_id, skill_id; Fault_Log: fault_log_entry_id, asset_id, recorded_by_staff_id, fault_log_entry_datetime, fault_description, other_fault_details | Which parts have more than 2 faults? Show the part name and id.", "sql": "SELECT T1.part_name ,  T1.part_id FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id  =  T2.part_id GROUP BY T1.part_id HAVING count(*)  >  2", "example": {"db_id": "assets_maintenance", "query": "SELECT T1.part_name ,  T1.part_id FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id  =  T2.part_id GROUP BY T1.part_id HAVING count(*)  >  2", "query_toks": ["SELECT", "T1.part_name", ",", "T1.part_id", "FROM", "Parts", "AS", "T1", "JOIN", "Part_Faults", "AS", "T2", "ON", "T1.part_id", "=", "T2.part_id", "GROUP", "BY", "T1.part_id", "HAVING", "count", "(", "*", ")", ">", "2"], "query_toks_no_value": ["select", "t1", ".", "part_name", ",", "t1", ".", "part_id", "from", "parts", "as", "t1", "join", "part_faults", "as", "t2", "on", "t1", ".", "part_id", "=", "t2", ".", "part_id", "group", "by", "t1", ".", "part_id", "having", "count", "(", "*", ")", ">", "value"], "question": "Which parts have more than 2 faults? Show the part name and id.", "question_toks": ["Which", "parts", "have", "more", "than", "2", "faults", "?", "Show", "the", "part", "name", "and", "id", "."], "guid": 9344}}
{"text": "repair: repair_ID, name, Launch_Date, Notes; machine: Machine_ID, Making_Year, Class, Team, Machine_series, value_points, quality_rank; technician: technician_id, Name, Team, Starting_Year, Age; repair_assignment: technician_id, repair_ID, Machine_ID | Show names of technicians and the number of machines they are assigned to repair.", "sql": "SELECT T2.Name ,  COUNT(*) FROM repair_assignment AS T1 JOIN technician AS T2 ON T1.technician_ID  =  T2.technician_ID GROUP BY T2.Name", "example": {"db_id": "machine_repair", "query": "SELECT T2.Name ,  COUNT(*) FROM repair_assignment AS T1 JOIN technician AS T2 ON T1.technician_ID  =  T2.technician_ID GROUP BY T2.Name", "query_toks": ["SELECT", "T2.Name", ",", "COUNT", "(", "*", ")", "FROM", "repair_assignment", "AS", "T1", "JOIN", "technician", "AS", "T2", "ON", "T1.technician_ID", "=", "T2.technician_ID", "GROUP", "BY", "T2.Name"], "query_toks_no_value": ["select", "t2", ".", "name", ",", "count", "(", "*", ")", "from", "repair_assignment", "as", "t1", "join", "technician", "as", "t2", "on", "t1", ".", "technician_id", "=", "t2", ".", "technician_id", "group", "by", "t2", ".", "name"], "question": "Show names of technicians and the number of machines they are assigned to repair.", "question_toks": ["Show", "names", "of", "technicians", "and", "the", "number", "of", "machines", "they", "are", "assigned", "to", "repair", "."], "guid": 9345}}
{"text": "city: City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking; farm: Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats; farm_competition: Competition_ID, Year, Theme, Host_city_ID, Hosts; competition_record: Competition_ID, Farm_ID, Rank | How many different statuses do cities have?", "sql": "SELECT count(DISTINCT Status) FROM city", "example": {"db_id": "farm", "query": "SELECT count(DISTINCT Status) FROM city", "query_toks": ["SELECT", "count", "(", "DISTINCT", "Status", ")", "FROM", "city"], "query_toks_no_value": ["select", "count", "(", "distinct", "status", ")", "from", "city"], "question": "How many different statuses do cities have?", "question_toks": ["How", "many", "different", "statuses", "do", "cities", "have", "?"], "guid": 9346}}
{"text": "repair: repair_ID, name, Launch_Date, Notes; machine: Machine_ID, Making_Year, Class, Team, Machine_series, value_points, quality_rank; technician: technician_id, Name, Team, Starting_Year, Age; repair_assignment: technician_id, repair_ID, Machine_ID | List the names of technicians in ascending order of age.", "sql": "SELECT Name FROM technician ORDER BY Age ASC", "example": {"db_id": "machine_repair", "query": "SELECT Name FROM technician ORDER BY Age ASC", "query_toks": ["SELECT", "Name", "FROM", "technician", "ORDER", "BY", "Age", "ASC"], "query_toks_no_value": ["select", "name", "from", "technician", "order", "by", "age", "asc"], "question": "List the names of technicians in ascending order of age.", "question_toks": ["List", "the", "names", "of", "technicians", "in", "ascending", "order", "of", "age", "."], "guid": 9347}}
{"text": "perpetrator: Perpetrator_ID, People_ID, Date, Year, Location, Country, Killed, Injured; people: People_ID, Name, Height, Weight, Home_Town | List the date of perpetrators in descending order of the number of people killed.", "sql": "SELECT Date FROM perpetrator ORDER BY Killed DESC", "example": {"db_id": "perpetrator", "query": "SELECT Date FROM perpetrator ORDER BY Killed DESC", "query_toks": ["SELECT", "Date", "FROM", "perpetrator", "ORDER", "BY", "Killed", "DESC"], "query_toks_no_value": ["select", "date", "from", "perpetrator", "order", "by", "killed", "desc"], "question": "List the date of perpetrators in descending order of the number of people killed.", "question_toks": ["List", "the", "date", "of", "perpetrators", "in", "descending", "order", "of", "the", "number", "of", "people", "killed", "."], "guid": 9348}}
{"text": "Ref_Address_Types: address_type_code, address_type_description; Ref_Detention_Type: detention_type_code, detention_type_description; Ref_Incident_Type: incident_type_code, incident_type_description; Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Students: student_id, address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, date_first_rental, date_left_university, other_student_details; Teachers: teacher_id, address_id, first_name, middle_name, last_name, gender, cell_mobile_number, email_address, other_details; Assessment_Notes: notes_id, student_id, teacher_id, date_of_notes, text_of_notes, other_details; Behavior_Incident: incident_id, incident_type_code, student_id, date_incident_start, date_incident_end, incident_summary, recommendations, other_details; Detention: detention_id, detention_type_code, teacher_id, datetime_detention_start, datetime_detention_end, detention_summary, other_details; Student_Addresses: student_id, address_id, date_address_from, date_address_to, monthly_rental, other_details | What is the gender of the teacher with last name \"Medhurst\"?", "sql": "SELECT gender FROM TEACHERS WHERE last_name  =  \"Medhurst\"", "example": {"db_id": "behavior_monitoring", "query": "SELECT gender FROM TEACHERS WHERE last_name  =  \"Medhurst\"", "query_toks": ["SELECT", "gender", "FROM", "TEACHERS", "WHERE", "last_name", "=", "``", "Medhurst", "''"], "query_toks_no_value": ["select", "gender", "from", "teachers", "where", "last_name", "=", "value"], "question": "What is the gender of the teacher with last name \"Medhurst\"?", "question_toks": ["What", "is", "the", "gender", "of", "the", "teacher", "with", "last", "name", "``", "Medhurst", "''", "?"], "guid": 9349}}
{"text": "city: City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking; farm: Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats; farm_competition: Competition_ID, Year, Theme, Host_city_ID, Hosts; competition_record: Competition_ID, Farm_ID, Rank | What is the total horses record for each farm, sorted ascending?", "sql": "SELECT Total_Horses FROM farm ORDER BY Total_Horses ASC", "example": {"db_id": "farm", "query": "SELECT Total_Horses FROM farm ORDER BY Total_Horses ASC", "query_toks": ["SELECT", "Total_Horses", "FROM", "farm", "ORDER", "BY", "Total_Horses", "ASC"], "query_toks_no_value": ["select", "total_horses", "from", "farm", "order", "by", "total_horses", "asc"], "question": "What is the total horses record for each farm, sorted ascending?", "question_toks": ["What", "is", "the", "total", "horses", "record", "for", "each", "farm", ",", "sorted", "ascending", "?"], "guid": 9350}}
{"text": "city: City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking; farm: Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats; farm_competition: Competition_ID, Year, Theme, Host_city_ID, Hosts; competition_record: Competition_ID, Farm_ID, Rank | What are the themes of farm competitions sorted by year in ascending order?", "sql": "SELECT Theme FROM farm_competition ORDER BY YEAR ASC", "example": {"db_id": "farm", "query": "SELECT Theme FROM farm_competition ORDER BY YEAR ASC", "query_toks": ["SELECT", "Theme", "FROM", "farm_competition", "ORDER", "BY", "YEAR", "ASC"], "query_toks_no_value": ["select", "theme", "from", "farm_competition", "order", "by", "year", "asc"], "question": "What are the themes of farm competitions sorted by year in ascending order?", "question_toks": ["What", "are", "the", "themes", "of", "farm", "competitions", "sorted", "by", "year", "in", "ascending", "order", "?"], "guid": 9351}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | How many wines are produced at Robert Biale winery?", "sql": "SELECT count(*) FROM WINE WHERE Winery  =  \"Robert Biale\"", "example": {"db_id": "wine_1", "query": "SELECT count(*) FROM WINE WHERE Winery  =  \"Robert Biale\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "WINE", "WHERE", "Winery", "=", "``", "Robert", "Biale", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "wine", "where", "winery", "=", "value"], "question": "How many wines are produced at Robert Biale winery?", "question_toks": ["How", "many", "wines", "are", "produced", "at", "Robert", "Biale", "winery", "?"], "guid": 9352}}
{"text": "Third_Party_Companies: company_id, company_type, company_name, company_address, other_company_details; Maintenance_Contracts: maintenance_contract_id, maintenance_contract_company_id, contract_start_date, contract_end_date, other_contract_details; Parts: part_id, part_name, chargeable_yn, chargeable_amount, other_part_details; Skills: skill_id, skill_code, skill_description; Staff: staff_id, staff_name, gender, other_staff_details; Assets: asset_id, maintenance_contract_id, supplier_company_id, asset_details, asset_make, asset_model, asset_acquired_date, asset_disposed_date, other_asset_details; Asset_Parts: asset_id, part_id; Maintenance_Engineers: engineer_id, company_id, first_name, last_name, other_details; Engineer_Skills: engineer_id, skill_id; Fault_Log: fault_log_entry_id, asset_id, recorded_by_staff_id, fault_log_entry_datetime, fault_description, other_fault_details | Which gender makes up the majority of the staff?", "sql": "SELECT gender FROM staff GROUP BY gender ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "assets_maintenance", "query": "SELECT gender FROM staff GROUP BY gender ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "gender", "FROM", "staff", "GROUP", "BY", "gender", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "gender", "from", "staff", "group", "by", "gender", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which gender makes up the majority of the staff?", "question_toks": ["Which", "gender", "makes", "up", "the", "majority", "of", "the", "staff", "?"], "guid": 9353}}
{"text": "stadium: id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage; game: stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition; injury_accident: game_id, id, Player, Injury, Number_of_matches, Source | What are the player name, number of matches, and information source for players who do not suffer from injury of 'Knee problem'?", "sql": "SELECT player ,  number_of_matches ,  SOURCE FROM injury_accident WHERE injury != 'Knee problem'", "example": {"db_id": "game_injury", "query": "SELECT player ,  number_of_matches ,  SOURCE FROM injury_accident WHERE injury != 'Knee problem'", "query_toks": ["SELECT", "player", ",", "number_of_matches", ",", "SOURCE", "FROM", "injury_accident", "WHERE", "injury", "!", "=", "'Knee", "problem", "'"], "query_toks_no_value": ["select", "player", ",", "number_of_matches", ",", "source", "from", "injury_accident", "where", "injury", "!", "=", "value"], "question": "What are the player name, number of matches, and information source for players who do not suffer from injury of 'Knee problem'?", "question_toks": ["What", "are", "the", "player", "name", ",", "number", "of", "matches", ",", "and", "information", "source", "for", "players", "who", "do", "not", "suffer", "from", "injury", "of", "'Knee", "problem", "'", "?"], "guid": 9354}}
{"text": "repair: repair_ID, name, Launch_Date, Notes; machine: Machine_ID, Making_Year, Class, Team, Machine_series, value_points, quality_rank; technician: technician_id, Name, Team, Starting_Year, Age; repair_assignment: technician_id, repair_ID, Machine_ID | What are the names of the technicians by ascending order of quality rank for the machine they are assigned?", "sql": "SELECT T3.Name FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id  =  T2.machine_id JOIN technician AS T3 ON T1.technician_ID  =  T3.technician_ID ORDER BY T2.quality_rank", "example": {"db_id": "machine_repair", "query": "SELECT T3.Name FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id  =  T2.machine_id JOIN technician AS T3 ON T1.technician_ID  =  T3.technician_ID ORDER BY T2.quality_rank", "query_toks": ["SELECT", "T3.Name", "FROM", "repair_assignment", "AS", "T1", "JOIN", "machine", "AS", "T2", "ON", "T1.machine_id", "=", "T2.machine_id", "JOIN", "technician", "AS", "T3", "ON", "T1.technician_ID", "=", "T3.technician_ID", "ORDER", "BY", "T2.quality_rank"], "query_toks_no_value": ["select", "t3", ".", "name", "from", "repair_assignment", "as", "t1", "join", "machine", "as", "t2", "on", "t1", ".", "machine_id", "=", "t2", ".", "machine_id", "join", "technician", "as", "t3", "on", "t1", ".", "technician_id", "=", "t3", ".", "technician_id", "order", "by", "t2", ".", "quality_rank"], "question": "What are the names of the technicians by ascending order of quality rank for the machine they are assigned?", "question_toks": ["What", "are", "the", "names", "of", "the", "technicians", "by", "ascending", "order", "of", "quality", "rank", "for", "the", "machine", "they", "are", "assigned", "?"], "guid": 9355}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | What are the appelations for wines produced after 2008 but not in the Central Coast area?", "sql": "SELECT Appelation FROM WINE WHERE YEAR  >  2008 EXCEPT SELECT Appelation FROM APPELLATIONS WHERE Area  =  \"Central Coast\"", "example": {"db_id": "wine_1", "query": "SELECT Appelation FROM WINE WHERE YEAR  >  2008 EXCEPT SELECT Appelation FROM APPELLATIONS WHERE Area  =  \"Central Coast\"", "query_toks": ["SELECT", "Appelation", "FROM", "WINE", "WHERE", "YEAR", ">", "2008", "EXCEPT", "SELECT", "Appelation", "FROM", "APPELLATIONS", "WHERE", "Area", "=", "``", "Central", "Coast", "''"], "query_toks_no_value": ["select", "appelation", "from", "wine", "where", "year", ">", "value", "except", "select", "appelation", "from", "appellations", "where", "area", "=", "value"], "question": "What are the appelations for wines produced after 2008 but not in the Central Coast area?", "question_toks": ["What", "are", "the", "appelations", "for", "wines", "produced", "after", "2008", "but", "not", "in", "the", "Central", "Coast", "area", "?"], "guid": 9356}}
{"text": "Ref_Address_Types: address_type_code, address_type_description; Ref_Detention_Type: detention_type_code, detention_type_description; Ref_Incident_Type: incident_type_code, incident_type_description; Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Students: student_id, address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, date_first_rental, date_left_university, other_student_details; Teachers: teacher_id, address_id, first_name, middle_name, last_name, gender, cell_mobile_number, email_address, other_details; Assessment_Notes: notes_id, student_id, teacher_id, date_of_notes, text_of_notes, other_details; Behavior_Incident: incident_id, incident_type_code, student_id, date_incident_start, date_incident_end, incident_summary, recommendations, other_details; Detention: detention_id, detention_type_code, teacher_id, datetime_detention_start, datetime_detention_end, detention_summary, other_details; Student_Addresses: student_id, address_id, date_address_from, date_address_to, monthly_rental, other_details | What is the cell phone number of the student whose address has the lowest monthly rental?", "sql": "SELECT T2.cell_mobile_number FROM Student_Addresses AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id ORDER BY T1.monthly_rental ASC LIMIT 1", "example": {"db_id": "behavior_monitoring", "query": "SELECT T2.cell_mobile_number FROM Student_Addresses AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id ORDER BY T1.monthly_rental ASC LIMIT 1", "query_toks": ["SELECT", "T2.cell_mobile_number", "FROM", "Student_Addresses", "AS", "T1", "JOIN", "Students", "AS", "T2", "ON", "T1.student_id", "=", "T2.student_id", "ORDER", "BY", "T1.monthly_rental", "ASC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "cell_mobile_number", "from", "student_addresses", "as", "t1", "join", "students", "as", "t2", "on", "t1", ".", "student_id", "=", "t2", ".", "student_id", "order", "by", "t1", ".", "monthly_rental", "asc", "limit", "value"], "question": "What is the cell phone number of the student whose address has the lowest monthly rental?", "question_toks": ["What", "is", "the", "cell", "phone", "number", "of", "the", "student", "whose", "address", "has", "the", "lowest", "monthly", "rental", "?"], "guid": 9357}}
{"text": "architect: id, name, nationality, gender; bridge: architect_id, id, name, location, length_meters, length_feet; mill: architect_id, id, location, name, type, built_year, notes | show the name of all bridges that was designed by american archtect, and sort the result by the bridge feet length.", "sql": "SELECT t1.name FROM bridge AS t1 JOIN architect AS t2 ON t1.architect_id  =  t2.id WHERE t2.nationality  =  'American' ORDER BY t1.length_feet", "example": {"db_id": "architecture", "query": "SELECT t1.name FROM bridge AS t1 JOIN architect AS t2 ON t1.architect_id  =  t2.id WHERE t2.nationality  =  'American' ORDER BY t1.length_feet", "query_toks": ["SELECT", "t1.name", "FROM", "bridge", "AS", "t1", "JOIN", "architect", "AS", "t2", "ON", "t1.architect_id", "=", "t2.id", "WHERE", "t2.nationality", "=", "'American", "'", "ORDER", "BY", "t1.length_feet"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "bridge", "as", "t1", "join", "architect", "as", "t2", "on", "t1", ".", "architect_id", "=", "t2", ".", "id", "where", "t2", ".", "nationality", "=", "value", "order", "by", "t1", ".", "length_feet"], "question": "show the name of all bridges that was designed by american archtect, and sort the result by the bridge feet length.", "question_toks": ["show", "the", "name", "of", "all", "bridges", "that", "was", "designed", "by", "american", "archtect", ",", "and", "sort", "the", "result", "by", "the", "bridge", "feet", "length", "."], "guid": 9358}}
{"text": "people: People_ID, Name, Country, Is_Male, Age; church: Church_ID, Name, Organized_by, Open_Date, Continuation_of; wedding: Church_ID, Male_ID, Female_ID, Year | Show the name and opening year for three churches that opened most recently.", "sql": "SELECT name ,  open_date FROM church ORDER BY open_date DESC LIMIT 3", "example": {"db_id": "wedding", "query": "SELECT name ,  open_date FROM church ORDER BY open_date DESC LIMIT 3", "query_toks": ["SELECT", "name", ",", "open_date", "FROM", "church", "ORDER", "BY", "open_date", "DESC", "LIMIT", "3"], "query_toks_no_value": ["select", "name", ",", "open_date", "from", "church", "order", "by", "open_date", "desc", "limit", "value"], "question": "Show the name and opening year for three churches that opened most recently.", "question_toks": ["Show", "the", "name", "and", "opening", "year", "for", "three", "churches", "that", "opened", "most", "recently", "."], "guid": 9359}}
{"text": "Ref_Address_Types: address_type_code, address_type_description; Ref_Detention_Type: detention_type_code, detention_type_description; Ref_Incident_Type: incident_type_code, incident_type_description; Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Students: student_id, address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, date_first_rental, date_left_university, other_student_details; Teachers: teacher_id, address_id, first_name, middle_name, last_name, gender, cell_mobile_number, email_address, other_details; Assessment_Notes: notes_id, student_id, teacher_id, date_of_notes, text_of_notes, other_details; Behavior_Incident: incident_id, incident_type_code, student_id, date_incident_start, date_incident_end, incident_summary, recommendations, other_details; Detention: detention_id, detention_type_code, teacher_id, datetime_detention_start, datetime_detention_end, detention_summary, other_details; Student_Addresses: student_id, address_id, date_address_from, date_address_to, monthly_rental, other_details | Return all detention summaries.", "sql": "SELECT detention_summary FROM Detention", "example": {"db_id": "behavior_monitoring", "query": "SELECT detention_summary FROM Detention", "query_toks": ["SELECT", "detention_summary", "FROM", "Detention"], "query_toks_no_value": ["select", "detention_summary", "from", "detention"], "question": "Return all detention summaries.", "question_toks": ["Return", "all", "detention", "summaries", "."], "guid": 9360}}
{"text": "Ref_Address_Types: address_type_code, address_type_description; Ref_Detention_Type: detention_type_code, detention_type_description; Ref_Incident_Type: incident_type_code, incident_type_description; Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Students: student_id, address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, date_first_rental, date_left_university, other_student_details; Teachers: teacher_id, address_id, first_name, middle_name, last_name, gender, cell_mobile_number, email_address, other_details; Assessment_Notes: notes_id, student_id, teacher_id, date_of_notes, text_of_notes, other_details; Behavior_Incident: incident_id, incident_type_code, student_id, date_incident_start, date_incident_end, incident_summary, recommendations, other_details; Detention: detention_id, detention_type_code, teacher_id, datetime_detention_start, datetime_detention_end, detention_summary, other_details; Student_Addresses: student_id, address_id, date_address_from, date_address_to, monthly_rental, other_details | Find all information about student addresses, and sort by monthly rental in descending order.", "sql": "SELECT * FROM Student_Addresses ORDER BY monthly_rental DESC", "example": {"db_id": "behavior_monitoring", "query": "SELECT * FROM Student_Addresses ORDER BY monthly_rental DESC", "query_toks": ["SELECT", "*", "FROM", "Student_Addresses", "ORDER", "BY", "monthly_rental", "DESC"], "query_toks_no_value": ["select", "*", "from", "student_addresses", "order", "by", "monthly_rental", "desc"], "question": "Find all information about student addresses, and sort by monthly rental in descending order.", "question_toks": ["Find", "all", "information", "about", "student", "addresses", ",", "and", "sort", "by", "monthly", "rental", "in", "descending", "order", "."], "guid": 9361}}
{"text": "city: City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking; farm: Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats; farm_competition: Competition_ID, Year, Theme, Host_city_ID, Hosts; competition_record: Competition_ID, Farm_ID, Rank | Please show the themes of competitions with host cities having populations larger than 1000.", "sql": "SELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID WHERE T1.Population  >  1000", "example": {"db_id": "farm", "query": "SELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID WHERE T1.Population  >  1000", "query_toks": ["SELECT", "T2.Theme", "FROM", "city", "AS", "T1", "JOIN", "farm_competition", "AS", "T2", "ON", "T1.City_ID", "=", "T2.Host_city_ID", "WHERE", "T1.Population", ">", "1000"], "query_toks_no_value": ["select", "t2", ".", "theme", "from", "city", "as", "t1", "join", "farm_competition", "as", "t2", "on", "t1", ".", "city_id", "=", "t2", ".", "host_city_id", "where", "t1", ".", "population", ">", "value"], "question": "Please show the themes of competitions with host cities having populations larger than 1000.", "question_toks": ["Please", "show", "the", "themes", "of", "competitions", "with", "host", "cities", "having", "populations", "larger", "than", "1000", "."], "guid": 9362}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | Which 3 wineries produce the most wines made from white grapes?", "sql": "SELECT T2.Winery FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.GRAPE  =  T2.GRAPE WHERE T1.Color  =  \"White\" GROUP BY T2.Winery ORDER BY count(*) DESC LIMIT 3", "example": {"db_id": "wine_1", "query": "SELECT T2.Winery FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.GRAPE  =  T2.GRAPE WHERE T1.Color  =  \"White\" GROUP BY T2.Winery ORDER BY count(*) DESC LIMIT 3", "query_toks": ["SELECT", "T2.Winery", "FROM", "GRAPES", "AS", "T1", "JOIN", "WINE", "AS", "T2", "ON", "T1.GRAPE", "=", "T2.GRAPE", "WHERE", "T1.Color", "=", "``", "White", "''", "GROUP", "BY", "T2.Winery", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "3"], "query_toks_no_value": ["select", "t2", ".", "winery", "from", "grapes", "as", "t1", "join", "wine", "as", "t2", "on", "t1", ".", "grape", "=", "t2", ".", "grape", "where", "t1", ".", "color", "=", "value", "group", "by", "t2", ".", "winery", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which 3 wineries produce the most wines made from white grapes?", "question_toks": ["Which", "3", "wineries", "produce", "the", "most", "wines", "made", "from", "white", "grapes", "?"], "guid": 9363}}
{"text": "Ref_Address_Types: address_type_code, address_type_description; Ref_Detention_Type: detention_type_code, detention_type_description; Ref_Incident_Type: incident_type_code, incident_type_description; Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Students: student_id, address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, date_first_rental, date_left_university, other_student_details; Teachers: teacher_id, address_id, first_name, middle_name, last_name, gender, cell_mobile_number, email_address, other_details; Assessment_Notes: notes_id, student_id, teacher_id, date_of_notes, text_of_notes, other_details; Behavior_Incident: incident_id, incident_type_code, student_id, date_incident_start, date_incident_end, incident_summary, recommendations, other_details; Detention: detention_id, detention_type_code, teacher_id, datetime_detention_start, datetime_detention_end, detention_summary, other_details; Student_Addresses: student_id, address_id, date_address_from, date_address_to, monthly_rental, other_details | What are the dates of the assessment notes?", "sql": "SELECT date_of_notes FROM Assessment_Notes", "example": {"db_id": "behavior_monitoring", "query": "SELECT date_of_notes FROM Assessment_Notes", "query_toks": ["SELECT", "date_of_notes", "FROM", "Assessment_Notes"], "query_toks_no_value": ["select", "date_of_notes", "from", "assessment_notes"], "question": "What are the dates of the assessment notes?", "question_toks": ["What", "are", "the", "dates", "of", "the", "assessment", "notes", "?"], "guid": 9364}}