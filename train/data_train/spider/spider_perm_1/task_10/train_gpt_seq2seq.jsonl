{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | Find the names of all distinct wines that have appellations in North Coast area.", "sql": "SELECT DISTINCT T2.Name FROM APPELLATIONs AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation WHERE T1.Area = \"North Coast\"", "example": {"db_id": "wine_1", "query": "SELECT DISTINCT T2.Name FROM APPELLATIONs AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.Area  =  \"North Coast\"", "query_toks": ["SELECT", "DISTINCT", "T2.Name", "FROM", "APPELLATIONs", "AS", "T1", "JOIN", "WINE", "AS", "T2", "ON", "T1.Appelation", "=", "T2.Appelation", "WHERE", "T1.Area", "=", "``", "North", "Coast", "''"], "query_toks_no_value": ["select", "distinct", "t2", ".", "name", "from", "appellations", "as", "t1", "join", "wine", "as", "t2", "on", "t1", ".", "appelation", "=", "t2", ".", "appelation", "where", "t1", ".", "area", "=", "value"], "question": "Find the names of all distinct wines that have appellations in North Coast area.", "question_toks": ["Find", "the", "names", "of", "all", "distinct", "wines", "that", "have", "appellations", "in", "North", "Coast", "area", "."], "guid": 9100}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | What are the numbers of wines for different grapes?", "sql": "SELECT COUNT(*) , Grape FROM WINE GROUP BY Grape", "example": {"db_id": "wine_1", "query": "SELECT count(*) ,  Grape FROM WINE GROUP BY Grape", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "Grape", "FROM", "WINE", "GROUP", "BY", "Grape"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "grape", "from", "wine", "group", "by", "grape"], "question": "What are the numbers of wines for different grapes?", "question_toks": ["What", "are", "the", "numbers", "of", "wines", "for", "different", "grapes", "?"], "guid": 9101}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | List the grapes and appelations of all wines.", "sql": "SELECT Grape, Appelation FROM Wine", "example": {"db_id": "wine_1", "query": "SELECT Grape ,  Appelation FROM WINE", "query_toks": ["SELECT", "Grape", ",", "Appelation", "FROM", "WINE"], "query_toks_no_value": ["select", "grape", ",", "appelation", "from", "wine"], "question": "List the grapes and appelations of all wines.", "question_toks": ["List", "the", "grapes", "and", "appelations", "of", "all", "wines", "."], "guid": 9102}}
{"text": "stadium: id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage; game: stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition; injury_accident: game_id, id, Player, Injury, Number_of_matches, Source | What is the season of the game which causes the player 'Walter Samuel' to get injured?", "sql": "SELECT T1.season FROM game AS T1 JOIN injury_accident AS T2 ON T1.id = T2.game_id WHERE T2.player = 'Walter Samuel'", "example": {"db_id": "game_injury", "query": "SELECT T1.season FROM game AS T1 JOIN injury_accident AS T2 ON T1.id  =  T2.game_id WHERE T2.player  =  'Walter Samuel'", "query_toks": ["SELECT", "T1.season", "FROM", "game", "AS", "T1", "JOIN", "injury_accident", "AS", "T2", "ON", "T1.id", "=", "T2.game_id", "WHERE", "T2.player", "=", "'Walter", "Samuel", "'"], "query_toks_no_value": ["select", "t1", ".", "season", "from", "game", "as", "t1", "join", "injury_accident", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "game_id", "where", "t2", ".", "player", "=", "value"], "question": "What is the season of the game which causes the player 'Walter Samuel' to get injured?", "question_toks": ["What", "is", "the", "season", "of", "the", "game", "which", "causes", "the", "player", "'Walter", "Samuel", "'", "to", "get", "injured", "?"], "guid": 9103}}
{"text": "Third_Party_Companies: company_id, company_type, company_name, company_address, other_company_details; Maintenance_Contracts: maintenance_contract_id, maintenance_contract_company_id, contract_start_date, contract_end_date, other_contract_details; Parts: part_id, part_name, chargeable_yn, chargeable_amount, other_part_details; Skills: skill_id, skill_code, skill_description; Staff: staff_id, staff_name, gender, other_staff_details; Assets: asset_id, maintenance_contract_id, supplier_company_id, asset_details, asset_make, asset_model, asset_acquired_date, asset_disposed_date, other_asset_details; Asset_Parts: asset_id, part_id; Maintenance_Engineers: engineer_id, company_id, first_name, last_name, other_details; Engineer_Skills: engineer_id, skill_id; Fault_Log: fault_log_entry_id, asset_id, recorded_by_staff_id, fault_log_entry_datetime, fault_description, other_fault_details | What are all the distinct asset models?", "sql": "SELECT DISTINCT asset_model FROM Assets", "example": {"db_id": "assets_maintenance", "query": "SELECT DISTINCT asset_model FROM Assets", "query_toks": ["SELECT", "DISTINCT", "asset_model", "FROM", "Assets"], "query_toks_no_value": ["select", "distinct", "asset_model", "from", "assets"], "question": "What are all the distinct asset models?", "question_toks": ["What", "are", "all", "the", "distinct", "asset", "models", "?"], "guid": 9104}}
{"text": "stadium: id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage; game: stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition; injury_accident: game_id, id, Player, Injury, Number_of_matches, Source | What are the ids, scores, and dates of the games which caused at least two injury accidents?", "sql": "SELECT T1.id, T1.score, T1.date FROM game AS T1 JOIN injury_accident AS T2 ON T2.game_id = T1.id GROUP BY T1.id HAVING COUNT(*) >= 2", "example": {"db_id": "game_injury", "query": "SELECT T1.id ,  T1.score ,  T1.date FROM game AS T1 JOIN injury_accident AS T2 ON T2.game_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2", "query_toks": ["SELECT", "T1.id", ",", "T1.score", ",", "T1.date", "FROM", "game", "AS", "T1", "JOIN", "injury_accident", "AS", "T2", "ON", "T2.game_id", "=", "T1.id", "GROUP", "BY", "T1.id", "HAVING", "count", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "t1", ".", "id", ",", "t1", ".", "score", ",", "t1", ".", "date", "from", "game", "as", "t1", "join", "injury_accident", "as", "t2", "on", "t2", ".", "game_id", "=", "t1", ".", "id", "group", "by", "t1", ".", "id", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "What are the ids, scores, and dates of the games which caused at least two injury accidents?", "question_toks": ["What", "are", "the", "ids", ",", "scores", ",", "and", "dates", "of", "the", "games", "which", "caused", "at", "least", "two", "injury", "accidents", "?"], "guid": 9105}}
{"text": "county_public_safety: County_ID, Name, Population, Police_officers, Residents_per_officer, Case_burden, Crime_rate, Police_force, Location; city: City_ID, County_ID, Name, White, Black, Amerindian, Asian, Multiracial, Hispanic | Show the number of cities in counties that have a population more than 20000.", "sql": "SELECT COUNT(*) FROM city WHERE county_ID IN (SELECT county_ID FROM county_public_safety WHERE population > 20000)", "example": {"db_id": "county_public_safety", "query": "SELECT count(*) FROM city WHERE county_ID IN (SELECT county_ID FROM county_public_safety WHERE population  >  20000)", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "city", "WHERE", "county_ID", "IN", "(", "SELECT", "county_ID", "FROM", "county_public_safety", "WHERE", "population", ">", "20000", ")"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "city", "where", "county_id", "in", "(", "select", "county_id", "from", "county_public_safety", "where", "population", ">", "value", ")"], "question": "Show the number of cities in counties that have a population more than 20000.", "question_toks": ["Show", "the", "number", "of", "cities", "in", "counties", "that", "have", "a", "population", "more", "than", "20000", "."], "guid": 9106}}
{"text": "city: City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking; farm: Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats; farm_competition: Competition_ID, Year, Theme, Host_city_ID, Hosts; competition_record: Competition_ID, Farm_ID, Rank | What is the average number of working horses of farms with more than 5000 total number of horses?", "sql": "SELECT AVG(Working_Horses) FROM farm WHERE Total_Horses > 5000", "example": {"db_id": "farm", "query": "SELECT avg(Working_Horses) FROM farm WHERE Total_Horses  >  5000", "query_toks": ["SELECT", "avg", "(", "Working_Horses", ")", "FROM", "farm", "WHERE", "Total_Horses", ">", "5000"], "query_toks_no_value": ["select", "avg", "(", "working_horses", ")", "from", "farm", "where", "total_horses", ">", "value"], "question": "What is the average number of working horses of farms with more than 5000 total number of horses?", "question_toks": ["What", "is", "the", "average", "number", "of", "working", "horses", "of", "farms", "with", "more", "than", "5000", "total", "number", "of", "horses", "?"], "guid": 9107}}
{"text": "people: People_ID, Name, Country, Is_Male, Age; church: Church_ID, Name, Organized_by, Open_Date, Continuation_of; wedding: Church_ID, Male_ID, Female_ID, Year | How many weddings are there in year 2016?", "sql": "SELECT COUNT(*) FROM wedding WHERE year = 2016", "example": {"db_id": "wedding", "query": "SELECT count(*) FROM wedding WHERE YEAR  =  2016", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "wedding", "WHERE", "YEAR", "=", "2016"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "wedding", "where", "year", "=", "value"], "question": "How many weddings are there in year 2016?", "question_toks": ["How", "many", "weddings", "are", "there", "in", "year", "2016", "?"], "guid": 9108}}
{"text": "county_public_safety: County_ID, Name, Population, Police_officers, Residents_per_officer, Case_burden, Crime_rate, Police_force, Location; city: City_ID, County_ID, Name, White, Black, Amerindian, Asian, Multiracial, Hispanic | Return the hispanic percentage for cities in which the black percentage is greater than 10.", "sql": "SELECT Hispanic FROM city WHERE Black > 10", "example": {"db_id": "county_public_safety", "query": "SELECT Hispanic FROM city WHERE Black  >  10", "query_toks": ["SELECT", "Hispanic", "FROM", "city", "WHERE", "Black", ">", "10"], "query_toks_no_value": ["select", "hispanic", "from", "city", "where", "black", ">", "value"], "question": "Return the hispanic percentage for cities in which the black percentage is greater than 10.", "question_toks": ["Return", "the", "hispanic", "percentage", "for", "cities", "in", "which", "the", "black", "percentage", "is", "greater", "than", "10", "."], "guid": 9109}}
{"text": "architect: id, name, nationality, gender; bridge: architect_id, id, name, location, length_meters, length_feet; mill: architect_id, id, location, name, type, built_year, notes | What are the distinct names and nationalities of the architects who have ever built a mill?", "sql": "SELECT DISTINCT T1.name, T1.nationality FROM architect AS T1 JOIN mill AS T2 ON T1.id = T2.architect_id", "example": {"db_id": "architecture", "query": "SELECT DISTINCT T1.name ,  T1.nationality FROM architect AS T1 JOIN mill AS t2 ON T1.id  =  T2.architect_id", "query_toks": ["SELECT", "DISTINCT", "T1.name", ",", "T1.nationality", "FROM", "architect", "AS", "T1", "JOIN", "mill", "AS", "t2", "ON", "T1.id", "=", "T2.architect_id"], "query_toks_no_value": ["select", "distinct", "t1", ".", "name", ",", "t1", ".", "nationality", "from", "architect", "as", "t1", "join", "mill", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "architect_id"], "question": "What are the distinct names and nationalities of the architects who have ever built a mill?", "question_toks": ["What", "are", "the", "distinct", "names", "and", "nationalities", "of", "the", "architects", "who", "have", "ever", "built", "a", "mill", "?"], "guid": 9110}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | What are the average price and score of wines grouped by appelation?", "sql": "SELECT avg(Price) , avg(Score) , Appelation FROM WINE GROUP BY Appelation", "example": {"db_id": "wine_1", "query": "SELECT avg(Price) ,  avg(Score) ,  Appelation FROM WINE GROUP BY Appelation", "query_toks": ["SELECT", "avg", "(", "Price", ")", ",", "avg", "(", "Score", ")", ",", "Appelation", "FROM", "WINE", "GROUP", "BY", "Appelation"], "query_toks_no_value": ["select", "avg", "(", "price", ")", ",", "avg", "(", "score", ")", ",", "appelation", "from", "wine", "group", "by", "appelation"], "question": "What are the average price and score of wines grouped by appelation?", "question_toks": ["What", "are", "the", "average", "price", "and", "score", "of", "wines", "grouped", "by", "appelation", "?"], "guid": 9111}}
{"text": "county_public_safety: County_ID, Name, Population, Police_officers, Residents_per_officer, Case_burden, Crime_rate, Police_force, Location; city: City_ID, County_ID, Name, White, Black, Amerindian, Asian, Multiracial, Hispanic | List the names of counties in descending order of population.", "sql": "SELECT Name FROM county_public_safety ORDER BY Population DESC", "example": {"db_id": "county_public_safety", "query": "SELECT Name FROM county_public_safety ORDER BY Population DESC", "query_toks": ["SELECT", "Name", "FROM", "county_public_safety", "ORDER", "BY", "Population", "DESC"], "query_toks_no_value": ["select", "name", "from", "county_public_safety", "order", "by", "population", "desc"], "question": "List the names of counties in descending order of population.", "question_toks": ["List", "the", "names", "of", "counties", "in", "descending", "order", "of", "population", "."], "guid": 9112}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | Give the distinct names of wines made before 2000 or after 2010.", "sql": "SELECT DISTINCT Name FROM WINE WHERE YEAR < 2000 OR YEAR > 2010", "example": {"db_id": "wine_1", "query": "SELECT DISTINCT Name FROM WINE WHERE YEAR  <  2000 OR YEAR  >  2010", "query_toks": ["SELECT", "DISTINCT", "Name", "FROM", "WINE", "WHERE", "YEAR", "<", "2000", "OR", "YEAR", ">", "2010"], "query_toks_no_value": ["select", "distinct", "name", "from", "wine", "where", "year", "<", "value", "or", "year", ">", "value"], "question": "Give the distinct names of wines made before 2000 or after 2010.", "question_toks": ["Give", "the", "distinct", "names", "of", "wines", "made", "before", "2000", "or", "after", "2010", "."], "guid": 9113}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | List the names of all distinct wines that have scores higher than 90.", "sql": "SELECT DISTINCT Name FROM WINE WHERE Score > 90", "example": {"db_id": "wine_1", "query": "SELECT Name FROM WINE WHERE score  >  90", "query_toks": ["SELECT", "Name", "FROM", "WINE", "WHERE", "score", ">", "90"], "query_toks_no_value": ["select", "name", "from", "wine", "where", "score", ">", "value"], "question": "List the names of all distinct wines that have scores higher than 90.", "question_toks": ["List", "the", "names", "of", "all", "distinct", "wines", "that", "have", "scores", "higher", "than", "90", "."], "guid": 9114}}
{"text": "architect: id, name, nationality, gender; bridge: architect_id, id, name, location, length_meters, length_feet; mill: architect_id, id, location, name, type, built_year, notes | List the name, nationality and id of all male architects ordered by their names lexicographically.", "sql": "SELECT name, nationality, id FROM architect WHERE gender = 'male' ORDER BY name ASC", "example": {"db_id": "architecture", "query": "SELECT name ,  nationality ,  id FROM architect WHERE gender  =  'male' ORDER BY name", "query_toks": ["SELECT", "name", ",", "nationality", ",", "id", "FROM", "architect", "WHERE", "gender", "=", "'male", "'", "ORDER", "BY", "name"], "query_toks_no_value": ["select", "name", ",", "nationality", ",", "id", "from", "architect", "where", "gender", "=", "value", "order", "by", "name"], "question": "List the name, nationality and id of all male architects ordered by their names lexicographically.", "question_toks": ["List", "the", "name", ",", "nationality", "and", "id", "of", "all", "male", "architects", "ordered", "by", "their", "names", "lexicographically", "."], "guid": 9115}}
{"text": "stadium: id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage; game: stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition; injury_accident: game_id, id, Player, Injury, Number_of_matches, Source | How many games are free of injury accidents?", "sql": "SELECT COUNT(*) FROM game WHERE id NOT IN (SELECT game_id FROM injury_accident)", "example": {"db_id": "game_injury", "query": "SELECT count(*) FROM game WHERE id NOT IN ( SELECT game_id FROM injury_accident )", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "game", "WHERE", "id", "NOT", "IN", "(", "SELECT", "game_id", "FROM", "injury_accident", ")"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "game", "where", "id", "not", "in", "(", "select", "game_id", "from", "injury_accident", ")"], "question": "How many games are free of injury accidents?", "question_toks": ["How", "many", "games", "are", "free", "of", "injury", "accidents", "?"], "guid": 9116}}
{"text": "architect: id, name, nationality, gender; bridge: architect_id, id, name, location, length_meters, length_feet; mill: architect_id, id, location, name, type, built_year, notes | What is the location of the bridge named 'Kolob Arch' or 'Rainbow Bridge'?", "sql": "SELECT location FROM bridge WHERE name = 'Kolob Arch' OR name = 'Rainbow Bridge'", "example": {"db_id": "architecture", "query": "SELECT LOCATION FROM bridge WHERE name  =  'Kolob Arch' OR name  =  'Rainbow Bridge'", "query_toks": ["SELECT", "LOCATION", "FROM", "bridge", "WHERE", "name", "=", "'Kolob", "Arch", "'", "OR", "name", "=", "'Rainbow", "Bridge", "'"], "query_toks_no_value": ["select", "location", "from", "bridge", "where", "name", "=", "value", "or", "name", "=", "value"], "question": "What is the location of the bridge named 'Kolob Arch' or 'Rainbow Bridge'?", "question_toks": ["What", "is", "the", "location", "of", "the", "bridge", "named", "'Kolob", "Arch", "'", "or", "'Rainbow", "Bridge", "'", "?"], "guid": 9117}}
{"text": "city: City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking; farm: Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats; farm_competition: Competition_ID, Year, Theme, Host_city_ID, Hosts; competition_record: Competition_ID, Farm_ID, Rank | Which statuses correspond to both cities that have a population over 1500 and cities that have a population lower than 500?", "sql": "SELECT Status FROM city WHERE Population > 1500 INTERSECT SELECT Status FROM city WHERE Population < 500", "example": {"db_id": "farm", "query": "SELECT Status FROM city WHERE Population  >  1500 INTERSECT SELECT Status FROM city WHERE Population  <  500", "query_toks": ["SELECT", "Status", "FROM", "city", "WHERE", "Population", ">", "1500", "INTERSECT", "SELECT", "Status", "FROM", "city", "WHERE", "Population", "<", "500"], "query_toks_no_value": ["select", "status", "from", "city", "where", "population", ">", "value", "intersect", "select", "status", "from", "city", "where", "population", "<", "value"], "question": "Which statuses correspond to both cities that have a population over 1500 and cities that have a population lower than 500?", "question_toks": ["Which", "statuses", "correspond", "to", "both", "cities", "that", "have", "a", "population", "over", "1500", "and", "cities", "that", "have", "a", "population", "lower", "than", "500", "?"], "guid": 9118}}
{"text": "repair: repair_ID, name, Launch_Date, Notes; machine: Machine_ID, Making_Year, Class, Team, Machine_series, value_points, quality_rank; technician: technician_id, Name, Team, Starting_Year, Age; repair_assignment: technician_id, repair_ID, Machine_ID | What is the starting year of the oldest technicians?", "sql": "SELECT Starting_Year FROM technician ORDER BY Age DESC LIMIT 1", "example": {"db_id": "machine_repair", "query": "SELECT Starting_Year FROM technician ORDER BY Age DESC LIMIT 1", "query_toks": ["SELECT", "Starting_Year", "FROM", "technician", "ORDER", "BY", "Age", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "starting_year", "from", "technician", "order", "by", "age", "desc", "limit", "value"], "question": "What is the starting year of the oldest technicians?", "question_toks": ["What", "is", "the", "starting", "year", "of", "the", "oldest", "technicians", "?"], "guid": 9119}}
{"text": "people: People_ID, Name, Country, Is_Male, Age; church: Church_ID, Name, Organized_by, Open_Date, Continuation_of; wedding: Church_ID, Male_ID, Female_ID, Year | Show the name, open date, and organizer for all churches.", "sql": "SELECT name, open_date, organized_by FROM church", "example": {"db_id": "wedding", "query": "SELECT name ,  open_date ,  organized_by FROM Church", "query_toks": ["SELECT", "name", ",", "open_date", ",", "organized_by", "FROM", "Church"], "query_toks_no_value": ["select", "name", ",", "open_date", ",", "organized_by", "from", "church"], "question": "Show the name, open date, and organizer for all churches.", "question_toks": ["Show", "the", "name", ",", "open", "date", ",", "and", "organizer", "for", "all", "churches", "."], "guid": 9120}}
{"text": "architect: id, name, nationality, gender; bridge: architect_id, id, name, location, length_meters, length_feet; mill: architect_id, id, location, name, type, built_year, notes | What is the average length in feet of the bridges?", "sql": "SELECT AVG(length_feet) FROM bridge", "example": {"db_id": "architecture", "query": "SELECT avg(length_feet) FROM bridge", "query_toks": ["SELECT", "avg", "(", "length_feet", ")", "FROM", "bridge"], "query_toks_no_value": ["select", "avg", "(", "length_feet", ")", "from", "bridge"], "question": "What is the average length in feet of the bridges?", "question_toks": ["What", "is", "the", "average", "length", "in", "feet", "of", "the", "bridges", "?"], "guid": 9121}}
{"text": "battle: id, name, date, bulgarian_commander, latin_commander, result; ship: lost_in_battle, id, name, tonnage, ship_type, location, disposition_of_ship; death: caused_by_ship_id, id, note, killed, injured | What are the different ids and names of the battles that lost any 'Brig' type shipes?", "sql": "SELECT DISTINCT T1.id , T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.ship_type = 'Brig'", "example": {"db_id": "battle_death", "query": "SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'", "query_toks": ["SELECT", "DISTINCT", "T1.id", ",", "T1.name", "FROM", "battle", "AS", "T1", "JOIN", "ship", "AS", "T2", "ON", "T1.id", "=", "T2.lost_in_battle", "WHERE", "T2.ship_type", "=", "'Brig", "'"], "query_toks_no_value": ["select", "distinct", "t1", ".", "id", ",", "t1", ".", "name", "from", "battle", "as", "t1", "join", "ship", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "lost_in_battle", "where", "t2", ".", "ship_type", "=", "value"], "question": "What are the different ids and names of the battles that lost any 'Brig' type shipes?", "question_toks": ["What", "are", "the", "different", "ids", "and", "names", "of", "the", "battles", "that", "lost", "any", "'Brig", "'", "type", "shipes", "?"], "guid": 9122}}
{"text": "repair: repair_ID, name, Launch_Date, Notes; machine: Machine_ID, Making_Year, Class, Team, Machine_series, value_points, quality_rank; technician: technician_id, Name, Team, Starting_Year, Age; repair_assignment: technician_id, repair_ID, Machine_ID | Show the starting years shared by technicians from team \"CLE\" and \"CWS\".", "sql": "SELECT Starting_Year FROM technician WHERE Team = \"CLE\" INTERSECT SELECT Starting_Year FROM technician WHERE Team = \"CWS\"", "example": {"db_id": "machine_repair", "query": "SELECT Starting_Year FROM technician WHERE Team  =  \"CLE\" INTERSECT SELECT Starting_Year FROM technician WHERE Team  =  \"CWS\"", "query_toks": ["SELECT", "Starting_Year", "FROM", "technician", "WHERE", "Team", "=", "``", "CLE", "''", "INTERSECT", "SELECT", "Starting_Year", "FROM", "technician", "WHERE", "Team", "=", "``", "CWS", "''"], "query_toks_no_value": ["select", "starting_year", "from", "technician", "where", "team", "=", "value", "intersect", "select", "starting_year", "from", "technician", "where", "team", "=", "value"], "question": "Show the starting years shared by technicians from team \"CLE\" and \"CWS\".", "question_toks": ["Show", "the", "starting", "years", "shared", "by", "technicians", "from", "team", "``", "CLE", "''", "and", "``", "CWS", "''", "."], "guid": 9123}}
{"text": "county_public_safety: County_ID, Name, Population, Police_officers, Residents_per_officer, Case_burden, Crime_rate, Police_force, Location; city: City_ID, County_ID, Name, White, Black, Amerindian, Asian, Multiracial, Hispanic | Return the names of cities, ordered alphabetically.", "sql": "SELECT Name FROM city ORDER BY Name ASC", "example": {"db_id": "county_public_safety", "query": "SELECT Name FROM city ORDER BY Name ASC", "query_toks": ["SELECT", "Name", "FROM", "city", "ORDER", "BY", "Name", "ASC"], "query_toks_no_value": ["select", "name", "from", "city", "order", "by", "name", "asc"], "question": "Return the names of cities, ordered alphabetically.", "question_toks": ["Return", "the", "names", "of", "cities", ",", "ordered", "alphabetically", "."], "guid": 9124}}
{"text": "county_public_safety: County_ID, Name, Population, Police_officers, Residents_per_officer, Case_burden, Crime_rate, Police_force, Location; city: City_ID, County_ID, Name, White, Black, Amerindian, Asian, Multiracial, Hispanic | List the name of the county with the largest population.", "sql": "SELECT Name FROM county_public_safety ORDER BY Population DESC LIMIT 1", "example": {"db_id": "county_public_safety", "query": "SELECT Name FROM county_public_safety ORDER BY Population DESC LIMIT 1", "query_toks": ["SELECT", "Name", "FROM", "county_public_safety", "ORDER", "BY", "Population", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "name", "from", "county_public_safety", "order", "by", "population", "desc", "limit", "value"], "question": "List the name of the county with the largest population.", "question_toks": ["List", "the", "name", "of", "the", "county", "with", "the", "largest", "population", "."], "guid": 9125}}
{"text": "city: City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking; farm: Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats; farm_competition: Competition_ID, Year, Theme, Host_city_ID, Hosts; competition_record: Competition_ID, Farm_ID, Rank | How many farms are there?", "sql": "SELECT COUNT(*) FROM farm", "example": {"db_id": "farm", "query": "SELECT count(*) FROM farm", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "farm"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "farm"], "question": "How many farms are there?", "question_toks": ["How", "many", "farms", "are", "there", "?"], "guid": 9126}}
{"text": "people: People_ID, District, Name, Party, Age; debate: Debate_ID, Date, Venue, Num_of_Audience; debate_people: Debate_ID, Affirmative, Negative, If_Affirmative_Win | List the dates of debates with number of audience bigger than 150", "sql": "SELECT Date FROM debate WHERE Num_of_Audience > 150", "example": {"db_id": "debate", "query": "SELECT Date FROM debate WHERE Num_of_Audience  >  150", "query_toks": ["SELECT", "Date", "FROM", "debate", "WHERE", "Num_of_Audience", ">", "150"], "query_toks_no_value": ["select", "date", "from", "debate", "where", "num_of_audience", ">", "value"], "question": "List the dates of debates with number of audience bigger than 150", "question_toks": ["List", "the", "dates", "of", "debates", "with", "number", "of", "audience", "bigger", "than", "150"], "guid": 9127}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | Which wineries produce at least four wines?", "sql": "SELECT Winery FROM WINE GROUP BY Winery HAVING COUNT(*) >= 4", "example": {"db_id": "wine_1", "query": "SELECT Winery FROM WINE GROUP BY Winery HAVING count(*)  >=  4", "query_toks": ["SELECT", "Winery", "FROM", "WINE", "GROUP", "BY", "Winery", "HAVING", "count", "(", "*", ")", ">", "=", "4"], "query_toks_no_value": ["select", "winery", "from", "wine", "group", "by", "winery", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "Which wineries produce at least four wines?", "question_toks": ["Which", "wineries", "produce", "at", "least", "four", "wines", "?"], "guid": 9128}}
{"text": "architect: id, name, nationality, gender; bridge: architect_id, id, name, location, length_meters, length_feet; mill: architect_id, id, location, name, type, built_year, notes | How many architects haven't built a mill before year 1850?", "sql": "SELECT COUNT(*) FROM architect WHERE id NOT IN (SELECT architect_id FROM mill WHERE built_year < 1850);", "example": {"db_id": "architecture", "query": "SELECT count(*) FROM architect WHERE id NOT IN ( SELECT architect_id FROM mill WHERE built_year  <  1850 );", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "architect", "WHERE", "id", "NOT", "IN", "(", "SELECT", "architect_id", "FROM", "mill", "WHERE", "built_year", "<", "1850", ")", ";"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "architect", "where", "id", "not", "in", "(", "select", "architect_id", "from", "mill", "where", "built_year", "<", "value", ")"], "question": "How many architects haven't built a mill before year 1850?", "question_toks": ["How", "many", "architects", "have", "n't", "built", "a", "mill", "before", "year", "1850", "?"], "guid": 9129}}
{"text": "Ref_Address_Types: address_type_code, address_type_description; Ref_Detention_Type: detention_type_code, detention_type_description; Ref_Incident_Type: incident_type_code, incident_type_description; Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Students: student_id, address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, date_first_rental, date_left_university, other_student_details; Teachers: teacher_id, address_id, first_name, middle_name, last_name, gender, cell_mobile_number, email_address, other_details; Assessment_Notes: notes_id, student_id, teacher_id, date_of_notes, text_of_notes, other_details; Behavior_Incident: incident_id, incident_type_code, student_id, date_incident_start, date_incident_end, incident_summary, recommendations, other_details; Detention: detention_id, detention_type_code, teacher_id, datetime_detention_start, datetime_detention_end, detention_summary, other_details; Student_Addresses: student_id, address_id, date_address_from, date_address_to, monthly_rental, other_details | What are the line 1 of addresses shared by some students and some teachers?", "sql": "SELECT T1.line_1 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.address_id INTERSECT SELECT T1.line_1 FROM Addresses AS T1 JOIN Teachers AS T2 ON T1.address_id = T2.address_id", "example": {"db_id": "behavior_monitoring", "query": "SELECT T1.line_1 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.address_id INTERSECT SELECT T1.line_1 FROM Addresses AS T1 JOIN Teachers AS T2 ON T1.address_id  =  T2.address_id", "query_toks": ["SELECT", "T1.line_1", "FROM", "Addresses", "AS", "T1", "JOIN", "Students", "AS", "T2", "ON", "T1.address_id", "=", "T2.address_id", "INTERSECT", "SELECT", "T1.line_1", "FROM", "Addresses", "AS", "T1", "JOIN", "Teachers", "AS", "T2", "ON", "T1.address_id", "=", "T2.address_id"], "query_toks_no_value": ["select", "t1", ".", "line_1", "from", "addresses", "as", "t1", "join", "students", "as", "t2", "on", "t1", ".", "address_id", "=", "t2", ".", "address_id", "intersect", "select", "t1", ".", "line_1", "from", "addresses", "as", "t1", "join", "teachers", "as", "t2", "on", "t1", ".", "address_id", "=", "t2", ".", "address_id"], "question": "What are the line 1 of addresses shared by some students and some teachers?", "question_toks": ["What", "are", "the", "line", "1", "of", "addresses", "shared", "by", "some", "students", "and", "some", "teachers", "?"], "guid": 9130}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | How many appelations are in Napa Country?", "sql": "SELECT COUNT(*) FROM APPELLATIONS WHERE County = 'Napa'", "example": {"db_id": "wine_1", "query": "SELECT count(*) FROM APPELLATIONS WHERE County  =  \"Napa\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "APPELLATIONS", "WHERE", "County", "=", "``", "Napa", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "appellations", "where", "county", "=", "value"], "question": "How many appelations are in Napa Country?", "question_toks": ["How", "many", "appelations", "are", "in", "Napa", "Country", "?"], "guid": 9131}}
{"text": "Third_Party_Companies: company_id, company_type, company_name, company_address, other_company_details; Maintenance_Contracts: maintenance_contract_id, maintenance_contract_company_id, contract_start_date, contract_end_date, other_contract_details; Parts: part_id, part_name, chargeable_yn, chargeable_amount, other_part_details; Skills: skill_id, skill_code, skill_description; Staff: staff_id, staff_name, gender, other_staff_details; Assets: asset_id, maintenance_contract_id, supplier_company_id, asset_details, asset_make, asset_model, asset_acquired_date, asset_disposed_date, other_asset_details; Asset_Parts: asset_id, part_id; Maintenance_Engineers: engineer_id, company_id, first_name, last_name, other_details; Engineer_Skills: engineer_id, skill_id; Fault_Log: fault_log_entry_id, asset_id, recorded_by_staff_id, fault_log_entry_datetime, fault_description, other_fault_details | Among those engineers who have visited, which engineer makes the least number of visits? List the engineer id, first name and last name.", "sql": "SELECT T1.engineer_id , T1.first_name , T1.last_name FROM Maintenance_Engineers AS T1 JOIN Engineer_Visits AS T2 ON T1.engineer_id = T2.engineer_id GROUP BY T1.engineer_id ORDER BY count(*) ASC LIMIT 1", "example": {"db_id": "assets_maintenance", "query": "SELECT T1.engineer_id ,  T1.first_name ,  T1.last_name FROM Maintenance_Engineers AS T1 JOIN Engineer_Visits AS T2 ON T1.engineer_id  =  T2.engineer_id GROUP BY T1.engineer_id ORDER BY count(*) ASC LIMIT 1", "query_toks": ["SELECT", "T1.engineer_id", ",", "T1.first_name", ",", "T1.last_name", "FROM", "Maintenance_Engineers", "AS", "T1", "JOIN", "Engineer_Visits", "AS", "T2", "ON", "T1.engineer_id", "=", "T2.engineer_id", "GROUP", "BY", "T1.engineer_id", "ORDER", "BY", "count", "(", "*", ")", "ASC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "engineer_id", ",", "t1", ".", "first_name", ",", "t1", ".", "last_name", "from", "maintenance_engineers", "as", "t1", "join", "engineer_visits", "as", "t2", "on", "t1", ".", "engineer_id", "=", "t2", ".", "engineer_id", "group", "by", "t1", ".", "engineer_id", "order", "by", "count", "(", "*", ")", "asc", "limit", "value"], "question": "Among those engineers who have visited, which engineer makes the least number of visits? List the engineer id, first name and last name.", "question_toks": ["Among", "those", "engineers", "who", "have", "visited", ",", "which", "engineer", "makes", "the", "least", "number", "of", "visits", "?", "List", "the", "engineer", "id", ",", "first", "name", "and", "last", "name", "."], "guid": 9132}}
{"text": "people: People_ID, Name, Country, Is_Male, Age; church: Church_ID, Name, Organized_by, Open_Date, Continuation_of; wedding: Church_ID, Male_ID, Female_ID, Year | Show the name and age for all male people who don't have a wedding.", "sql": "SELECT name, age FROM people WHERE is_male = 'T' AND people_id NOT IN (SELECT male_id FROM wedding)", "example": {"db_id": "wedding", "query": "SELECT name ,  age FROM people WHERE is_male  =  'T' AND people_id NOT IN (SELECT male_id FROM wedding)", "query_toks": ["SELECT", "name", ",", "age", "FROM", "people", "WHERE", "is_male", "=", "'T", "'", "AND", "people_id", "NOT", "IN", "(", "SELECT", "male_id", "FROM", "wedding", ")"], "query_toks_no_value": ["select", "name", ",", "age", "from", "people", "where", "is_male", "=", "value", "and", "people_id", "not", "in", "(", "select", "male_id", "from", "wedding", ")"], "question": "Show the name and age for all male people who don't have a wedding.", "question_toks": ["Show", "the", "name", "and", "age", "for", "all", "male", "people", "who", "do", "n't", "have", "a", "wedding", "."], "guid": 9133}}
{"text": "repair: repair_ID, name, Launch_Date, Notes; machine: Machine_ID, Making_Year, Class, Team, Machine_series, value_points, quality_rank; technician: technician_id, Name, Team, Starting_Year, Age; repair_assignment: technician_id, repair_ID, Machine_ID | What are the names of technicians and the machine series that they repair?", "sql": "SELECT T3.Name, T2.Machine_series FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id = T2.machine_id JOIN technician AS T3 ON T1.technician_ID = T3.technician_ID", "example": {"db_id": "machine_repair", "query": "SELECT T3.Name ,  T2.Machine_series FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id  =  T2.machine_id JOIN technician AS T3 ON T1.technician_ID  =  T3.technician_ID", "query_toks": ["SELECT", "T3.Name", ",", "T2.Machine_series", "FROM", "repair_assignment", "AS", "T1", "JOIN", "machine", "AS", "T2", "ON", "T1.machine_id", "=", "T2.machine_id", "JOIN", "technician", "AS", "T3", "ON", "T1.technician_ID", "=", "T3.technician_ID"], "query_toks_no_value": ["select", "t3", ".", "name", ",", "t2", ".", "machine_series", "from", "repair_assignment", "as", "t1", "join", "machine", "as", "t2", "on", "t1", ".", "machine_id", "=", "t2", ".", "machine_id", "join", "technician", "as", "t3", "on", "t1", ".", "technician_id", "=", "t3", ".", "technician_id"], "question": "What are the names of technicians and the machine series that they repair?", "question_toks": ["What", "are", "the", "names", "of", "technicians", "and", "the", "machine", "series", "that", "they", "repair", "?"], "guid": 9134}}
{"text": "city: City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking; farm: Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats; farm_competition: Competition_ID, Year, Theme, Host_city_ID, Hosts; competition_record: Competition_ID, Farm_ID, Rank | Give the years and official names of the cities of each competition.", "sql": "SELECT T2.Year , T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID", "example": {"db_id": "farm", "query": "SELECT T2.Year ,  T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID", "query_toks": ["SELECT", "T2.Year", ",", "T1.Official_Name", "FROM", "city", "AS", "T1", "JOIN", "farm_competition", "AS", "T2", "ON", "T1.City_ID", "=", "T2.Host_city_ID"], "query_toks_no_value": ["select", "t2", ".", "year", ",", "t1", ".", "official_name", "from", "city", "as", "t1", "join", "farm_competition", "as", "t2", "on", "t1", ".", "city_id", "=", "t2", ".", "host_city_id"], "question": "Give the years and official names of the cities of each competition.", "question_toks": ["Give", "the", "years", "and", "official", "names", "of", "the", "cities", "of", "each", "competition", "."], "guid": 9135}}
{"text": "people: People_ID, District, Name, Party, Age; debate: Debate_ID, Date, Venue, Num_of_Audience; debate_people: Debate_ID, Affirmative, Negative, If_Affirmative_Win | Show the names of people, and dates and venues of debates they are on the negative side, ordered in ascending alphabetical order of name.", "sql": "SELECT T3.Name , T2.Date , T2.Venue FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID = T2.Debate_ID JOIN people AS T3 ON T1.Negative = T3.People_ID ORDER BY T3.Name ASC", "example": {"db_id": "debate", "query": "SELECT T3.Name ,  T2.Date ,  T2.Venue FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID  =  T2.Debate_ID JOIN people AS T3 ON T1.Negative  =  T3.People_ID ORDER BY T3.Name ASC", "query_toks": ["SELECT", "T3.Name", ",", "T2.Date", ",", "T2.Venue", "FROM", "debate_people", "AS", "T1", "JOIN", "debate", "AS", "T2", "ON", "T1.Debate_ID", "=", "T2.Debate_ID", "JOIN", "people", "AS", "T3", "ON", "T1.Negative", "=", "T3.People_ID", "ORDER", "BY", "T3.Name", "ASC"], "query_toks_no_value": ["select", "t3", ".", "name", ",", "t2", ".", "date", ",", "t2", ".", "venue", "from", "debate_people", "as", "t1", "join", "debate", "as", "t2", "on", "t1", ".", "debate_id", "=", "t2", ".", "debate_id", "join", "people", "as", "t3", "on", "t1", ".", "negative", "=", "t3", ".", "people_id", "order", "by", "t3", ".", "name", "asc"], "question": "Show the names of people, and dates and venues of debates they are on the negative side, ordered in ascending alphabetical order of name.", "question_toks": ["Show", "the", "names", "of", "people", ",", "and", "dates", "and", "venues", "of", "debates", "they", "are", "on", "the", "negative", "side", ",", "ordered", "in", "ascending", "alphabetical", "order", "of", "name", "."], "guid": 9136}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | List the grape, winery and year of the wines whose price is bigger than 100 ordered by year.", "sql": "SELECT Grape , Winery , YEAR FROM WINE WHERE Price > 100 ORDER BY YEAR", "example": {"db_id": "wine_1", "query": "SELECT Grape ,  Winery ,  YEAR FROM WINE WHERE Price  >   100 ORDER BY YEAR", "query_toks": ["SELECT", "Grape", ",", "Winery", ",", "YEAR", "FROM", "WINE", "WHERE", "Price", ">", "100", "ORDER", "BY", "YEAR"], "query_toks_no_value": ["select", "grape", ",", "winery", ",", "year", "from", "wine", "where", "price", ">", "value", "order", "by", "year"], "question": "List the grape, winery and year of the wines whose price is bigger than 100 ordered by year.", "question_toks": ["List", "the", "grape", ",", "winery", "and", "year", "of", "the", "wines", "whose", "price", "is", "bigger", "than", "100", "ordered", "by", "year", "."], "guid": 9137}}
{"text": "stadium: id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage; game: stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition; injury_accident: game_id, id, Player, Injury, Number_of_matches, Source | How many distinct kinds of injuries happened after season 2010?", "sql": "SELECT COUNT(DISTINCT injury) FROM injury_accident AS T1 JOIN game AS T2 ON T1.game_id = T2.id WHERE T2.season > 2010", "example": {"db_id": "game_injury", "query": "SELECT count(DISTINCT T1.injury) FROM injury_accident AS T1 JOIN game AS T2 ON T1.game_id  =  T2.id WHERE T2.season  >  2010", "query_toks": ["SELECT", "count", "(", "DISTINCT", "T1.injury", ")", "FROM", "injury_accident", "AS", "T1", "JOIN", "game", "AS", "T2", "ON", "T1.game_id", "=", "T2.id", "WHERE", "T2.season", ">", "2010"], "query_toks_no_value": ["select", "count", "(", "distinct", "t1", ".", "injury", ")", "from", "injury_accident", "as", "t1", "join", "game", "as", "t2", "on", "t1", ".", "game_id", "=", "t2", ".", "id", "where", "t2", ".", "season", ">", "value"], "question": "How many distinct kinds of injuries happened after season 2010?", "question_toks": ["How", "many", "distinct", "kinds", "of", "injuries", "happened", "after", "season", "2010", "?"], "guid": 9138}}
{"text": "battle: id, name, date, bulgarian_commander, latin_commander, result; ship: lost_in_battle, id, name, tonnage, ship_type, location, disposition_of_ship; death: caused_by_ship_id, id, note, killed, injured | What is the ship id and name that caused most total injuries?", "sql": "SELECT T2.id ,  T2.name FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "battle_death", "query": "SELECT T2.id ,  T2.name FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T2.id", ",", "T2.name", "FROM", "death", "AS", "T1", "JOIN", "ship", "AS", "t2", "ON", "T1.caused_by_ship_id", "=", "T2.id", "GROUP", "BY", "T2.id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "id", ",", "t2", ".", "name", "from", "death", "as", "t1", "join", "ship", "as", "t2", "on", "t1", ".", "caused_by_ship_id", "=", "t2", ".", "id", "group", "by", "t2", ".", "id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the ship id and name that caused most total injuries?", "question_toks": ["What", "is", "the", "ship", "id", "and", "name", "that", "caused", "most", "total", "injuries", "?"], "guid": 9139}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | List the names of all distinct wines that are made of red color grape.", "sql": "SELECT DISTINCT T2.Name FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape = T2.Grape WHERE T1.Color = \"Red\"", "example": {"db_id": "wine_1", "query": "SELECT DISTINCT T2.Name FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  \"Red\"", "query_toks": ["SELECT", "DISTINCT", "T2.Name", "FROM", "GRAPES", "AS", "T1", "JOIN", "WINE", "AS", "T2", "ON", "T1.Grape", "=", "T2.Grape", "WHERE", "T1.Color", "=", "``", "Red", "''"], "query_toks_no_value": ["select", "distinct", "t2", ".", "name", "from", "grapes", "as", "t1", "join", "wine", "as", "t2", "on", "t1", ".", "grape", "=", "t2", ".", "grape", "where", "t1", ".", "color", "=", "value"], "question": "List the names of all distinct wines that are made of red color grape.", "question_toks": ["List", "the", "names", "of", "all", "distinct", "wines", "that", "are", "made", "of", "red", "color", "grape", "."], "guid": 9140}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | Find the average price of wines that are not produced from Sonoma county.", "sql": "SELECT AVG(price) FROM wine WHERE Appelation NOT IN (SELECT T1.Appelation FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation WHERE T1.County = 'Sonoma')", "example": {"db_id": "wine_1", "query": "SELECT avg(price) FROM wine WHERE Appelation NOT IN (SELECT T1.Appelation FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  'Sonoma')", "query_toks": ["SELECT", "avg", "(", "price", ")", "FROM", "wine", "WHERE", "Appelation", "NOT", "IN", "(", "SELECT", "T1.Appelation", "FROM", "APPELLATIONS", "AS", "T1", "JOIN", "WINE", "AS", "T2", "ON", "T1.Appelation", "=", "T2.Appelation", "WHERE", "T1.County", "=", "'Sonoma", "'", ")"], "query_toks_no_value": ["select", "avg", "(", "price", ")", "from", "wine", "where", "appelation", "not", "in", "(", "select", "t1", ".", "appelation", "from", "appellations", "as", "t1", "join", "wine", "as", "t2", "on", "t1", ".", "appelation", "=", "t2", ".", "appelation", "where", "t1", ".", "county", "=", "value", ")"], "question": "Find the average price of wines that are not produced from Sonoma county.", "question_toks": ["Find", "the", "average", "price", "of", "wines", "that", "are", "not", "produced", "from", "Sonoma", "county", "."], "guid": 9141}}
{"text": "perpetrator: Perpetrator_ID, People_ID, Date, Year, Location, Country, Killed, Injured; people: People_ID, Name, Height, Weight, Home_Town | What is the total kills of the perpetrators with height more than 1.84.", "sql": "SELECT SUM(T2.Killed) FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Height > 1.84", "example": {"db_id": "perpetrator", "query": "SELECT sum(T2.Killed) FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  1.84", "query_toks": ["SELECT", "sum", "(", "T2.Killed", ")", "FROM", "people", "AS", "T1", "JOIN", "perpetrator", "AS", "T2", "ON", "T1.People_ID", "=", "T2.People_ID", "WHERE", "T1.Height", ">", "1.84"], "query_toks_no_value": ["select", "sum", "(", "t2", ".", "killed", ")", "from", "people", "as", "t1", "join", "perpetrator", "as", "t2", "on", "t1", ".", "people_id", "=", "t2", ".", "people_id", "where", "t1", ".", "height", ">", "value"], "question": "What is the total kills of the perpetrators with height more than 1.84.", "question_toks": ["What", "is", "the", "total", "kills", "of", "the", "perpetrators", "with", "height", "more", "than", "1.84", "."], "guid": 9142}}
{"text": "perpetrator: Perpetrator_ID, People_ID, Date, Year, Location, Country, Killed, Injured; people: People_ID, Name, Height, Weight, Home_Town | What are the countries that have at least two perpetrators?", "sql": "SELECT Country, COUNT(*) FROM perpetrator GROUP BY Country HAVING COUNT(*) >= 2", "example": {"db_id": "perpetrator", "query": "SELECT Country ,  COUNT(*) FROM perpetrator GROUP BY Country HAVING COUNT(*)  >=  2", "query_toks": ["SELECT", "Country", ",", "COUNT", "(", "*", ")", "FROM", "perpetrator", "GROUP", "BY", "Country", "HAVING", "COUNT", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "country", ",", "count", "(", "*", ")", "from", "perpetrator", "group", "by", "country", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "What are the countries that have at least two perpetrators?", "question_toks": ["What", "are", "the", "countries", "that", "have", "at", "least", "two", "perpetrators", "?"], "guid": 9143}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | What are the areas and counties for all appelations?", "sql": "SELECT Area, County FROM Appellations", "example": {"db_id": "wine_1", "query": "SELECT Area ,  County FROM APPELLATIONS", "query_toks": ["SELECT", "Area", ",", "County", "FROM", "APPELLATIONS"], "query_toks_no_value": ["select", "area", ",", "county", "from", "appellations"], "question": "What are the areas and counties for all appelations?", "question_toks": ["What", "are", "the", "areas", "and", "counties", "for", "all", "appelations", "?"], "guid": 9144}}
{"text": "perpetrator: Perpetrator_ID, People_ID, Date, Year, Location, Country, Killed, Injured; people: People_ID, Name, Height, Weight, Home_Town | How many perpetrators are there?", "sql": "SELECT COUNT(*) FROM perpetrator", "example": {"db_id": "perpetrator", "query": "SELECT count(*) FROM perpetrator", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "perpetrator"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "perpetrator"], "question": "How many perpetrators are there?", "question_toks": ["How", "many", "perpetrators", "are", "there", "?"], "guid": 9145}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | What are the maximum price and score of wines in each year?", "sql": "SELECT max(Price) , max(Score) , YEAR FROM wine GROUP BY YEAR", "example": {"db_id": "wine_1", "query": "SELECT max(Price) ,  max(Score) ,  YEAR FROM WINE GROUP BY YEAR", "query_toks": ["SELECT", "max", "(", "Price", ")", ",", "max", "(", "Score", ")", ",", "YEAR", "FROM", "WINE", "GROUP", "BY", "YEAR"], "query_toks_no_value": ["select", "max", "(", "price", ")", ",", "max", "(", "score", ")", ",", "year", "from", "wine", "group", "by", "year"], "question": "What are the maximum price and score of wines in each year?", "question_toks": ["What", "are", "the", "maximum", "price", "and", "score", "of", "wines", "in", "each", "year", "?"], "guid": 9146}}
{"text": "county_public_safety: County_ID, Name, Population, Police_officers, Residents_per_officer, Case_burden, Crime_rate, Police_force, Location; city: City_ID, County_ID, Name, White, Black, Amerindian, Asian, Multiracial, Hispanic | What are the names of cities that are in the county with the most police officers?", "sql": "SELECT name FROM city WHERE county_ID = (SELECT county_ID FROM county_public_safety ORDER BY Police_officers DESC LIMIT 1)", "example": {"db_id": "county_public_safety", "query": "SELECT name FROM city WHERE county_ID  =  (SELECT county_ID FROM county_public_safety ORDER BY Police_officers DESC LIMIT 1)", "query_toks": ["SELECT", "name", "FROM", "city", "WHERE", "county_ID", "=", "(", "SELECT", "county_ID", "FROM", "county_public_safety", "ORDER", "BY", "Police_officers", "DESC", "LIMIT", "1", ")"], "query_toks_no_value": ["select", "name", "from", "city", "where", "county_id", "=", "(", "select", "county_id", "from", "county_public_safety", "order", "by", "police_officers", "desc", "limit", "value", ")"], "question": "What are the names of cities that are in the county with the most police officers?", "question_toks": ["What", "are", "the", "names", "of", "cities", "that", "are", "in", "the", "county", "with", "the", "most", "police", "officers", "?"], "guid": 9147}}
{"text": "city: City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking; farm: Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats; farm_competition: Competition_ID, Year, Theme, Host_city_ID, Hosts; competition_record: Competition_ID, Farm_ID, Rank | Show the census ranking of cities whose status are not \"Village\".", "sql": "SELECT Census_Ranking FROM city WHERE Status != \"Village\"", "example": {"db_id": "farm", "query": "SELECT Census_Ranking FROM city WHERE Status !=  \"Village\"", "query_toks": ["SELECT", "Census_Ranking", "FROM", "city", "WHERE", "Status", "!", "=", "``", "Village", "''"], "query_toks_no_value": ["select", "census_ranking", "from", "city", "where", "status", "!", "=", "value"], "question": "Show the census ranking of cities whose status are not \"Village\".", "question_toks": ["Show", "the", "census", "ranking", "of", "cities", "whose", "status", "are", "not", "``", "Village", "''", "."], "guid": 9148}}
{"text": "Ref_Address_Types: address_type_code, address_type_description; Ref_Detention_Type: detention_type_code, detention_type_description; Ref_Incident_Type: incident_type_code, incident_type_description; Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Students: student_id, address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, date_first_rental, date_left_university, other_student_details; Teachers: teacher_id, address_id, first_name, middle_name, last_name, gender, cell_mobile_number, email_address, other_details; Assessment_Notes: notes_id, student_id, teacher_id, date_of_notes, text_of_notes, other_details; Behavior_Incident: incident_id, incident_type_code, student_id, date_incident_start, date_incident_end, incident_summary, recommendations, other_details; Detention: detention_id, detention_type_code, teacher_id, datetime_detention_start, datetime_detention_end, detention_summary, other_details; Student_Addresses: student_id, address_id, date_address_from, date_address_to, monthly_rental, other_details | What are the id and zip code of the address with the highest monthly rental?", "sql": "SELECT T2.address_id, T1.zip_postcode FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id = T2.address_id ORDER BY monthly_rental DESC LIMIT 1", "example": {"db_id": "behavior_monitoring", "query": "SELECT T2.address_id ,  T1.zip_postcode FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id  =  T2.address_id ORDER BY monthly_rental DESC LIMIT 1", "query_toks": ["SELECT", "T2.address_id", ",", "T1.zip_postcode", "FROM", "Addresses", "AS", "T1", "JOIN", "Student_Addresses", "AS", "T2", "ON", "T1.address_id", "=", "T2.address_id", "ORDER", "BY", "monthly_rental", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "address_id", ",", "t1", ".", "zip_postcode", "from", "addresses", "as", "t1", "join", "student_addresses", "as", "t2", "on", "t1", ".", "address_id", "=", "t2", ".", "address_id", "order", "by", "monthly_rental", "desc", "limit", "value"], "question": "What are the id and zip code of the address with the highest monthly rental?", "question_toks": ["What", "are", "the", "id", "and", "zip", "code", "of", "the", "address", "with", "the", "highest", "monthly", "rental", "?"], "guid": 9149}}
{"text": "city: City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking; farm: Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats; farm_competition: Competition_ID, Year, Theme, Host_city_ID, Hosts; competition_record: Competition_ID, Farm_ID, Rank | Return the maximum and minimum number of cows across all farms.", "sql": "SELECT max(Cows), min(Cows) FROM farm", "example": {"db_id": "farm", "query": "SELECT max(Cows) ,  min(Cows) FROM farm", "query_toks": ["SELECT", "max", "(", "Cows", ")", ",", "min", "(", "Cows", ")", "FROM", "farm"], "query_toks_no_value": ["select", "max", "(", "cows", ")", ",", "min", "(", "cows", ")", "from", "farm"], "question": "Return the maximum and minimum number of cows across all farms.", "question_toks": ["Return", "the", "maximum", "and", "minimum", "number", "of", "cows", "across", "all", "farms", "."], "guid": 9150}}
{"text": "city: City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking; farm: Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats; farm_competition: Competition_ID, Year, Theme, Host_city_ID, Hosts; competition_record: Competition_ID, Farm_ID, Rank | Please show the different statuses of cities and the average population of cities with each status.", "sql": "SELECT Status, AVG(Population) FROM city GROUP BY Status", "example": {"db_id": "farm", "query": "SELECT Status ,  avg(Population) FROM city GROUP BY Status", "query_toks": ["SELECT", "Status", ",", "avg", "(", "Population", ")", "FROM", "city", "GROUP", "BY", "Status"], "query_toks_no_value": ["select", "status", ",", "avg", "(", "population", ")", "from", "city", "group", "by", "status"], "question": "Please show the different statuses of cities and the average population of cities with each status.", "question_toks": ["Please", "show", "the", "different", "statuses", "of", "cities", "and", "the", "average", "population", "of", "cities", "with", "each", "status", "."], "guid": 9151}}
{"text": "people: People_ID, District, Name, Party, Age; debate: Debate_ID, Date, Venue, Num_of_Audience; debate_people: Debate_ID, Affirmative, Negative, If_Affirmative_Win | Show the distinct venues of debates", "sql": "SELECT DISTINCT Venue FROM debate", "example": {"db_id": "debate", "query": "SELECT DISTINCT Venue FROM debate", "query_toks": ["SELECT", "DISTINCT", "Venue", "FROM", "debate"], "query_toks_no_value": ["select", "distinct", "venue", "from", "debate"], "question": "Show the distinct venues of debates", "question_toks": ["Show", "the", "distinct", "venues", "of", "debates"], "guid": 9152}}
{"text": "county_public_safety: County_ID, Name, Population, Police_officers, Residents_per_officer, Case_burden, Crime_rate, Police_force, Location; city: City_ID, County_ID, Name, White, Black, Amerindian, Asian, Multiracial, Hispanic | How many counties are there?", "sql": "SELECT COUNT(*) FROM county_public_safety", "example": {"db_id": "county_public_safety", "query": "SELECT count(*) FROM county_public_safety", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "county_public_safety"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "county_public_safety"], "question": "How many counties are there?", "question_toks": ["How", "many", "counties", "are", "there", "?"], "guid": 9153}}
{"text": "Third_Party_Companies: company_id, company_type, company_name, company_address, other_company_details; Maintenance_Contracts: maintenance_contract_id, maintenance_contract_company_id, contract_start_date, contract_end_date, other_contract_details; Parts: part_id, part_name, chargeable_yn, chargeable_amount, other_part_details; Skills: skill_id, skill_code, skill_description; Staff: staff_id, staff_name, gender, other_staff_details; Assets: asset_id, maintenance_contract_id, supplier_company_id, asset_details, asset_make, asset_model, asset_acquired_date, asset_disposed_date, other_asset_details; Asset_Parts: asset_id, part_id; Maintenance_Engineers: engineer_id, company_id, first_name, last_name, other_details; Engineer_Skills: engineer_id, skill_id; Fault_Log: fault_log_entry_id, asset_id, recorded_by_staff_id, fault_log_entry_datetime, fault_description, other_fault_details | List the all the assets make, model, details by the disposed date ascendingly.", "sql": "SELECT asset_make , asset_model , asset_details FROM Assets ORDER BY asset_disposed_date ASC", "example": {"db_id": "assets_maintenance", "query": "SELECT asset_make ,  asset_model ,  asset_details FROM Assets ORDER BY asset_disposed_date ASC", "query_toks": ["SELECT", "asset_make", ",", "asset_model", ",", "asset_details", "FROM", "Assets", "ORDER", "BY", "asset_disposed_date", "ASC"], "query_toks_no_value": ["select", "asset_make", ",", "asset_model", ",", "asset_details", "from", "assets", "order", "by", "asset_disposed_date", "asc"], "question": "List the all the assets make, model, details by the disposed date ascendingly.", "question_toks": ["List", "the", "all", "the", "assets", "make", ",", "model", ",", "details", "by", "the", "disposed", "date", "ascendingly", "."], "guid": 9154}}
{"text": "Third_Party_Companies: company_id, company_type, company_name, company_address, other_company_details; Maintenance_Contracts: maintenance_contract_id, maintenance_contract_company_id, contract_start_date, contract_end_date, other_contract_details; Parts: part_id, part_name, chargeable_yn, chargeable_amount, other_part_details; Skills: skill_id, skill_code, skill_description; Staff: staff_id, staff_name, gender, other_staff_details; Assets: asset_id, maintenance_contract_id, supplier_company_id, asset_details, asset_make, asset_model, asset_acquired_date, asset_disposed_date, other_asset_details; Asset_Parts: asset_id, part_id; Maintenance_Engineers: engineer_id, company_id, first_name, last_name, other_details; Engineer_Skills: engineer_id, skill_id; Fault_Log: fault_log_entry_id, asset_id, recorded_by_staff_id, fault_log_entry_datetime, fault_description, other_fault_details | How many fault status codes are recorded in the fault log parts table?", "sql": "SELECT DISTINCT fault_status FROM Fault_Log_Parts", "example": {"db_id": "assets_maintenance", "query": "SELECT DISTINCT fault_status FROM Fault_Log_Parts", "query_toks": ["SELECT", "DISTINCT", "fault_status", "FROM", "Fault_Log_Parts"], "query_toks_no_value": ["select", "distinct", "fault_status", "from", "fault_log_parts"], "question": "How many fault status codes are recorded in the fault log parts table?", "question_toks": ["How", "many", "fault", "status", "codes", "are", "recorded", "in", "the", "fault", "log", "parts", "table", "?"], "guid": 9155}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | What are the grapes, appelations, and wines with scores above 93, sorted by Name?", "sql": "SELECT Grape ,  Appelation ,  Name FROM WINE WHERE Score  >  93 ORDER BY Name", "example": {"db_id": "wine_1", "query": "SELECT Grape ,  Appelation ,  Name FROM WINE WHERE Score  >  93 ORDER BY Name", "query_toks": ["SELECT", "Grape", ",", "Appelation", ",", "Name", "FROM", "WINE", "WHERE", "Score", ">", "93", "ORDER", "BY", "Name"], "query_toks_no_value": ["select", "grape", ",", "appelation", ",", "name", "from", "wine", "where", "score", ">", "value", "order", "by", "name"], "question": "What are the grapes, appelations, and wines with scores above 93, sorted by Name?", "question_toks": ["What", "are", "the", "grapes", ",", "appelations", ",", "and", "wines", "with", "scores", "above", "93", ",", "sorted", "by", "Name", "?"], "guid": 9156}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | What is the name of the highest rated wine?", "sql": "SELECT Name FROM WINE ORDER BY Score LIMIT 1", "example": {"db_id": "wine_1", "query": "SELECT Name FROM WINE ORDER BY Score LIMIT 1", "query_toks": ["SELECT", "Name", "FROM", "WINE", "ORDER", "BY", "Score", "LIMIT", "1"], "query_toks_no_value": ["select", "name", "from", "wine", "order", "by", "score", "limit", "value"], "question": "What is the name of the highest rated wine?", "question_toks": ["What", "is", "the", "name", "of", "the", "highest", "rated", "wine", "?"], "guid": 9157}}
{"text": "Third_Party_Companies: company_id, company_type, company_name, company_address, other_company_details; Maintenance_Contracts: maintenance_contract_id, maintenance_contract_company_id, contract_start_date, contract_end_date, other_contract_details; Parts: part_id, part_name, chargeable_yn, chargeable_amount, other_part_details; Skills: skill_id, skill_code, skill_description; Staff: staff_id, staff_name, gender, other_staff_details; Assets: asset_id, maintenance_contract_id, supplier_company_id, asset_details, asset_make, asset_model, asset_acquired_date, asset_disposed_date, other_asset_details; Asset_Parts: asset_id, part_id; Maintenance_Engineers: engineer_id, company_id, first_name, last_name, other_details; Engineer_Skills: engineer_id, skill_id; Fault_Log: fault_log_entry_id, asset_id, recorded_by_staff_id, fault_log_entry_datetime, fault_description, other_fault_details | How many assets can each parts be used in? List the part name and the number.", "sql": "SELECT T1.part_name , COUNT(*) FROM Parts AS T1 JOIN Asset_Parts AS T2 ON T1.part_id = T2.part_id GROUP BY T1.part_name", "example": {"db_id": "assets_maintenance", "query": "SELECT T1.part_name ,  count(*) FROM Parts AS T1 JOIN Asset_Parts AS T2 ON T1.part_id  =  T2.part_id GROUP BY T1.part_name", "query_toks": ["SELECT", "T1.part_name", ",", "count", "(", "*", ")", "FROM", "Parts", "AS", "T1", "JOIN", "Asset_Parts", "AS", "T2", "ON", "T1.part_id", "=", "T2.part_id", "GROUP", "BY", "T1.part_name"], "query_toks_no_value": ["select", "t1", ".", "part_name", ",", "count", "(", "*", ")", "from", "parts", "as", "t1", "join", "asset_parts", "as", "t2", "on", "t1", ".", "part_id", "=", "t2", ".", "part_id", "group", "by", "t1", ".", "part_name"], "question": "How many assets can each parts be used in? List the part name and the number.", "question_toks": ["How", "many", "assets", "can", "each", "parts", "be", "used", "in", "?", "List", "the", "part", "name", "and", "the", "number", "."], "guid": 9158}}
{"text": "Third_Party_Companies: company_id, company_type, company_name, company_address, other_company_details; Maintenance_Contracts: maintenance_contract_id, maintenance_contract_company_id, contract_start_date, contract_end_date, other_contract_details; Parts: part_id, part_name, chargeable_yn, chargeable_amount, other_part_details; Skills: skill_id, skill_code, skill_description; Staff: staff_id, staff_name, gender, other_staff_details; Assets: asset_id, maintenance_contract_id, supplier_company_id, asset_details, asset_make, asset_model, asset_acquired_date, asset_disposed_date, other_asset_details; Asset_Parts: asset_id, part_id; Maintenance_Engineers: engineer_id, company_id, first_name, last_name, other_details; Engineer_Skills: engineer_id, skill_id; Fault_Log: fault_log_entry_id, asset_id, recorded_by_staff_id, fault_log_entry_datetime, fault_description, other_fault_details | How many engineer visits are required at most for a single fault log? List the number and the log entry id.", "sql": "SELECT COUNT(*), T1.fault_log_entry_id FROM Fault_Log AS T1 JOIN Engineer_Visits AS T2 ON T1.fault_log_entry_id = T2.fault_log_entry_id GROUP BY T1.fault_log_entry_id ORDER BY COUNT(*) DESC LIMIT 1", "example": {"db_id": "assets_maintenance", "query": "SELECT count(*) ,  T1.fault_log_entry_id FROM Fault_Log AS T1 JOIN Engineer_Visits AS T2 ON T1.fault_log_entry_id  =  T2.fault_log_entry_id GROUP BY T1.fault_log_entry_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "T1.fault_log_entry_id", "FROM", "Fault_Log", "AS", "T1", "JOIN", "Engineer_Visits", "AS", "T2", "ON", "T1.fault_log_entry_id", "=", "T2.fault_log_entry_id", "GROUP", "BY", "T1.fault_log_entry_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "t1", ".", "fault_log_entry_id", "from", "fault_log", "as", "t1", "join", "engineer_visits", "as", "t2", "on", "t1", ".", "fault_log_entry_id", "=", "t2", ".", "fault_log_entry_id", "group", "by", "t1", ".", "fault_log_entry_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "How many engineer visits are required at most for a single fault log? List the number and the log entry id.", "question_toks": ["How", "many", "engineer", "visits", "are", "required", "at", "most", "for", "a", "single", "fault", "log", "?", "List", "the", "number", "and", "the", "log", "entry", "id", "."], "guid": 9159}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | What are the names of wines with scores higher than 90?", "sql": "SELECT Name FROM Wine WHERE Score > 90", "example": {"db_id": "wine_1", "query": "SELECT Name FROM WINE WHERE score  >  90", "query_toks": ["SELECT", "Name", "FROM", "WINE", "WHERE", "score", ">", "90"], "query_toks_no_value": ["select", "name", "from", "wine", "where", "score", ">", "value"], "question": "What are the names of wines with scores higher than 90?", "question_toks": ["What", "are", "the", "names", "of", "wines", "with", "scores", "higher", "than", "90", "?"], "guid": 9160}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | Find the distinct names of wines produced before the year of 2000 or after the year of 2010.", "sql": "SELECT DISTINCT Name FROM WINE WHERE YEAR < 2000 OR YEAR > 2010", "example": {"db_id": "wine_1", "query": "SELECT DISTINCT Name FROM WINE WHERE YEAR  <  2000 OR YEAR  >  2010", "query_toks": ["SELECT", "DISTINCT", "Name", "FROM", "WINE", "WHERE", "YEAR", "<", "2000", "OR", "YEAR", ">", "2010"], "query_toks_no_value": ["select", "distinct", "name", "from", "wine", "where", "year", "<", "value", "or", "year", ">", "value"], "question": "Find the distinct names of wines produced before the year of 2000 or after the year of 2010.", "question_toks": ["Find", "the", "distinct", "names", "of", "wines", "produced", "before", "the", "year", "of", "2000", "or", "after", "the", "year", "of", "2010", "."], "guid": 9161}}
{"text": "Ref_Address_Types: address_type_code, address_type_description; Ref_Detention_Type: detention_type_code, detention_type_description; Ref_Incident_Type: incident_type_code, incident_type_description; Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Students: student_id, address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, date_first_rental, date_left_university, other_student_details; Teachers: teacher_id, address_id, first_name, middle_name, last_name, gender, cell_mobile_number, email_address, other_details; Assessment_Notes: notes_id, student_id, teacher_id, date_of_notes, text_of_notes, other_details; Behavior_Incident: incident_id, incident_type_code, student_id, date_incident_start, date_incident_end, incident_summary, recommendations, other_details; Detention: detention_id, detention_type_code, teacher_id, datetime_detention_start, datetime_detention_end, detention_summary, other_details; Student_Addresses: student_id, address_id, date_address_from, date_address_to, monthly_rental, other_details | What are the first names and last names of students with address in Wisconsin state?", "sql": "SELECT T2.first_name, T2.last_name FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.address_id WHERE T1.state_province_county = \"Wisconsin\"", "example": {"db_id": "behavior_monitoring", "query": "SELECT T2.first_name ,  T2.last_name FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.address_id WHERE T1.state_province_county  =  \"Wisconsin\"", "query_toks": ["SELECT", "T2.first_name", ",", "T2.last_name", "FROM", "Addresses", "AS", "T1", "JOIN", "Students", "AS", "T2", "ON", "T1.address_id", "=", "T2.address_id", "WHERE", "T1.state_province_county", "=", "``", "Wisconsin", "''"], "query_toks_no_value": ["select", "t2", ".", "first_name", ",", "t2", ".", "last_name", "from", "addresses", "as", "t1", "join", "students", "as", "t2", "on", "t1", ".", "address_id", "=", "t2", ".", "address_id", "where", "t1", ".", "state_province_county", "=", "value"], "question": "What are the first names and last names of students with address in Wisconsin state?", "question_toks": ["What", "are", "the", "first", "names", "and", "last", "names", "of", "students", "with", "address", "in", "Wisconsin", "state", "?"], "guid": 9162}}
{"text": "battle: id, name, date, bulgarian_commander, latin_commander, result; ship: lost_in_battle, id, name, tonnage, ship_type, location, disposition_of_ship; death: caused_by_ship_id, id, note, killed, injured | What are the death and injury situations caused by the ship with tonnage 't'?", "sql": "SELECT T1.killed, T1.injured FROM death AS T1 JOIN ship AS T2 ON T1.caused_by_ship_id = T2.id WHERE T2.tonnage = 't'", "example": {"db_id": "battle_death", "query": "SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'", "query_toks": ["SELECT", "T1.killed", ",", "T1.injured", "FROM", "death", "AS", "T1", "JOIN", "ship", "AS", "t2", "ON", "T1.caused_by_ship_id", "=", "T2.id", "WHERE", "T2.tonnage", "=", "'t", "'"], "query_toks_no_value": ["select", "t1", ".", "killed", ",", "t1", ".", "injured", "from", "death", "as", "t1", "join", "ship", "as", "t2", "on", "t1", ".", "caused_by_ship_id", "=", "t2", ".", "id", "where", "t2", ".", "tonnage", "=", "value"], "question": "What are the death and injury situations caused by the ship with tonnage 't'?", "question_toks": ["What", "are", "the", "death", "and", "injury", "situations", "caused", "by", "the", "ship", "with", "tonnage", "'t", "'", "?"], "guid": 9163}}
{"text": "Ref_Address_Types: address_type_code, address_type_description; Ref_Detention_Type: detention_type_code, detention_type_description; Ref_Incident_Type: incident_type_code, incident_type_description; Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Students: student_id, address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, date_first_rental, date_left_university, other_student_details; Teachers: teacher_id, address_id, first_name, middle_name, last_name, gender, cell_mobile_number, email_address, other_details; Assessment_Notes: notes_id, student_id, teacher_id, date_of_notes, text_of_notes, other_details; Behavior_Incident: incident_id, incident_type_code, student_id, date_incident_start, date_incident_end, incident_summary, recommendations, other_details; Detention: detention_id, detention_type_code, teacher_id, datetime_detention_start, datetime_detention_end, detention_summary, other_details; Student_Addresses: student_id, address_id, date_address_from, date_address_to, monthly_rental, other_details | What are the monthly rentals of student addresses in Texas state?", "sql": "SELECT T2.monthly_rental FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id = T2.address_id WHERE T1.state_province_county = \"Texas\"", "example": {"db_id": "behavior_monitoring", "query": "SELECT T2.monthly_rental FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id  =  T2.address_id WHERE T1.state_province_county  =  \"Texas\"", "query_toks": ["SELECT", "T2.monthly_rental", "FROM", "Addresses", "AS", "T1", "JOIN", "Student_Addresses", "AS", "T2", "ON", "T1.address_id", "=", "T2.address_id", "WHERE", "T1.state_province_county", "=", "``", "Texas", "''"], "query_toks_no_value": ["select", "t2", ".", "monthly_rental", "from", "addresses", "as", "t1", "join", "student_addresses", "as", "t2", "on", "t1", ".", "address_id", "=", "t2", ".", "address_id", "where", "t1", ".", "state_province_county", "=", "value"], "question": "What are the monthly rentals of student addresses in Texas state?", "question_toks": ["What", "are", "the", "monthly", "rentals", "of", "student", "addresses", "in", "Texas", "state", "?"], "guid": 9164}}
{"text": "battle: id, name, date, bulgarian_commander, latin_commander, result; ship: lost_in_battle, id, name, tonnage, ship_type, location, disposition_of_ship; death: caused_by_ship_id, id, note, killed, injured | What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?", "sql": "SELECT name FROM battle WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I'", "example": {"db_id": "battle_death", "query": "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'", "query_toks": ["SELECT", "name", "FROM", "battle", "WHERE", "bulgarian_commander", "=", "'Kaloyan", "'", "AND", "latin_commander", "=", "'Baldwin", "I", "'"], "query_toks_no_value": ["select", "name", "from", "battle", "where", "bulgarian_commander", "=", "value", "and", "latin_commander", "=", "value"], "question": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?", "question_toks": ["What", "are", "the", "distinct", "battle", "names", "which", "are", "between", "bulgarian", "commander", "'Kaloyan", "'", "and", "latin", "commander", "'Baldwin", "I", "'", "?"], "guid": 9165}}
{"text": "perpetrator: Perpetrator_ID, People_ID, Date, Year, Location, Country, Killed, Injured; people: People_ID, Name, Height, Weight, Home_Town | What are the names of perpetrators whose country is not \"China\"?", "sql": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Country != \"China\"", "example": {"db_id": "perpetrator", "query": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Country != \"China\"", "query_toks": ["SELECT", "T1.Name", "FROM", "people", "AS", "T1", "JOIN", "perpetrator", "AS", "T2", "ON", "T1.People_ID", "=", "T2.People_ID", "WHERE", "T2.Country", "!", "=", "``", "China", "''"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "people", "as", "t1", "join", "perpetrator", "as", "t2", "on", "t1", ".", "people_id", "=", "t2", ".", "people_id", "where", "t2", ".", "country", "!", "=", "value"], "question": "What are the names of perpetrators whose country is not \"China\"?", "question_toks": ["What", "are", "the", "names", "of", "perpetrators", "whose", "country", "is", "not", "``", "China", "''", "?"], "guid": 9166}}
{"text": "battle: id, name, date, bulgarian_commander, latin_commander, result; ship: lost_in_battle, id, name, tonnage, ship_type, location, disposition_of_ship; death: caused_by_ship_id, id, note, killed, injured | List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta'", "sql": "SELECT T1.name, T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.name = 'Lettice' INTERSECT SELECT T1.name, T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.name = 'HMS Atalanta'", "example": {"db_id": "battle_death", "query": "SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'Lettice' INTERSECT SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'HMS Atalanta'", "query_toks": ["SELECT", "T1.name", ",", "T1.date", "FROM", "battle", "AS", "T1", "JOIN", "ship", "AS", "T2", "ON", "T1.id", "=", "T2.lost_in_battle", "WHERE", "T2.name", "=", "'Lettice", "'", "INTERSECT", "SELECT", "T1.name", ",", "T1.date", "FROM", "battle", "AS", "T1", "JOIN", "ship", "AS", "T2", "ON", "T1.id", "=", "T2.lost_in_battle", "WHERE", "T2.name", "=", "'HMS", "Atalanta", "'"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "t1", ".", "date", "from", "battle", "as", "t1", "join", "ship", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "lost_in_battle", "where", "t2", ".", "name", "=", "value", "intersect", "select", "t1", ".", "name", ",", "t1", ".", "date", "from", "battle", "as", "t1", "join", "ship", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "lost_in_battle", "where", "t2", ".", "name", "=", "value"], "question": "List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta'", "question_toks": ["List", "the", "name", "and", "date", "the", "battle", "that", "has", "lost", "the", "ship", "named", "'Lettice", "'", "and", "the", "ship", "named", "'HMS", "Atalanta", "'"], "guid": 9167}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | What are the names of wines, sorted in alphabetical order?", "sql": "SELECT DISTINCT Name FROM WINE ORDER BY Name", "example": {"db_id": "wine_1", "query": "SELECT DISTINCT Name FROM WINE ORDER BY Name", "query_toks": ["SELECT", "DISTINCT", "Name", "FROM", "WINE", "ORDER", "BY", "Name"], "query_toks_no_value": ["select", "distinct", "name", "from", "wine", "order", "by", "name"], "question": "What are the names of wines, sorted in alphabetical order?", "question_toks": ["What", "are", "the", "names", "of", "wines", ",", "sorted", "in", "alphabetical", "order", "?"], "guid": 9168}}
{"text": "perpetrator: Perpetrator_ID, People_ID, Date, Year, Location, Country, Killed, Injured; people: People_ID, Name, Height, Weight, Home_Town | List the number of people injured by perpetrators in ascending order.", "sql": "SELECT Injured FROM perpetrator ORDER BY Injured ASC", "example": {"db_id": "perpetrator", "query": "SELECT Injured FROM perpetrator ORDER BY Injured ASC", "query_toks": ["SELECT", "Injured", "FROM", "perpetrator", "ORDER", "BY", "Injured", "ASC"], "query_toks_no_value": ["select", "injured", "from", "perpetrator", "order", "by", "injured", "asc"], "question": "List the number of people injured by perpetrators in ascending order.", "question_toks": ["List", "the", "number", "of", "people", "injured", "by", "perpetrators", "in", "ascending", "order", "."], "guid": 9169}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | Return the prices of wines produced before 2010.", "sql": "SELECT Price FROM WINE WHERE YEAR < 2010", "example": {"db_id": "wine_1", "query": "SELECT Price FROM WINE WHERE YEAR  <  2010", "query_toks": ["SELECT", "Price", "FROM", "WINE", "WHERE", "YEAR", "<", "2010"], "query_toks_no_value": ["select", "price", "from", "wine", "where", "year", "<", "value"], "question": "Return the prices of wines produced before 2010.", "question_toks": ["Return", "the", "prices", "of", "wines", "produced", "before", "2010", "."], "guid": 9170}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | What is the average prices of wines for each each?", "sql": "SELECT avg(Price) , YEAR FROM WINE GROUP BY YEAR", "example": {"db_id": "wine_1", "query": "SELECT avg(Price) ,  YEAR FROM WINE GROUP BY YEAR", "query_toks": ["SELECT", "avg", "(", "Price", ")", ",", "YEAR", "FROM", "WINE", "GROUP", "BY", "YEAR"], "query_toks_no_value": ["select", "avg", "(", "price", ")", ",", "year", "from", "wine", "group", "by", "year"], "question": "What is the average prices of wines for each each?", "question_toks": ["What", "is", "the", "average", "prices", "of", "wines", "for", "each", "each", "?"], "guid": 9171}}
{"text": "perpetrator: Perpetrator_ID, People_ID, Date, Year, Location, Country, Killed, Injured; people: People_ID, Name, Height, Weight, Home_Town | Show the countries that have both perpetrators with injures more than 50 and perpetrators with injures smaller than 20.", "sql": "SELECT Country FROM perpetrator WHERE Injured > 50 INTERSECT SELECT Country FROM perpetrator WHERE Injured < 20", "example": {"db_id": "perpetrator", "query": "SELECT Country FROM perpetrator WHERE Injured  >  50 INTERSECT SELECT Country FROM perpetrator WHERE Injured  <  20", "query_toks": ["SELECT", "Country", "FROM", "perpetrator", "WHERE", "Injured", ">", "50", "INTERSECT", "SELECT", "Country", "FROM", "perpetrator", "WHERE", "Injured", "<", "20"], "query_toks_no_value": ["select", "country", "from", "perpetrator", "where", "injured", ">", "value", "intersect", "select", "country", "from", "perpetrator", "where", "injured", "<", "value"], "question": "Show the countries that have both perpetrators with injures more than 50 and perpetrators with injures smaller than 20.", "question_toks": ["Show", "the", "countries", "that", "have", "both", "perpetrators", "with", "injures", "more", "than", "50", "and", "perpetrators", "with", "injures", "smaller", "than", "20", "."], "guid": 9172}}
{"text": "Ref_Address_Types: address_type_code, address_type_description; Ref_Detention_Type: detention_type_code, detention_type_description; Ref_Incident_Type: incident_type_code, incident_type_description; Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Students: student_id, address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, date_first_rental, date_left_university, other_student_details; Teachers: teacher_id, address_id, first_name, middle_name, last_name, gender, cell_mobile_number, email_address, other_details; Assessment_Notes: notes_id, student_id, teacher_id, date_of_notes, text_of_notes, other_details; Behavior_Incident: incident_id, incident_type_code, student_id, date_incident_start, date_incident_end, incident_summary, recommendations, other_details; Detention: detention_id, detention_type_code, teacher_id, datetime_detention_start, datetime_detention_end, detention_summary, other_details; Student_Addresses: student_id, address_id, date_address_from, date_address_to, monthly_rental, other_details | Find the first names and last names of teachers in alphabetical order of last name.", "sql": "SELECT T2.first_name, T2.last_name FROM teachers AS T2 ORDER BY T2.last_name ASC", "example": {"db_id": "behavior_monitoring", "query": "SELECT first_name ,  last_name FROM Teachers ORDER BY last_name", "query_toks": ["SELECT", "first_name", ",", "last_name", "FROM", "Teachers", "ORDER", "BY", "last_name"], "query_toks_no_value": ["select", "first_name", ",", "last_name", "from", "teachers", "order", "by", "last_name"], "question": "Find the first names and last names of teachers in alphabetical order of last name.", "question_toks": ["Find", "the", "first", "names", "and", "last", "names", "of", "teachers", "in", "alphabetical", "order", "of", "last", "name", "."], "guid": 9173}}
{"text": "stadium: id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage; game: stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition; injury_accident: game_id, id, Player, Injury, Number_of_matches, Source | List the name of the stadium where both the player 'Walter Samuel' and the player 'Thiago Motta' got injured.", "sql": "SELECT T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.id JOIN injury_accident AS T3 ON T1.id = T3.game_id WHERE T3.player = 'Walter Samuel' INTERSECT SELECT T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.id JOIN injury_accident AS T3 ON T1.id = T3.game_id WHERE T3.player = 'Thiago Motta'", "example": {"db_id": "game_injury", "query": "SELECT T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id WHERE T3.player  =  'Walter Samuel' INTERSECT SELECT T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id WHERE T3.player  =  'Thiago Motta'", "query_toks": ["SELECT", "T2.name", "FROM", "game", "AS", "T1", "JOIN", "stadium", "AS", "T2", "ON", "T1.stadium_id", "=", "T2.id", "JOIN", "injury_accident", "AS", "T3", "ON", "T1.id", "=", "T3.game_id", "WHERE", "T3.player", "=", "'Walter", "Samuel", "'", "INTERSECT", "SELECT", "T2.name", "FROM", "game", "AS", "T1", "JOIN", "stadium", "AS", "T2", "ON", "T1.stadium_id", "=", "T2.id", "JOIN", "injury_accident", "AS", "T3", "ON", "T1.id", "=", "T3.game_id", "WHERE", "T3.player", "=", "'Thiago", "Motta", "'"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "game", "as", "t1", "join", "stadium", "as", "t2", "on", "t1", ".", "stadium_id", "=", "t2", ".", "id", "join", "injury_accident", "as", "t3", "on", "t1", ".", "id", "=", "t3", ".", "game_id", "where", "t3", ".", "player", "=", "value", "intersect", "select", "t2", ".", "name", "from", "game", "as", "t1", "join", "stadium", "as", "t2", "on", "t1", ".", "stadium_id", "=", "t2", ".", "id", "join", "injury_accident", "as", "t3", "on", "t1", ".", "id", "=", "t3", ".", "game_id", "where", "t3", ".", "player", "=", "value"], "question": "List the name of the stadium where both the player 'Walter Samuel' and the player 'Thiago Motta' got injured.", "question_toks": ["List", "the", "name", "of", "the", "stadium", "where", "both", "the", "player", "'Walter", "Samuel", "'", "and", "the", "player", "'Thiago", "Motta", "'", "got", "injured", "."], "guid": 9174}}
{"text": "Ref_Address_Types: address_type_code, address_type_description; Ref_Detention_Type: detention_type_code, detention_type_description; Ref_Incident_Type: incident_type_code, incident_type_description; Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Students: student_id, address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, date_first_rental, date_left_university, other_student_details; Teachers: teacher_id, address_id, first_name, middle_name, last_name, gender, cell_mobile_number, email_address, other_details; Assessment_Notes: notes_id, student_id, teacher_id, date_of_notes, text_of_notes, other_details; Behavior_Incident: incident_id, incident_type_code, student_id, date_incident_start, date_incident_end, incident_summary, recommendations, other_details; Detention: detention_id, detention_type_code, teacher_id, datetime_detention_start, datetime_detention_end, detention_summary, other_details; Student_Addresses: student_id, address_id, date_address_from, date_address_to, monthly_rental, other_details | What are the code and description of the least frequent detention type ?", "sql": "SELECT T1.detention_type_code , T2.detention_type_description FROM Detention AS T1 JOIN Ref_Detention_Type AS T2 ON T1.detention_type_code = T2.detention_type_code GROUP BY T1.detention_type_code ORDER BY count(*) ASC LIMIT 1", "example": {"db_id": "behavior_monitoring", "query": "SELECT T1.detention_type_code ,  T2.detention_type_description FROM Detention AS T1 JOIN Ref_Detention_Type AS T2 ON T1.detention_type_code  =  T2.detention_type_code GROUP BY T1.detention_type_code ORDER BY count(*) ASC LIMIT 1", "query_toks": ["SELECT", "T1.detention_type_code", ",", "T2.detention_type_description", "FROM", "Detention", "AS", "T1", "JOIN", "Ref_Detention_Type", "AS", "T2", "ON", "T1.detention_type_code", "=", "T2.detention_type_code", "GROUP", "BY", "T1.detention_type_code", "ORDER", "BY", "count", "(", "*", ")", "ASC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "detention_type_code", ",", "t2", ".", "detention_type_description", "from", "detention", "as", "t1", "join", "ref_detention_type", "as", "t2", "on", "t1", ".", "detention_type_code", "=", "t2", ".", "detention_type_code", "group", "by", "t1", ".", "detention_type_code", "order", "by", "count", "(", "*", ")", "asc", "limit", "value"], "question": "What are the code and description of the least frequent detention type ?", "question_toks": ["What", "are", "the", "code", "and", "description", "of", "the", "least", "frequent", "detention", "type", "?"], "guid": 9175}}
{"text": "architect: id, name, nationality, gender; bridge: architect_id, id, name, location, length_meters, length_feet; mill: architect_id, id, location, name, type, built_year, notes | What is the id, name and nationality of the architect who built most mills?", "sql": "SELECT T1.id, T1.name, T1.nationality FROM architect AS T1 JOIN mill AS T2 ON T1.id = T2.architect_id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 1", "example": {"db_id": "architecture", "query": "SELECT T1.id ,  T1.name ,  T1.nationality FROM architect AS T1 JOIN mill AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.id", ",", "T1.name", ",", "T1.nationality", "FROM", "architect", "AS", "T1", "JOIN", "mill", "AS", "T2", "ON", "T1.id", "=", "T2.architect_id", "GROUP", "BY", "T1.id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "id", ",", "t1", ".", "name", ",", "t1", ".", "nationality", "from", "architect", "as", "t1", "join", "mill", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "architect_id", "group", "by", "t1", ".", "id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the id, name and nationality of the architect who built most mills?", "question_toks": ["What", "is", "the", "id", ",", "name", "and", "nationality", "of", "the", "architect", "who", "built", "most", "mills", "?"], "guid": 9176}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | What is the winery at which the wine with the highest score was made?", "sql": "SELECT Winery FROM WINE ORDER BY SCORE LIMIT 1", "example": {"db_id": "wine_1", "query": "SELECT Winery FROM WINE ORDER BY SCORE LIMIT 1", "query_toks": ["SELECT", "Winery", "FROM", "WINE", "ORDER", "BY", "SCORE", "LIMIT", "1"], "query_toks_no_value": ["select", "winery", "from", "wine", "order", "by", "score", "limit", "value"], "question": "What is the winery at which the wine with the highest score was made?", "question_toks": ["What", "is", "the", "winery", "at", "which", "the", "wine", "with", "the", "highest", "score", "was", "made", "?"], "guid": 9177}}
{"text": "county_public_safety: County_ID, Name, Population, Police_officers, Residents_per_officer, Case_burden, Crime_rate, Police_force, Location; city: City_ID, County_ID, Name, White, Black, Amerindian, Asian, Multiracial, Hispanic | Show the crime rate of counties with a city having white percentage more than 90.", "sql": "SELECT T2.Crime_rate FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID = T2.County_ID WHERE T1.White > 90", "example": {"db_id": "county_public_safety", "query": "SELECT T2.Crime_rate FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID  =  T2.County_ID WHERE T1.White  >  90", "query_toks": ["SELECT", "T2.Crime_rate", "FROM", "city", "AS", "T1", "JOIN", "county_public_safety", "AS", "T2", "ON", "T1.County_ID", "=", "T2.County_ID", "WHERE", "T1.White", ">", "90"], "query_toks_no_value": ["select", "t2", ".", "crime_rate", "from", "city", "as", "t1", "join", "county_public_safety", "as", "t2", "on", "t1", ".", "county_id", "=", "t2", ".", "county_id", "where", "t1", ".", "white", ">", "value"], "question": "Show the crime rate of counties with a city having white percentage more than 90.", "question_toks": ["Show", "the", "crime", "rate", "of", "counties", "with", "a", "city", "having", "white", "percentage", "more", "than", "90", "."], "guid": 9178}}
{"text": "repair: repair_ID, name, Launch_Date, Notes; machine: Machine_ID, Making_Year, Class, Team, Machine_series, value_points, quality_rank; technician: technician_id, Name, Team, Starting_Year, Age; repair_assignment: technician_id, repair_ID, Machine_ID | Show names of technicians in ascending order of quality rank of the machine they are assigned.", "sql": "SELECT T3.Name FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id = T2.machine_id JOIN technician AS T3 ON T1.technician_ID = T3.technician_ID ORDER BY T2.quality_rank ASC", "example": {"db_id": "machine_repair", "query": "SELECT T3.Name FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id  =  T2.machine_id JOIN technician AS T3 ON T1.technician_ID  =  T3.technician_ID ORDER BY T2.quality_rank", "query_toks": ["SELECT", "T3.Name", "FROM", "repair_assignment", "AS", "T1", "JOIN", "machine", "AS", "T2", "ON", "T1.machine_id", "=", "T2.machine_id", "JOIN", "technician", "AS", "T3", "ON", "T1.technician_ID", "=", "T3.technician_ID", "ORDER", "BY", "T2.quality_rank"], "query_toks_no_value": ["select", "t3", ".", "name", "from", "repair_assignment", "as", "t1", "join", "machine", "as", "t2", "on", "t1", ".", "machine_id", "=", "t2", ".", "machine_id", "join", "technician", "as", "t3", "on", "t1", ".", "technician_id", "=", "t3", ".", "technician_id", "order", "by", "t2", ".", "quality_rank"], "question": "Show names of technicians in ascending order of quality rank of the machine they are assigned.", "question_toks": ["Show", "names", "of", "technicians", "in", "ascending", "order", "of", "quality", "rank", "of", "the", "machine", "they", "are", "assigned", "."], "guid": 9179}}
{"text": "city: City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking; farm: Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats; farm_competition: Competition_ID, Year, Theme, Host_city_ID, Hosts; competition_record: Competition_ID, Farm_ID, Rank | Show the status shared by cities with population bigger than 1500 and smaller than 500.", "sql": "SELECT Status FROM city WHERE Population > 1500 INTERSECT SELECT Status FROM city WHERE Population < 500", "example": {"db_id": "farm", "query": "SELECT Status FROM city WHERE Population  >  1500 INTERSECT SELECT Status FROM city WHERE Population  <  500", "query_toks": ["SELECT", "Status", "FROM", "city", "WHERE", "Population", ">", "1500", "INTERSECT", "SELECT", "Status", "FROM", "city", "WHERE", "Population", "<", "500"], "query_toks_no_value": ["select", "status", "from", "city", "where", "population", ">", "value", "intersect", "select", "status", "from", "city", "where", "population", "<", "value"], "question": "Show the status shared by cities with population bigger than 1500 and smaller than 500.", "question_toks": ["Show", "the", "status", "shared", "by", "cities", "with", "population", "bigger", "than", "1500", "and", "smaller", "than", "500", "."], "guid": 9180}}
{"text": "perpetrator: Perpetrator_ID, People_ID, Date, Year, Location, Country, Killed, Injured; people: People_ID, Name, Height, Weight, Home_Town | What are the countries of perpetrators? Show each country and the corresponding number of perpetrators there.", "sql": "SELECT Country , COUNT(*) FROM perpetrator GROUP BY Country", "example": {"db_id": "perpetrator", "query": "SELECT Country ,  COUNT(*) FROM perpetrator GROUP BY Country", "query_toks": ["SELECT", "Country", ",", "COUNT", "(", "*", ")", "FROM", "perpetrator", "GROUP", "BY", "Country"], "query_toks_no_value": ["select", "country", ",", "count", "(", "*", ")", "from", "perpetrator", "group", "by", "country"], "question": "What are the countries of perpetrators? Show each country and the corresponding number of perpetrators there.", "question_toks": ["What", "are", "the", "countries", "of", "perpetrators", "?", "Show", "each", "country", "and", "the", "corresponding", "number", "of", "perpetrators", "there", "."], "guid": 9181}}
{"text": "city: City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking; farm: Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats; farm_competition: Competition_ID, Year, Theme, Host_city_ID, Hosts; competition_record: Competition_ID, Farm_ID, Rank | What are the official names of cities, ordered descending by population?", "sql": "SELECT Official_Name FROM city ORDER BY Population DESC", "example": {"db_id": "farm", "query": "SELECT Official_Name FROM city ORDER BY Population DESC", "query_toks": ["SELECT", "Official_Name", "FROM", "city", "ORDER", "BY", "Population", "DESC"], "query_toks_no_value": ["select", "official_name", "from", "city", "order", "by", "population", "desc"], "question": "What are the official names of cities, ordered descending by population?", "question_toks": ["What", "are", "the", "official", "names", "of", "cities", ",", "ordered", "descending", "by", "population", "?"], "guid": 9182}}
{"text": "architect: id, name, nationality, gender; bridge: architect_id, id, name, location, length_meters, length_feet; mill: architect_id, id, location, name, type, built_year, notes | What are the distinct name of the mills built by the architects who have also built a bridge longer than 80 meters?", "sql": "SELECT DISTINCT T1.name FROM mill AS T1 JOIN architect AS t2 ON T1.architect_id = T2.id JOIN bridge AS T3 ON T3.architect_id = T2.id WHERE T3.length_meters > 80", "example": {"db_id": "architecture", "query": "SELECT DISTINCT T1.name FROM mill AS T1 JOIN architect AS t2 ON T1.architect_id  =  T2.id JOIN bridge AS T3 ON T3.architect_id  =  T2.id WHERE T3.length_meters  >  80", "query_toks": ["SELECT", "DISTINCT", "T1.name", "FROM", "mill", "AS", "T1", "JOIN", "architect", "AS", "t2", "ON", "T1.architect_id", "=", "T2.id", "JOIN", "bridge", "AS", "T3", "ON", "T3.architect_id", "=", "T2.id", "WHERE", "T3.length_meters", ">", "80"], "query_toks_no_value": ["select", "distinct", "t1", ".", "name", "from", "mill", "as", "t1", "join", "architect", "as", "t2", "on", "t1", ".", "architect_id", "=", "t2", ".", "id", "join", "bridge", "as", "t3", "on", "t3", ".", "architect_id", "=", "t2", ".", "id", "where", "t3", ".", "length_meters", ">", "value"], "question": "What are the distinct name of the mills built by the architects who have also built a bridge longer than 80 meters?", "question_toks": ["What", "are", "the", "distinct", "name", "of", "the", "mills", "built", "by", "the", "architects", "who", "have", "also", "built", "a", "bridge", "longer", "than", "80", "meters", "?"], "guid": 9183}}
{"text": "city: City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking; farm: Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats; farm_competition: Competition_ID, Year, Theme, Host_city_ID, Hosts; competition_record: Competition_ID, Farm_ID, Rank | Return the different statuses of cities, ascending by frequency.", "sql": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) ASC", "example": {"db_id": "farm", "query": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) ASC", "query_toks": ["SELECT", "Status", "FROM", "city", "GROUP", "BY", "Status", "ORDER", "BY", "COUNT", "(", "*", ")", "ASC"], "query_toks_no_value": ["select", "status", "from", "city", "group", "by", "status", "order", "by", "count", "(", "*", ")", "asc"], "question": "Return the different statuses of cities, ascending by frequency.", "question_toks": ["Return", "the", "different", "statuses", "of", "cities", ",", "ascending", "by", "frequency", "."], "guid": 9184}}
{"text": "Ref_Address_Types: address_type_code, address_type_description; Ref_Detention_Type: detention_type_code, detention_type_description; Ref_Incident_Type: incident_type_code, incident_type_description; Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Students: student_id, address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, date_first_rental, date_left_university, other_student_details; Teachers: teacher_id, address_id, first_name, middle_name, last_name, gender, cell_mobile_number, email_address, other_details; Assessment_Notes: notes_id, student_id, teacher_id, date_of_notes, text_of_notes, other_details; Behavior_Incident: incident_id, incident_type_code, student_id, date_incident_start, date_incident_end, incident_summary, recommendations, other_details; Detention: detention_id, detention_type_code, teacher_id, datetime_detention_start, datetime_detention_end, detention_summary, other_details; Student_Addresses: student_id, address_id, date_address_from, date_address_to, monthly_rental, other_details | List all cities of addresses in alphabetical order.", "sql": "SELECT city FROM addresses ORDER BY city ASC", "example": {"db_id": "behavior_monitoring", "query": "SELECT city FROM Addresses ORDER BY city", "query_toks": ["SELECT", "city", "FROM", "Addresses", "ORDER", "BY", "city"], "query_toks_no_value": ["select", "city", "from", "addresses", "order", "by", "city"], "question": "List all cities of addresses in alphabetical order.", "question_toks": ["List", "all", "cities", "of", "addresses", "in", "alphabetical", "order", "."], "guid": 9185}}
{"text": "repair: repair_ID, name, Launch_Date, Notes; machine: Machine_ID, Making_Year, Class, Team, Machine_series, value_points, quality_rank; technician: technician_id, Name, Team, Starting_Year, Age; repair_assignment: technician_id, repair_ID, Machine_ID | What are the names of the technicians by ascending order of age?", "sql": "SELECT Name FROM technician ORDER BY Age ASC", "example": {"db_id": "machine_repair", "query": "SELECT Name FROM technician ORDER BY Age ASC", "query_toks": ["SELECT", "Name", "FROM", "technician", "ORDER", "BY", "Age", "ASC"], "query_toks_no_value": ["select", "name", "from", "technician", "order", "by", "age", "asc"], "question": "What are the names of the technicians by ascending order of age?", "question_toks": ["What", "are", "the", "names", "of", "the", "technicians", "by", "ascending", "order", "of", "age", "?"], "guid": 9186}}
{"text": "stadium: id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage; game: stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition; injury_accident: game_id, id, Player, Injury, Number_of_matches, Source | For each injury accident, find the date of the game and the name of the injured player in the game, and sort the results in descending order of game season.", "sql": "SELECT T1.date , T2.player FROM game AS T1 JOIN injury_accident AS T2 ON T1.id = T2.game_id ORDER BY T1.season DESC", "example": {"db_id": "game_injury", "query": "SELECT T1.date ,  T2.player FROM game AS T1 JOIN injury_accident AS T2 ON T1.id  =  T2.game_id ORDER BY T1.season DESC", "query_toks": ["SELECT", "T1.date", ",", "T2.player", "FROM", "game", "AS", "T1", "JOIN", "injury_accident", "AS", "T2", "ON", "T1.id", "=", "T2.game_id", "ORDER", "BY", "T1.season", "DESC"], "query_toks_no_value": ["select", "t1", ".", "date", ",", "t2", ".", "player", "from", "game", "as", "t1", "join", "injury_accident", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "game_id", "order", "by", "t1", ".", "season", "desc"], "question": "For each injury accident, find the date of the game and the name of the injured player in the game, and sort the results in descending order of game season.", "question_toks": ["For", "each", "injury", "accident", ",", "find", "the", "date", "of", "the", "game", "and", "the", "name", "of", "the", "injured", "player", "in", "the", "game", ",", "and", "sort", "the", "results", "in", "descending", "order", "of", "game", "season", "."], "guid": 9187}}
{"text": "perpetrator: Perpetrator_ID, People_ID, Date, Year, Location, Country, Killed, Injured; people: People_ID, Name, Height, Weight, Home_Town | List the names of people that are not perpetrators.", "sql": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM perpetrator)", "example": {"db_id": "perpetrator", "query": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM perpetrator)", "query_toks": ["SELECT", "Name", "FROM", "people", "WHERE", "People_ID", "NOT", "IN", "(", "SELECT", "People_ID", "FROM", "perpetrator", ")"], "query_toks_no_value": ["select", "name", "from", "people", "where", "people_id", "not", "in", "(", "select", "people_id", "from", "perpetrator", ")"], "question": "List the names of people that are not perpetrators.", "question_toks": ["List", "the", "names", "of", "people", "that", "are", "not", "perpetrators", "."], "guid": 9188}}
{"text": "Ref_Address_Types: address_type_code, address_type_description; Ref_Detention_Type: detention_type_code, detention_type_description; Ref_Incident_Type: incident_type_code, incident_type_description; Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Students: student_id, address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, date_first_rental, date_left_university, other_student_details; Teachers: teacher_id, address_id, first_name, middle_name, last_name, gender, cell_mobile_number, email_address, other_details; Assessment_Notes: notes_id, student_id, teacher_id, date_of_notes, text_of_notes, other_details; Behavior_Incident: incident_id, incident_type_code, student_id, date_incident_start, date_incident_end, incident_summary, recommendations, other_details; Detention: detention_id, detention_type_code, teacher_id, datetime_detention_start, datetime_detention_end, detention_summary, other_details; Student_Addresses: student_id, address_id, date_address_from, date_address_to, monthly_rental, other_details | How many distinct students have been in detention?", "sql": "SELECT COUNT(DISTINCT student_id) FROM students_in_detention", "example": {"db_id": "behavior_monitoring", "query": "SELECT count(DISTINCT student_id) FROM Students_in_Detention", "query_toks": ["SELECT", "count", "(", "DISTINCT", "student_id", ")", "FROM", "Students_in_Detention"], "query_toks_no_value": ["select", "count", "(", "distinct", "student_id", ")", "from", "students_in_detention"], "question": "How many distinct students have been in detention?", "question_toks": ["How", "many", "distinct", "students", "have", "been", "in", "detention", "?"], "guid": 9189}}
{"text": "Third_Party_Companies: company_id, company_type, company_name, company_address, other_company_details; Maintenance_Contracts: maintenance_contract_id, maintenance_contract_company_id, contract_start_date, contract_end_date, other_contract_details; Parts: part_id, part_name, chargeable_yn, chargeable_amount, other_part_details; Skills: skill_id, skill_code, skill_description; Staff: staff_id, staff_name, gender, other_staff_details; Assets: asset_id, maintenance_contract_id, supplier_company_id, asset_details, asset_make, asset_model, asset_acquired_date, asset_disposed_date, other_asset_details; Asset_Parts: asset_id, part_id; Maintenance_Engineers: engineer_id, company_id, first_name, last_name, other_details; Engineer_Skills: engineer_id, skill_id; Fault_Log: fault_log_entry_id, asset_id, recorded_by_staff_id, fault_log_entry_datetime, fault_description, other_fault_details | Which skill is used in fixing the most number of faults? List the skill id and description.", "sql": "SELECT T1.skill_id , T1.skill_description FROM Skills AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.skill_id = T2.skill_id GROUP BY T1.skill_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "assets_maintenance", "query": "SELECT T1.skill_id ,  T1.skill_description FROM Skills AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.skill_id  =  T2.skill_id GROUP BY T1.skill_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.skill_id", ",", "T1.skill_description", "FROM", "Skills", "AS", "T1", "JOIN", "Skills_Required_To_Fix", "AS", "T2", "ON", "T1.skill_id", "=", "T2.skill_id", "GROUP", "BY", "T1.skill_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "skill_id", ",", "t1", ".", "skill_description", "from", "skills", "as", "t1", "join", "skills_required_to_fix", "as", "t2", "on", "t1", ".", "skill_id", "=", "t2", ".", "skill_id", "group", "by", "t1", ".", "skill_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which skill is used in fixing the most number of faults? List the skill id and description.", "question_toks": ["Which", "skill", "is", "used", "in", "fixing", "the", "most", "number", "of", "faults", "?", "List", "the", "skill", "id", "and", "description", "."], "guid": 9190}}
{"text": "people: People_ID, Name, Country, Is_Male, Age; church: Church_ID, Name, Organized_by, Open_Date, Continuation_of; wedding: Church_ID, Male_ID, Female_ID, Year | Show the names for all females from Canada having a wedding in year 2016.", "sql": "SELECT T2.name FROM wedding AS T1 JOIN people AS T2 ON T1.female_id = T2.people_id WHERE T1.year = 2016 AND T2.is_male = 'F' AND T2.country = 'Canada'", "example": {"db_id": "wedding", "query": "SELECT T2.name FROM wedding AS T1 JOIN people AS T2 ON T1.female_id  =  T2.people_id WHERE T1.year  =  2016 AND T2.is_male  =  'F' AND T2.country  =  'Canada'", "query_toks": ["SELECT", "T2.name", "FROM", "wedding", "AS", "T1", "JOIN", "people", "AS", "T2", "ON", "T1.female_id", "=", "T2.people_id", "WHERE", "T1.year", "=", "2016", "AND", "T2.is_male", "=", "'F", "'", "AND", "T2.country", "=", "'Canada", "'"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "wedding", "as", "t1", "join", "people", "as", "t2", "on", "t1", ".", "female_id", "=", "t2", ".", "people_id", "where", "t1", ".", "year", "=", "value", "and", "t2", ".", "is_male", "=", "value", "and", "t2", ".", "country", "=", "value"], "question": "Show the names for all females from Canada having a wedding in year 2016.", "question_toks": ["Show", "the", "names", "for", "all", "females", "from", "Canada", "having", "a", "wedding", "in", "year", "2016", "."], "guid": 9191}}
{"text": "perpetrator: Perpetrator_ID, People_ID, Date, Year, Location, Country, Killed, Injured; people: People_ID, Name, Height, Weight, Home_Town | What is the country that has the most perpetrators?", "sql": "SELECT Country, COUNT(*) FROM perpetrator GROUP BY Country ORDER BY COUNT(*) DESC LIMIT 1", "example": {"db_id": "perpetrator", "query": "SELECT Country ,  COUNT(*) FROM perpetrator GROUP BY Country ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "Country", ",", "COUNT", "(", "*", ")", "FROM", "perpetrator", "GROUP", "BY", "Country", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "country", ",", "count", "(", "*", ")", "from", "perpetrator", "group", "by", "country", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the country that has the most perpetrators?", "question_toks": ["What", "is", "the", "country", "that", "has", "the", "most", "perpetrators", "?"], "guid": 9192}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | What is the color of the grape whose wine products has the highest average price?", "sql": "SELECT T1.Color FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape = T2.Grape GROUP BY T2.Grape ORDER BY AVG(Price) DESC LIMIT 1", "example": {"db_id": "wine_1", "query": "SELECT T1.Color FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape GROUP BY T2.Grape ORDER BY AVG(Price) DESC LIMIT 1", "query_toks": ["SELECT", "T1.Color", "FROM", "GRAPES", "AS", "T1", "JOIN", "WINE", "AS", "T2", "ON", "T1.Grape", "=", "T2.Grape", "GROUP", "BY", "T2.Grape", "ORDER", "BY", "AVG", "(", "Price", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "color", "from", "grapes", "as", "t1", "join", "wine", "as", "t2", "on", "t1", ".", "grape", "=", "t2", ".", "grape", "group", "by", "t2", ".", "grape", "order", "by", "avg", "(", "price", ")", "desc", "limit", "value"], "question": "What is the color of the grape whose wine products has the highest average price?", "question_toks": ["What", "is", "the", "color", "of", "the", "grape", "whose", "wine", "products", "has", "the", "highest", "average", "price", "?"], "guid": 9193}}
{"text": "Third_Party_Companies: company_id, company_type, company_name, company_address, other_company_details; Maintenance_Contracts: maintenance_contract_id, maintenance_contract_company_id, contract_start_date, contract_end_date, other_contract_details; Parts: part_id, part_name, chargeable_yn, chargeable_amount, other_part_details; Skills: skill_id, skill_code, skill_description; Staff: staff_id, staff_name, gender, other_staff_details; Assets: asset_id, maintenance_contract_id, supplier_company_id, asset_details, asset_make, asset_model, asset_acquired_date, asset_disposed_date, other_asset_details; Asset_Parts: asset_id, part_id; Maintenance_Engineers: engineer_id, company_id, first_name, last_name, other_details; Engineer_Skills: engineer_id, skill_id; Fault_Log: fault_log_entry_id, asset_id, recorded_by_staff_id, fault_log_entry_datetime, fault_description, other_fault_details | Which company started the earliest the maintenance contract? Show the company name.", "sql": "SELECT T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Contracts AS T2 ON T1.company_id = T2.maintenance_contract_company_id ORDER BY T2.contract_start_date ASC LIMIT 1", "example": {"db_id": "assets_maintenance", "query": "SELECT T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Contracts AS T2 ON T1.company_id  =  T2.maintenance_contract_company_id ORDER BY T2.contract_start_date ASC LIMIT 1", "query_toks": ["SELECT", "T1.company_name", "FROM", "Third_Party_Companies", "AS", "T1", "JOIN", "Maintenance_Contracts", "AS", "T2", "ON", "T1.company_id", "=", "T2.maintenance_contract_company_id", "ORDER", "BY", "T2.contract_start_date", "ASC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "company_name", "from", "third_party_companies", "as", "t1", "join", "maintenance_contracts", "as", "t2", "on", "t1", ".", "company_id", "=", "t2", ".", "maintenance_contract_company_id", "order", "by", "t2", ".", "contract_start_date", "asc", "limit", "value"], "question": "Which company started the earliest the maintenance contract? Show the company name.", "question_toks": ["Which", "company", "started", "the", "earliest", "the", "maintenance", "contract", "?", "Show", "the", "company", "name", "."], "guid": 9194}}
{"text": "stadium: id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage; game: stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition; injury_accident: game_id, id, Player, Injury, Number_of_matches, Source | Which stadium name contains the substring \"Bank\"?", "sql": "SELECT name FROM stadium WHERE name LIKE '%Bank%';", "example": {"db_id": "game_injury", "query": "SELECT name FROM stadium WHERE name LIKE \"%Bank%\"", "query_toks": ["SELECT", "name", "FROM", "stadium", "WHERE", "name", "LIKE", "``", "%", "Bank", "%", "''"], "query_toks_no_value": ["select", "name", "from", "stadium", "where", "name", "like", "value"], "question": "Which stadium name contains the substring \"Bank\"?", "question_toks": ["Which", "stadium", "name", "contains", "the", "substring", "``", "Bank", "''", "?"], "guid": 9195}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | What are the maximum price and score of wines for each year?", "sql": "SELECT max(Price) , max(Score) , YEAR FROM WINE GROUP BY YEAR", "example": {"db_id": "wine_1", "query": "SELECT max(Price) ,  max(Score) ,  YEAR FROM WINE GROUP BY YEAR", "query_toks": ["SELECT", "max", "(", "Price", ")", ",", "max", "(", "Score", ")", ",", "YEAR", "FROM", "WINE", "GROUP", "BY", "YEAR"], "query_toks_no_value": ["select", "max", "(", "price", ")", ",", "max", "(", "score", ")", ",", "year", "from", "wine", "group", "by", "year"], "question": "What are the maximum price and score of wines for each year?", "question_toks": ["What", "are", "the", "maximum", "price", "and", "score", "of", "wines", "for", "each", "year", "?"], "guid": 9196}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | List the names and scores of all wines.", "sql": "SELECT Name, Score FROM Wine", "example": {"db_id": "wine_1", "query": "SELECT Name ,  Score FROM WINE", "query_toks": ["SELECT", "Name", ",", "Score", "FROM", "WINE"], "query_toks_no_value": ["select", "name", ",", "score", "from", "wine"], "question": "List the names and scores of all wines.", "question_toks": ["List", "the", "names", "and", "scores", "of", "all", "wines", "."], "guid": 9197}}
{"text": "repair: repair_ID, name, Launch_Date, Notes; machine: Machine_ID, Making_Year, Class, Team, Machine_series, value_points, quality_rank; technician: technician_id, Name, Team, Starting_Year, Age; repair_assignment: technician_id, repair_ID, Machine_ID | What are the names of the technicians  and how many machines are they assigned to repair?", "sql": "SELECT T2.Name , COUNT(*) FROM repair_assignment AS T1 JOIN technician AS T2 ON T1.technician_ID = T2.technician_ID GROUP BY T2.Name", "example": {"db_id": "machine_repair", "query": "SELECT T2.Name ,  COUNT(*) FROM repair_assignment AS T1 JOIN technician AS T2 ON T1.technician_ID  =  T2.technician_ID GROUP BY T2.Name", "query_toks": ["SELECT", "T2.Name", ",", "COUNT", "(", "*", ")", "FROM", "repair_assignment", "AS", "T1", "JOIN", "technician", "AS", "T2", "ON", "T1.technician_ID", "=", "T2.technician_ID", "GROUP", "BY", "T2.Name"], "query_toks_no_value": ["select", "t2", ".", "name", ",", "count", "(", "*", ")", "from", "repair_assignment", "as", "t1", "join", "technician", "as", "t2", "on", "t1", ".", "technician_id", "=", "t2", ".", "technician_id", "group", "by", "t2", ".", "name"], "question": "What are the names of the technicians  and how many machines are they assigned to repair?", "question_toks": ["What", "are", "the", "names", "of", "the", "technicians", "and", "how", "many", "machines", "are", "they", "assigned", "to", "repair", "?"], "guid": 9198}}
{"text": "battle: id, name, date, bulgarian_commander, latin_commander, result; ship: lost_in_battle, id, name, tonnage, ship_type, location, disposition_of_ship; death: caused_by_ship_id, id, note, killed, injured | How many ships ended up being 'Captured'?", "sql": "SELECT COUNT(*) FROM ship WHERE disposition_of_ship = 'Captured'", "example": {"db_id": "battle_death", "query": "SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "ship", "WHERE", "disposition_of_ship", "=", "'Captured", "'"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "ship", "where", "disposition_of_ship", "=", "value"], "question": "How many ships ended up being 'Captured'?", "question_toks": ["How", "many", "ships", "ended", "up", "being", "'Captured", "'", "?"], "guid": 9199}}
{"text": "Ref_Address_Types: address_type_code, address_type_description; Ref_Detention_Type: detention_type_code, detention_type_description; Ref_Incident_Type: incident_type_code, incident_type_description; Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Students: student_id, address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, date_first_rental, date_left_university, other_student_details; Teachers: teacher_id, address_id, first_name, middle_name, last_name, gender, cell_mobile_number, email_address, other_details; Assessment_Notes: notes_id, student_id, teacher_id, date_of_notes, text_of_notes, other_details; Behavior_Incident: incident_id, incident_type_code, student_id, date_incident_start, date_incident_end, incident_summary, recommendations, other_details; Detention: detention_id, detention_type_code, teacher_id, datetime_detention_start, datetime_detention_end, detention_summary, other_details; Student_Addresses: student_id, address_id, date_address_from, date_address_to, monthly_rental, other_details | List all information about the assessment notes sorted by date in ascending order.", "sql": "SELECT * FROM Assessment_Notes ORDER BY date_of_notes ASC", "example": {"db_id": "behavior_monitoring", "query": "SELECT * FROM Assessment_Notes ORDER BY date_of_notes ASC", "query_toks": ["SELECT", "*", "FROM", "Assessment_Notes", "ORDER", "BY", "date_of_notes", "ASC"], "query_toks_no_value": ["select", "*", "from", "assessment_notes", "order", "by", "date_of_notes", "asc"], "question": "List all information about the assessment notes sorted by date in ascending order.", "question_toks": ["List", "all", "information", "about", "the", "assessment", "notes", "sorted", "by", "date", "in", "ascending", "order", "."], "guid": 9200}}
{"text": "perpetrator: Perpetrator_ID, People_ID, Date, Year, Location, Country, Killed, Injured; people: People_ID, Name, Height, Weight, Home_Town | Show the date of the tallest perpetrator.", "sql": "SELECT T2.Date FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Height DESC LIMIT 1", "example": {"db_id": "perpetrator", "query": "SELECT T2.Date FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1", "query_toks": ["SELECT", "T2.Date", "FROM", "people", "AS", "T1", "JOIN", "perpetrator", "AS", "T2", "ON", "T1.People_ID", "=", "T2.People_ID", "ORDER", "BY", "T1.Height", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "date", "from", "people", "as", "t1", "join", "perpetrator", "as", "t2", "on", "t1", ".", "people_id", "=", "t2", ".", "people_id", "order", "by", "t1", ".", "height", "desc", "limit", "value"], "question": "Show the date of the tallest perpetrator.", "question_toks": ["Show", "the", "date", "of", "the", "tallest", "perpetrator", "."], "guid": 9201}}
{"text": "repair: repair_ID, name, Launch_Date, Notes; machine: Machine_ID, Making_Year, Class, Team, Machine_series, value_points, quality_rank; technician: technician_id, Name, Team, Starting_Year, Age; repair_assignment: technician_id, repair_ID, Machine_ID | What is the team with at least 2 technicians?", "sql": "SELECT Team FROM technician GROUP BY Team HAVING COUNT(*) >= 2", "example": {"db_id": "machine_repair", "query": "SELECT Team FROM technician GROUP BY Team HAVING COUNT(*)  >=  2", "query_toks": ["SELECT", "Team", "FROM", "technician", "GROUP", "BY", "Team", "HAVING", "COUNT", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "team", "from", "technician", "group", "by", "team", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "What is the team with at least 2 technicians?", "question_toks": ["What", "is", "the", "team", "with", "at", "least", "2", "technicians", "?"], "guid": 9202}}
{"text": "county_public_safety: County_ID, Name, Population, Police_officers, Residents_per_officer, Case_burden, Crime_rate, Police_force, Location; city: City_ID, County_ID, Name, White, Black, Amerindian, Asian, Multiracial, Hispanic | List the names of the city with the top 5 white percentages.", "sql": "SELECT Name FROM city ORDER BY White DESC LIMIT 5", "example": {"db_id": "county_public_safety", "query": "SELECT Name FROM city ORDER BY White DESC LIMIT 5", "query_toks": ["SELECT", "Name", "FROM", "city", "ORDER", "BY", "White", "DESC", "LIMIT", "5"], "query_toks_no_value": ["select", "name", "from", "city", "order", "by", "white", "desc", "limit", "value"], "question": "List the names of the city with the top 5 white percentages.", "question_toks": ["List", "the", "names", "of", "the", "city", "with", "the", "top", "5", "white", "percentages", "."], "guid": 9203}}
{"text": "people: People_ID, Name, Country, Is_Male, Age; church: Church_ID, Name, Organized_by, Open_Date, Continuation_of; wedding: Church_ID, Male_ID, Female_ID, Year | How many churches opened before 1850 are there?", "sql": "SELECT COUNT(*) FROM church WHERE open_date < 1850", "example": {"db_id": "wedding", "query": "SELECT count(*) FROM Church WHERE Open_Date  <  1850", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Church", "WHERE", "Open_Date", "<", "1850"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "church", "where", "open_date", "<", "value"], "question": "How many churches opened before 1850 are there?", "question_toks": ["How", "many", "churches", "opened", "before", "1850", "are", "there", "?"], "guid": 9204}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | What are the maximum price and score of wines produced by St. Helena appelation?", "sql": "SELECT max(Price) , max(Score) FROM WINE WHERE Appelation = \"St. Helena\"", "example": {"db_id": "wine_1", "query": "SELECT max(Price) ,  max(Score) FROM WINE WHERE Appelation  =  \"St. Helena\"", "query_toks": ["SELECT", "max", "(", "Price", ")", ",", "max", "(", "Score", ")", "FROM", "WINE", "WHERE", "Appelation", "=", "``", "St.", "Helena", "''"], "query_toks_no_value": ["select", "max", "(", "price", ")", ",", "max", "(", "score", ")", "from", "wine", "where", "appelation", "=", "value"], "question": "What are the maximum price and score of wines produced by St. Helena appelation?", "question_toks": ["What", "are", "the", "maximum", "price", "and", "score", "of", "wines", "produced", "by", "St.", "Helena", "appelation", "?"], "guid": 9205}}
{"text": "repair: repair_ID, name, Launch_Date, Notes; machine: Machine_ID, Making_Year, Class, Team, Machine_series, value_points, quality_rank; technician: technician_id, Name, Team, Starting_Year, Age; repair_assignment: technician_id, repair_ID, Machine_ID | What are the team and starting year of technicians?", "sql": "SELECT Team, Starting_Year FROM technician", "example": {"db_id": "machine_repair", "query": "SELECT Team ,  Starting_Year FROM technician", "query_toks": ["SELECT", "Team", ",", "Starting_Year", "FROM", "technician"], "query_toks_no_value": ["select", "team", ",", "starting_year", "from", "technician"], "question": "What are the team and starting year of technicians?", "question_toks": ["What", "are", "the", "team", "and", "starting", "year", "of", "technicians", "?"], "guid": 9206}}
{"text": "city: City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking; farm: Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats; farm_competition: Competition_ID, Year, Theme, Host_city_ID, Hosts; competition_record: Competition_ID, Farm_ID, Rank | List the most common type of Status across cities.", "sql": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1", "example": {"db_id": "farm", "query": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "Status", "FROM", "city", "GROUP", "BY", "Status", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "status", "from", "city", "group", "by", "status", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "List the most common type of Status across cities.", "question_toks": ["List", "the", "most", "common", "type", "of", "Status", "across", "cities", "."], "guid": 9207}}
{"text": "battle: id, name, date, bulgarian_commander, latin_commander, result; ship: lost_in_battle, id, name, tonnage, ship_type, location, disposition_of_ship; death: caused_by_ship_id, id, note, killed, injured | What are the name and results of the battles when the bulgarian commander is not 'Boril'", "sql": "SELECT name, result FROM battle WHERE bulgarian_commander != 'Boril'", "example": {"db_id": "battle_death", "query": "SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'", "query_toks": ["SELECT", "name", ",", "RESULT", "FROM", "battle", "WHERE", "bulgarian_commander", "!", "=", "'Boril", "'"], "query_toks_no_value": ["select", "name", ",", "result", "from", "battle", "where", "bulgarian_commander", "!", "=", "value"], "question": "What are the name and results of the battles when the bulgarian commander is not 'Boril'", "question_toks": ["What", "are", "the", "name", "and", "results", "of", "the", "battles", "when", "the", "bulgarian", "commander", "is", "not", "'Boril", "'"], "guid": 9208}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | What is the area for the appelation which produced the most wines prior to 2010?", "sql": "SELECT T1.Area FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation GROUP BY T2.Appelation HAVING T2.year  <  2010 ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "wine_1", "query": "SELECT T1.Area FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation GROUP BY T2.Appelation HAVING T2.year  <  2010 ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.Area", "FROM", "APPELLATIONS", "AS", "T1", "JOIN", "WINE", "AS", "T2", "ON", "T1.Appelation", "=", "T2.Appelation", "GROUP", "BY", "T2.Appelation", "HAVING", "T2.year", "<", "2010", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "area", "from", "appellations", "as", "t1", "join", "wine", "as", "t2", "on", "t1", ".", "appelation", "=", "t2", ".", "appelation", "group", "by", "t2", ".", "appelation", "having", "t2", ".", "year", "<", "value", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the area for the appelation which produced the most wines prior to 2010?", "question_toks": ["What", "is", "the", "area", "for", "the", "appelation", "which", "produced", "the", "most", "wines", "prior", "to", "2010", "?"], "guid": 9209}}
{"text": "county_public_safety: County_ID, Name, Population, Police_officers, Residents_per_officer, Case_burden, Crime_rate, Police_force, Location; city: City_ID, County_ID, Name, White, Black, Amerindian, Asian, Multiracial, Hispanic | What are the different police forces of counties that are not located in the East?", "sql": "SELECT DISTINCT Police_force FROM county_public_safety WHERE LOCATION != \"East\"", "example": {"db_id": "county_public_safety", "query": "SELECT DISTINCT Police_force FROM county_public_safety WHERE LOCATION != \"East\"", "query_toks": ["SELECT", "DISTINCT", "Police_force", "FROM", "county_public_safety", "WHERE", "LOCATION", "!", "=", "``", "East", "''"], "query_toks_no_value": ["select", "distinct", "police_force", "from", "county_public_safety", "where", "location", "!", "=", "value"], "question": "What are the different police forces of counties that are not located in the East?", "question_toks": ["What", "are", "the", "different", "police", "forces", "of", "counties", "that", "are", "not", "located", "in", "the", "East", "?"], "guid": 9210}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | Find the county where produces the most number of wines with score higher than 90.", "sql": "SELECT T1.County FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation WHERE T2.Score > 90 GROUP BY T1.County ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "wine_1", "query": "SELECT T1.County FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T2.Score  >  90 GROUP BY T1.County ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.County", "FROM", "APPELLATIONS", "AS", "T1", "JOIN", "WINE", "AS", "T2", "ON", "T1.Appelation", "=", "T2.Appelation", "WHERE", "T2.Score", ">", "90", "GROUP", "BY", "T1.County", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "county", "from", "appellations", "as", "t1", "join", "wine", "as", "t2", "on", "t1", ".", "appelation", "=", "t2", ".", "appelation", "where", "t2", ".", "score", ">", "value", "group", "by", "t1", ".", "county", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Find the county where produces the most number of wines with score higher than 90.", "question_toks": ["Find", "the", "county", "where", "produces", "the", "most", "number", "of", "wines", "with", "score", "higher", "than", "90", "."], "guid": 9211}}
{"text": "county_public_safety: County_ID, Name, Population, Police_officers, Residents_per_officer, Case_burden, Crime_rate, Police_force, Location; city: City_ID, County_ID, Name, White, Black, Amerindian, Asian, Multiracial, Hispanic | Show names of cities and names of counties they are in.", "sql": "SELECT T1.Name, T2.Name FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID = T2.County_ID", "example": {"db_id": "county_public_safety", "query": "SELECT T1.Name ,  T2.Name FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID  =  T2.County_ID", "query_toks": ["SELECT", "T1.Name", ",", "T2.Name", "FROM", "city", "AS", "T1", "JOIN", "county_public_safety", "AS", "T2", "ON", "T1.County_ID", "=", "T2.County_ID"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "t2", ".", "name", "from", "city", "as", "t1", "join", "county_public_safety", "as", "t2", "on", "t1", ".", "county_id", "=", "t2", ".", "county_id"], "question": "Show names of cities and names of counties they are in.", "question_toks": ["Show", "names", "of", "cities", "and", "names", "of", "counties", "they", "are", "in", "."], "guid": 9212}}
{"text": "repair: repair_ID, name, Launch_Date, Notes; machine: Machine_ID, Making_Year, Class, Team, Machine_series, value_points, quality_rank; technician: technician_id, Name, Team, Starting_Year, Age; repair_assignment: technician_id, repair_ID, Machine_ID | What are the names of the technicians that have not been assigned to repair machines?", "sql": "SELECT Name FROM technician WHERE technician_id NOT IN (SELECT technician_id FROM repair_assignment)", "example": {"db_id": "machine_repair", "query": "SELECT Name FROM technician WHERE technician_id NOT IN (SELECT technician_id FROM repair_assignment)", "query_toks": ["SELECT", "Name", "FROM", "technician", "WHERE", "technician_id", "NOT", "IN", "(", "SELECT", "technician_id", "FROM", "repair_assignment", ")"], "query_toks_no_value": ["select", "name", "from", "technician", "where", "technician_id", "not", "in", "(", "select", "technician_id", "from", "repair_assignment", ")"], "question": "What are the names of the technicians that have not been assigned to repair machines?", "question_toks": ["What", "are", "the", "names", "of", "the", "technicians", "that", "have", "not", "been", "assigned", "to", "repair", "machines", "?"], "guid": 9213}}
{"text": "stadium: id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage; game: stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition; injury_accident: game_id, id, Player, Injury, Number_of_matches, Source | What are the maximum, minimum and average home games each stadium held?", "sql": "SELECT max(home_games) ,  min(home_games) ,  avg(home_games) FROM stadium", "example": {"db_id": "game_injury", "query": "SELECT max(home_games) ,  min(home_games) ,  avg(home_games) FROM stadium", "query_toks": ["SELECT", "max", "(", "home_games", ")", ",", "min", "(", "home_games", ")", ",", "avg", "(", "home_games", ")", "FROM", "stadium"], "query_toks_no_value": ["select", "max", "(", "home_games", ")", ",", "min", "(", "home_games", ")", ",", "avg", "(", "home_games", ")", "from", "stadium"], "question": "What are the maximum, minimum and average home games each stadium held?", "question_toks": ["What", "are", "the", "maximum", ",", "minimum", "and", "average", "home", "games", "each", "stadium", "held", "?"], "guid": 9214}}
{"text": "county_public_safety: County_ID, Name, Population, Police_officers, Residents_per_officer, Case_burden, Crime_rate, Police_force, Location; city: City_ID, County_ID, Name, White, Black, Amerindian, Asian, Multiracial, Hispanic | Show the name of cities in the county that has the largest number of police officers.", "sql": "SELECT name FROM city WHERE county_ID = (SELECT county_ID FROM county_public_safety ORDER BY Police_officers DESC LIMIT 1)", "example": {"db_id": "county_public_safety", "query": "SELECT name FROM city WHERE county_ID  =  (SELECT county_ID FROM county_public_safety ORDER BY Police_officers DESC LIMIT 1)", "query_toks": ["SELECT", "name", "FROM", "city", "WHERE", "county_ID", "=", "(", "SELECT", "county_ID", "FROM", "county_public_safety", "ORDER", "BY", "Police_officers", "DESC", "LIMIT", "1", ")"], "query_toks_no_value": ["select", "name", "from", "city", "where", "county_id", "=", "(", "select", "county_id", "from", "county_public_safety", "order", "by", "police_officers", "desc", "limit", "value", ")"], "question": "Show the name of cities in the county that has the largest number of police officers.", "question_toks": ["Show", "the", "name", "of", "cities", "in", "the", "county", "that", "has", "the", "largest", "number", "of", "police", "officers", "."], "guid": 9215}}
{"text": "county_public_safety: County_ID, Name, Population, Police_officers, Residents_per_officer, Case_burden, Crime_rate, Police_force, Location; city: City_ID, County_ID, Name, White, Black, Amerindian, Asian, Multiracial, Hispanic | What are the names of cities that are in counties that have a crime rate below 100?", "sql": "SELECT name FROM city WHERE county_id IN (SELECT county_id FROM county_public_safety WHERE Crime_rate < 100)", "example": {"db_id": "county_public_safety", "query": "SELECT name FROM city WHERE county_id IN (SELECT county_id FROM county_public_safety WHERE Crime_rate  <  100)", "query_toks": ["SELECT", "name", "FROM", "city", "WHERE", "county_id", "IN", "(", "SELECT", "county_id", "FROM", "county_public_safety", "WHERE", "Crime_rate", "<", "100", ")"], "query_toks_no_value": ["select", "name", "from", "city", "where", "county_id", "in", "(", "select", "county_id", "from", "county_public_safety", "where", "crime_rate", "<", "value", ")"], "question": "What are the names of cities that are in counties that have a crime rate below 100?", "question_toks": ["What", "are", "the", "names", "of", "cities", "that", "are", "in", "counties", "that", "have", "a", "crime", "rate", "below", "100", "?"], "guid": 9216}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | What are the countries for appelations with at most 3 wines?", "sql": "SELECT T1.County FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation GROUP BY T2.Appelation HAVING count(*) <= 3", "example": {"db_id": "wine_1", "query": "SELECT T1.County FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation GROUP BY T2.Appelation HAVING count(*)  <=  3", "query_toks": ["SELECT", "T1.County", "FROM", "APPELLATIONS", "AS", "T1", "JOIN", "WINE", "AS", "T2", "ON", "T1.Appelation", "=", "T2.Appelation", "GROUP", "BY", "T2.Appelation", "HAVING", "count", "(", "*", ")", "<", "=", "3"], "query_toks_no_value": ["select", "t1", ".", "county", "from", "appellations", "as", "t1", "join", "wine", "as", "t2", "on", "t1", ".", "appelation", "=", "t2", ".", "appelation", "group", "by", "t2", ".", "appelation", "having", "count", "(", "*", ")", "<", "=", "value"], "question": "What are the countries for appelations with at most 3 wines?", "question_toks": ["What", "are", "the", "countries", "for", "appelations", "with", "at", "most", "3", "wines", "?"], "guid": 9217}}
{"text": "Third_Party_Companies: company_id, company_type, company_name, company_address, other_company_details; Maintenance_Contracts: maintenance_contract_id, maintenance_contract_company_id, contract_start_date, contract_end_date, other_contract_details; Parts: part_id, part_name, chargeable_yn, chargeable_amount, other_part_details; Skills: skill_id, skill_code, skill_description; Staff: staff_id, staff_name, gender, other_staff_details; Assets: asset_id, maintenance_contract_id, supplier_company_id, asset_details, asset_make, asset_model, asset_acquired_date, asset_disposed_date, other_asset_details; Asset_Parts: asset_id, part_id; Maintenance_Engineers: engineer_id, company_id, first_name, last_name, other_details; Engineer_Skills: engineer_id, skill_id; Fault_Log: fault_log_entry_id, asset_id, recorded_by_staff_id, fault_log_entry_datetime, fault_description, other_fault_details | Which staff have contacted which engineers? List the staff name and the engineer first name and last name.", "sql": "SELECT T1.staff_name, T3.first_name, T3.last_name FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id JOIN Maintenance_Engineers AS T3 ON T2.engineer_id = T3.engineer_id", "example": {"db_id": "assets_maintenance", "query": "SELECT T1.staff_name ,  T3.first_name ,  T3.last_name FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id  =  T2.contact_staff_id JOIN Maintenance_Engineers AS T3 ON T2.engineer_id  =  T3.engineer_id", "query_toks": ["SELECT", "T1.staff_name", ",", "T3.first_name", ",", "T3.last_name", "FROM", "Staff", "AS", "T1", "JOIN", "Engineer_Visits", "AS", "T2", "ON", "T1.staff_id", "=", "T2.contact_staff_id", "JOIN", "Maintenance_Engineers", "AS", "T3", "ON", "T2.engineer_id", "=", "T3.engineer_id"], "query_toks_no_value": ["select", "t1", ".", "staff_name", ",", "t3", ".", "first_name", ",", "t3", ".", "last_name", "from", "staff", "as", "t1", "join", "engineer_visits", "as", "t2", "on", "t1", ".", "staff_id", "=", "t2", ".", "contact_staff_id", "join", "maintenance_engineers", "as", "t3", "on", "t2", ".", "engineer_id", "=", "t3", ".", "engineer_id"], "question": "Which staff have contacted which engineers? List the staff name and the engineer first name and last name.", "question_toks": ["Which", "staff", "have", "contacted", "which", "engineers", "?", "List", "the", "staff", "name", "and", "the", "engineer", "first", "name", "and", "last", "name", "."], "guid": 9218}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | Find the top 3 wineries with the greatest number of wines made of white color grapes.", "sql": "SELECT T2.Winery FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.GRAPE = T2.GRAPE WHERE T1.Color = \"White\" GROUP BY T2.Winery ORDER BY count(*) DESC LIMIT 3", "example": {"db_id": "wine_1", "query": "SELECT T2.Winery FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.GRAPE  =  T2.GRAPE WHERE T1.Color  =  \"White\" GROUP BY T2.Winery ORDER BY count(*) DESC LIMIT 3", "query_toks": ["SELECT", "T2.Winery", "FROM", "GRAPES", "AS", "T1", "JOIN", "WINE", "AS", "T2", "ON", "T1.GRAPE", "=", "T2.GRAPE", "WHERE", "T1.Color", "=", "``", "White", "''", "GROUP", "BY", "T2.Winery", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "3"], "query_toks_no_value": ["select", "t2", ".", "winery", "from", "grapes", "as", "t1", "join", "wine", "as", "t2", "on", "t1", ".", "grape", "=", "t2", ".", "grape", "where", "t1", ".", "color", "=", "value", "group", "by", "t2", ".", "winery", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Find the top 3 wineries with the greatest number of wines made of white color grapes.", "question_toks": ["Find", "the", "top", "3", "wineries", "with", "the", "greatest", "number", "of", "wines", "made", "of", "white", "color", "grapes", "."], "guid": 9219}}
{"text": "Third_Party_Companies: company_id, company_type, company_name, company_address, other_company_details; Maintenance_Contracts: maintenance_contract_id, maintenance_contract_company_id, contract_start_date, contract_end_date, other_contract_details; Parts: part_id, part_name, chargeable_yn, chargeable_amount, other_part_details; Skills: skill_id, skill_code, skill_description; Staff: staff_id, staff_name, gender, other_staff_details; Assets: asset_id, maintenance_contract_id, supplier_company_id, asset_details, asset_make, asset_model, asset_acquired_date, asset_disposed_date, other_asset_details; Asset_Parts: asset_id, part_id; Maintenance_Engineers: engineer_id, company_id, first_name, last_name, other_details; Engineer_Skills: engineer_id, skill_id; Fault_Log: fault_log_entry_id, asset_id, recorded_by_staff_id, fault_log_entry_datetime, fault_description, other_fault_details | Which assets have 2 parts and have less than 2 fault logs? List the asset id and detail.", "sql": "SELECT T1.asset_id , T1.asset_details FROM Assets AS T1 JOIN Asset_Parts AS T2 ON T1.asset_id = T2.asset_id GROUP BY T1.asset_id HAVING count(*) = 2 INTERSECT SELECT T1.asset_id , T1.asset_details FROM Assets AS T1 JOIN Fault_Log AS T2 ON T1.asset_id = T2.asset_id GROUP BY T1.asset_id HAVING count(*) < 2", "example": {"db_id": "assets_maintenance", "query": "SELECT T1.asset_id ,  T1.asset_details FROM Assets AS T1 JOIN Asset_Parts AS T2 ON T1.asset_id  =  T2.asset_id GROUP BY T1.asset_id HAVING count(*)  =  2 INTERSECT SELECT T1.asset_id ,  T1.asset_details FROM Assets AS T1 JOIN Fault_Log AS T2 ON T1.asset_id  =  T2.asset_id GROUP BY T1.asset_id HAVING count(*)  <  2", "query_toks": ["SELECT", "T1.asset_id", ",", "T1.asset_details", "FROM", "Assets", "AS", "T1", "JOIN", "Asset_Parts", "AS", "T2", "ON", "T1.asset_id", "=", "T2.asset_id", "GROUP", "BY", "T1.asset_id", "HAVING", "count", "(", "*", ")", "=", "2", "INTERSECT", "SELECT", "T1.asset_id", ",", "T1.asset_details", "FROM", "Assets", "AS", "T1", "JOIN", "Fault_Log", "AS", "T2", "ON", "T1.asset_id", "=", "T2.asset_id", "GROUP", "BY", "T1.asset_id", "HAVING", "count", "(", "*", ")", "<", "2"], "query_toks_no_value": ["select", "t1", ".", "asset_id", ",", "t1", ".", "asset_details", "from", "assets", "as", "t1", "join", "asset_parts", "as", "t2", "on", "t1", ".", "asset_id", "=", "t2", ".", "asset_id", "group", "by", "t1", ".", "asset_id", "having", "count", "(", "*", ")", "=", "value", "intersect", "select", "t1", ".", "asset_id", ",", "t1", ".", "asset_details", "from", "assets", "as", "t1", "join", "fault_log", "as", "t2", "on", "t1", ".", "asset_id", "=", "t2", ".", "asset_id", "group", "by", "t1", ".", "asset_id", "having", "count", "(", "*", ")", "<", "value"], "question": "Which assets have 2 parts and have less than 2 fault logs? List the asset id and detail.", "question_toks": ["Which", "assets", "have", "2", "parts", "and", "have", "less", "than", "2", "fault", "logs", "?", "List", "the", "asset", "id", "and", "detail", "."], "guid": 9220}}
{"text": "repair: repair_ID, name, Launch_Date, Notes; machine: Machine_ID, Making_Year, Class, Team, Machine_series, value_points, quality_rank; technician: technician_id, Name, Team, Starting_Year, Age; repair_assignment: technician_id, repair_ID, Machine_ID | What are the names of the technicians aged either 36 or 37?", "sql": "SELECT Name FROM technician WHERE Age = 36 OR Age = 37", "example": {"db_id": "machine_repair", "query": "SELECT Name FROM technician WHERE Age  =  36 OR Age  =  37", "query_toks": ["SELECT", "Name", "FROM", "technician", "WHERE", "Age", "=", "36", "OR", "Age", "=", "37"], "query_toks_no_value": ["select", "name", "from", "technician", "where", "age", "=", "value", "or", "age", "=", "value"], "question": "What are the names of the technicians aged either 36 or 37?", "question_toks": ["What", "are", "the", "names", "of", "the", "technicians", "aged", "either", "36", "or", "37", "?"], "guid": 9221}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | What is the county that produces the most wines scoring higher than 90?", "sql": "SELECT T1.County FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation WHERE T2.Score > 90 GROUP BY T1.County ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "wine_1", "query": "SELECT T1.County FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T2.Score  >  90 GROUP BY T1.County ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.County", "FROM", "APPELLATIONS", "AS", "T1", "JOIN", "WINE", "AS", "T2", "ON", "T1.Appelation", "=", "T2.Appelation", "WHERE", "T2.Score", ">", "90", "GROUP", "BY", "T1.County", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "county", "from", "appellations", "as", "t1", "join", "wine", "as", "t2", "on", "t1", ".", "appelation", "=", "t2", ".", "appelation", "where", "t2", ".", "score", ">", "value", "group", "by", "t1", ".", "county", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the county that produces the most wines scoring higher than 90?", "question_toks": ["What", "is", "the", "county", "that", "produces", "the", "most", "wines", "scoring", "higher", "than", "90", "?"], "guid": 9222}}
{"text": "stadium: id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage; game: stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition; injury_accident: game_id, id, Player, Injury, Number_of_matches, Source | How many games has each stadium held?", "sql": "SELECT T1.id , count(*) FROM stadium AS T1 JOIN game AS T2 ON T1.id = T2.stadium_id GROUP BY T1.id", "example": {"db_id": "game_injury", "query": "SELECT T1.id ,  count(*) FROM stadium AS T1 JOIN game AS T2 ON T1.id  =  T2.stadium_id GROUP BY T1.id", "query_toks": ["SELECT", "T1.id", ",", "count", "(", "*", ")", "FROM", "stadium", "AS", "T1", "JOIN", "game", "AS", "T2", "ON", "T1.id", "=", "T2.stadium_id", "GROUP", "BY", "T1.id"], "query_toks_no_value": ["select", "t1", ".", "id", ",", "count", "(", "*", ")", "from", "stadium", "as", "t1", "join", "game", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "stadium_id", "group", "by", "t1", ".", "id"], "question": "How many games has each stadium held?", "question_toks": ["How", "many", "games", "has", "each", "stadium", "held", "?"], "guid": 9223}}
{"text": "Third_Party_Companies: company_id, company_type, company_name, company_address, other_company_details; Maintenance_Contracts: maintenance_contract_id, maintenance_contract_company_id, contract_start_date, contract_end_date, other_contract_details; Parts: part_id, part_name, chargeable_yn, chargeable_amount, other_part_details; Skills: skill_id, skill_code, skill_description; Staff: staff_id, staff_name, gender, other_staff_details; Assets: asset_id, maintenance_contract_id, supplier_company_id, asset_details, asset_make, asset_model, asset_acquired_date, asset_disposed_date, other_asset_details; Asset_Parts: asset_id, part_id; Maintenance_Engineers: engineer_id, company_id, first_name, last_name, other_details; Engineer_Skills: engineer_id, skill_id; Fault_Log: fault_log_entry_id, asset_id, recorded_by_staff_id, fault_log_entry_datetime, fault_description, other_fault_details | Which fault log included the most number of faulty parts? List the fault log id, description and record time.", "sql": "SELECT T1.fault_log_entry_id , T1.fault_description , T1.fault_log_entry_datetime FROM Fault_Log AS T1 JOIN Fault_Log_Parts AS T2 ON T1.fault_log_entry_id = T2.fault_log_entry_id GROUP BY T1.fault_log_entry_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "assets_maintenance", "query": "SELECT T1.fault_log_entry_id ,  T1.fault_description ,  T1.fault_log_entry_datetime FROM Fault_Log AS T1 JOIN Fault_Log_Parts AS T2 ON T1.fault_log_entry_id  =  T2.fault_log_entry_id GROUP BY T1.fault_log_entry_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.fault_log_entry_id", ",", "T1.fault_description", ",", "T1.fault_log_entry_datetime", "FROM", "Fault_Log", "AS", "T1", "JOIN", "Fault_Log_Parts", "AS", "T2", "ON", "T1.fault_log_entry_id", "=", "T2.fault_log_entry_id", "GROUP", "BY", "T1.fault_log_entry_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "fault_log_entry_id", ",", "t1", ".", "fault_description", ",", "t1", ".", "fault_log_entry_datetime", "from", "fault_log", "as", "t1", "join", "fault_log_parts", "as", "t2", "on", "t1", ".", "fault_log_entry_id", "=", "t2", ".", "fault_log_entry_id", "group", "by", "t1", ".", "fault_log_entry_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which fault log included the most number of faulty parts? List the fault log id, description and record time.", "question_toks": ["Which", "fault", "log", "included", "the", "most", "number", "of", "faulty", "parts", "?", "List", "the", "fault", "log", "id", ",", "description", "and", "record", "time", "."], "guid": 9224}}
{"text": "people: People_ID, Name, Country, Is_Male, Age; church: Church_ID, Name, Organized_by, Open_Date, Continuation_of; wedding: Church_ID, Male_ID, Female_ID, Year | Show all church names except for those that had a wedding in year 2015.", "sql": "SELECT name FROM church EXCEPT SELECT T1.name FROM church AS T1 JOIN wedding AS T2 ON T1.church_id = T2.church_id WHERE T2.year = 2015", "example": {"db_id": "wedding", "query": "SELECT name FROM church EXCEPT SELECT T1.name FROM church AS T1 JOIN wedding AS T2 ON T1.church_id  =  T2.church_id WHERE T2.year  =  2015", "query_toks": ["SELECT", "name", "FROM", "church", "EXCEPT", "SELECT", "T1.name", "FROM", "church", "AS", "T1", "JOIN", "wedding", "AS", "T2", "ON", "T1.church_id", "=", "T2.church_id", "WHERE", "T2.year", "=", "2015"], "query_toks_no_value": ["select", "name", "from", "church", "except", "select", "t1", ".", "name", "from", "church", "as", "t1", "join", "wedding", "as", "t2", "on", "t1", ".", "church_id", "=", "t2", ".", "church_id", "where", "t2", ".", "year", "=", "value"], "question": "Show all church names except for those that had a wedding in year 2015.", "question_toks": ["Show", "all", "church", "names", "except", "for", "those", "that", "had", "a", "wedding", "in", "year", "2015", "."], "guid": 9225}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | What are the names of wines whose production year are before the year of all wines by Brander winery?", "sql": "SELECT Name FROM WINE WHERE YEAR < (SELECT min(YEAR) FROM WINE WHERE Winery = \"Brander\")", "example": {"db_id": "wine_1", "query": "SELECT Name FROM WINE WHERE YEAR  <  (SELECT min(YEAR) FROM WINE WHERE Winery  =  \"Brander\")", "query_toks": ["SELECT", "Name", "FROM", "WINE", "WHERE", "YEAR", "<", "(", "SELECT", "min", "(", "YEAR", ")", "FROM", "WINE", "WHERE", "Winery", "=", "``", "Brander", "''", ")"], "query_toks_no_value": ["select", "name", "from", "wine", "where", "year", "<", "(", "select", "min", "(", "year", ")", "from", "wine", "where", "winery", "=", "value", ")"], "question": "What are the names of wines whose production year are before the year of all wines by Brander winery?", "question_toks": ["What", "are", "the", "names", "of", "wines", "whose", "production", "year", "are", "before", "the", "year", "of", "all", "wines", "by", "Brander", "winery", "?"], "guid": 9226}}
{"text": "people: People_ID, Name, Country, Is_Male, Age; church: Church_ID, Name, Organized_by, Open_Date, Continuation_of; wedding: Church_ID, Male_ID, Female_ID, Year | Show the church names for the weddings of all people older than 30.", "sql": "SELECT T4.name FROM wedding AS T1 JOIN people AS T2 ON T1.male_id = T2.people_id JOIN people AS T3 ON T1.female_id = T3.people_id JOIN church AS T4 ON T4.church_id = T1.church_id WHERE T2.age > 30 OR T3.age > 30", "example": {"db_id": "wedding", "query": "SELECT T4.name FROM wedding AS T1 JOIN people AS T2 ON T1.male_id  =  T2.people_id JOIN people AS T3 ON T1.female_id  =  T3.people_id JOIN church AS T4 ON T4.church_id  =  T1.church_id WHERE T2.age  >  30 OR T3.age  >  30", "query_toks": ["SELECT", "T4.name", "FROM", "wedding", "AS", "T1", "JOIN", "people", "AS", "T2", "ON", "T1.male_id", "=", "T2.people_id", "JOIN", "people", "AS", "T3", "ON", "T1.female_id", "=", "T3.people_id", "JOIN", "church", "AS", "T4", "ON", "T4.church_id", "=", "T1.church_id", "WHERE", "T2.age", ">", "30", "OR", "T3.age", ">", "30"], "query_toks_no_value": ["select", "t4", ".", "name", "from", "wedding", "as", "t1", "join", "people", "as", "t2", "on", "t1", ".", "male_id", "=", "t2", ".", "people_id", "join", "people", "as", "t3", "on", "t1", ".", "female_id", "=", "t3", ".", "people_id", "join", "church", "as", "t4", "on", "t4", ".", "church_id", "=", "t1", ".", "church_id", "where", "t2", ".", "age", ">", "value", "or", "t3", ".", "age", ">", "value"], "question": "Show the church names for the weddings of all people older than 30.", "question_toks": ["Show", "the", "church", "names", "for", "the", "weddings", "of", "all", "people", "older", "than", "30", "."], "guid": 9227}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | Find the appelations that produce wines after the year of 2008 but not in Central Coast area.", "sql": "SELECT Appelation FROM WINE WHERE YEAR  >  2008 EXCEPT SELECT Appelation FROM APPELLATIONS WHERE Area  =  \"Central Coast\"", "example": {"db_id": "wine_1", "query": "SELECT Appelation FROM WINE WHERE YEAR  >  2008 EXCEPT SELECT Appelation FROM APPELLATIONS WHERE Area  =  \"Central Coast\"", "query_toks": ["SELECT", "Appelation", "FROM", "WINE", "WHERE", "YEAR", ">", "2008", "EXCEPT", "SELECT", "Appelation", "FROM", "APPELLATIONS", "WHERE", "Area", "=", "``", "Central", "Coast", "''"], "query_toks_no_value": ["select", "appelation", "from", "wine", "where", "year", ">", "value", "except", "select", "appelation", "from", "appellations", "where", "area", "=", "value"], "question": "Find the appelations that produce wines after the year of 2008 but not in Central Coast area.", "question_toks": ["Find", "the", "appelations", "that", "produce", "wines", "after", "the", "year", "of", "2008", "but", "not", "in", "Central", "Coast", "area", "."], "guid": 9228}}
{"text": "people: People_ID, Name, Country, Is_Male, Age; church: Church_ID, Name, Organized_by, Open_Date, Continuation_of; wedding: Church_ID, Male_ID, Female_ID, Year | Show the minimum, maximum, and average age for all people.", "sql": "SELECT min(age) , max(age) , avg(age) FROM people", "example": {"db_id": "wedding", "query": "SELECT min(age) ,  max(age) ,  avg(age) FROM people", "query_toks": ["SELECT", "min", "(", "age", ")", ",", "max", "(", "age", ")", ",", "avg", "(", "age", ")", "FROM", "people"], "query_toks_no_value": ["select", "min", "(", "age", ")", ",", "max", "(", "age", ")", ",", "avg", "(", "age", ")", "from", "people"], "question": "Show the minimum, maximum, and average age for all people.", "question_toks": ["Show", "the", "minimum", ",", "maximum", ",", "and", "average", "age", "for", "all", "people", "."], "guid": 9229}}
{"text": "Ref_Address_Types: address_type_code, address_type_description; Ref_Detention_Type: detention_type_code, detention_type_description; Ref_Incident_Type: incident_type_code, incident_type_description; Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Students: student_id, address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, date_first_rental, date_left_university, other_student_details; Teachers: teacher_id, address_id, first_name, middle_name, last_name, gender, cell_mobile_number, email_address, other_details; Assessment_Notes: notes_id, student_id, teacher_id, date_of_notes, text_of_notes, other_details; Behavior_Incident: incident_id, incident_type_code, student_id, date_incident_start, date_incident_end, incident_summary, recommendations, other_details; Detention: detention_id, detention_type_code, teacher_id, datetime_detention_start, datetime_detention_end, detention_summary, other_details; Student_Addresses: student_id, address_id, date_address_from, date_address_to, monthly_rental, other_details | What is the email of the student with first name \"Emma\" and last name \"Rohan\"?", "sql": "SELECT email_address FROM Students WHERE first_name = \"Emma\" AND last_name = \"Rohan\"", "example": {"db_id": "behavior_monitoring", "query": "SELECT email_address FROM Students WHERE first_name  =  \"Emma\" AND last_name  =  \"Rohan\"", "query_toks": ["SELECT", "email_address", "FROM", "Students", "WHERE", "first_name", "=", "``", "Emma", "''", "AND", "last_name", "=", "``", "Rohan", "''"], "query_toks_no_value": ["select", "email_address", "from", "students", "where", "first_name", "=", "value", "and", "last_name", "=", "value"], "question": "What is the email of the student with first name \"Emma\" and last name \"Rohan\"?", "question_toks": ["What", "is", "the", "email", "of", "the", "student", "with", "first", "name", "``", "Emma", "''", "and", "last", "name", "``", "Rohan", "''", "?"], "guid": 9230}}
{"text": "county_public_safety: County_ID, Name, Population, Police_officers, Residents_per_officer, Case_burden, Crime_rate, Police_force, Location; city: City_ID, County_ID, Name, White, Black, Amerindian, Asian, Multiracial, Hispanic | List the distinct police forces of counties whose location is not on east side.", "sql": "SELECT DISTINCT Police_force FROM county_public_safety WHERE LOCATION != \"East\"", "example": {"db_id": "county_public_safety", "query": "SELECT DISTINCT Police_force FROM county_public_safety WHERE LOCATION != \"East\"", "query_toks": ["SELECT", "DISTINCT", "Police_force", "FROM", "county_public_safety", "WHERE", "LOCATION", "!", "=", "``", "East", "''"], "query_toks_no_value": ["select", "distinct", "police_force", "from", "county_public_safety", "where", "location", "!", "=", "value"], "question": "List the distinct police forces of counties whose location is not on east side.", "question_toks": ["List", "the", "distinct", "police", "forces", "of", "counties", "whose", "location", "is", "not", "on", "east", "side", "."], "guid": 9231}}
{"text": "city: City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking; farm: Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats; farm_competition: Competition_ID, Year, Theme, Host_city_ID, Hosts; competition_record: Competition_ID, Farm_ID, Rank | Return the themes of farm competitions, sorted by year ascending.", "sql": "SELECT Theme FROM farm_competition ORDER BY Year ASC", "example": {"db_id": "farm", "query": "SELECT Theme FROM farm_competition ORDER BY YEAR ASC", "query_toks": ["SELECT", "Theme", "FROM", "farm_competition", "ORDER", "BY", "YEAR", "ASC"], "query_toks_no_value": ["select", "theme", "from", "farm_competition", "order", "by", "year", "asc"], "question": "Return the themes of farm competitions, sorted by year ascending.", "question_toks": ["Return", "the", "themes", "of", "farm", "competitions", ",", "sorted", "by", "year", "ascending", "."], "guid": 9232}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | Which winery is the wine that has the highest score from?", "sql": "SELECT Winery FROM WINE ORDER BY SCORE LIMIT 1", "example": {"db_id": "wine_1", "query": "SELECT Winery FROM WINE ORDER BY SCORE LIMIT 1", "query_toks": ["SELECT", "Winery", "FROM", "WINE", "ORDER", "BY", "SCORE", "LIMIT", "1"], "query_toks_no_value": ["select", "winery", "from", "wine", "order", "by", "score", "limit", "value"], "question": "Which winery is the wine that has the highest score from?", "question_toks": ["Which", "winery", "is", "the", "wine", "that", "has", "the", "highest", "score", "from", "?"], "guid": 9233}}
{"text": "Ref_Address_Types: address_type_code, address_type_description; Ref_Detention_Type: detention_type_code, detention_type_description; Ref_Incident_Type: incident_type_code, incident_type_description; Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Students: student_id, address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, date_first_rental, date_left_university, other_student_details; Teachers: teacher_id, address_id, first_name, middle_name, last_name, gender, cell_mobile_number, email_address, other_details; Assessment_Notes: notes_id, student_id, teacher_id, date_of_notes, text_of_notes, other_details; Behavior_Incident: incident_id, incident_type_code, student_id, date_incident_start, date_incident_end, incident_summary, recommendations, other_details; Detention: detention_id, detention_type_code, teacher_id, datetime_detention_start, datetime_detention_end, detention_summary, other_details; Student_Addresses: student_id, address_id, date_address_from, date_address_to, monthly_rental, other_details | What are the id and first name of the student whose addresses have the highest average monthly rental?", "sql": "SELECT T1.student_id, T2.first_name FROM Student_Addresses AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY AVG(monthly_rental) DESC LIMIT 1", "example": {"db_id": "behavior_monitoring", "query": "SELECT T1.student_id ,  T2.first_name FROM Student_Addresses AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY AVG(monthly_rental) DESC LIMIT 1", "query_toks": ["SELECT", "T1.student_id", ",", "T2.first_name", "FROM", "Student_Addresses", "AS", "T1", "JOIN", "Students", "AS", "T2", "ON", "T1.student_id", "=", "T2.student_id", "GROUP", "BY", "T1.student_id", "ORDER", "BY", "AVG", "(", "monthly_rental", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "student_id", ",", "t2", ".", "first_name", "from", "student_addresses", "as", "t1", "join", "students", "as", "t2", "on", "t1", ".", "student_id", "=", "t2", ".", "student_id", "group", "by", "t1", ".", "student_id", "order", "by", "avg", "(", "monthly_rental", ")", "desc", "limit", "value"], "question": "What are the id and first name of the student whose addresses have the highest average monthly rental?", "question_toks": ["What", "are", "the", "id", "and", "first", "name", "of", "the", "student", "whose", "addresses", "have", "the", "highest", "average", "monthly", "rental", "?"], "guid": 9234}}
{"text": "city: City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking; farm: Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats; farm_competition: Competition_ID, Year, Theme, Host_city_ID, Hosts; competition_record: Competition_ID, Farm_ID, Rank | Show the years and the official names of the host cities of competitions.", "sql": "SELECT T2.Year, T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID", "example": {"db_id": "farm", "query": "SELECT T2.Year ,  T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID", "query_toks": ["SELECT", "T2.Year", ",", "T1.Official_Name", "FROM", "city", "AS", "T1", "JOIN", "farm_competition", "AS", "T2", "ON", "T1.City_ID", "=", "T2.Host_city_ID"], "query_toks_no_value": ["select", "t2", ".", "year", ",", "t1", ".", "official_name", "from", "city", "as", "t1", "join", "farm_competition", "as", "t2", "on", "t1", ".", "city_id", "=", "t2", ".", "host_city_id"], "question": "Show the years and the official names of the host cities of competitions.", "question_toks": ["Show", "the", "years", "and", "the", "official", "names", "of", "the", "host", "cities", "of", "competitions", "."], "guid": 9235}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | What are the names of wines that are more expensive then all wines made in the year 2006?", "sql": "SELECT Name FROM WINE WHERE Price > (SELECT max(Price) FROM WINE WHERE YEAR = 2006)", "example": {"db_id": "wine_1", "query": "SELECT Name FROM WINE WHERE Price  >  (SELECT max(Price) FROM WINE WHERE YEAR  =  2006)", "query_toks": ["SELECT", "Name", "FROM", "WINE", "WHERE", "Price", ">", "(", "SELECT", "max", "(", "Price", ")", "FROM", "WINE", "WHERE", "YEAR", "=", "2006", ")"], "query_toks_no_value": ["select", "name", "from", "wine", "where", "price", ">", "(", "select", "max", "(", "price", ")", "from", "wine", "where", "year", "=", "value", ")"], "question": "What are the names of wines that are more expensive then all wines made in the year 2006?", "question_toks": ["What", "are", "the", "names", "of", "wines", "that", "are", "more", "expensive", "then", "all", "wines", "made", "in", "the", "year", "2006", "?"], "guid": 9236}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | List the names of all distinct wines in alphabetical order.", "sql": "SELECT DISTINCT Name FROM WINE ORDER BY Name", "example": {"db_id": "wine_1", "query": "SELECT DISTINCT Name FROM WINE ORDER BY Name", "query_toks": ["SELECT", "DISTINCT", "Name", "FROM", "WINE", "ORDER", "BY", "Name"], "query_toks_no_value": ["select", "distinct", "name", "from", "wine", "order", "by", "name"], "question": "List the names of all distinct wines in alphabetical order.", "question_toks": ["List", "the", "names", "of", "all", "distinct", "wines", "in", "alphabetical", "order", "."], "guid": 9237}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | What are the grapes, wineries and years for wines with price higher than 100, sorted by year?", "sql": "SELECT Grape, Winery, YEAR FROM WINE WHERE Price > 100 ORDER BY YEAR", "example": {"db_id": "wine_1", "query": "SELECT Grape ,  Winery ,  YEAR FROM WINE WHERE Price  >   100 ORDER BY YEAR", "query_toks": ["SELECT", "Grape", ",", "Winery", ",", "YEAR", "FROM", "WINE", "WHERE", "Price", ">", "100", "ORDER", "BY", "YEAR"], "query_toks_no_value": ["select", "grape", ",", "winery", ",", "year", "from", "wine", "where", "price", ">", "value", "order", "by", "year"], "question": "What are the grapes, wineries and years for wines with price higher than 100, sorted by year?", "question_toks": ["What", "are", "the", "grapes", ",", "wineries", "and", "years", "for", "wines", "with", "price", "higher", "than", "100", ",", "sorted", "by", "year", "?"], "guid": 9238}}
{"text": "people: People_ID, District, Name, Party, Age; debate: Debate_ID, Date, Venue, Num_of_Audience; debate_people: Debate_ID, Affirmative, Negative, If_Affirmative_Win | Show the names of people and the number of times they have been on the affirmative side of debates.", "sql": "SELECT T2.Name, COUNT(*) FROM debate_people AS T1 JOIN people AS T2 ON T1.Affirmative = T2.People_ID GROUP BY T2.Name", "example": {"db_id": "debate", "query": "SELECT T2.Name ,  COUNT(*) FROM debate_people AS T1 JOIN people AS T2 ON T1.Affirmative  =  T2.People_ID GROUP BY T2.Name", "query_toks": ["SELECT", "T2.Name", ",", "COUNT", "(", "*", ")", "FROM", "debate_people", "AS", "T1", "JOIN", "people", "AS", "T2", "ON", "T1.Affirmative", "=", "T2.People_ID", "GROUP", "BY", "T2.Name"], "query_toks_no_value": ["select", "t2", ".", "name", ",", "count", "(", "*", ")", "from", "debate_people", "as", "t1", "join", "people", "as", "t2", "on", "t1", ".", "affirmative", "=", "t2", ".", "people_id", "group", "by", "t2", ".", "name"], "question": "Show the names of people and the number of times they have been on the affirmative side of debates.", "question_toks": ["Show", "the", "names", "of", "people", "and", "the", "number", "of", "times", "they", "have", "been", "on", "the", "affirmative", "side", "of", "debates", "."], "guid": 9239}}
{"text": "people: People_ID, Name, Country, Is_Male, Age; church: Church_ID, Name, Organized_by, Open_Date, Continuation_of; wedding: Church_ID, Male_ID, Female_ID, Year | Show the opening year in whcih at least two churches opened.", "sql": "SELECT open_date FROM church GROUP BY open_date HAVING count(*) >= 2", "example": {"db_id": "wedding", "query": "SELECT open_date FROM church GROUP BY open_date HAVING count(*)  >=  2", "query_toks": ["SELECT", "open_date", "FROM", "church", "GROUP", "BY", "open_date", "HAVING", "count", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "open_date", "from", "church", "group", "by", "open_date", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "Show the opening year in whcih at least two churches opened.", "question_toks": ["Show", "the", "opening", "year", "in", "whcih", "at", "least", "two", "churches", "opened", "."], "guid": 9240}}
{"text": "Third_Party_Companies: company_id, company_type, company_name, company_address, other_company_details; Maintenance_Contracts: maintenance_contract_id, maintenance_contract_company_id, contract_start_date, contract_end_date, other_contract_details; Parts: part_id, part_name, chargeable_yn, chargeable_amount, other_part_details; Skills: skill_id, skill_code, skill_description; Staff: staff_id, staff_name, gender, other_staff_details; Assets: asset_id, maintenance_contract_id, supplier_company_id, asset_details, asset_make, asset_model, asset_acquired_date, asset_disposed_date, other_asset_details; Asset_Parts: asset_id, part_id; Maintenance_Engineers: engineer_id, company_id, first_name, last_name, other_details; Engineer_Skills: engineer_id, skill_id; Fault_Log: fault_log_entry_id, asset_id, recorded_by_staff_id, fault_log_entry_datetime, fault_description, other_fault_details | Which part has the least chargeable amount? List the part id and amount.", "sql": "SELECT part_id , chargeable_amount FROM Parts ORDER BY chargeable_amount ASC LIMIT 1", "example": {"db_id": "assets_maintenance", "query": "SELECT part_id ,  chargeable_amount FROM Parts ORDER BY chargeable_amount ASC LIMIT 1", "query_toks": ["SELECT", "part_id", ",", "chargeable_amount", "FROM", "Parts", "ORDER", "BY", "chargeable_amount", "ASC", "LIMIT", "1"], "query_toks_no_value": ["select", "part_id", ",", "chargeable_amount", "from", "parts", "order", "by", "chargeable_amount", "asc", "limit", "value"], "question": "Which part has the least chargeable amount? List the part id and amount.", "question_toks": ["Which", "part", "has", "the", "least", "chargeable", "amount", "?", "List", "the", "part", "id", "and", "amount", "."], "guid": 9241}}
{"text": "stadium: id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage; game: stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition; injury_accident: game_id, id, Player, Injury, Number_of_matches, Source | What are the id and name of the stadium where the most injury accidents happened?", "sql": "SELECT T1.id, T1.name FROM stadium AS T1 JOIN game AS T2 ON T1.id = T2.stadium_id JOIN injury_accident AS T3 ON T2.id = T3.game_id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 1", "example": {"db_id": "game_injury", "query": "SELECT T1.id ,  T1.name FROM stadium AS T1 JOIN game AS T2 ON T1.id  =  T2.stadium_id JOIN injury_accident AS T3 ON T2.id  =  T3.game_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.id", ",", "T1.name", "FROM", "stadium", "AS", "T1", "JOIN", "game", "AS", "T2", "ON", "T1.id", "=", "T2.stadium_id", "JOIN", "injury_accident", "AS", "T3", "ON", "T2.id", "=", "T3.game_id", "GROUP", "BY", "T1.id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "id", ",", "t1", ".", "name", "from", "stadium", "as", "t1", "join", "game", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "stadium_id", "join", "injury_accident", "as", "t3", "on", "t2", ".", "id", "=", "t3", ".", "game_id", "group", "by", "t1", ".", "id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What are the id and name of the stadium where the most injury accidents happened?", "question_toks": ["What", "are", "the", "id", "and", "name", "of", "the", "stadium", "where", "the", "most", "injury", "accidents", "happened", "?"], "guid": 9242}}
{"text": "city: City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking; farm: Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats; farm_competition: Competition_ID, Year, Theme, Host_city_ID, Hosts; competition_record: Competition_ID, Farm_ID, Rank | Return the hosts of competitions for which the theme is not Aliens?", "sql": "SELECT Hosts FROM farm_competition WHERE Theme != 'Aliens'", "example": {"db_id": "farm", "query": "SELECT Hosts FROM farm_competition WHERE Theme !=  'Aliens'", "query_toks": ["SELECT", "Hosts", "FROM", "farm_competition", "WHERE", "Theme", "!", "=", "'Aliens", "'"], "query_toks_no_value": ["select", "hosts", "from", "farm_competition", "where", "theme", "!", "=", "value"], "question": "Return the hosts of competitions for which the theme is not Aliens?", "question_toks": ["Return", "the", "hosts", "of", "competitions", "for", "which", "the", "theme", "is", "not", "Aliens", "?"], "guid": 9243}}
{"text": "people: People_ID, District, Name, Party, Age; debate: Debate_ID, Date, Venue, Num_of_Audience; debate_people: Debate_ID, Affirmative, Negative, If_Affirmative_Win | How many debates are there?", "sql": "SELECT COUNT(*) FROM debate", "example": {"db_id": "debate", "query": "SELECT count(*) FROM debate", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "debate"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "debate"], "question": "How many debates are there?", "question_toks": ["How", "many", "debates", "are", "there", "?"], "guid": 9244}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | Give the average price and case of wines made from Zinfandel grapes in the year 2009.", "sql": "SELECT AVG(Price) , AVG(Cases) FROM WINE WHERE YEAR = 2009 AND Grape = \"Zinfandel\"", "example": {"db_id": "wine_1", "query": "SELECT AVG(Price) ,  AVG(Cases) FROM WINE WHERE YEAR  =  2009 AND Grape  =  \"Zinfandel\"", "query_toks": ["SELECT", "AVG", "(", "Price", ")", ",", "AVG", "(", "Cases", ")", "FROM", "WINE", "WHERE", "YEAR", "=", "2009", "AND", "Grape", "=", "``", "Zinfandel", "''"], "query_toks_no_value": ["select", "avg", "(", "price", ")", ",", "avg", "(", "cases", ")", "from", "wine", "where", "year", "=", "value", "and", "grape", "=", "value"], "question": "Give the average price and case of wines made from Zinfandel grapes in the year 2009.", "question_toks": ["Give", "the", "average", "price", "and", "case", "of", "wines", "made", "from", "Zinfandel", "grapes", "in", "the", "year", "2009", "."], "guid": 9245}}
{"text": "battle: id, name, date, bulgarian_commander, latin_commander, result; ship: lost_in_battle, id, name, tonnage, ship_type, location, disposition_of_ship; death: caused_by_ship_id, id, note, killed, injured | List the name and tonnage ordered by in descending alphaetical order for the names.", "sql": "SELECT name, tonnage FROM ship ORDER BY name DESC", "example": {"db_id": "battle_death", "query": "SELECT name ,  tonnage FROM ship ORDER BY name DESC", "query_toks": ["SELECT", "name", ",", "tonnage", "FROM", "ship", "ORDER", "BY", "name", "DESC"], "query_toks_no_value": ["select", "name", ",", "tonnage", "from", "ship", "order", "by", "name", "desc"], "question": "List the name and tonnage ordered by in descending alphaetical order for the names.", "question_toks": ["List", "the", "name", "and", "tonnage", "ordered", "by", "in", "descending", "alphaetical", "order", "for", "the", "names", "."], "guid": 9246}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | What are the names of wines, sorted by price ascending?", "sql": "SELECT Name FROM Wine ORDER BY Price ASC", "example": {"db_id": "wine_1", "query": "SELECT DISTINCT Name FROM WINE ORDER BY price", "query_toks": ["SELECT", "DISTINCT", "Name", "FROM", "WINE", "ORDER", "BY", "price"], "query_toks_no_value": ["select", "distinct", "name", "from", "wine", "order", "by", "price"], "question": "What are the names of wines, sorted by price ascending?", "question_toks": ["What", "are", "the", "names", "of", "wines", ",", "sorted", "by", "price", "ascending", "?"], "guid": 9247}}
{"text": "architect: id, name, nationality, gender; bridge: architect_id, id, name, location, length_meters, length_feet; mill: architect_id, id, location, name, type, built_year, notes | What are the ids and names of the architects who built at least 3 bridges ?", "sql": "SELECT T1.id, T1.name FROM architect AS T1 JOIN bridge AS T2 ON T1.id = T2.architect_id GROUP BY T1.id HAVING COUNT(*) >= 3", "example": {"db_id": "architecture", "query": "SELECT T1.id ,  T1.name FROM architect AS T1 JOIN bridge AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id HAVING count(*)  >=  3", "query_toks": ["SELECT", "T1.id", ",", "T1.name", "FROM", "architect", "AS", "T1", "JOIN", "bridge", "AS", "T2", "ON", "T1.id", "=", "T2.architect_id", "GROUP", "BY", "T1.id", "HAVING", "count", "(", "*", ")", ">", "=", "3"], "query_toks_no_value": ["select", "t1", ".", "id", ",", "t1", ".", "name", "from", "architect", "as", "t1", "join", "bridge", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "architect_id", "group", "by", "t1", ".", "id", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "What are the ids and names of the architects who built at least 3 bridges ?", "question_toks": ["What", "are", "the", "ids", "and", "names", "of", "the", "architects", "who", "built", "at", "least", "3", "bridges", "?"], "guid": 9248}}
{"text": "city: City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking; farm: Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats; farm_competition: Competition_ID, Year, Theme, Host_city_ID, Hosts; competition_record: Competition_ID, Farm_ID, Rank | Show the official names of the cities that have hosted more than one competition.", "sql": "SELECT T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID GROUP BY T2.Host_city_ID HAVING COUNT(*) > 1", "example": {"db_id": "farm", "query": "SELECT T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID HAVING COUNT(*)  >  1", "query_toks": ["SELECT", "T1.Official_Name", "FROM", "city", "AS", "T1", "JOIN", "farm_competition", "AS", "T2", "ON", "T1.City_ID", "=", "T2.Host_city_ID", "GROUP", "BY", "T2.Host_city_ID", "HAVING", "COUNT", "(", "*", ")", ">", "1"], "query_toks_no_value": ["select", "t1", ".", "official_name", "from", "city", "as", "t1", "join", "farm_competition", "as", "t2", "on", "t1", ".", "city_id", "=", "t2", ".", "host_city_id", "group", "by", "t2", ".", "host_city_id", "having", "count", "(", "*", ")", ">", "value"], "question": "Show the official names of the cities that have hosted more than one competition.", "question_toks": ["Show", "the", "official", "names", "of", "the", "cities", "that", "have", "hosted", "more", "than", "one", "competition", "."], "guid": 9249}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | Find the wineries that have at least four wines.", "sql": "SELECT Winery FROM WINE GROUP BY Winery HAVING count(*) >= 4", "example": {"db_id": "wine_1", "query": "SELECT Winery FROM WINE GROUP BY Winery HAVING count(*)  >=  4", "query_toks": ["SELECT", "Winery", "FROM", "WINE", "GROUP", "BY", "Winery", "HAVING", "count", "(", "*", ")", ">", "=", "4"], "query_toks_no_value": ["select", "winery", "from", "wine", "group", "by", "winery", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "Find the wineries that have at least four wines.", "question_toks": ["Find", "the", "wineries", "that", "have", "at", "least", "four", "wines", "."], "guid": 9250}}
{"text": "city: City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking; farm: Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats; farm_competition: Competition_ID, Year, Theme, Host_city_ID, Hosts; competition_record: Competition_ID, Farm_ID, Rank | What is the official name and status of the city with the most residents?", "sql": "SELECT Official_Name, Status FROM city ORDER BY Population DESC LIMIT 1", "example": {"db_id": "farm", "query": "SELECT Official_Name ,  Status FROM city ORDER BY Population DESC LIMIT 1", "query_toks": ["SELECT", "Official_Name", ",", "Status", "FROM", "city", "ORDER", "BY", "Population", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "official_name", ",", "status", "from", "city", "order", "by", "population", "desc", "limit", "value"], "question": "What is the official name and status of the city with the most residents?", "question_toks": ["What", "is", "the", "official", "name", "and", "status", "of", "the", "city", "with", "the", "most", "residents", "?"], "guid": 9251}}
{"text": "people: People_ID, District, Name, Party, Age; debate: Debate_ID, Date, Venue, Num_of_Audience; debate_people: Debate_ID, Affirmative, Negative, If_Affirmative_Win | List the names of people that have not been on the affirmative side of debates.", "sql": "SELECT Name FROM people WHERE People_id NOT IN (SELECT Affirmative FROM debate_people)", "example": {"db_id": "debate", "query": "SELECT Name FROM people WHERE People_id NOT IN (SELECT Affirmative FROM debate_people)", "query_toks": ["SELECT", "Name", "FROM", "people", "WHERE", "People_id", "NOT", "IN", "(", "SELECT", "Affirmative", "FROM", "debate_people", ")"], "query_toks_no_value": ["select", "name", "from", "people", "where", "people_id", "not", "in", "(", "select", "affirmative", "from", "debate_people", ")"], "question": "List the names of people that have not been on the affirmative side of debates.", "question_toks": ["List", "the", "names", "of", "people", "that", "have", "not", "been", "on", "the", "affirmative", "side", "of", "debates", "."], "guid": 9252}}
{"text": "Third_Party_Companies: company_id, company_type, company_name, company_address, other_company_details; Maintenance_Contracts: maintenance_contract_id, maintenance_contract_company_id, contract_start_date, contract_end_date, other_contract_details; Parts: part_id, part_name, chargeable_yn, chargeable_amount, other_part_details; Skills: skill_id, skill_code, skill_description; Staff: staff_id, staff_name, gender, other_staff_details; Assets: asset_id, maintenance_contract_id, supplier_company_id, asset_details, asset_make, asset_model, asset_acquired_date, asset_disposed_date, other_asset_details; Asset_Parts: asset_id, part_id; Maintenance_Engineers: engineer_id, company_id, first_name, last_name, other_details; Engineer_Skills: engineer_id, skill_id; Fault_Log: fault_log_entry_id, asset_id, recorded_by_staff_id, fault_log_entry_datetime, fault_description, other_fault_details | Which engineers have never visited to maintain the assets? List the engineer first name and last name.", "sql": "SELECT first_name, last_name FROM Maintenance_Engineers WHERE engineer_id NOT IN (SELECT engineer_id FROM Engineer_Visits)", "example": {"db_id": "assets_maintenance", "query": "SELECT first_name ,  last_name FROM Maintenance_Engineers WHERE engineer_id NOT IN (SELECT engineer_id FROM Engineer_Visits)", "query_toks": ["SELECT", "first_name", ",", "last_name", "FROM", "Maintenance_Engineers", "WHERE", "engineer_id", "NOT", "IN", "(", "SELECT", "engineer_id", "FROM", "Engineer_Visits", ")"], "query_toks_no_value": ["select", "first_name", ",", "last_name", "from", "maintenance_engineers", "where", "engineer_id", "not", "in", "(", "select", "engineer_id", "from", "engineer_visits", ")"], "question": "Which engineers have never visited to maintain the assets? List the engineer first name and last name.", "question_toks": ["Which", "engineers", "have", "never", "visited", "to", "maintain", "the", "assets", "?", "List", "the", "engineer", "first", "name", "and", "last", "name", "."], "guid": 9253}}
{"text": "architect: id, name, nationality, gender; bridge: architect_id, id, name, location, length_meters, length_feet; mill: architect_id, id, location, name, type, built_year, notes | What are the names of the mills which are not located in 'Donceel'?", "sql": "SELECT name FROM mill WHERE location != 'Donceel'", "example": {"db_id": "architecture", "query": "SELECT name FROM mill WHERE LOCATION != 'Donceel'", "query_toks": ["SELECT", "name", "FROM", "mill", "WHERE", "LOCATION", "!", "=", "'Donceel", "'"], "query_toks_no_value": ["select", "name", "from", "mill", "where", "location", "!", "=", "value"], "question": "What are the names of the mills which are not located in 'Donceel'?", "question_toks": ["What", "are", "the", "names", "of", "the", "mills", "which", "are", "not", "located", "in", "'Donceel", "'", "?"], "guid": 9254}}
{"text": "perpetrator: Perpetrator_ID, People_ID, Date, Year, Location, Country, Killed, Injured; people: People_ID, Name, Height, Weight, Home_Town | In which year did the most recent crime happen?", "sql": "SELECT MAX(year) FROM perpetrator", "example": {"db_id": "perpetrator", "query": "SELECT max(YEAR) FROM perpetrator;", "query_toks": ["SELECT", "max", "(", "YEAR", ")", "FROM", "perpetrator", ";"], "query_toks_no_value": ["select", "max", "(", "year", ")", "from", "perpetrator"], "question": "In which year did the most recent crime happen?", "question_toks": ["In", "which", "year", "did", "the", "most", "recent", "crime", "happen", "?"], "guid": 9255}}
{"text": "stadium: id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage; game: stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition; injury_accident: game_id, id, Player, Injury, Number_of_matches, Source | List the season, home team, away team of all the games.", "sql": "SELECT season, home_team, away_team FROM game", "example": {"db_id": "game_injury", "query": "SELECT season ,  home_team ,  away_team FROM game", "query_toks": ["SELECT", "season", ",", "home_team", ",", "away_team", "FROM", "game"], "query_toks_no_value": ["select", "season", ",", "home_team", ",", "away_team", "from", "game"], "question": "List the season, home team, away team of all the games.", "question_toks": ["List", "the", "season", ",", "home", "team", ",", "away", "team", "of", "all", "the", "games", "."], "guid": 9256}}
{"text": "Ref_Address_Types: address_type_code, address_type_description; Ref_Detention_Type: detention_type_code, detention_type_description; Ref_Incident_Type: incident_type_code, incident_type_description; Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Students: student_id, address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, date_first_rental, date_left_university, other_student_details; Teachers: teacher_id, address_id, first_name, middle_name, last_name, gender, cell_mobile_number, email_address, other_details; Assessment_Notes: notes_id, student_id, teacher_id, date_of_notes, text_of_notes, other_details; Behavior_Incident: incident_id, incident_type_code, student_id, date_incident_start, date_incident_end, incident_summary, recommendations, other_details; Detention: detention_id, detention_type_code, teacher_id, datetime_detention_start, datetime_detention_end, detention_summary, other_details; Student_Addresses: student_id, address_id, date_address_from, date_address_to, monthly_rental, other_details | What are the code and description of the most frequent behavior incident type?", "sql": "SELECT T1.incident_type_code, T2.incident_type_description FROM Behavior_Incident AS T1 JOIN Ref_Incident_Type AS T2 ON T1.incident_type_code = T2.incident_type_code GROUP BY T1.incident_type_code ORDER BY COUNT(*) DESC LIMIT 1", "example": {"db_id": "behavior_monitoring", "query": "SELECT T1.incident_type_code ,  T2.incident_type_description FROM Behavior_Incident AS T1 JOIN Ref_Incident_Type AS T2 ON T1.incident_type_code  =  T2.incident_type_code GROUP BY T1.incident_type_code ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.incident_type_code", ",", "T2.incident_type_description", "FROM", "Behavior_Incident", "AS", "T1", "JOIN", "Ref_Incident_Type", "AS", "T2", "ON", "T1.incident_type_code", "=", "T2.incident_type_code", "GROUP", "BY", "T1.incident_type_code", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "incident_type_code", ",", "t2", ".", "incident_type_description", "from", "behavior_incident", "as", "t1", "join", "ref_incident_type", "as", "t2", "on", "t1", ".", "incident_type_code", "=", "t2", ".", "incident_type_code", "group", "by", "t1", ".", "incident_type_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What are the code and description of the most frequent behavior incident type?", "question_toks": ["What", "are", "the", "code", "and", "description", "of", "the", "most", "frequent", "behavior", "incident", "type", "?"], "guid": 9257}}
{"text": "perpetrator: Perpetrator_ID, People_ID, Date, Year, Location, Country, Killed, Injured; people: People_ID, Name, Height, Weight, Home_Town | How many distinct locations of perpetrators are there?", "sql": "SELECT COUNT(DISTINCT location) FROM perpetrator", "example": {"db_id": "perpetrator", "query": "SELECT count(DISTINCT LOCATION) FROM perpetrator", "query_toks": ["SELECT", "count", "(", "DISTINCT", "LOCATION", ")", "FROM", "perpetrator"], "query_toks_no_value": ["select", "count", "(", "distinct", "location", ")", "from", "perpetrator"], "question": "How many distinct locations of perpetrators are there?", "question_toks": ["How", "many", "distinct", "locations", "of", "perpetrators", "are", "there", "?"], "guid": 9258}}
{"text": "county_public_safety: County_ID, Name, Population, Police_officers, Residents_per_officer, Case_burden, Crime_rate, Police_force, Location; city: City_ID, County_ID, Name, White, Black, Amerindian, Asian, Multiracial, Hispanic | Which location has the most corresponding counties?", "sql": "SELECT LOCATION FROM county_public_safety GROUP BY LOCATION ORDER BY COUNT(*) DESC LIMIT 1", "example": {"db_id": "county_public_safety", "query": "SELECT LOCATION FROM county_public_safety GROUP BY LOCATION ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "LOCATION", "FROM", "county_public_safety", "GROUP", "BY", "LOCATION", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "location", "from", "county_public_safety", "group", "by", "location", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which location has the most corresponding counties?", "question_toks": ["Which", "location", "has", "the", "most", "corresponding", "counties", "?"], "guid": 9259}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | What are the names of wines produced before any wine from the Brander winery?", "sql": "SELECT Name FROM WINE WHERE YEAR < (SELECT MIN(YEAR) FROM WINE WHERE Winery = \"Brander\")", "example": {"db_id": "wine_1", "query": "SELECT Name FROM WINE WHERE YEAR  <  (SELECT min(YEAR) FROM WINE WHERE Winery  =  \"Brander\")", "query_toks": ["SELECT", "Name", "FROM", "WINE", "WHERE", "YEAR", "<", "(", "SELECT", "min", "(", "YEAR", ")", "FROM", "WINE", "WHERE", "Winery", "=", "``", "Brander", "''", ")"], "query_toks_no_value": ["select", "name", "from", "wine", "where", "year", "<", "(", "select", "min", "(", "year", ")", "from", "wine", "where", "winery", "=", "value", ")"], "question": "What are the names of wines produced before any wine from the Brander winery?", "question_toks": ["What", "are", "the", "names", "of", "wines", "produced", "before", "any", "wine", "from", "the", "Brander", "winery", "?"], "guid": 9260}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | Find the the grape whose white color grapes are used to produce wines with scores higher than 90.", "sql": "SELECT DISTINCT T1.Grape FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape = T2.Grape WHERE T1.Color = \"White\" AND T2.score > 90", "example": {"db_id": "wine_1", "query": "SELECT DISTINCT T1.Grape FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  \"White\" AND T2.score  >  90", "query_toks": ["SELECT", "DISTINCT", "T1.Grape", "FROM", "GRAPES", "AS", "T1", "JOIN", "WINE", "AS", "T2", "ON", "T1.Grape", "=", "T2.Grape", "WHERE", "T1.Color", "=", "``", "White", "''", "AND", "T2.score", ">", "90"], "query_toks_no_value": ["select", "distinct", "t1", ".", "grape", "from", "grapes", "as", "t1", "join", "wine", "as", "t2", "on", "t1", ".", "grape", "=", "t2", ".", "grape", "where", "t1", ".", "color", "=", "value", "and", "t2", ".", "score", ">", "value"], "question": "Find the the grape whose white color grapes are used to produce wines with scores higher than 90.", "question_toks": ["Find", "the", "the", "grape", "whose", "white", "color", "grapes", "are", "used", "to", "produce", "wines", "with", "scores", "higher", "than", "90", "."], "guid": 9261}}
{"text": "city: City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking; farm: Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats; farm_competition: Competition_ID, Year, Theme, Host_city_ID, Hosts; competition_record: Competition_ID, Farm_ID, Rank | What is the status of the city that has hosted the most competitions?", "sql": "SELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT 1", "example": {"db_id": "farm", "query": "SELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.Status", "FROM", "city", "AS", "T1", "JOIN", "farm_competition", "AS", "T2", "ON", "T1.City_ID", "=", "T2.Host_city_ID", "GROUP", "BY", "T2.Host_city_ID", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "status", "from", "city", "as", "t1", "join", "farm_competition", "as", "t2", "on", "t1", ".", "city_id", "=", "t2", ".", "host_city_id", "group", "by", "t2", ".", "host_city_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the status of the city that has hosted the most competitions?", "question_toks": ["What", "is", "the", "status", "of", "the", "city", "that", "has", "hosted", "the", "most", "competitions", "?"], "guid": 9262}}
{"text": "Third_Party_Companies: company_id, company_type, company_name, company_address, other_company_details; Maintenance_Contracts: maintenance_contract_id, maintenance_contract_company_id, contract_start_date, contract_end_date, other_contract_details; Parts: part_id, part_name, chargeable_yn, chargeable_amount, other_part_details; Skills: skill_id, skill_code, skill_description; Staff: staff_id, staff_name, gender, other_staff_details; Assets: asset_id, maintenance_contract_id, supplier_company_id, asset_details, asset_make, asset_model, asset_acquired_date, asset_disposed_date, other_asset_details; Asset_Parts: asset_id, part_id; Maintenance_Engineers: engineer_id, company_id, first_name, last_name, other_details; Engineer_Skills: engineer_id, skill_id; Fault_Log: fault_log_entry_id, asset_id, recorded_by_staff_id, fault_log_entry_datetime, fault_description, other_fault_details | List all every engineer's first name, last name, details and coresponding skill description.", "sql": "SELECT T1.first_name , T1.last_name , T1.other_details , T3.skill_description FROM Maintenance_Engineers AS T1 JOIN Engineer_Skills AS T2 ON T1.engineer_id = T2.engineer_id JOIN Skills AS T3 ON T2.skill_id = T3.skill_id", "example": {"db_id": "assets_maintenance", "query": "SELECT T1.first_name ,  T1.last_name ,  T1.other_details ,  T3.skill_description FROM Maintenance_Engineers AS T1 JOIN Engineer_Skills AS T2 ON T1.engineer_id  =  T2.engineer_id JOIN Skills AS T3 ON T2.skill_id  =  T3.skill_id", "query_toks": ["SELECT", "T1.first_name", ",", "T1.last_name", ",", "T1.other_details", ",", "T3.skill_description", "FROM", "Maintenance_Engineers", "AS", "T1", "JOIN", "Engineer_Skills", "AS", "T2", "ON", "T1.engineer_id", "=", "T2.engineer_id", "JOIN", "Skills", "AS", "T3", "ON", "T2.skill_id", "=", "T3.skill_id"], "query_toks_no_value": ["select", "t1", ".", "first_name", ",", "t1", ".", "last_name", ",", "t1", ".", "other_details", ",", "t3", ".", "skill_description", "from", "maintenance_engineers", "as", "t1", "join", "engineer_skills", "as", "t2", "on", "t1", ".", "engineer_id", "=", "t2", ".", "engineer_id", "join", "skills", "as", "t3", "on", "t2", ".", "skill_id", "=", "t3", ".", "skill_id"], "question": "List all every engineer's first name, last name, details and coresponding skill description.", "question_toks": ["List", "all", "every", "engineer", "'s", "first", "name", ",", "last", "name", ",", "details", "and", "coresponding", "skill", "description", "."], "guid": 9263}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | What are the distinct names of wines with prices higher than any wine from John Anthony winery.", "sql": "SELECT DISTINCT Name FROM WINE WHERE Price > (SELECT min(Price) FROM wine WHERE Winery = \"John Anthony\")", "example": {"db_id": "wine_1", "query": "SELECT DISTINCT Name FROM WINE WHERE Price  >  (SELECT min(Price) FROM wine WHERE Winery  =  \"John Anthony\")", "query_toks": ["SELECT", "DISTINCT", "Name", "FROM", "WINE", "WHERE", "Price", ">", "(", "SELECT", "min", "(", "Price", ")", "FROM", "wine", "WHERE", "Winery", "=", "``", "John", "Anthony", "''", ")"], "query_toks_no_value": ["select", "distinct", "name", "from", "wine", "where", "price", ">", "(", "select", "min", "(", "price", ")", "from", "wine", "where", "winery", "=", "value", ")"], "question": "What are the distinct names of wines with prices higher than any wine from John Anthony winery.", "question_toks": ["What", "are", "the", "distinct", "names", "of", "wines", "with", "prices", "higher", "than", "any", "wine", "from", "John", "Anthony", "winery", "."], "guid": 9264}}
{"text": "people: People_ID, District, Name, Party, Age; debate: Debate_ID, Date, Venue, Num_of_Audience; debate_people: Debate_ID, Affirmative, Negative, If_Affirmative_Win | Show different parties of people along with the number of people in each party.", "sql": "SELECT Party, COUNT(*) FROM people GROUP BY Party", "example": {"db_id": "debate", "query": "SELECT Party ,  COUNT(*) FROM people GROUP BY Party", "query_toks": ["SELECT", "Party", ",", "COUNT", "(", "*", ")", "FROM", "people", "GROUP", "BY", "Party"], "query_toks_no_value": ["select", "party", ",", "count", "(", "*", ")", "from", "people", "group", "by", "party"], "question": "Show different parties of people along with the number of people in each party.", "question_toks": ["Show", "different", "parties", "of", "people", "along", "with", "the", "number", "of", "people", "in", "each", "party", "."], "guid": 9265}}
{"text": "repair: repair_ID, name, Launch_Date, Notes; machine: Machine_ID, Making_Year, Class, Team, Machine_series, value_points, quality_rank; technician: technician_id, Name, Team, Starting_Year, Age; repair_assignment: technician_id, repair_ID, Machine_ID | What are the names of the technicians that are assigned to repair machines with more point values than 70?", "sql": "SELECT T3.Name FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id = T2.machine_id JOIN technician AS T3 ON T1.technician_ID = T3.technician_ID WHERE T2.value_points > 70", "example": {"db_id": "machine_repair", "query": "SELECT T3.Name FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id  =  T2.machine_id JOIN technician AS T3 ON T1.technician_ID  =  T3.technician_ID WHERE T2.value_points  >  70", "query_toks": ["SELECT", "T3.Name", "FROM", "repair_assignment", "AS", "T1", "JOIN", "machine", "AS", "T2", "ON", "T1.machine_id", "=", "T2.machine_id", "JOIN", "technician", "AS", "T3", "ON", "T1.technician_ID", "=", "T3.technician_ID", "WHERE", "T2.value_points", ">", "70"], "query_toks_no_value": ["select", "t3", ".", "name", "from", "repair_assignment", "as", "t1", "join", "machine", "as", "t2", "on", "t1", ".", "machine_id", "=", "t2", ".", "machine_id", "join", "technician", "as", "t3", "on", "t1", ".", "technician_id", "=", "t3", ".", "technician_id", "where", "t2", ".", "value_points", ">", "value"], "question": "What are the names of the technicians that are assigned to repair machines with more point values than 70?", "question_toks": ["What", "are", "the", "names", "of", "the", "technicians", "that", "are", "assigned", "to", "repair", "machines", "with", "more", "point", "values", "than", "70", "?"], "guid": 9266}}
{"text": "county_public_safety: County_ID, Name, Population, Police_officers, Residents_per_officer, Case_burden, Crime_rate, Police_force, Location; city: City_ID, County_ID, Name, White, Black, Amerindian, Asian, Multiracial, Hispanic | What are the percentage of hispanics in cities with the black percentage higher than 10?", "sql": "SELECT Hispanic FROM city WHERE Black > 10", "example": {"db_id": "county_public_safety", "query": "SELECT Hispanic FROM city WHERE Black  >  10", "query_toks": ["SELECT", "Hispanic", "FROM", "city", "WHERE", "Black", ">", "10"], "query_toks_no_value": ["select", "hispanic", "from", "city", "where", "black", ">", "value"], "question": "What are the percentage of hispanics in cities with the black percentage higher than 10?", "question_toks": ["What", "are", "the", "percentage", "of", "hispanics", "in", "cities", "with", "the", "black", "percentage", "higher", "than", "10", "?"], "guid": 9267}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | Find the distinct winery of wines having price between 50 and 100.", "sql": "SELECT DISTINCT Winery FROM WINE WHERE Price BETWEEN 50 AND 100", "example": {"db_id": "wine_1", "query": "SELECT DISTINCT Winery FROM WINE WHERE Price BETWEEN 50 AND 100", "query_toks": ["SELECT", "DISTINCT", "Winery", "FROM", "WINE", "WHERE", "Price", "BETWEEN", "50", "AND", "100"], "query_toks_no_value": ["select", "distinct", "winery", "from", "wine", "where", "price", "between", "value", "and", "value"], "question": "Find the distinct winery of wines having price between 50 and 100.", "question_toks": ["Find", "the", "distinct", "winery", "of", "wines", "having", "price", "between", "50", "and", "100", "."], "guid": 9268}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | Give the name of the wine with the highest score.", "sql": "SELECT Name FROM WINE ORDER BY Score LIMIT 1", "example": {"db_id": "wine_1", "query": "SELECT Name FROM WINE ORDER BY Score LIMIT 1", "query_toks": ["SELECT", "Name", "FROM", "WINE", "ORDER", "BY", "Score", "LIMIT", "1"], "query_toks_no_value": ["select", "name", "from", "wine", "order", "by", "score", "limit", "value"], "question": "Give the name of the wine with the highest score.", "question_toks": ["Give", "the", "name", "of", "the", "wine", "with", "the", "highest", "score", "."], "guid": 9269}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | Give the color of the grape whose wine products have the highest average price?", "sql": "SELECT T1.Color FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape = T2.Grape GROUP BY T2.Grape ORDER BY AVG(Price) DESC LIMIT 1", "example": {"db_id": "wine_1", "query": "SELECT T1.Color FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape GROUP BY T2.Grape ORDER BY AVG(Price) DESC LIMIT 1", "query_toks": ["SELECT", "T1.Color", "FROM", "GRAPES", "AS", "T1", "JOIN", "WINE", "AS", "T2", "ON", "T1.Grape", "=", "T2.Grape", "GROUP", "BY", "T2.Grape", "ORDER", "BY", "AVG", "(", "Price", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "color", "from", "grapes", "as", "t1", "join", "wine", "as", "t2", "on", "t1", ".", "grape", "=", "t2", ".", "grape", "group", "by", "t2", ".", "grape", "order", "by", "avg", "(", "price", ")", "desc", "limit", "value"], "question": "Give the color of the grape whose wine products have the highest average price?", "question_toks": ["Give", "the", "color", "of", "the", "grape", "whose", "wine", "products", "have", "the", "highest", "average", "price", "?"], "guid": 9270}}
{"text": "city: City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking; farm: Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats; farm_competition: Competition_ID, Year, Theme, Host_city_ID, Hosts; competition_record: Competition_ID, Farm_ID, Rank | What are the maximum and minimum number of cows across all farms.", "sql": "SELECT MAX(cows), MIN(cows) FROM farm", "example": {"db_id": "farm", "query": "SELECT max(Cows) ,  min(Cows) FROM farm", "query_toks": ["SELECT", "max", "(", "Cows", ")", ",", "min", "(", "Cows", ")", "FROM", "farm"], "query_toks_no_value": ["select", "max", "(", "cows", ")", ",", "min", "(", "cows", ")", "from", "farm"], "question": "What are the maximum and minimum number of cows across all farms.", "question_toks": ["What", "are", "the", "maximum", "and", "minimum", "number", "of", "cows", "across", "all", "farms", "."], "guid": 9271}}
{"text": "perpetrator: Perpetrator_ID, People_ID, Date, Year, Location, Country, Killed, Injured; people: People_ID, Name, Height, Weight, Home_Town | What are the names of people in ascending order of height?", "sql": "SELECT Name FROM People ORDER BY Height ASC", "example": {"db_id": "perpetrator", "query": "SELECT Name FROM People ORDER BY Height ASC", "query_toks": ["SELECT", "Name", "FROM", "People", "ORDER", "BY", "Height", "ASC"], "query_toks_no_value": ["select", "name", "from", "people", "order", "by", "height", "asc"], "question": "What are the names of people in ascending order of height?", "question_toks": ["What", "are", "the", "names", "of", "people", "in", "ascending", "order", "of", "height", "?"], "guid": 9272}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | What are the grapes and appelations of each wine?", "sql": "SELECT Grape, Appelation FROM Wine", "example": {"db_id": "wine_1", "query": "SELECT Grape ,  Appelation FROM WINE", "query_toks": ["SELECT", "Grape", ",", "Appelation", "FROM", "WINE"], "query_toks_no_value": ["select", "grape", ",", "appelation", "from", "wine"], "question": "What are the grapes and appelations of each wine?", "question_toks": ["What", "are", "the", "grapes", "and", "appelations", "of", "each", "wine", "?"], "guid": 9273}}
{"text": "people: People_ID, Name, Country, Is_Male, Age; church: Church_ID, Name, Organized_by, Open_Date, Continuation_of; wedding: Church_ID, Male_ID, Female_ID, Year | Show all countries and the number of people from each country.", "sql": "SELECT country, COUNT(*) FROM people GROUP BY country", "example": {"db_id": "wedding", "query": "SELECT country ,  count(*) FROM people GROUP BY country", "query_toks": ["SELECT", "country", ",", "count", "(", "*", ")", "FROM", "people", "GROUP", "BY", "country"], "query_toks_no_value": ["select", "country", ",", "count", "(", "*", ")", "from", "people", "group", "by", "country"], "question": "Show all countries and the number of people from each country.", "question_toks": ["Show", "all", "countries", "and", "the", "number", "of", "people", "from", "each", "country", "."], "guid": 9274}}
{"text": "perpetrator: Perpetrator_ID, People_ID, Date, Year, Location, Country, Killed, Injured; people: People_ID, Name, Height, Weight, Home_Town | List the names of perpetrators in descending order of the year.", "sql": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Year DESC", "example": {"db_id": "perpetrator", "query": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Year DESC", "query_toks": ["SELECT", "T1.Name", "FROM", "people", "AS", "T1", "JOIN", "perpetrator", "AS", "T2", "ON", "T1.People_ID", "=", "T2.People_ID", "ORDER", "BY", "T2.Year", "DESC"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "people", "as", "t1", "join", "perpetrator", "as", "t2", "on", "t1", ".", "people_id", "=", "t2", ".", "people_id", "order", "by", "t2", ".", "year", "desc"], "question": "List the names of perpetrators in descending order of the year.", "question_toks": ["List", "the", "names", "of", "perpetrators", "in", "descending", "order", "of", "the", "year", "."], "guid": 9275}}
{"text": "perpetrator: Perpetrator_ID, People_ID, Date, Year, Location, Country, Killed, Injured; people: People_ID, Name, Height, Weight, Home_Town | What is the average number of people injured by all perpetrators?", "sql": "SELECT AVG(injured) FROM perpetrator", "example": {"db_id": "perpetrator", "query": "SELECT avg(Injured) FROM perpetrator", "query_toks": ["SELECT", "avg", "(", "Injured", ")", "FROM", "perpetrator"], "query_toks_no_value": ["select", "avg", "(", "injured", ")", "from", "perpetrator"], "question": "What is the average number of people injured by all perpetrators?", "question_toks": ["What", "is", "the", "average", "number", "of", "people", "injured", "by", "all", "perpetrators", "?"], "guid": 9276}}
{"text": "Third_Party_Companies: company_id, company_type, company_name, company_address, other_company_details; Maintenance_Contracts: maintenance_contract_id, maintenance_contract_company_id, contract_start_date, contract_end_date, other_contract_details; Parts: part_id, part_name, chargeable_yn, chargeable_amount, other_part_details; Skills: skill_id, skill_code, skill_description; Staff: staff_id, staff_name, gender, other_staff_details; Assets: asset_id, maintenance_contract_id, supplier_company_id, asset_details, asset_make, asset_model, asset_acquired_date, asset_disposed_date, other_asset_details; Asset_Parts: asset_id, part_id; Maintenance_Engineers: engineer_id, company_id, first_name, last_name, other_details; Engineer_Skills: engineer_id, skill_id; Fault_Log: fault_log_entry_id, asset_id, recorded_by_staff_id, fault_log_entry_datetime, fault_description, other_fault_details | List the asset id, details, make and model for every asset.", "sql": "SELECT asset_id , asset_details , asset_make , asset_model FROM Assets", "example": {"db_id": "assets_maintenance", "query": "SELECT asset_id ,  asset_details ,  asset_make ,  asset_model FROM Assets", "query_toks": ["SELECT", "asset_id", ",", "asset_details", ",", "asset_make", ",", "asset_model", "FROM", "Assets"], "query_toks_no_value": ["select", "asset_id", ",", "asset_details", ",", "asset_make", ",", "asset_model", "from", "assets"], "question": "List the asset id, details, make and model for every asset.", "question_toks": ["List", "the", "asset", "id", ",", "details", ",", "make", "and", "model", "for", "every", "asset", "."], "guid": 9277}}
{"text": "repair: repair_ID, name, Launch_Date, Notes; machine: Machine_ID, Making_Year, Class, Team, Machine_series, value_points, quality_rank; technician: technician_id, Name, Team, Starting_Year, Age; repair_assignment: technician_id, repair_ID, Machine_ID | Please show the team that has the most number of technicians.", "sql": "SELECT Team FROM technician GROUP BY Team ORDER BY COUNT(*) DESC LIMIT 1", "example": {"db_id": "machine_repair", "query": "SELECT Team FROM technician GROUP BY Team ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "Team", "FROM", "technician", "GROUP", "BY", "Team", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "team", "from", "technician", "group", "by", "team", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Please show the team that has the most number of technicians.", "question_toks": ["Please", "show", "the", "team", "that", "has", "the", "most", "number", "of", "technicians", "."], "guid": 9278}}
{"text": "county_public_safety: County_ID, Name, Population, Police_officers, Residents_per_officer, Case_burden, Crime_rate, Police_force, Location; city: City_ID, County_ID, Name, White, Black, Amerindian, Asian, Multiracial, Hispanic | How many counties correspond to each police force?", "sql": "SELECT Police_force, COUNT(*) FROM county_public_safety GROUP BY Police_force", "example": {"db_id": "county_public_safety", "query": "SELECT Police_force ,  COUNT(*) FROM county_public_safety GROUP BY Police_force", "query_toks": ["SELECT", "Police_force", ",", "COUNT", "(", "*", ")", "FROM", "county_public_safety", "GROUP", "BY", "Police_force"], "query_toks_no_value": ["select", "police_force", ",", "count", "(", "*", ")", "from", "county_public_safety", "group", "by", "police_force"], "question": "How many counties correspond to each police force?", "question_toks": ["How", "many", "counties", "correspond", "to", "each", "police", "force", "?"], "guid": 9279}}
{"text": "county_public_safety: County_ID, Name, Population, Police_officers, Residents_per_officer, Case_burden, Crime_rate, Police_force, Location; city: City_ID, County_ID, Name, White, Black, Amerindian, Asian, Multiracial, Hispanic | Show the police force shared by counties with location on the east and west.", "sql": "SELECT Police_force FROM county_public_safety WHERE LOCATION = \"East\" INTERSECT SELECT Police_force FROM county_public_safety WHERE LOCATION = \"West\"", "example": {"db_id": "county_public_safety", "query": "SELECT Police_force FROM county_public_safety WHERE LOCATION  =  \"East\" INTERSECT SELECT Police_force FROM county_public_safety WHERE LOCATION  =  \"West\"", "query_toks": ["SELECT", "Police_force", "FROM", "county_public_safety", "WHERE", "LOCATION", "=", "``", "East", "''", "INTERSECT", "SELECT", "Police_force", "FROM", "county_public_safety", "WHERE", "LOCATION", "=", "``", "West", "''"], "query_toks_no_value": ["select", "police_force", "from", "county_public_safety", "where", "location", "=", "value", "intersect", "select", "police_force", "from", "county_public_safety", "where", "location", "=", "value"], "question": "Show the police force shared by counties with location on the east and west.", "question_toks": ["Show", "the", "police", "force", "shared", "by", "counties", "with", "location", "on", "the", "east", "and", "west", "."], "guid": 9280}}
{"text": "repair: repair_ID, name, Launch_Date, Notes; machine: Machine_ID, Making_Year, Class, Team, Machine_series, value_points, quality_rank; technician: technician_id, Name, Team, Starting_Year, Age; repair_assignment: technician_id, repair_ID, Machine_ID | What is the starting year for the oldest technician?", "sql": "SELECT Starting_Year FROM technician ORDER BY Age DESC LIMIT 1", "example": {"db_id": "machine_repair", "query": "SELECT Starting_Year FROM technician ORDER BY Age DESC LIMIT 1", "query_toks": ["SELECT", "Starting_Year", "FROM", "technician", "ORDER", "BY", "Age", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "starting_year", "from", "technician", "order", "by", "age", "desc", "limit", "value"], "question": "What is the starting year for the oldest technician?", "question_toks": ["What", "is", "the", "starting", "year", "for", "the", "oldest", "technician", "?"], "guid": 9281}}
{"text": "battle: id, name, date, bulgarian_commander, latin_commander, result; ship: lost_in_battle, id, name, tonnage, ship_type, location, disposition_of_ship; death: caused_by_ship_id, id, note, killed, injured | How many different results are there for the battles?", "sql": "SELECT COUNT(DISTINCT result) FROM battle", "example": {"db_id": "battle_death", "query": "SELECT count(DISTINCT RESULT) FROM battle", "query_toks": ["SELECT", "count", "(", "DISTINCT", "RESULT", ")", "FROM", "battle"], "query_toks_no_value": ["select", "count", "(", "distinct", "result", ")", "from", "battle"], "question": "How many different results are there for the battles?", "question_toks": ["How", "many", "different", "results", "are", "there", "for", "the", "battles", "?"], "guid": 9282}}
{"text": "architect: id, name, nationality, gender; bridge: architect_id, id, name, location, length_meters, length_feet; mill: architect_id, id, location, name, type, built_year, notes | What are the ids, names and genders of the architects who built two bridges or one mill?", "sql": "SELECT T1.id, T1.name, T1.gender FROM architect AS T1 JOIN bridge AS T2 ON T1.id = T2.architect_id GROUP BY T1.id HAVING COUNT(*) = 2 UNION SELECT T1.id, T1.name, T1.gender FROM architect AS T1 JOIN mill AS T2 ON T1.id = T2.architect_id GROUP BY T1.id HAVING COUNT(*) = 1", "example": {"db_id": "architecture", "query": "SELECT T1.id ,  T1.name ,  T1.gender FROM architect AS T1 JOIN bridge AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id HAVING count(*)  =  2 UNION SELECT T1.id ,  T1.name ,  T1.gender FROM architect AS T1 JOIN mill AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id HAVING count(*)  =  1", "query_toks": ["SELECT", "T1.id", ",", "T1.name", ",", "T1.gender", "FROM", "architect", "AS", "T1", "JOIN", "bridge", "AS", "T2", "ON", "T1.id", "=", "T2.architect_id", "GROUP", "BY", "T1.id", "HAVING", "count", "(", "*", ")", "=", "2", "UNION", "SELECT", "T1.id", ",", "T1.name", ",", "T1.gender", "FROM", "architect", "AS", "T1", "JOIN", "mill", "AS", "T2", "ON", "T1.id", "=", "T2.architect_id", "GROUP", "BY", "T1.id", "HAVING", "count", "(", "*", ")", "=", "1"], "query_toks_no_value": ["select", "t1", ".", "id", ",", "t1", ".", "name", ",", "t1", ".", "gender", "from", "architect", "as", "t1", "join", "bridge", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "architect_id", "group", "by", "t1", ".", "id", "having", "count", "(", "*", ")", "=", "value", "union", "select", "t1", ".", "id", ",", "t1", ".", "name", ",", "t1", ".", "gender", "from", "architect", "as", "t1", "join", "mill", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "architect_id", "group", "by", "t1", ".", "id", "having", "count", "(", "*", ")", "=", "value"], "question": "What are the ids, names and genders of the architects who built two bridges or one mill?", "question_toks": ["What", "are", "the", "ids", ",", "names", "and", "genders", "of", "the", "architects", "who", "built", "two", "bridges", "or", "one", "mill", "?"], "guid": 9283}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | List the area and county of all appelations.", "sql": "SELECT Area, County FROM APPELLATIONS", "example": {"db_id": "wine_1", "query": "SELECT Area ,  County FROM APPELLATIONS", "query_toks": ["SELECT", "Area", ",", "County", "FROM", "APPELLATIONS"], "query_toks_no_value": ["select", "area", ",", "county", "from", "appellations"], "question": "List the area and county of all appelations.", "question_toks": ["List", "the", "area", "and", "county", "of", "all", "appelations", "."], "guid": 9284}}
{"text": "Ref_Address_Types: address_type_code, address_type_description; Ref_Detention_Type: detention_type_code, detention_type_description; Ref_Incident_Type: incident_type_code, incident_type_description; Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Students: student_id, address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, date_first_rental, date_left_university, other_student_details; Teachers: teacher_id, address_id, first_name, middle_name, last_name, gender, cell_mobile_number, email_address, other_details; Assessment_Notes: notes_id, student_id, teacher_id, date_of_notes, text_of_notes, other_details; Behavior_Incident: incident_id, incident_type_code, student_id, date_incident_start, date_incident_end, incident_summary, recommendations, other_details; Detention: detention_id, detention_type_code, teacher_id, datetime_detention_start, datetime_detention_end, detention_summary, other_details; Student_Addresses: student_id, address_id, date_address_from, date_address_to, monthly_rental, other_details | How many students are not involved in any behavior incident?", "sql": "SELECT COUNT(*) FROM students WHERE student_id NOT IN (SELECT student_id FROM behavior_incident);", "example": {"db_id": "behavior_monitoring", "query": "SELECT count(*) FROM STUDENTS WHERE student_id NOT IN ( SELECT student_id FROM Behavior_Incident )", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "STUDENTS", "WHERE", "student_id", "NOT", "IN", "(", "SELECT", "student_id", "FROM", "Behavior_Incident", ")"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "students", "where", "student_id", "not", "in", "(", "select", "student_id", "from", "behavior_incident", ")"], "question": "How many students are not involved in any behavior incident?", "question_toks": ["How", "many", "students", "are", "not", "involved", "in", "any", "behavior", "incident", "?"], "guid": 9285}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | What are the names and scores of all wines?", "sql": "SELECT Name, Score FROM Wine", "example": {"db_id": "wine_1", "query": "SELECT Name ,  Score FROM WINE", "query_toks": ["SELECT", "Name", ",", "Score", "FROM", "WINE"], "query_toks_no_value": ["select", "name", ",", "score", "from", "wine"], "question": "What are the names and scores of all wines?", "question_toks": ["What", "are", "the", "names", "and", "scores", "of", "all", "wines", "?"], "guid": 9286}}
{"text": "county_public_safety: County_ID, Name, Population, Police_officers, Residents_per_officer, Case_burden, Crime_rate, Police_force, Location; city: City_ID, County_ID, Name, White, Black, Amerindian, Asian, Multiracial, Hispanic | What are the names of cities in ascending alphabetical order?", "sql": "SELECT Name FROM city ORDER BY Name ASC", "example": {"db_id": "county_public_safety", "query": "SELECT Name FROM city ORDER BY Name ASC", "query_toks": ["SELECT", "Name", "FROM", "city", "ORDER", "BY", "Name", "ASC"], "query_toks_no_value": ["select", "name", "from", "city", "order", "by", "name", "asc"], "question": "What are the names of cities in ascending alphabetical order?", "question_toks": ["What", "are", "the", "names", "of", "cities", "in", "ascending", "alphabetical", "order", "?"], "guid": 9287}}
{"text": "Ref_Address_Types: address_type_code, address_type_description; Ref_Detention_Type: detention_type_code, detention_type_description; Ref_Incident_Type: incident_type_code, incident_type_description; Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Students: student_id, address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, date_first_rental, date_left_university, other_student_details; Teachers: teacher_id, address_id, first_name, middle_name, last_name, gender, cell_mobile_number, email_address, other_details; Assessment_Notes: notes_id, student_id, teacher_id, date_of_notes, text_of_notes, other_details; Behavior_Incident: incident_id, incident_type_code, student_id, date_incident_start, date_incident_end, incident_summary, recommendations, other_details; Detention: detention_id, detention_type_code, teacher_id, datetime_detention_start, datetime_detention_end, detention_summary, other_details; Student_Addresses: student_id, address_id, date_address_from, date_address_to, monthly_rental, other_details | How many addresses have zip code 197?", "sql": "SELECT COUNT(*) FROM addresses WHERE zip_postcode = '197';", "example": {"db_id": "behavior_monitoring", "query": "SELECT count(*) FROM ADDRESSES WHERE zip_postcode  =  \"197\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "ADDRESSES", "WHERE", "zip_postcode", "=", "``", "197", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "addresses", "where", "zip_postcode", "=", "value"], "question": "How many addresses have zip code 197?", "question_toks": ["How", "many", "addresses", "have", "zip", "code", "197", "?"], "guid": 9288}}
{"text": "Ref_Address_Types: address_type_code, address_type_description; Ref_Detention_Type: detention_type_code, detention_type_description; Ref_Incident_Type: incident_type_code, incident_type_description; Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Students: student_id, address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, date_first_rental, date_left_university, other_student_details; Teachers: teacher_id, address_id, first_name, middle_name, last_name, gender, cell_mobile_number, email_address, other_details; Assessment_Notes: notes_id, student_id, teacher_id, date_of_notes, text_of_notes, other_details; Behavior_Incident: incident_id, incident_type_code, student_id, date_incident_start, date_incident_end, incident_summary, recommendations, other_details; Detention: detention_id, detention_type_code, teacher_id, datetime_detention_start, datetime_detention_end, detention_summary, other_details; Student_Addresses: student_id, address_id, date_address_from, date_address_to, monthly_rental, other_details | Find the id and last name of the teacher that has the most detentions with detention type code \"AFTER\"?", "sql": "SELECT T1.teacher_id, T2.last_name FROM Detention AS T1 JOIN Teachers AS T2 ON T1.teacher_id = T2.teacher_id WHERE T1.detention_type_code = \"AFTER\" GROUP BY T1.teacher_id ORDER BY COUNT(*) DESC LIMIT 1", "example": {"db_id": "behavior_monitoring", "query": "SELECT T1.teacher_id ,  T2.last_name FROM Detention AS T1 JOIN Teachers AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T1.detention_type_code  =  \"AFTER\" GROUP BY T1.teacher_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.teacher_id", ",", "T2.last_name", "FROM", "Detention", "AS", "T1", "JOIN", "Teachers", "AS", "T2", "ON", "T1.teacher_id", "=", "T2.teacher_id", "WHERE", "T1.detention_type_code", "=", "``", "AFTER", "''", "GROUP", "BY", "T1.teacher_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "teacher_id", ",", "t2", ".", "last_name", "from", "detention", "as", "t1", "join", "teachers", "as", "t2", "on", "t1", ".", "teacher_id", "=", "t2", ".", "teacher_id", "where", "t1", ".", "detention_type_code", "=", "value", "group", "by", "t1", ".", "teacher_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Find the id and last name of the teacher that has the most detentions with detention type code \"AFTER\"?", "question_toks": ["Find", "the", "id", "and", "last", "name", "of", "the", "teacher", "that", "has", "the", "most", "detentions", "with", "detention", "type", "code", "``", "AFTER", "''", "?"], "guid": 9289}}
{"text": "Ref_Address_Types: address_type_code, address_type_description; Ref_Detention_Type: detention_type_code, detention_type_description; Ref_Incident_Type: incident_type_code, incident_type_description; Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Students: student_id, address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, date_first_rental, date_left_university, other_student_details; Teachers: teacher_id, address_id, first_name, middle_name, last_name, gender, cell_mobile_number, email_address, other_details; Assessment_Notes: notes_id, student_id, teacher_id, date_of_notes, text_of_notes, other_details; Behavior_Incident: incident_id, incident_type_code, student_id, date_incident_start, date_incident_end, incident_summary, recommendations, other_details; Detention: detention_id, detention_type_code, teacher_id, datetime_detention_start, datetime_detention_end, detention_summary, other_details; Student_Addresses: student_id, address_id, date_address_from, date_address_to, monthly_rental, other_details | Find the id and city of the student address with the highest average monthly rental.", "sql": "SELECT T2.address_id, T1.city FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id = T2.address_id GROUP BY T2.address_id ORDER BY AVG(monthly_rental) DESC LIMIT 1", "example": {"db_id": "behavior_monitoring", "query": "SELECT T2.address_id ,  T1.city FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id  =  T2.address_id GROUP BY T2.address_id ORDER BY AVG(monthly_rental) DESC LIMIT 1", "query_toks": ["SELECT", "T2.address_id", ",", "T1.city", "FROM", "Addresses", "AS", "T1", "JOIN", "Student_Addresses", "AS", "T2", "ON", "T1.address_id", "=", "T2.address_id", "GROUP", "BY", "T2.address_id", "ORDER", "BY", "AVG", "(", "monthly_rental", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "address_id", ",", "t1", ".", "city", "from", "addresses", "as", "t1", "join", "student_addresses", "as", "t2", "on", "t1", ".", "address_id", "=", "t2", ".", "address_id", "group", "by", "t2", ".", "address_id", "order", "by", "avg", "(", "monthly_rental", ")", "desc", "limit", "value"], "question": "Find the id and city of the student address with the highest average monthly rental.", "question_toks": ["Find", "the", "id", "and", "city", "of", "the", "student", "address", "with", "the", "highest", "average", "monthly", "rental", "."], "guid": 9290}}
{"text": "stadium: id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage; game: stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition; injury_accident: game_id, id, Player, Injury, Number_of_matches, Source | List the dates of games by the home team name in descending order.", "sql": "SELECT Date FROM game ORDER BY home_team DESC", "example": {"db_id": "game_injury", "query": "SELECT Date FROM game ORDER BY home_team DESC", "query_toks": ["SELECT", "Date", "FROM", "game", "ORDER", "BY", "home_team", "DESC"], "query_toks_no_value": ["select", "date", "from", "game", "order", "by", "home_team", "desc"], "question": "List the dates of games by the home team name in descending order.", "question_toks": ["List", "the", "dates", "of", "games", "by", "the", "home", "team", "name", "in", "descending", "order", "."], "guid": 9291}}
{"text": "county_public_safety: County_ID, Name, Population, Police_officers, Residents_per_officer, Case_burden, Crime_rate, Police_force, Location; city: City_ID, County_ID, Name, White, Black, Amerindian, Asian, Multiracial, Hispanic | What is the location shared by most counties?", "sql": "SELECT location FROM county_public_safety GROUP BY location ORDER BY COUNT(*) DESC LIMIT 1", "example": {"db_id": "county_public_safety", "query": "SELECT LOCATION FROM county_public_safety GROUP BY LOCATION ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "LOCATION", "FROM", "county_public_safety", "GROUP", "BY", "LOCATION", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "location", "from", "county_public_safety", "group", "by", "location", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the location shared by most counties?", "question_toks": ["What", "is", "the", "location", "shared", "by", "most", "counties", "?"], "guid": 9292}}
{"text": "city: City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking; farm: Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats; farm_competition: Competition_ID, Year, Theme, Host_city_ID, Hosts; competition_record: Competition_ID, Farm_ID, Rank | List the official name and status of the city with the largest population.", "sql": "SELECT Official_Name, Status FROM city ORDER BY Population DESC LIMIT 1", "example": {"db_id": "farm", "query": "SELECT Official_Name ,  Status FROM city ORDER BY Population DESC LIMIT 1", "query_toks": ["SELECT", "Official_Name", ",", "Status", "FROM", "city", "ORDER", "BY", "Population", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "official_name", ",", "status", "from", "city", "order", "by", "population", "desc", "limit", "value"], "question": "List the official name and status of the city with the largest population.", "question_toks": ["List", "the", "official", "name", "and", "status", "of", "the", "city", "with", "the", "largest", "population", "."], "guid": 9293}}
{"text": "county_public_safety: County_ID, Name, Population, Police_officers, Residents_per_officer, Case_burden, Crime_rate, Police_force, Location; city: City_ID, County_ID, Name, White, Black, Amerindian, Asian, Multiracial, Hispanic | What are the crime rates of counties that contain cities that have white percentages of over 90?", "sql": "SELECT T2.Crime_rate FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID = T2.County_ID WHERE T1.White > 90", "example": {"db_id": "county_public_safety", "query": "SELECT T2.Crime_rate FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID  =  T2.County_ID WHERE T1.White  >  90", "query_toks": ["SELECT", "T2.Crime_rate", "FROM", "city", "AS", "T1", "JOIN", "county_public_safety", "AS", "T2", "ON", "T1.County_ID", "=", "T2.County_ID", "WHERE", "T1.White", ">", "90"], "query_toks_no_value": ["select", "t2", ".", "crime_rate", "from", "city", "as", "t1", "join", "county_public_safety", "as", "t2", "on", "t1", ".", "county_id", "=", "t2", ".", "county_id", "where", "t1", ".", "white", ">", "value"], "question": "What are the crime rates of counties that contain cities that have white percentages of over 90?", "question_toks": ["What", "are", "the", "crime", "rates", "of", "counties", "that", "contain", "cities", "that", "have", "white", "percentages", "of", "over", "90", "?"], "guid": 9294}}
{"text": "city: City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking; farm: Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats; farm_competition: Competition_ID, Year, Theme, Host_city_ID, Hosts; competition_record: Competition_ID, Farm_ID, Rank | Count the number of farms.", "sql": "SELECT COUNT(*) FROM farm", "example": {"db_id": "farm", "query": "SELECT count(*) FROM farm", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "farm"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "farm"], "question": "Count the number of farms.", "question_toks": ["Count", "the", "number", "of", "farms", "."], "guid": 9295}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | Find the distinct names of all wines that have prices higher than some wines from John Anthony winery.", "sql": "SELECT DISTINCT Name FROM WINE WHERE Price > (SELECT min(Price) FROM wine WHERE Winery = \"John Anthony\")", "example": {"db_id": "wine_1", "query": "SELECT DISTINCT Name FROM WINE WHERE Price  >  (SELECT min(Price) FROM wine WHERE Winery  =  \"John Anthony\")", "query_toks": ["SELECT", "DISTINCT", "Name", "FROM", "WINE", "WHERE", "Price", ">", "(", "SELECT", "min", "(", "Price", ")", "FROM", "wine", "WHERE", "Winery", "=", "``", "John", "Anthony", "''", ")"], "query_toks_no_value": ["select", "distinct", "name", "from", "wine", "where", "price", ">", "(", "select", "min", "(", "price", ")", "from", "wine", "where", "winery", "=", "value", ")"], "question": "Find the distinct names of all wines that have prices higher than some wines from John Anthony winery.", "question_toks": ["Find", "the", "distinct", "names", "of", "all", "wines", "that", "have", "prices", "higher", "than", "some", "wines", "from", "John", "Anthony", "winery", "."], "guid": 9296}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | What are the prices of wines produced before the year of 2010?", "sql": "SELECT Price FROM WINE WHERE YEAR < 2010", "example": {"db_id": "wine_1", "query": "SELECT Price FROM WINE WHERE YEAR  <  2010", "query_toks": ["SELECT", "Price", "FROM", "WINE", "WHERE", "YEAR", "<", "2010"], "query_toks_no_value": ["select", "price", "from", "wine", "where", "year", "<", "value"], "question": "What are the prices of wines produced before the year of 2010?", "question_toks": ["What", "are", "the", "prices", "of", "wines", "produced", "before", "the", "year", "of", "2010", "?"], "guid": 9297}}
{"text": "perpetrator: Perpetrator_ID, People_ID, Date, Year, Location, Country, Killed, Injured; people: People_ID, Name, Height, Weight, Home_Town | What is the location of the perpetrator with the largest kills.", "sql": "SELECT Location FROM perpetrator ORDER BY Killed DESC LIMIT 1", "example": {"db_id": "perpetrator", "query": "SELECT LOCATION FROM perpetrator ORDER BY Killed DESC LIMIT 1", "query_toks": ["SELECT", "LOCATION", "FROM", "perpetrator", "ORDER", "BY", "Killed", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "location", "from", "perpetrator", "order", "by", "killed", "desc", "limit", "value"], "question": "What is the location of the perpetrator with the largest kills.", "question_toks": ["What", "is", "the", "location", "of", "the", "perpetrator", "with", "the", "largest", "kills", "."], "guid": 9298}}
{"text": "repair: repair_ID, name, Launch_Date, Notes; machine: Machine_ID, Making_Year, Class, Team, Machine_series, value_points, quality_rank; technician: technician_id, Name, Team, Starting_Year, Age; repair_assignment: technician_id, repair_ID, Machine_ID | Show the name of technicians aged either 36 or 37", "sql": "SELECT Name FROM technician WHERE Age = 36 OR Age = 37", "example": {"db_id": "machine_repair", "query": "SELECT Name FROM technician WHERE Age  =  36 OR Age  =  37", "query_toks": ["SELECT", "Name", "FROM", "technician", "WHERE", "Age", "=", "36", "OR", "Age", "=", "37"], "query_toks_no_value": ["select", "name", "from", "technician", "where", "age", "=", "value", "or", "age", "=", "value"], "question": "Show the name of technicians aged either 36 or 37", "question_toks": ["Show", "the", "name", "of", "technicians", "aged", "either", "36", "or", "37"], "guid": 9299}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | What are the names of all wines produced in 2008?", "sql": "SELECT Name FROM Wine WHERE Year = 2008", "example": {"db_id": "wine_1", "query": "SELECT Name FROM WINE WHERE YEAR  =  \"2008\"", "query_toks": ["SELECT", "Name", "FROM", "WINE", "WHERE", "YEAR", "=", "``", "2008", "''"], "query_toks_no_value": ["select", "name", "from", "wine", "where", "year", "=", "value"], "question": "What are the names of all wines produced in 2008?", "question_toks": ["What", "are", "the", "names", "of", "all", "wines", "produced", "in", "2008", "?"], "guid": 9300}}
{"text": "people: People_ID, Name, Country, Is_Male, Age; church: Church_ID, Name, Organized_by, Open_Date, Continuation_of; wedding: Church_ID, Male_ID, Female_ID, Year | How many female people are older than 30 in our record?", "sql": "SELECT COUNT(*) FROM people WHERE is_male = 'F' AND age > 30", "example": {"db_id": "wedding", "query": "SELECT count(*) FROM people WHERE is_male  =  'F' AND age  >  30", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "people", "WHERE", "is_male", "=", "'F", "'", "AND", "age", ">", "30"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "people", "where", "is_male", "=", "value", "and", "age", ">", "value"], "question": "How many female people are older than 30 in our record?", "question_toks": ["How", "many", "female", "people", "are", "older", "than", "30", "in", "our", "record", "?"], "guid": 9301}}
{"text": "Ref_Address_Types: address_type_code, address_type_description; Ref_Detention_Type: detention_type_code, detention_type_description; Ref_Incident_Type: incident_type_code, incident_type_description; Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Students: student_id, address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, date_first_rental, date_left_university, other_student_details; Teachers: teacher_id, address_id, first_name, middle_name, last_name, gender, cell_mobile_number, email_address, other_details; Assessment_Notes: notes_id, student_id, teacher_id, date_of_notes, text_of_notes, other_details; Behavior_Incident: incident_id, incident_type_code, student_id, date_incident_start, date_incident_end, incident_summary, recommendations, other_details; Detention: detention_id, detention_type_code, teacher_id, datetime_detention_start, datetime_detention_end, detention_summary, other_details; Student_Addresses: student_id, address_id, date_address_from, date_address_to, monthly_rental, other_details | Find the dates of assessment notes for students with first name \"Fanny\".", "sql": "SELECT T1.date_of_notes FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T2.first_name = \"Fanny\"", "example": {"db_id": "behavior_monitoring", "query": "SELECT T1.date_of_notes FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.first_name  =  \"Fanny\"", "query_toks": ["SELECT", "T1.date_of_notes", "FROM", "Assessment_Notes", "AS", "T1", "JOIN", "Students", "AS", "T2", "ON", "T1.student_id", "=", "T2.student_id", "WHERE", "T2.first_name", "=", "``", "Fanny", "''"], "query_toks_no_value": ["select", "t1", ".", "date_of_notes", "from", "assessment_notes", "as", "t1", "join", "students", "as", "t2", "on", "t1", ".", "student_id", "=", "t2", ".", "student_id", "where", "t2", ".", "first_name", "=", "value"], "question": "Find the dates of assessment notes for students with first name \"Fanny\".", "question_toks": ["Find", "the", "dates", "of", "assessment", "notes", "for", "students", "with", "first", "name", "``", "Fanny", "''", "."], "guid": 9302}}
{"text": "county_public_safety: County_ID, Name, Population, Police_officers, Residents_per_officer, Case_burden, Crime_rate, Police_force, Location; city: City_ID, County_ID, Name, White, Black, Amerindian, Asian, Multiracial, Hispanic | What is the name of the county with the greatest population?", "sql": "SELECT Name FROM county_public_safety ORDER BY Population DESC LIMIT 1", "example": {"db_id": "county_public_safety", "query": "SELECT Name FROM county_public_safety ORDER BY Population DESC LIMIT 1", "query_toks": ["SELECT", "Name", "FROM", "county_public_safety", "ORDER", "BY", "Population", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "name", "from", "county_public_safety", "order", "by", "population", "desc", "limit", "value"], "question": "What is the name of the county with the greatest population?", "question_toks": ["What", "is", "the", "name", "of", "the", "county", "with", "the", "greatest", "population", "?"], "guid": 9303}}
{"text": "architect: id, name, nationality, gender; bridge: architect_id, id, name, location, length_meters, length_feet; mill: architect_id, id, location, name, type, built_year, notes | What are the distinct types of mills that are built by American or Canadian architects?", "sql": "SELECT DISTINCT T1.type FROM mill AS T1 JOIN architect AS t2 ON T1.architect_id = T2.id WHERE T2.nationality = 'American' OR T2.nationality = 'Canadian'", "example": {"db_id": "architecture", "query": "SELECT DISTINCT T1.type FROM mill AS T1 JOIN architect AS t2 ON T1.architect_id  =  T2.id WHERE T2.nationality  =  'American' OR T2.nationality  =  'Canadian'", "query_toks": ["SELECT", "DISTINCT", "T1.type", "FROM", "mill", "AS", "T1", "JOIN", "architect", "AS", "t2", "ON", "T1.architect_id", "=", "T2.id", "WHERE", "T2.nationality", "=", "'American", "'", "OR", "T2.nationality", "=", "'Canadian", "'"], "query_toks_no_value": ["select", "distinct", "t1", ".", "type", "from", "mill", "as", "t1", "join", "architect", "as", "t2", "on", "t1", ".", "architect_id", "=", "t2", ".", "id", "where", "t2", ".", "nationality", "=", "value", "or", "t2", ".", "nationality", "=", "value"], "question": "What are the distinct types of mills that are built by American or Canadian architects?", "question_toks": ["What", "are", "the", "distinct", "types", "of", "mills", "that", "are", "built", "by", "American", "or", "Canadian", "architects", "?"], "guid": 9304}}
{"text": "people: People_ID, District, Name, Party, Age; debate: Debate_ID, Date, Venue, Num_of_Audience; debate_people: Debate_ID, Affirmative, Negative, If_Affirmative_Win | What is the party of the youngest people?", "sql": "SELECT Party FROM people ORDER BY Age ASC LIMIT 1", "example": {"db_id": "debate", "query": "SELECT Party FROM people ORDER BY Age ASC LIMIT 1", "query_toks": ["SELECT", "Party", "FROM", "people", "ORDER", "BY", "Age", "ASC", "LIMIT", "1"], "query_toks_no_value": ["select", "party", "from", "people", "order", "by", "age", "asc", "limit", "value"], "question": "What is the party of the youngest people?", "question_toks": ["What", "is", "the", "party", "of", "the", "youngest", "people", "?"], "guid": 9305}}
{"text": "people: People_ID, Name, Country, Is_Male, Age; church: Church_ID, Name, Organized_by, Open_Date, Continuation_of; wedding: Church_ID, Male_ID, Female_ID, Year | Show the pair of male and female names in all weddings after year 2014", "sql": "SELECT T2.name , T3.name FROM wedding AS T1 JOIN people AS T2 ON T1.male_id = T2.people_id JOIN people AS T3 ON T1.female_id = T3.people_id WHERE T1.year > 2014", "example": {"db_id": "wedding", "query": "SELECT T2.name ,  T3.name FROM wedding AS T1 JOIN people AS T2 ON T1.male_id  =  T2.people_id JOIN people AS T3 ON T1.female_id  =  T3.people_id WHERE T1.year  >  2014", "query_toks": ["SELECT", "T2.name", ",", "T3.name", "FROM", "wedding", "AS", "T1", "JOIN", "people", "AS", "T2", "ON", "T1.male_id", "=", "T2.people_id", "JOIN", "people", "AS", "T3", "ON", "T1.female_id", "=", "T3.people_id", "WHERE", "T1.year", ">", "2014"], "query_toks_no_value": ["select", "t2", ".", "name", ",", "t3", ".", "name", "from", "wedding", "as", "t1", "join", "people", "as", "t2", "on", "t1", ".", "male_id", "=", "t2", ".", "people_id", "join", "people", "as", "t3", "on", "t1", ".", "female_id", "=", "t3", ".", "people_id", "where", "t1", ".", "year", ">", "value"], "question": "Show the pair of male and female names in all weddings after year 2014", "question_toks": ["Show", "the", "pair", "of", "male", "and", "female", "names", "in", "all", "weddings", "after", "year", "2014"], "guid": 9306}}
{"text": "Third_Party_Companies: company_id, company_type, company_name, company_address, other_company_details; Maintenance_Contracts: maintenance_contract_id, maintenance_contract_company_id, contract_start_date, contract_end_date, other_contract_details; Parts: part_id, part_name, chargeable_yn, chargeable_amount, other_part_details; Skills: skill_id, skill_code, skill_description; Staff: staff_id, staff_name, gender, other_staff_details; Assets: asset_id, maintenance_contract_id, supplier_company_id, asset_details, asset_make, asset_model, asset_acquired_date, asset_disposed_date, other_asset_details; Asset_Parts: asset_id, part_id; Maintenance_Engineers: engineer_id, company_id, first_name, last_name, other_details; Engineer_Skills: engineer_id, skill_id; Fault_Log: fault_log_entry_id, asset_id, recorded_by_staff_id, fault_log_entry_datetime, fault_description, other_fault_details | Which kind of part has the least number of faults? List the part name.", "sql": "SELECT T1.part_name FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id = T2.part_id GROUP BY T1.part_name ORDER BY count(*) ASC LIMIT 1", "example": {"db_id": "assets_maintenance", "query": "SELECT T1.part_name FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id  =  T2.part_id GROUP BY T1.part_name ORDER BY count(*) ASC LIMIT 1", "query_toks": ["SELECT", "T1.part_name", "FROM", "Parts", "AS", "T1", "JOIN", "Part_Faults", "AS", "T2", "ON", "T1.part_id", "=", "T2.part_id", "GROUP", "BY", "T1.part_name", "ORDER", "BY", "count", "(", "*", ")", "ASC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "part_name", "from", "parts", "as", "t1", "join", "part_faults", "as", "t2", "on", "t1", ".", "part_id", "=", "t2", ".", "part_id", "group", "by", "t1", ".", "part_name", "order", "by", "count", "(", "*", ")", "asc", "limit", "value"], "question": "Which kind of part has the least number of faults? List the part name.", "question_toks": ["Which", "kind", "of", "part", "has", "the", "least", "number", "of", "faults", "?", "List", "the", "part", "name", "."], "guid": 9307}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | What are the average price and score of wines for each appelation?", "sql": "SELECT avg(Price) , avg(Score) , Appelation FROM WINE GROUP BY Appelation", "example": {"db_id": "wine_1", "query": "SELECT avg(Price) ,  avg(Score) ,  Appelation FROM WINE GROUP BY Appelation", "query_toks": ["SELECT", "avg", "(", "Price", ")", ",", "avg", "(", "Score", ")", ",", "Appelation", "FROM", "WINE", "GROUP", "BY", "Appelation"], "query_toks_no_value": ["select", "avg", "(", "price", ")", ",", "avg", "(", "score", ")", ",", "appelation", "from", "wine", "group", "by", "appelation"], "question": "What are the average price and score of wines for each appelation?", "question_toks": ["What", "are", "the", "average", "price", "and", "score", "of", "wines", "for", "each", "appelation", "?"], "guid": 9308}}
{"text": "people: People_ID, Name, Country, Is_Male, Age; church: Church_ID, Name, Organized_by, Open_Date, Continuation_of; wedding: Church_ID, Male_ID, Female_ID, Year | List all church names in descending order of opening date.", "sql": "SELECT name FROM church ORDER BY open_date DESC", "example": {"db_id": "wedding", "query": "SELECT name FROM church ORDER BY open_date DESC", "query_toks": ["SELECT", "name", "FROM", "church", "ORDER", "BY", "open_date", "DESC"], "query_toks_no_value": ["select", "name", "from", "church", "order", "by", "open_date", "desc"], "question": "List all church names in descending order of opening date.", "question_toks": ["List", "all", "church", "names", "in", "descending", "order", "of", "opening", "date", "."], "guid": 9309}}
{"text": "Third_Party_Companies: company_id, company_type, company_name, company_address, other_company_details; Maintenance_Contracts: maintenance_contract_id, maintenance_contract_company_id, contract_start_date, contract_end_date, other_contract_details; Parts: part_id, part_name, chargeable_yn, chargeable_amount, other_part_details; Skills: skill_id, skill_code, skill_description; Staff: staff_id, staff_name, gender, other_staff_details; Assets: asset_id, maintenance_contract_id, supplier_company_id, asset_details, asset_make, asset_model, asset_acquired_date, asset_disposed_date, other_asset_details; Asset_Parts: asset_id, part_id; Maintenance_Engineers: engineer_id, company_id, first_name, last_name, other_details; Engineer_Skills: engineer_id, skill_id; Fault_Log: fault_log_entry_id, asset_id, recorded_by_staff_id, fault_log_entry_datetime, fault_description, other_fault_details | Which engineer has visited the most times? Show the engineer id, first name and last name.", "sql": "SELECT T1.engineer_id , T1.first_name , T1.last_name FROM Maintenance_Engineers AS T1 JOIN Engineer_Visits AS T2 ON T1.engineer_id = T2.engineer_id GROUP BY T1.engineer_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "assets_maintenance", "query": "SELECT T1.engineer_id ,  T1.first_name ,  T1.last_name FROM Maintenance_Engineers AS T1 JOIN Engineer_Visits AS T2 GROUP BY T1.engineer_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.engineer_id", ",", "T1.first_name", ",", "T1.last_name", "FROM", "Maintenance_Engineers", "AS", "T1", "JOIN", "Engineer_Visits", "AS", "T2", "GROUP", "BY", "T1.engineer_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "engineer_id", ",", "t1", ".", "first_name", ",", "t1", ".", "last_name", "from", "maintenance_engineers", "as", "t1", "join", "engineer_visits", "as", "t2", "group", "by", "t1", ".", "engineer_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which engineer has visited the most times? Show the engineer id, first name and last name.", "question_toks": ["Which", "engineer", "has", "visited", "the", "most", "times", "?", "Show", "the", "engineer", "id", ",", "first", "name", "and", "last", "name", "."], "guid": 9310}}
{"text": "architect: id, name, nationality, gender; bridge: architect_id, id, name, location, length_meters, length_feet; mill: architect_id, id, location, name, type, built_year, notes | What is the maximum length in meters for the bridges and what are the architects' names?", "sql": "SELECT MAX(T1.length_meters), T2.name FROM bridge AS T1 JOIN architect AS T2 ON T1.architect_id = T2.id", "example": {"db_id": "architecture", "query": "SELECT max(T1.length_meters) ,  T2.name FROM bridge AS T1 JOIN architect AS T2 ON T1.architect_id  =  T2.id", "query_toks": ["SELECT", "max", "(", "T1.length_meters", ")", ",", "T2.name", "FROM", "bridge", "AS", "T1", "JOIN", "architect", "AS", "T2", "ON", "T1.architect_id", "=", "T2.id"], "query_toks_no_value": ["select", "max", "(", "t1", ".", "length_meters", ")", ",", "t2", ".", "name", "from", "bridge", "as", "t1", "join", "architect", "as", "t2", "on", "t1", ".", "architect_id", "=", "t2", ".", "id"], "question": "What is the maximum length in meters for the bridges and what are the architects' names?", "question_toks": ["What", "is", "the", "maximum", "length", "in", "meters", "for", "the", "bridges", "and", "what", "are", "the", "architects", "'", "names", "?"], "guid": 9311}}