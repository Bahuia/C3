{"text": "county_public_safety: County_ID, Name, Population, Police_officers, Residents_per_officer, Case_burden, Crime_rate, Police_force, Location; city: City_ID, County_ID, Name, White, Black, Amerindian, Asian, Multiracial, Hispanic | Please show the police forces and the number of counties with each police force.", "sql": "SELECT Police_force ,  COUNT(*) FROM county_public_safety GROUP BY Police_force", "example": {"db_id": "county_public_safety", "query": "SELECT Police_force ,  COUNT(*) FROM county_public_safety GROUP BY Police_force", "query_toks": ["SELECT", "Police_force", ",", "COUNT", "(", "*", ")", "FROM", "county_public_safety", "GROUP", "BY", "Police_force"], "query_toks_no_value": ["select", "police_force", ",", "count", "(", "*", ")", "from", "county_public_safety", "group", "by", "police_force"], "question": "Please show the police forces and the number of counties with each police force.", "question_toks": ["Please", "show", "the", "police", "forces", "and", "the", "number", "of", "counties", "with", "each", "police", "force", "."], "guid": 9365}}
{"text": "battle: id, name, date, bulgarian_commander, latin_commander, result; ship: lost_in_battle, id, name, tonnage, ship_type, location, disposition_of_ship; death: caused_by_ship_id, id, note, killed, injured | What are the ids and names of the battles that led to more than 10 people killed in total.", "sql": "SELECT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle JOIN death AS T3 ON T2.id  =  T3.caused_by_ship_id GROUP BY T1.id HAVING sum(T3.killed)  >  10", "example": {"db_id": "battle_death", "query": "SELECT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle JOIN death AS T3 ON T2.id  =  T3.caused_by_ship_id GROUP BY T1.id HAVING sum(T3.killed)  >  10", "query_toks": ["SELECT", "T1.id", ",", "T1.name", "FROM", "battle", "AS", "T1", "JOIN", "ship", "AS", "T2", "ON", "T1.id", "=", "T2.lost_in_battle", "JOIN", "death", "AS", "T3", "ON", "T2.id", "=", "T3.caused_by_ship_id", "GROUP", "BY", "T1.id", "HAVING", "sum", "(", "T3.killed", ")", ">", "10"], "query_toks_no_value": ["select", "t1", ".", "id", ",", "t1", ".", "name", "from", "battle", "as", "t1", "join", "ship", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "lost_in_battle", "join", "death", "as", "t3", "on", "t2", ".", "id", "=", "t3", ".", "caused_by_ship_id", "group", "by", "t1", ".", "id", "having", "sum", "(", "t3", ".", "killed", ")", ">", "value"], "question": "What are the ids and names of the battles that led to more than 10 people killed in total.", "question_toks": ["What", "are", "the", "ids", "and", "names", "of", "the", "battles", "that", "led", "to", "more", "than", "10", "people", "killed", "in", "total", "."], "guid": 9366}}
{"text": "Ref_Address_Types: address_type_code, address_type_description; Ref_Detention_Type: detention_type_code, detention_type_description; Ref_Incident_Type: incident_type_code, incident_type_description; Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Students: student_id, address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, date_first_rental, date_left_university, other_student_details; Teachers: teacher_id, address_id, first_name, middle_name, last_name, gender, cell_mobile_number, email_address, other_details; Assessment_Notes: notes_id, student_id, teacher_id, date_of_notes, text_of_notes, other_details; Behavior_Incident: incident_id, incident_type_code, student_id, date_incident_start, date_incident_end, incident_summary, recommendations, other_details; Detention: detention_id, detention_type_code, teacher_id, datetime_detention_start, datetime_detention_end, detention_summary, other_details; Student_Addresses: student_id, address_id, date_address_from, date_address_to, monthly_rental, other_details | Find the first names of teachers whose email address contains the word \"man\".", "sql": "SELECT first_name FROM Teachers WHERE email_address LIKE '%man%'", "example": {"db_id": "behavior_monitoring", "query": "SELECT first_name FROM Teachers WHERE email_address LIKE '%man%'", "query_toks": ["SELECT", "first_name", "FROM", "Teachers", "WHERE", "email_address", "LIKE", "'", "%", "man", "%", "'"], "query_toks_no_value": ["select", "first_name", "from", "teachers", "where", "email_address", "like", "value"], "question": "Find the first names of teachers whose email address contains the word \"man\".", "question_toks": ["Find", "the", "first", "names", "of", "teachers", "whose", "email", "address", "contains", "the", "word", "``", "man", "''", "."], "guid": 9367}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | What are the average prices and cases of wines produced in the year of 2009 and made of Zinfandel grape?", "sql": "SELECT AVG(Price) ,  AVG(Cases) FROM WINE WHERE YEAR  =  2009 AND Grape  =  \"Zinfandel\"", "example": {"db_id": "wine_1", "query": "SELECT AVG(Price) ,  AVG(Cases) FROM WINE WHERE YEAR  =  2009 AND Grape  =  \"Zinfandel\"", "query_toks": ["SELECT", "AVG", "(", "Price", ")", ",", "AVG", "(", "Cases", ")", "FROM", "WINE", "WHERE", "YEAR", "=", "2009", "AND", "Grape", "=", "``", "Zinfandel", "''"], "query_toks_no_value": ["select", "avg", "(", "price", ")", ",", "avg", "(", "cases", ")", "from", "wine", "where", "year", "=", "value", "and", "grape", "=", "value"], "question": "What are the average prices and cases of wines produced in the year of 2009 and made of Zinfandel grape?", "question_toks": ["What", "are", "the", "average", "prices", "and", "cases", "of", "wines", "produced", "in", "the", "year", "of", "2009", "and", "made", "of", "Zinfandel", "grape", "?"], "guid": 9368}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | Give the names of wines with prices above any wine produced in 2006.", "sql": "SELECT Name FROM WINE WHERE Price  >  (SELECT max(Price) FROM WINE WHERE YEAR  =  2006)", "example": {"db_id": "wine_1", "query": "SELECT Name FROM WINE WHERE Price  >  (SELECT max(Price) FROM WINE WHERE YEAR  =  2006)", "query_toks": ["SELECT", "Name", "FROM", "WINE", "WHERE", "Price", ">", "(", "SELECT", "max", "(", "Price", ")", "FROM", "WINE", "WHERE", "YEAR", "=", "2006", ")"], "query_toks_no_value": ["select", "name", "from", "wine", "where", "price", ">", "(", "select", "max", "(", "price", ")", "from", "wine", "where", "year", "=", "value", ")"], "question": "Give the names of wines with prices above any wine produced in 2006.", "question_toks": ["Give", "the", "names", "of", "wines", "with", "prices", "above", "any", "wine", "produced", "in", "2006", "."], "guid": 9369}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | Count the number of wines produced at Robert Biale winery.", "sql": "SELECT count(*) FROM WINE WHERE Winery  =  \"Robert Biale\"", "example": {"db_id": "wine_1", "query": "SELECT count(*) FROM WINE WHERE Winery  =  \"Robert Biale\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "WINE", "WHERE", "Winery", "=", "``", "Robert", "Biale", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "wine", "where", "winery", "=", "value"], "question": "Count the number of wines produced at Robert Biale winery.", "question_toks": ["Count", "the", "number", "of", "wines", "produced", "at", "Robert", "Biale", "winery", "."], "guid": 9370}}
{"text": "Ref_Address_Types: address_type_code, address_type_description; Ref_Detention_Type: detention_type_code, detention_type_description; Ref_Incident_Type: incident_type_code, incident_type_description; Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Students: student_id, address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, date_first_rental, date_left_university, other_student_details; Teachers: teacher_id, address_id, first_name, middle_name, last_name, gender, cell_mobile_number, email_address, other_details; Assessment_Notes: notes_id, student_id, teacher_id, date_of_notes, text_of_notes, other_details; Behavior_Incident: incident_id, incident_type_code, student_id, date_incident_start, date_incident_end, incident_summary, recommendations, other_details; Detention: detention_id, detention_type_code, teacher_id, datetime_detention_start, datetime_detention_end, detention_summary, other_details; Student_Addresses: student_id, address_id, date_address_from, date_address_to, monthly_rental, other_details | How many distinct incident type codes are there?", "sql": "SELECT count(DISTINCT incident_type_code) FROM Behavior_Incident", "example": {"db_id": "behavior_monitoring", "query": "SELECT count(DISTINCT incident_type_code) FROM Behavior_Incident", "query_toks": ["SELECT", "count", "(", "DISTINCT", "incident_type_code", ")", "FROM", "Behavior_Incident"], "query_toks_no_value": ["select", "count", "(", "distinct", "incident_type_code", ")", "from", "behavior_incident"], "question": "How many distinct incident type codes are there?", "question_toks": ["How", "many", "distinct", "incident", "type", "codes", "are", "there", "?"], "guid": 9371}}
{"text": "Third_Party_Companies: company_id, company_type, company_name, company_address, other_company_details; Maintenance_Contracts: maintenance_contract_id, maintenance_contract_company_id, contract_start_date, contract_end_date, other_contract_details; Parts: part_id, part_name, chargeable_yn, chargeable_amount, other_part_details; Skills: skill_id, skill_code, skill_description; Staff: staff_id, staff_name, gender, other_staff_details; Assets: asset_id, maintenance_contract_id, supplier_company_id, asset_details, asset_make, asset_model, asset_acquired_date, asset_disposed_date, other_asset_details; Asset_Parts: asset_id, part_id; Maintenance_Engineers: engineer_id, company_id, first_name, last_name, other_details; Engineer_Skills: engineer_id, skill_id; Fault_Log: fault_log_entry_id, asset_id, recorded_by_staff_id, fault_log_entry_datetime, fault_description, other_fault_details | What is the description of the type of the company who concluded its contracts most recently?", "sql": "SELECT T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Contracts AS T2 ON T1.company_id  =  T2.maintenance_contract_company_id JOIN Ref_Company_Types AS T3 ON T1.company_type_code  =  T3.company_type_code ORDER BY T2.contract_end_date DESC LIMIT 1", "example": {"db_id": "assets_maintenance", "query": "SELECT T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Contracts AS T2 ON T1.company_id  =  T2.maintenance_contract_company_id JOIN Ref_Company_Types AS T3 ON T1.company_type_code  =  T3.company_type_code ORDER BY T2.contract_end_date DESC LIMIT 1", "query_toks": ["SELECT", "T1.company_name", "FROM", "Third_Party_Companies", "AS", "T1", "JOIN", "Maintenance_Contracts", "AS", "T2", "ON", "T1.company_id", "=", "T2.maintenance_contract_company_id", "JOIN", "Ref_Company_Types", "AS", "T3", "ON", "T1.company_type_code", "=", "T3.company_type_code", "ORDER", "BY", "T2.contract_end_date", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "company_name", "from", "third_party_companies", "as", "t1", "join", "maintenance_contracts", "as", "t2", "on", "t1", ".", "company_id", "=", "t2", ".", "maintenance_contract_company_id", "join", "ref_company_types", "as", "t3", "on", "t1", ".", "company_type_code", "=", "t3", ".", "company_type_code", "order", "by", "t2", ".", "contract_end_date", "desc", "limit", "value"], "question": "What is the description of the type of the company who concluded its contracts most recently?", "question_toks": ["What", "is", "the", "description", "of", "the", "type", "of", "the", "company", "who", "concluded", "its", "contracts", "most", "recently", "?"], "guid": 9372}}
{"text": "battle: id, name, date, bulgarian_commander, latin_commander, result; ship: lost_in_battle, id, name, tonnage, ship_type, location, disposition_of_ship; death: caused_by_ship_id, id, note, killed, injured | What is the average number of injuries caused each time?", "sql": "SELECT avg(injured) FROM death", "example": {"db_id": "battle_death", "query": "SELECT avg(injured) FROM death", "query_toks": ["SELECT", "avg", "(", "injured", ")", "FROM", "death"], "query_toks_no_value": ["select", "avg", "(", "injured", ")", "from", "death"], "question": "What is the average number of injuries caused each time?", "question_toks": ["What", "is", "the", "average", "number", "of", "injuries", "caused", "each", "time", "?"], "guid": 9373}}
{"text": "Ref_Address_Types: address_type_code, address_type_description; Ref_Detention_Type: detention_type_code, detention_type_description; Ref_Incident_Type: incident_type_code, incident_type_description; Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Students: student_id, address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, date_first_rental, date_left_university, other_student_details; Teachers: teacher_id, address_id, first_name, middle_name, last_name, gender, cell_mobile_number, email_address, other_details; Assessment_Notes: notes_id, student_id, teacher_id, date_of_notes, text_of_notes, other_details; Behavior_Incident: incident_id, incident_type_code, student_id, date_incident_start, date_incident_end, incident_summary, recommendations, other_details; Detention: detention_id, detention_type_code, teacher_id, datetime_detention_start, datetime_detention_end, detention_summary, other_details; Student_Addresses: student_id, address_id, date_address_from, date_address_to, monthly_rental, other_details | What is the zip code of the address where the teacher with first name \"Lyla\" lives?", "sql": "SELECT T1.zip_postcode FROM Addresses AS T1 JOIN Teachers AS T2 ON T1.address_id  =  T2.address_id WHERE T2.first_name  =  \"Lyla\"", "example": {"db_id": "behavior_monitoring", "query": "SELECT T1.zip_postcode FROM Addresses AS T1 JOIN Teachers AS T2 ON T1.address_id  =  T2.address_id WHERE T2.first_name  =  \"Lyla\"", "query_toks": ["SELECT", "T1.zip_postcode", "FROM", "Addresses", "AS", "T1", "JOIN", "Teachers", "AS", "T2", "ON", "T1.address_id", "=", "T2.address_id", "WHERE", "T2.first_name", "=", "``", "Lyla", "''"], "query_toks_no_value": ["select", "t1", ".", "zip_postcode", "from", "addresses", "as", "t1", "join", "teachers", "as", "t2", "on", "t1", ".", "address_id", "=", "t2", ".", "address_id", "where", "t2", ".", "first_name", "=", "value"], "question": "What is the zip code of the address where the teacher with first name \"Lyla\" lives?", "question_toks": ["What", "is", "the", "zip", "code", "of", "the", "address", "where", "the", "teacher", "with", "first", "name", "``", "Lyla", "''", "lives", "?"], "guid": 9374}}
{"text": "city: City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking; farm: Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats; farm_competition: Competition_ID, Year, Theme, Host_city_ID, Hosts; competition_record: Competition_ID, Farm_ID, Rank | What are the statuses and average populations of each city?", "sql": "SELECT Status ,  avg(Population) FROM city GROUP BY Status", "example": {"db_id": "farm", "query": "SELECT Status ,  avg(Population) FROM city GROUP BY Status", "query_toks": ["SELECT", "Status", ",", "avg", "(", "Population", ")", "FROM", "city", "GROUP", "BY", "Status"], "query_toks_no_value": ["select", "status", ",", "avg", "(", "population", ")", "from", "city", "group", "by", "status"], "question": "What are the statuses and average populations of each city?", "question_toks": ["What", "are", "the", "statuses", "and", "average", "populations", "of", "each", "city", "?"], "guid": 9375}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | What is the maximum price of wines from the appelation in the Central Coast area, which was produced before 2005?", "sql": "SELECT max(T2.Price) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.Area  =  \"Central Coast\" AND T2.year  <  2005", "example": {"db_id": "wine_1", "query": "SELECT max(T2.Price) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.Area  =  \"Central Coast\" AND T2.year  <  2005", "query_toks": ["SELECT", "max", "(", "T2.Price", ")", "FROM", "APPELLATIONS", "AS", "T1", "JOIN", "WINE", "AS", "T2", "ON", "T1.Appelation", "=", "T2.Appelation", "WHERE", "T1.Area", "=", "``", "Central", "Coast", "''", "AND", "T2.year", "<", "2005"], "query_toks_no_value": ["select", "max", "(", "t2", ".", "price", ")", "from", "appellations", "as", "t1", "join", "wine", "as", "t2", "on", "t1", ".", "appelation", "=", "t2", ".", "appelation", "where", "t1", ".", "area", "=", "value", "and", "t2", ".", "year", "<", "value"], "question": "What is the maximum price of wines from the appelation in the Central Coast area, which was produced before 2005?", "question_toks": ["What", "is", "the", "maximum", "price", "of", "wines", "from", "the", "appelation", "in", "the", "Central", "Coast", "area", ",", "which", "was", "produced", "before", "2005", "?"], "guid": 9376}}
{"text": "Ref_Address_Types: address_type_code, address_type_description; Ref_Detention_Type: detention_type_code, detention_type_description; Ref_Incident_Type: incident_type_code, incident_type_description; Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Students: student_id, address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, date_first_rental, date_left_university, other_student_details; Teachers: teacher_id, address_id, first_name, middle_name, last_name, gender, cell_mobile_number, email_address, other_details; Assessment_Notes: notes_id, student_id, teacher_id, date_of_notes, text_of_notes, other_details; Behavior_Incident: incident_id, incident_type_code, student_id, date_incident_start, date_incident_end, incident_summary, recommendations, other_details; Detention: detention_id, detention_type_code, teacher_id, datetime_detention_start, datetime_detention_end, detention_summary, other_details; Student_Addresses: student_id, address_id, date_address_from, date_address_to, monthly_rental, other_details | What are the line 1 and average monthly rentals of all student addresses?", "sql": "SELECT T1.line_1 ,  avg(T2.monthly_rental) FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id  =  T2.address_id GROUP BY T2.address_id", "example": {"db_id": "behavior_monitoring", "query": "SELECT T1.line_1 ,  avg(T2.monthly_rental) FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id  =  T2.address_id GROUP BY T2.address_id", "query_toks": ["SELECT", "T1.line_1", ",", "avg", "(", "T2.monthly_rental", ")", "FROM", "Addresses", "AS", "T1", "JOIN", "Student_Addresses", "AS", "T2", "ON", "T1.address_id", "=", "T2.address_id", "GROUP", "BY", "T2.address_id"], "query_toks_no_value": ["select", "t1", ".", "line_1", ",", "avg", "(", "t2", ".", "monthly_rental", ")", "from", "addresses", "as", "t1", "join", "student_addresses", "as", "t2", "on", "t1", ".", "address_id", "=", "t2", ".", "address_id", "group", "by", "t2", ".", "address_id"], "question": "What are the line 1 and average monthly rentals of all student addresses?", "question_toks": ["What", "are", "the", "line", "1", "and", "average", "monthly", "rentals", "of", "all", "student", "addresses", "?"], "guid": 9377}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | Give the neames of wines with prices below 50 and with appelations in Monterey county.", "sql": "SELECT T2.Name FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  \"Monterey\" AND T2.price  <  50", "example": {"db_id": "wine_1", "query": "SELECT T2.Name FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  \"Monterey\" AND T2.price  <  50", "query_toks": ["SELECT", "T2.Name", "FROM", "APPELLATIONS", "AS", "T1", "JOIN", "WINE", "AS", "T2", "ON", "T1.Appelation", "=", "T2.Appelation", "WHERE", "T1.County", "=", "``", "Monterey", "''", "AND", "T2.price", "<", "50"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "appellations", "as", "t1", "join", "wine", "as", "t2", "on", "t1", ".", "appelation", "=", "t2", ".", "appelation", "where", "t1", ".", "county", "=", "value", "and", "t2", ".", "price", "<", "value"], "question": "Give the neames of wines with prices below 50 and with appelations in Monterey county.", "question_toks": ["Give", "the", "neames", "of", "wines", "with", "prices", "below", "50", "and", "with", "appelations", "in", "Monterey", "county", "."], "guid": 9378}}
{"text": "city: City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking; farm: Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats; farm_competition: Competition_ID, Year, Theme, Host_city_ID, Hosts; competition_record: Competition_ID, Farm_ID, Rank | List official names of cities in descending order of population.", "sql": "SELECT Official_Name FROM city ORDER BY Population DESC", "example": {"db_id": "farm", "query": "SELECT Official_Name FROM city ORDER BY Population DESC", "query_toks": ["SELECT", "Official_Name", "FROM", "city", "ORDER", "BY", "Population", "DESC"], "query_toks_no_value": ["select", "official_name", "from", "city", "order", "by", "population", "desc"], "question": "List official names of cities in descending order of population.", "question_toks": ["List", "official", "names", "of", "cities", "in", "descending", "order", "of", "population", "."], "guid": 9379}}
{"text": "repair: repair_ID, name, Launch_Date, Notes; machine: Machine_ID, Making_Year, Class, Team, Machine_series, value_points, quality_rank; technician: technician_id, Name, Team, Starting_Year, Age; repair_assignment: technician_id, repair_ID, Machine_ID | Show names of technicians who are assigned to repair machines with value point more than 70.", "sql": "SELECT T3.Name FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id  =  T2.machine_id JOIN technician AS T3 ON T1.technician_ID  =  T3.technician_ID WHERE T2.value_points  >  70", "example": {"db_id": "machine_repair", "query": "SELECT T3.Name FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id  =  T2.machine_id JOIN technician AS T3 ON T1.technician_ID  =  T3.technician_ID WHERE T2.value_points  >  70", "query_toks": ["SELECT", "T3.Name", "FROM", "repair_assignment", "AS", "T1", "JOIN", "machine", "AS", "T2", "ON", "T1.machine_id", "=", "T2.machine_id", "JOIN", "technician", "AS", "T3", "ON", "T1.technician_ID", "=", "T3.technician_ID", "WHERE", "T2.value_points", ">", "70"], "query_toks_no_value": ["select", "t3", ".", "name", "from", "repair_assignment", "as", "t1", "join", "machine", "as", "t2", "on", "t1", ".", "machine_id", "=", "t2", ".", "machine_id", "join", "technician", "as", "t3", "on", "t1", ".", "technician_id", "=", "t3", ".", "technician_id", "where", "t2", ".", "value_points", ">", "value"], "question": "Show names of technicians who are assigned to repair machines with value point more than 70.", "question_toks": ["Show", "names", "of", "technicians", "who", "are", "assigned", "to", "repair", "machines", "with", "value", "point", "more", "than", "70", "."], "guid": 9380}}
{"text": "repair: repair_ID, name, Launch_Date, Notes; machine: Machine_ID, Making_Year, Class, Team, Machine_series, value_points, quality_rank; technician: technician_id, Name, Team, Starting_Year, Age; repair_assignment: technician_id, repair_ID, Machine_ID | List the name of technicians whose team is not \"NYY\".", "sql": "SELECT Name FROM technician WHERE Team != \"NYY\"", "example": {"db_id": "machine_repair", "query": "SELECT Name FROM technician WHERE Team != \"NYY\"", "query_toks": ["SELECT", "Name", "FROM", "technician", "WHERE", "Team", "!", "=", "``", "NYY", "''"], "query_toks_no_value": ["select", "name", "from", "technician", "where", "team", "!", "=", "value"], "question": "List the name of technicians whose team is not \"NYY\".", "question_toks": ["List", "the", "name", "of", "technicians", "whose", "team", "is", "not", "``", "NYY", "''", "."], "guid": 9381}}
{"text": "county_public_safety: County_ID, Name, Population, Police_officers, Residents_per_officer, Case_burden, Crime_rate, Police_force, Location; city: City_ID, County_ID, Name, White, Black, Amerindian, Asian, Multiracial, Hispanic | How many cities are in counties that have populations of over 20000?", "sql": "SELECT count(*) FROM city WHERE county_ID IN (SELECT county_ID FROM county_public_safety WHERE population  >  20000)", "example": {"db_id": "county_public_safety", "query": "SELECT count(*) FROM city WHERE county_ID IN (SELECT county_ID FROM county_public_safety WHERE population  >  20000)", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "city", "WHERE", "county_ID", "IN", "(", "SELECT", "county_ID", "FROM", "county_public_safety", "WHERE", "population", ">", "20000", ")"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "city", "where", "county_id", "in", "(", "select", "county_id", "from", "county_public_safety", "where", "population", ">", "value", ")"], "question": "How many cities are in counties that have populations of over 20000?", "question_toks": ["How", "many", "cities", "are", "in", "counties", "that", "have", "populations", "of", "over", "20000", "?"], "guid": 9382}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | What are the wines that have prices higher than 50 and made of Red color grapes?", "sql": "SELECT T2.Name FROM Grapes AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  \"Red\" AND T2.price  >  50", "example": {"db_id": "wine_1", "query": "SELECT T2.Name FROM Grapes AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  \"Red\" AND T2.price  >  50", "query_toks": ["SELECT", "T2.Name", "FROM", "Grapes", "AS", "T1", "JOIN", "WINE", "AS", "T2", "ON", "T1.Grape", "=", "T2.Grape", "WHERE", "T1.Color", "=", "``", "Red", "''", "AND", "T2.price", ">", "50"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "grapes", "as", "t1", "join", "wine", "as", "t2", "on", "t1", ".", "grape", "=", "t2", ".", "grape", "where", "t1", ".", "color", "=", "value", "and", "t2", ".", "price", ">", "value"], "question": "What are the wines that have prices higher than 50 and made of Red color grapes?", "question_toks": ["What", "are", "the", "wines", "that", "have", "prices", "higher", "than", "50", "and", "made", "of", "Red", "color", "grapes", "?"], "guid": 9383}}
{"text": "county_public_safety: County_ID, Name, Population, Police_officers, Residents_per_officer, Case_burden, Crime_rate, Police_force, Location; city: City_ID, County_ID, Name, White, Black, Amerindian, Asian, Multiracial, Hispanic | What are the white percentages of cities, and the corresponding crime rates of the counties they correspond to?", "sql": "SELECT T1.White ,  T2.Crime_rate FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID  =  T2.County_ID", "example": {"db_id": "county_public_safety", "query": "SELECT T1.White ,  T2.Crime_rate FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID  =  T2.County_ID", "query_toks": ["SELECT", "T1.White", ",", "T2.Crime_rate", "FROM", "city", "AS", "T1", "JOIN", "county_public_safety", "AS", "T2", "ON", "T1.County_ID", "=", "T2.County_ID"], "query_toks_no_value": ["select", "t1", ".", "white", ",", "t2", ".", "crime_rate", "from", "city", "as", "t1", "join", "county_public_safety", "as", "t2", "on", "t1", ".", "county_id", "=", "t2", ".", "county_id"], "question": "What are the white percentages of cities, and the corresponding crime rates of the counties they correspond to?", "question_toks": ["What", "are", "the", "white", "percentages", "of", "cities", ",", "and", "the", "corresponding", "crime", "rates", "of", "the", "counties", "they", "correspond", "to", "?"], "guid": 9384}}
{"text": "stadium: id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage; game: stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition; injury_accident: game_id, id, Player, Injury, Number_of_matches, Source | In which season and which stadium did any player have an injury of 'Foot injury' or 'Knee problem'?", "sql": "SELECT T1.season ,  T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id WHERE T3.injury  =  'Foot injury' OR T3.injury  =  'Knee problem'", "example": {"db_id": "game_injury", "query": "SELECT T1.season ,  T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id WHERE T3.injury  =  'Foot injury' OR T3.injury  =  'Knee problem'", "query_toks": ["SELECT", "T1.season", ",", "T2.name", "FROM", "game", "AS", "T1", "JOIN", "stadium", "AS", "T2", "ON", "T1.stadium_id", "=", "T2.id", "JOIN", "injury_accident", "AS", "T3", "ON", "T1.id", "=", "T3.game_id", "WHERE", "T3.injury", "=", "'Foot", "injury", "'", "OR", "T3.injury", "=", "'Knee", "problem", "'"], "query_toks_no_value": ["select", "t1", ".", "season", ",", "t2", ".", "name", "from", "game", "as", "t1", "join", "stadium", "as", "t2", "on", "t1", ".", "stadium_id", "=", "t2", ".", "id", "join", "injury_accident", "as", "t3", "on", "t1", ".", "id", "=", "t3", ".", "game_id", "where", "t3", ".", "injury", "=", "value", "or", "t3", ".", "injury", "=", "value"], "question": "In which season and which stadium did any player have an injury of 'Foot injury' or 'Knee problem'?", "question_toks": ["In", "which", "season", "and", "which", "stadium", "did", "any", "player", "have", "an", "injury", "of", "'Foot", "injury", "'", "or", "'Knee", "problem", "'", "?"], "guid": 9385}}
{"text": "city: City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking; farm: Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats; farm_competition: Competition_ID, Year, Theme, Host_city_ID, Hosts; competition_record: Competition_ID, Farm_ID, Rank | What are the official names of cities that have population over 1500 or less than 500?", "sql": "SELECT Official_Name FROM city WHERE Population  >  1500 OR Population  <  500", "example": {"db_id": "farm", "query": "SELECT Official_Name FROM city WHERE Population  >  1500 OR Population  <  500", "query_toks": ["SELECT", "Official_Name", "FROM", "city", "WHERE", "Population", ">", "1500", "OR", "Population", "<", "500"], "query_toks_no_value": ["select", "official_name", "from", "city", "where", "population", ">", "value", "or", "population", "<", "value"], "question": "What are the official names of cities that have population over 1500 or less than 500?", "question_toks": ["What", "are", "the", "official", "names", "of", "cities", "that", "have", "population", "over", "1500", "or", "less", "than", "500", "?"], "guid": 9386}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | What are the wines that have prices lower than 50 and have appelations in Monterey county?", "sql": "SELECT T2.Name FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  \"Monterey\" AND T2.price  <  50", "example": {"db_id": "wine_1", "query": "SELECT T2.Name FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  \"Monterey\" AND T2.price  <  50", "query_toks": ["SELECT", "T2.Name", "FROM", "APPELLATIONS", "AS", "T1", "JOIN", "WINE", "AS", "T2", "ON", "T1.Appelation", "=", "T2.Appelation", "WHERE", "T1.County", "=", "``", "Monterey", "''", "AND", "T2.price", "<", "50"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "appellations", "as", "t1", "join", "wine", "as", "t2", "on", "t1", ".", "appelation", "=", "t2", ".", "appelation", "where", "t1", ".", "county", "=", "value", "and", "t2", ".", "price", "<", "value"], "question": "What are the wines that have prices lower than 50 and have appelations in Monterey county?", "question_toks": ["What", "are", "the", "wines", "that", "have", "prices", "lower", "than", "50", "and", "have", "appelations", "in", "Monterey", "county", "?"], "guid": 9387}}
{"text": "Ref_Address_Types: address_type_code, address_type_description; Ref_Detention_Type: detention_type_code, detention_type_description; Ref_Incident_Type: incident_type_code, incident_type_description; Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Students: student_id, address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, date_first_rental, date_left_university, other_student_details; Teachers: teacher_id, address_id, first_name, middle_name, last_name, gender, cell_mobile_number, email_address, other_details; Assessment_Notes: notes_id, student_id, teacher_id, date_of_notes, text_of_notes, other_details; Behavior_Incident: incident_id, incident_type_code, student_id, date_incident_start, date_incident_end, incident_summary, recommendations, other_details; Detention: detention_id, detention_type_code, teacher_id, datetime_detention_start, datetime_detention_end, detention_summary, other_details; Student_Addresses: student_id, address_id, date_address_from, date_address_to, monthly_rental, other_details | Find the id and last name of the student that has the most behavior incidents?", "sql": "SELECT T1.student_id ,  T2.last_name FROM Behavior_Incident AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "behavior_monitoring", "query": "SELECT T1.student_id ,  T2.last_name FROM Behavior_Incident AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.student_id", ",", "T2.last_name", "FROM", "Behavior_Incident", "AS", "T1", "JOIN", "Students", "AS", "T2", "ON", "T1.student_id", "=", "T2.student_id", "GROUP", "BY", "T1.student_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "student_id", ",", "t2", ".", "last_name", "from", "behavior_incident", "as", "t1", "join", "students", "as", "t2", "on", "t1", ".", "student_id", "=", "t2", ".", "student_id", "group", "by", "t1", ".", "student_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Find the id and last name of the student that has the most behavior incidents?", "question_toks": ["Find", "the", "id", "and", "last", "name", "of", "the", "student", "that", "has", "the", "most", "behavior", "incidents", "?"], "guid": 9388}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | What are the names of wines made from red grapes and with prices above 50?", "sql": "SELECT T2.Name FROM Grapes AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  \"Red\" AND T2.price  >  50", "example": {"db_id": "wine_1", "query": "SELECT T2.Name FROM Grapes AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  \"Red\" AND T2.price  >  50", "query_toks": ["SELECT", "T2.Name", "FROM", "Grapes", "AS", "T1", "JOIN", "WINE", "AS", "T2", "ON", "T1.Grape", "=", "T2.Grape", "WHERE", "T1.Color", "=", "``", "Red", "''", "AND", "T2.price", ">", "50"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "grapes", "as", "t1", "join", "wine", "as", "t2", "on", "t1", ".", "grape", "=", "t2", ".", "grape", "where", "t1", ".", "color", "=", "value", "and", "t2", ".", "price", ">", "value"], "question": "What are the names of wines made from red grapes and with prices above 50?", "question_toks": ["What", "are", "the", "names", "of", "wines", "made", "from", "red", "grapes", "and", "with", "prices", "above", "50", "?"], "guid": 9389}}
{"text": "stadium: id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage; game: stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition; injury_accident: game_id, id, Player, Injury, Number_of_matches, Source | Find the id and name of the stadium where the largest number of injury accidents occurred.", "sql": "SELECT T1.id ,  T1.name FROM stadium AS T1 JOIN game AS T2 ON T1.id  =  T2.stadium_id JOIN injury_accident AS T3 ON T2.id  =  T3.game_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "game_injury", "query": "SELECT T1.id ,  T1.name FROM stadium AS T1 JOIN game AS T2 ON T1.id  =  T2.stadium_id JOIN injury_accident AS T3 ON T2.id  =  T3.game_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.id", ",", "T1.name", "FROM", "stadium", "AS", "T1", "JOIN", "game", "AS", "T2", "ON", "T1.id", "=", "T2.stadium_id", "JOIN", "injury_accident", "AS", "T3", "ON", "T2.id", "=", "T3.game_id", "GROUP", "BY", "T1.id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "id", ",", "t1", ".", "name", "from", "stadium", "as", "t1", "join", "game", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "stadium_id", "join", "injury_accident", "as", "t3", "on", "t2", ".", "id", "=", "t3", ".", "game_id", "group", "by", "t1", ".", "id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Find the id and name of the stadium where the largest number of injury accidents occurred.", "question_toks": ["Find", "the", "id", "and", "name", "of", "the", "stadium", "where", "the", "largest", "number", "of", "injury", "accidents", "occurred", "."], "guid": 9390}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | What is the average price for wines not produced in Sonoma county?", "sql": "SELECT avg(price) FROM wine WHERE Appelation NOT IN (SELECT T1.Appelation FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  'Sonoma')", "example": {"db_id": "wine_1", "query": "SELECT avg(price) FROM wine WHERE Appelation NOT IN (SELECT T1.Appelation FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  'Sonoma')", "query_toks": ["SELECT", "avg", "(", "price", ")", "FROM", "wine", "WHERE", "Appelation", "NOT", "IN", "(", "SELECT", "T1.Appelation", "FROM", "APPELLATIONS", "AS", "T1", "JOIN", "WINE", "AS", "T2", "ON", "T1.Appelation", "=", "T2.Appelation", "WHERE", "T1.County", "=", "'Sonoma", "'", ")"], "query_toks_no_value": ["select", "avg", "(", "price", ")", "from", "wine", "where", "appelation", "not", "in", "(", "select", "t1", ".", "appelation", "from", "appellations", "as", "t1", "join", "wine", "as", "t2", "on", "t1", ".", "appelation", "=", "t2", ".", "appelation", "where", "t1", ".", "county", "=", "value", ")"], "question": "What is the average price for wines not produced in Sonoma county?", "question_toks": ["What", "is", "the", "average", "price", "for", "wines", "not", "produced", "in", "Sonoma", "county", "?"], "guid": 9391}}
{"text": "repair: repair_ID, name, Launch_Date, Notes; machine: Machine_ID, Making_Year, Class, Team, Machine_series, value_points, quality_rank; technician: technician_id, Name, Team, Starting_Year, Age; repair_assignment: technician_id, repair_ID, Machine_ID | Show different teams of technicians and the number of technicians in each team.", "sql": "SELECT Team ,  COUNT(*) FROM technician GROUP BY Team", "example": {"db_id": "machine_repair", "query": "SELECT Team ,  COUNT(*) FROM technician GROUP BY Team", "query_toks": ["SELECT", "Team", ",", "COUNT", "(", "*", ")", "FROM", "technician", "GROUP", "BY", "Team"], "query_toks_no_value": ["select", "team", ",", "count", "(", "*", ")", "from", "technician", "group", "by", "team"], "question": "Show different teams of technicians and the number of technicians in each team.", "question_toks": ["Show", "different", "teams", "of", "technicians", "and", "the", "number", "of", "technicians", "in", "each", "team", "."], "guid": 9392}}
{"text": "Ref_Address_Types: address_type_code, address_type_description; Ref_Detention_Type: detention_type_code, detention_type_description; Ref_Incident_Type: incident_type_code, incident_type_description; Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Students: student_id, address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, date_first_rental, date_left_university, other_student_details; Teachers: teacher_id, address_id, first_name, middle_name, last_name, gender, cell_mobile_number, email_address, other_details; Assessment_Notes: notes_id, student_id, teacher_id, date_of_notes, text_of_notes, other_details; Behavior_Incident: incident_id, incident_type_code, student_id, date_incident_start, date_incident_end, incident_summary, recommendations, other_details; Detention: detention_id, detention_type_code, teacher_id, datetime_detention_start, datetime_detention_end, detention_summary, other_details; Student_Addresses: student_id, address_id, date_address_from, date_address_to, monthly_rental, other_details | Return the cell phone number and email address for all students.", "sql": "SELECT cell_mobile_number ,  email_address FROM STUDENTS", "example": {"db_id": "behavior_monitoring", "query": "SELECT cell_mobile_number ,  email_address FROM STUDENTS", "query_toks": ["SELECT", "cell_mobile_number", ",", "email_address", "FROM", "STUDENTS"], "query_toks_no_value": ["select", "cell_mobile_number", ",", "email_address", "from", "students"], "question": "Return the cell phone number and email address for all students.", "question_toks": ["Return", "the", "cell", "phone", "number", "and", "email", "address", "for", "all", "students", "."], "guid": 9393}}
{"text": "repair: repair_ID, name, Launch_Date, Notes; machine: Machine_ID, Making_Year, Class, Team, Machine_series, value_points, quality_rank; technician: technician_id, Name, Team, Starting_Year, Age; repair_assignment: technician_id, repair_ID, Machine_ID | What is the team and starting year for each technician?", "sql": "SELECT Team ,  Starting_Year FROM technician", "example": {"db_id": "machine_repair", "query": "SELECT Team ,  Starting_Year FROM technician", "query_toks": ["SELECT", "Team", ",", "Starting_Year", "FROM", "technician"], "query_toks_no_value": ["select", "team", ",", "starting_year", "from", "technician"], "question": "What is the team and starting year for each technician?", "question_toks": ["What", "is", "the", "team", "and", "starting", "year", "for", "each", "technician", "?"], "guid": 9394}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | Give me the average prices of wines that are produced by appelations in Sonoma County.", "sql": "SELECT AVG(T2.Price) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  \"Sonoma\"", "example": {"db_id": "wine_1", "query": "SELECT AVG(T2.Price) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  \"Sonoma\"", "query_toks": ["SELECT", "AVG", "(", "T2.Price", ")", "FROM", "APPELLATIONS", "AS", "T1", "JOIN", "WINE", "AS", "T2", "ON", "T1.Appelation", "=", "T2.Appelation", "WHERE", "T1.County", "=", "``", "Sonoma", "''"], "query_toks_no_value": ["select", "avg", "(", "t2", ".", "price", ")", "from", "appellations", "as", "t1", "join", "wine", "as", "t2", "on", "t1", ".", "appelation", "=", "t2", ".", "appelation", "where", "t1", ".", "county", "=", "value"], "question": "Give me the average prices of wines that are produced by appelations in Sonoma County.", "question_toks": ["Give", "me", "the", "average", "prices", "of", "wines", "that", "are", "produced", "by", "appelations", "in", "Sonoma", "County", "."], "guid": 9395}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | What are the average prices of wines for different years?", "sql": "SELECT avg(Price) ,  YEAR FROM WINE GROUP BY YEAR", "example": {"db_id": "wine_1", "query": "SELECT avg(Price) ,  YEAR FROM WINE GROUP BY YEAR", "query_toks": ["SELECT", "avg", "(", "Price", ")", ",", "YEAR", "FROM", "WINE", "GROUP", "BY", "YEAR"], "query_toks_no_value": ["select", "avg", "(", "price", ")", ",", "year", "from", "wine", "group", "by", "year"], "question": "What are the average prices of wines for different years?", "question_toks": ["What", "are", "the", "average", "prices", "of", "wines", "for", "different", "years", "?"], "guid": 9396}}
{"text": "perpetrator: Perpetrator_ID, People_ID, Date, Year, Location, Country, Killed, Injured; people: People_ID, Name, Height, Weight, Home_Town | What are the heights of perpetrators in descending order of the number of people they injured?", "sql": "SELECT T1.Height FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Injured DESC", "example": {"db_id": "perpetrator", "query": "SELECT T1.Height FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Injured DESC", "query_toks": ["SELECT", "T1.Height", "FROM", "people", "AS", "T1", "JOIN", "perpetrator", "AS", "T2", "ON", "T1.People_ID", "=", "T2.People_ID", "ORDER", "BY", "T2.Injured", "DESC"], "query_toks_no_value": ["select", "t1", ".", "height", "from", "people", "as", "t1", "join", "perpetrator", "as", "t2", "on", "t1", ".", "people_id", "=", "t2", ".", "people_id", "order", "by", "t2", ".", "injured", "desc"], "question": "What are the heights of perpetrators in descending order of the number of people they injured?", "question_toks": ["What", "are", "the", "heights", "of", "perpetrators", "in", "descending", "order", "of", "the", "number", "of", "people", "they", "injured", "?"], "guid": 9397}}
{"text": "people: People_ID, Name, Country, Is_Male, Age; church: Church_ID, Name, Organized_by, Open_Date, Continuation_of; wedding: Church_ID, Male_ID, Female_ID, Year | Show all opening years and the number of churches that opened in that year.", "sql": "SELECT open_date ,  count(*) FROM church GROUP BY open_date", "example": {"db_id": "wedding", "query": "SELECT open_date ,  count(*) FROM church GROUP BY open_date", "query_toks": ["SELECT", "open_date", ",", "count", "(", "*", ")", "FROM", "church", "GROUP", "BY", "open_date"], "query_toks_no_value": ["select", "open_date", ",", "count", "(", "*", ")", "from", "church", "group", "by", "open_date"], "question": "Show all opening years and the number of churches that opened in that year.", "question_toks": ["Show", "all", "opening", "years", "and", "the", "number", "of", "churches", "that", "opened", "in", "that", "year", "."], "guid": 9398}}
{"text": "Ref_Address_Types: address_type_code, address_type_description; Ref_Detention_Type: detention_type_code, detention_type_description; Ref_Incident_Type: incident_type_code, incident_type_description; Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Students: student_id, address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, date_first_rental, date_left_university, other_student_details; Teachers: teacher_id, address_id, first_name, middle_name, last_name, gender, cell_mobile_number, email_address, other_details; Assessment_Notes: notes_id, student_id, teacher_id, date_of_notes, text_of_notes, other_details; Behavior_Incident: incident_id, incident_type_code, student_id, date_incident_start, date_incident_end, incident_summary, recommendations, other_details; Detention: detention_id, detention_type_code, teacher_id, datetime_detention_start, datetime_detention_end, detention_summary, other_details; Student_Addresses: student_id, address_id, date_address_from, date_address_to, monthly_rental, other_details | Find the maximum and minimum monthly rental for all student addresses.", "sql": "SELECT max(monthly_rental) ,  min(monthly_rental) FROM Student_Addresses", "example": {"db_id": "behavior_monitoring", "query": "SELECT max(monthly_rental) ,  min(monthly_rental) FROM Student_Addresses", "query_toks": ["SELECT", "max", "(", "monthly_rental", ")", ",", "min", "(", "monthly_rental", ")", "FROM", "Student_Addresses"], "query_toks_no_value": ["select", "max", "(", "monthly_rental", ")", ",", "min", "(", "monthly_rental", ")", "from", "student_addresses"], "question": "Find the maximum and minimum monthly rental for all student addresses.", "question_toks": ["Find", "the", "maximum", "and", "minimum", "monthly", "rental", "for", "all", "student", "addresses", "."], "guid": 9399}}
{"text": "people: People_ID, District, Name, Party, Age; debate: Debate_ID, Date, Venue, Num_of_Audience; debate_people: Debate_ID, Affirmative, Negative, If_Affirmative_Win | Show the names of people, and dates and venues of debates they are on the affirmative side.", "sql": "SELECT T3.Name ,  T2.Date ,  T2.Venue FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID  =  T2.Debate_ID JOIN people AS T3 ON T1.Affirmative  =  T3.People_ID", "example": {"db_id": "debate", "query": "SELECT T3.Name ,  T2.Date ,  T2.Venue FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID  =  T2.Debate_ID JOIN people AS T3 ON T1.Affirmative  =  T3.People_ID", "query_toks": ["SELECT", "T3.Name", ",", "T2.Date", ",", "T2.Venue", "FROM", "debate_people", "AS", "T1", "JOIN", "debate", "AS", "T2", "ON", "T1.Debate_ID", "=", "T2.Debate_ID", "JOIN", "people", "AS", "T3", "ON", "T1.Affirmative", "=", "T3.People_ID"], "query_toks_no_value": ["select", "t3", ".", "name", ",", "t2", ".", "date", ",", "t2", ".", "venue", "from", "debate_people", "as", "t1", "join", "debate", "as", "t2", "on", "t1", ".", "debate_id", "=", "t2", ".", "debate_id", "join", "people", "as", "t3", "on", "t1", ".", "affirmative", "=", "t3", ".", "people_id"], "question": "Show the names of people, and dates and venues of debates they are on the affirmative side.", "question_toks": ["Show", "the", "names", "of", "people", ",", "and", "dates", "and", "venues", "of", "debates", "they", "are", "on", "the", "affirmative", "side", "."], "guid": 9400}}
{"text": "Ref_Address_Types: address_type_code, address_type_description; Ref_Detention_Type: detention_type_code, detention_type_description; Ref_Incident_Type: incident_type_code, incident_type_description; Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Students: student_id, address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, date_first_rental, date_left_university, other_student_details; Teachers: teacher_id, address_id, first_name, middle_name, last_name, gender, cell_mobile_number, email_address, other_details; Assessment_Notes: notes_id, student_id, teacher_id, date_of_notes, text_of_notes, other_details; Behavior_Incident: incident_id, incident_type_code, student_id, date_incident_start, date_incident_end, incident_summary, recommendations, other_details; Detention: detention_id, detention_type_code, teacher_id, datetime_detention_start, datetime_detention_end, detention_summary, other_details; Student_Addresses: student_id, address_id, date_address_from, date_address_to, monthly_rental, other_details | What are the start and end dates for incidents with incident type code \"NOISE\"?", "sql": "SELECT date_incident_start ,  date_incident_end FROM Behavior_Incident WHERE incident_type_code  =  \"NOISE\"", "example": {"db_id": "behavior_monitoring", "query": "SELECT date_incident_start ,  date_incident_end FROM Behavior_Incident WHERE incident_type_code  =  \"NOISE\"", "query_toks": ["SELECT", "date_incident_start", ",", "date_incident_end", "FROM", "Behavior_Incident", "WHERE", "incident_type_code", "=", "``", "NOISE", "''"], "query_toks_no_value": ["select", "date_incident_start", ",", "date_incident_end", "from", "behavior_incident", "where", "incident_type_code", "=", "value"], "question": "What are the start and end dates for incidents with incident type code \"NOISE\"?", "question_toks": ["What", "are", "the", "start", "and", "end", "dates", "for", "incidents", "with", "incident", "type", "code", "``", "NOISE", "''", "?"], "guid": 9401}}
{"text": "architect: id, name, nationality, gender; bridge: architect_id, id, name, location, length_meters, length_feet; mill: architect_id, id, location, name, type, built_year, notes | What is the most common mill type, and how many are there?", "sql": "SELECT TYPE ,  count(*) FROM mill GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "architecture", "query": "SELECT TYPE ,  count(*) FROM mill GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "TYPE", ",", "count", "(", "*", ")", "FROM", "mill", "GROUP", "BY", "TYPE", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "type", ",", "count", "(", "*", ")", "from", "mill", "group", "by", "type", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the most common mill type, and how many are there?", "question_toks": ["What", "is", "the", "most", "common", "mill", "type", ",", "and", "how", "many", "are", "there", "?"], "guid": 9402}}
{"text": "repair: repair_ID, name, Launch_Date, Notes; machine: Machine_ID, Making_Year, Class, Team, Machine_series, value_points, quality_rank; technician: technician_id, Name, Team, Starting_Year, Age; repair_assignment: technician_id, repair_ID, Machine_ID | What is the name of the technician whose team is not 'NYY'?", "sql": "SELECT Name FROM technician WHERE Team != \"NYY\"", "example": {"db_id": "machine_repair", "query": "SELECT Name FROM technician WHERE Team != \"NYY\"", "query_toks": ["SELECT", "Name", "FROM", "technician", "WHERE", "Team", "!", "=", "``", "NYY", "''"], "query_toks_no_value": ["select", "name", "from", "technician", "where", "team", "!", "=", "value"], "question": "What is the name of the technician whose team is not 'NYY'?", "question_toks": ["What", "is", "the", "name", "of", "the", "technician", "whose", "team", "is", "not", "'NYY", "'", "?"], "guid": 9403}}
{"text": "people: People_ID, District, Name, Party, Age; debate: Debate_ID, Date, Venue, Num_of_Audience; debate_people: Debate_ID, Affirmative, Negative, If_Affirmative_Win | Show the names of people aged either 35 or 36.", "sql": "SELECT Name FROM  people WHERE Age  =  35 OR Age  =  36", "example": {"db_id": "debate", "query": "SELECT Name FROM  people WHERE Age  =  35 OR Age  =  36", "query_toks": ["SELECT", "Name", "FROM", "people", "WHERE", "Age", "=", "35", "OR", "Age", "=", "36"], "query_toks_no_value": ["select", "name", "from", "people", "where", "age", "=", "value", "or", "age", "=", "value"], "question": "Show the names of people aged either 35 or 36.", "question_toks": ["Show", "the", "names", "of", "people", "aged", "either", "35", "or", "36", "."], "guid": 9404}}
{"text": "people: People_ID, Name, Country, Is_Male, Age; church: Church_ID, Name, Organized_by, Open_Date, Continuation_of; wedding: Church_ID, Male_ID, Female_ID, Year | Show the organizer and name for churches that opened between 1830 and 1840.", "sql": "SELECT organized_by ,  name FROM church WHERE open_date BETWEEN 1830 AND 1840", "example": {"db_id": "wedding", "query": "SELECT organized_by ,  name FROM church WHERE open_date BETWEEN 1830 AND 1840", "query_toks": ["SELECT", "organized_by", ",", "name", "FROM", "church", "WHERE", "open_date", "BETWEEN", "1830", "AND", "1840"], "query_toks_no_value": ["select", "organized_by", ",", "name", "from", "church", "where", "open_date", "between", "value", "and", "value"], "question": "Show the organizer and name for churches that opened between 1830 and 1840.", "question_toks": ["Show", "the", "organizer", "and", "name", "for", "churches", "that", "opened", "between", "1830", "and", "1840", "."], "guid": 9405}}
{"text": "perpetrator: Perpetrator_ID, People_ID, Date, Year, Location, Country, Killed, Injured; people: People_ID, Name, Height, Weight, Home_Town | What are the names of perpetrators?", "sql": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID", "example": {"db_id": "perpetrator", "query": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID", "query_toks": ["SELECT", "T1.Name", "FROM", "people", "AS", "T1", "JOIN", "perpetrator", "AS", "T2", "ON", "T1.People_ID", "=", "T2.People_ID"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "people", "as", "t1", "join", "perpetrator", "as", "t2", "on", "t1", ".", "people_id", "=", "t2", ".", "people_id"], "question": "What are the names of perpetrators?", "question_toks": ["What", "are", "the", "names", "of", "perpetrators", "?"], "guid": 9406}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | Give the maximum price and score for wines produced in the appelation St. Helena.", "sql": "SELECT max(Price) ,  max(Score) FROM WINE WHERE Appelation  =  \"St. Helena\"", "example": {"db_id": "wine_1", "query": "SELECT max(Price) ,  max(Score) FROM WINE WHERE Appelation  =  \"St. Helena\"", "query_toks": ["SELECT", "max", "(", "Price", ")", ",", "max", "(", "Score", ")", "FROM", "WINE", "WHERE", "Appelation", "=", "``", "St.", "Helena", "''"], "query_toks_no_value": ["select", "max", "(", "price", ")", ",", "max", "(", "score", ")", "from", "wine", "where", "appelation", "=", "value"], "question": "Give the maximum price and score for wines produced in the appelation St. Helena.", "question_toks": ["Give", "the", "maximum", "price", "and", "score", "for", "wines", "produced", "in", "the", "appelation", "St.", "Helena", "."], "guid": 9407}}
{"text": "city: City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking; farm: Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats; farm_competition: Competition_ID, Year, Theme, Host_city_ID, Hosts; competition_record: Competition_ID, Farm_ID, Rank | What are the official names of cities that have hosted more than one competition?", "sql": "SELECT T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID HAVING COUNT(*)  >  1", "example": {"db_id": "farm", "query": "SELECT T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID HAVING COUNT(*)  >  1", "query_toks": ["SELECT", "T1.Official_Name", "FROM", "city", "AS", "T1", "JOIN", "farm_competition", "AS", "T2", "ON", "T1.City_ID", "=", "T2.Host_city_ID", "GROUP", "BY", "T2.Host_city_ID", "HAVING", "COUNT", "(", "*", ")", ">", "1"], "query_toks_no_value": ["select", "t1", ".", "official_name", "from", "city", "as", "t1", "join", "farm_competition", "as", "t2", "on", "t1", ".", "city_id", "=", "t2", ".", "host_city_id", "group", "by", "t2", ".", "host_city_id", "having", "count", "(", "*", ")", ">", "value"], "question": "What are the official names of cities that have hosted more than one competition?", "question_toks": ["What", "are", "the", "official", "names", "of", "cities", "that", "have", "hosted", "more", "than", "one", "competition", "?"], "guid": 9408}}
{"text": "city: City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking; farm: Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats; farm_competition: Competition_ID, Year, Theme, Host_city_ID, Hosts; competition_record: Competition_ID, Farm_ID, Rank | What are the themes of competitions that have corresponding host cities with more than 1000 residents?", "sql": "SELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID WHERE T1.Population  >  1000", "example": {"db_id": "farm", "query": "SELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID WHERE T1.Population  >  1000", "query_toks": ["SELECT", "T2.Theme", "FROM", "city", "AS", "T1", "JOIN", "farm_competition", "AS", "T2", "ON", "T1.City_ID", "=", "T2.Host_city_ID", "WHERE", "T1.Population", ">", "1000"], "query_toks_no_value": ["select", "t2", ".", "theme", "from", "city", "as", "t1", "join", "farm_competition", "as", "t2", "on", "t1", ".", "city_id", "=", "t2", ".", "host_city_id", "where", "t1", ".", "population", ">", "value"], "question": "What are the themes of competitions that have corresponding host cities with more than 1000 residents?", "question_toks": ["What", "are", "the", "themes", "of", "competitions", "that", "have", "corresponding", "host", "cities", "with", "more", "than", "1000", "residents", "?"], "guid": 9409}}
{"text": "city: City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking; farm: Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats; farm_competition: Competition_ID, Year, Theme, Host_city_ID, Hosts; competition_record: Competition_ID, Farm_ID, Rank | What are the census rankings of cities that do not have the status \"Village\"?", "sql": "SELECT Census_Ranking FROM city WHERE Status !=  \"Village\"", "example": {"db_id": "farm", "query": "SELECT Census_Ranking FROM city WHERE Status !=  \"Village\"", "query_toks": ["SELECT", "Census_Ranking", "FROM", "city", "WHERE", "Status", "!", "=", "``", "Village", "''"], "query_toks_no_value": ["select", "census_ranking", "from", "city", "where", "status", "!", "=", "value"], "question": "What are the census rankings of cities that do not have the status \"Village\"?", "question_toks": ["What", "are", "the", "census", "rankings", "of", "cities", "that", "do", "not", "have", "the", "status", "``", "Village", "''", "?"], "guid": 9410}}
{"text": "repair: repair_ID, name, Launch_Date, Notes; machine: Machine_ID, Making_Year, Class, Team, Machine_series, value_points, quality_rank; technician: technician_id, Name, Team, Starting_Year, Age; repair_assignment: technician_id, repair_ID, Machine_ID | What is the number of technicians?", "sql": "SELECT count(*) FROM technician", "example": {"db_id": "machine_repair", "query": "SELECT count(*) FROM technician", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "technician"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "technician"], "question": "What is the number of technicians?", "question_toks": ["What", "is", "the", "number", "of", "technicians", "?"], "guid": 9411}}
{"text": "repair: repair_ID, name, Launch_Date, Notes; machine: Machine_ID, Making_Year, Class, Team, Machine_series, value_points, quality_rank; technician: technician_id, Name, Team, Starting_Year, Age; repair_assignment: technician_id, repair_ID, Machine_ID | How many technicians are there?", "sql": "SELECT count(*) FROM technician", "example": {"db_id": "machine_repair", "query": "SELECT count(*) FROM technician", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "technician"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "technician"], "question": "How many technicians are there?", "question_toks": ["How", "many", "technicians", "are", "there", "?"], "guid": 9412}}
{"text": "people: People_ID, District, Name, Party, Age; debate: Debate_ID, Date, Venue, Num_of_Audience; debate_people: Debate_ID, Affirmative, Negative, If_Affirmative_Win | Show the names of people who have been on the negative side of debates at least twice.", "sql": "SELECT T2.Name FROM debate_people AS T1 JOIN people AS T2 ON T1.Negative  =  T2.People_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2", "example": {"db_id": "debate", "query": "SELECT T2.Name FROM debate_people AS T1 JOIN people AS T2 ON T1.Negative  =  T2.People_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2", "query_toks": ["SELECT", "T2.Name", "FROM", "debate_people", "AS", "T1", "JOIN", "people", "AS", "T2", "ON", "T1.Negative", "=", "T2.People_ID", "GROUP", "BY", "T2.Name", "HAVING", "COUNT", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "debate_people", "as", "t1", "join", "people", "as", "t2", "on", "t1", ".", "negative", "=", "t2", ".", "people_id", "group", "by", "t2", ".", "name", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "Show the names of people who have been on the negative side of debates at least twice.", "question_toks": ["Show", "the", "names", "of", "people", "who", "have", "been", "on", "the", "negative", "side", "of", "debates", "at", "least", "twice", "."], "guid": 9413}}
{"text": "stadium: id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage; game: stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition; injury_accident: game_id, id, Player, Injury, Number_of_matches, Source | What is the average attendance of stadiums with capacity percentage higher than 100%?", "sql": "SELECT average_attendance FROM stadium WHERE capacity_percentage  >  100", "example": {"db_id": "game_injury", "query": "SELECT average_attendance FROM stadium WHERE capacity_percentage  >  100", "query_toks": ["SELECT", "average_attendance", "FROM", "stadium", "WHERE", "capacity_percentage", ">", "100"], "query_toks_no_value": ["select", "average_attendance", "from", "stadium", "where", "capacity_percentage", ">", "value"], "question": "What is the average attendance of stadiums with capacity percentage higher than 100%?", "question_toks": ["What", "is", "the", "average", "attendance", "of", "stadiums", "with", "capacity", "percentage", "higher", "than", "100", "%", "?"], "guid": 9414}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | What are the names of wines made from red grapes?", "sql": "SELECT DISTINCT T2.Name FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  \"Red\"", "example": {"db_id": "wine_1", "query": "SELECT DISTINCT T2.Name FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  \"Red\"", "query_toks": ["SELECT", "DISTINCT", "T2.Name", "FROM", "GRAPES", "AS", "T1", "JOIN", "WINE", "AS", "T2", "ON", "T1.Grape", "=", "T2.Grape", "WHERE", "T1.Color", "=", "``", "Red", "''"], "query_toks_no_value": ["select", "distinct", "t2", ".", "name", "from", "grapes", "as", "t1", "join", "wine", "as", "t2", "on", "t1", ".", "grape", "=", "t2", ".", "grape", "where", "t1", ".", "color", "=", "value"], "question": "What are the names of wines made from red grapes?", "question_toks": ["What", "are", "the", "names", "of", "wines", "made", "from", "red", "grapes", "?"], "guid": 9415}}
{"text": "city: City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking; farm: Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats; farm_competition: Competition_ID, Year, Theme, Host_city_ID, Hosts; competition_record: Competition_ID, Farm_ID, Rank | List the total number of horses on farms in ascending order.", "sql": "SELECT Total_Horses FROM farm ORDER BY Total_Horses ASC", "example": {"db_id": "farm", "query": "SELECT Total_Horses FROM farm ORDER BY Total_Horses ASC", "query_toks": ["SELECT", "Total_Horses", "FROM", "farm", "ORDER", "BY", "Total_Horses", "ASC"], "query_toks_no_value": ["select", "total_horses", "from", "farm", "order", "by", "total_horses", "asc"], "question": "List the total number of horses on farms in ascending order.", "question_toks": ["List", "the", "total", "number", "of", "horses", "on", "farms", "in", "ascending", "order", "."], "guid": 9416}}
{"text": "Third_Party_Companies: company_id, company_type, company_name, company_address, other_company_details; Maintenance_Contracts: maintenance_contract_id, maintenance_contract_company_id, contract_start_date, contract_end_date, other_contract_details; Parts: part_id, part_name, chargeable_yn, chargeable_amount, other_part_details; Skills: skill_id, skill_code, skill_description; Staff: staff_id, staff_name, gender, other_staff_details; Assets: asset_id, maintenance_contract_id, supplier_company_id, asset_details, asset_make, asset_model, asset_acquired_date, asset_disposed_date, other_asset_details; Asset_Parts: asset_id, part_id; Maintenance_Engineers: engineer_id, company_id, first_name, last_name, other_details; Engineer_Skills: engineer_id, skill_id; Fault_Log: fault_log_entry_id, asset_id, recorded_by_staff_id, fault_log_entry_datetime, fault_description, other_fault_details | What is the name and id of the staff who recorded the fault log but has not contacted any visiting engineers?", "sql": "SELECT T1.staff_name ,  T1.staff_id FROM Staff AS T1 JOIN Fault_Log AS T2 ON T1.staff_id  =  T2.recorded_by_staff_id EXCEPT SELECT T3.staff_name ,  T3.staff_id FROM Staff AS T3 JOIN Engineer_Visits AS T4 ON T3.staff_id  =  T4.contact_staff_id", "example": {"db_id": "assets_maintenance", "query": "SELECT T1.staff_name ,  T1.staff_id FROM Staff AS T1 JOIN Fault_Log AS T2 ON T1.staff_id  =  T2.recorded_by_staff_id EXCEPT SELECT T3.staff_name ,  T3.staff_id FROM Staff AS T3 JOIN Engineer_Visits AS T4 ON T3.staff_id  =  T4.contact_staff_id", "query_toks": ["SELECT", "T1.staff_name", ",", "T1.staff_id", "FROM", "Staff", "AS", "T1", "JOIN", "Fault_Log", "AS", "T2", "ON", "T1.staff_id", "=", "T2.recorded_by_staff_id", "EXCEPT", "SELECT", "T3.staff_name", ",", "T3.staff_id", "FROM", "Staff", "AS", "T3", "JOIN", "Engineer_Visits", "AS", "T4", "ON", "T3.staff_id", "=", "T4.contact_staff_id"], "query_toks_no_value": ["select", "t1", ".", "staff_name", ",", "t1", ".", "staff_id", "from", "staff", "as", "t1", "join", "fault_log", "as", "t2", "on", "t1", ".", "staff_id", "=", "t2", ".", "recorded_by_staff_id", "except", "select", "t3", ".", "staff_name", ",", "t3", ".", "staff_id", "from", "staff", "as", "t3", "join", "engineer_visits", "as", "t4", "on", "t3", ".", "staff_id", "=", "t4", ".", "contact_staff_id"], "question": "What is the name and id of the staff who recorded the fault log but has not contacted any visiting engineers?", "question_toks": ["What", "is", "the", "name", "and", "id", "of", "the", "staff", "who", "recorded", "the", "fault", "log", "but", "has", "not", "contacted", "any", "visiting", "engineers", "?"], "guid": 9417}}
{"text": "county_public_safety: County_ID, Name, Population, Police_officers, Residents_per_officer, Case_burden, Crime_rate, Police_force, Location; city: City_ID, County_ID, Name, White, Black, Amerindian, Asian, Multiracial, Hispanic | Show the case burden of counties in descending order of population.", "sql": "SELECT Case_burden FROM county_public_safety ORDER BY Population DESC", "example": {"db_id": "county_public_safety", "query": "SELECT Case_burden FROM county_public_safety ORDER BY Population DESC", "query_toks": ["SELECT", "Case_burden", "FROM", "county_public_safety", "ORDER", "BY", "Population", "DESC"], "query_toks_no_value": ["select", "case_burden", "from", "county_public_safety", "order", "by", "population", "desc"], "question": "Show the case burden of counties in descending order of population.", "question_toks": ["Show", "the", "case", "burden", "of", "counties", "in", "descending", "order", "of", "population", "."], "guid": 9418}}
{"text": "Third_Party_Companies: company_id, company_type, company_name, company_address, other_company_details; Maintenance_Contracts: maintenance_contract_id, maintenance_contract_company_id, contract_start_date, contract_end_date, other_contract_details; Parts: part_id, part_name, chargeable_yn, chargeable_amount, other_part_details; Skills: skill_id, skill_code, skill_description; Staff: staff_id, staff_name, gender, other_staff_details; Assets: asset_id, maintenance_contract_id, supplier_company_id, asset_details, asset_make, asset_model, asset_acquired_date, asset_disposed_date, other_asset_details; Asset_Parts: asset_id, part_id; Maintenance_Engineers: engineer_id, company_id, first_name, last_name, other_details; Engineer_Skills: engineer_id, skill_id; Fault_Log: fault_log_entry_id, asset_id, recorded_by_staff_id, fault_log_entry_datetime, fault_description, other_fault_details | Which assets did not incur any fault log? List the asset model.", "sql": "SELECT asset_model FROM Assets WHERE asset_id NOT IN (SELECT asset_id FROM Fault_Log)", "example": {"db_id": "assets_maintenance", "query": "SELECT asset_model FROM Assets WHERE asset_id NOT IN (SELECT asset_id FROM Fault_Log)", "query_toks": ["SELECT", "asset_model", "FROM", "Assets", "WHERE", "asset_id", "NOT", "IN", "(", "SELECT", "asset_id", "FROM", "Fault_Log", ")"], "query_toks_no_value": ["select", "asset_model", "from", "assets", "where", "asset_id", "not", "in", "(", "select", "asset_id", "from", "fault_log", ")"], "question": "Which assets did not incur any fault log? List the asset model.", "question_toks": ["Which", "assets", "did", "not", "incur", "any", "fault", "log", "?", "List", "the", "asset", "model", "."], "guid": 9419}}
{"text": "repair: repair_ID, name, Launch_Date, Notes; machine: Machine_ID, Making_Year, Class, Team, Machine_series, value_points, quality_rank; technician: technician_id, Name, Team, Starting_Year, Age; repair_assignment: technician_id, repair_ID, Machine_ID | List the names of technicians who have not been assigned to repair machines.", "sql": "SELECT Name FROM technician WHERE technician_id NOT IN (SELECT technician_id FROM repair_assignment)", "example": {"db_id": "machine_repair", "query": "SELECT Name FROM technician WHERE technician_id NOT IN (SELECT technician_id FROM repair_assignment)", "query_toks": ["SELECT", "Name", "FROM", "technician", "WHERE", "technician_id", "NOT", "IN", "(", "SELECT", "technician_id", "FROM", "repair_assignment", ")"], "query_toks_no_value": ["select", "name", "from", "technician", "where", "technician_id", "not", "in", "(", "select", "technician_id", "from", "repair_assignment", ")"], "question": "List the names of technicians who have not been assigned to repair machines.", "question_toks": ["List", "the", "names", "of", "technicians", "who", "have", "not", "been", "assigned", "to", "repair", "machines", "."], "guid": 9420}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | Find the names of all wines produced in 2008.", "sql": "SELECT Name FROM WINE WHERE YEAR  =  \"2008\"", "example": {"db_id": "wine_1", "query": "SELECT Name FROM WINE WHERE YEAR  =  \"2008\"", "query_toks": ["SELECT", "Name", "FROM", "WINE", "WHERE", "YEAR", "=", "``", "2008", "''"], "query_toks_no_value": ["select", "name", "from", "wine", "where", "year", "=", "value"], "question": "Find the names of all wines produced in 2008.", "question_toks": ["Find", "the", "names", "of", "all", "wines", "produced", "in", "2008", "."], "guid": 9421}}
{"text": "county_public_safety: County_ID, Name, Population, Police_officers, Residents_per_officer, Case_burden, Crime_rate, Police_force, Location; city: City_ID, County_ID, Name, White, Black, Amerindian, Asian, Multiracial, Hispanic | What are the names of counties that do not contain any cities?", "sql": "SELECT Name FROM county_public_safety WHERE County_ID NOT IN (SELECT County_ID FROM city)", "example": {"db_id": "county_public_safety", "query": "SELECT Name FROM county_public_safety WHERE County_ID NOT IN (SELECT County_ID FROM city)", "query_toks": ["SELECT", "Name", "FROM", "county_public_safety", "WHERE", "County_ID", "NOT", "IN", "(", "SELECT", "County_ID", "FROM", "city", ")"], "query_toks_no_value": ["select", "name", "from", "county_public_safety", "where", "county_id", "not", "in", "(", "select", "county_id", "from", "city", ")"], "question": "What are the names of counties that do not contain any cities?", "question_toks": ["What", "are", "the", "names", "of", "counties", "that", "do", "not", "contain", "any", "cities", "?"], "guid": 9422}}
{"text": "Ref_Address_Types: address_type_code, address_type_description; Ref_Detention_Type: detention_type_code, detention_type_description; Ref_Incident_Type: incident_type_code, incident_type_description; Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Students: student_id, address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, date_first_rental, date_left_university, other_student_details; Teachers: teacher_id, address_id, first_name, middle_name, last_name, gender, cell_mobile_number, email_address, other_details; Assessment_Notes: notes_id, student_id, teacher_id, date_of_notes, text_of_notes, other_details; Behavior_Incident: incident_id, incident_type_code, student_id, date_incident_start, date_incident_end, incident_summary, recommendations, other_details; Detention: detention_id, detention_type_code, teacher_id, datetime_detention_start, datetime_detention_end, detention_summary, other_details; Student_Addresses: student_id, address_id, date_address_from, date_address_to, monthly_rental, other_details | How many assessment notes are there in total?", "sql": "SELECT count(*) FROM ASSESSMENT_NOTES", "example": {"db_id": "behavior_monitoring", "query": "SELECT count(*) FROM ASSESSMENT_NOTES", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "ASSESSMENT_NOTES"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "assessment_notes"], "question": "How many assessment notes are there in total?", "question_toks": ["How", "many", "assessment", "notes", "are", "there", "in", "total", "?"], "guid": 9423}}
{"text": "Ref_Address_Types: address_type_code, address_type_description; Ref_Detention_Type: detention_type_code, detention_type_description; Ref_Incident_Type: incident_type_code, incident_type_description; Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Students: student_id, address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, date_first_rental, date_left_university, other_student_details; Teachers: teacher_id, address_id, first_name, middle_name, last_name, gender, cell_mobile_number, email_address, other_details; Assessment_Notes: notes_id, student_id, teacher_id, date_of_notes, text_of_notes, other_details; Behavior_Incident: incident_id, incident_type_code, student_id, date_incident_start, date_incident_end, incident_summary, recommendations, other_details; Detention: detention_id, detention_type_code, teacher_id, datetime_detention_start, datetime_detention_end, detention_summary, other_details; Student_Addresses: student_id, address_id, date_address_from, date_address_to, monthly_rental, other_details | Find the last names of teachers who are not involved in any detention.", "sql": "SELECT last_name FROM Teachers EXCEPT SELECT T1.last_name FROM Teachers AS T1 JOIN Detention AS T2 ON T1.teacher_id  =  T2.teacher_id", "example": {"db_id": "behavior_monitoring", "query": "SELECT last_name FROM Teachers EXCEPT SELECT T1.last_name FROM Teachers AS T1 JOIN Detention AS T2 ON T1.teacher_id  =  T2.teacher_id", "query_toks": ["SELECT", "last_name", "FROM", "Teachers", "EXCEPT", "SELECT", "T1.last_name", "FROM", "Teachers", "AS", "T1", "JOIN", "Detention", "AS", "T2", "ON", "T1.teacher_id", "=", "T2.teacher_id"], "query_toks_no_value": ["select", "last_name", "from", "teachers", "except", "select", "t1", ".", "last_name", "from", "teachers", "as", "t1", "join", "detention", "as", "t2", "on", "t1", ".", "teacher_id", "=", "t2", ".", "teacher_id"], "question": "Find the last names of teachers who are not involved in any detention.", "question_toks": ["Find", "the", "last", "names", "of", "teachers", "who", "are", "not", "involved", "in", "any", "detention", "."], "guid": 9424}}
{"text": "battle: id, name, date, bulgarian_commander, latin_commander, result; ship: lost_in_battle, id, name, tonnage, ship_type, location, disposition_of_ship; death: caused_by_ship_id, id, note, killed, injured | Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'.", "sql": "SELECT name ,  RESULT ,  bulgarian_commander FROM battle EXCEPT SELECT T1.name ,  T1.result ,  T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel'", "example": {"db_id": "battle_death", "query": "SELECT name ,  RESULT ,  bulgarian_commander FROM battle EXCEPT SELECT T1.name ,  T1.result ,  T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel'", "query_toks": ["SELECT", "name", ",", "RESULT", ",", "bulgarian_commander", "FROM", "battle", "EXCEPT", "SELECT", "T1.name", ",", "T1.result", ",", "T1.bulgarian_commander", "FROM", "battle", "AS", "T1", "JOIN", "ship", "AS", "T2", "ON", "T1.id", "=", "T2.lost_in_battle", "WHERE", "T2.location", "=", "'English", "Channel", "'"], "query_toks_no_value": ["select", "name", ",", "result", ",", "bulgarian_commander", "from", "battle", "except", "select", "t1", ".", "name", ",", "t1", ".", "result", ",", "t1", ".", "bulgarian_commander", "from", "battle", "as", "t1", "join", "ship", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "lost_in_battle", "where", "t2", ".", "location", "=", "value"], "question": "Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'.", "question_toks": ["Show", "names", ",", "results", "and", "bulgarian", "commanders", "of", "the", "battles", "with", "no", "ships", "lost", "in", "the", "'English", "Channel", "'", "."], "guid": 9425}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | List the grape, appelation and name of wines whose score is higher than 93 ordered by Name.", "sql": "SELECT Grape ,  Appelation ,  Name FROM WINE WHERE Score  >  93 ORDER BY Name", "example": {"db_id": "wine_1", "query": "SELECT Grape ,  Appelation ,  Name FROM WINE WHERE Score  >  93 ORDER BY Name", "query_toks": ["SELECT", "Grape", ",", "Appelation", ",", "Name", "FROM", "WINE", "WHERE", "Score", ">", "93", "ORDER", "BY", "Name"], "query_toks_no_value": ["select", "grape", ",", "appelation", ",", "name", "from", "wine", "where", "score", ">", "value", "order", "by", "name"], "question": "List the grape, appelation and name of wines whose score is higher than 93 ordered by Name.", "question_toks": ["List", "the", "grape", ",", "appelation", "and", "name", "of", "wines", "whose", "score", "is", "higher", "than", "93", "ordered", "by", "Name", "."], "guid": 9426}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | What are the distinct wineries which produce wines costing between 50 and 100?", "sql": "SELECT DISTINCT Winery FROM WINE WHERE Price BETWEEN 50 AND 100", "example": {"db_id": "wine_1", "query": "SELECT DISTINCT Winery FROM WINE WHERE Price BETWEEN 50 AND 100", "query_toks": ["SELECT", "DISTINCT", "Winery", "FROM", "WINE", "WHERE", "Price", "BETWEEN", "50", "AND", "100"], "query_toks_no_value": ["select", "distinct", "winery", "from", "wine", "where", "price", "between", "value", "and", "value"], "question": "What are the distinct wineries which produce wines costing between 50 and 100?", "question_toks": ["What", "are", "the", "distinct", "wineries", "which", "produce", "wines", "costing", "between", "50", "and", "100", "?"], "guid": 9427}}
{"text": "people: People_ID, District, Name, Party, Age; debate: Debate_ID, Date, Venue, Num_of_Audience; debate_people: Debate_ID, Affirmative, Negative, If_Affirmative_Win | Show the party that has the most people.", "sql": "SELECT Party FROM people GROUP BY Party ORDER BY COUNT(*) DESC LIMIT 1", "example": {"db_id": "debate", "query": "SELECT Party FROM people GROUP BY Party ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "Party", "FROM", "people", "GROUP", "BY", "Party", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "party", "from", "people", "group", "by", "party", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Show the party that has the most people.", "question_toks": ["Show", "the", "party", "that", "has", "the", "most", "people", "."], "guid": 9428}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | What is the average price of wines produced in appelations in Sonoma County?", "sql": "SELECT AVG(T2.Price) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  \"Sonoma\"", "example": {"db_id": "wine_1", "query": "SELECT AVG(T2.Price) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  \"Sonoma\"", "query_toks": ["SELECT", "AVG", "(", "T2.Price", ")", "FROM", "APPELLATIONS", "AS", "T1", "JOIN", "WINE", "AS", "T2", "ON", "T1.Appelation", "=", "T2.Appelation", "WHERE", "T1.County", "=", "``", "Sonoma", "''"], "query_toks_no_value": ["select", "avg", "(", "t2", ".", "price", ")", "from", "appellations", "as", "t1", "join", "wine", "as", "t2", "on", "t1", ".", "appelation", "=", "t2", ".", "appelation", "where", "t1", ".", "county", "=", "value"], "question": "What is the average price of wines produced in appelations in Sonoma County?", "question_toks": ["What", "is", "the", "average", "price", "of", "wines", "produced", "in", "appelations", "in", "Sonoma", "County", "?"], "guid": 9429}}
{"text": "stadium: id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage; game: stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition; injury_accident: game_id, id, Player, Injury, Number_of_matches, Source | How many games are held after season 2007?", "sql": "SELECT count(*) FROM game WHERE season  >  2007", "example": {"db_id": "game_injury", "query": "SELECT count(*) FROM game WHERE season  >  2007", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "game", "WHERE", "season", ">", "2007"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "game", "where", "season", ">", "value"], "question": "How many games are held after season 2007?", "question_toks": ["How", "many", "games", "are", "held", "after", "season", "2007", "?"], "guid": 9430}}
{"text": "Third_Party_Companies: company_id, company_type, company_name, company_address, other_company_details; Maintenance_Contracts: maintenance_contract_id, maintenance_contract_company_id, contract_start_date, contract_end_date, other_contract_details; Parts: part_id, part_name, chargeable_yn, chargeable_amount, other_part_details; Skills: skill_id, skill_code, skill_description; Staff: staff_id, staff_name, gender, other_staff_details; Assets: asset_id, maintenance_contract_id, supplier_company_id, asset_details, asset_make, asset_model, asset_acquired_date, asset_disposed_date, other_asset_details; Asset_Parts: asset_id, part_id; Maintenance_Engineers: engineer_id, company_id, first_name, last_name, other_details; Engineer_Skills: engineer_id, skill_id; Fault_Log: fault_log_entry_id, asset_id, recorded_by_staff_id, fault_log_entry_datetime, fault_description, other_fault_details | When was the first asset acquired?", "sql": "SELECT asset_acquired_date FROM Assets ORDER BY asset_acquired_date ASC LIMIT 1", "example": {"db_id": "assets_maintenance", "query": "SELECT asset_acquired_date FROM Assets ORDER BY asset_acquired_date ASC LIMIT 1", "query_toks": ["SELECT", "asset_acquired_date", "FROM", "Assets", "ORDER", "BY", "asset_acquired_date", "ASC", "LIMIT", "1"], "query_toks_no_value": ["select", "asset_acquired_date", "from", "assets", "order", "by", "asset_acquired_date", "asc", "limit", "value"], "question": "When was the first asset acquired?", "question_toks": ["When", "was", "the", "first", "asset", "acquired", "?"], "guid": 9431}}
{"text": "Third_Party_Companies: company_id, company_type, company_name, company_address, other_company_details; Maintenance_Contracts: maintenance_contract_id, maintenance_contract_company_id, contract_start_date, contract_end_date, other_contract_details; Parts: part_id, part_name, chargeable_yn, chargeable_amount, other_part_details; Skills: skill_id, skill_code, skill_description; Staff: staff_id, staff_name, gender, other_staff_details; Assets: asset_id, maintenance_contract_id, supplier_company_id, asset_details, asset_make, asset_model, asset_acquired_date, asset_disposed_date, other_asset_details; Asset_Parts: asset_id, part_id; Maintenance_Engineers: engineer_id, company_id, first_name, last_name, other_details; Engineer_Skills: engineer_id, skill_id; Fault_Log: fault_log_entry_id, asset_id, recorded_by_staff_id, fault_log_entry_datetime, fault_description, other_fault_details | What are all the distinct last names of all the engineers?", "sql": "SELECT DISTINCT last_name FROM Maintenance_Engineers", "example": {"db_id": "assets_maintenance", "query": "SELECT DISTINCT last_name FROM Maintenance_Engineers", "query_toks": ["SELECT", "DISTINCT", "last_name", "FROM", "Maintenance_Engineers"], "query_toks_no_value": ["select", "distinct", "last_name", "from", "maintenance_engineers"], "question": "What are all the distinct last names of all the engineers?", "question_toks": ["What", "are", "all", "the", "distinct", "last", "names", "of", "all", "the", "engineers", "?"], "guid": 9432}}
{"text": "Ref_Address_Types: address_type_code, address_type_description; Ref_Detention_Type: detention_type_code, detention_type_description; Ref_Incident_Type: incident_type_code, incident_type_description; Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Students: student_id, address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, date_first_rental, date_left_university, other_student_details; Teachers: teacher_id, address_id, first_name, middle_name, last_name, gender, cell_mobile_number, email_address, other_details; Assessment_Notes: notes_id, student_id, teacher_id, date_of_notes, text_of_notes, other_details; Behavior_Incident: incident_id, incident_type_code, student_id, date_incident_start, date_incident_end, incident_summary, recommendations, other_details; Detention: detention_id, detention_type_code, teacher_id, datetime_detention_start, datetime_detention_end, detention_summary, other_details; Student_Addresses: student_id, address_id, date_address_from, date_address_to, monthly_rental, other_details | Find the id and first name of the student that has the most number of assessment notes?", "sql": "SELECT T1.student_id ,  T2.first_name FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "behavior_monitoring", "query": "SELECT T1.student_id ,  T2.first_name FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.student_id", ",", "T2.first_name", "FROM", "Assessment_Notes", "AS", "T1", "JOIN", "Students", "AS", "T2", "ON", "T1.student_id", "=", "T2.student_id", "GROUP", "BY", "T1.student_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "student_id", ",", "t2", ".", "first_name", "from", "assessment_notes", "as", "t1", "join", "students", "as", "t2", "on", "t1", ".", "student_id", "=", "t2", ".", "student_id", "group", "by", "t1", ".", "student_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Find the id and first name of the student that has the most number of assessment notes?", "question_toks": ["Find", "the", "id", "and", "first", "name", "of", "the", "student", "that", "has", "the", "most", "number", "of", "assessment", "notes", "?"], "guid": 9433}}
{"text": "people: People_ID, Name, Country, Is_Male, Age; church: Church_ID, Name, Organized_by, Open_Date, Continuation_of; wedding: Church_ID, Male_ID, Female_ID, Year | Show the name and country for all people whose age is smaller than the average.", "sql": "SELECT name ,  country FROM people WHERE age  <  (SELECT avg(age) FROM people)", "example": {"db_id": "wedding", "query": "SELECT name ,  country FROM people WHERE age  <  (SELECT avg(age) FROM people)", "query_toks": ["SELECT", "name", ",", "country", "FROM", "people", "WHERE", "age", "<", "(", "SELECT", "avg", "(", "age", ")", "FROM", "people", ")"], "query_toks_no_value": ["select", "name", ",", "country", "from", "people", "where", "age", "<", "(", "select", "avg", "(", "age", ")", "from", "people", ")"], "question": "Show the name and country for all people whose age is smaller than the average.", "question_toks": ["Show", "the", "name", "and", "country", "for", "all", "people", "whose", "age", "is", "smaller", "than", "the", "average", "."], "guid": 9434}}
{"text": "county_public_safety: County_ID, Name, Population, Police_officers, Residents_per_officer, Case_burden, Crime_rate, Police_force, Location; city: City_ID, County_ID, Name, White, Black, Amerindian, Asian, Multiracial, Hispanic | What are the case burdens of counties, ordered descending by population?", "sql": "SELECT Case_burden FROM county_public_safety ORDER BY Population DESC", "example": {"db_id": "county_public_safety", "query": "SELECT Case_burden FROM county_public_safety ORDER BY Population DESC", "query_toks": ["SELECT", "Case_burden", "FROM", "county_public_safety", "ORDER", "BY", "Population", "DESC"], "query_toks_no_value": ["select", "case_burden", "from", "county_public_safety", "order", "by", "population", "desc"], "question": "What are the case burdens of counties, ordered descending by population?", "question_toks": ["What", "are", "the", "case", "burdens", "of", "counties", ",", "ordered", "descending", "by", "population", "?"], "guid": 9435}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | Count the number of appelations in Napa County.", "sql": "SELECT count(*) FROM APPELLATIONS WHERE County  =  \"Napa\"", "example": {"db_id": "wine_1", "query": "SELECT count(*) FROM APPELLATIONS WHERE County  =  \"Napa\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "APPELLATIONS", "WHERE", "County", "=", "``", "Napa", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "appellations", "where", "county", "=", "value"], "question": "Count the number of appelations in Napa County.", "question_toks": ["Count", "the", "number", "of", "appelations", "in", "Napa", "County", "."], "guid": 9436}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | Find the maximum price of wins from the appelations in Central Coast area and produced before the year of 2005.", "sql": "SELECT max(T2.Price) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.Area  =  \"Central Coast\" AND T2.year  <  2005", "example": {"db_id": "wine_1", "query": "SELECT max(T2.Price) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.Area  =  \"Central Coast\" AND T2.year  <  2005", "query_toks": ["SELECT", "max", "(", "T2.Price", ")", "FROM", "APPELLATIONS", "AS", "T1", "JOIN", "WINE", "AS", "T2", "ON", "T1.Appelation", "=", "T2.Appelation", "WHERE", "T1.Area", "=", "``", "Central", "Coast", "''", "AND", "T2.year", "<", "2005"], "query_toks_no_value": ["select", "max", "(", "t2", ".", "price", ")", "from", "appellations", "as", "t1", "join", "wine", "as", "t2", "on", "t1", ".", "appelation", "=", "t2", ".", "appelation", "where", "t1", ".", "area", "=", "value", "and", "t2", ".", "year", "<", "value"], "question": "Find the maximum price of wins from the appelations in Central Coast area and produced before the year of 2005.", "question_toks": ["Find", "the", "maximum", "price", "of", "wins", "from", "the", "appelations", "in", "Central", "Coast", "area", "and", "produced", "before", "the", "year", "of", "2005", "."], "guid": 9437}}
{"text": "battle: id, name, date, bulgarian_commander, latin_commander, result; ship: lost_in_battle, id, name, tonnage, ship_type, location, disposition_of_ship; death: caused_by_ship_id, id, note, killed, injured | What are the notes of the death events which has substring 'East'?", "sql": "SELECT note FROM death WHERE note LIKE '%East%'", "example": {"db_id": "battle_death", "query": "SELECT note FROM death WHERE note LIKE '%East%'", "query_toks": ["SELECT", "note", "FROM", "death", "WHERE", "note", "LIKE", "'", "%", "East", "%", "'"], "query_toks_no_value": ["select", "note", "from", "death", "where", "note", "like", "value"], "question": "What are the notes of the death events which has substring 'East'?", "question_toks": ["What", "are", "the", "notes", "of", "the", "death", "events", "which", "has", "substring", "'East", "'", "?"], "guid": 9438}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | Find the white grape used to produce wines with scores above 90.", "sql": "SELECT DISTINCT T1.Grape FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  \"White\" AND T2.score  >  90", "example": {"db_id": "wine_1", "query": "SELECT DISTINCT T1.Grape FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  \"White\" AND T2.score  >  90", "query_toks": ["SELECT", "DISTINCT", "T1.Grape", "FROM", "GRAPES", "AS", "T1", "JOIN", "WINE", "AS", "T2", "ON", "T1.Grape", "=", "T2.Grape", "WHERE", "T1.Color", "=", "``", "White", "''", "AND", "T2.score", ">", "90"], "query_toks_no_value": ["select", "distinct", "t1", ".", "grape", "from", "grapes", "as", "t1", "join", "wine", "as", "t2", "on", "t1", ".", "grape", "=", "t2", ".", "grape", "where", "t1", ".", "color", "=", "value", "and", "t2", ".", "score", ">", "value"], "question": "Find the white grape used to produce wines with scores above 90.", "question_toks": ["Find", "the", "white", "grape", "used", "to", "produce", "wines", "with", "scores", "above", "90", "."], "guid": 9439}}
{"text": "county_public_safety: County_ID, Name, Population, Police_officers, Residents_per_officer, Case_burden, Crime_rate, Police_force, Location; city: City_ID, County_ID, Name, White, Black, Amerindian, Asian, Multiracial, Hispanic | List the names of counties that do not have any cities.", "sql": "SELECT Name FROM county_public_safety WHERE County_ID NOT IN (SELECT County_ID FROM city)", "example": {"db_id": "county_public_safety", "query": "SELECT Name FROM county_public_safety WHERE County_ID NOT IN (SELECT County_ID FROM city)", "query_toks": ["SELECT", "Name", "FROM", "county_public_safety", "WHERE", "County_ID", "NOT", "IN", "(", "SELECT", "County_ID", "FROM", "city", ")"], "query_toks_no_value": ["select", "name", "from", "county_public_safety", "where", "county_id", "not", "in", "(", "select", "county_id", "from", "city", ")"], "question": "List the names of counties that do not have any cities.", "question_toks": ["List", "the", "names", "of", "counties", "that", "do", "not", "have", "any", "cities", "."], "guid": 9440}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | Give the names and scores of wines made from white grapes.", "sql": "SELECT T2.Name ,   T2.Score FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  \"White\"", "example": {"db_id": "wine_1", "query": "SELECT T2.Name ,   T2.Score FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  \"White\"", "query_toks": ["SELECT", "T2.Name", ",", "T2.Score", "FROM", "GRAPES", "AS", "T1", "JOIN", "WINE", "AS", "T2", "ON", "T1.Grape", "=", "T2.Grape", "WHERE", "T1.Color", "=", "``", "White", "''"], "query_toks_no_value": ["select", "t2", ".", "name", ",", "t2", ".", "score", "from", "grapes", "as", "t1", "join", "wine", "as", "t2", "on", "t1", ".", "grape", "=", "t2", ".", "grape", "where", "t1", ".", "color", "=", "value"], "question": "Give the names and scores of wines made from white grapes.", "question_toks": ["Give", "the", "names", "and", "scores", "of", "wines", "made", "from", "white", "grapes", "."], "guid": 9441}}
{"text": "Ref_Address_Types: address_type_code, address_type_description; Ref_Detention_Type: detention_type_code, detention_type_description; Ref_Incident_Type: incident_type_code, incident_type_description; Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Students: student_id, address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, date_first_rental, date_left_university, other_student_details; Teachers: teacher_id, address_id, first_name, middle_name, last_name, gender, cell_mobile_number, email_address, other_details; Assessment_Notes: notes_id, student_id, teacher_id, date_of_notes, text_of_notes, other_details; Behavior_Incident: incident_id, incident_type_code, student_id, date_incident_start, date_incident_end, incident_summary, recommendations, other_details; Detention: detention_id, detention_type_code, teacher_id, datetime_detention_start, datetime_detention_end, detention_summary, other_details; Student_Addresses: student_id, address_id, date_address_from, date_address_to, monthly_rental, other_details | Find the ids and first names of the 3 teachers that have the most number of assessment notes?", "sql": "SELECT T1.teacher_id ,  T2.first_name FROM Assessment_Notes AS T1 JOIN Teachers AS T2 ON T1.teacher_id  =  T2.teacher_id GROUP BY T1.teacher_id ORDER BY count(*) DESC LIMIT 3", "example": {"db_id": "behavior_monitoring", "query": "SELECT T1.teacher_id ,  T2.first_name FROM Assessment_Notes AS T1 JOIN Teachers AS T2 ON T1.teacher_id  =  T2.teacher_id GROUP BY T1.teacher_id ORDER BY count(*) DESC LIMIT 3", "query_toks": ["SELECT", "T1.teacher_id", ",", "T2.first_name", "FROM", "Assessment_Notes", "AS", "T1", "JOIN", "Teachers", "AS", "T2", "ON", "T1.teacher_id", "=", "T2.teacher_id", "GROUP", "BY", "T1.teacher_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "3"], "query_toks_no_value": ["select", "t1", ".", "teacher_id", ",", "t2", ".", "first_name", "from", "assessment_notes", "as", "t1", "join", "teachers", "as", "t2", "on", "t1", ".", "teacher_id", "=", "t2", ".", "teacher_id", "group", "by", "t1", ".", "teacher_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Find the ids and first names of the 3 teachers that have the most number of assessment notes?", "question_toks": ["Find", "the", "ids", "and", "first", "names", "of", "the", "3", "teachers", "that", "have", "the", "most", "number", "of", "assessment", "notes", "?"], "guid": 9442}}
{"text": "county_public_safety: County_ID, Name, Population, Police_officers, Residents_per_officer, Case_burden, Crime_rate, Police_force, Location; city: City_ID, County_ID, Name, White, Black, Amerindian, Asian, Multiracial, Hispanic | What are the crime rates of counties sorted by number of offices ascending?", "sql": "SELECT Crime_rate FROM county_public_safety ORDER BY Police_officers ASC", "example": {"db_id": "county_public_safety", "query": "SELECT Crime_rate FROM county_public_safety ORDER BY Police_officers ASC", "query_toks": ["SELECT", "Crime_rate", "FROM", "county_public_safety", "ORDER", "BY", "Police_officers", "ASC"], "query_toks_no_value": ["select", "crime_rate", "from", "county_public_safety", "order", "by", "police_officers", "asc"], "question": "What are the crime rates of counties sorted by number of offices ascending?", "question_toks": ["What", "are", "the", "crime", "rates", "of", "counties", "sorted", "by", "number", "of", "offices", "ascending", "?"], "guid": 9443}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | What is the area of the appelation that produces the highest number of wines before the year of 2010?", "sql": "SELECT T1.Area FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation GROUP BY T2.Appelation HAVING T2.year  <  2010 ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "wine_1", "query": "SELECT T1.Area FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation GROUP BY T2.Appelation HAVING T2.year  <  2010 ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.Area", "FROM", "APPELLATIONS", "AS", "T1", "JOIN", "WINE", "AS", "T2", "ON", "T1.Appelation", "=", "T2.Appelation", "GROUP", "BY", "T2.Appelation", "HAVING", "T2.year", "<", "2010", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "area", "from", "appellations", "as", "t1", "join", "wine", "as", "t2", "on", "t1", ".", "appelation", "=", "t2", ".", "appelation", "group", "by", "t2", ".", "appelation", "having", "t2", ".", "year", "<", "value", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the area of the appelation that produces the highest number of wines before the year of 2010?", "question_toks": ["What", "is", "the", "area", "of", "the", "appelation", "that", "produces", "the", "highest", "number", "of", "wines", "before", "the", "year", "of", "2010", "?"], "guid": 9444}}
{"text": "Ref_Address_Types: address_type_code, address_type_description; Ref_Detention_Type: detention_type_code, detention_type_description; Ref_Incident_Type: incident_type_code, incident_type_description; Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Students: student_id, address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, date_first_rental, date_left_university, other_student_details; Teachers: teacher_id, address_id, first_name, middle_name, last_name, gender, cell_mobile_number, email_address, other_details; Assessment_Notes: notes_id, student_id, teacher_id, date_of_notes, text_of_notes, other_details; Behavior_Incident: incident_id, incident_type_code, student_id, date_incident_start, date_incident_end, incident_summary, recommendations, other_details; Detention: detention_id, detention_type_code, teacher_id, datetime_detention_start, datetime_detention_end, detention_summary, other_details; Student_Addresses: student_id, address_id, date_address_from, date_address_to, monthly_rental, other_details | What is the incident type description for the incident type with code \"VIOLENCE\"?", "sql": "SELECT incident_type_description FROM Ref_Incident_Type WHERE incident_type_code  =  \"VIOLENCE\"", "example": {"db_id": "behavior_monitoring", "query": "SELECT incident_type_description FROM Ref_Incident_Type WHERE incident_type_code  =  \"VIOLENCE\"", "query_toks": ["SELECT", "incident_type_description", "FROM", "Ref_Incident_Type", "WHERE", "incident_type_code", "=", "``", "VIOLENCE", "''"], "query_toks_no_value": ["select", "incident_type_description", "from", "ref_incident_type", "where", "incident_type_code", "=", "value"], "question": "What is the incident type description for the incident type with code \"VIOLENCE\"?", "question_toks": ["What", "is", "the", "incident", "type", "description", "for", "the", "incident", "type", "with", "code", "``", "VIOLENCE", "''", "?"], "guid": 9445}}
{"text": "repair: repair_ID, name, Launch_Date, Notes; machine: Machine_ID, Making_Year, Class, Team, Machine_series, value_points, quality_rank; technician: technician_id, Name, Team, Starting_Year, Age; repair_assignment: technician_id, repair_ID, Machine_ID | What are the starting years shared by the technicians from the team \"CLE\" or \"CWS\"?", "sql": "SELECT Starting_Year FROM technician WHERE Team  =  \"CLE\" INTERSECT SELECT Starting_Year FROM technician WHERE Team  =  \"CWS\"", "example": {"db_id": "machine_repair", "query": "SELECT Starting_Year FROM technician WHERE Team  =  \"CLE\" INTERSECT SELECT Starting_Year FROM technician WHERE Team  =  \"CWS\"", "query_toks": ["SELECT", "Starting_Year", "FROM", "technician", "WHERE", "Team", "=", "``", "CLE", "''", "INTERSECT", "SELECT", "Starting_Year", "FROM", "technician", "WHERE", "Team", "=", "``", "CWS", "''"], "query_toks_no_value": ["select", "starting_year", "from", "technician", "where", "team", "=", "value", "intersect", "select", "starting_year", "from", "technician", "where", "team", "=", "value"], "question": "What are the starting years shared by the technicians from the team \"CLE\" or \"CWS\"?", "question_toks": ["What", "are", "the", "starting", "years", "shared", "by", "the", "technicians", "from", "the", "team", "``", "CLE", "''", "or", "``", "CWS", "''", "?"], "guid": 9446}}
{"text": "architect: id, name, nationality, gender; bridge: architect_id, id, name, location, length_meters, length_feet; mill: architect_id, id, location, name, type, built_year, notes | What are the names and year of construction for the mills of 'Grondzeiler' type?", "sql": "SELECT name ,  built_year FROM mill WHERE TYPE  =  'Grondzeiler'", "example": {"db_id": "architecture", "query": "SELECT name ,  built_year FROM mill WHERE TYPE  =  'Grondzeiler'", "query_toks": ["SELECT", "name", ",", "built_year", "FROM", "mill", "WHERE", "TYPE", "=", "'Grondzeiler", "'"], "query_toks_no_value": ["select", "name", ",", "built_year", "from", "mill", "where", "type", "=", "value"], "question": "What are the names and year of construction for the mills of 'Grondzeiler' type?", "question_toks": ["What", "are", "the", "names", "and", "year", "of", "construction", "for", "the", "mills", "of", "'Grondzeiler", "'", "type", "?"], "guid": 9447}}
{"text": "people: People_ID, Name, Country, Is_Male, Age; church: Church_ID, Name, Organized_by, Open_Date, Continuation_of; wedding: Church_ID, Male_ID, Female_ID, Year | Show the country where people older than 30 and younger than 25 are from.", "sql": "SELECT country FROM people WHERE age  <  25 INTERSECT SELECT country FROM people WHERE age  >  30", "example": {"db_id": "wedding", "query": "SELECT country FROM people WHERE age  <  25 INTERSECT SELECT country FROM people WHERE age  >  30", "query_toks": ["SELECT", "country", "FROM", "people", "WHERE", "age", "<", "25", "INTERSECT", "SELECT", "country", "FROM", "people", "WHERE", "age", ">", "30"], "query_toks_no_value": ["select", "country", "from", "people", "where", "age", "<", "value", "intersect", "select", "country", "from", "people", "where", "age", ">", "value"], "question": "Show the country where people older than 30 and younger than 25 are from.", "question_toks": ["Show", "the", "country", "where", "people", "older", "than", "30", "and", "younger", "than", "25", "are", "from", "."], "guid": 9448}}
{"text": "county_public_safety: County_ID, Name, Population, Police_officers, Residents_per_officer, Case_burden, Crime_rate, Police_force, Location; city: City_ID, County_ID, Name, White, Black, Amerindian, Asian, Multiracial, Hispanic | Return the minimum and maximum crime rates across all counties.", "sql": "SELECT min(Crime_rate) ,  max(Crime_rate) FROM county_public_safety", "example": {"db_id": "county_public_safety", "query": "SELECT min(Crime_rate) ,  max(Crime_rate) FROM county_public_safety", "query_toks": ["SELECT", "min", "(", "Crime_rate", ")", ",", "max", "(", "Crime_rate", ")", "FROM", "county_public_safety"], "query_toks_no_value": ["select", "min", "(", "crime_rate", ")", ",", "max", "(", "crime_rate", ")", "from", "county_public_safety"], "question": "Return the minimum and maximum crime rates across all counties.", "question_toks": ["Return", "the", "minimum", "and", "maximum", "crime", "rates", "across", "all", "counties", "."], "guid": 9449}}
{"text": "county_public_safety: County_ID, Name, Population, Police_officers, Residents_per_officer, Case_burden, Crime_rate, Police_force, Location; city: City_ID, County_ID, Name, White, Black, Amerindian, Asian, Multiracial, Hispanic | What are the names of cities, as well as the names of the counties they correspond to?", "sql": "SELECT T1.Name ,  T2.Name FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID  =  T2.County_ID", "example": {"db_id": "county_public_safety", "query": "SELECT T1.Name ,  T2.Name FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID  =  T2.County_ID", "query_toks": ["SELECT", "T1.Name", ",", "T2.Name", "FROM", "city", "AS", "T1", "JOIN", "county_public_safety", "AS", "T2", "ON", "T1.County_ID", "=", "T2.County_ID"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "t2", ".", "name", "from", "city", "as", "t1", "join", "county_public_safety", "as", "t2", "on", "t1", ".", "county_id", "=", "t2", ".", "county_id"], "question": "What are the names of cities, as well as the names of the counties they correspond to?", "question_toks": ["What", "are", "the", "names", "of", "cities", ",", "as", "well", "as", "the", "names", "of", "the", "counties", "they", "correspond", "to", "?"], "guid": 9450}}
{"text": "repair: repair_ID, name, Launch_Date, Notes; machine: Machine_ID, Making_Year, Class, Team, Machine_series, value_points, quality_rank; technician: technician_id, Name, Team, Starting_Year, Age; repair_assignment: technician_id, repair_ID, Machine_ID | For each team, how many technicians are there?", "sql": "SELECT Team ,  COUNT(*) FROM technician GROUP BY Team", "example": {"db_id": "machine_repair", "query": "SELECT Team ,  COUNT(*) FROM technician GROUP BY Team", "query_toks": ["SELECT", "Team", ",", "COUNT", "(", "*", ")", "FROM", "technician", "GROUP", "BY", "Team"], "query_toks_no_value": ["select", "team", ",", "count", "(", "*", ")", "from", "technician", "group", "by", "team"], "question": "For each team, how many technicians are there?", "question_toks": ["For", "each", "team", ",", "how", "many", "technicians", "are", "there", "?"], "guid": 9451}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | List the names of all distinct wines ordered by price.", "sql": "SELECT DISTINCT Name FROM WINE ORDER BY price", "example": {"db_id": "wine_1", "query": "SELECT DISTINCT Name FROM WINE ORDER BY price", "query_toks": ["SELECT", "DISTINCT", "Name", "FROM", "WINE", "ORDER", "BY", "price"], "query_toks_no_value": ["select", "distinct", "name", "from", "wine", "order", "by", "price"], "question": "List the names of all distinct wines ordered by price.", "question_toks": ["List", "the", "names", "of", "all", "distinct", "wines", "ordered", "by", "price", "."], "guid": 9452}}
{"text": "city: City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking; farm: Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats; farm_competition: Competition_ID, Year, Theme, Host_city_ID, Hosts; competition_record: Competition_ID, Farm_ID, Rank | Give the average number of working horses on farms with more than 5000 total horses.", "sql": "SELECT avg(Working_Horses) FROM farm WHERE Total_Horses  >  5000", "example": {"db_id": "farm", "query": "SELECT avg(Working_Horses) FROM farm WHERE Total_Horses  >  5000", "query_toks": ["SELECT", "avg", "(", "Working_Horses", ")", "FROM", "farm", "WHERE", "Total_Horses", ">", "5000"], "query_toks_no_value": ["select", "avg", "(", "working_horses", ")", "from", "farm", "where", "total_horses", ">", "value"], "question": "Give the average number of working horses on farms with more than 5000 total horses.", "question_toks": ["Give", "the", "average", "number", "of", "working", "horses", "on", "farms", "with", "more", "than", "5000", "total", "horses", "."], "guid": 9453}}
{"text": "battle: id, name, date, bulgarian_commander, latin_commander, result; ship: lost_in_battle, id, name, tonnage, ship_type, location, disposition_of_ship; death: caused_by_ship_id, id, note, killed, injured | How many battles did not lose any ship with tonnage '225'?", "sql": "SELECT count(*) FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage  =  '225' );", "example": {"db_id": "battle_death", "query": "SELECT count(*) FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage  =  '225' );", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "battle", "WHERE", "id", "NOT", "IN", "(", "SELECT", "lost_in_battle", "FROM", "ship", "WHERE", "tonnage", "=", "'225", "'", ")", ";"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "battle", "where", "id", "not", "in", "(", "select", "lost_in_battle", "from", "ship", "where", "tonnage", "=", "value", ")"], "question": "How many battles did not lose any ship with tonnage '225'?", "question_toks": ["How", "many", "battles", "did", "not", "lose", "any", "ship", "with", "tonnage", "'225", "'", "?"], "guid": 9454}}
{"text": "city: City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking; farm: Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats; farm_competition: Competition_ID, Year, Theme, Host_city_ID, Hosts; competition_record: Competition_ID, Farm_ID, Rank | List the official names of cities that have not held any competition.", "sql": "SELECT Official_Name FROM city WHERE City_ID NOT IN (SELECT Host_city_ID FROM farm_competition)", "example": {"db_id": "farm", "query": "SELECT Official_Name FROM city WHERE City_ID NOT IN (SELECT Host_city_ID FROM farm_competition)", "query_toks": ["SELECT", "Official_Name", "FROM", "city", "WHERE", "City_ID", "NOT", "IN", "(", "SELECT", "Host_city_ID", "FROM", "farm_competition", ")"], "query_toks_no_value": ["select", "official_name", "from", "city", "where", "city_id", "not", "in", "(", "select", "host_city_id", "from", "farm_competition", ")"], "question": "List the official names of cities that have not held any competition.", "question_toks": ["List", "the", "official", "names", "of", "cities", "that", "have", "not", "held", "any", "competition", "."], "guid": 9455}}
{"text": "city: City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking; farm: Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats; farm_competition: Competition_ID, Year, Theme, Host_city_ID, Hosts; competition_record: Competition_ID, Farm_ID, Rank | Count the number of different statuses.", "sql": "SELECT count(DISTINCT Status) FROM city", "example": {"db_id": "farm", "query": "SELECT count(DISTINCT Status) FROM city", "query_toks": ["SELECT", "count", "(", "DISTINCT", "Status", ")", "FROM", "city"], "query_toks_no_value": ["select", "count", "(", "distinct", "status", ")", "from", "city"], "question": "Count the number of different statuses.", "question_toks": ["Count", "the", "number", "of", "different", "statuses", "."], "guid": 9456}}
{"text": "Third_Party_Companies: company_id, company_type, company_name, company_address, other_company_details; Maintenance_Contracts: maintenance_contract_id, maintenance_contract_company_id, contract_start_date, contract_end_date, other_contract_details; Parts: part_id, part_name, chargeable_yn, chargeable_amount, other_part_details; Skills: skill_id, skill_code, skill_description; Staff: staff_id, staff_name, gender, other_staff_details; Assets: asset_id, maintenance_contract_id, supplier_company_id, asset_details, asset_make, asset_model, asset_acquired_date, asset_disposed_date, other_asset_details; Asset_Parts: asset_id, part_id; Maintenance_Engineers: engineer_id, company_id, first_name, last_name, other_details; Engineer_Skills: engineer_id, skill_id; Fault_Log: fault_log_entry_id, asset_id, recorded_by_staff_id, fault_log_entry_datetime, fault_description, other_fault_details | How many engineers did each staff contact? List both the contact staff name and number of engineers contacted.", "sql": "SELECT T1.staff_name ,  count(*) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id  =  T2.contact_staff_id GROUP BY T1.staff_name", "example": {"db_id": "assets_maintenance", "query": "SELECT T1.staff_name ,  count(*) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id  =  T2.contact_staff_id GROUP BY T1.staff_name", "query_toks": ["SELECT", "T1.staff_name", ",", "count", "(", "*", ")", "FROM", "Staff", "AS", "T1", "JOIN", "Engineer_Visits", "AS", "T2", "ON", "T1.staff_id", "=", "T2.contact_staff_id", "GROUP", "BY", "T1.staff_name"], "query_toks_no_value": ["select", "t1", ".", "staff_name", ",", "count", "(", "*", ")", "from", "staff", "as", "t1", "join", "engineer_visits", "as", "t2", "on", "t1", ".", "staff_id", "=", "t2", ".", "contact_staff_id", "group", "by", "t1", ".", "staff_name"], "question": "How many engineers did each staff contact? List both the contact staff name and number of engineers contacted.", "question_toks": ["How", "many", "engineers", "did", "each", "staff", "contact", "?", "List", "both", "the", "contact", "staff", "name", "and", "number", "of", "engineers", "contacted", "."], "guid": 9457}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | How many wines are there for each grape?", "sql": "SELECT count(*) ,  Grape FROM WINE GROUP BY Grape", "example": {"db_id": "wine_1", "query": "SELECT count(*) ,  Grape FROM WINE GROUP BY Grape", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "Grape", "FROM", "WINE", "GROUP", "BY", "Grape"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "grape", "from", "wine", "group", "by", "grape"], "question": "How many wines are there for each grape?", "question_toks": ["How", "many", "wines", "are", "there", "for", "each", "grape", "?"], "guid": 9458}}
{"text": "stadium: id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage; game: stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition; injury_accident: game_id, id, Player, Injury, Number_of_matches, Source | Show the name, average attendance, total attendance for stadiums where no accidents happened.", "sql": "SELECT name ,  average_attendance ,  total_attendance FROM stadium EXCEPT SELECT T2.name ,  T2.average_attendance ,  T2.total_attendance FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id", "example": {"db_id": "game_injury", "query": "SELECT name ,  average_attendance ,  total_attendance FROM stadium EXCEPT SELECT T2.name ,  T2.average_attendance ,  T2.total_attendance FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id", "query_toks": ["SELECT", "name", ",", "average_attendance", ",", "total_attendance", "FROM", "stadium", "EXCEPT", "SELECT", "T2.name", ",", "T2.average_attendance", ",", "T2.total_attendance", "FROM", "game", "AS", "T1", "JOIN", "stadium", "AS", "T2", "ON", "T1.stadium_id", "=", "T2.id", "JOIN", "injury_accident", "AS", "T3", "ON", "T1.id", "=", "T3.game_id"], "query_toks_no_value": ["select", "name", ",", "average_attendance", ",", "total_attendance", "from", "stadium", "except", "select", "t2", ".", "name", ",", "t2", ".", "average_attendance", ",", "t2", ".", "total_attendance", "from", "game", "as", "t1", "join", "stadium", "as", "t2", "on", "t1", ".", "stadium_id", "=", "t2", ".", "id", "join", "injury_accident", "as", "t3", "on", "t1", ".", "id", "=", "t3", ".", "game_id"], "question": "Show the name, average attendance, total attendance for stadiums where no accidents happened.", "question_toks": ["Show", "the", "name", ",", "average", "attendance", ",", "total", "attendance", "for", "stadiums", "where", "no", "accidents", "happened", "."], "guid": 9459}}
{"text": "people: People_ID, District, Name, Party, Age; debate: Debate_ID, Date, Venue, Num_of_Audience; debate_people: Debate_ID, Affirmative, Negative, If_Affirmative_Win | What are the date and venue of each debate?", "sql": "SELECT Date ,  Venue FROM debate", "example": {"db_id": "debate", "query": "SELECT Date ,  Venue FROM debate", "query_toks": ["SELECT", "Date", ",", "Venue", "FROM", "debate"], "query_toks_no_value": ["select", "date", ",", "venue", "from", "debate"], "question": "What are the date and venue of each debate?", "question_toks": ["What", "are", "the", "date", "and", "venue", "of", "each", "debate", "?"], "guid": 9460}}
{"text": "county_public_safety: County_ID, Name, Population, Police_officers, Residents_per_officer, Case_burden, Crime_rate, Police_force, Location; city: City_ID, County_ID, Name, White, Black, Amerindian, Asian, Multiracial, Hispanic | Show the crime rates of counties in ascending order of number of police officers.", "sql": "SELECT Crime_rate FROM county_public_safety ORDER BY Police_officers ASC", "example": {"db_id": "county_public_safety", "query": "SELECT Crime_rate FROM county_public_safety ORDER BY Police_officers ASC", "query_toks": ["SELECT", "Crime_rate", "FROM", "county_public_safety", "ORDER", "BY", "Police_officers", "ASC"], "query_toks_no_value": ["select", "crime_rate", "from", "county_public_safety", "order", "by", "police_officers", "asc"], "question": "Show the crime rates of counties in ascending order of number of police officers.", "question_toks": ["Show", "the", "crime", "rates", "of", "counties", "in", "ascending", "order", "of", "number", "of", "police", "officers", "."], "guid": 9461}}
{"text": "people: People_ID, District, Name, Party, Age; debate: Debate_ID, Date, Venue, Num_of_Audience; debate_people: Debate_ID, Affirmative, Negative, If_Affirmative_Win | Show the names of people that are on affirmative side of debates with number of audience bigger than 200.", "sql": "SELECT T3.Name FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID  =  T2.Debate_ID JOIN people AS T3 ON T1.Affirmative  =  T3.People_ID WHERE T2.Num_of_Audience  >  200", "example": {"db_id": "debate", "query": "SELECT T3.Name FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID  =  T2.Debate_ID JOIN people AS T3 ON T1.Affirmative  =  T3.People_ID WHERE T2.Num_of_Audience  >  200", "query_toks": ["SELECT", "T3.Name", "FROM", "debate_people", "AS", "T1", "JOIN", "debate", "AS", "T2", "ON", "T1.Debate_ID", "=", "T2.Debate_ID", "JOIN", "people", "AS", "T3", "ON", "T1.Affirmative", "=", "T3.People_ID", "WHERE", "T2.Num_of_Audience", ">", "200"], "query_toks_no_value": ["select", "t3", ".", "name", "from", "debate_people", "as", "t1", "join", "debate", "as", "t2", "on", "t1", ".", "debate_id", "=", "t2", ".", "debate_id", "join", "people", "as", "t3", "on", "t1", ".", "affirmative", "=", "t3", ".", "people_id", "where", "t2", ".", "num_of_audience", ">", "value"], "question": "Show the names of people that are on affirmative side of debates with number of audience bigger than 200.", "question_toks": ["Show", "the", "names", "of", "people", "that", "are", "on", "affirmative", "side", "of", "debates", "with", "number", "of", "audience", "bigger", "than", "200", "."], "guid": 9462}}
{"text": "city: City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking; farm: Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats; farm_competition: Competition_ID, Year, Theme, Host_city_ID, Hosts; competition_record: Competition_ID, Farm_ID, Rank | What are the hosts of competitions whose theme is not \"Aliens\"?", "sql": "SELECT Hosts FROM farm_competition WHERE Theme !=  'Aliens'", "example": {"db_id": "farm", "query": "SELECT Hosts FROM farm_competition WHERE Theme !=  'Aliens'", "query_toks": ["SELECT", "Hosts", "FROM", "farm_competition", "WHERE", "Theme", "!", "=", "'Aliens", "'"], "query_toks_no_value": ["select", "hosts", "from", "farm_competition", "where", "theme", "!", "=", "value"], "question": "What are the hosts of competitions whose theme is not \"Aliens\"?", "question_toks": ["What", "are", "the", "hosts", "of", "competitions", "whose", "theme", "is", "not", "``", "Aliens", "''", "?"], "guid": 9463}}
{"text": "repair: repair_ID, name, Launch_Date, Notes; machine: Machine_ID, Making_Year, Class, Team, Machine_series, value_points, quality_rank; technician: technician_id, Name, Team, Starting_Year, Age; repair_assignment: technician_id, repair_ID, Machine_ID | Show the team that have at least two technicians.", "sql": "SELECT Team FROM technician GROUP BY Team HAVING COUNT(*)  >=  2", "example": {"db_id": "machine_repair", "query": "SELECT Team FROM technician GROUP BY Team HAVING COUNT(*)  >=  2", "query_toks": ["SELECT", "Team", "FROM", "technician", "GROUP", "BY", "Team", "HAVING", "COUNT", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "team", "from", "technician", "group", "by", "team", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "Show the team that have at least two technicians.", "question_toks": ["Show", "the", "team", "that", "have", "at", "least", "two", "technicians", "."], "guid": 9464}}
{"text": "Third_Party_Companies: company_id, company_type, company_name, company_address, other_company_details; Maintenance_Contracts: maintenance_contract_id, maintenance_contract_company_id, contract_start_date, contract_end_date, other_contract_details; Parts: part_id, part_name, chargeable_yn, chargeable_amount, other_part_details; Skills: skill_id, skill_code, skill_description; Staff: staff_id, staff_name, gender, other_staff_details; Assets: asset_id, maintenance_contract_id, supplier_company_id, asset_details, asset_make, asset_model, asset_acquired_date, asset_disposed_date, other_asset_details; Asset_Parts: asset_id, part_id; Maintenance_Engineers: engineer_id, company_id, first_name, last_name, other_details; Engineer_Skills: engineer_id, skill_id; Fault_Log: fault_log_entry_id, asset_id, recorded_by_staff_id, fault_log_entry_datetime, fault_description, other_fault_details | How many assets does each maintenance contract contain? List the number and the contract id.", "sql": "SELECT count(*) ,  T1.maintenance_contract_id FROM Maintenance_Contracts AS T1 JOIN Assets AS T2 ON T1.maintenance_contract_id  =  T2.maintenance_contract_id GROUP BY T1.maintenance_contract_id", "example": {"db_id": "assets_maintenance", "query": "SELECT count(*) ,  T1.maintenance_contract_id FROM Maintenance_Contracts AS T1 JOIN Assets AS T2 ON T1.maintenance_contract_id  =  T2.maintenance_contract_id GROUP BY T1.maintenance_contract_id", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "T1.maintenance_contract_id", "FROM", "Maintenance_Contracts", "AS", "T1", "JOIN", "Assets", "AS", "T2", "ON", "T1.maintenance_contract_id", "=", "T2.maintenance_contract_id", "GROUP", "BY", "T1.maintenance_contract_id"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "t1", ".", "maintenance_contract_id", "from", "maintenance_contracts", "as", "t1", "join", "assets", "as", "t2", "on", "t1", ".", "maintenance_contract_id", "=", "t2", ".", "maintenance_contract_id", "group", "by", "t1", ".", "maintenance_contract_id"], "question": "How many assets does each maintenance contract contain? List the number and the contract id.", "question_toks": ["How", "many", "assets", "does", "each", "maintenance", "contract", "contain", "?", "List", "the", "number", "and", "the", "contract", "id", "."], "guid": 9465}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | Find the country of all appelations who have at most three wines.", "sql": "SELECT T1.County FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation GROUP BY T2.Appelation HAVING count(*)  <=  3", "example": {"db_id": "wine_1", "query": "SELECT T1.County FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation GROUP BY T2.Appelation HAVING count(*)  <=  3", "query_toks": ["SELECT", "T1.County", "FROM", "APPELLATIONS", "AS", "T1", "JOIN", "WINE", "AS", "T2", "ON", "T1.Appelation", "=", "T2.Appelation", "GROUP", "BY", "T2.Appelation", "HAVING", "count", "(", "*", ")", "<", "=", "3"], "query_toks_no_value": ["select", "t1", ".", "county", "from", "appellations", "as", "t1", "join", "wine", "as", "t2", "on", "t1", ".", "appelation", "=", "t2", ".", "appelation", "group", "by", "t2", ".", "appelation", "having", "count", "(", "*", ")", "<", "=", "value"], "question": "Find the country of all appelations who have at most three wines.", "question_toks": ["Find", "the", "country", "of", "all", "appelations", "who", "have", "at", "most", "three", "wines", "."], "guid": 9466}}
{"text": "Ref_Address_Types: address_type_code, address_type_description; Ref_Detention_Type: detention_type_code, detention_type_description; Ref_Incident_Type: incident_type_code, incident_type_description; Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Students: student_id, address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, date_first_rental, date_left_university, other_student_details; Teachers: teacher_id, address_id, first_name, middle_name, last_name, gender, cell_mobile_number, email_address, other_details; Assessment_Notes: notes_id, student_id, teacher_id, date_of_notes, text_of_notes, other_details; Behavior_Incident: incident_id, incident_type_code, student_id, date_incident_start, date_incident_end, incident_summary, recommendations, other_details; Detention: detention_id, detention_type_code, teacher_id, datetime_detention_start, datetime_detention_end, detention_summary, other_details; Student_Addresses: student_id, address_id, date_address_from, date_address_to, monthly_rental, other_details | Find the texts of assessment notes for teachers with last name \"Schuster\".", "sql": "SELECT T1.text_of_notes FROM Assessment_Notes AS T1 JOIN Teachers AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T2.last_name  =  \"Schuster\"", "example": {"db_id": "behavior_monitoring", "query": "SELECT T1.text_of_notes FROM Assessment_Notes AS T1 JOIN Teachers AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T2.last_name  =  \"Schuster\"", "query_toks": ["SELECT", "T1.text_of_notes", "FROM", "Assessment_Notes", "AS", "T1", "JOIN", "Teachers", "AS", "T2", "ON", "T1.teacher_id", "=", "T2.teacher_id", "WHERE", "T2.last_name", "=", "``", "Schuster", "''"], "query_toks_no_value": ["select", "t1", ".", "text_of_notes", "from", "assessment_notes", "as", "t1", "join", "teachers", "as", "t2", "on", "t1", ".", "teacher_id", "=", "t2", ".", "teacher_id", "where", "t2", ".", "last_name", "=", "value"], "question": "Find the texts of assessment notes for teachers with last name \"Schuster\".", "question_toks": ["Find", "the", "texts", "of", "assessment", "notes", "for", "teachers", "with", "last", "name", "``", "Schuster", "''", "."], "guid": 9467}}
{"text": "Third_Party_Companies: company_id, company_type, company_name, company_address, other_company_details; Maintenance_Contracts: maintenance_contract_id, maintenance_contract_company_id, contract_start_date, contract_end_date, other_contract_details; Parts: part_id, part_name, chargeable_yn, chargeable_amount, other_part_details; Skills: skill_id, skill_code, skill_description; Staff: staff_id, staff_name, gender, other_staff_details; Assets: asset_id, maintenance_contract_id, supplier_company_id, asset_details, asset_make, asset_model, asset_acquired_date, asset_disposed_date, other_asset_details; Asset_Parts: asset_id, part_id; Maintenance_Engineers: engineer_id, company_id, first_name, last_name, other_details; Engineer_Skills: engineer_id, skill_id; Fault_Log: fault_log_entry_id, asset_id, recorded_by_staff_id, fault_log_entry_datetime, fault_description, other_fault_details | How many assets does each third party company supply? List the count and the company id.", "sql": "SELECT count(*) ,  T1.company_id FROM Third_Party_Companies AS T1 JOIN Assets AS T2 ON T1.company_id  =  T2.supplier_company_id GROUP BY T1.company_id", "example": {"db_id": "assets_maintenance", "query": "SELECT count(*) ,  T1.company_id FROM Third_Party_Companies AS T1 JOIN Assets AS T2 ON T1.company_id  =  T2.supplier_company_id GROUP BY T1.company_id", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "T1.company_id", "FROM", "Third_Party_Companies", "AS", "T1", "JOIN", "Assets", "AS", "T2", "ON", "T1.company_id", "=", "T2.supplier_company_id", "GROUP", "BY", "T1.company_id"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "t1", ".", "company_id", "from", "third_party_companies", "as", "t1", "join", "assets", "as", "t2", "on", "t1", ".", "company_id", "=", "t2", ".", "supplier_company_id", "group", "by", "t1", ".", "company_id"], "question": "How many assets does each third party company supply? List the count and the company id.", "question_toks": ["How", "many", "assets", "does", "each", "third", "party", "company", "supply", "?", "List", "the", "count", "and", "the", "company", "id", "."], "guid": 9468}}
{"text": "county_public_safety: County_ID, Name, Population, Police_officers, Residents_per_officer, Case_burden, Crime_rate, Police_force, Location; city: City_ID, County_ID, Name, White, Black, Amerindian, Asian, Multiracial, Hispanic | What are the minimum and maximum crime rate of counties?", "sql": "SELECT min(Crime_rate) ,  max(Crime_rate) FROM county_public_safety", "example": {"db_id": "county_public_safety", "query": "SELECT min(Crime_rate) ,  max(Crime_rate) FROM county_public_safety", "query_toks": ["SELECT", "min", "(", "Crime_rate", ")", ",", "max", "(", "Crime_rate", ")", "FROM", "county_public_safety"], "query_toks_no_value": ["select", "min", "(", "crime_rate", ")", ",", "max", "(", "crime_rate", ")", "from", "county_public_safety"], "question": "What are the minimum and maximum crime rate of counties?", "question_toks": ["What", "are", "the", "minimum", "and", "maximum", "crime", "rate", "of", "counties", "?"], "guid": 9469}}
{"text": "architect: id, name, nationality, gender; bridge: architect_id, id, name, location, length_meters, length_feet; mill: architect_id, id, location, name, type, built_year, notes | Which of the mill names contains the french word 'Moulin'?", "sql": "SELECT name FROM mill WHERE name LIKE '%Moulin%'", "example": {"db_id": "architecture", "query": "SELECT name FROM mill WHERE name LIKE '%Moulin%'", "query_toks": ["SELECT", "name", "FROM", "mill", "WHERE", "name", "LIKE", "'", "%", "Moulin", "%", "'"], "query_toks_no_value": ["select", "name", "from", "mill", "where", "name", "like", "value"], "question": "Which of the mill names contains the french word 'Moulin'?", "question_toks": ["Which", "of", "the", "mill", "names", "contains", "the", "french", "word", "'Moulin", "'", "?"], "guid": 9470}}