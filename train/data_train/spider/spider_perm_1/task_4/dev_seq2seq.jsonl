{"text": "company: Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value; gas_station: Station_ID, Open_Year, Location, Manager_Name, Vice_Manager_Name, Representative_Name; station_company: Station_ID, Company_ID, Rank_of_the_Year | For each main industry, what is the total number of companies for the industry with the highest total market value?", "sql": "SELECT main_industry ,  count(*) FROM company GROUP BY main_industry ORDER BY sum(market_value) DESC LIMIT 1", "example": {"db_id": "gas_company", "query": "SELECT main_industry ,  count(*) FROM company GROUP BY main_industry ORDER BY sum(market_value) DESC LIMIT 1", "query_toks": ["SELECT", "main_industry", ",", "count", "(", "*", ")", "FROM", "company", "GROUP", "BY", "main_industry", "ORDER", "BY", "sum", "(", "market_value", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "main_industry", ",", "count", "(", "*", ")", "from", "company", "group", "by", "main_industry", "order", "by", "sum", "(", "market_value", ")", "desc", "limit", "value"], "question": "For each main industry, what is the total number of companies for the industry with the highest total market value?", "question_toks": ["For", "each", "main", "industry", ",", "what", "is", "the", "total", "number", "of", "companies", "for", "the", "industry", "with", "the", "highest", "total", "market", "value", "?"], "guid": 756}}
{"text": "Manufacturers: Code, Name, Headquarter, Founder, Revenue; Products: Code, Name, Price, Manufacturer | What are the names of products with price at most 200?", "sql": "SELECT name FROM products WHERE price  <=  200", "example": {"db_id": "manufactory_1", "query": "SELECT name FROM products WHERE price  <=  200", "query_toks": ["SELECT", "name", "FROM", "products", "WHERE", "price", "<", "=", "200"], "query_toks_no_value": ["select", "name", "from", "products", "where", "price", "<", "=", "value"], "question": "What are the names of products with price at most 200?", "question_toks": ["What", "are", "the", "names", "of", "products", "with", "price", "at", "most", "200", "?"], "guid": 757}}
{"text": "chip_model: Model_name, Launch_year, RAM_MiB, ROM_MiB, Slots, WiFi, Bluetooth; screen_mode: Graphics_mode, Char_cells, Pixels, Hardware_colours, used_kb, map, Type; phone: Company_name, Hardware_Model_name, Accreditation_type, Accreditation_level, Date, chip_model, screen_mode | List the hardware model name for the phons that were produced by \"Nokia Corporation\" but whose screen mode type is not Text.", "sql": "SELECT DISTINCT T2.Hardware_Model_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE t2.Company_name  =  \"Nokia Corporation\" AND T1.Type != \"Text\";", "example": {"db_id": "phone_1", "query": "SELECT DISTINCT T2.Hardware_Model_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE t2.Company_name  =  \"Nokia Corporation\" AND T1.Type != \"Text\";", "query_toks": ["SELECT", "DISTINCT", "T2.Hardware_Model_name", "FROM", "screen_mode", "AS", "T1", "JOIN", "phone", "AS", "T2", "ON", "T1.Graphics_mode", "=", "T2.screen_mode", "WHERE", "t2.Company_name", "=", "``", "Nokia", "Corporation", "''", "AND", "T1.Type", "!", "=", "``", "Text", "''", ";"], "query_toks_no_value": ["select", "distinct", "t2", ".", "hardware_model_name", "from", "screen_mode", "as", "t1", "join", "phone", "as", "t2", "on", "t1", ".", "graphics_mode", "=", "t2", ".", "screen_mode", "where", "t2", ".", "company_name", "=", "value", "and", "t1", ".", "type", "!", "=", "value"], "question": "List the hardware model name for the phons that were produced by \"Nokia Corporation\" but whose screen mode type is not Text.", "question_toks": ["List", "the", "hardware", "model", "name", "for", "the", "phons", "that", "were", "produced", "by", "``", "Nokia", "Corporation", "''", "but", "whose", "screen", "mode", "type", "is", "not", "Text", "."], "guid": 758}}
{"text": "Manufacturers: Code, Name, Headquarter, Founder, Revenue; Products: Code, Name, Price, Manufacturer | How many different products are produced in each headquarter city?", "sql": "SELECT count(DISTINCT T1.name) ,  T2.Headquarter FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.Headquarter", "example": {"db_id": "manufactory_1", "query": "SELECT count(DISTINCT T1.name) ,  T2.Headquarter FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.Headquarter", "query_toks": ["SELECT", "count", "(", "DISTINCT", "T1.name", ")", ",", "T2.Headquarter", "FROM", "products", "AS", "T1", "JOIN", "manufacturers", "AS", "T2", "ON", "T1.Manufacturer", "=", "T2.code", "GROUP", "BY", "T2.Headquarter"], "query_toks_no_value": ["select", "count", "(", "distinct", "t1", ".", "name", ")", ",", "t2", ".", "headquarter", "from", "products", "as", "t1", "join", "manufacturers", "as", "t2", "on", "t1", ".", "manufacturer", "=", "t2", ".", "code", "group", "by", "t2", ".", "headquarter"], "question": "How many different products are produced in each headquarter city?", "question_toks": ["How", "many", "different", "products", "are", "produced", "in", "each", "headquarter", "city", "?"], "guid": 759}}
{"text": "Manufacturers: Code, Name, Headquarter, Founder, Revenue; Products: Code, Name, Price, Manufacturer | What are the names and prices of all products in the store?", "sql": "SELECT name ,  price FROM products", "example": {"db_id": "manufactory_1", "query": "SELECT name ,  price FROM products", "query_toks": ["SELECT", "name", ",", "price", "FROM", "products"], "query_toks_no_value": ["select", "name", ",", "price", "from", "products"], "question": "What are the names and prices of all products in the store?", "question_toks": ["What", "are", "the", "names", "and", "prices", "of", "all", "products", "in", "the", "store", "?"], "guid": 760}}
{"text": "Manufacturers: Code, Name, Headquarter, Founder, Revenue; Products: Code, Name, Price, Manufacturer | What are the names of companies with revenue between 100 and 150?", "sql": "SELECT name FROM manufacturers WHERE revenue BETWEEN 100 AND 150", "example": {"db_id": "manufactory_1", "query": "SELECT name FROM manufacturers WHERE revenue BETWEEN 100 AND 150", "query_toks": ["SELECT", "name", "FROM", "manufacturers", "WHERE", "revenue", "BETWEEN", "100", "AND", "150"], "query_toks_no_value": ["select", "name", "from", "manufacturers", "where", "revenue", "between", "value", "and", "value"], "question": "What are the names of companies with revenue between 100 and 150?", "question_toks": ["What", "are", "the", "names", "of", "companies", "with", "revenue", "between", "100", "and", "150", "?"], "guid": 761}}
{"text": "Manufacturers: Code, Name, Headquarter, Founder, Revenue; Products: Code, Name, Price, Manufacturer | Find the name of companies whose revenue is between 100 and 150.", "sql": "SELECT name FROM manufacturers WHERE revenue BETWEEN 100 AND 150", "example": {"db_id": "manufactory_1", "query": "SELECT name FROM manufacturers WHERE revenue BETWEEN 100 AND 150", "query_toks": ["SELECT", "name", "FROM", "manufacturers", "WHERE", "revenue", "BETWEEN", "100", "AND", "150"], "query_toks_no_value": ["select", "name", "from", "manufacturers", "where", "revenue", "between", "value", "and", "value"], "question": "Find the name of companies whose revenue is between 100 and 150.", "question_toks": ["Find", "the", "name", "of", "companies", "whose", "revenue", "is", "between", "100", "and", "150", "."], "guid": 762}}
{"text": "people: People_ID, Age, Name, Nationality, Graduation_College; company: Company_ID, Name, Headquarters, Industry, Sales_in_Billion, Profits_in_Billion, Assets_in_Billion, Market_Value_in_Billion; employment: Company_ID, People_ID, Year_working | What is the maximum and minimum market value of companies?", "sql": "SELECT max(Market_Value_in_Billion) ,  min(Market_Value_in_Billion) FROM company", "example": {"db_id": "company_employee", "query": "SELECT max(Market_Value_in_Billion) ,  min(Market_Value_in_Billion) FROM company", "query_toks": ["SELECT", "max", "(", "Market_Value_in_Billion", ")", ",", "min", "(", "Market_Value_in_Billion", ")", "FROM", "company"], "query_toks_no_value": ["select", "max", "(", "market_value_in_billion", ")", ",", "min", "(", "market_value_in_billion", ")", "from", "company"], "question": "What is the maximum and minimum market value of companies?", "question_toks": ["What", "is", "the", "maximum", "and", "minimum", "market", "value", "of", "companies", "?"], "guid": 763}}
{"text": "people: People_ID, Age, Name, Nationality, Graduation_College; company: Company_ID, Name, Headquarters, Industry, Sales_in_Billion, Profits_in_Billion, Assets_in_Billion, Market_Value_in_Billion; employment: Company_ID, People_ID, Year_working | List the names of companies by ascending number of sales.", "sql": "SELECT Name FROM company ORDER BY Sales_in_Billion ASC", "example": {"db_id": "company_employee", "query": "SELECT Name FROM company ORDER BY Sales_in_Billion ASC", "query_toks": ["SELECT", "Name", "FROM", "company", "ORDER", "BY", "Sales_in_Billion", "ASC"], "query_toks_no_value": ["select", "name", "from", "company", "order", "by", "sales_in_billion", "asc"], "question": "List the names of companies by ascending number of sales.", "question_toks": ["List", "the", "names", "of", "companies", "by", "ascending", "number", "of", "sales", "."], "guid": 764}}
{"text": "employee: Employee_ID, Name, Age, City; shop: Shop_ID, Name, Location, District, Number_products, Manager_name; hiring: Shop_ID, Employee_ID, Start_from, Is_full_time; evaluation: Employee_ID, Year_awarded, Bonus | Find the number of employees hired in each shop; show the shop name as well.", "sql": "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name", "example": {"db_id": "employee_hire_evaluation", "query": "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "t2.name", "FROM", "hiring", "AS", "t1", "JOIN", "shop", "AS", "t2", "ON", "t1.shop_id", "=", "t2.shop_id", "GROUP", "BY", "t2.name"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "t2", ".", "name", "from", "hiring", "as", "t1", "join", "shop", "as", "t2", "on", "t1", ".", "shop_id", "=", "t2", ".", "shop_id", "group", "by", "t2", ".", "name"], "question": "Find the number of employees hired in each shop; show the shop name as well.", "question_toks": ["Find", "the", "number", "of", "employees", "hired", "in", "each", "shop", ";", "show", "the", "shop", "name", "as", "well", "."], "guid": 765}}
{"text": "Manufacturers: Code, Name, Headquarter, Founder, Revenue; Products: Code, Name, Price, Manufacturer | Select the name and price of all products with a price larger than or equal to $180, and sort first by price (in descending order), and then by name  (in ascending order).", "sql": "SELECT name ,  price FROM products WHERE price  >=  180 ORDER BY price DESC ,  name ASC", "example": {"db_id": "manufactory_1", "query": "SELECT name ,  price FROM products WHERE price  >=  180 ORDER BY price DESC ,  name ASC", "query_toks": ["SELECT", "name", ",", "price", "FROM", "products", "WHERE", "price", ">", "=", "180", "ORDER", "BY", "price", "DESC", ",", "name", "ASC"], "query_toks_no_value": ["select", "name", ",", "price", "from", "products", "where", "price", ">", "=", "value", "order", "by", "price", "desc", ",", "name", "asc"], "question": "Select the name and price of all products with a price larger than or equal to $180, and sort first by price (in descending order), and then by name  (in ascending order).", "question_toks": ["Select", "the", "name", "and", "price", "of", "all", "products", "with", "a", "price", "larger", "than", "or", "equal", "to", "$", "180", ",", "and", "sort", "first", "by", "price", "(", "in", "descending", "order", ")", ",", "and", "then", "by", "name", "(", "in", "ascending", "order", ")", "."], "guid": 766}}
{"text": "continents: ContId, Continent; countries: CountryId, CountryName, Continent; car_makers: Id, Maker, FullName, Country; model_list: ModelId, Maker, Model; car_names: MakeId, Model, Make; cars_data: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year | How many countries does each continent have? List the continent id, continent name and the number of countries.", "sql": "SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;", "example": {"db_id": "car_1", "query": "SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;", "query_toks": ["SELECT", "T1.ContId", ",", "T1.Continent", ",", "count", "(", "*", ")", "FROM", "CONTINENTS", "AS", "T1", "JOIN", "COUNTRIES", "AS", "T2", "ON", "T1.ContId", "=", "T2.Continent", "GROUP", "BY", "T1.ContId", ";"], "query_toks_no_value": ["select", "t1", ".", "contid", ",", "t1", ".", "continent", ",", "count", "(", "*", ")", "from", "continents", "as", "t1", "join", "countries", "as", "t2", "on", "t1", ".", "contid", "=", "t2", ".", "continent", "group", "by", "t1", ".", "contid"], "question": "How many countries does each continent have? List the continent id, continent name and the number of countries.", "question_toks": ["How", "many", "countries", "does", "each", "continent", "have", "?", "List", "the", "continent", "id", ",", "continent", "name", "and", "the", "number", "of", "countries", "."], "guid": 767}}
{"text": "chip_model: Model_name, Launch_year, RAM_MiB, ROM_MiB, Slots, WiFi, Bluetooth; screen_mode: Graphics_mode, Char_cells, Pixels, Hardware_colours, used_kb, map, Type; phone: Company_name, Hardware_Model_name, Accreditation_type, Accreditation_level, Date, chip_model, screen_mode | the names of models that launched between 2002 and 2004.", "sql": "SELECT Model_name FROM chip_model WHERE Launch_year BETWEEN 2002 AND 2004;", "example": {"db_id": "phone_1", "query": "SELECT Model_name FROM chip_model WHERE Launch_year BETWEEN 2002 AND 2004;", "query_toks": ["SELECT", "Model_name", "FROM", "chip_model", "WHERE", "Launch_year", "BETWEEN", "2002", "AND", "2004", ";"], "query_toks_no_value": ["select", "model_name", "from", "chip_model", "where", "launch_year", "between", "value", "and", "value"], "question": "the names of models that launched between 2002 and 2004.", "question_toks": ["the", "names", "of", "models", "that", "launched", "between", "2002", "and", "2004", "."], "guid": 768}}
{"text": "buildings: id, name, City, Height, Stories, Status; Companies: id, name, Headquarters, Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value_billion; Office_locations: building_id, company_id, move_in_year | Which buildings do not have any company office? Give me the building names.", "sql": "SELECT name FROM buildings WHERE id NOT IN (SELECT building_id FROM Office_locations)", "example": {"db_id": "company_office", "query": "SELECT name FROM buildings WHERE id NOT IN (SELECT building_id FROM Office_locations)", "query_toks": ["SELECT", "name", "FROM", "buildings", "WHERE", "id", "NOT", "IN", "(", "SELECT", "building_id", "FROM", "Office_locations", ")"], "query_toks_no_value": ["select", "name", "from", "buildings", "where", "id", "not", "in", "(", "select", "building_id", "from", "office_locations", ")"], "question": "Which buildings do not have any company office? Give me the building names.", "question_toks": ["Which", "buildings", "do", "not", "have", "any", "company", "office", "?", "Give", "me", "the", "building", "names", "."], "guid": 769}}
{"text": "regions: REGION_ID, REGION_NAME; countries: COUNTRY_ID, COUNTRY_NAME, REGION_ID; departments: DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID; jobs: JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY; employees: EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID; job_history: EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID; locations: LOCATION_ID, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_ID | display the ID for those employees who did two or more jobs in the past.", "sql": "SELECT employee_id FROM job_history GROUP BY employee_id HAVING COUNT(*)  >= 2", "example": {"db_id": "hr_1", "query": "SELECT employee_id FROM job_history GROUP BY employee_id HAVING COUNT(*)  >= 2", "query_toks": ["SELECT", "employee_id", "FROM", "job_history", "GROUP", "BY", "employee_id", "HAVING", "COUNT", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "employee_id", "from", "job_history", "group", "by", "employee_id", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "display the ID for those employees who did two or more jobs in the past.", "question_toks": ["display", "the", "ID", "for", "those", "employees", "who", "did", "two", "or", "more", "jobs", "in", "the", "past", "."], "guid": 770}}
{"text": "buildings: id, name, City, Height, Stories, Status; Companies: id, name, Headquarters, Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value_billion; Office_locations: building_id, company_id, move_in_year | How many different industries are the companies in?", "sql": "SELECT count(DISTINCT Industry) FROM Companies", "example": {"db_id": "company_office", "query": "SELECT count(DISTINCT Industry) FROM Companies", "query_toks": ["SELECT", "count", "(", "DISTINCT", "Industry", ")", "FROM", "Companies"], "query_toks_no_value": ["select", "count", "(", "distinct", "industry", ")", "from", "companies"], "question": "How many different industries are the companies in?", "question_toks": ["How", "many", "different", "industries", "are", "the", "companies", "in", "?"], "guid": 771}}
{"text": "regions: REGION_ID, REGION_NAME; countries: COUNTRY_ID, COUNTRY_NAME, REGION_ID; departments: DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID; jobs: JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY; employees: EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID; job_history: EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID; locations: LOCATION_ID, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_ID | What are the full names, departments, cities, and state provinces for each employee?", "sql": "SELECT T1.first_name ,  T1.last_name ,  T2.department_name ,  T3.city ,  T3.state_province FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id", "example": {"db_id": "hr_1", "query": "SELECT T1.first_name ,  T1.last_name ,  T2.department_name ,  T3.city ,  T3.state_province FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id", "query_toks": ["SELECT", "T1.first_name", ",", "T1.last_name", ",", "T2.department_name", ",", "T3.city", ",", "T3.state_province", "FROM", "employees", "AS", "T1", "JOIN", "departments", "AS", "T2", "ON", "T1.department_id", "=", "T2.department_id", "JOIN", "locations", "AS", "T3", "ON", "T2.location_id", "=", "T3.location_id"], "query_toks_no_value": ["select", "t1", ".", "first_name", ",", "t1", ".", "last_name", ",", "t2", ".", "department_name", ",", "t3", ".", "city", ",", "t3", ".", "state_province", "from", "employees", "as", "t1", "join", "departments", "as", "t2", "on", "t1", ".", "department_id", "=", "t2", ".", "department_id", "join", "locations", "as", "t3", "on", "t2", ".", "location_id", "=", "t3", ".", "location_id"], "question": "What are the full names, departments, cities, and state provinces for each employee?", "question_toks": ["What", "are", "the", "full", "names", ",", "departments", ",", "cities", ",", "and", "state", "provinces", "for", "each", "employee", "?"], "guid": 772}}
{"text": "company: Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value; gas_station: Station_ID, Open_Year, Location, Manager_Name, Vice_Manager_Name, Representative_Name; station_company: Station_ID, Company_ID, Rank_of_the_Year | Show minimum, maximum, and average market value for all companies.", "sql": "SELECT min(market_value) ,  max(market_value) ,  avg(market_value) FROM company", "example": {"db_id": "gas_company", "query": "SELECT min(market_value) ,  max(market_value) ,  avg(market_value) FROM company", "query_toks": ["SELECT", "min", "(", "market_value", ")", ",", "max", "(", "market_value", ")", ",", "avg", "(", "market_value", ")", "FROM", "company"], "query_toks_no_value": ["select", "min", "(", "market_value", ")", ",", "max", "(", "market_value", ")", ",", "avg", "(", "market_value", ")", "from", "company"], "question": "Show minimum, maximum, and average market value for all companies.", "question_toks": ["Show", "minimum", ",", "maximum", ",", "and", "average", "market", "value", "for", "all", "companies", "."], "guid": 773}}
{"text": "continents: ContId, Continent; countries: CountryId, CountryName, Continent; car_makers: Id, Maker, FullName, Country; model_list: ModelId, Maker, Model; car_names: MakeId, Model, Make; cars_data: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year | What is the number of the cars with horsepower more than 150?", "sql": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;", "example": {"db_id": "car_1", "query": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "CARS_DATA", "WHERE", "horsepower", ">", "150", ";"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "cars_data", "where", "horsepower", ">", "value"], "question": "What is the number of the cars with horsepower more than 150?", "question_toks": ["What", "is", "the", "number", "of", "the", "cars", "with", "horsepower", "more", "than", "150", "?"], "guid": 774}}
{"text": "buildings: id, name, City, Height, Stories, Status; Companies: id, name, Headquarters, Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value_billion; Office_locations: building_id, company_id, move_in_year | List the names of buildings in descending order of building height.", "sql": "SELECT name FROM buildings ORDER BY Height DESC", "example": {"db_id": "company_office", "query": "SELECT name FROM buildings ORDER BY Height DESC", "query_toks": ["SELECT", "name", "FROM", "buildings", "ORDER", "BY", "Height", "DESC"], "query_toks_no_value": ["select", "name", "from", "buildings", "order", "by", "height", "desc"], "question": "List the names of buildings in descending order of building height.", "question_toks": ["List", "the", "names", "of", "buildings", "in", "descending", "order", "of", "building", "height", "."], "guid": 775}}
{"text": "continents: ContId, Continent; countries: CountryId, CountryName, Continent; car_makers: Id, Maker, FullName, Country; model_list: ModelId, Maker, Model; car_names: MakeId, Model, Make; cars_data: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year | What is the number of makers of care in France?", "sql": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';", "example": {"db_id": "car_1", "query": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "CAR_MAKERS", "AS", "T1", "JOIN", "COUNTRIES", "AS", "T2", "ON", "T1.Country", "=", "T2.CountryId", "WHERE", "T2.CountryName", "=", "'france", "'", ";"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "car_makers", "as", "t1", "join", "countries", "as", "t2", "on", "t1", ".", "country", "=", "t2", ".", "countryid", "where", "t2", ".", "countryname", "=", "value"], "question": "What is the number of makers of care in France?", "question_toks": ["What", "is", "the", "number", "of", "makers", "of", "care", "in", "France", "?"], "guid": 776}}
{"text": "continents: ContId, Continent; countries: CountryId, CountryName, Continent; car_makers: Id, Maker, FullName, Country; model_list: ModelId, Maker, Model; car_names: MakeId, Model, Make; cars_data: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year | Which countries in europe have at least 3 car manufacturers?", "sql": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;", "example": {"db_id": "car_1", "query": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;", "query_toks": ["SELECT", "T1.CountryName", "FROM", "COUNTRIES", "AS", "T1", "JOIN", "CONTINENTS", "AS", "T2", "ON", "T1.Continent", "=", "T2.ContId", "JOIN", "CAR_MAKERS", "AS", "T3", "ON", "T1.CountryId", "=", "T3.Country", "WHERE", "T2.Continent", "=", "'europe", "'", "GROUP", "BY", "T1.CountryName", "HAVING", "count", "(", "*", ")", ">", "=", "3", ";"], "query_toks_no_value": ["select", "t1", ".", "countryname", "from", "countries", "as", "t1", "join", "continents", "as", "t2", "on", "t1", ".", "continent", "=", "t2", ".", "contid", "join", "car_makers", "as", "t3", "on", "t1", ".", "countryid", "=", "t3", ".", "country", "where", "t2", ".", "continent", "=", "value", "group", "by", "t1", ".", "countryname", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "Which countries in europe have at least 3 car manufacturers?", "question_toks": ["Which", "countries", "in", "europe", "have", "at", "least", "3", "car", "manufacturers", "?"], "guid": 777}}
{"text": "regions: REGION_ID, REGION_NAME; countries: COUNTRY_ID, COUNTRY_NAME, REGION_ID; departments: DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID; jobs: JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY; employees: EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID; job_history: EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID; locations: LOCATION_ID, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_ID | display all the information of the employees whose salary if within the range of smallest salary and 2500.", "sql": "SELECT * FROM employees WHERE salary BETWEEN (SELECT MIN(salary) FROM employees) AND 2500", "example": {"db_id": "hr_1", "query": "SELECT * FROM employees WHERE salary BETWEEN (SELECT MIN(salary) FROM employees) AND 2500", "query_toks": ["SELECT", "*", "FROM", "employees", "WHERE", "salary", "BETWEEN", "(", "SELECT", "MIN", "(", "salary", ")", "FROM", "employees", ")", "AND", "2500"], "query_toks_no_value": ["select", "*", "from", "employees", "where", "salary", "between", "(", "select", "min", "(", "salary", ")", "from", "employees", ")", "and", "value"], "question": "display all the information of the employees whose salary if within the range of smallest salary and 2500.", "question_toks": ["display", "all", "the", "information", "of", "the", "employees", "whose", "salary", "if", "within", "the", "range", "of", "smallest", "salary", "and", "2500", "."], "guid": 778}}
{"text": "continents: ContId, Continent; countries: CountryId, CountryName, Continent; car_makers: Id, Maker, FullName, Country; model_list: ModelId, Maker, Model; car_names: MakeId, Model, Make; cars_data: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year | What is the maximum accelerate for all the different cylinders?", "sql": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;", "example": {"db_id": "car_1", "query": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;", "query_toks": ["SELECT", "max", "(", "Accelerate", ")", ",", "Cylinders", "FROM", "CARS_DATA", "GROUP", "BY", "Cylinders", ";"], "query_toks_no_value": ["select", "max", "(", "accelerate", ")", ",", "cylinders", "from", "cars_data", "group", "by", "cylinders"], "question": "What is the maximum accelerate for all the different cylinders?", "question_toks": ["What", "is", "the", "maximum", "accelerate", "for", "all", "the", "different", "cylinders", "?"], "guid": 779}}
{"text": "company: Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value; gas_station: Station_ID, Open_Year, Location, Manager_Name, Vice_Manager_Name, Representative_Name; station_company: Station_ID, Company_ID, Rank_of_the_Year | Show all headquarters without a company in banking industry.", "sql": "SELECT headquarters FROM company EXCEPT SELECT headquarters FROM company WHERE main_industry  =  'Banking'", "example": {"db_id": "gas_company", "query": "SELECT headquarters FROM company EXCEPT SELECT headquarters FROM company WHERE main_industry  =  'Banking'", "query_toks": ["SELECT", "headquarters", "FROM", "company", "EXCEPT", "SELECT", "headquarters", "FROM", "company", "WHERE", "main_industry", "=", "'Banking", "'"], "query_toks_no_value": ["select", "headquarters", "from", "company", "except", "select", "headquarters", "from", "company", "where", "main_industry", "=", "value"], "question": "Show all headquarters without a company in banking industry.", "question_toks": ["Show", "all", "headquarters", "without", "a", "company", "in", "banking", "industry", "."], "guid": 780}}
{"text": "continents: ContId, Continent; countries: CountryId, CountryName, Continent; car_makers: Id, Maker, FullName, Country; model_list: ModelId, Maker, Model; car_names: MakeId, Model, Make; cars_data: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year | For all of the 4 cylinder cars, which model has the most horsepower?", "sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;", "example": {"db_id": "car_1", "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;", "query_toks": ["SELECT", "T1.Model", "FROM", "CAR_NAMES", "AS", "T1", "JOIN", "CARS_DATA", "AS", "T2", "ON", "T1.MakeId", "=", "T2.Id", "WHERE", "T2.Cylinders", "=", "4", "ORDER", "BY", "T2.horsepower", "DESC", "LIMIT", "1", ";"], "query_toks_no_value": ["select", "t1", ".", "model", "from", "car_names", "as", "t1", "join", "cars_data", "as", "t2", "on", "t1", ".", "makeid", "=", "t2", ".", "id", "where", "t2", ".", "cylinders", "=", "value", "order", "by", "t2", ".", "horsepower", "desc", "limit", "value"], "question": "For all of the 4 cylinder cars, which model has the most horsepower?", "question_toks": ["For", "all", "of", "the", "4", "cylinder", "cars", ",", "which", "model", "has", "the", "most", "horsepower", "?"], "guid": 781}}
{"text": "continents: ContId, Continent; countries: CountryId, CountryName, Continent; car_makers: Id, Maker, FullName, Country; model_list: ModelId, Maker, Model; car_names: MakeId, Model, Make; cars_data: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year | Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?", "sql": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;", "example": {"db_id": "car_1", "query": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;", "query_toks": ["SELECT", "DISTINCT", "T2.Model", "FROM", "CAR_NAMES", "AS", "T1", "JOIN", "MODEL_LIST", "AS", "T2", "ON", "T1.Model", "=", "T2.Model", "JOIN", "CAR_MAKERS", "AS", "T3", "ON", "T2.Maker", "=", "T3.Id", "JOIN", "CARS_DATA", "AS", "T4", "ON", "T1.MakeId", "=", "T4.Id", "WHERE", "T3.FullName", "=", "'General", "Motors", "'", "OR", "T4.weight", ">", "3500", ";"], "query_toks_no_value": ["select", "distinct", "t2", ".", "model", "from", "car_names", "as", "t1", "join", "model_list", "as", "t2", "on", "t1", ".", "model", "=", "t2", ".", "model", "join", "car_makers", "as", "t3", "on", "t2", ".", "maker", "=", "t3", ".", "id", "join", "cars_data", "as", "t4", "on", "t1", ".", "makeid", "=", "t4", ".", "id", "where", "t3", ".", "fullname", "=", "value", "or", "t4", ".", "weight", ">", "value"], "question": "Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?", "question_toks": ["Which", "distinctive", "models", "are", "produced", "by", "maker", "with", "the", "full", "name", "General", "Motors", "or", "weighing", "more", "than", "3500", "?"], "guid": 782}}
{"text": "chip_model: Model_name, Launch_year, RAM_MiB, ROM_MiB, Slots, WiFi, Bluetooth; screen_mode: Graphics_mode, Char_cells, Pixels, Hardware_colours, used_kb, map, Type; phone: Company_name, Hardware_Model_name, Accreditation_type, Accreditation_level, Date, chip_model, screen_mode | List the name of the phone model launched in year 2002 and with the highest RAM size.", "sql": "SELECT T2.Hardware_Model_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T1.Launch_year = 2002 ORDER BY T1.RAM_MiB DESC LIMIT 1;", "example": {"db_id": "phone_1", "query": "SELECT T2.Hardware_Model_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T1.Launch_year = 2002 ORDER BY T1.RAM_MiB DESC LIMIT 1;", "query_toks": ["SELECT", "T2.Hardware_Model_name", "FROM", "chip_model", "AS", "T1", "JOIN", "phone", "AS", "T2", "ON", "T1.Model_name", "=", "T2.chip_model", "WHERE", "T1.Launch_year", "=", "2002", "ORDER", "BY", "T1.RAM_MiB", "DESC", "LIMIT", "1", ";"], "query_toks_no_value": ["select", "t2", ".", "hardware_model_name", "from", "chip_model", "as", "t1", "join", "phone", "as", "t2", "on", "t1", ".", "model_name", "=", "t2", ".", "chip_model", "where", "t1", ".", "launch_year", "=", "value", "order", "by", "t1", ".", "ram_mib", "desc", "limit", "value"], "question": "List the name of the phone model launched in year 2002 and with the highest RAM size.", "question_toks": ["List", "the", "name", "of", "the", "phone", "model", "launched", "in", "year", "2002", "and", "with", "the", "highest", "RAM", "size", "."], "guid": 783}}
{"text": "continents: ContId, Continent; countries: CountryId, CountryName, Continent; car_makers: Id, Maker, FullName, Country; model_list: ModelId, Maker, Model; car_names: MakeId, Model, Make; cars_data: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year | What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980 ?", "sql": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980", "example": {"db_id": "car_1", "query": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980", "query_toks": ["select", "max", "(", "mpg", ")", "from", "cars_data", "where", "cylinders", "=", "8", "or", "year", "<", "1980"], "query_toks_no_value": ["select", "max", "(", "mpg", ")", "from", "cars_data", "where", "cylinders", "=", "value", "or", "year", "<", "value"], "question": "What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980 ?", "question_toks": ["What", "is", "the", "maximum", "miles", "per", "gallon", "of", "the", "car", "with", "8", "cylinders", "or", "produced", "before", "1980", "?"], "guid": 784}}
{"text": "continents: ContId, Continent; countries: CountryId, CountryName, Continent; car_makers: Id, Maker, FullName, Country; model_list: ModelId, Maker, Model; car_names: MakeId, Model, Make; cars_data: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year | What is the horsepower of the car with the largest accelerate?", "sql": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;", "example": {"db_id": "car_1", "query": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;", "query_toks": ["SELECT", "T1.horsepower", "FROM", "CARS_DATA", "AS", "T1", "ORDER", "BY", "T1.accelerate", "DESC", "LIMIT", "1", ";"], "query_toks_no_value": ["select", "t1", ".", "horsepower", "from", "cars_data", "as", "t1", "order", "by", "t1", ".", "accelerate", "desc", "limit", "value"], "question": "What is the horsepower of the car with the largest accelerate?", "question_toks": ["What", "is", "the", "horsepower", "of", "the", "car", "with", "the", "largest", "accelerate", "?"], "guid": 785}}
{"text": "Manufacturers: Code, Name, Headquarter, Founder, Revenue; Products: Code, Name, Price, Manufacturer | Select the name of each manufacturer along with the name and price of its most expensive product.", "sql": "SELECT T1.Name ,  max(T1.Price) ,  T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code GROUP BY T2.name", "example": {"db_id": "manufactory_1", "query": "SELECT T1.Name ,  max(T1.Price) ,  T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code GROUP BY T2.name", "query_toks": ["SELECT", "T1.Name", ",", "max", "(", "T1.Price", ")", ",", "T2.name", "FROM", "products", "AS", "T1", "JOIN", "Manufacturers", "AS", "T2", "ON", "T1.manufacturer", "=", "T2.code", "GROUP", "BY", "T2.name"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "max", "(", "t1", ".", "price", ")", ",", "t2", ".", "name", "from", "products", "as", "t1", "join", "manufacturers", "as", "t2", "on", "t1", ".", "manufacturer", "=", "t2", ".", "code", "group", "by", "t2", ".", "name"], "question": "Select the name of each manufacturer along with the name and price of its most expensive product.", "question_toks": ["Select", "the", "name", "of", "each", "manufacturer", "along", "with", "the", "name", "and", "price", "of", "its", "most", "expensive", "product", "."], "guid": 786}}
{"text": "company: Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value; gas_station: Station_ID, Open_Year, Location, Manager_Name, Vice_Manager_Name, Representative_Name; station_company: Station_ID, Company_ID, Rank_of_the_Year | Show all headquarters with both a company in banking industry and a company in Oil and gas.", "sql": "SELECT headquarters FROM company WHERE main_industry  =  'Banking' INTERSECT SELECT headquarters FROM company WHERE main_industry  =  'Oil and gas'", "example": {"db_id": "gas_company", "query": "SELECT headquarters FROM company WHERE main_industry  =  'Banking' INTERSECT SELECT headquarters FROM company WHERE main_industry  =  'Oil and gas'", "query_toks": ["SELECT", "headquarters", "FROM", "company", "WHERE", "main_industry", "=", "'Banking", "'", "INTERSECT", "SELECT", "headquarters", "FROM", "company", "WHERE", "main_industry", "=", "'Oil", "and", "gas", "'"], "query_toks_no_value": ["select", "headquarters", "from", "company", "where", "main_industry", "=", "value", "intersect", "select", "headquarters", "from", "company", "where", "main_industry", "=", "value"], "question": "Show all headquarters with both a company in banking industry and a company in Oil and gas.", "question_toks": ["Show", "all", "headquarters", "with", "both", "a", "company", "in", "banking", "industry", "and", "a", "company", "in", "Oil", "and", "gas", "."], "guid": 787}}
{"text": "phone: Name, Phone_ID, Memory_in_G, Carrier, Price; market: Market_ID, District, Num_of_employees, Num_of_shops, Ranking; phone_market: Market_ID, Phone_ID, Num_of_stock | Show the names of phones with carrier either \"Sprint\" or \"TMobile\".", "sql": "SELECT Name FROM phone WHERE Carrier  =  \"Sprint\" OR Carrier  =  \"TMobile\"", "example": {"db_id": "phone_market", "query": "SELECT Name FROM phone WHERE Carrier  =  \"Sprint\" OR Carrier  =  \"TMobile\"", "query_toks": ["SELECT", "Name", "FROM", "phone", "WHERE", "Carrier", "=", "``", "Sprint", "''", "OR", "Carrier", "=", "``", "TMobile", "''"], "query_toks_no_value": ["select", "name", "from", "phone", "where", "carrier", "=", "value", "or", "carrier", "=", "value"], "question": "Show the names of phones with carrier either \"Sprint\" or \"TMobile\".", "question_toks": ["Show", "the", "names", "of", "phones", "with", "carrier", "either", "``", "Sprint", "''", "or", "``", "TMobile", "''", "."], "guid": 788}}
{"text": "continents: ContId, Continent; countries: CountryId, CountryName, Continent; car_makers: Id, Maker, FullName, Country; model_list: ModelId, Maker, Model; car_names: MakeId, Model, Make; cars_data: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year | In 1980, how many cars were made?", "sql": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;", "example": {"db_id": "car_1", "query": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "CARS_DATA", "WHERE", "YEAR", "=", "1980", ";"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "cars_data", "where", "year", "=", "value"], "question": "In 1980, how many cars were made?", "question_toks": ["In", "1980", ",", "how", "many", "cars", "were", "made", "?"], "guid": 789}}
{"text": "regions: REGION_ID, REGION_NAME; countries: COUNTRY_ID, COUNTRY_NAME, REGION_ID; departments: DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID; jobs: JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY; employees: EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID; job_history: EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID; locations: LOCATION_ID, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_ID | What are the full name, hire date, salary, and department id for employees without the letter M in their first name?", "sql": "SELECT first_name ,  last_name ,  hire_date ,  salary ,  department_id FROM employees WHERE first_name NOT LIKE '%M%'", "example": {"db_id": "hr_1", "query": "SELECT first_name ,  last_name ,  hire_date ,  salary ,  department_id FROM employees WHERE first_name NOT LIKE '%M%'", "query_toks": ["SELECT", "first_name", ",", "last_name", ",", "hire_date", ",", "salary", ",", "department_id", "FROM", "employees", "WHERE", "first_name", "NOT", "LIKE", "'", "%", "M", "%", "'"], "query_toks_no_value": ["select", "first_name", ",", "last_name", ",", "hire_date", ",", "salary", ",", "department_id", "from", "employees", "where", "first_name", "not", "like", "value"], "question": "What are the full name, hire date, salary, and department id for employees without the letter M in their first name?", "question_toks": ["What", "are", "the", "full", "name", ",", "hire", "date", ",", "salary", ",", "and", "department", "id", "for", "employees", "without", "the", "letter", "M", "in", "their", "first", "name", "?"], "guid": 790}}
{"text": "regions: REGION_ID, REGION_NAME; countries: COUNTRY_ID, COUNTRY_NAME, REGION_ID; departments: DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID; jobs: JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY; employees: EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID; job_history: EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID; locations: LOCATION_ID, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_ID | Can you return all detailed info of jobs which was done by any of the employees who is presently earning a salary on and above 12000?", "sql": "SELECT * FROM  job_history AS T1 JOIN employees AS T2 ON T1.employee_id  =  T2.employee_id WHERE T2.salary  >=  12000", "example": {"db_id": "hr_1", "query": "SELECT * FROM  job_history AS T1 JOIN employees AS T2 ON T1.employee_id  =  T2.employee_id WHERE T2.salary  >=  12000", "query_toks": ["SELECT", "*", "FROM", "job_history", "AS", "T1", "JOIN", "employees", "AS", "T2", "ON", "T1.employee_id", "=", "T2.employee_id", "WHERE", "T2.salary", ">", "=", "12000"], "query_toks_no_value": ["select", "*", "from", "job_history", "as", "t1", "join", "employees", "as", "t2", "on", "t1", ".", "employee_id", "=", "t2", ".", "employee_id", "where", "t2", ".", "salary", ">", "=", "value"], "question": "Can you return all detailed info of jobs which was done by any of the employees who is presently earning a salary on and above 12000?", "question_toks": ["Can", "you", "return", "all", "detailed", "info", "of", "jobs", "which", "was", "done", "by", "any", "of", "the", "employees", "who", "is", "presently", "earning", "a", "salary", "on", "and", "above", "12000", "?"], "guid": 791}}
{"text": "works_on: Essn, Pno, Hours; employee: Fname, Minit, Lname, Ssn, Bdate, Address, Sex, Salary, Super_ssn, Dno; department: Dname, Dnumber, Mgr_ssn, Mgr_start_date; project: Pname, Pnumber, Plocation, Dnum; dependent: Essn, Dependent_name, Sex, Bdate, Relationship; dept_locations: Dnumber, Dlocation | Find the number of employees of each gender whose salary is lower than 50000.", "sql": "SELECT count(*) ,  sex FROM employee WHERE salary  <  50000 GROUP BY sex", "example": {"db_id": "company_1", "query": "SELECT count(*) ,  sex FROM employee WHERE salary  <  50000 GROUP BY sex", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "sex", "FROM", "employee", "WHERE", "salary", "<", "50000", "GROUP", "BY", "sex"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "sex", "from", "employee", "where", "salary", "<", "value", "group", "by", "sex"], "question": "Find the number of employees of each gender whose salary is lower than 50000.", "question_toks": ["Find", "the", "number", "of", "employees", "of", "each", "gender", "whose", "salary", "is", "lower", "than", "50000", "."], "guid": 792}}
{"text": "member: Member_ID, Name, Nationality, Role; performance: Performance_ID, Date, Host, Location, Attendance; member_attendance: Member_ID, Performance_ID, Num_of_Pieces | Show different locations and the number of performances at each location.", "sql": "SELECT LOCATION ,  COUNT(*) FROM performance GROUP BY LOCATION", "example": {"db_id": "performance_attendance", "query": "SELECT LOCATION ,  COUNT(*) FROM performance GROUP BY LOCATION", "query_toks": ["SELECT", "LOCATION", ",", "COUNT", "(", "*", ")", "FROM", "performance", "GROUP", "BY", "LOCATION"], "query_toks_no_value": ["select", "location", ",", "count", "(", "*", ")", "from", "performance", "group", "by", "location"], "question": "Show different locations and the number of performances at each location.", "question_toks": ["Show", "different", "locations", "and", "the", "number", "of", "performances", "at", "each", "location", "."], "guid": 793}}
{"text": "regions: REGION_ID, REGION_NAME; countries: COUNTRY_ID, COUNTRY_NAME, REGION_ID; departments: DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID; jobs: JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY; employees: EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID; job_history: EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID; locations: LOCATION_ID, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_ID | display the department name and number of employees in each of the department.", "sql": "SELECT T2.department_name ,  COUNT(*) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T2.department_name", "example": {"db_id": "hr_1", "query": "SELECT T2.department_name ,  COUNT(*) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T2.department_name", "query_toks": ["SELECT", "T2.department_name", ",", "COUNT", "(", "*", ")", "FROM", "employees", "AS", "T1", "JOIN", "departments", "AS", "T2", "ON", "T1.department_id", "=", "T2.department_id", "GROUP", "BY", "T2.department_name"], "query_toks_no_value": ["select", "t2", ".", "department_name", ",", "count", "(", "*", ")", "from", "employees", "as", "t1", "join", "departments", "as", "t2", "on", "t1", ".", "department_id", "=", "t2", ".", "department_id", "group", "by", "t2", ".", "department_name"], "question": "display the department name and number of employees in each of the department.", "question_toks": ["display", "the", "department", "name", "and", "number", "of", "employees", "in", "each", "of", "the", "department", "."], "guid": 794}}
{"text": "continents: ContId, Continent; countries: CountryId, CountryName, Continent; car_makers: Id, Maker, FullName, Country; model_list: ModelId, Maker, Model; car_names: MakeId, Model, Make; cars_data: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year | How many countries are listed?", "sql": "SELECT count(*) FROM COUNTRIES;", "example": {"db_id": "car_1", "query": "SELECT count(*) FROM COUNTRIES;", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "COUNTRIES", ";"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "countries"], "question": "How many countries are listed?", "question_toks": ["How", "many", "countries", "are", "listed", "?"], "guid": 795}}
{"text": "phone: Name, Phone_ID, Memory_in_G, Carrier, Price; market: Market_ID, District, Num_of_employees, Num_of_shops, Ranking; phone_market: Market_ID, Phone_ID, Num_of_stock | Show the names of phones that have total number of stocks bigger than 2000, in descending order of the total number of stocks.", "sql": "SELECT T2.Name FROM phone_market AS T1 JOIN phone AS T2 ON T1.Phone_ID  =  T2.Phone_ID GROUP BY T2.Name HAVING sum(T1.Num_of_stock)  >=  2000 ORDER BY sum(T1.Num_of_stock) DESC", "example": {"db_id": "phone_market", "query": "SELECT T2.Name FROM phone_market AS T1 JOIN phone AS T2 ON T1.Phone_ID  =  T2.Phone_ID GROUP BY T2.Name HAVING sum(T1.Num_of_stock)  >=  2000 ORDER BY sum(T1.Num_of_stock) DESC", "query_toks": ["SELECT", "T2.Name", "FROM", "phone_market", "AS", "T1", "JOIN", "phone", "AS", "T2", "ON", "T1.Phone_ID", "=", "T2.Phone_ID", "GROUP", "BY", "T2.Name", "HAVING", "sum", "(", "T1.Num_of_stock", ")", ">", "=", "2000", "ORDER", "BY", "sum", "(", "T1.Num_of_stock", ")", "DESC"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "phone_market", "as", "t1", "join", "phone", "as", "t2", "on", "t1", ".", "phone_id", "=", "t2", ".", "phone_id", "group", "by", "t2", ".", "name", "having", "sum", "(", "t1", ".", "num_of_stock", ")", ">", "=", "value", "order", "by", "sum", "(", "t1", ".", "num_of_stock", ")", "desc"], "question": "Show the names of phones that have total number of stocks bigger than 2000, in descending order of the total number of stocks.", "question_toks": ["Show", "the", "names", "of", "phones", "that", "have", "total", "number", "of", "stocks", "bigger", "than", "2000", ",", "in", "descending", "order", "of", "the", "total", "number", "of", "stocks", "."], "guid": 796}}
{"text": "Manufacturers: Code, Name, Headquarter, Founder, Revenue; Products: Code, Name, Price, Manufacturer | Select the code of the product that is cheapest in each product category.", "sql": "SELECT code ,  name ,  min(price) FROM products GROUP BY name", "example": {"db_id": "manufactory_1", "query": "SELECT code ,  name ,  min(price) FROM products GROUP BY name", "query_toks": ["SELECT", "code", ",", "name", ",", "min", "(", "price", ")", "FROM", "products", "GROUP", "BY", "name"], "query_toks_no_value": ["select", "code", ",", "name", ",", "min", "(", "price", ")", "from", "products", "group", "by", "name"], "question": "Select the code of the product that is cheapest in each product category.", "question_toks": ["Select", "the", "code", "of", "the", "product", "that", "is", "cheapest", "in", "each", "product", "category", "."], "guid": 797}}
{"text": "member: Member_ID, Name, Nationality, Role; performance: Performance_ID, Date, Host, Location, Attendance; member_attendance: Member_ID, Performance_ID, Num_of_Pieces | How many performances are there?", "sql": "SELECT count(*) FROM performance", "example": {"db_id": "performance_attendance", "query": "SELECT count(*) FROM performance", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "performance"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "performance"], "question": "How many performances are there?", "question_toks": ["How", "many", "performances", "are", "there", "?"], "guid": 798}}
{"text": "buildings: id, name, City, Height, Stories, Status; Companies: id, name, Headquarters, Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value_billion; Office_locations: building_id, company_id, move_in_year | How many companies are there?", "sql": "SELECT count(*) FROM Companies", "example": {"db_id": "company_office", "query": "SELECT count(*) FROM Companies", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Companies"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "companies"], "question": "How many companies are there?", "question_toks": ["How", "many", "companies", "are", "there", "?"], "guid": 799}}
{"text": "regions: REGION_ID, REGION_NAME; countries: COUNTRY_ID, COUNTRY_NAME, REGION_ID; departments: DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID; jobs: JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY; employees: EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID; job_history: EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID; locations: LOCATION_ID, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_ID | What is the average salary of employees who have a commission percentage that is not null?", "sql": "SELECT department_id ,  AVG(salary) FROM employees WHERE commission_pct != \"null\" GROUP BY department_id", "example": {"db_id": "hr_1", "query": "SELECT department_id ,  AVG(salary) FROM employees WHERE commission_pct != \"null\" GROUP BY department_id", "query_toks": ["SELECT", "department_id", ",", "AVG", "(", "salary", ")", "FROM", "employees", "WHERE", "commission_pct", "!", "=", "``", "null", "''", "GROUP", "BY", "department_id"], "query_toks_no_value": ["select", "department_id", ",", "avg", "(", "salary", ")", "from", "employees", "where", "commission_pct", "!", "=", "value", "group", "by", "department_id"], "question": "What is the average salary of employees who have a commission percentage that is not null?", "question_toks": ["What", "is", "the", "average", "salary", "of", "employees", "who", "have", "a", "commission", "percentage", "that", "is", "not", "null", "?"], "guid": 800}}
{"text": "employee: Employee_ID, Name, Age, City; shop: Shop_ID, Name, Location, District, Number_products, Manager_name; hiring: Shop_ID, Employee_ID, Start_from, Is_full_time; evaluation: Employee_ID, Year_awarded, Bonus | Which shop has the most employees? Give me the shop name.", "sql": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "employee_hire_evaluation", "query": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "t2.name", "FROM", "hiring", "AS", "t1", "JOIN", "shop", "AS", "t2", "ON", "t1.shop_id", "=", "t2.shop_id", "GROUP", "BY", "t1.shop_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "hiring", "as", "t1", "join", "shop", "as", "t2", "on", "t1", ".", "shop_id", "=", "t2", ".", "shop_id", "group", "by", "t1", ".", "shop_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which shop has the most employees? Give me the shop name.", "question_toks": ["Which", "shop", "has", "the", "most", "employees", "?", "Give", "me", "the", "shop", "name", "."], "guid": 801}}
{"text": "regions: REGION_ID, REGION_NAME; countries: COUNTRY_ID, COUNTRY_NAME, REGION_ID; departments: DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID; jobs: JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY; employees: EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID; job_history: EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID; locations: LOCATION_ID, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_ID | display all the information about the department Marketing.", "sql": "SELECT * FROM  departments WHERE department_name  =  'Marketing'", "example": {"db_id": "hr_1", "query": "SELECT * FROM  departments WHERE department_name  =  'Marketing'", "query_toks": ["SELECT", "*", "FROM", "departments", "WHERE", "department_name", "=", "'Marketing", "'"], "query_toks_no_value": ["select", "*", "from", "departments", "where", "department_name", "=", "value"], "question": "display all the information about the department Marketing.", "question_toks": ["display", "all", "the", "information", "about", "the", "department", "Marketing", "."], "guid": 802}}
{"text": "regions: REGION_ID, REGION_NAME; countries: COUNTRY_ID, COUNTRY_NAME, REGION_ID; departments: DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID; jobs: JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY; employees: EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID; job_history: EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID; locations: LOCATION_ID, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_ID | display the employee number and job id for all employees whose salary is smaller than any salary of those employees whose job title is MK_MAN.", "sql": "SELECT employee_id ,  job_id FROM employees WHERE salary  <  ( SELECT min(salary) FROM employees WHERE job_id  =  'MK_MAN' )", "example": {"db_id": "hr_1", "query": "SELECT employee_id ,  job_id FROM employees WHERE salary  <  ( SELECT min(salary) FROM employees WHERE job_id  =  'MK_MAN' )", "query_toks": ["SELECT", "employee_id", ",", "job_id", "FROM", "employees", "WHERE", "salary", "<", "(", "SELECT", "min", "(", "salary", ")", "FROM", "employees", "WHERE", "job_id", "=", "'MK_MAN", "'", ")"], "query_toks_no_value": ["select", "employee_id", ",", "job_id", "from", "employees", "where", "salary", "<", "(", "select", "min", "(", "salary", ")", "from", "employees", "where", "job_id", "=", "value", ")"], "question": "display the employee number and job id for all employees whose salary is smaller than any salary of those employees whose job title is MK_MAN.", "question_toks": ["display", "the", "employee", "number", "and", "job", "id", "for", "all", "employees", "whose", "salary", "is", "smaller", "than", "any", "salary", "of", "those", "employees", "whose", "job", "title", "is", "MK_MAN", "."], "guid": 803}}
{"text": "member: Member_ID, Name, Nationality, Role; performance: Performance_ID, Date, Host, Location, Attendance; member_attendance: Member_ID, Performance_ID, Num_of_Pieces | Show the names of members and the dates of performances they attended in descending order of attendance of the performances.", "sql": "SELECT T2.Name ,  T3.Date FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID  =  T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID  =  T3.Performance_ID ORDER BY T3.Attendance DESC", "example": {"db_id": "performance_attendance", "query": "SELECT T2.Name ,  T3.Date FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID  =  T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID  =  T3.Performance_ID ORDER BY T3.Attendance DESC", "query_toks": ["SELECT", "T2.Name", ",", "T3.Date", "FROM", "member_attendance", "AS", "T1", "JOIN", "member", "AS", "T2", "ON", "T1.Member_ID", "=", "T2.Member_ID", "JOIN", "performance", "AS", "T3", "ON", "T1.Performance_ID", "=", "T3.Performance_ID", "ORDER", "BY", "T3.Attendance", "DESC"], "query_toks_no_value": ["select", "t2", ".", "name", ",", "t3", ".", "date", "from", "member_attendance", "as", "t1", "join", "member", "as", "t2", "on", "t1", ".", "member_id", "=", "t2", ".", "member_id", "join", "performance", "as", "t3", "on", "t1", ".", "performance_id", "=", "t3", ".", "performance_id", "order", "by", "t3", ".", "attendance", "desc"], "question": "Show the names of members and the dates of performances they attended in descending order of attendance of the performances.", "question_toks": ["Show", "the", "names", "of", "members", "and", "the", "dates", "of", "performances", "they", "attended", "in", "descending", "order", "of", "attendance", "of", "the", "performances", "."], "guid": 804}}
{"text": "continents: ContId, Continent; countries: CountryId, CountryName, Continent; car_makers: Id, Maker, FullName, Country; model_list: ModelId, Maker, Model; car_names: MakeId, Model, Make; cars_data: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year | What is the name of the country with the most car makers?", "sql": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;", "example": {"db_id": "car_1", "query": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;", "query_toks": ["SELECT", "T2.CountryName", "FROM", "CAR_MAKERS", "AS", "T1", "JOIN", "COUNTRIES", "AS", "T2", "ON", "T1.Country", "=", "T2.CountryId", "GROUP", "BY", "T1.Country", "ORDER", "BY", "Count", "(", "*", ")", "DESC", "LIMIT", "1", ";"], "query_toks_no_value": ["select", "t2", ".", "countryname", "from", "car_makers", "as", "t1", "join", "countries", "as", "t2", "on", "t1", ".", "country", "=", "t2", ".", "countryid", "group", "by", "t1", ".", "country", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the name of the country with the most car makers?", "question_toks": ["What", "is", "the", "name", "of", "the", "country", "with", "the", "most", "car", "makers", "?"], "guid": 805}}
{"text": "regions: REGION_ID, REGION_NAME; countries: COUNTRY_ID, COUNTRY_NAME, REGION_ID; departments: DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID; jobs: JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY; employees: EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID; job_history: EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID; locations: LOCATION_ID, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_ID | What are the ids and full names for employees who work in a department that has someone with a first name that contains the letter T?", "sql": "SELECT employee_id ,  first_name ,  last_name FROM employees WHERE department_id IN ( SELECT department_id FROM employees WHERE first_name LIKE '%T%' )", "example": {"db_id": "hr_1", "query": "SELECT employee_id ,  first_name ,  last_name FROM employees WHERE department_id IN ( SELECT department_id FROM employees WHERE first_name LIKE '%T%' )", "query_toks": ["SELECT", "employee_id", ",", "first_name", ",", "last_name", "FROM", "employees", "WHERE", "department_id", "IN", "(", "SELECT", "department_id", "FROM", "employees", "WHERE", "first_name", "LIKE", "'", "%", "T", "%", "'", ")"], "query_toks_no_value": ["select", "employee_id", ",", "first_name", ",", "last_name", "from", "employees", "where", "department_id", "in", "(", "select", "department_id", "from", "employees", "where", "first_name", "like", "value", ")"], "question": "What are the ids and full names for employees who work in a department that has someone with a first name that contains the letter T?", "question_toks": ["What", "are", "the", "ids", "and", "full", "names", "for", "employees", "who", "work", "in", "a", "department", "that", "has", "someone", "with", "a", "first", "name", "that", "contains", "the", "letter", "T", "?"], "guid": 806}}
{"text": "Manufacturers: Code, Name, Headquarter, Founder, Revenue; Products: Code, Name, Price, Manufacturer | What is all the product data, as well as  each product's manufacturer?", "sql": "SELECT * FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code", "example": {"db_id": "manufactory_1", "query": "SELECT * FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code", "query_toks": ["SELECT", "*", "FROM", "products", "AS", "T1", "JOIN", "Manufacturers", "AS", "T2", "ON", "T1.manufacturer", "=", "T2.code"], "query_toks_no_value": ["select", "*", "from", "products", "as", "t1", "join", "manufacturers", "as", "t2", "on", "t1", ".", "manufacturer", "=", "t2", ".", "code"], "question": "What is all the product data, as well as  each product's manufacturer?", "question_toks": ["What", "is", "all", "the", "product", "data", ",", "as", "well", "as", "each", "product", "'s", "manufacturer", "?"], "guid": 807}}
{"text": "regions: REGION_ID, REGION_NAME; countries: COUNTRY_ID, COUNTRY_NAME, REGION_ID; departments: DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID; jobs: JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY; employees: EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID; job_history: EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID; locations: LOCATION_ID, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_ID | What are total salaries and department id for each department that has more than 2 employees?", "sql": "SELECT department_id ,  SUM(salary) FROM employees GROUP BY department_id HAVING count(*)  >=  2", "example": {"db_id": "hr_1", "query": "SELECT department_id ,  SUM(salary) FROM employees GROUP BY department_id HAVING count(*)  >=  2", "query_toks": ["SELECT", "department_id", ",", "SUM", "(", "salary", ")", "FROM", "employees", "GROUP", "BY", "department_id", "HAVING", "count", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "department_id", ",", "sum", "(", "salary", ")", "from", "employees", "group", "by", "department_id", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "What are total salaries and department id for each department that has more than 2 employees?", "question_toks": ["What", "are", "total", "salaries", "and", "department", "id", "for", "each", "department", "that", "has", "more", "than", "2", "employees", "?"], "guid": 808}}
{"text": "chip_model: Model_name, Launch_year, RAM_MiB, ROM_MiB, Slots, WiFi, Bluetooth; screen_mode: Graphics_mode, Char_cells, Pixels, Hardware_colours, used_kb, map, Type; phone: Company_name, Hardware_Model_name, Accreditation_type, Accreditation_level, Date, chip_model, screen_mode | Find the accreditation level that more than 3 phones use.", "sql": "SELECT Accreditation_level FROM phone GROUP BY Accreditation_level HAVING count(*)  >  3", "example": {"db_id": "phone_1", "query": "SELECT Accreditation_level FROM phone GROUP BY Accreditation_level HAVING count(*)  >  3", "query_toks": ["SELECT", "Accreditation_level", "FROM", "phone", "GROUP", "BY", "Accreditation_level", "HAVING", "count", "(", "*", ")", ">", "3"], "query_toks_no_value": ["select", "accreditation_level", "from", "phone", "group", "by", "accreditation_level", "having", "count", "(", "*", ")", ">", "value"], "question": "Find the accreditation level that more than 3 phones use.", "question_toks": ["Find", "the", "accreditation", "level", "that", "more", "than", "3", "phones", "use", "."], "guid": 809}}
{"text": "regions: REGION_ID, REGION_NAME; countries: COUNTRY_ID, COUNTRY_NAME, REGION_ID; departments: DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID; jobs: JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY; employees: EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID; job_history: EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID; locations: LOCATION_ID, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_ID | What are the job ids and dates of hire for employees hired after November 5th, 2007 and before July 5th, 2009?", "sql": "SELECT job_id ,  hire_date FROM employees WHERE hire_date BETWEEN '2007-11-05' AND '2009-07-05'", "example": {"db_id": "hr_1", "query": "SELECT job_id ,  hire_date FROM employees WHERE hire_date BETWEEN '2007-11-05' AND '2009-07-05'", "query_toks": ["SELECT", "job_id", ",", "hire_date", "FROM", "employees", "WHERE", "hire_date", "BETWEEN", "'2007-11-05", "'", "AND", "'2009-07-05", "'"], "query_toks_no_value": ["select", "job_id", ",", "hire_date", "from", "employees", "where", "hire_date", "between", "value", "and", "value"], "question": "What are the job ids and dates of hire for employees hired after November 5th, 2007 and before July 5th, 2009?", "question_toks": ["What", "are", "the", "job", "ids", "and", "dates", "of", "hire", "for", "employees", "hired", "after", "November", "5th", ",", "2007", "and", "before", "July", "5th", ",", "2009", "?"], "guid": 810}}
{"text": "continents: ContId, Continent; countries: CountryId, CountryName, Continent; car_makers: Id, Maker, FullName, Country; model_list: ModelId, Maker, Model; car_names: MakeId, Model, Make; cars_data: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year | What are the name of the countries where there is not a single car maker?", "sql": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;", "example": {"db_id": "car_1", "query": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;", "query_toks": ["SELECT", "CountryName", "FROM", "countries", "EXCEPT", "SELECT", "T1.CountryName", "FROM", "countries", "AS", "T1", "JOIN", "CAR_MAKERS", "AS", "T2", "ON", "T1.countryId", "=", "T2.Country", ";"], "query_toks_no_value": ["select", "countryname", "from", "countries", "except", "select", "t1", ".", "countryname", "from", "countries", "as", "t1", "join", "car_makers", "as", "t2", "on", "t1", ".", "countryid", "=", "t2", ".", "country"], "question": "What are the name of the countries where there is not a single car maker?", "question_toks": ["What", "are", "the", "name", "of", "the", "countries", "where", "there", "is", "not", "a", "single", "car", "maker", "?"], "guid": 811}}
{"text": "phone: Name, Phone_ID, Memory_in_G, Carrier, Price; market: Market_ID, District, Num_of_employees, Num_of_shops, Ranking; phone_market: Market_ID, Phone_ID, Num_of_stock | List the names of phones in ascending order of price.", "sql": "SELECT Name FROM phone ORDER BY Price ASC", "example": {"db_id": "phone_market", "query": "SELECT Name FROM phone ORDER BY Price ASC", "query_toks": ["SELECT", "Name", "FROM", "phone", "ORDER", "BY", "Price", "ASC"], "query_toks_no_value": ["select", "name", "from", "phone", "order", "by", "price", "asc"], "question": "List the names of phones in ascending order of price.", "question_toks": ["List", "the", "names", "of", "phones", "in", "ascending", "order", "of", "price", "."], "guid": 812}}
{"text": "chip_model: Model_name, Launch_year, RAM_MiB, ROM_MiB, Slots, WiFi, Bluetooth; screen_mode: Graphics_mode, Char_cells, Pixels, Hardware_colours, used_kb, map, Type; phone: Company_name, Hardware_Model_name, Accreditation_type, Accreditation_level, Date, chip_model, screen_mode | Find the pixels of the screen modes that are used by both phones with full accreditation types and phones with Provisional accreditation types.", "sql": "SELECT t1.pixels FROM screen_mode AS t1 JOIN phone AS t2 ON t1.Graphics_mode  =  t2.screen_mode WHERE t2.Accreditation_type  =  'Provisional' INTERSECT SELECT t1.pixels FROM screen_mode AS t1 JOIN phone AS t2 ON t1.Graphics_mode  =  t2.screen_mode WHERE t2.Accreditation_type  =  'Full'", "example": {"db_id": "phone_1", "query": "SELECT t1.pixels FROM screen_mode AS t1 JOIN phone AS t2 ON t1.Graphics_mode  =  t2.screen_mode WHERE t2.Accreditation_type  =  'Provisional' INTERSECT SELECT t1.pixels FROM screen_mode AS t1 JOIN phone AS t2 ON t1.Graphics_mode  =  t2.screen_mode WHERE t2.Accreditation_type  =  'Full'", "query_toks": ["SELECT", "t1.pixels", "FROM", "screen_mode", "AS", "t1", "JOIN", "phone", "AS", "t2", "ON", "t1.Graphics_mode", "=", "t2.screen_mode", "WHERE", "t2.Accreditation_type", "=", "'Provisional", "'", "INTERSECT", "SELECT", "t1.pixels", "FROM", "screen_mode", "AS", "t1", "JOIN", "phone", "AS", "t2", "ON", "t1.Graphics_mode", "=", "t2.screen_mode", "WHERE", "t2.Accreditation_type", "=", "'Full", "'"], "query_toks_no_value": ["select", "t1", ".", "pixels", "from", "screen_mode", "as", "t1", "join", "phone", "as", "t2", "on", "t1", ".", "graphics_mode", "=", "t2", ".", "screen_mode", "where", "t2", ".", "accreditation_type", "=", "value", "intersect", "select", "t1", ".", "pixels", "from", "screen_mode", "as", "t1", "join", "phone", "as", "t2", "on", "t1", ".", "graphics_mode", "=", "t2", ".", "screen_mode", "where", "t2", ".", "accreditation_type", "=", "value"], "question": "Find the pixels of the screen modes that are used by both phones with full accreditation types and phones with Provisional accreditation types.", "question_toks": ["Find", "the", "pixels", "of", "the", "screen", "modes", "that", "are", "used", "by", "both", "phones", "with", "full", "accreditation", "types", "and", "phones", "with", "Provisional", "accreditation", "types", "."], "guid": 813}}
{"text": "manufacturer: Manufacturer_ID, Open_Year, Name, Num_of_Factories, Num_of_Shops; furniture: Furniture_ID, Name, Num_of_Component, Market_Rate; furniture_manufacte: Manufacturer_ID, Furniture_ID, Price_in_Dollar | Find the name of the company that produces both furnitures with less than 6 components and furnitures with more than 10 components.", "sql": "SELECT t3.name FROM furniture AS t1 JOIN furniture_manufacte AS t2 ON t1.Furniture_ID  =  t2.Furniture_ID JOIN manufacturer AS t3 ON t2.manufacturer_id  =  t3.manufacturer_id WHERE t1.num_of_component  <  6 INTERSECT SELECT t3.name FROM furniture AS t1 JOIN furniture_manufacte AS t2 ON t1.Furniture_ID  =  t2.Furniture_ID JOIN manufacturer AS t3 ON t2.manufacturer_id  =  t3.manufacturer_id WHERE t1.num_of_component  >  10", "example": {"db_id": "manufacturer", "query": "SELECT t3.name FROM furniture AS t1 JOIN furniture_manufacte AS t2 ON t1.Furniture_ID  =  t2.Furniture_ID JOIN manufacturer AS t3 ON t2.manufacturer_id  =  t3.manufacturer_id WHERE t1.num_of_component  <  6 INTERSECT SELECT t3.name FROM furniture AS t1 JOIN furniture_manufacte AS t2 ON t1.Furniture_ID  =  t2.Furniture_ID JOIN manufacturer AS t3 ON t2.manufacturer_id  =  t3.manufacturer_id WHERE t1.num_of_component  >  10", "query_toks": ["SELECT", "t3.name", "FROM", "furniture", "AS", "t1", "JOIN", "furniture_manufacte", "AS", "t2", "ON", "t1.Furniture_ID", "=", "t2.Furniture_ID", "JOIN", "manufacturer", "AS", "t3", "ON", "t2.manufacturer_id", "=", "t3.manufacturer_id", "WHERE", "t1.num_of_component", "<", "6", "INTERSECT", "SELECT", "t3.name", "FROM", "furniture", "AS", "t1", "JOIN", "furniture_manufacte", "AS", "t2", "ON", "t1.Furniture_ID", "=", "t2.Furniture_ID", "JOIN", "manufacturer", "AS", "t3", "ON", "t2.manufacturer_id", "=", "t3.manufacturer_id", "WHERE", "t1.num_of_component", ">", "10"], "query_toks_no_value": ["select", "t3", ".", "name", "from", "furniture", "as", "t1", "join", "furniture_manufacte", "as", "t2", "on", "t1", ".", "furniture_id", "=", "t2", ".", "furniture_id", "join", "manufacturer", "as", "t3", "on", "t2", ".", "manufacturer_id", "=", "t3", ".", "manufacturer_id", "where", "t1", ".", "num_of_component", "<", "value", "intersect", "select", "t3", ".", "name", "from", "furniture", "as", "t1", "join", "furniture_manufacte", "as", "t2", "on", "t1", ".", "furniture_id", "=", "t2", ".", "furniture_id", "join", "manufacturer", "as", "t3", "on", "t2", ".", "manufacturer_id", "=", "t3", ".", "manufacturer_id", "where", "t1", ".", "num_of_component", ">", "value"], "question": "Find the name of the company that produces both furnitures with less than 6 components and furnitures with more than 10 components.", "question_toks": ["Find", "the", "name", "of", "the", "company", "that", "produces", "both", "furnitures", "with", "less", "than", "6", "components", "and", "furnitures", "with", "more", "than", "10", "components", "."], "guid": 814}}
{"text": "regions: REGION_ID, REGION_NAME; countries: COUNTRY_ID, COUNTRY_NAME, REGION_ID; departments: DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID; jobs: JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY; employees: EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID; job_history: EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID; locations: LOCATION_ID, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_ID | What is the first name and job id for all employees in the Finance department?", "sql": "SELECT T1.first_name ,  T1.job_id FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id WHERE T2.department_name  =  'Finance'", "example": {"db_id": "hr_1", "query": "SELECT T1.first_name ,  T1.job_id FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id WHERE T2.department_name  =  'Finance'", "query_toks": ["SELECT", "T1.first_name", ",", "T1.job_id", "FROM", "employees", "AS", "T1", "JOIN", "departments", "AS", "T2", "ON", "T1.department_id", "=", "T2.department_id", "WHERE", "T2.department_name", "=", "'Finance", "'"], "query_toks_no_value": ["select", "t1", ".", "first_name", ",", "t1", ".", "job_id", "from", "employees", "as", "t1", "join", "departments", "as", "t2", "on", "t1", ".", "department_id", "=", "t2", ".", "department_id", "where", "t2", ".", "department_name", "=", "value"], "question": "What is the first name and job id for all employees in the Finance department?", "question_toks": ["What", "is", "the", "first", "name", "and", "job", "id", "for", "all", "employees", "in", "the", "Finance", "department", "?"], "guid": 815}}
{"text": "employee: Employee_ID, Name, Age, City; shop: Shop_ID, Name, Location, District, Number_products, Manager_name; hiring: Shop_ID, Employee_ID, Start_from, Is_full_time; evaluation: Employee_ID, Year_awarded, Bonus | For each shop, return the number of employees working there and the name of the shop.", "sql": "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name", "example": {"db_id": "employee_hire_evaluation", "query": "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "t2.name", "FROM", "hiring", "AS", "t1", "JOIN", "shop", "AS", "t2", "ON", "t1.shop_id", "=", "t2.shop_id", "GROUP", "BY", "t2.name"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "t2", ".", "name", "from", "hiring", "as", "t1", "join", "shop", "as", "t2", "on", "t1", ".", "shop_id", "=", "t2", ".", "shop_id", "group", "by", "t2", ".", "name"], "question": "For each shop, return the number of employees working there and the name of the shop.", "question_toks": ["For", "each", "shop", ",", "return", "the", "number", "of", "employees", "working", "there", "and", "the", "name", "of", "the", "shop", "."], "guid": 816}}
{"text": "company: Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value; gas_station: Station_ID, Open_Year, Location, Manager_Name, Vice_Manager_Name, Representative_Name; station_company: Station_ID, Company_ID, Rank_of_the_Year | What are the gas station ids, locations, and manager names for the gas stations ordered by opening year?", "sql": "SELECT station_id ,  LOCATION ,  manager_name FROM gas_station ORDER BY open_year", "example": {"db_id": "gas_company", "query": "SELECT station_id ,  LOCATION ,  manager_name FROM gas_station ORDER BY open_year", "query_toks": ["SELECT", "station_id", ",", "LOCATION", ",", "manager_name", "FROM", "gas_station", "ORDER", "BY", "open_year"], "query_toks_no_value": ["select", "station_id", ",", "location", ",", "manager_name", "from", "gas_station", "order", "by", "open_year"], "question": "What are the gas station ids, locations, and manager names for the gas stations ordered by opening year?", "question_toks": ["What", "are", "the", "gas", "station", "ids", ",", "locations", ",", "and", "manager", "names", "for", "the", "gas", "stations", "ordered", "by", "opening", "year", "?"], "guid": 817}}
{"text": "regions: REGION_ID, REGION_NAME; countries: COUNTRY_ID, COUNTRY_NAME, REGION_ID; departments: DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID; jobs: JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY; employees: EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID; job_history: EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID; locations: LOCATION_ID, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_ID | Give the distinct department ids of departments in which a manager is in charge of 4 or more employees?", "sql": "SELECT DISTINCT department_id FROM employees GROUP BY department_id ,  manager_id HAVING COUNT(employee_id)  >= 4", "example": {"db_id": "hr_1", "query": "SELECT DISTINCT department_id FROM employees GROUP BY department_id ,  manager_id HAVING COUNT(employee_id)  >= 4", "query_toks": ["SELECT", "DISTINCT", "department_id", "FROM", "employees", "GROUP", "BY", "department_id", ",", "manager_id", "HAVING", "COUNT", "(", "employee_id", ")", ">", "=", "4"], "query_toks_no_value": ["select", "distinct", "department_id", "from", "employees", "group", "by", "department_id", ",", "manager_id", "having", "count", "(", "employee_id", ")", ">", "=", "value"], "question": "Give the distinct department ids of departments in which a manager is in charge of 4 or more employees?", "question_toks": ["Give", "the", "distinct", "department", "ids", "of", "departments", "in", "which", "a", "manager", "is", "in", "charge", "of", "4", "or", "more", "employees", "?"], "guid": 818}}
{"text": "regions: REGION_ID, REGION_NAME; countries: COUNTRY_ID, COUNTRY_NAME, REGION_ID; departments: DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID; jobs: JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY; employees: EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID; job_history: EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID; locations: LOCATION_ID, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_ID | What is the minimum salary in each department?", "sql": "SELECT MIN(salary) ,  department_id FROM employees GROUP BY department_id", "example": {"db_id": "hr_1", "query": "SELECT MIN(salary) ,  department_id FROM employees GROUP BY department_id", "query_toks": ["SELECT", "MIN", "(", "salary", ")", ",", "department_id", "FROM", "employees", "GROUP", "BY", "department_id"], "query_toks_no_value": ["select", "min", "(", "salary", ")", ",", "department_id", "from", "employees", "group", "by", "department_id"], "question": "What is the minimum salary in each department?", "question_toks": ["What", "is", "the", "minimum", "salary", "in", "each", "department", "?"], "guid": 819}}
{"text": "continents: ContId, Continent; countries: CountryId, CountryName, Continent; car_makers: Id, Maker, FullName, Country; model_list: ModelId, Maker, Model; car_names: MakeId, Model, Make; cars_data: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year | What is the maker of the carr produced in the earliest year and what year was it?", "sql": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);", "example": {"db_id": "car_1", "query": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);", "query_toks": ["SELECT", "T2.Make", ",", "T1.Year", "FROM", "CARS_DATA", "AS", "T1", "JOIN", "CAR_NAMES", "AS", "T2", "ON", "T1.Id", "=", "T2.MakeId", "WHERE", "T1.Year", "=", "(", "SELECT", "min", "(", "YEAR", ")", "FROM", "CARS_DATA", ")", ";"], "query_toks_no_value": ["select", "t2", ".", "make", ",", "t1", ".", "year", "from", "cars_data", "as", "t1", "join", "car_names", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "makeid", "where", "t1", ".", "year", "=", "(", "select", "min", "(", "year", ")", "from", "cars_data", ")"], "question": "What is the maker of the carr produced in the earliest year and what year was it?", "question_toks": ["What", "is", "the", "maker", "of", "the", "carr", "produced", "in", "the", "earliest", "year", "and", "what", "year", "was", "it", "?"], "guid": 820}}
{"text": "regions: REGION_ID, REGION_NAME; countries: COUNTRY_ID, COUNTRY_NAME, REGION_ID; departments: DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID; jobs: JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY; employees: EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID; job_history: EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID; locations: LOCATION_ID, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_ID | display the employee ID for each employee and the date on which he ended his previous job.", "sql": "SELECT employee_id ,  MAX(end_date) FROM job_history GROUP BY employee_id", "example": {"db_id": "hr_1", "query": "SELECT employee_id ,  MAX(end_date) FROM job_history GROUP BY employee_id", "query_toks": ["SELECT", "employee_id", ",", "MAX", "(", "end_date", ")", "FROM", "job_history", "GROUP", "BY", "employee_id"], "query_toks_no_value": ["select", "employee_id", ",", "max", "(", "end_date", ")", "from", "job_history", "group", "by", "employee_id"], "question": "display the employee ID for each employee and the date on which he ended his previous job.", "question_toks": ["display", "the", "employee", "ID", "for", "each", "employee", "and", "the", "date", "on", "which", "he", "ended", "his", "previous", "job", "."], "guid": 821}}
{"text": "regions: REGION_ID, REGION_NAME; countries: COUNTRY_ID, COUNTRY_NAME, REGION_ID; departments: DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID; jobs: JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY; employees: EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID; job_history: EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID; locations: LOCATION_ID, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_ID | display all the information of those employees who did not have any job in the past.", "sql": "SELECT * FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)", "example": {"db_id": "hr_1", "query": "SELECT * FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)", "query_toks": ["SELECT", "*", "FROM", "employees", "WHERE", "employee_id", "NOT", "IN", "(", "SELECT", "employee_id", "FROM", "job_history", ")"], "query_toks_no_value": ["select", "*", "from", "employees", "where", "employee_id", "not", "in", "(", "select", "employee_id", "from", "job_history", ")"], "question": "display all the information of those employees who did not have any job in the past.", "question_toks": ["display", "all", "the", "information", "of", "those", "employees", "who", "did", "not", "have", "any", "job", "in", "the", "past", "."], "guid": 822}}
{"text": "manufacturer: Manufacturer_ID, Open_Year, Name, Num_of_Factories, Num_of_Shops; furniture: Furniture_ID, Name, Num_of_Component, Market_Rate; furniture_manufacte: Manufacturer_ID, Furniture_ID, Price_in_Dollar | Give me the name and year of opening of the manufacturers that have either less than 10 factories or more than 10 shops.", "sql": "SELECT name ,  open_year FROM manufacturer WHERE num_of_shops  >  10 OR Num_of_Factories  <  10", "example": {"db_id": "manufacturer", "query": "SELECT name ,  open_year FROM manufacturer WHERE num_of_shops  >  10 OR Num_of_Factories  <  10", "query_toks": ["SELECT", "name", ",", "open_year", "FROM", "manufacturer", "WHERE", "num_of_shops", ">", "10", "OR", "Num_of_Factories", "<", "10"], "query_toks_no_value": ["select", "name", ",", "open_year", "from", "manufacturer", "where", "num_of_shops", ">", "value", "or", "num_of_factories", "<", "value"], "question": "Give me the name and year of opening of the manufacturers that have either less than 10 factories or more than 10 shops.", "question_toks": ["Give", "me", "the", "name", "and", "year", "of", "opening", "of", "the", "manufacturers", "that", "have", "either", "less", "than", "10", "factories", "or", "more", "than", "10", "shops", "."], "guid": 823}}
{"text": "continents: ContId, Continent; countries: CountryId, CountryName, Continent; car_makers: Id, Maker, FullName, Country; model_list: ModelId, Maker, Model; car_names: MakeId, Model, Make; cars_data: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year | In which years cars were produced weighing no less than 3000 and no more than 4000 ?", "sql": "select distinct year from cars_data where weight between 3000 and 4000;", "example": {"db_id": "car_1", "query": "select distinct year from cars_data where weight between 3000 and 4000;", "query_toks": ["select", "distinct", "year", "from", "cars_data", "where", "weight", "between", "3000", "and", "4000", ";"], "query_toks_no_value": ["select", "distinct", "year", "from", "cars_data", "where", "weight", "between", "value", "and", "value"], "question": "In which years cars were produced weighing no less than 3000 and no more than 4000 ?", "question_toks": ["In", "which", "years", "cars", "were", "produced", "weighing", "no", "less", "than", "3000", "and", "no", "more", "than", "4000", "?"], "guid": 824}}
{"text": "continents: ContId, Continent; countries: CountryId, CountryName, Continent; car_makers: Id, Maker, FullName, Country; model_list: ModelId, Maker, Model; car_names: MakeId, Model, Make; cars_data: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year | What is the accelerate of the car make amc hornet sportabout (sw)?", "sql": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';", "example": {"db_id": "car_1", "query": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';", "query_toks": ["SELECT", "T1.Accelerate", "FROM", "CARS_DATA", "AS", "T1", "JOIN", "CAR_NAMES", "AS", "T2", "ON", "T1.Id", "=", "T2.MakeId", "WHERE", "T2.Make", "=", "'amc", "hornet", "sportabout", "(", "sw", ")", "'", ";"], "query_toks_no_value": ["select", "t1", ".", "accelerate", "from", "cars_data", "as", "t1", "join", "car_names", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "makeid", "where", "t2", ".", "make", "=", "value"], "question": "What is the accelerate of the car make amc hornet sportabout (sw)?", "question_toks": ["What", "is", "the", "accelerate", "of", "the", "car", "make", "amc", "hornet", "sportabout", "(", "sw", ")", "?"], "guid": 825}}
{"text": "continents: ContId, Continent; countries: CountryId, CountryName, Continent; car_makers: Id, Maker, FullName, Country; model_list: ModelId, Maker, Model; car_names: MakeId, Model, Make; cars_data: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year | How many cars have a larger accelerate than the car with the largest horsepower?", "sql": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );", "example": {"db_id": "car_1", "query": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );", "query_toks": ["SELECT", "COUNT", "(", "*", ")", "FROM", "CARS_DATA", "WHERE", "Accelerate", ">", "(", "SELECT", "Accelerate", "FROM", "CARS_DATA", "ORDER", "BY", "Horsepower", "DESC", "LIMIT", "1", ")", ";"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "cars_data", "where", "accelerate", ">", "(", "select", "accelerate", "from", "cars_data", "order", "by", "horsepower", "desc", "limit", "value", ")"], "question": "How many cars have a larger accelerate than the car with the largest horsepower?", "question_toks": ["How", "many", "cars", "have", "a", "larger", "accelerate", "than", "the", "car", "with", "the", "largest", "horsepower", "?"], "guid": 826}}
{"text": "Manufacturers: Code, Name, Headquarter, Founder, Revenue; Products: Code, Name, Price, Manufacturer | Select the average price of each manufacturer's products, showing the manufacturer's name.", "sql": "SELECT avg(T1.Price) ,  T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code GROUP BY T2.name", "example": {"db_id": "manufactory_1", "query": "SELECT avg(T1.Price) ,  T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code GROUP BY T2.name", "query_toks": ["SELECT", "avg", "(", "T1.Price", ")", ",", "T2.name", "FROM", "products", "AS", "T1", "JOIN", "Manufacturers", "AS", "T2", "ON", "T1.manufacturer", "=", "T2.code", "GROUP", "BY", "T2.name"], "query_toks_no_value": ["select", "avg", "(", "t1", ".", "price", ")", ",", "t2", ".", "name", "from", "products", "as", "t1", "join", "manufacturers", "as", "t2", "on", "t1", ".", "manufacturer", "=", "t2", ".", "code", "group", "by", "t2", ".", "name"], "question": "Select the average price of each manufacturer's products, showing the manufacturer's name.", "question_toks": ["Select", "the", "average", "price", "of", "each", "manufacturer", "'s", "products", ",", "showing", "the", "manufacturer", "'s", "name", "."], "guid": 827}}
{"text": "Manufacturers: Code, Name, Headquarter, Founder, Revenue; Products: Code, Name, Price, Manufacturer | Find the founder of the company whose name begins with the letter 'S'.", "sql": "SELECT founder FROM manufacturers WHERE name LIKE 'S%'", "example": {"db_id": "manufactory_1", "query": "SELECT founder FROM manufacturers WHERE name LIKE 'S%'", "query_toks": ["SELECT", "founder", "FROM", "manufacturers", "WHERE", "name", "LIKE", "'S", "%", "'"], "query_toks_no_value": ["select", "founder", "from", "manufacturers", "where", "name", "like", "value"], "question": "Find the founder of the company whose name begins with the letter 'S'.", "question_toks": ["Find", "the", "founder", "of", "the", "company", "whose", "name", "begins", "with", "the", "letter", "'S", "'", "."], "guid": 828}}
{"text": "company: Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value; gas_station: Station_ID, Open_Year, Location, Manager_Name, Vice_Manager_Name, Representative_Name; station_company: Station_ID, Company_ID, Rank_of_the_Year | What are the different main industries for all companies?", "sql": "SELECT DISTINCT main_industry FROM company", "example": {"db_id": "gas_company", "query": "SELECT DISTINCT main_industry FROM company", "query_toks": ["SELECT", "DISTINCT", "main_industry", "FROM", "company"], "query_toks_no_value": ["select", "distinct", "main_industry", "from", "company"], "question": "What are the different main industries for all companies?", "question_toks": ["What", "are", "the", "different", "main", "industries", "for", "all", "companies", "?"], "guid": 829}}