{"text": "chip_model: Model_name, Launch_year, RAM_MiB, ROM_MiB, Slots, WiFi, Bluetooth; screen_mode: Graphics_mode, Char_cells, Pixels, Hardware_colours, used_kb, map, Type; phone: Company_name, Hardware_Model_name, Accreditation_type, Accreditation_level, Date, chip_model, screen_mode | What are the wifi and screen mode type of the hardware model named \"LG-P760\"?", "sql": "SELECT T1.WiFi , T3.Type FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model JOIN screen_mode AS T3 ON T2.screen_mode = T3.Graphics_mode WHERE T2.Hardware_Model_name = \"LG-P760\";", "example": {"db_id": "phone_1", "query": "SELECT T1.WiFi , T3.Type FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model JOIN screen_mode AS T3 ON T2.screen_mode = T3.Graphics_mode WHERE T2.Hardware_Model_name = \"LG-P760\";", "query_toks": ["SELECT", "T1.WiFi", ",", "T3.Type", "FROM", "chip_model", "AS", "T1", "JOIN", "phone", "AS", "T2", "ON", "T1.Model_name", "=", "T2.chip_model", "JOIN", "screen_mode", "AS", "T3", "ON", "T2.screen_mode", "=", "T3.Graphics_mode", "WHERE", "T2.Hardware_Model_name", "=", "``", "LG-P760", "''", ";"], "query_toks_no_value": ["select", "t1", ".", "wifi", ",", "t3", ".", "type", "from", "chip_model", "as", "t1", "join", "phone", "as", "t2", "on", "t1", ".", "model_name", "=", "t2", ".", "chip_model", "join", "screen_mode", "as", "t3", "on", "t2", ".", "screen_mode", "=", "t3", ".", "graphics_mode", "where", "t2", ".", "hardware_model_name", "=", "value"], "question": "What are the wifi and screen mode type of the hardware model named \"LG-P760\"?", "question_toks": ["What", "are", "the", "wifi", "and", "screen", "mode", "type", "of", "the", "hardware", "model", "named", "``", "LG-P760", "''", "?"], "guid": 460}}
{"text": "continents: ContId, Continent; countries: CountryId, CountryName, Continent; car_makers: Id, Maker, FullName, Country; model_list: ModelId, Maker, Model; car_names: MakeId, Model, Make; cars_data: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year | What is the average miles per gallon of all the cards with 4 cylinders?", "sql": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;", "example": {"db_id": "car_1", "query": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;", "query_toks": ["SELECT", "avg", "(", "mpg", ")", "FROM", "CARS_DATA", "WHERE", "Cylinders", "=", "4", ";"], "query_toks_no_value": ["select", "avg", "(", "mpg", ")", "from", "cars_data", "where", "cylinders", "=", "value"], "question": "What is the average miles per gallon of all the cards with 4 cylinders?", "question_toks": ["What", "is", "the", "average", "miles", "per", "gallon", "of", "all", "the", "cards", "with", "4", "cylinders", "?"], "guid": 461}}
{"text": "manufacturer: Manufacturer_ID, Open_Year, Name, Num_of_Factories, Num_of_Shops; furniture: Furniture_ID, Name, Num_of_Component, Market_Rate; furniture_manufacte: Manufacturer_ID, Furniture_ID, Price_in_Dollar | find the total market rate of the furnitures that have the top 2 market shares.", "sql": "SELECT sum(market_rate) FROM furniture ORDER BY market_rate DESC LIMIT 2", "example": {"db_id": "manufacturer", "query": "SELECT sum(market_rate) FROM furniture ORDER BY market_rate DESC LIMIT 2", "query_toks": ["SELECT", "sum", "(", "market_rate", ")", "FROM", "furniture", "ORDER", "BY", "market_rate", "DESC", "LIMIT", "2"], "query_toks_no_value": ["select", "sum", "(", "market_rate", ")", "from", "furniture", "order", "by", "market_rate", "desc", "limit", "value"], "question": "find the total market rate of the furnitures that have the top 2 market shares.", "question_toks": ["find", "the", "total", "market", "rate", "of", "the", "furnitures", "that", "have", "the", "top", "2", "market", "shares", "."], "guid": 462}}
{"text": "continents: ContId, Continent; countries: CountryId, CountryName, Continent; car_makers: Id, Maker, FullName, Country; model_list: ModelId, Maker, Model; car_names: MakeId, Model, Make; cars_data: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year | Among the cars that do not have the minimum horsepower , what are the make ids and names of all those with less than 4 cylinders ?", "sql": "select t2.makeid ,  t2.make from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t1.horsepower  >  (select min(horsepower) from cars_data) and t1.cylinders  <  4;", "example": {"db_id": "car_1", "query": "select t2.makeid ,  t2.make from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t1.horsepower  >  (select min(horsepower) from cars_data) and t1.cylinders  <  4;", "query_toks": ["select", "t2.makeid", ",", "t2.make", "from", "cars_data", "as", "t1", "join", "car_names", "as", "t2", "on", "t1.id", "=", "t2.makeid", "where", "t1.horsepower", ">", "(", "select", "min", "(", "horsepower", ")", "from", "cars_data", ")", "and", "t1.cylinders", "<", "4", ";"], "query_toks_no_value": ["select", "t2", ".", "makeid", ",", "t2", ".", "make", "from", "cars_data", "as", "t1", "join", "car_names", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "makeid", "where", "t1", ".", "horsepower", ">", "(", "select", "min", "(", "horsepower", ")", "from", "cars_data", ")", "and", "t1", ".", "cylinders", "<", "value"], "question": "Among the cars that do not have the minimum horsepower , what are the make ids and names of all those with less than 4 cylinders ?", "question_toks": ["Among", "the", "cars", "that", "do", "not", "have", "the", "minimum", "horsepower", ",", "what", "are", "the", "make", "ids", "and", "names", "of", "all", "those", "with", "less", "than", "4", "cylinders", "?"], "guid": 463}}
{"text": "Manufacturers: Code, Name, Headquarter, Founder, Revenue; Products: Code, Name, Price, Manufacturer | Return the average, maximum, and total revenues across all manufacturers.", "sql": "SELECT avg(revenue) ,  max(revenue) ,  sum(revenue) FROM manufacturers", "example": {"db_id": "manufactory_1", "query": "SELECT avg(revenue) ,  max(revenue) ,  sum(revenue) FROM manufacturers", "query_toks": ["SELECT", "avg", "(", "revenue", ")", ",", "max", "(", "revenue", ")", ",", "sum", "(", "revenue", ")", "FROM", "manufacturers"], "query_toks_no_value": ["select", "avg", "(", "revenue", ")", ",", "max", "(", "revenue", ")", ",", "sum", "(", "revenue", ")", "from", "manufacturers"], "question": "Return the average, maximum, and total revenues across all manufacturers.", "question_toks": ["Return", "the", "average", ",", "maximum", ",", "and", "total", "revenues", "across", "all", "manufacturers", "."], "guid": 464}}
{"text": "Manufacturers: Code, Name, Headquarter, Founder, Revenue; Products: Code, Name, Price, Manufacturer | How many products are there for each manufacturer?", "sql": "SELECT count(*) ,  T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.name", "example": {"db_id": "manufactory_1", "query": "SELECT count(*) ,  T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.name", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "T2.name", "FROM", "products", "AS", "T1", "JOIN", "manufacturers", "AS", "T2", "ON", "T1.Manufacturer", "=", "T2.code", "GROUP", "BY", "T2.name"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "t2", ".", "name", "from", "products", "as", "t1", "join", "manufacturers", "as", "t2", "on", "t1", ".", "manufacturer", "=", "t2", ".", "code", "group", "by", "t2", ".", "name"], "question": "How many products are there for each manufacturer?", "question_toks": ["How", "many", "products", "are", "there", "for", "each", "manufacturer", "?"], "guid": 465}}
{"text": "regions: REGION_ID, REGION_NAME; countries: COUNTRY_ID, COUNTRY_NAME, REGION_ID; departments: DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID; jobs: JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY; employees: EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID; job_history: EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID; locations: LOCATION_ID, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_ID | display the employee name ( first name and last name ) and hire date for all employees in the same department as Clara excluding Clara.", "sql": "SELECT first_name ,  last_name ,  hire_date FROM employees WHERE department_id  =  ( SELECT department_id FROM employees WHERE first_name  =  \"Clara\") AND first_name != \"Clara\"", "example": {"db_id": "hr_1", "query": "SELECT first_name ,  last_name ,  hire_date FROM employees WHERE department_id  =  ( SELECT department_id FROM employees WHERE first_name  =  \"Clara\") AND first_name != \"Clara\"", "query_toks": ["SELECT", "first_name", ",", "last_name", ",", "hire_date", "FROM", "employees", "WHERE", "department_id", "=", "(", "SELECT", "department_id", "FROM", "employees", "WHERE", "first_name", "=", "``", "Clara", "''", ")", "AND", "first_name", "!", "=", "``", "Clara", "''"], "query_toks_no_value": ["select", "first_name", ",", "last_name", ",", "hire_date", "from", "employees", "where", "department_id", "=", "(", "select", "department_id", "from", "employees", "where", "first_name", "=", "value", ")", "and", "first_name", "!", "=", "value"], "question": "display the employee name ( first name and last name ) and hire date for all employees in the same department as Clara excluding Clara.", "question_toks": ["display", "the", "employee", "name", "(", "first", "name", "and", "last", "name", ")", "and", "hire", "date", "for", "all", "employees", "in", "the", "same", "department", "as", "Clara", "excluding", "Clara", "."], "guid": 466}}
{"text": "chip_model: Model_name, Launch_year, RAM_MiB, ROM_MiB, Slots, WiFi, Bluetooth; screen_mode: Graphics_mode, Char_cells, Pixels, Hardware_colours, used_kb, map, Type; phone: Company_name, Hardware_Model_name, Accreditation_type, Accreditation_level, Date, chip_model, screen_mode | List the phone hardware model and company name for the phones whose screen usage in kb is between 10 and 15.", "sql": "SELECT DISTINCT T2.Hardware_Model_name , T2.Company_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.used_kb BETWEEN 10 AND 15;", "example": {"db_id": "phone_1", "query": "SELECT DISTINCT T2.Hardware_Model_name , T2.Company_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.used_kb BETWEEN 10 AND 15;", "query_toks": ["SELECT", "DISTINCT", "T2.Hardware_Model_name", ",", "T2.Company_name", "FROM", "screen_mode", "AS", "T1", "JOIN", "phone", "AS", "T2", "ON", "T1.Graphics_mode", "=", "T2.screen_mode", "WHERE", "T1.used_kb", "BETWEEN", "10", "AND", "15", ";"], "query_toks_no_value": ["select", "distinct", "t2", ".", "hardware_model_name", ",", "t2", ".", "company_name", "from", "screen_mode", "as", "t1", "join", "phone", "as", "t2", "on", "t1", ".", "graphics_mode", "=", "t2", ".", "screen_mode", "where", "t1", ".", "used_kb", "between", "value", "and", "value"], "question": "List the phone hardware model and company name for the phones whose screen usage in kb is between 10 and 15.", "question_toks": ["List", "the", "phone", "hardware", "model", "and", "company", "name", "for", "the", "phones", "whose", "screen", "usage", "in", "kb", "is", "between", "10", "and", "15", "."], "guid": 467}}
{"text": "continents: ContId, Continent; countries: CountryId, CountryName, Continent; car_makers: Id, Maker, FullName, Country; model_list: ModelId, Maker, Model; car_names: MakeId, Model, Make; cars_data: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year | What is the number of carsw ith over 6 cylinders?", "sql": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;", "example": {"db_id": "car_1", "query": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;", "query_toks": ["SELECT", "COUNT", "(", "*", ")", "FROM", "CARS_DATA", "WHERE", "Cylinders", ">", "6", ";"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "cars_data", "where", "cylinders", ">", "value"], "question": "What is the number of carsw ith over 6 cylinders?", "question_toks": ["What", "is", "the", "number", "of", "carsw", "ith", "over", "6", "cylinders", "?"], "guid": 468}}
{"text": "company: Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value; gas_station: Station_ID, Open_Year, Location, Manager_Name, Vice_Manager_Name, Representative_Name; station_company: Station_ID, Company_ID, Rank_of_the_Year | List all headquarters and the number of companies in each headquarter.", "sql": "SELECT headquarters ,  count(*) FROM company GROUP BY headquarters", "example": {"db_id": "gas_company", "query": "SELECT headquarters ,  count(*) FROM company GROUP BY headquarters", "query_toks": ["SELECT", "headquarters", ",", "count", "(", "*", ")", "FROM", "company", "GROUP", "BY", "headquarters"], "query_toks_no_value": ["select", "headquarters", ",", "count", "(", "*", ")", "from", "company", "group", "by", "headquarters"], "question": "List all headquarters and the number of companies in each headquarter.", "question_toks": ["List", "all", "headquarters", "and", "the", "number", "of", "companies", "in", "each", "headquarter", "."], "guid": 469}}
{"text": "regions: REGION_ID, REGION_NAME; countries: COUNTRY_ID, COUNTRY_NAME, REGION_ID; departments: DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID; jobs: JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY; employees: EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID; job_history: EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID; locations: LOCATION_ID, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_ID | What are the job ids for jobs done more than once for a period of more than 300 days?", "sql": "SELECT job_id FROM job_history WHERE end_date - start_date  > 300 GROUP BY job_id HAVING COUNT(*) >= 2", "example": {"db_id": "hr_1", "query": "SELECT job_id FROM job_history WHERE end_date - start_date  > 300 GROUP BY job_id HAVING COUNT(*) >= 2", "query_toks": ["SELECT", "job_id", "FROM", "job_history", "WHERE", "end_date", "-", "start_date", ">", "300", "GROUP", "BY", "job_id", "HAVING", "COUNT", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "job_id", "from", "job_history", "where", "end_date", "-", "start_date", ">", "value", "group", "by", "job_id", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "What are the job ids for jobs done more than once for a period of more than 300 days?", "question_toks": ["What", "are", "the", "job", "ids", "for", "jobs", "done", "more", "than", "once", "for", "a", "period", "of", "more", "than", "300", "days", "?"], "guid": 470}}
{"text": "chip_model: Model_name, Launch_year, RAM_MiB, ROM_MiB, Slots, WiFi, Bluetooth; screen_mode: Graphics_mode, Char_cells, Pixels, Hardware_colours, used_kb, map, Type; phone: Company_name, Hardware_Model_name, Accreditation_type, Accreditation_level, Date, chip_model, screen_mode | Find all phones that have word 'Full' in their accreditation types. List the Hardware Model name and Company name.", "sql": "SELECT Hardware_Model_name ,  Company_name FROM phone WHERE Accreditation_type LIKE 'Full';", "example": {"db_id": "phone_1", "query": "SELECT Hardware_Model_name ,  Company_name FROM phone WHERE Accreditation_type LIKE 'Full';", "query_toks": ["SELECT", "Hardware_Model_name", ",", "Company_name", "FROM", "phone", "WHERE", "Accreditation_type", "LIKE", "'Full", "'", ";"], "query_toks_no_value": ["select", "hardware_model_name", ",", "company_name", "from", "phone", "where", "accreditation_type", "like", "value"], "question": "Find all phones that have word 'Full' in their accreditation types. List the Hardware Model name and Company name.", "question_toks": ["Find", "all", "phones", "that", "have", "word", "'Full", "'", "in", "their", "accreditation", "types", ".", "List", "the", "Hardware", "Model", "name", "and", "Company", "name", "."], "guid": 471}}
{"text": "member: Member_ID, Name, Nationality, Role; performance: Performance_ID, Date, Host, Location, Attendance; member_attendance: Member_ID, Performance_ID, Num_of_Pieces | Show the locations that have both performances with more than 2000 attendees and performances with less than 1000 attendees.", "sql": "SELECT LOCATION FROM performance WHERE Attendance  >  2000 INTERSECT SELECT LOCATION FROM performance WHERE Attendance  <  1000", "example": {"db_id": "performance_attendance", "query": "SELECT LOCATION FROM performance WHERE Attendance  >  2000 INTERSECT SELECT LOCATION FROM performance WHERE Attendance  <  1000", "query_toks": ["SELECT", "LOCATION", "FROM", "performance", "WHERE", "Attendance", ">", "2000", "INTERSECT", "SELECT", "LOCATION", "FROM", "performance", "WHERE", "Attendance", "<", "1000"], "query_toks_no_value": ["select", "location", "from", "performance", "where", "attendance", ">", "value", "intersect", "select", "location", "from", "performance", "where", "attendance", "<", "value"], "question": "Show the locations that have both performances with more than 2000 attendees and performances with less than 1000 attendees.", "question_toks": ["Show", "the", "locations", "that", "have", "both", "performances", "with", "more", "than", "2000", "attendees", "and", "performances", "with", "less", "than", "1000", "attendees", "."], "guid": 472}}
{"text": "employee: Employee_ID, Name, Age, City; shop: Shop_ID, Name, Location, District, Number_products, Manager_name; hiring: Shop_ID, Employee_ID, Start_from, Is_full_time; evaluation: Employee_ID, Year_awarded, Bonus | Count the number of employees for each city.", "sql": "SELECT count(*) ,  city FROM employee GROUP BY city", "example": {"db_id": "employee_hire_evaluation", "query": "SELECT count(*) ,  city FROM employee GROUP BY city", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "city", "FROM", "employee", "GROUP", "BY", "city"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "city", "from", "employee", "group", "by", "city"], "question": "Count the number of employees for each city.", "question_toks": ["Count", "the", "number", "of", "employees", "for", "each", "city", "."], "guid": 473}}
{"text": "chip_model: Model_name, Launch_year, RAM_MiB, ROM_MiB, Slots, WiFi, Bluetooth; screen_mode: Graphics_mode, Char_cells, Pixels, Hardware_colours, used_kb, map, Type; phone: Company_name, Hardware_Model_name, Accreditation_type, Accreditation_level, Date, chip_model, screen_mode | What is the average ROM size of phones produced by the company named \"Nokia Corporation\"?", "sql": "SELECT avg(T1.ROM_MiB) FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T2.Company_name = \"Nokia Corporation\";", "example": {"db_id": "phone_1", "query": "SELECT avg(T1.ROM_MiB) FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T2.Company_name = \"Nokia Corporation\";", "query_toks": ["SELECT", "avg", "(", "T1.ROM_MiB", ")", "FROM", "chip_model", "AS", "T1", "JOIN", "phone", "AS", "T2", "ON", "T1.Model_name", "=", "T2.chip_model", "WHERE", "T2.Company_name", "=", "``", "Nokia", "Corporation", "''", ";"], "query_toks_no_value": ["select", "avg", "(", "t1", ".", "rom_mib", ")", "from", "chip_model", "as", "t1", "join", "phone", "as", "t2", "on", "t1", ".", "model_name", "=", "t2", ".", "chip_model", "where", "t2", ".", "company_name", "=", "value"], "question": "What is the average ROM size of phones produced by the company named \"Nokia Corporation\"?", "question_toks": ["What", "is", "the", "average", "ROM", "size", "of", "phones", "produced", "by", "the", "company", "named", "``", "Nokia", "Corporation", "''", "?"], "guid": 474}}
{"text": "regions: REGION_ID, REGION_NAME; countries: COUNTRY_ID, COUNTRY_NAME, REGION_ID; departments: DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID; jobs: JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY; employees: EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID; job_history: EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID; locations: LOCATION_ID, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_ID | What are the full names and salaries for any employees earning less than 6000?", "sql": "SELECT first_name ,  last_name ,  salary FROM employees WHERE salary  <  6000", "example": {"db_id": "hr_1", "query": "SELECT first_name ,  last_name ,  salary FROM employees WHERE salary  <  6000", "query_toks": ["SELECT", "first_name", ",", "last_name", ",", "salary", "FROM", "employees", "WHERE", "salary", "<", "6000"], "query_toks_no_value": ["select", "first_name", ",", "last_name", ",", "salary", "from", "employees", "where", "salary", "<", "value"], "question": "What are the full names and salaries for any employees earning less than 6000?", "question_toks": ["What", "are", "the", "full", "names", "and", "salaries", "for", "any", "employees", "earning", "less", "than", "6000", "?"], "guid": 475}}
{"text": "phone: Name, Phone_ID, Memory_in_G, Carrier, Price; market: Market_ID, District, Num_of_employees, Num_of_shops, Ranking; phone_market: Market_ID, Phone_ID, Num_of_stock | What is the carrier of the most expensive phone?", "sql": "SELECT Carrier FROM phone ORDER BY Price DESC LIMIT 1", "example": {"db_id": "phone_market", "query": "SELECT Carrier FROM phone ORDER BY Price DESC LIMIT 1", "query_toks": ["SELECT", "Carrier", "FROM", "phone", "ORDER", "BY", "Price", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "carrier", "from", "phone", "order", "by", "price", "desc", "limit", "value"], "question": "What is the carrier of the most expensive phone?", "question_toks": ["What", "is", "the", "carrier", "of", "the", "most", "expensive", "phone", "?"], "guid": 476}}
{"text": "people: People_ID, Age, Name, Nationality, Graduation_College; company: Company_ID, Name, Headquarters, Industry, Sales_in_Billion, Profits_in_Billion, Assets_in_Billion, Market_Value_in_Billion; employment: Company_ID, People_ID, Year_working | list the names of the companies with more than 200 sales in the descending order of sales and profits.", "sql": "SELECT name FROM company WHERE Sales_in_Billion  >  200 ORDER BY Sales_in_Billion ,  Profits_in_Billion DESC", "example": {"db_id": "company_employee", "query": "SELECT name FROM company WHERE Sales_in_Billion  >  200 ORDER BY Sales_in_Billion ,  Profits_in_Billion DESC", "query_toks": ["SELECT", "name", "FROM", "company", "WHERE", "Sales_in_Billion", ">", "200", "ORDER", "BY", "Sales_in_Billion", ",", "Profits_in_Billion", "DESC"], "query_toks_no_value": ["select", "name", "from", "company", "where", "sales_in_billion", ">", "value", "order", "by", "sales_in_billion", ",", "profits_in_billion", "desc"], "question": "list the names of the companies with more than 200 sales in the descending order of sales and profits.", "question_toks": ["list", "the", "names", "of", "the", "companies", "with", "more", "than", "200", "sales", "in", "the", "descending", "order", "of", "sales", "and", "profits", "."], "guid": 477}}
{"text": "Manufacturers: Code, Name, Headquarter, Founder, Revenue; Products: Code, Name, Price, Manufacturer | Find the number of manufactures that are based in Tokyo or Beijing.", "sql": "SELECT count(*) FROM manufacturers WHERE headquarter  =  'Tokyo' OR headquarter  =  'Beijing'", "example": {"db_id": "manufactory_1", "query": "SELECT count(*) FROM manufacturers WHERE headquarter  =  'Tokyo' OR headquarter  =  'Beijing'", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "manufacturers", "WHERE", "headquarter", "=", "'Tokyo", "'", "OR", "headquarter", "=", "'Beijing", "'"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "manufacturers", "where", "headquarter", "=", "value", "or", "headquarter", "=", "value"], "question": "Find the number of manufactures that are based in Tokyo or Beijing.", "question_toks": ["Find", "the", "number", "of", "manufactures", "that", "are", "based", "in", "Tokyo", "or", "Beijing", "."], "guid": 478}}
{"text": "continents: ContId, Continent; countries: CountryId, CountryName, Continent; car_makers: Id, Maker, FullName, Country; model_list: ModelId, Maker, Model; car_names: MakeId, Model, Make; cars_data: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year | What is the number of continents?", "sql": "SELECT count(*) FROM CONTINENTS;", "example": {"db_id": "car_1", "query": "SELECT count(*) FROM CONTINENTS;", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "CONTINENTS", ";"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "continents"], "question": "What is the number of continents?", "question_toks": ["What", "is", "the", "number", "of", "continents", "?"], "guid": 479}}
{"text": "Manufacturers: Code, Name, Headquarter, Founder, Revenue; Products: Code, Name, Price, Manufacturer | How many manufacturers have headquarters in either Tokyo or Beijing?", "sql": "SELECT count(*) FROM manufacturers WHERE headquarter  =  'Tokyo' OR headquarter  =  'Beijing'", "example": {"db_id": "manufactory_1", "query": "SELECT count(*) FROM manufacturers WHERE headquarter  =  'Tokyo' OR headquarter  =  'Beijing'", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "manufacturers", "WHERE", "headquarter", "=", "'Tokyo", "'", "OR", "headquarter", "=", "'Beijing", "'"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "manufacturers", "where", "headquarter", "=", "value", "or", "headquarter", "=", "value"], "question": "How many manufacturers have headquarters in either Tokyo or Beijing?", "question_toks": ["How", "many", "manufacturers", "have", "headquarters", "in", "either", "Tokyo", "or", "Beijing", "?"], "guid": 480}}
{"text": "regions: REGION_ID, REGION_NAME; countries: COUNTRY_ID, COUNTRY_NAME, REGION_ID; departments: DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID; jobs: JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY; employees: EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID; job_history: EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID; locations: LOCATION_ID, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_ID | display job title and average salary of employees.", "sql": "SELECT job_title ,  AVG(salary) FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id  =  T2.job_id GROUP BY T2.job_title", "example": {"db_id": "hr_1", "query": "SELECT job_title ,  AVG(salary) FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id  =  T2.job_id GROUP BY T2.job_title", "query_toks": ["SELECT", "job_title", ",", "AVG", "(", "salary", ")", "FROM", "employees", "AS", "T1", "JOIN", "jobs", "AS", "T2", "ON", "T1.job_id", "=", "T2.job_id", "GROUP", "BY", "T2.job_title"], "query_toks_no_value": ["select", "job_title", ",", "avg", "(", "salary", ")", "from", "employees", "as", "t1", "join", "jobs", "as", "t2", "on", "t1", ".", "job_id", "=", "t2", ".", "job_id", "group", "by", "t2", ".", "job_title"], "question": "display job title and average salary of employees.", "question_toks": ["display", "job", "title", "and", "average", "salary", "of", "employees", "."], "guid": 481}}
{"text": "continents: ContId, Continent; countries: CountryId, CountryName, Continent; car_makers: Id, Maker, FullName, Country; model_list: ModelId, Maker, Model; car_names: MakeId, Model, Make; cars_data: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year | What is the average weight and year for each year?", "sql": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;", "example": {"db_id": "car_1", "query": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;", "query_toks": ["SELECT", "avg", "(", "Weight", ")", ",", "YEAR", "FROM", "CARS_DATA", "GROUP", "BY", "YEAR", ";"], "query_toks_no_value": ["select", "avg", "(", "weight", ")", ",", "year", "from", "cars_data", "group", "by", "year"], "question": "What is the average weight and year for each year?", "question_toks": ["What", "is", "the", "average", "weight", "and", "year", "for", "each", "year", "?"], "guid": 482}}
{"text": "regions: REGION_ID, REGION_NAME; countries: COUNTRY_ID, COUNTRY_NAME, REGION_ID; departments: DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID; jobs: JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY; employees: EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID; job_history: EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID; locations: LOCATION_ID, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_ID | What is all the job history info done by employees earning a salary greater than or equal to 12000?", "sql": "SELECT * FROM  job_history AS T1 JOIN employees AS T2 ON T1.employee_id  =  T2.employee_id WHERE T2.salary  >=  12000", "example": {"db_id": "hr_1", "query": "SELECT * FROM  job_history AS T1 JOIN employees AS T2 ON T1.employee_id  =  T2.employee_id WHERE T2.salary  >=  12000", "query_toks": ["SELECT", "*", "FROM", "job_history", "AS", "T1", "JOIN", "employees", "AS", "T2", "ON", "T1.employee_id", "=", "T2.employee_id", "WHERE", "T2.salary", ">", "=", "12000"], "query_toks_no_value": ["select", "*", "from", "job_history", "as", "t1", "join", "employees", "as", "t2", "on", "t1", ".", "employee_id", "=", "t2", ".", "employee_id", "where", "t2", ".", "salary", ">", "=", "value"], "question": "What is all the job history info done by employees earning a salary greater than or equal to 12000?", "question_toks": ["What", "is", "all", "the", "job", "history", "info", "done", "by", "employees", "earning", "a", "salary", "greater", "than", "or", "equal", "to", "12000", "?"], "guid": 483}}
{"text": "regions: REGION_ID, REGION_NAME; countries: COUNTRY_ID, COUNTRY_NAME, REGION_ID; departments: DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID; jobs: JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY; employees: EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID; job_history: EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID; locations: LOCATION_ID, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_ID | what are the employee ids and job titles for employees in department 80?", "sql": "SELECT T1.employee_id ,  T2.job_title FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id  =  T2.job_id WHERE T1.department_id = 80", "example": {"db_id": "hr_1", "query": "SELECT T1.employee_id ,  T2.job_title FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id  =  T2.job_id WHERE T1.department_id = 80", "query_toks": ["SELECT", "T1.employee_id", ",", "T2.job_title", "FROM", "employees", "AS", "T1", "JOIN", "jobs", "AS", "T2", "ON", "T1.job_id", "=", "T2.job_id", "WHERE", "T1.department_id", "=", "80"], "query_toks_no_value": ["select", "t1", ".", "employee_id", ",", "t2", ".", "job_title", "from", "employees", "as", "t1", "join", "jobs", "as", "t2", "on", "t1", ".", "job_id", "=", "t2", ".", "job_id", "where", "t1", ".", "department_id", "=", "value"], "question": "what are the employee ids and job titles for employees in department 80?", "question_toks": ["what", "are", "the", "employee", "ids", "and", "job", "titles", "for", "employees", "in", "department", "80", "?"], "guid": 484}}
{"text": "Manufacturers: Code, Name, Headquarter, Founder, Revenue; Products: Code, Name, Price, Manufacturer | Return the founder of Sony.", "sql": "SELECT founder FROM manufacturers WHERE name  =  'Sony'", "example": {"db_id": "manufactory_1", "query": "SELECT founder FROM manufacturers WHERE name  =  'Sony'", "query_toks": ["SELECT", "founder", "FROM", "manufacturers", "WHERE", "name", "=", "'Sony", "'"], "query_toks_no_value": ["select", "founder", "from", "manufacturers", "where", "name", "=", "value"], "question": "Return the founder of Sony.", "question_toks": ["Return", "the", "founder", "of", "Sony", "."], "guid": 485}}
{"text": "Manufacturers: Code, Name, Headquarter, Founder, Revenue; Products: Code, Name, Price, Manufacturer | How many products are not made by Sony?", "sql": "SELECT count(DISTINCT name) FROM products WHERE name NOT IN (SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  'Sony')", "example": {"db_id": "manufactory_1", "query": "SELECT count(DISTINCT name) FROM products WHERE name NOT IN (SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  'Sony')", "query_toks": ["SELECT", "count", "(", "DISTINCT", "name", ")", "FROM", "products", "WHERE", "name", "NOT", "IN", "(", "SELECT", "T1.name", "FROM", "products", "AS", "T1", "JOIN", "manufacturers", "AS", "T2", "ON", "T1.Manufacturer", "=", "T2.code", "WHERE", "T2.name", "=", "'Sony", "'", ")"], "query_toks_no_value": ["select", "count", "(", "distinct", "name", ")", "from", "products", "where", "name", "not", "in", "(", "select", "t1", ".", "name", "from", "products", "as", "t1", "join", "manufacturers", "as", "t2", "on", "t1", ".", "manufacturer", "=", "t2", ".", "code", "where", "t2", ".", "name", "=", "value", ")"], "question": "How many products are not made by Sony?", "question_toks": ["How", "many", "products", "are", "not", "made", "by", "Sony", "?"], "guid": 486}}
{"text": "Manufacturers: Code, Name, Headquarter, Founder, Revenue; Products: Code, Name, Price, Manufacturer | What is the total revenue of all companies whose main office is at Tokyo or Taiwan?", "sql": "SELECT sum(revenue) FROM manufacturers WHERE Headquarter  =  'Tokyo' OR Headquarter  =  'Taiwan'", "example": {"db_id": "manufactory_1", "query": "SELECT sum(revenue) FROM manufacturers WHERE Headquarter  =  'Tokyo' OR Headquarter  =  'Taiwan'", "query_toks": ["SELECT", "sum", "(", "revenue", ")", "FROM", "manufacturers", "WHERE", "Headquarter", "=", "'Tokyo", "'", "OR", "Headquarter", "=", "'Taiwan", "'"], "query_toks_no_value": ["select", "sum", "(", "revenue", ")", "from", "manufacturers", "where", "headquarter", "=", "value", "or", "headquarter", "=", "value"], "question": "What is the total revenue of all companies whose main office is at Tokyo or Taiwan?", "question_toks": ["What", "is", "the", "total", "revenue", "of", "all", "companies", "whose", "main", "office", "is", "at", "Tokyo", "or", "Taiwan", "?"], "guid": 487}}
{"text": "Manufacturers: Code, Name, Headquarter, Founder, Revenue; Products: Code, Name, Price, Manufacturer | Who is the founder of Sony?", "sql": "SELECT founder FROM manufacturers WHERE name  =  'Sony'", "example": {"db_id": "manufactory_1", "query": "SELECT founder FROM manufacturers WHERE name  =  'Sony'", "query_toks": ["SELECT", "founder", "FROM", "manufacturers", "WHERE", "name", "=", "'Sony", "'"], "query_toks_no_value": ["select", "founder", "from", "manufacturers", "where", "name", "=", "value"], "question": "Who is the founder of Sony?", "question_toks": ["Who", "is", "the", "founder", "of", "Sony", "?"], "guid": 488}}
{"text": "company: Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value; gas_station: Station_ID, Open_Year, Location, Manager_Name, Vice_Manager_Name, Representative_Name; station_company: Station_ID, Company_ID, Rank_of_the_Year | What are the names and headquarters of all companies ordered by descending market value?", "sql": "SELECT company ,  headquarters FROM company ORDER BY market_value DESC", "example": {"db_id": "gas_company", "query": "SELECT company ,  headquarters FROM company ORDER BY market_value DESC", "query_toks": ["SELECT", "company", ",", "headquarters", "FROM", "company", "ORDER", "BY", "market_value", "DESC"], "query_toks_no_value": ["select", "company", ",", "headquarters", "from", "company", "order", "by", "market_value", "desc"], "question": "What are the names and headquarters of all companies ordered by descending market value?", "question_toks": ["What", "are", "the", "names", "and", "headquarters", "of", "all", "companies", "ordered", "by", "descending", "market", "value", "?"], "guid": 489}}
{"text": "people: People_ID, Age, Name, Nationality, Graduation_College; company: Company_ID, Name, Headquarters, Industry, Sales_in_Billion, Profits_in_Billion, Assets_in_Billion, Market_Value_in_Billion; employment: Company_ID, People_ID, Year_working | Show the different headquarters and number of companies at each headquarter.", "sql": "SELECT Headquarters ,  COUNT(*) FROM company GROUP BY Headquarters", "example": {"db_id": "company_employee", "query": "SELECT Headquarters ,  COUNT(*) FROM company GROUP BY Headquarters", "query_toks": ["SELECT", "Headquarters", ",", "COUNT", "(", "*", ")", "FROM", "company", "GROUP", "BY", "Headquarters"], "query_toks_no_value": ["select", "headquarters", ",", "count", "(", "*", ")", "from", "company", "group", "by", "headquarters"], "question": "Show the different headquarters and number of companies at each headquarter.", "question_toks": ["Show", "the", "different", "headquarters", "and", "number", "of", "companies", "at", "each", "headquarter", "."], "guid": 490}}
{"text": "regions: REGION_ID, REGION_NAME; countries: COUNTRY_ID, COUNTRY_NAME, REGION_ID; departments: DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID; jobs: JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY; employees: EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID; job_history: EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID; locations: LOCATION_ID, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_ID | display the job title of jobs which minimum salary is greater than 9000.", "sql": "SELECT job_title FROM jobs WHERE min_salary  >  9000", "example": {"db_id": "hr_1", "query": "SELECT job_title FROM jobs WHERE min_salary  >  9000", "query_toks": ["SELECT", "job_title", "FROM", "jobs", "WHERE", "min_salary", ">", "9000"], "query_toks_no_value": ["select", "job_title", "from", "jobs", "where", "min_salary", ">", "value"], "question": "display the job title of jobs which minimum salary is greater than 9000.", "question_toks": ["display", "the", "job", "title", "of", "jobs", "which", "minimum", "salary", "is", "greater", "than", "9000", "."], "guid": 491}}
{"text": "Manufacturers: Code, Name, Headquarter, Founder, Revenue; Products: Code, Name, Price, Manufacturer | What is the average price across all products?", "sql": "SELECT avg(price) FROM products", "example": {"db_id": "manufactory_1", "query": "SELECT avg(price) FROM products", "query_toks": ["SELECT", "avg", "(", "price", ")", "FROM", "products"], "query_toks_no_value": ["select", "avg", "(", "price", ")", "from", "products"], "question": "What is the average price across all products?", "question_toks": ["What", "is", "the", "average", "price", "across", "all", "products", "?"], "guid": 492}}
{"text": "people: People_ID, Age, Name, Nationality, Graduation_College; company: Company_ID, Name, Headquarters, Industry, Sales_in_Billion, Profits_in_Billion, Assets_in_Billion, Market_Value_in_Billion; employment: Company_ID, People_ID, Year_working | Show the names of companies and of employees.", "sql": "SELECT T3.Name ,  T2.Name FROM employment AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID JOIN company AS T3 ON T1.Company_ID  =  T3.Company_ID", "example": {"db_id": "company_employee", "query": "SELECT T3.Name ,  T2.Name FROM employment AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID JOIN company AS T3 ON T1.Company_ID  =  T3.Company_ID", "query_toks": ["SELECT", "T3.Name", ",", "T2.Name", "FROM", "employment", "AS", "T1", "JOIN", "people", "AS", "T2", "ON", "T1.People_ID", "=", "T2.People_ID", "JOIN", "company", "AS", "T3", "ON", "T1.Company_ID", "=", "T3.Company_ID"], "query_toks_no_value": ["select", "t3", ".", "name", ",", "t2", ".", "name", "from", "employment", "as", "t1", "join", "people", "as", "t2", "on", "t1", ".", "people_id", "=", "t2", ".", "people_id", "join", "company", "as", "t3", "on", "t1", ".", "company_id", "=", "t3", ".", "company_id"], "question": "Show the names of companies and of employees.", "question_toks": ["Show", "the", "names", "of", "companies", "and", "of", "employees", "."], "guid": 493}}
{"text": "regions: REGION_ID, REGION_NAME; countries: COUNTRY_ID, COUNTRY_NAME, REGION_ID; departments: DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID; jobs: JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY; employees: EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID; job_history: EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID; locations: LOCATION_ID, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_ID | What are the salaries and manager ids for employees who have managers?", "sql": "SELECT salary ,  manager_id FROM employees WHERE manager_id != \"null\"", "example": {"db_id": "hr_1", "query": "SELECT salary ,  manager_id FROM employees WHERE manager_id != \"null\"", "query_toks": ["SELECT", "salary", ",", "manager_id", "FROM", "employees", "WHERE", "manager_id", "!", "=", "``", "null", "''"], "query_toks_no_value": ["select", "salary", ",", "manager_id", "from", "employees", "where", "manager_id", "!", "=", "value"], "question": "What are the salaries and manager ids for employees who have managers?", "question_toks": ["What", "are", "the", "salaries", "and", "manager", "ids", "for", "employees", "who", "have", "managers", "?"], "guid": 494}}
{"text": "member: Member_ID, Name, Nationality, Role; performance: Performance_ID, Date, Host, Location, Attendance; member_attendance: Member_ID, Performance_ID, Num_of_Pieces | Show the names of members and the location of performances they attended in ascending alphabetical order of their names.", "sql": "SELECT T2.Name ,  T3.Location FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID  =  T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID  =  T3.Performance_ID ORDER BY T2.Name ASC", "example": {"db_id": "performance_attendance", "query": "SELECT T2.Name ,  T3.Location FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID  =  T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID  =  T3.Performance_ID ORDER BY T2.Name ASC", "query_toks": ["SELECT", "T2.Name", ",", "T3.Location", "FROM", "member_attendance", "AS", "T1", "JOIN", "member", "AS", "T2", "ON", "T1.Member_ID", "=", "T2.Member_ID", "JOIN", "performance", "AS", "T3", "ON", "T1.Performance_ID", "=", "T3.Performance_ID", "ORDER", "BY", "T2.Name", "ASC"], "query_toks_no_value": ["select", "t2", ".", "name", ",", "t3", ".", "location", "from", "member_attendance", "as", "t1", "join", "member", "as", "t2", "on", "t1", ".", "member_id", "=", "t2", ".", "member_id", "join", "performance", "as", "t3", "on", "t1", ".", "performance_id", "=", "t3", ".", "performance_id", "order", "by", "t2", ".", "name", "asc"], "question": "Show the names of members and the location of performances they attended in ascending alphabetical order of their names.", "question_toks": ["Show", "the", "names", "of", "members", "and", "the", "location", "of", "performances", "they", "attended", "in", "ascending", "alphabetical", "order", "of", "their", "names", "."], "guid": 495}}
{"text": "employee: Employee_ID, Name, Age, City; shop: Shop_ID, Name, Location, District, Number_products, Manager_name; hiring: Shop_ID, Employee_ID, Start_from, Is_full_time; evaluation: Employee_ID, Year_awarded, Bonus | Give me all the information about hiring.", "sql": "SELECT * FROM hiring", "example": {"db_id": "employee_hire_evaluation", "query": "SELECT * FROM hiring", "query_toks": ["SELECT", "*", "FROM", "hiring"], "query_toks_no_value": ["select", "*", "from", "hiring"], "question": "Give me all the information about hiring.", "question_toks": ["Give", "me", "all", "the", "information", "about", "hiring", "."], "guid": 496}}
{"text": "continents: ContId, Continent; countries: CountryId, CountryName, Continent; car_makers: Id, Maker, FullName, Country; model_list: ModelId, Maker, Model; car_names: MakeId, Model, Make; cars_data: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year | What is the horsepower of the car with the greatest accelerate?", "sql": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;", "example": {"db_id": "car_1", "query": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;", "query_toks": ["SELECT", "T1.horsepower", "FROM", "CARS_DATA", "AS", "T1", "ORDER", "BY", "T1.accelerate", "DESC", "LIMIT", "1", ";"], "query_toks_no_value": ["select", "t1", ".", "horsepower", "from", "cars_data", "as", "t1", "order", "by", "t1", ".", "accelerate", "desc", "limit", "value"], "question": "What is the horsepower of the car with the greatest accelerate?", "question_toks": ["What", "is", "the", "horsepower", "of", "the", "car", "with", "the", "greatest", "accelerate", "?"], "guid": 497}}
{"text": "Manufacturers: Code, Name, Headquarter, Founder, Revenue; Products: Code, Name, Price, Manufacturer | How many products have prices of at least 180?", "sql": "SELECT count(*) FROM products WHERE price >= 180", "example": {"db_id": "manufactory_1", "query": "SELECT count(*) FROM products WHERE price >= 180", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "products", "WHERE", "price", ">", "=", "180"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "products", "where", "price", ">", "=", "value"], "question": "How many products have prices of at least 180?", "question_toks": ["How", "many", "products", "have", "prices", "of", "at", "least", "180", "?"], "guid": 498}}
{"text": "works_on: Essn, Pno, Hours; employee: Fname, Minit, Lname, Ssn, Bdate, Address, Sex, Salary, Super_ssn, Dno; department: Dname, Dnumber, Mgr_ssn, Mgr_start_date; project: Pname, Pnumber, Plocation, Dnum; dependent: Essn, Dependent_name, Sex, Bdate, Relationship; dept_locations: Dnumber, Dlocation | list the first and last names, and the addresses of all employees in the ascending order of their birth date.", "sql": "SELECT fname ,  lname ,  address FROM employee ORDER BY Bdate", "example": {"db_id": "company_1", "query": "SELECT fname ,  lname ,  address FROM employee ORDER BY Bdate", "query_toks": ["SELECT", "fname", ",", "lname", ",", "address", "FROM", "employee", "ORDER", "BY", "Bdate"], "query_toks_no_value": ["select", "fname", ",", "lname", ",", "address", "from", "employee", "order", "by", "bdate"], "question": "list the first and last names, and the addresses of all employees in the ascending order of their birth date.", "question_toks": ["list", "the", "first", "and", "last", "names", ",", "and", "the", "addresses", "of", "all", "employees", "in", "the", "ascending", "order", "of", "their", "birth", "date", "."], "guid": 499}}
{"text": "continents: ContId, Continent; countries: CountryId, CountryName, Continent; car_makers: Id, Maker, FullName, Country; model_list: ModelId, Maker, Model; car_names: MakeId, Model, Make; cars_data: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year | How many cars has over 6 cylinders?", "sql": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;", "example": {"db_id": "car_1", "query": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;", "query_toks": ["SELECT", "COUNT", "(", "*", ")", "FROM", "CARS_DATA", "WHERE", "Cylinders", ">", "6", ";"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "cars_data", "where", "cylinders", ">", "value"], "question": "How many cars has over 6 cylinders?", "question_toks": ["How", "many", "cars", "has", "over", "6", "cylinders", "?"], "guid": 500}}
{"text": "continents: ContId, Continent; countries: CountryId, CountryName, Continent; car_makers: Id, Maker, FullName, Country; model_list: ModelId, Maker, Model; car_names: MakeId, Model, Make; cars_data: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year | For a volvo model, how many cylinders does the version with least accelerate have?", "sql": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;", "example": {"db_id": "car_1", "query": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;", "query_toks": ["SELECT", "T1.cylinders", "FROM", "CARS_DATA", "AS", "T1", "JOIN", "CAR_NAMES", "AS", "T2", "ON", "T1.Id", "=", "T2.MakeId", "WHERE", "T2.Model", "=", "'volvo", "'", "ORDER", "BY", "T1.accelerate", "ASC", "LIMIT", "1", ";"], "query_toks_no_value": ["select", "t1", ".", "cylinders", "from", "cars_data", "as", "t1", "join", "car_names", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "makeid", "where", "t2", ".", "model", "=", "value", "order", "by", "t1", ".", "accelerate", "asc", "limit", "value"], "question": "For a volvo model, how many cylinders does the version with least accelerate have?", "question_toks": ["For", "a", "volvo", "model", ",", "how", "many", "cylinders", "does", "the", "version", "with", "least", "accelerate", "have", "?"], "guid": 501}}
{"text": "Manufacturers: Code, Name, Headquarter, Founder, Revenue; Products: Code, Name, Price, Manufacturer | What are the average prices of products, grouped by manufacturer name?", "sql": "SELECT avg(T1.Price) ,  T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code GROUP BY T2.name", "example": {"db_id": "manufactory_1", "query": "SELECT avg(T1.Price) ,  T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code GROUP BY T2.name", "query_toks": ["SELECT", "avg", "(", "T1.Price", ")", ",", "T2.name", "FROM", "products", "AS", "T1", "JOIN", "Manufacturers", "AS", "T2", "ON", "T1.manufacturer", "=", "T2.code", "GROUP", "BY", "T2.name"], "query_toks_no_value": ["select", "avg", "(", "t1", ".", "price", ")", ",", "t2", ".", "name", "from", "products", "as", "t1", "join", "manufacturers", "as", "t2", "on", "t1", ".", "manufacturer", "=", "t2", ".", "code", "group", "by", "t2", ".", "name"], "question": "What are the average prices of products, grouped by manufacturer name?", "question_toks": ["What", "are", "the", "average", "prices", "of", "products", ",", "grouped", "by", "manufacturer", "name", "?"], "guid": 502}}
{"text": "employee: Employee_ID, Name, Age, City; shop: Shop_ID, Name, Location, District, Number_products, Manager_name; hiring: Shop_ID, Employee_ID, Start_from, Is_full_time; evaluation: Employee_ID, Year_awarded, Bonus | Find the cities that have more than one employee under age 30.", "sql": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1", "example": {"db_id": "employee_hire_evaluation", "query": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1", "query_toks": ["SELECT", "city", "FROM", "employee", "WHERE", "age", "<", "30", "GROUP", "BY", "city", "HAVING", "count", "(", "*", ")", ">", "1"], "query_toks_no_value": ["select", "city", "from", "employee", "where", "age", "<", "value", "group", "by", "city", "having", "count", "(", "*", ")", ">", "value"], "question": "Find the cities that have more than one employee under age 30.", "question_toks": ["Find", "the", "cities", "that", "have", "more", "than", "one", "employee", "under", "age", "30", "."], "guid": 503}}
{"text": "company: Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value; gas_station: Station_ID, Open_Year, Location, Manager_Name, Vice_Manager_Name, Representative_Name; station_company: Station_ID, Company_ID, Rank_of_the_Year | What are the headquarters without companies that are in the banking industry?", "sql": "SELECT headquarters FROM company EXCEPT SELECT headquarters FROM company WHERE main_industry  =  'Banking'", "example": {"db_id": "gas_company", "query": "SELECT headquarters FROM company EXCEPT SELECT headquarters FROM company WHERE main_industry  =  'Banking'", "query_toks": ["SELECT", "headquarters", "FROM", "company", "EXCEPT", "SELECT", "headquarters", "FROM", "company", "WHERE", "main_industry", "=", "'Banking", "'"], "query_toks_no_value": ["select", "headquarters", "from", "company", "except", "select", "headquarters", "from", "company", "where", "main_industry", "=", "value"], "question": "What are the headquarters without companies that are in the banking industry?", "question_toks": ["What", "are", "the", "headquarters", "without", "companies", "that", "are", "in", "the", "banking", "industry", "?"], "guid": 504}}
{"text": "regions: REGION_ID, REGION_NAME; countries: COUNTRY_ID, COUNTRY_NAME, REGION_ID; departments: DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID; jobs: JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY; employees: EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID; job_history: EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID; locations: LOCATION_ID, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_ID | What are the full names and hire dates for employees in the same department as someone with the first name Clara?", "sql": "SELECT first_name ,  last_name ,  hire_date FROM employees WHERE department_id  =  (SELECT department_id FROM employees WHERE first_name  =  \"Clara\")", "example": {"db_id": "hr_1", "query": "SELECT first_name ,  last_name ,  hire_date FROM employees WHERE department_id  =  (SELECT department_id FROM employees WHERE first_name  =  \"Clara\")", "query_toks": ["SELECT", "first_name", ",", "last_name", ",", "hire_date", "FROM", "employees", "WHERE", "department_id", "=", "(", "SELECT", "department_id", "FROM", "employees", "WHERE", "first_name", "=", "``", "Clara", "''", ")"], "query_toks_no_value": ["select", "first_name", ",", "last_name", ",", "hire_date", "from", "employees", "where", "department_id", "=", "(", "select", "department_id", "from", "employees", "where", "first_name", "=", "value", ")"], "question": "What are the full names and hire dates for employees in the same department as someone with the first name Clara?", "question_toks": ["What", "are", "the", "full", "names", "and", "hire", "dates", "for", "employees", "in", "the", "same", "department", "as", "someone", "with", "the", "first", "name", "Clara", "?"], "guid": 505}}
{"text": "continents: ContId, Continent; countries: CountryId, CountryName, Continent; car_makers: Id, Maker, FullName, Country; model_list: ModelId, Maker, Model; car_names: MakeId, Model, Make; cars_data: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year | What is the minimum weight of the car with 8 cylinders produced in 1974 ?", "sql": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974", "example": {"db_id": "car_1", "query": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974", "query_toks": ["select", "min", "(", "weight", ")", "from", "cars_data", "where", "cylinders", "=", "8", "and", "year", "=", "1974"], "query_toks_no_value": ["select", "min", "(", "weight", ")", "from", "cars_data", "where", "cylinders", "=", "value", "and", "year", "=", "value"], "question": "What is the minimum weight of the car with 8 cylinders produced in 1974 ?", "question_toks": ["What", "is", "the", "minimum", "weight", "of", "the", "car", "with", "8", "cylinders", "produced", "in", "1974", "?"], "guid": 506}}
{"text": "regions: REGION_ID, REGION_NAME; countries: COUNTRY_ID, COUNTRY_NAME, REGION_ID; departments: DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID; jobs: JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY; employees: EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID; job_history: EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID; locations: LOCATION_ID, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_ID | display the country ID and number of cities for each country.", "sql": "SELECT country_id ,  COUNT(*) FROM locations GROUP BY country_id", "example": {"db_id": "hr_1", "query": "SELECT country_id ,  COUNT(*) FROM locations GROUP BY country_id", "query_toks": ["SELECT", "country_id", ",", "COUNT", "(", "*", ")", "FROM", "locations", "GROUP", "BY", "country_id"], "query_toks_no_value": ["select", "country_id", ",", "count", "(", "*", ")", "from", "locations", "group", "by", "country_id"], "question": "display the country ID and number of cities for each country.", "question_toks": ["display", "the", "country", "ID", "and", "number", "of", "cities", "for", "each", "country", "."], "guid": 507}}
{"text": "regions: REGION_ID, REGION_NAME; countries: COUNTRY_ID, COUNTRY_NAME, REGION_ID; departments: DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID; jobs: JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY; employees: EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID; job_history: EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID; locations: LOCATION_ID, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_ID | What are the unique ids of those departments where any manager is managing 4 or more employees.", "sql": "SELECT DISTINCT department_id FROM employees GROUP BY department_id ,  manager_id HAVING COUNT(employee_id)  >= 4", "example": {"db_id": "hr_1", "query": "SELECT DISTINCT department_id FROM employees GROUP BY department_id ,  manager_id HAVING COUNT(employee_id)  >= 4", "query_toks": ["SELECT", "DISTINCT", "department_id", "FROM", "employees", "GROUP", "BY", "department_id", ",", "manager_id", "HAVING", "COUNT", "(", "employee_id", ")", ">", "=", "4"], "query_toks_no_value": ["select", "distinct", "department_id", "from", "employees", "group", "by", "department_id", ",", "manager_id", "having", "count", "(", "employee_id", ")", ">", "=", "value"], "question": "What are the unique ids of those departments where any manager is managing 4 or more employees.", "question_toks": ["What", "are", "the", "unique", "ids", "of", "those", "departments", "where", "any", "manager", "is", "managing", "4", "or", "more", "employees", "."], "guid": 508}}
{"text": "regions: REGION_ID, REGION_NAME; countries: COUNTRY_ID, COUNTRY_NAME, REGION_ID; departments: DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID; jobs: JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY; employees: EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID; job_history: EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID; locations: LOCATION_ID, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_ID | Return all information about employees with salaries between 8000 and 12000 for which commission is not null or where their department id is not 40.", "sql": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40", "example": {"db_id": "hr_1", "query": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40", "query_toks": ["SELECT", "*", "FROM", "employees", "WHERE", "salary", "BETWEEN", "8000", "AND", "12000", "AND", "commission_pct", "!", "=", "``", "null", "''", "OR", "department_id", "!", "=", "40"], "query_toks_no_value": ["select", "*", "from", "employees", "where", "salary", "between", "value", "and", "value", "and", "commission_pct", "!", "=", "value", "or", "department_id", "!", "=", "value"], "question": "Return all information about employees with salaries between 8000 and 12000 for which commission is not null or where their department id is not 40.", "question_toks": ["Return", "all", "information", "about", "employees", "with", "salaries", "between", "8000", "and", "12000", "for", "which", "commission", "is", "not", "null", "or", "where", "their", "department", "id", "is", "not", "40", "."], "guid": 509}}
{"text": "Manufacturers: Code, Name, Headquarter, Founder, Revenue; Products: Code, Name, Price, Manufacturer | For each manufacturer name, what are the names and prices of their most expensive product?", "sql": "SELECT T1.Name ,  max(T1.Price) ,  T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code GROUP BY T2.name", "example": {"db_id": "manufactory_1", "query": "SELECT T1.Name ,  max(T1.Price) ,  T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code GROUP BY T2.name", "query_toks": ["SELECT", "T1.Name", ",", "max", "(", "T1.Price", ")", ",", "T2.name", "FROM", "products", "AS", "T1", "JOIN", "Manufacturers", "AS", "T2", "ON", "T1.manufacturer", "=", "T2.code", "GROUP", "BY", "T2.name"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "max", "(", "t1", ".", "price", ")", ",", "t2", ".", "name", "from", "products", "as", "t1", "join", "manufacturers", "as", "t2", "on", "t1", ".", "manufacturer", "=", "t2", ".", "code", "group", "by", "t2", ".", "name"], "question": "For each manufacturer name, what are the names and prices of their most expensive product?", "question_toks": ["For", "each", "manufacturer", "name", ",", "what", "are", "the", "names", "and", "prices", "of", "their", "most", "expensive", "product", "?"], "guid": 510}}
{"text": "regions: REGION_ID, REGION_NAME; countries: COUNTRY_ID, COUNTRY_NAME, REGION_ID; departments: DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID; jobs: JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY; employees: EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID; job_history: EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID; locations: LOCATION_ID, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_ID | Find the ids of the employees who does not work in those departments where some employees works whose manager id within the range 100 and 200.", "sql": "SELECT * FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)", "example": {"db_id": "hr_1", "query": "SELECT * FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)", "query_toks": ["SELECT", "*", "FROM", "employees", "WHERE", "department_id", "NOT", "IN", "(", "SELECT", "department_id", "FROM", "departments", "WHERE", "manager_id", "BETWEEN", "100", "AND", "200", ")"], "query_toks_no_value": ["select", "*", "from", "employees", "where", "department_id", "not", "in", "(", "select", "department_id", "from", "departments", "where", "manager_id", "between", "value", "and", "value", ")"], "question": "Find the ids of the employees who does not work in those departments where some employees works whose manager id within the range 100 and 200.", "question_toks": ["Find", "the", "ids", "of", "the", "employees", "who", "does", "not", "work", "in", "those", "departments", "where", "some", "employees", "works", "whose", "manager", "id", "within", "the", "range", "100", "and", "200", "."], "guid": 511}}
{"text": "employee: Employee_ID, Name, Age, City; shop: Shop_ID, Name, Location, District, Number_products, Manager_name; hiring: Shop_ID, Employee_ID, Start_from, Is_full_time; evaluation: Employee_ID, Year_awarded, Bonus | What is total bonus given in all evaluations?", "sql": "SELECT sum(bonus) FROM evaluation", "example": {"db_id": "employee_hire_evaluation", "query": "SELECT sum(bonus) FROM evaluation", "query_toks": ["SELECT", "sum", "(", "bonus", ")", "FROM", "evaluation"], "query_toks_no_value": ["select", "sum", "(", "bonus", ")", "from", "evaluation"], "question": "What is total bonus given in all evaluations?", "question_toks": ["What", "is", "total", "bonus", "given", "in", "all", "evaluations", "?"], "guid": 512}}
{"text": "buildings: id, name, City, Height, Stories, Status; Companies: id, name, Headquarters, Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value_billion; Office_locations: building_id, company_id, move_in_year | How many companies are in either \"Banking\" industry or \"Conglomerate\" industry?", "sql": "SELECT count(*) FROM Companies WHERE Industry  =  \"Banking\" OR Industry  =  \"Conglomerate\"", "example": {"db_id": "company_office", "query": "SELECT count(*) FROM Companies WHERE Industry  =  \"Banking\" OR Industry  =  \"Conglomerate\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Companies", "WHERE", "Industry", "=", "``", "Banking", "''", "OR", "Industry", "=", "``", "Conglomerate", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "companies", "where", "industry", "=", "value", "or", "industry", "=", "value"], "question": "How many companies are in either \"Banking\" industry or \"Conglomerate\" industry?", "question_toks": ["How", "many", "companies", "are", "in", "either", "``", "Banking", "''", "industry", "or", "``", "Conglomerate", "''", "industry", "?"], "guid": 513}}
{"text": "phone: Name, Phone_ID, Memory_in_G, Carrier, Price; market: Market_ID, District, Num_of_employees, Num_of_shops, Ranking; phone_market: Market_ID, Phone_ID, Num_of_stock | Show the most frequently used carrier of the phones.", "sql": "SELECT Carrier FROM phone GROUP BY Carrier ORDER BY COUNT(*) DESC LIMIT 1", "example": {"db_id": "phone_market", "query": "SELECT Carrier FROM phone GROUP BY Carrier ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "Carrier", "FROM", "phone", "GROUP", "BY", "Carrier", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "carrier", "from", "phone", "group", "by", "carrier", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Show the most frequently used carrier of the phones.", "question_toks": ["Show", "the", "most", "frequently", "used", "carrier", "of", "the", "phones", "."], "guid": 514}}
{"text": "continents: ContId, Continent; countries: CountryId, CountryName, Continent; car_makers: Id, Maker, FullName, Country; model_list: ModelId, Maker, Model; car_names: MakeId, Model, Make; cars_data: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year | What is the average edispl for all volvos?", "sql": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';", "example": {"db_id": "car_1", "query": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';", "query_toks": ["SELECT", "avg", "(", "T2.edispl", ")", "FROM", "CAR_NAMES", "AS", "T1", "JOIN", "CARS_DATA", "AS", "T2", "ON", "T1.MakeId", "=", "T2.Id", "WHERE", "T1.Model", "=", "'volvo", "'", ";"], "query_toks_no_value": ["select", "avg", "(", "t2", ".", "edispl", ")", "from", "car_names", "as", "t1", "join", "cars_data", "as", "t2", "on", "t1", ".", "makeid", "=", "t2", ".", "id", "where", "t1", ".", "model", "=", "value"], "question": "What is the average edispl for all volvos?", "question_toks": ["What", "is", "the", "average", "edispl", "for", "all", "volvos", "?"], "guid": 515}}
{"text": "chip_model: Model_name, Launch_year, RAM_MiB, ROM_MiB, Slots, WiFi, Bluetooth; screen_mode: Graphics_mode, Char_cells, Pixels, Hardware_colours, used_kb, map, Type; phone: Company_name, Hardware_Model_name, Accreditation_type, Accreditation_level, Date, chip_model, screen_mode | List the name of the company that produced more than one phone model.", "sql": "SELECT Company_name FROM phone GROUP BY Company_name HAVING count(*)  >  1;", "example": {"db_id": "phone_1", "query": "SELECT Company_name FROM phone GROUP BY Company_name HAVING count(*)  >  1;", "query_toks": ["SELECT", "Company_name", "FROM", "phone", "GROUP", "BY", "Company_name", "HAVING", "count", "(", "*", ")", ">", "1", ";"], "query_toks_no_value": ["select", "company_name", "from", "phone", "group", "by", "company_name", "having", "count", "(", "*", ")", ">", "value"], "question": "List the name of the company that produced more than one phone model.", "question_toks": ["List", "the", "name", "of", "the", "company", "that", "produced", "more", "than", "one", "phone", "model", "."], "guid": 516}}
{"text": "regions: REGION_ID, REGION_NAME; countries: COUNTRY_ID, COUNTRY_NAME, REGION_ID; departments: DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID; jobs: JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY; employees: EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID; job_history: EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID; locations: LOCATION_ID, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_ID | What is all the information about the Marketing department?", "sql": "SELECT * FROM  departments WHERE department_name  =  'Marketing'", "example": {"db_id": "hr_1", "query": "SELECT * FROM  departments WHERE department_name  =  'Marketing'", "query_toks": ["SELECT", "*", "FROM", "departments", "WHERE", "department_name", "=", "'Marketing", "'"], "query_toks_no_value": ["select", "*", "from", "departments", "where", "department_name", "=", "value"], "question": "What is all the information about the Marketing department?", "question_toks": ["What", "is", "all", "the", "information", "about", "the", "Marketing", "department", "?"], "guid": 517}}
{"text": "member: Member_ID, Name, Nationality, Role; performance: Performance_ID, Date, Host, Location, Attendance; member_attendance: Member_ID, Performance_ID, Num_of_Pieces | List the hosts of performances in ascending order of attendance.", "sql": "SELECT HOST FROM performance ORDER BY Attendance ASC", "example": {"db_id": "performance_attendance", "query": "SELECT HOST FROM performance ORDER BY Attendance ASC", "query_toks": ["SELECT", "HOST", "FROM", "performance", "ORDER", "BY", "Attendance", "ASC"], "query_toks_no_value": ["select", "host", "from", "performance", "order", "by", "attendance", "asc"], "question": "List the hosts of performances in ascending order of attendance.", "question_toks": ["List", "the", "hosts", "of", "performances", "in", "ascending", "order", "of", "attendance", "."], "guid": 518}}
{"text": "regions: REGION_ID, REGION_NAME; countries: COUNTRY_ID, COUNTRY_NAME, REGION_ID; departments: DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID; jobs: JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY; employees: EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID; job_history: EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID; locations: LOCATION_ID, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_ID | What is the average salary for each job title?", "sql": "SELECT job_title ,  AVG(salary) FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id  =  T2.job_id GROUP BY T2.job_title", "example": {"db_id": "hr_1", "query": "SELECT job_title ,  AVG(salary) FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id  =  T2.job_id GROUP BY T2.job_title", "query_toks": ["SELECT", "job_title", ",", "AVG", "(", "salary", ")", "FROM", "employees", "AS", "T1", "JOIN", "jobs", "AS", "T2", "ON", "T1.job_id", "=", "T2.job_id", "GROUP", "BY", "T2.job_title"], "query_toks_no_value": ["select", "job_title", ",", "avg", "(", "salary", ")", "from", "employees", "as", "t1", "join", "jobs", "as", "t2", "on", "t1", ".", "job_id", "=", "t2", ".", "job_id", "group", "by", "t2", ".", "job_title"], "question": "What is the average salary for each job title?", "question_toks": ["What", "is", "the", "average", "salary", "for", "each", "job", "title", "?"], "guid": 519}}
{"text": "regions: REGION_ID, REGION_NAME; countries: COUNTRY_ID, COUNTRY_NAME, REGION_ID; departments: DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID; jobs: JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY; employees: EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID; job_history: EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID; locations: LOCATION_ID, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_ID | Give the first name and job id for all employees in the Finance department.", "sql": "SELECT T1.first_name ,  T1.job_id FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id WHERE T2.department_name  =  'Finance'", "example": {"db_id": "hr_1", "query": "SELECT T1.first_name ,  T1.job_id FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id WHERE T2.department_name  =  'Finance'", "query_toks": ["SELECT", "T1.first_name", ",", "T1.job_id", "FROM", "employees", "AS", "T1", "JOIN", "departments", "AS", "T2", "ON", "T1.department_id", "=", "T2.department_id", "WHERE", "T2.department_name", "=", "'Finance", "'"], "query_toks_no_value": ["select", "t1", ".", "first_name", ",", "t1", ".", "job_id", "from", "employees", "as", "t1", "join", "departments", "as", "t2", "on", "t1", ".", "department_id", "=", "t2", ".", "department_id", "where", "t2", ".", "department_name", "=", "value"], "question": "Give the first name and job id for all employees in the Finance department.", "question_toks": ["Give", "the", "first", "name", "and", "job", "id", "for", "all", "employees", "in", "the", "Finance", "department", "."], "guid": 520}}
{"text": "regions: REGION_ID, REGION_NAME; countries: COUNTRY_ID, COUNTRY_NAME, REGION_ID; departments: DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID; jobs: JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY; employees: EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID; job_history: EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID; locations: LOCATION_ID, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_ID | Return the full names and salaries for employees with first names that end with the letter m.", "sql": "SELECT first_name ,  last_name ,  salary FROM employees WHERE first_name LIKE '%m'", "example": {"db_id": "hr_1", "query": "SELECT first_name ,  last_name ,  salary FROM employees WHERE first_name LIKE '%m'", "query_toks": ["SELECT", "first_name", ",", "last_name", ",", "salary", "FROM", "employees", "WHERE", "first_name", "LIKE", "'", "%", "m", "'"], "query_toks_no_value": ["select", "first_name", ",", "last_name", ",", "salary", "from", "employees", "where", "first_name", "like", "value"], "question": "Return the full names and salaries for employees with first names that end with the letter m.", "question_toks": ["Return", "the", "full", "names", "and", "salaries", "for", "employees", "with", "first", "names", "that", "end", "with", "the", "letter", "m", "."], "guid": 521}}
{"text": "Manufacturers: Code, Name, Headquarter, Founder, Revenue; Products: Code, Name, Price, Manufacturer | What are the average prices of products, grouped by manufacturer code?", "sql": "SELECT AVG(Price) ,  Manufacturer FROM Products GROUP BY Manufacturer", "example": {"db_id": "manufactory_1", "query": "SELECT AVG(Price) ,  Manufacturer FROM Products GROUP BY Manufacturer", "query_toks": ["SELECT", "AVG", "(", "Price", ")", ",", "Manufacturer", "FROM", "Products", "GROUP", "BY", "Manufacturer"], "query_toks_no_value": ["select", "avg", "(", "price", ")", ",", "manufacturer", "from", "products", "group", "by", "manufacturer"], "question": "What are the average prices of products, grouped by manufacturer code?", "question_toks": ["What", "are", "the", "average", "prices", "of", "products", ",", "grouped", "by", "manufacturer", "code", "?"], "guid": 522}}
{"text": "regions: REGION_ID, REGION_NAME; countries: COUNTRY_ID, COUNTRY_NAME, REGION_ID; departments: DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID; jobs: JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY; employees: EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID; job_history: EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID; locations: LOCATION_ID, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_ID | What is all the information about the Marketing department?", "sql": "SELECT * FROM  departments WHERE department_name  =  'Marketing'", "example": {"db_id": "hr_1", "query": "SELECT * FROM  departments WHERE department_name  =  'Marketing'", "query_toks": ["SELECT", "*", "FROM", "departments", "WHERE", "department_name", "=", "'Marketing", "'"], "query_toks_no_value": ["select", "*", "from", "departments", "where", "department_name", "=", "value"], "question": "What is all the information about the Marketing department?", "question_toks": ["What", "is", "all", "the", "information", "about", "the", "Marketing", "department", "?"], "guid": 523}}
{"text": "people: People_ID, Age, Name, Nationality, Graduation_College; company: Company_ID, Name, Headquarters, Industry, Sales_in_Billion, Profits_in_Billion, Assets_in_Billion, Market_Value_in_Billion; employment: Company_ID, People_ID, Year_working | Show the names of companies in the banking or retailing industry?", "sql": "SELECT Name FROM company WHERE Industry  =  \"Banking\" OR Industry  =  \"Retailing\"", "example": {"db_id": "company_employee", "query": "SELECT Name FROM company WHERE Industry  =  \"Banking\" OR Industry  =  \"Retailing\"", "query_toks": ["SELECT", "Name", "FROM", "company", "WHERE", "Industry", "=", "``", "Banking", "''", "OR", "Industry", "=", "``", "Retailing", "''"], "query_toks_no_value": ["select", "name", "from", "company", "where", "industry", "=", "value", "or", "industry", "=", "value"], "question": "Show the names of companies in the banking or retailing industry?", "question_toks": ["Show", "the", "names", "of", "companies", "in", "the", "banking", "or", "retailing", "industry", "?"], "guid": 524}}
{"text": "Manufacturers: Code, Name, Headquarter, Founder, Revenue; Products: Code, Name, Price, Manufacturer | Find the name of companies that do not make DVD drive.", "sql": "SELECT name FROM manufacturers EXCEPT SELECT T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T1.name  =  'DVD drive'", "example": {"db_id": "manufactory_1", "query": "SELECT name FROM manufacturers EXCEPT SELECT T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T1.name  =  'DVD drive'", "query_toks": ["SELECT", "name", "FROM", "manufacturers", "EXCEPT", "SELECT", "T2.name", "FROM", "products", "AS", "T1", "JOIN", "manufacturers", "AS", "T2", "ON", "T1.Manufacturer", "=", "T2.code", "WHERE", "T1.name", "=", "'DVD", "drive", "'"], "query_toks_no_value": ["select", "name", "from", "manufacturers", "except", "select", "t2", ".", "name", "from", "products", "as", "t1", "join", "manufacturers", "as", "t2", "on", "t1", ".", "manufacturer", "=", "t2", ".", "code", "where", "t1", ".", "name", "=", "value"], "question": "Find the name of companies that do not make DVD drive.", "question_toks": ["Find", "the", "name", "of", "companies", "that", "do", "not", "make", "DVD", "drive", "."], "guid": 525}}
{"text": "regions: REGION_ID, REGION_NAME; countries: COUNTRY_ID, COUNTRY_NAME, REGION_ID; departments: DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID; jobs: JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY; employees: EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID; job_history: EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID; locations: LOCATION_ID, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_ID | What are the department ids, full names, and salaries for employees who make the most in their departments?", "sql": "SELECT first_name ,   last_name ,   salary ,  department_id ,  MAX(salary) FROM employees GROUP BY department_id", "example": {"db_id": "hr_1", "query": "SELECT first_name ,   last_name ,   salary ,  department_id ,  MAX(salary) FROM employees GROUP BY department_id", "query_toks": ["SELECT", "first_name", ",", "last_name", ",", "salary", ",", "department_id", ",", "MAX", "(", "salary", ")", "FROM", "employees", "GROUP", "BY", "department_id"], "query_toks_no_value": ["select", "first_name", ",", "last_name", ",", "salary", ",", "department_id", ",", "max", "(", "salary", ")", "from", "employees", "group", "by", "department_id"], "question": "What are the department ids, full names, and salaries for employees who make the most in their departments?", "question_toks": ["What", "are", "the", "department", "ids", ",", "full", "names", ",", "and", "salaries", "for", "employees", "who", "make", "the", "most", "in", "their", "departments", "?"], "guid": 526}}
{"text": "regions: REGION_ID, REGION_NAME; countries: COUNTRY_ID, COUNTRY_NAME, REGION_ID; departments: DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID; jobs: JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY; employees: EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID; job_history: EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID; locations: LOCATION_ID, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_ID | On what dates were employees without the letter M in their first names hired?", "sql": "SELECT hire_date FROM employees WHERE first_name NOT LIKE '%M%'", "example": {"db_id": "hr_1", "query": "SELECT hire_date FROM employees WHERE first_name NOT LIKE '%M%'", "query_toks": ["SELECT", "hire_date", "FROM", "employees", "WHERE", "first_name", "NOT", "LIKE", "'", "%", "M", "%", "'"], "query_toks_no_value": ["select", "hire_date", "from", "employees", "where", "first_name", "not", "like", "value"], "question": "On what dates were employees without the letter M in their first names hired?", "question_toks": ["On", "what", "dates", "were", "employees", "without", "the", "letter", "M", "in", "their", "first", "names", "hired", "?"], "guid": 527}}
{"text": "continents: ContId, Continent; countries: CountryId, CountryName, Continent; car_makers: Id, Maker, FullName, Country; model_list: ModelId, Maker, Model; car_names: MakeId, Model, Make; cars_data: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year | What are the different models for the cards produced after 1980?", "sql": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;", "example": {"db_id": "car_1", "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;", "query_toks": ["SELECT", "DISTINCT", "T1.model", "FROM", "MODEL_LIST", "AS", "T1", "JOIN", "CAR_NAMES", "AS", "T2", "ON", "T1.model", "=", "T2.model", "JOIN", "CARS_DATA", "AS", "T3", "ON", "T2.MakeId", "=", "T3.id", "WHERE", "T3.year", ">", "1980", ";"], "query_toks_no_value": ["select", "distinct", "t1", ".", "model", "from", "model_list", "as", "t1", "join", "car_names", "as", "t2", "on", "t1", ".", "model", "=", "t2", ".", "model", "join", "cars_data", "as", "t3", "on", "t2", ".", "makeid", "=", "t3", ".", "id", "where", "t3", ".", "year", ">", "value"], "question": "What are the different models for the cards produced after 1980?", "question_toks": ["What", "are", "the", "different", "models", "for", "the", "cards", "produced", "after", "1980", "?"], "guid": 528}}
{"text": "continents: ContId, Continent; countries: CountryId, CountryName, Continent; car_makers: Id, Maker, FullName, Country; model_list: ModelId, Maker, Model; car_names: MakeId, Model, Make; cars_data: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year | What are the names and ids of all countries with at least one car maker?", "sql": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;", "example": {"db_id": "car_1", "query": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;", "query_toks": ["SELECT", "T1.CountryName", ",", "T1.CountryId", "FROM", "COUNTRIES", "AS", "T1", "JOIN", "CAR_MAKERS", "AS", "T2", "ON", "T1.CountryId", "=", "T2.Country", "GROUP", "BY", "T1.CountryId", "HAVING", "count", "(", "*", ")", ">", "=", "1", ";"], "query_toks_no_value": ["select", "t1", ".", "countryname", ",", "t1", ".", "countryid", "from", "countries", "as", "t1", "join", "car_makers", "as", "t2", "on", "t1", ".", "countryid", "=", "t2", ".", "country", "group", "by", "t1", ".", "countryid", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "What are the names and ids of all countries with at least one car maker?", "question_toks": ["What", "are", "the", "names", "and", "ids", "of", "all", "countries", "with", "at", "least", "one", "car", "maker", "?"], "guid": 529}}
{"text": "continents: ContId, Continent; countries: CountryId, CountryName, Continent; car_makers: Id, Maker, FullName, Country; model_list: ModelId, Maker, Model; car_names: MakeId, Model, Make; cars_data: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year | How many car makers are there in each continents? List the continent name and the count.", "sql": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;", "example": {"db_id": "car_1", "query": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;", "query_toks": ["SELECT", "T1.Continent", ",", "count", "(", "*", ")", "FROM", "CONTINENTS", "AS", "T1", "JOIN", "COUNTRIES", "AS", "T2", "ON", "T1.ContId", "=", "T2.continent", "JOIN", "car_makers", "AS", "T3", "ON", "T2.CountryId", "=", "T3.Country", "GROUP", "BY", "T1.Continent", ";"], "query_toks_no_value": ["select", "t1", ".", "continent", ",", "count", "(", "*", ")", "from", "continents", "as", "t1", "join", "countries", "as", "t2", "on", "t1", ".", "contid", "=", "t2", ".", "continent", "join", "car_makers", "as", "t3", "on", "t2", ".", "countryid", "=", "t3", ".", "country", "group", "by", "t1", ".", "continent"], "question": "How many car makers are there in each continents? List the continent name and the count.", "question_toks": ["How", "many", "car", "makers", "are", "there", "in", "each", "continents", "?", "List", "the", "continent", "name", "and", "the", "count", "."], "guid": 530}}
{"text": "continents: ContId, Continent; countries: CountryId, CountryName, Continent; car_makers: Id, Maker, FullName, Country; model_list: ModelId, Maker, Model; car_names: MakeId, Model, Make; cars_data: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year | What is the name of the different car makers who produced a car in 1970?", "sql": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';", "example": {"db_id": "car_1", "query": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';", "query_toks": ["SELECT", "DISTINCT", "T1.Maker", "FROM", "CAR_MAKERS", "AS", "T1", "JOIN", "MODEL_LIST", "AS", "T2", "ON", "T1.Id", "=", "T2.Maker", "JOIN", "CAR_NAMES", "AS", "T3", "ON", "T2.model", "=", "T3.model", "JOIN", "CARS_DATA", "AS", "T4", "ON", "T3.MakeId", "=", "T4.id", "WHERE", "T4.year", "=", "'1970", "'", ";"], "query_toks_no_value": ["select", "distinct", "t1", ".", "maker", "from", "car_makers", "as", "t1", "join", "model_list", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "maker", "join", "car_names", "as", "t3", "on", "t2", ".", "model", "=", "t3", ".", "model", "join", "cars_data", "as", "t4", "on", "t3", ".", "makeid", "=", "t4", ".", "id", "where", "t4", ".", "year", "=", "value"], "question": "What is the name of the different car makers who produced a car in 1970?", "question_toks": ["What", "is", "the", "name", "of", "the", "different", "car", "makers", "who", "produced", "a", "car", "in", "1970", "?"], "guid": 531}}
{"text": "regions: REGION_ID, REGION_NAME; countries: COUNTRY_ID, COUNTRY_NAME, REGION_ID; departments: DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID; jobs: JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY; employees: EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID; job_history: EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID; locations: LOCATION_ID, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_ID | display all the information for all employees who have the letters D or S in their first name and also arrange the result in descending order by salary.", "sql": "SELECT * FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY salary DESC", "example": {"db_id": "hr_1", "query": "SELECT * FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY salary DESC", "query_toks": ["SELECT", "*", "FROM", "employees", "WHERE", "first_name", "LIKE", "'", "%", "D", "%", "'", "OR", "first_name", "LIKE", "'", "%", "S", "%", "'", "ORDER", "BY", "salary", "DESC"], "query_toks_no_value": ["select", "*", "from", "employees", "where", "first_name", "like", "value", "or", "first_name", "like", "value", "order", "by", "salary", "desc"], "question": "display all the information for all employees who have the letters D or S in their first name and also arrange the result in descending order by salary.", "question_toks": ["display", "all", "the", "information", "for", "all", "employees", "who", "have", "the", "letters", "D", "or", "S", "in", "their", "first", "name", "and", "also", "arrange", "the", "result", "in", "descending", "order", "by", "salary", "."], "guid": 532}}
{"text": "continents: ContId, Continent; countries: CountryId, CountryName, Continent; car_makers: Id, Maker, FullName, Country; model_list: ModelId, Maker, Model; car_names: MakeId, Model, Make; cars_data: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year | What is the average horsepower of the cars before 1980?", "sql": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980;", "example": {"db_id": "car_1", "query": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980;", "query_toks": ["SELECT", "avg", "(", "horsepower", ")", "FROM", "CARS_DATA", "WHERE", "YEAR", "<", "1980", ";"], "query_toks_no_value": ["select", "avg", "(", "horsepower", ")", "from", "cars_data", "where", "year", "<", "value"], "question": "What is the average horsepower of the cars before 1980?", "question_toks": ["What", "is", "the", "average", "horsepower", "of", "the", "cars", "before", "1980", "?"], "guid": 533}}
{"text": "regions: REGION_ID, REGION_NAME; countries: COUNTRY_ID, COUNTRY_NAME, REGION_ID; departments: DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID; jobs: JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY; employees: EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID; job_history: EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID; locations: LOCATION_ID, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_ID | display all the information of employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40.", "sql": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40", "example": {"db_id": "hr_1", "query": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40", "query_toks": ["SELECT", "*", "FROM", "employees", "WHERE", "salary", "BETWEEN", "8000", "AND", "12000", "AND", "commission_pct", "!", "=", "``", "null", "''", "OR", "department_id", "!", "=", "40"], "query_toks_no_value": ["select", "*", "from", "employees", "where", "salary", "between", "value", "and", "value", "and", "commission_pct", "!", "=", "value", "or", "department_id", "!", "=", "value"], "question": "display all the information of employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40.", "question_toks": ["display", "all", "the", "information", "of", "employees", "whose", "salary", "is", "in", "the", "range", "of", "8000", "and", "12000", "and", "commission", "is", "not", "null", "or", "department", "number", "does", "not", "equal", "to", "40", "."], "guid": 534}}
{"text": "regions: REGION_ID, REGION_NAME; countries: COUNTRY_ID, COUNTRY_NAME, REGION_ID; departments: DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID; jobs: JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY; employees: EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID; job_history: EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID; locations: LOCATION_ID, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_ID | display the first and last name, department, city, and state province for each employee.", "sql": "SELECT T1.first_name ,  T1.last_name ,  T2.department_name ,  T3.city ,  T3.state_province FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id", "example": {"db_id": "hr_1", "query": "SELECT T1.first_name ,  T1.last_name ,  T2.department_name ,  T3.city ,  T3.state_province FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id", "query_toks": ["SELECT", "T1.first_name", ",", "T1.last_name", ",", "T2.department_name", ",", "T3.city", ",", "T3.state_province", "FROM", "employees", "AS", "T1", "JOIN", "departments", "AS", "T2", "ON", "T1.department_id", "=", "T2.department_id", "JOIN", "locations", "AS", "T3", "ON", "T2.location_id", "=", "T3.location_id"], "query_toks_no_value": ["select", "t1", ".", "first_name", ",", "t1", ".", "last_name", ",", "t2", ".", "department_name", ",", "t3", ".", "city", ",", "t3", ".", "state_province", "from", "employees", "as", "t1", "join", "departments", "as", "t2", "on", "t1", ".", "department_id", "=", "t2", ".", "department_id", "join", "locations", "as", "t3", "on", "t2", ".", "location_id", "=", "t3", ".", "location_id"], "question": "display the first and last name, department, city, and state province for each employee.", "question_toks": ["display", "the", "first", "and", "last", "name", ",", "department", ",", "city", ",", "and", "state", "province", "for", "each", "employee", "."], "guid": 535}}
{"text": "phone: Name, Phone_ID, Memory_in_G, Carrier, Price; market: Market_ID, District, Num_of_employees, Num_of_shops, Ranking; phone_market: Market_ID, Phone_ID, Num_of_stock | Show the carriers that have both phones with memory smaller than 32 and phones with memory bigger than 64.", "sql": "SELECT Carrier FROM phone WHERE Memory_in_G  <  32 INTERSECT SELECT Carrier FROM phone WHERE Memory_in_G  >  64", "example": {"db_id": "phone_market", "query": "SELECT Carrier FROM phone WHERE Memory_in_G  <  32 INTERSECT SELECT Carrier FROM phone WHERE Memory_in_G  >  64", "query_toks": ["SELECT", "Carrier", "FROM", "phone", "WHERE", "Memory_in_G", "<", "32", "INTERSECT", "SELECT", "Carrier", "FROM", "phone", "WHERE", "Memory_in_G", ">", "64"], "query_toks_no_value": ["select", "carrier", "from", "phone", "where", "memory_in_g", "<", "value", "intersect", "select", "carrier", "from", "phone", "where", "memory_in_g", ">", "value"], "question": "Show the carriers that have both phones with memory smaller than 32 and phones with memory bigger than 64.", "question_toks": ["Show", "the", "carriers", "that", "have", "both", "phones", "with", "memory", "smaller", "than", "32", "and", "phones", "with", "memory", "bigger", "than", "64", "."], "guid": 536}}
{"text": "company: Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value; gas_station: Station_ID, Open_Year, Location, Manager_Name, Vice_Manager_Name, Representative_Name; station_company: Station_ID, Company_ID, Rank_of_the_Year | Show the manager name with most number of gas stations opened after 2000.", "sql": "SELECT manager_name FROM gas_station WHERE open_year  >  2000 GROUP BY manager_name ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "gas_company", "query": "SELECT manager_name FROM gas_station WHERE open_year  >  2000 GROUP BY manager_name ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "manager_name", "FROM", "gas_station", "WHERE", "open_year", ">", "2000", "GROUP", "BY", "manager_name", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "manager_name", "from", "gas_station", "where", "open_year", ">", "value", "group", "by", "manager_name", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Show the manager name with most number of gas stations opened after 2000.", "question_toks": ["Show", "the", "manager", "name", "with", "most", "number", "of", "gas", "stations", "opened", "after", "2000", "."], "guid": 537}}
{"text": "people: People_ID, Age, Name, Nationality, Graduation_College; company: Company_ID, Name, Headquarters, Industry, Sales_in_Billion, Profits_in_Billion, Assets_in_Billion, Market_Value_in_Billion; employment: Company_ID, People_ID, Year_working | Show the most common headquarter for companies.", "sql": "SELECT Headquarters FROM company GROUP BY Headquarters ORDER BY COUNT(*) DESC LIMIT 1", "example": {"db_id": "company_employee", "query": "SELECT Headquarters FROM company GROUP BY Headquarters ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "Headquarters", "FROM", "company", "GROUP", "BY", "Headquarters", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "headquarters", "from", "company", "group", "by", "headquarters", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Show the most common headquarter for companies.", "question_toks": ["Show", "the", "most", "common", "headquarter", "for", "companies", "."], "guid": 538}}
{"text": "buildings: id, name, City, Height, Stories, Status; Companies: id, name, Headquarters, Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value_billion; Office_locations: building_id, company_id, move_in_year | Which headquarter locations are used by more than 2 companies?", "sql": "SELECT Headquarters FROM Companies GROUP BY Headquarters HAVING COUNT(*)  >  2", "example": {"db_id": "company_office", "query": "SELECT Headquarters FROM Companies GROUP BY Headquarters HAVING COUNT(*)  >  2", "query_toks": ["SELECT", "Headquarters", "FROM", "Companies", "GROUP", "BY", "Headquarters", "HAVING", "COUNT", "(", "*", ")", ">", "2"], "query_toks_no_value": ["select", "headquarters", "from", "companies", "group", "by", "headquarters", "having", "count", "(", "*", ")", ">", "value"], "question": "Which headquarter locations are used by more than 2 companies?", "question_toks": ["Which", "headquarter", "locations", "are", "used", "by", "more", "than", "2", "companies", "?"], "guid": 539}}
{"text": "people: People_ID, Age, Name, Nationality, Graduation_College; company: Company_ID, Name, Headquarters, Industry, Sales_in_Billion, Profits_in_Billion, Assets_in_Billion, Market_Value_in_Billion; employment: Company_ID, People_ID, Year_working | Show names of companies and that of employees in descending order of number of years working for that employee.", "sql": "SELECT T3.Name ,  T2.Name FROM employment AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID JOIN company AS T3 ON T1.Company_ID  =  T3.Company_ID ORDER BY T1.Year_working", "example": {"db_id": "company_employee", "query": "SELECT T3.Name ,  T2.Name FROM employment AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID JOIN company AS T3 ON T1.Company_ID  =  T3.Company_ID ORDER BY T1.Year_working", "query_toks": ["SELECT", "T3.Name", ",", "T2.Name", "FROM", "employment", "AS", "T1", "JOIN", "people", "AS", "T2", "ON", "T1.People_ID", "=", "T2.People_ID", "JOIN", "company", "AS", "T3", "ON", "T1.Company_ID", "=", "T3.Company_ID", "ORDER", "BY", "T1.Year_working"], "query_toks_no_value": ["select", "t3", ".", "name", ",", "t2", ".", "name", "from", "employment", "as", "t1", "join", "people", "as", "t2", "on", "t1", ".", "people_id", "=", "t2", ".", "people_id", "join", "company", "as", "t3", "on", "t1", ".", "company_id", "=", "t3", ".", "company_id", "order", "by", "t1", ".", "year_working"], "question": "Show names of companies and that of employees in descending order of number of years working for that employee.", "question_toks": ["Show", "names", "of", "companies", "and", "that", "of", "employees", "in", "descending", "order", "of", "number", "of", "years", "working", "for", "that", "employee", "."], "guid": 540}}
{"text": "continents: ContId, Continent; countries: CountryId, CountryName, Continent; car_makers: Id, Maker, FullName, Country; model_list: ModelId, Maker, Model; car_names: MakeId, Model, Make; cars_data: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year | What is the maximum horsepower and the make of the car models with 3 cylinders?", "sql": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;", "example": {"db_id": "car_1", "query": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;", "query_toks": ["SELECT", "T2.horsepower", ",", "T1.Make", "FROM", "CAR_NAMES", "AS", "T1", "JOIN", "CARS_DATA", "AS", "T2", "ON", "T1.MakeId", "=", "T2.Id", "WHERE", "T2.cylinders", "=", "3", "ORDER", "BY", "T2.horsepower", "DESC", "LIMIT", "1", ";"], "query_toks_no_value": ["select", "t2", ".", "horsepower", ",", "t1", ".", "make", "from", "car_names", "as", "t1", "join", "cars_data", "as", "t2", "on", "t1", ".", "makeid", "=", "t2", ".", "id", "where", "t2", ".", "cylinders", "=", "value", "order", "by", "t2", ".", "horsepower", "desc", "limit", "value"], "question": "What is the maximum horsepower and the make of the car models with 3 cylinders?", "question_toks": ["What", "is", "the", "maximum", "horsepower", "and", "the", "make", "of", "the", "car", "models", "with", "3", "cylinders", "?"], "guid": 541}}
{"text": "Manufacturers: Code, Name, Headquarter, Founder, Revenue; Products: Code, Name, Price, Manufacturer | Find the total revenue of companies whose revenue is larger than the revenue of some companies based in Austin.", "sql": "SELECT sum(revenue) FROM manufacturers WHERE revenue  >  (SELECT min(revenue) FROM manufacturers WHERE headquarter  =  'Austin')", "example": {"db_id": "manufactory_1", "query": "SELECT sum(revenue) FROM manufacturers WHERE revenue  >  (SELECT min(revenue) FROM manufacturers WHERE headquarter  =  'Austin')", "query_toks": ["SELECT", "sum", "(", "revenue", ")", "FROM", "manufacturers", "WHERE", "revenue", ">", "(", "SELECT", "min", "(", "revenue", ")", "FROM", "manufacturers", "WHERE", "headquarter", "=", "'Austin", "'", ")"], "query_toks_no_value": ["select", "sum", "(", "revenue", ")", "from", "manufacturers", "where", "revenue", ">", "(", "select", "min", "(", "revenue", ")", "from", "manufacturers", "where", "headquarter", "=", "value", ")"], "question": "Find the total revenue of companies whose revenue is larger than the revenue of some companies based in Austin.", "question_toks": ["Find", "the", "total", "revenue", "of", "companies", "whose", "revenue", "is", "larger", "than", "the", "revenue", "of", "some", "companies", "based", "in", "Austin", "."], "guid": 542}}
{"text": "regions: REGION_ID, REGION_NAME; countries: COUNTRY_ID, COUNTRY_NAME, REGION_ID; departments: DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID; jobs: JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY; employees: EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID; job_history: EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID; locations: LOCATION_ID, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_ID | display those departments where more than ten employees work who got a commission percentage.", "sql": "SELECT department_id FROM employees GROUP BY department_id HAVING COUNT(commission_pct) > 10", "example": {"db_id": "hr_1", "query": "SELECT department_id FROM employees GROUP BY department_id HAVING COUNT(commission_pct) > 10", "query_toks": ["SELECT", "department_id", "FROM", "employees", "GROUP", "BY", "department_id", "HAVING", "COUNT", "(", "commission_pct", ")", ">", "10"], "query_toks_no_value": ["select", "department_id", "from", "employees", "group", "by", "department_id", "having", "count", "(", "commission_pct", ")", ">", "value"], "question": "display those departments where more than ten employees work who got a commission percentage.", "question_toks": ["display", "those", "departments", "where", "more", "than", "ten", "employees", "work", "who", "got", "a", "commission", "percentage", "."], "guid": 543}}
{"text": "Manufacturers: Code, Name, Headquarter, Founder, Revenue; Products: Code, Name, Price, Manufacturer | Where is the headquarter of the company founded by James?", "sql": "SELECT headquarter FROM manufacturers WHERE founder  =  'James'", "example": {"db_id": "manufactory_1", "query": "SELECT headquarter FROM manufacturers WHERE founder  =  'James'", "query_toks": ["SELECT", "headquarter", "FROM", "manufacturers", "WHERE", "founder", "=", "'James", "'"], "query_toks_no_value": ["select", "headquarter", "from", "manufacturers", "where", "founder", "=", "value"], "question": "Where is the headquarter of the company founded by James?", "question_toks": ["Where", "is", "the", "headquarter", "of", "the", "company", "founded", "by", "James", "?"], "guid": 544}}
{"text": "regions: REGION_ID, REGION_NAME; countries: COUNTRY_ID, COUNTRY_NAME, REGION_ID; departments: DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID; jobs: JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY; employees: EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID; job_history: EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID; locations: LOCATION_ID, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_ID | when is the hire date for those employees whose first name does not containing the letter M?", "sql": "SELECT hire_date FROM employees WHERE first_name NOT LIKE '%M%'", "example": {"db_id": "hr_1", "query": "SELECT hire_date FROM employees WHERE first_name NOT LIKE '%M%'", "query_toks": ["SELECT", "hire_date", "FROM", "employees", "WHERE", "first_name", "NOT", "LIKE", "'", "%", "M", "%", "'"], "query_toks_no_value": ["select", "hire_date", "from", "employees", "where", "first_name", "not", "like", "value"], "question": "when is the hire date for those employees whose first name does not containing the letter M?", "question_toks": ["when", "is", "the", "hire", "date", "for", "those", "employees", "whose", "first", "name", "does", "not", "containing", "the", "letter", "M", "?"], "guid": 545}}
{"text": "works_on: Essn, Pno, Hours; employee: Fname, Minit, Lname, Ssn, Bdate, Address, Sex, Salary, Super_ssn, Dno; department: Dname, Dnumber, Mgr_ssn, Mgr_start_date; project: Pname, Pnumber, Plocation, Dnum; dependent: Essn, Dependent_name, Sex, Bdate, Relationship; dept_locations: Dnumber, Dlocation | how many female dependents are there?", "sql": "SELECT count(*) FROM dependent WHERE sex  =  'F'", "example": {"db_id": "company_1", "query": "SELECT count(*) FROM dependent WHERE sex  =  'F'", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "dependent", "WHERE", "sex", "=", "'F", "'"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "dependent", "where", "sex", "=", "value"], "question": "how many female dependents are there?", "question_toks": ["how", "many", "female", "dependents", "are", "there", "?"], "guid": 546}}
{"text": "Manufacturers: Code, Name, Headquarter, Founder, Revenue; Products: Code, Name, Price, Manufacturer | What is the headquarter of the company whose founder is James?", "sql": "SELECT headquarter FROM manufacturers WHERE founder  =  'James'", "example": {"db_id": "manufactory_1", "query": "SELECT headquarter FROM manufacturers WHERE founder  =  'James'", "query_toks": ["SELECT", "headquarter", "FROM", "manufacturers", "WHERE", "founder", "=", "'James", "'"], "query_toks_no_value": ["select", "headquarter", "from", "manufacturers", "where", "founder", "=", "value"], "question": "What is the headquarter of the company whose founder is James?", "question_toks": ["What", "is", "the", "headquarter", "of", "the", "company", "whose", "founder", "is", "James", "?"], "guid": 547}}
{"text": "regions: REGION_ID, REGION_NAME; countries: COUNTRY_ID, COUNTRY_NAME, REGION_ID; departments: DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID; jobs: JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY; employees: EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID; job_history: EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID; locations: LOCATION_ID, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_ID | What are department ids for departments with managers managing more than 3 employees?", "sql": "SELECT DISTINCT department_id FROM employees GROUP BY department_id ,  manager_id HAVING COUNT(employee_id)  >= 4", "example": {"db_id": "hr_1", "query": "SELECT DISTINCT department_id FROM employees GROUP BY department_id ,  manager_id HAVING COUNT(employee_id)  >= 4", "query_toks": ["SELECT", "DISTINCT", "department_id", "FROM", "employees", "GROUP", "BY", "department_id", ",", "manager_id", "HAVING", "COUNT", "(", "employee_id", ")", ">", "=", "4"], "query_toks_no_value": ["select", "distinct", "department_id", "from", "employees", "group", "by", "department_id", ",", "manager_id", "having", "count", "(", "employee_id", ")", ">", "=", "value"], "question": "What are department ids for departments with managers managing more than 3 employees?", "question_toks": ["What", "are", "department", "ids", "for", "departments", "with", "managers", "managing", "more", "than", "3", "employees", "?"], "guid": 548}}
{"text": "regions: REGION_ID, REGION_NAME; countries: COUNTRY_ID, COUNTRY_NAME, REGION_ID; departments: DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID; jobs: JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY; employees: EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID; job_history: EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID; locations: LOCATION_ID, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_ID | display the full name (first and last name), and salary of those employees who working in any department located in London.", "sql": "SELECT first_name ,  last_name ,  salary FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN  locations AS T3 ON T2.location_id  =  T3.location_id WHERE  T3.city  =  'London'", "example": {"db_id": "hr_1", "query": "SELECT first_name ,  last_name ,  salary FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN  locations AS T3 ON T2.location_id  =  T3.location_id WHERE  T3.city  =  'London'", "query_toks": ["SELECT", "first_name", ",", "last_name", ",", "salary", "FROM", "employees", "AS", "T1", "JOIN", "departments", "AS", "T2", "ON", "T1.department_id", "=", "T2.department_id", "JOIN", "locations", "AS", "T3", "ON", "T2.location_id", "=", "T3.location_id", "WHERE", "T3.city", "=", "'London", "'"], "query_toks_no_value": ["select", "first_name", ",", "last_name", ",", "salary", "from", "employees", "as", "t1", "join", "departments", "as", "t2", "on", "t1", ".", "department_id", "=", "t2", ".", "department_id", "join", "locations", "as", "t3", "on", "t2", ".", "location_id", "=", "t3", ".", "location_id", "where", "t3", ".", "city", "=", "value"], "question": "display the full name (first and last name), and salary of those employees who working in any department located in London.", "question_toks": ["display", "the", "full", "name", "(", "first", "and", "last", "name", ")", ",", "and", "salary", "of", "those", "employees", "who", "working", "in", "any", "department", "located", "in", "London", "."], "guid": 549}}
{"text": "regions: REGION_ID, REGION_NAME; countries: COUNTRY_ID, COUNTRY_NAME, REGION_ID; departments: DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID; jobs: JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY; employees: EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID; job_history: EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID; locations: LOCATION_ID, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_ID | display the department name and number of employees in each of the department.", "sql": "SELECT department_name ,  COUNT(*) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY department_name", "example": {"db_id": "hr_1", "query": "SELECT department_name ,  COUNT(*) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY department_name", "query_toks": ["SELECT", "department_name", ",", "COUNT", "(", "*", ")", "FROM", "employees", "AS", "T1", "JOIN", "departments", "AS", "T2", "ON", "T1.department_id", "=", "T2.department_id", "GROUP", "BY", "department_name"], "query_toks_no_value": ["select", "department_name", ",", "count", "(", "*", ")", "from", "employees", "as", "t1", "join", "departments", "as", "t2", "on", "t1", ".", "department_id", "=", "t2", ".", "department_id", "group", "by", "department_name"], "question": "display the department name and number of employees in each of the department.", "question_toks": ["display", "the", "department", "name", "and", "number", "of", "employees", "in", "each", "of", "the", "department", "."], "guid": 550}}
{"text": "Manufacturers: Code, Name, Headquarter, Founder, Revenue; Products: Code, Name, Price, Manufacturer | Return the total revenue of companies with headquarters in Tokyo or Taiwan.", "sql": "SELECT sum(revenue) FROM manufacturers WHERE Headquarter  =  'Tokyo' OR Headquarter  =  'Taiwan'", "example": {"db_id": "manufactory_1", "query": "SELECT sum(revenue) FROM manufacturers WHERE Headquarter  =  'Tokyo' OR Headquarter  =  'Taiwan'", "query_toks": ["SELECT", "sum", "(", "revenue", ")", "FROM", "manufacturers", "WHERE", "Headquarter", "=", "'Tokyo", "'", "OR", "Headquarter", "=", "'Taiwan", "'"], "query_toks_no_value": ["select", "sum", "(", "revenue", ")", "from", "manufacturers", "where", "headquarter", "=", "value", "or", "headquarter", "=", "value"], "question": "Return the total revenue of companies with headquarters in Tokyo or Taiwan.", "question_toks": ["Return", "the", "total", "revenue", "of", "companies", "with", "headquarters", "in", "Tokyo", "or", "Taiwan", "."], "guid": 551}}
{"text": "company: Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value; gas_station: Station_ID, Open_Year, Location, Manager_Name, Vice_Manager_Name, Representative_Name; station_company: Station_ID, Company_ID, Rank_of_the_Year | Show the manager name for gas stations belonging to the ExxonMobil company.", "sql": "SELECT T3.manager_name FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id WHERE T2.company  =  'ExxonMobil'", "example": {"db_id": "gas_company", "query": "SELECT T3.manager_name FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id WHERE T2.company  =  'ExxonMobil'", "query_toks": ["SELECT", "T3.manager_name", "FROM", "station_company", "AS", "T1", "JOIN", "company", "AS", "T2", "ON", "T1.company_id", "=", "T2.company_id", "JOIN", "gas_station", "AS", "T3", "ON", "T1.station_id", "=", "T3.station_id", "WHERE", "T2.company", "=", "'ExxonMobil", "'"], "query_toks_no_value": ["select", "t3", ".", "manager_name", "from", "station_company", "as", "t1", "join", "company", "as", "t2", "on", "t1", ".", "company_id", "=", "t2", ".", "company_id", "join", "gas_station", "as", "t3", "on", "t1", ".", "station_id", "=", "t3", ".", "station_id", "where", "t2", ".", "company", "=", "value"], "question": "Show the manager name for gas stations belonging to the ExxonMobil company.", "question_toks": ["Show", "the", "manager", "name", "for", "gas", "stations", "belonging", "to", "the", "ExxonMobil", "company", "."], "guid": 552}}
{"text": "buildings: id, name, City, Height, Stories, Status; Companies: id, name, Headquarters, Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value_billion; Office_locations: building_id, company_id, move_in_year | Which industry has the most companies?", "sql": "SELECT Industry FROM Companies GROUP BY Industry ORDER BY COUNT(*) DESC LIMIT 1", "example": {"db_id": "company_office", "query": "SELECT Industry FROM Companies GROUP BY Industry ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "Industry", "FROM", "Companies", "GROUP", "BY", "Industry", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "industry", "from", "companies", "group", "by", "industry", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which industry has the most companies?", "question_toks": ["Which", "industry", "has", "the", "most", "companies", "?"], "guid": 553}}
{"text": "regions: REGION_ID, REGION_NAME; countries: COUNTRY_ID, COUNTRY_NAME, REGION_ID; departments: DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID; jobs: JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY; employees: EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID; job_history: EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID; locations: LOCATION_ID, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_ID | display the employee id and salary of all employees who report to Payam (first name).", "sql": "SELECT employee_id ,  salary FROM employees WHERE manager_id  =  (SELECT employee_id FROM employees WHERE first_name  =  'Payam' )", "example": {"db_id": "hr_1", "query": "SELECT employee_id ,  salary FROM employees WHERE manager_id  =  (SELECT employee_id FROM employees WHERE first_name  =  'Payam' )", "query_toks": ["SELECT", "employee_id", ",", "salary", "FROM", "employees", "WHERE", "manager_id", "=", "(", "SELECT", "employee_id", "FROM", "employees", "WHERE", "first_name", "=", "'Payam", "'", ")"], "query_toks_no_value": ["select", "employee_id", ",", "salary", "from", "employees", "where", "manager_id", "=", "(", "select", "employee_id", "from", "employees", "where", "first_name", "=", "value", ")"], "question": "display the employee id and salary of all employees who report to Payam (first name).", "question_toks": ["display", "the", "employee", "id", "and", "salary", "of", "all", "employees", "who", "report", "to", "Payam", "(", "first", "name", ")", "."], "guid": 554}}
{"text": "continents: ContId, Continent; countries: CountryId, CountryName, Continent; car_makers: Id, Maker, FullName, Country; model_list: ModelId, Maker, Model; car_names: MakeId, Model, Make; cars_data: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year | Find the make and production time of the cars that were produced in the earliest year?", "sql": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);", "example": {"db_id": "car_1", "query": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);", "query_toks": ["SELECT", "T2.Make", ",", "T1.Year", "FROM", "CARS_DATA", "AS", "T1", "JOIN", "CAR_NAMES", "AS", "T2", "ON", "T1.Id", "=", "T2.MakeId", "WHERE", "T1.Year", "=", "(", "SELECT", "min", "(", "YEAR", ")", "FROM", "CARS_DATA", ")", ";"], "query_toks_no_value": ["select", "t2", ".", "make", ",", "t1", ".", "year", "from", "cars_data", "as", "t1", "join", "car_names", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "makeid", "where", "t1", ".", "year", "=", "(", "select", "min", "(", "year", ")", "from", "cars_data", ")"], "question": "Find the make and production time of the cars that were produced in the earliest year?", "question_toks": ["Find", "the", "make", "and", "production", "time", "of", "the", "cars", "that", "were", "produced", "in", "the", "earliest", "year", "?"], "guid": 555}}
{"text": "chip_model: Model_name, Launch_year, RAM_MiB, ROM_MiB, Slots, WiFi, Bluetooth; screen_mode: Graphics_mode, Char_cells, Pixels, Hardware_colours, used_kb, map, Type; phone: Company_name, Hardware_Model_name, Accreditation_type, Accreditation_level, Date, chip_model, screen_mode | List the hardware model name and company name for the phone whose screen mode type is \"Graphics.\"", "sql": "SELECT T2.Hardware_Model_name ,  T2.Company_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.Type  =  \"Graphics\";", "example": {"db_id": "phone_1", "query": "SELECT T2.Hardware_Model_name ,  T2.Company_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.Type  =  \"Graphics\";", "query_toks": ["SELECT", "T2.Hardware_Model_name", ",", "T2.Company_name", "FROM", "screen_mode", "AS", "T1", "JOIN", "phone", "AS", "T2", "ON", "T1.Graphics_mode", "=", "T2.screen_mode", "WHERE", "T1.Type", "=", "``", "Graphics", "''", ";"], "query_toks_no_value": ["select", "t2", ".", "hardware_model_name", ",", "t2", ".", "company_name", "from", "screen_mode", "as", "t1", "join", "phone", "as", "t2", "on", "t1", ".", "graphics_mode", "=", "t2", ".", "screen_mode", "where", "t1", ".", "type", "=", "value"], "question": "List the hardware model name and company name for the phone whose screen mode type is \"Graphics.\"", "question_toks": ["List", "the", "hardware", "model", "name", "and", "company", "name", "for", "the", "phone", "whose", "screen", "mode", "type", "is", "``", "Graphics", ".", "''"], "guid": 556}}
{"text": "regions: REGION_ID, REGION_NAME; countries: COUNTRY_ID, COUNTRY_NAME, REGION_ID; departments: DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID; jobs: JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY; employees: EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID; job_history: EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID; locations: LOCATION_ID, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_ID | what is the phone number of employees whose salary is in the range of 8000 and 12000?", "sql": "SELECT phone_number FROM employees WHERE salary BETWEEN 8000 AND 12000", "example": {"db_id": "hr_1", "query": "SELECT phone_number FROM employees WHERE salary BETWEEN 8000 AND 12000", "query_toks": ["SELECT", "phone_number", "FROM", "employees", "WHERE", "salary", "BETWEEN", "8000", "AND", "12000"], "query_toks_no_value": ["select", "phone_number", "from", "employees", "where", "salary", "between", "value", "and", "value"], "question": "what is the phone number of employees whose salary is in the range of 8000 and 12000?", "question_toks": ["what", "is", "the", "phone", "number", "of", "employees", "whose", "salary", "is", "in", "the", "range", "of", "8000", "and", "12000", "?"], "guid": 557}}
{"text": "buildings: id, name, City, Height, Stories, Status; Companies: id, name, Headquarters, Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value_billion; Office_locations: building_id, company_id, move_in_year | Show the name of the building that has the most company offices.", "sql": "SELECT T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id  =  T2.id JOIN Companies AS T3 ON T1.company_id  =  T3.id GROUP BY T1.building_id ORDER BY COUNT(*) DESC LIMIT 1", "example": {"db_id": "company_office", "query": "SELECT T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id  =  T2.id JOIN Companies AS T3 ON T1.company_id  =  T3.id GROUP BY T1.building_id ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "T2.name", "FROM", "Office_locations", "AS", "T1", "JOIN", "buildings", "AS", "T2", "ON", "T1.building_id", "=", "T2.id", "JOIN", "Companies", "AS", "T3", "ON", "T1.company_id", "=", "T3.id", "GROUP", "BY", "T1.building_id", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "office_locations", "as", "t1", "join", "buildings", "as", "t2", "on", "t1", ".", "building_id", "=", "t2", ".", "id", "join", "companies", "as", "t3", "on", "t1", ".", "company_id", "=", "t3", ".", "id", "group", "by", "t1", ".", "building_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Show the name of the building that has the most company offices.", "question_toks": ["Show", "the", "name", "of", "the", "building", "that", "has", "the", "most", "company", "offices", "."], "guid": 558}}
{"text": "employee: Employee_ID, Name, Age, City; shop: Shop_ID, Name, Location, District, Number_products, Manager_name; hiring: Shop_ID, Employee_ID, Start_from, Is_full_time; evaluation: Employee_ID, Year_awarded, Bonus | What is all the information about hiring?", "sql": "SELECT * FROM hiring", "example": {"db_id": "employee_hire_evaluation", "query": "SELECT * FROM hiring", "query_toks": ["SELECT", "*", "FROM", "hiring"], "query_toks_no_value": ["select", "*", "from", "hiring"], "question": "What is all the information about hiring?", "question_toks": ["What", "is", "all", "the", "information", "about", "hiring", "?"], "guid": 559}}
{"text": "Manufacturers: Code, Name, Headquarter, Founder, Revenue; Products: Code, Name, Price, Manufacturer | Find the number of products for each manufacturer, showing the name of each company.", "sql": "SELECT count(*) ,  T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.name", "example": {"db_id": "manufactory_1", "query": "SELECT count(*) ,  T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.name", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "T2.name", "FROM", "products", "AS", "T1", "JOIN", "manufacturers", "AS", "T2", "ON", "T1.Manufacturer", "=", "T2.code", "GROUP", "BY", "T2.name"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "t2", ".", "name", "from", "products", "as", "t1", "join", "manufacturers", "as", "t2", "on", "t1", ".", "manufacturer", "=", "t2", ".", "code", "group", "by", "t2", ".", "name"], "question": "Find the number of products for each manufacturer, showing the name of each company.", "question_toks": ["Find", "the", "number", "of", "products", "for", "each", "manufacturer", ",", "showing", "the", "name", "of", "each", "company", "."], "guid": 560}}
{"text": "regions: REGION_ID, REGION_NAME; countries: COUNTRY_ID, COUNTRY_NAME, REGION_ID; departments: DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID; jobs: JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY; employees: EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID; job_history: EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID; locations: LOCATION_ID, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_ID | What are the employee ids of employees who report to Payam, and what are their salaries?", "sql": "SELECT employee_id ,  salary FROM employees WHERE manager_id  =  (SELECT employee_id FROM employees WHERE first_name  =  'Payam' )", "example": {"db_id": "hr_1", "query": "SELECT employee_id ,  salary FROM employees WHERE manager_id  =  (SELECT employee_id FROM employees WHERE first_name  =  'Payam' )", "query_toks": ["SELECT", "employee_id", ",", "salary", "FROM", "employees", "WHERE", "manager_id", "=", "(", "SELECT", "employee_id", "FROM", "employees", "WHERE", "first_name", "=", "'Payam", "'", ")"], "query_toks_no_value": ["select", "employee_id", ",", "salary", "from", "employees", "where", "manager_id", "=", "(", "select", "employee_id", "from", "employees", "where", "first_name", "=", "value", ")"], "question": "What are the employee ids of employees who report to Payam, and what are their salaries?", "question_toks": ["What", "are", "the", "employee", "ids", "of", "employees", "who", "report", "to", "Payam", ",", "and", "what", "are", "their", "salaries", "?"], "guid": 561}}
{"text": "employee: Employee_ID, Name, Age, City; shop: Shop_ID, Name, Location, District, Number_products, Manager_name; hiring: Shop_ID, Employee_ID, Start_from, Is_full_time; evaluation: Employee_ID, Year_awarded, Bonus | What are the names of the employees who never received any evaluation?", "sql": "SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)", "example": {"db_id": "employee_hire_evaluation", "query": "SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)", "query_toks": ["SELECT", "name", "FROM", "employee", "WHERE", "Employee_ID", "NOT", "IN", "(", "SELECT", "Employee_ID", "FROM", "evaluation", ")"], "query_toks_no_value": ["select", "name", "from", "employee", "where", "employee_id", "not", "in", "(", "select", "employee_id", "from", "evaluation", ")"], "question": "What are the names of the employees who never received any evaluation?", "question_toks": ["What", "are", "the", "names", "of", "the", "employees", "who", "never", "received", "any", "evaluation", "?"], "guid": 562}}
{"text": "people: People_ID, Age, Name, Nationality, Graduation_College; company: Company_ID, Name, Headquarters, Industry, Sales_in_Billion, Profits_in_Billion, Assets_in_Billion, Market_Value_in_Billion; employment: Company_ID, People_ID, Year_working | What is the headquarter of the company with the largest sales?", "sql": "SELECT Headquarters FROM company ORDER BY Sales_in_Billion DESC LIMIT 1", "example": {"db_id": "company_employee", "query": "SELECT Headquarters FROM company ORDER BY Sales_in_Billion DESC LIMIT 1", "query_toks": ["SELECT", "Headquarters", "FROM", "company", "ORDER", "BY", "Sales_in_Billion", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "headquarters", "from", "company", "order", "by", "sales_in_billion", "desc", "limit", "value"], "question": "What is the headquarter of the company with the largest sales?", "question_toks": ["What", "is", "the", "headquarter", "of", "the", "company", "with", "the", "largest", "sales", "?"], "guid": 563}}
{"text": "Manufacturers: Code, Name, Headquarter, Founder, Revenue; Products: Code, Name, Price, Manufacturer | What is the total revenue of companies with revenue greater than the lowest revenue of any manufacturer in Austin?", "sql": "SELECT sum(revenue) FROM manufacturers WHERE revenue  >  (SELECT min(revenue) FROM manufacturers WHERE headquarter  =  'Austin')", "example": {"db_id": "manufactory_1", "query": "SELECT sum(revenue) FROM manufacturers WHERE revenue  >  (SELECT min(revenue) FROM manufacturers WHERE headquarter  =  'Austin')", "query_toks": ["SELECT", "sum", "(", "revenue", ")", "FROM", "manufacturers", "WHERE", "revenue", ">", "(", "SELECT", "min", "(", "revenue", ")", "FROM", "manufacturers", "WHERE", "headquarter", "=", "'Austin", "'", ")"], "query_toks_no_value": ["select", "sum", "(", "revenue", ")", "from", "manufacturers", "where", "revenue", ">", "(", "select", "min", "(", "revenue", ")", "from", "manufacturers", "where", "headquarter", "=", "value", ")"], "question": "What is the total revenue of companies with revenue greater than the lowest revenue of any manufacturer in Austin?", "question_toks": ["What", "is", "the", "total", "revenue", "of", "companies", "with", "revenue", "greater", "than", "the", "lowest", "revenue", "of", "any", "manufacturer", "in", "Austin", "?"], "guid": 564}}
{"text": "Manufacturers: Code, Name, Headquarter, Founder, Revenue; Products: Code, Name, Price, Manufacturer | What is the name and price of the cheapest product?", "sql": "SELECT name ,  price FROM Products ORDER BY price ASC LIMIT 1", "example": {"db_id": "manufactory_1", "query": "SELECT name ,  price FROM Products ORDER BY price ASC LIMIT 1", "query_toks": ["SELECT", "name", ",", "price", "FROM", "Products", "ORDER", "BY", "price", "ASC", "LIMIT", "1"], "query_toks_no_value": ["select", "name", ",", "price", "from", "products", "order", "by", "price", "asc", "limit", "value"], "question": "What is the name and price of the cheapest product?", "question_toks": ["What", "is", "the", "name", "and", "price", "of", "the", "cheapest", "product", "?"], "guid": 565}}
{"text": "employee: Employee_ID, Name, Age, City; shop: Shop_ID, Name, Location, District, Number_products, Manager_name; hiring: Shop_ID, Employee_ID, Start_from, Is_full_time; evaluation: Employee_ID, Year_awarded, Bonus | Find the names of stores whose number products is more than the average number of products.", "sql": "SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)", "example": {"db_id": "employee_hire_evaluation", "query": "SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)", "query_toks": ["SELECT", "name", "FROM", "shop", "WHERE", "number_products", ">", "(", "SELECT", "avg", "(", "number_products", ")", "FROM", "shop", ")"], "query_toks_no_value": ["select", "name", "from", "shop", "where", "number_products", ">", "(", "select", "avg", "(", "number_products", ")", "from", "shop", ")"], "question": "Find the names of stores whose number products is more than the average number of products.", "question_toks": ["Find", "the", "names", "of", "stores", "whose", "number", "products", "is", "more", "than", "the", "average", "number", "of", "products", "."], "guid": 566}}
{"text": "continents: ContId, Continent; countries: CountryId, CountryName, Continent; car_makers: Id, Maker, FullName, Country; model_list: ModelId, Maker, Model; car_names: MakeId, Model, Make; cars_data: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year | How many car models are produced by each maker ? Only list the count and the maker full name .", "sql": "select count(*) ,  t2.fullname from model_list as t1 join car_makers as t2 on t1.maker  =  t2.id group by t2.id;", "example": {"db_id": "car_1", "query": "select count(*) ,  t2.fullname from model_list as t1 join car_makers as t2 on t1.maker  =  t2.id group by t2.id;", "query_toks": ["select", "count", "(", "*", ")", ",", "t2.fullname", "from", "model_list", "as", "t1", "join", "car_makers", "as", "t2", "on", "t1.maker", "=", "t2.id", "group", "by", "t2.id", ";"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "t2", ".", "fullname", "from", "model_list", "as", "t1", "join", "car_makers", "as", "t2", "on", "t1", ".", "maker", "=", "t2", ".", "id", "group", "by", "t2", ".", "id"], "question": "How many car models are produced by each maker ? Only list the count and the maker full name .", "question_toks": ["How", "many", "car", "models", "are", "produced", "by", "each", "maker", "?", "Only", "list", "the", "count", "and", "the", "maker", "full", "name", "."], "guid": 567}}
{"text": "phone: Name, Phone_ID, Memory_in_G, Carrier, Price; market: Market_ID, District, Num_of_employees, Num_of_shops, Ranking; phone_market: Market_ID, Phone_ID, Num_of_stock | List the distinct carriers of phones with memories bigger than 32.", "sql": "SELECT DISTINCT Carrier FROM phone WHERE Memory_in_G  >  32", "example": {"db_id": "phone_market", "query": "SELECT DISTINCT Carrier FROM phone WHERE Memory_in_G  >  32", "query_toks": ["SELECT", "DISTINCT", "Carrier", "FROM", "phone", "WHERE", "Memory_in_G", ">", "32"], "query_toks_no_value": ["select", "distinct", "carrier", "from", "phone", "where", "memory_in_g", ">", "value"], "question": "List the distinct carriers of phones with memories bigger than 32.", "question_toks": ["List", "the", "distinct", "carriers", "of", "phones", "with", "memories", "bigger", "than", "32", "."], "guid": 568}}
{"text": "employee: Employee_ID, Name, Age, City; shop: Shop_ID, Name, Location, District, Number_products, Manager_name; hiring: Shop_ID, Employee_ID, Start_from, Is_full_time; evaluation: Employee_ID, Year_awarded, Bonus | Find the number of shops in each location.", "sql": "SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION", "example": {"db_id": "employee_hire_evaluation", "query": "SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "LOCATION", "FROM", "shop", "GROUP", "BY", "LOCATION"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "location", "from", "shop", "group", "by", "location"], "question": "Find the number of shops in each location.", "question_toks": ["Find", "the", "number", "of", "shops", "in", "each", "location", "."], "guid": 569}}
{"text": "phone: Name, Phone_ID, Memory_in_G, Carrier, Price; market: Market_ID, District, Num_of_employees, Num_of_shops, Ranking; phone_market: Market_ID, Phone_ID, Num_of_stock | What are the memories and carriers of phones?", "sql": "SELECT Memory_in_G ,  Carrier FROM phone", "example": {"db_id": "phone_market", "query": "SELECT Memory_in_G ,  Carrier FROM phone", "query_toks": ["SELECT", "Memory_in_G", ",", "Carrier", "FROM", "phone"], "query_toks_no_value": ["select", "memory_in_g", ",", "carrier", "from", "phone"], "question": "What are the memories and carriers of phones?", "question_toks": ["What", "are", "the", "memories", "and", "carriers", "of", "phones", "?"], "guid": 570}}
{"text": "Manufacturers: Code, Name, Headquarter, Founder, Revenue; Products: Code, Name, Price, Manufacturer | Select the names and the prices of all the products in the store.", "sql": "SELECT name ,  price FROM products", "example": {"db_id": "manufactory_1", "query": "SELECT name ,  price FROM products", "query_toks": ["SELECT", "name", ",", "price", "FROM", "products"], "query_toks_no_value": ["select", "name", ",", "price", "from", "products"], "question": "Select the names and the prices of all the products in the store.", "question_toks": ["Select", "the", "names", "and", "the", "prices", "of", "all", "the", "products", "in", "the", "store", "."], "guid": 571}}
{"text": "chip_model: Model_name, Launch_year, RAM_MiB, ROM_MiB, Slots, WiFi, Bluetooth; screen_mode: Graphics_mode, Char_cells, Pixels, Hardware_colours, used_kb, map, Type; phone: Company_name, Hardware_Model_name, Accreditation_type, Accreditation_level, Date, chip_model, screen_mode | What is maximum and minimum RAM size of phone produced by company named \"Nokia Corporation\"?", "sql": "SELECT max(T1.RAM_MiB) ,  min(T1.RAM_MiB) FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T2.Company_name = \"Nokia Corporation\";", "example": {"db_id": "phone_1", "query": "SELECT max(T1.RAM_MiB) ,  min(T1.RAM_MiB) FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T2.Company_name = \"Nokia Corporation\";", "query_toks": ["SELECT", "max", "(", "T1.RAM_MiB", ")", ",", "min", "(", "T1.RAM_MiB", ")", "FROM", "chip_model", "AS", "T1", "JOIN", "phone", "AS", "T2", "ON", "T1.Model_name", "=", "T2.chip_model", "WHERE", "T2.Company_name", "=", "``", "Nokia", "Corporation", "''", ";"], "query_toks_no_value": ["select", "max", "(", "t1", ".", "ram_mib", ")", ",", "min", "(", "t1", ".", "ram_mib", ")", "from", "chip_model", "as", "t1", "join", "phone", "as", "t2", "on", "t1", ".", "model_name", "=", "t2", ".", "chip_model", "where", "t2", ".", "company_name", "=", "value"], "question": "What is maximum and minimum RAM size of phone produced by company named \"Nokia Corporation\"?", "question_toks": ["What", "is", "maximum", "and", "minimum", "RAM", "size", "of", "phone", "produced", "by", "company", "named", "``", "Nokia", "Corporation", "''", "?"], "guid": 572}}
{"text": "continents: ContId, Continent; countries: CountryId, CountryName, Continent; car_makers: Id, Maker, FullName, Country; model_list: ModelId, Maker, Model; car_names: MakeId, Model, Make; cars_data: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year | What is the full name of each car maker, along with its id and how many models it produces?", "sql": "SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;", "example": {"db_id": "car_1", "query": "SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;", "query_toks": ["SELECT", "T1.FullName", ",", "T1.Id", ",", "count", "(", "*", ")", "FROM", "CAR_MAKERS", "AS", "T1", "JOIN", "MODEL_LIST", "AS", "T2", "ON", "T1.Id", "=", "T2.Maker", "GROUP", "BY", "T1.Id", ";"], "query_toks_no_value": ["select", "t1", ".", "fullname", ",", "t1", ".", "id", ",", "count", "(", "*", ")", "from", "car_makers", "as", "t1", "join", "model_list", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "maker", "group", "by", "t1", ".", "id"], "question": "What is the full name of each car maker, along with its id and how many models it produces?", "question_toks": ["What", "is", "the", "full", "name", "of", "each", "car", "maker", ",", "along", "with", "its", "id", "and", "how", "many", "models", "it", "produces", "?"], "guid": 573}}
{"text": "company: Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value; gas_station: Station_ID, Open_Year, Location, Manager_Name, Vice_Manager_Name, Representative_Name; station_company: Station_ID, Company_ID, Rank_of_the_Year | find the location and Representative name of the gas stations owned by the companies with top 3 Asset amounts.", "sql": "SELECT T3.location ,  T3.Representative_Name FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id ORDER BY T2.Assets_billion DESC LIMIT 3", "example": {"db_id": "gas_company", "query": "SELECT T3.location ,  T3.Representative_Name FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id ORDER BY T2.Assets_billion DESC LIMIT 3", "query_toks": ["SELECT", "T3.location", ",", "T3.Representative_Name", "FROM", "station_company", "AS", "T1", "JOIN", "company", "AS", "T2", "ON", "T1.company_id", "=", "T2.company_id", "JOIN", "gas_station", "AS", "T3", "ON", "T1.station_id", "=", "T3.station_id", "ORDER", "BY", "T2.Assets_billion", "DESC", "LIMIT", "3"], "query_toks_no_value": ["select", "t3", ".", "location", ",", "t3", ".", "representative_name", "from", "station_company", "as", "t1", "join", "company", "as", "t2", "on", "t1", ".", "company_id", "=", "t2", ".", "company_id", "join", "gas_station", "as", "t3", "on", "t1", ".", "station_id", "=", "t3", ".", "station_id", "order", "by", "t2", ".", "assets_billion", "desc", "limit", "value"], "question": "find the location and Representative name of the gas stations owned by the companies with top 3 Asset amounts.", "question_toks": ["find", "the", "location", "and", "Representative", "name", "of", "the", "gas", "stations", "owned", "by", "the", "companies", "with", "top", "3", "Asset", "amounts", "."], "guid": 574}}
{"text": "regions: REGION_ID, REGION_NAME; countries: COUNTRY_ID, COUNTRY_NAME, REGION_ID; departments: DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID; jobs: JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY; employees: EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID; job_history: EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID; locations: LOCATION_ID, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_ID | display the employee number, name( first name and last name ), and salary for all employees who earn more than the average salary and who work in a department with any employee with a 'J' in their first name.", "sql": "SELECT employee_id ,  first_name ,  last_name ,  salary FROM employees WHERE salary  >  ( SELECT AVG (salary) FROM employees ) AND department_id IN ( SELECT department_id FROM employees WHERE first_name LIKE '%J%')", "example": {"db_id": "hr_1", "query": "SELECT employee_id ,  first_name ,  last_name ,  salary FROM employees WHERE salary  >  ( SELECT AVG (salary) FROM employees ) AND department_id IN ( SELECT department_id FROM employees WHERE first_name LIKE '%J%')", "query_toks": ["SELECT", "employee_id", ",", "first_name", ",", "last_name", ",", "salary", "FROM", "employees", "WHERE", "salary", ">", "(", "SELECT", "AVG", "(", "salary", ")", "FROM", "employees", ")", "AND", "department_id", "IN", "(", "SELECT", "department_id", "FROM", "employees", "WHERE", "first_name", "LIKE", "'", "%", "J", "%", "'", ")"], "query_toks_no_value": ["select", "employee_id", ",", "first_name", ",", "last_name", ",", "salary", "from", "employees", "where", "salary", ">", "(", "select", "avg", "(", "salary", ")", "from", "employees", ")", "and", "department_id", "in", "(", "select", "department_id", "from", "employees", "where", "first_name", "like", "value", ")"], "question": "display the employee number, name( first name and last name ), and salary for all employees who earn more than the average salary and who work in a department with any employee with a 'J' in their first name.", "question_toks": ["display", "the", "employee", "number", ",", "name", "(", "first", "name", "and", "last", "name", ")", ",", "and", "salary", "for", "all", "employees", "who", "earn", "more", "than", "the", "average", "salary", "and", "who", "work", "in", "a", "department", "with", "any", "employee", "with", "a", "'J", "'", "in", "their", "first", "name", "."], "guid": 575}}
{"text": "people: People_ID, Age, Name, Nationality, Graduation_College; company: Company_ID, Name, Headquarters, Industry, Sales_in_Billion, Profits_in_Billion, Assets_in_Billion, Market_Value_in_Billion; employment: Company_ID, People_ID, Year_working | What are the headquarters and industries of all companies?", "sql": "SELECT Headquarters ,  Industry FROM company", "example": {"db_id": "company_employee", "query": "SELECT Headquarters ,  Industry FROM company", "query_toks": ["SELECT", "Headquarters", ",", "Industry", "FROM", "company"], "query_toks_no_value": ["select", "headquarters", ",", "industry", "from", "company"], "question": "What are the headquarters and industries of all companies?", "question_toks": ["What", "are", "the", "headquarters", "and", "industries", "of", "all", "companies", "?"], "guid": 576}}
{"text": "Manufacturers: Code, Name, Headquarter, Founder, Revenue; Products: Code, Name, Price, Manufacturer | What is all the information of all the products that have a price between 60 and 120?", "sql": "SELECT * FROM products WHERE price BETWEEN 60 AND 120", "example": {"db_id": "manufactory_1", "query": "SELECT * FROM products WHERE price BETWEEN 60 AND 120", "query_toks": ["SELECT", "*", "FROM", "products", "WHERE", "price", "BETWEEN", "60", "AND", "120"], "query_toks_no_value": ["select", "*", "from", "products", "where", "price", "between", "value", "and", "value"], "question": "What is all the information of all the products that have a price between 60 and 120?", "question_toks": ["What", "is", "all", "the", "information", "of", "all", "the", "products", "that", "have", "a", "price", "between", "60", "and", "120", "?"], "guid": 577}}
{"text": "Manufacturers: Code, Name, Headquarter, Founder, Revenue; Products: Code, Name, Price, Manufacturer | Select the names of all the products in the store.", "sql": "SELECT Name FROM Products", "example": {"db_id": "manufactory_1", "query": "SELECT Name FROM Products", "query_toks": ["SELECT", "Name", "FROM", "Products"], "query_toks_no_value": ["select", "name", "from", "products"], "question": "Select the names of all the products in the store.", "question_toks": ["Select", "the", "names", "of", "all", "the", "products", "in", "the", "store", "."], "guid": 578}}
{"text": "continents: ContId, Continent; countries: CountryId, CountryName, Continent; car_makers: Id, Maker, FullName, Country; model_list: ModelId, Maker, Model; car_names: MakeId, Model, Make; cars_data: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year | How many continents are there?", "sql": "SELECT count(*) FROM CONTINENTS;", "example": {"db_id": "car_1", "query": "SELECT count(*) FROM CONTINENTS;", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "CONTINENTS", ";"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "continents"], "question": "How many continents are there?", "question_toks": ["How", "many", "continents", "are", "there", "?"], "guid": 579}}
{"text": "regions: REGION_ID, REGION_NAME; countries: COUNTRY_ID, COUNTRY_NAME, REGION_ID; departments: DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID; jobs: JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY; employees: EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID; job_history: EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID; locations: LOCATION_ID, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_ID | What is all the information regarding employees who are managers?", "sql": "SELECT DISTINCT * FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id WHERE T1.employee_id  =  T2.manager_id", "example": {"db_id": "hr_1", "query": "SELECT DISTINCT * FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id WHERE T1.employee_id  =  T2.manager_id", "query_toks": ["SELECT", "DISTINCT", "*", "FROM", "employees", "AS", "T1", "JOIN", "departments", "AS", "T2", "ON", "T1.department_id", "=", "T2.department_id", "WHERE", "T1.employee_id", "=", "T2.manager_id"], "query_toks_no_value": ["select", "distinct", "*", "from", "employees", "as", "t1", "join", "departments", "as", "t2", "on", "t1", ".", "department_id", "=", "t2", ".", "department_id", "where", "t1", ".", "employee_id", "=", "t2", ".", "manager_id"], "question": "What is all the information regarding employees who are managers?", "question_toks": ["What", "is", "all", "the", "information", "regarding", "employees", "who", "are", "managers", "?"], "guid": 580}}
{"text": "chip_model: Model_name, Launch_year, RAM_MiB, ROM_MiB, Slots, WiFi, Bluetooth; screen_mode: Graphics_mode, Char_cells, Pixels, Hardware_colours, used_kb, map, Type; phone: Company_name, Hardware_Model_name, Accreditation_type, Accreditation_level, Date, chip_model, screen_mode | Find the average ram mib size of the chip models that are never used by any phone.", "sql": "SELECT avg(RAM_MiB) FROM chip_model WHERE model_name NOT IN (SELECT chip_model FROM phone)", "example": {"db_id": "phone_1", "query": "SELECT avg(RAM_MiB) FROM chip_model WHERE model_name NOT IN (SELECT chip_model FROM phone)", "query_toks": ["SELECT", "avg", "(", "RAM_MiB", ")", "FROM", "chip_model", "WHERE", "model_name", "NOT", "IN", "(", "SELECT", "chip_model", "FROM", "phone", ")"], "query_toks_no_value": ["select", "avg", "(", "ram_mib", ")", "from", "chip_model", "where", "model_name", "not", "in", "(", "select", "chip_model", "from", "phone", ")"], "question": "Find the average ram mib size of the chip models that are never used by any phone.", "question_toks": ["Find", "the", "average", "ram", "mib", "size", "of", "the", "chip", "models", "that", "are", "never", "used", "by", "any", "phone", "."], "guid": 581}}
{"text": "company: Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value; gas_station: Station_ID, Open_Year, Location, Manager_Name, Vice_Manager_Name, Representative_Name; station_company: Station_ID, Company_ID, Rank_of_the_Year | List the company name and rank for all companies in the decreasing order of their sales.", "sql": "SELECT company ,  rank FROM company ORDER BY Sales_billion DESC", "example": {"db_id": "gas_company", "query": "SELECT company ,  rank FROM company ORDER BY Sales_billion DESC", "query_toks": ["SELECT", "company", ",", "rank", "FROM", "company", "ORDER", "BY", "Sales_billion", "DESC"], "query_toks_no_value": ["select", "company", ",", "rank", "from", "company", "order", "by", "sales_billion", "desc"], "question": "List the company name and rank for all companies in the decreasing order of their sales.", "question_toks": ["List", "the", "company", "name", "and", "rank", "for", "all", "companies", "in", "the", "decreasing", "order", "of", "their", "sales", "."], "guid": 582}}
{"text": "company: Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value; gas_station: Station_ID, Open_Year, Location, Manager_Name, Vice_Manager_Name, Representative_Name; station_company: Station_ID, Company_ID, Rank_of_the_Year | What are the headquarters that have both a company in the banking and 'oil and gas' industries?", "sql": "SELECT headquarters FROM company WHERE main_industry  =  'Banking' INTERSECT SELECT headquarters FROM company WHERE main_industry  =  'Oil and gas'", "example": {"db_id": "gas_company", "query": "SELECT headquarters FROM company WHERE main_industry  =  'Banking' INTERSECT SELECT headquarters FROM company WHERE main_industry  =  'Oil and gas'", "query_toks": ["SELECT", "headquarters", "FROM", "company", "WHERE", "main_industry", "=", "'Banking", "'", "INTERSECT", "SELECT", "headquarters", "FROM", "company", "WHERE", "main_industry", "=", "'Oil", "and", "gas", "'"], "query_toks_no_value": ["select", "headquarters", "from", "company", "where", "main_industry", "=", "value", "intersect", "select", "headquarters", "from", "company", "where", "main_industry", "=", "value"], "question": "What are the headquarters that have both a company in the banking and 'oil and gas' industries?", "question_toks": ["What", "are", "the", "headquarters", "that", "have", "both", "a", "company", "in", "the", "banking", "and", "'oil", "and", "gas", "'", "industries", "?"], "guid": 583}}
{"text": "company: Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value; gas_station: Station_ID, Open_Year, Location, Manager_Name, Vice_Manager_Name, Representative_Name; station_company: Station_ID, Company_ID, Rank_of_the_Year | Show company name and main industry without a gas station.", "sql": "SELECT company ,  main_industry FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company)", "example": {"db_id": "gas_company", "query": "SELECT company ,  main_industry FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company)", "query_toks": ["SELECT", "company", ",", "main_industry", "FROM", "company", "WHERE", "company_id", "NOT", "IN", "(", "SELECT", "company_id", "FROM", "station_company", ")"], "query_toks_no_value": ["select", "company", ",", "main_industry", "from", "company", "where", "company_id", "not", "in", "(", "select", "company_id", "from", "station_company", ")"], "question": "Show company name and main industry without a gas station.", "question_toks": ["Show", "company", "name", "and", "main", "industry", "without", "a", "gas", "station", "."], "guid": 584}}
{"text": "Manufacturers: Code, Name, Headquarter, Founder, Revenue; Products: Code, Name, Price, Manufacturer | What are the names, headquarters and founders of the company with the highest revenue?", "sql": "SELECT name ,  headquarter ,  founder FROM manufacturers ORDER BY revenue DESC LIMIT 1", "example": {"db_id": "manufactory_1", "query": "SELECT name ,  headquarter ,  founder FROM manufacturers ORDER BY revenue DESC LIMIT 1", "query_toks": ["SELECT", "name", ",", "headquarter", ",", "founder", "FROM", "manufacturers", "ORDER", "BY", "revenue", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "name", ",", "headquarter", ",", "founder", "from", "manufacturers", "order", "by", "revenue", "desc", "limit", "value"], "question": "What are the names, headquarters and founders of the company with the highest revenue?", "question_toks": ["What", "are", "the", "names", ",", "headquarters", "and", "founders", "of", "the", "company", "with", "the", "highest", "revenue", "?"], "guid": 585}}
{"text": "buildings: id, name, City, Height, Stories, Status; Companies: id, name, Headquarters, Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value_billion; Office_locations: building_id, company_id, move_in_year | List the names of buildings that have no company office.", "sql": "SELECT name FROM buildings WHERE id NOT IN (SELECT building_id FROM Office_locations)", "example": {"db_id": "company_office", "query": "SELECT name FROM buildings WHERE id NOT IN (SELECT building_id FROM Office_locations)", "query_toks": ["SELECT", "name", "FROM", "buildings", "WHERE", "id", "NOT", "IN", "(", "SELECT", "building_id", "FROM", "Office_locations", ")"], "query_toks_no_value": ["select", "name", "from", "buildings", "where", "id", "not", "in", "(", "select", "building_id", "from", "office_locations", ")"], "question": "List the names of buildings that have no company office.", "question_toks": ["List", "the", "names", "of", "buildings", "that", "have", "no", "company", "office", "."], "guid": 586}}
{"text": "manufacturer: Manufacturer_ID, Open_Year, Name, Num_of_Factories, Num_of_Shops; furniture: Furniture_ID, Name, Num_of_Component, Market_Rate; furniture_manufacte: Manufacturer_ID, Furniture_ID, Price_in_Dollar | Return the name and id of the furniture with the highest market rate.", "sql": "SELECT name ,  furniture_id FROM furniture ORDER BY market_rate DESC LIMIT 1", "example": {"db_id": "manufacturer", "query": "SELECT name ,  furniture_id FROM furniture ORDER BY market_rate DESC LIMIT 1", "query_toks": ["SELECT", "name", ",", "furniture_id", "FROM", "furniture", "ORDER", "BY", "market_rate", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "name", ",", "furniture_id", "from", "furniture", "order", "by", "market_rate", "desc", "limit", "value"], "question": "Return the name and id of the furniture with the highest market rate.", "question_toks": ["Return", "the", "name", "and", "id", "of", "the", "furniture", "with", "the", "highest", "market", "rate", "."], "guid": 587}}
{"text": "continents: ContId, Continent; countries: CountryId, CountryName, Continent; car_makers: Id, Maker, FullName, Country; model_list: ModelId, Maker, Model; car_names: MakeId, Model, Make; cars_data: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year | What is the number of cars with more than 4 cylinders?", "sql": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;", "example": {"db_id": "car_1", "query": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "CARS_DATA", "WHERE", "Cylinders", ">", "4", ";"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "cars_data", "where", "cylinders", ">", "value"], "question": "What is the number of cars with more than 4 cylinders?", "question_toks": ["What", "is", "the", "number", "of", "cars", "with", "more", "than", "4", "cylinders", "?"], "guid": 588}}
{"text": "continents: ContId, Continent; countries: CountryId, CountryName, Continent; car_makers: Id, Maker, FullName, Country; model_list: ModelId, Maker, Model; car_names: MakeId, Model, Make; cars_data: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year | What is the model for the car with a weight smaller than the average?", "sql": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)", "example": {"db_id": "car_1", "query": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)", "query_toks": ["SELECT", "T1.model", "FROM", "CAR_NAMES", "AS", "T1", "JOIN", "CARS_DATA", "AS", "T2", "ON", "T1.MakeId", "=", "T2.Id", "WHERE", "T2.Weight", "<", "(", "SELECT", "avg", "(", "Weight", ")", "FROM", "CARS_DATA", ")"], "query_toks_no_value": ["select", "t1", ".", "model", "from", "car_names", "as", "t1", "join", "cars_data", "as", "t2", "on", "t1", ".", "makeid", "=", "t2", ".", "id", "where", "t2", ".", "weight", "<", "(", "select", "avg", "(", "weight", ")", "from", "cars_data", ")"], "question": "What is the model for the car with a weight smaller than the average?", "question_toks": ["What", "is", "the", "model", "for", "the", "car", "with", "a", "weight", "smaller", "than", "the", "average", "?"], "guid": 589}}
{"text": "buildings: id, name, City, Height, Stories, Status; Companies: id, name, Headquarters, Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value_billion; Office_locations: building_id, company_id, move_in_year | What are the maximum and minimum sales of the companies whose industries are not \"Banking\".", "sql": "SELECT max(Sales_billion) ,  min(Sales_billion) FROM Companies WHERE Industry != \"Banking\"", "example": {"db_id": "company_office", "query": "SELECT max(Sales_billion) ,  min(Sales_billion) FROM Companies WHERE Industry != \"Banking\"", "query_toks": ["SELECT", "max", "(", "Sales_billion", ")", ",", "min", "(", "Sales_billion", ")", "FROM", "Companies", "WHERE", "Industry", "!", "=", "``", "Banking", "''"], "query_toks_no_value": ["select", "max", "(", "sales_billion", ")", ",", "min", "(", "sales_billion", ")", "from", "companies", "where", "industry", "!", "=", "value"], "question": "What are the maximum and minimum sales of the companies whose industries are not \"Banking\".", "question_toks": ["What", "are", "the", "maximum", "and", "minimum", "sales", "of", "the", "companies", "whose", "industries", "are", "not", "``", "Banking", "''", "."], "guid": 590}}
{"text": "Manufacturers: Code, Name, Headquarter, Founder, Revenue; Products: Code, Name, Price, Manufacturer | What are the names and average prices of products for manufacturers whose products cost on average 150 or more?", "sql": "SELECT avg(T1.Price) ,  T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code GROUP BY T2.name HAVING avg(T1.price) >= 150", "example": {"db_id": "manufactory_1", "query": "SELECT avg(T1.Price) ,  T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code GROUP BY T2.name HAVING avg(T1.price) >= 150", "query_toks": ["SELECT", "avg", "(", "T1.Price", ")", ",", "T2.name", "FROM", "products", "AS", "T1", "JOIN", "Manufacturers", "AS", "T2", "ON", "T1.manufacturer", "=", "T2.code", "GROUP", "BY", "T2.name", "HAVING", "avg", "(", "T1.price", ")", ">", "=", "150"], "query_toks_no_value": ["select", "avg", "(", "t1", ".", "price", ")", ",", "t2", ".", "name", "from", "products", "as", "t1", "join", "manufacturers", "as", "t2", "on", "t1", ".", "manufacturer", "=", "t2", ".", "code", "group", "by", "t2", ".", "name", "having", "avg", "(", "t1", ".", "price", ")", ">", "=", "value"], "question": "What are the names and average prices of products for manufacturers whose products cost on average 150 or more?", "question_toks": ["What", "are", "the", "names", "and", "average", "prices", "of", "products", "for", "manufacturers", "whose", "products", "cost", "on", "average", "150", "or", "more", "?"], "guid": 591}}
{"text": "employee: Employee_ID, Name, Age, City; shop: Shop_ID, Name, Location, District, Number_products, Manager_name; hiring: Shop_ID, Employee_ID, Start_from, Is_full_time; evaluation: Employee_ID, Year_awarded, Bonus | Which cities do more than one employee under age 30 come from?", "sql": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1", "example": {"db_id": "employee_hire_evaluation", "query": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1", "query_toks": ["SELECT", "city", "FROM", "employee", "WHERE", "age", "<", "30", "GROUP", "BY", "city", "HAVING", "count", "(", "*", ")", ">", "1"], "query_toks_no_value": ["select", "city", "from", "employee", "where", "age", "<", "value", "group", "by", "city", "having", "count", "(", "*", ")", ">", "value"], "question": "Which cities do more than one employee under age 30 come from?", "question_toks": ["Which", "cities", "do", "more", "than", "one", "employee", "under", "age", "30", "come", "from", "?"], "guid": 592}}
{"text": "company: Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value; gas_station: Station_ID, Open_Year, Location, Manager_Name, Vice_Manager_Name, Representative_Name; station_company: Station_ID, Company_ID, Rank_of_the_Year | Show the company name with the number of gas station.", "sql": "SELECT T2.company ,  count(*) FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id GROUP BY T1.company_id", "example": {"db_id": "gas_company", "query": "SELECT T2.company ,  count(*) FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id GROUP BY T1.company_id", "query_toks": ["SELECT", "T2.company", ",", "count", "(", "*", ")", "FROM", "station_company", "AS", "T1", "JOIN", "company", "AS", "T2", "ON", "T1.company_id", "=", "T2.company_id", "GROUP", "BY", "T1.company_id"], "query_toks_no_value": ["select", "t2", ".", "company", ",", "count", "(", "*", ")", "from", "station_company", "as", "t1", "join", "company", "as", "t2", "on", "t1", ".", "company_id", "=", "t2", ".", "company_id", "group", "by", "t1", ".", "company_id"], "question": "Show the company name with the number of gas station.", "question_toks": ["Show", "the", "company", "name", "with", "the", "number", "of", "gas", "station", "."], "guid": 593}}
{"text": "Manufacturers: Code, Name, Headquarter, Founder, Revenue; Products: Code, Name, Price, Manufacturer | What is the sum of revenue from companies with headquarters in Austin?", "sql": "SELECT sum(revenue) FROM manufacturers WHERE headquarter  =  'Austin'", "example": {"db_id": "manufactory_1", "query": "SELECT sum(revenue) FROM manufacturers WHERE headquarter  =  'Austin'", "query_toks": ["SELECT", "sum", "(", "revenue", ")", "FROM", "manufacturers", "WHERE", "headquarter", "=", "'Austin", "'"], "query_toks_no_value": ["select", "sum", "(", "revenue", ")", "from", "manufacturers", "where", "headquarter", "=", "value"], "question": "What is the sum of revenue from companies with headquarters in Austin?", "question_toks": ["What", "is", "the", "sum", "of", "revenue", "from", "companies", "with", "headquarters", "in", "Austin", "?"], "guid": 594}}
{"text": "employee: Employee_ID, Name, Age, City; shop: Shop_ID, Name, Location, District, Number_products, Manager_name; hiring: Shop_ID, Employee_ID, Start_from, Is_full_time; evaluation: Employee_ID, Year_awarded, Bonus | find the name of employee who was awarded the most times in the evaluation.", "sql": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "employee_hire_evaluation", "query": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "t1.name", "FROM", "employee", "AS", "t1", "JOIN", "evaluation", "AS", "t2", "ON", "t1.Employee_ID", "=", "t2.Employee_ID", "GROUP", "BY", "t2.Employee_ID", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "employee", "as", "t1", "join", "evaluation", "as", "t2", "on", "t1", ".", "employee_id", "=", "t2", ".", "employee_id", "group", "by", "t2", ".", "employee_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "find the name of employee who was awarded the most times in the evaluation.", "question_toks": ["find", "the", "name", "of", "employee", "who", "was", "awarded", "the", "most", "times", "in", "the", "evaluation", "."], "guid": 595}}
{"text": "regions: REGION_ID, REGION_NAME; countries: COUNTRY_ID, COUNTRY_NAME, REGION_ID; departments: DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID; jobs: JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY; employees: EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID; job_history: EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID; locations: LOCATION_ID, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_ID | What is the full name ( first name and last name ) for those employees who gets more salary than the employee whose id is 163?", "sql": "SELECT first_name ,  last_name FROM employees WHERE salary  >  (SELECT salary FROM employees WHERE employee_id = 163 )", "example": {"db_id": "hr_1", "query": "SELECT first_name ,  last_name FROM employees WHERE salary  >  (SELECT salary FROM employees WHERE employee_id = 163 )", "query_toks": ["SELECT", "first_name", ",", "last_name", "FROM", "employees", "WHERE", "salary", ">", "(", "SELECT", "salary", "FROM", "employees", "WHERE", "employee_id", "=", "163", ")"], "query_toks_no_value": ["select", "first_name", ",", "last_name", "from", "employees", "where", "salary", ">", "(", "select", "salary", "from", "employees", "where", "employee_id", "=", "value", ")"], "question": "What is the full name ( first name and last name ) for those employees who gets more salary than the employee whose id is 163?", "question_toks": ["What", "is", "the", "full", "name", "(", "first", "name", "and", "last", "name", ")", "for", "those", "employees", "who", "gets", "more", "salary", "than", "the", "employee", "whose", "id", "is", "163", "?"], "guid": 596}}
{"text": "Manufacturers: Code, Name, Headquarter, Founder, Revenue; Products: Code, Name, Price, Manufacturer | What are the names and prices of products that cost at least 180, sorted by price decreasing and name ascending?", "sql": "SELECT name ,  price FROM products WHERE price  >=  180 ORDER BY price DESC ,  name ASC", "example": {"db_id": "manufactory_1", "query": "SELECT name ,  price FROM products WHERE price  >=  180 ORDER BY price DESC ,  name ASC", "query_toks": ["SELECT", "name", ",", "price", "FROM", "products", "WHERE", "price", ">", "=", "180", "ORDER", "BY", "price", "DESC", ",", "name", "ASC"], "query_toks_no_value": ["select", "name", ",", "price", "from", "products", "where", "price", ">", "=", "value", "order", "by", "price", "desc", ",", "name", "asc"], "question": "What are the names and prices of products that cost at least 180, sorted by price decreasing and name ascending?", "question_toks": ["What", "are", "the", "names", "and", "prices", "of", "products", "that", "cost", "at", "least", "180", ",", "sorted", "by", "price", "decreasing", "and", "name", "ascending", "?"], "guid": 597}}
{"text": "buildings: id, name, City, Height, Stories, Status; Companies: id, name, Headquarters, Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value_billion; Office_locations: building_id, company_id, move_in_year | Show the names of the buildings that have more than one company offices.", "sql": "SELECT T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id  =  T2.id JOIN Companies AS T3 ON T1.company_id  =  T3.id GROUP BY T1.building_id HAVING COUNT(*)  >  1", "example": {"db_id": "company_office", "query": "SELECT T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id  =  T2.id JOIN Companies AS T3 ON T1.company_id  =  T3.id GROUP BY T1.building_id HAVING COUNT(*)  >  1", "query_toks": ["SELECT", "T2.name", "FROM", "Office_locations", "AS", "T1", "JOIN", "buildings", "AS", "T2", "ON", "T1.building_id", "=", "T2.id", "JOIN", "Companies", "AS", "T3", "ON", "T1.company_id", "=", "T3.id", "GROUP", "BY", "T1.building_id", "HAVING", "COUNT", "(", "*", ")", ">", "1"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "office_locations", "as", "t1", "join", "buildings", "as", "t2", "on", "t1", ".", "building_id", "=", "t2", ".", "id", "join", "companies", "as", "t3", "on", "t1", ".", "company_id", "=", "t3", ".", "id", "group", "by", "t1", ".", "building_id", "having", "count", "(", "*", ")", ">", "value"], "question": "Show the names of the buildings that have more than one company offices.", "question_toks": ["Show", "the", "names", "of", "the", "buildings", "that", "have", "more", "than", "one", "company", "offices", "."], "guid": 598}}
{"text": "regions: REGION_ID, REGION_NAME; countries: COUNTRY_ID, COUNTRY_NAME, REGION_ID; departments: DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID; jobs: JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY; employees: EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID; job_history: EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID; locations: LOCATION_ID, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_ID | What are the job ids corresponding to jobs with average salary above 8000?", "sql": "SELECT job_id FROM employees GROUP BY job_id HAVING AVG(salary) > 8000", "example": {"db_id": "hr_1", "query": "SELECT job_id FROM employees GROUP BY job_id HAVING AVG(salary) > 8000", "query_toks": ["SELECT", "job_id", "FROM", "employees", "GROUP", "BY", "job_id", "HAVING", "AVG", "(", "salary", ")", ">", "8000"], "query_toks_no_value": ["select", "job_id", "from", "employees", "group", "by", "job_id", "having", "avg", "(", "salary", ")", ">", "value"], "question": "What are the job ids corresponding to jobs with average salary above 8000?", "question_toks": ["What", "are", "the", "job", "ids", "corresponding", "to", "jobs", "with", "average", "salary", "above", "8000", "?"], "guid": 599}}
{"text": "continents: ContId, Continent; countries: CountryId, CountryName, Continent; car_makers: Id, Maker, FullName, Country; model_list: ModelId, Maker, Model; car_names: MakeId, Model, Make; cars_data: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year | How many car models are produced in the usa?", "sql": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';", "example": {"db_id": "car_1", "query": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "MODEL_LIST", "AS", "T1", "JOIN", "CAR_MAKERS", "AS", "T2", "ON", "T1.Maker", "=", "T2.Id", "JOIN", "COUNTRIES", "AS", "T3", "ON", "T2.Country", "=", "T3.CountryId", "WHERE", "T3.CountryName", "=", "'usa", "'", ";"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "model_list", "as", "t1", "join", "car_makers", "as", "t2", "on", "t1", ".", "maker", "=", "t2", ".", "id", "join", "countries", "as", "t3", "on", "t2", ".", "country", "=", "t3", ".", "countryid", "where", "t3", ".", "countryname", "=", "value"], "question": "How many car models are produced in the usa?", "question_toks": ["How", "many", "car", "models", "are", "produced", "in", "the", "usa", "?"], "guid": 600}}
{"text": "Manufacturers: Code, Name, Headquarter, Founder, Revenue; Products: Code, Name, Price, Manufacturer | Select the average price of each manufacturer's products, showing only the manufacturer's code.", "sql": "SELECT AVG(Price) ,  Manufacturer FROM Products GROUP BY Manufacturer", "example": {"db_id": "manufactory_1", "query": "SELECT AVG(Price) ,  Manufacturer FROM Products GROUP BY Manufacturer", "query_toks": ["SELECT", "AVG", "(", "Price", ")", ",", "Manufacturer", "FROM", "Products", "GROUP", "BY", "Manufacturer"], "query_toks_no_value": ["select", "avg", "(", "price", ")", ",", "manufacturer", "from", "products", "group", "by", "manufacturer"], "question": "Select the average price of each manufacturer's products, showing only the manufacturer's code.", "question_toks": ["Select", "the", "average", "price", "of", "each", "manufacturer", "'s", "products", ",", "showing", "only", "the", "manufacturer", "'s", "code", "."], "guid": 601}}
{"text": "regions: REGION_ID, REGION_NAME; countries: COUNTRY_ID, COUNTRY_NAME, REGION_ID; departments: DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID; jobs: JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY; employees: EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID; job_history: EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID; locations: LOCATION_ID, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_ID | Find the salary and manager number for those employees who is working under a manager.", "sql": "SELECT salary ,  manager_id FROM employees WHERE manager_id != \"null\"", "example": {"db_id": "hr_1", "query": "SELECT salary ,  manager_id FROM employees WHERE manager_id != \"null\"", "query_toks": ["SELECT", "salary", ",", "manager_id", "FROM", "employees", "WHERE", "manager_id", "!", "=", "``", "null", "''"], "query_toks_no_value": ["select", "salary", ",", "manager_id", "from", "employees", "where", "manager_id", "!", "=", "value"], "question": "Find the salary and manager number for those employees who is working under a manager.", "question_toks": ["Find", "the", "salary", "and", "manager", "number", "for", "those", "employees", "who", "is", "working", "under", "a", "manager", "."], "guid": 602}}
{"text": "employee: Employee_ID, Name, Age, City; shop: Shop_ID, Name, Location, District, Number_products, Manager_name; hiring: Shop_ID, Employee_ID, Start_from, Is_full_time; evaluation: Employee_ID, Year_awarded, Bonus | Sort employee names by their age in ascending order.", "sql": "SELECT name FROM employee ORDER BY age", "example": {"db_id": "employee_hire_evaluation", "query": "SELECT name FROM employee ORDER BY age", "query_toks": ["SELECT", "name", "FROM", "employee", "ORDER", "BY", "age"], "query_toks_no_value": ["select", "name", "from", "employee", "order", "by", "age"], "question": "Sort employee names by their age in ascending order.", "question_toks": ["Sort", "employee", "names", "by", "their", "age", "in", "ascending", "order", "."], "guid": 603}}
{"text": "Manufacturers: Code, Name, Headquarter, Founder, Revenue; Products: Code, Name, Price, Manufacturer | What are the names and headquarters of all manufacturers, ordered by revenue descending?", "sql": "SELECT name ,  headquarter FROM manufacturers ORDER BY revenue DESC", "example": {"db_id": "manufactory_1", "query": "SELECT name ,  headquarter FROM manufacturers ORDER BY revenue DESC", "query_toks": ["SELECT", "name", ",", "headquarter", "FROM", "manufacturers", "ORDER", "BY", "revenue", "DESC"], "query_toks_no_value": ["select", "name", ",", "headquarter", "from", "manufacturers", "order", "by", "revenue", "desc"], "question": "What are the names and headquarters of all manufacturers, ordered by revenue descending?", "question_toks": ["What", "are", "the", "names", "and", "headquarters", "of", "all", "manufacturers", ",", "ordered", "by", "revenue", "descending", "?"], "guid": 604}}
{"text": "employee: Employee_ID, Name, Age, City; shop: Shop_ID, Name, Location, District, Number_products, Manager_name; hiring: Shop_ID, Employee_ID, Start_from, Is_full_time; evaluation: Employee_ID, Year_awarded, Bonus | Find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products.", "sql": "SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000", "example": {"db_id": "employee_hire_evaluation", "query": "SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000", "query_toks": ["SELECT", "district", "FROM", "shop", "WHERE", "Number_products", "<", "3000", "INTERSECT", "SELECT", "district", "FROM", "shop", "WHERE", "Number_products", ">", "10000"], "query_toks_no_value": ["select", "district", "from", "shop", "where", "number_products", "<", "value", "intersect", "select", "district", "from", "shop", "where", "number_products", ">", "value"], "question": "Find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products.", "question_toks": ["Find", "the", "districts", "in", "which", "there", "are", "both", "shops", "selling", "less", "than", "3000", "products", "and", "shops", "selling", "more", "than", "10000", "products", "."], "guid": 605}}
{"text": "continents: ContId, Continent; countries: CountryId, CountryName, Continent; car_makers: Id, Maker, FullName, Country; model_list: ModelId, Maker, Model; car_names: MakeId, Model, Make; cars_data: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year | What is the name of each continent and how many car makers are there in each one?", "sql": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;", "example": {"db_id": "car_1", "query": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;", "query_toks": ["SELECT", "T1.Continent", ",", "count", "(", "*", ")", "FROM", "CONTINENTS", "AS", "T1", "JOIN", "COUNTRIES", "AS", "T2", "ON", "T1.ContId", "=", "T2.continent", "JOIN", "car_makers", "AS", "T3", "ON", "T2.CountryId", "=", "T3.Country", "GROUP", "BY", "T1.Continent", ";"], "query_toks_no_value": ["select", "t1", ".", "continent", ",", "count", "(", "*", ")", "from", "continents", "as", "t1", "join", "countries", "as", "t2", "on", "t1", ".", "contid", "=", "t2", ".", "continent", "join", "car_makers", "as", "t3", "on", "t2", ".", "countryid", "=", "t3", ".", "country", "group", "by", "t1", ".", "continent"], "question": "What is the name of each continent and how many car makers are there in each one?", "question_toks": ["What", "is", "the", "name", "of", "each", "continent", "and", "how", "many", "car", "makers", "are", "there", "in", "each", "one", "?"], "guid": 606}}
{"text": "company: Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value; gas_station: Station_ID, Open_Year, Location, Manager_Name, Vice_Manager_Name, Representative_Name; station_company: Station_ID, Company_ID, Rank_of_the_Year | List the main industry with highest total market value and its number of companies.", "sql": "SELECT main_industry ,  count(*) FROM company GROUP BY main_industry ORDER BY sum(market_value) DESC LIMIT 1", "example": {"db_id": "gas_company", "query": "SELECT main_industry ,  count(*) FROM company GROUP BY main_industry ORDER BY sum(market_value) DESC LIMIT 1", "query_toks": ["SELECT", "main_industry", ",", "count", "(", "*", ")", "FROM", "company", "GROUP", "BY", "main_industry", "ORDER", "BY", "sum", "(", "market_value", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "main_industry", ",", "count", "(", "*", ")", "from", "company", "group", "by", "main_industry", "order", "by", "sum", "(", "market_value", ")", "desc", "limit", "value"], "question": "List the main industry with highest total market value and its number of companies.", "question_toks": ["List", "the", "main", "industry", "with", "highest", "total", "market", "value", "and", "its", "number", "of", "companies", "."], "guid": 607}}
{"text": "Manufacturers: Code, Name, Headquarter, Founder, Revenue; Products: Code, Name, Price, Manufacturer | Find the total revenue of companies of each founder.", "sql": "SELECT sum(revenue) ,  founder FROM manufacturers GROUP BY founder", "example": {"db_id": "manufactory_1", "query": "SELECT sum(revenue) ,  founder FROM manufacturers GROUP BY founder", "query_toks": ["SELECT", "sum", "(", "revenue", ")", ",", "founder", "FROM", "manufacturers", "GROUP", "BY", "founder"], "query_toks_no_value": ["select", "sum", "(", "revenue", ")", ",", "founder", "from", "manufacturers", "group", "by", "founder"], "question": "Find the total revenue of companies of each founder.", "question_toks": ["Find", "the", "total", "revenue", "of", "companies", "of", "each", "founder", "."], "guid": 608}}
{"text": "continents: ContId, Continent; countries: CountryId, CountryName, Continent; car_makers: Id, Maker, FullName, Country; model_list: ModelId, Maker, Model; car_names: MakeId, Model, Make; cars_data: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year | What is the average edispl of the cars of model volvo?", "sql": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';", "example": {"db_id": "car_1", "query": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';", "query_toks": ["SELECT", "avg", "(", "T2.edispl", ")", "FROM", "CAR_NAMES", "AS", "T1", "JOIN", "CARS_DATA", "AS", "T2", "ON", "T1.MakeId", "=", "T2.Id", "WHERE", "T1.Model", "=", "'volvo", "'", ";"], "query_toks_no_value": ["select", "avg", "(", "t2", ".", "edispl", ")", "from", "car_names", "as", "t1", "join", "cars_data", "as", "t2", "on", "t1", ".", "makeid", "=", "t2", ".", "id", "where", "t1", ".", "model", "=", "value"], "question": "What is the average edispl of the cars of model volvo?", "question_toks": ["What", "is", "the", "average", "edispl", "of", "the", "cars", "of", "model", "volvo", "?"], "guid": 609}}
{"text": "Manufacturers: Code, Name, Headquarter, Founder, Revenue; Products: Code, Name, Price, Manufacturer | Return the number of companies created by Andy.", "sql": "SELECT count(*) FROM manufacturers WHERE founder  =  'Andy'", "example": {"db_id": "manufactory_1", "query": "SELECT count(*) FROM manufacturers WHERE founder  =  'Andy'", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "manufacturers", "WHERE", "founder", "=", "'Andy", "'"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "manufacturers", "where", "founder", "=", "value"], "question": "Return the number of companies created by Andy.", "question_toks": ["Return", "the", "number", "of", "companies", "created", "by", "Andy", "."], "guid": 610}}
{"text": "phone: Name, Phone_ID, Memory_in_G, Carrier, Price; market: Market_ID, District, Num_of_employees, Num_of_shops, Ranking; phone_market: Market_ID, Phone_ID, Num_of_stock | List the names of phones that are not on any market.", "sql": "SELECT Name FROM phone WHERE Phone_id NOT IN (SELECT Phone_ID FROM phone_market)", "example": {"db_id": "phone_market", "query": "SELECT Name FROM phone WHERE Phone_id NOT IN (SELECT Phone_ID FROM phone_market)", "query_toks": ["SELECT", "Name", "FROM", "phone", "WHERE", "Phone_id", "NOT", "IN", "(", "SELECT", "Phone_ID", "FROM", "phone_market", ")"], "query_toks_no_value": ["select", "name", "from", "phone", "where", "phone_id", "not", "in", "(", "select", "phone_id", "from", "phone_market", ")"], "question": "List the names of phones that are not on any market.", "question_toks": ["List", "the", "names", "of", "phones", "that", "are", "not", "on", "any", "market", "."], "guid": 611}}
{"text": "chip_model: Model_name, Launch_year, RAM_MiB, ROM_MiB, Slots, WiFi, Bluetooth; screen_mode: Graphics_mode, Char_cells, Pixels, Hardware_colours, used_kb, map, Type; phone: Company_name, Hardware_Model_name, Accreditation_type, Accreditation_level, Date, chip_model, screen_mode | List the maximum, minimum and average number of used kb in screen mode.", "sql": "SELECT max(used_kb) , min(used_kb) , avg(used_kb) FROM screen_mode;", "example": {"db_id": "phone_1", "query": "SELECT max(used_kb) , min(used_kb) , avg(used_kb) FROM screen_mode;", "query_toks": ["SELECT", "max", "(", "used_kb", ")", ",", "min", "(", "used_kb", ")", ",", "avg", "(", "used_kb", ")", "FROM", "screen_mode", ";"], "query_toks_no_value": ["select", "max", "(", "used_kb", ")", ",", "min", "(", "used_kb", ")", ",", "avg", "(", "used_kb", ")", "from", "screen_mode"], "question": "List the maximum, minimum and average number of used kb in screen mode.", "question_toks": ["List", "the", "maximum", ",", "minimum", "and", "average", "number", "of", "used", "kb", "in", "screen", "mode", "."], "guid": 612}}
{"text": "phone: Name, Phone_ID, Memory_in_G, Carrier, Price; market: Market_ID, District, Num_of_employees, Num_of_shops, Ranking; phone_market: Market_ID, Phone_ID, Num_of_stock | How many phones are there?", "sql": "SELECT count(*) FROM phone", "example": {"db_id": "phone_market", "query": "SELECT count(*) FROM phone", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "phone"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "phone"], "question": "How many phones are there?", "question_toks": ["How", "many", "phones", "are", "there", "?"], "guid": 613}}
{"text": "continents: ContId, Continent; countries: CountryId, CountryName, Continent; car_makers: Id, Maker, FullName, Country; model_list: ModelId, Maker, Model; car_names: MakeId, Model, Make; cars_data: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year | What is the number of car models that are produced by each maker and what is the id and full name of each maker?", "sql": "SELECT Count(*) ,  T2.FullName ,  T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id GROUP BY T2.id;", "example": {"db_id": "car_1", "query": "SELECT Count(*) ,  T2.FullName ,  T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id GROUP BY T2.id;", "query_toks": ["SELECT", "Count", "(", "*", ")", ",", "T2.FullName", ",", "T2.id", "FROM", "MODEL_LIST", "AS", "T1", "JOIN", "CAR_MAKERS", "AS", "T2", "ON", "T1.Maker", "=", "T2.Id", "GROUP", "BY", "T2.id", ";"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "t2", ".", "fullname", ",", "t2", ".", "id", "from", "model_list", "as", "t1", "join", "car_makers", "as", "t2", "on", "t1", ".", "maker", "=", "t2", ".", "id", "group", "by", "t2", ".", "id"], "question": "What is the number of car models that are produced by each maker and what is the id and full name of each maker?", "question_toks": ["What", "is", "the", "number", "of", "car", "models", "that", "are", "produced", "by", "each", "maker", "and", "what", "is", "the", "id", "and", "full", "name", "of", "each", "maker", "?"], "guid": 614}}
{"text": "continents: ContId, Continent; countries: CountryId, CountryName, Continent; car_makers: Id, Maker, FullName, Country; model_list: ModelId, Maker, Model; car_names: MakeId, Model, Make; cars_data: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year | What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ?", "sql": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980", "example": {"db_id": "car_1", "query": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980", "query_toks": ["select", "max", "(", "mpg", ")", "from", "cars_data", "where", "cylinders", "=", "8", "or", "year", "<", "1980"], "query_toks_no_value": ["select", "max", "(", "mpg", ")", "from", "cars_data", "where", "cylinders", "=", "value", "or", "year", "<", "value"], "question": "What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ?", "question_toks": ["What", "is", "the", "maximum", "mpg", "of", "the", "cars", "that", "had", "8", "cylinders", "or", "that", "were", "produced", "before", "1980", "?"], "guid": 615}}
{"text": "buildings: id, name, City, Height, Stories, Status; Companies: id, name, Headquarters, Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value_billion; Office_locations: building_id, company_id, move_in_year | Count the number of companies.", "sql": "SELECT count(*) FROM Companies", "example": {"db_id": "company_office", "query": "SELECT count(*) FROM Companies", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Companies"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "companies"], "question": "Count the number of companies.", "question_toks": ["Count", "the", "number", "of", "companies", "."], "guid": 616}}
{"text": "regions: REGION_ID, REGION_NAME; countries: COUNTRY_ID, COUNTRY_NAME, REGION_ID; departments: DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID; jobs: JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY; employees: EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID; job_history: EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID; locations: LOCATION_ID, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_ID | What are the department names and how many employees work in each of them?", "sql": "SELECT department_name ,  COUNT(*) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY department_name", "example": {"db_id": "hr_1", "query": "SELECT department_name ,  COUNT(*) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY department_name", "query_toks": ["SELECT", "department_name", ",", "COUNT", "(", "*", ")", "FROM", "employees", "AS", "T1", "JOIN", "departments", "AS", "T2", "ON", "T1.department_id", "=", "T2.department_id", "GROUP", "BY", "department_name"], "query_toks_no_value": ["select", "department_name", ",", "count", "(", "*", ")", "from", "employees", "as", "t1", "join", "departments", "as", "t2", "on", "t1", ".", "department_id", "=", "t2", ".", "department_id", "group", "by", "department_name"], "question": "What are the department names and how many employees work in each of them?", "question_toks": ["What", "are", "the", "department", "names", "and", "how", "many", "employees", "work", "in", "each", "of", "them", "?"], "guid": 617}}
{"text": "Manufacturers: Code, Name, Headquarter, Founder, Revenue; Products: Code, Name, Price, Manufacturer | What are the names of products produced by both Creative Labs and Sony?", "sql": "SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  'Creative Labs' INTERSECT SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  'Sony'", "example": {"db_id": "manufactory_1", "query": "SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  'Creative Labs' INTERSECT SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  'Sony'", "query_toks": ["SELECT", "T1.name", "FROM", "products", "AS", "T1", "JOIN", "manufacturers", "AS", "T2", "ON", "T1.Manufacturer", "=", "T2.code", "WHERE", "T2.name", "=", "'Creative", "Labs", "'", "INTERSECT", "SELECT", "T1.name", "FROM", "products", "AS", "T1", "JOIN", "manufacturers", "AS", "T2", "ON", "T1.Manufacturer", "=", "T2.code", "WHERE", "T2.name", "=", "'Sony", "'"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "products", "as", "t1", "join", "manufacturers", "as", "t2", "on", "t1", ".", "manufacturer", "=", "t2", ".", "code", "where", "t2", ".", "name", "=", "value", "intersect", "select", "t1", ".", "name", "from", "products", "as", "t1", "join", "manufacturers", "as", "t2", "on", "t1", ".", "manufacturer", "=", "t2", ".", "code", "where", "t2", ".", "name", "=", "value"], "question": "What are the names of products produced by both Creative Labs and Sony?", "question_toks": ["What", "are", "the", "names", "of", "products", "produced", "by", "both", "Creative", "Labs", "and", "Sony", "?"], "guid": 618}}
{"text": "employee: Employee_ID, Name, Age, City; shop: Shop_ID, Name, Location, District, Number_products, Manager_name; hiring: Shop_ID, Employee_ID, Start_from, Is_full_time; evaluation: Employee_ID, Year_awarded, Bonus | Which employee received the most awards in evaluations? Give me the employee name.", "sql": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "employee_hire_evaluation", "query": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "t1.name", "FROM", "employee", "AS", "t1", "JOIN", "evaluation", "AS", "t2", "ON", "t1.Employee_ID", "=", "t2.Employee_ID", "GROUP", "BY", "t2.Employee_ID", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "employee", "as", "t1", "join", "evaluation", "as", "t2", "on", "t1", ".", "employee_id", "=", "t2", ".", "employee_id", "group", "by", "t2", ".", "employee_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which employee received the most awards in evaluations? Give me the employee name.", "question_toks": ["Which", "employee", "received", "the", "most", "awards", "in", "evaluations", "?", "Give", "me", "the", "employee", "name", "."], "guid": 619}}
{"text": "employee: Employee_ID, Name, Age, City; shop: Shop_ID, Name, Location, District, Number_products, Manager_name; hiring: Shop_ID, Employee_ID, Start_from, Is_full_time; evaluation: Employee_ID, Year_awarded, Bonus | Find the names of employees who never won any award in the evaluation.", "sql": "SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)", "example": {"db_id": "employee_hire_evaluation", "query": "SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)", "query_toks": ["SELECT", "name", "FROM", "employee", "WHERE", "Employee_ID", "NOT", "IN", "(", "SELECT", "Employee_ID", "FROM", "evaluation", ")"], "query_toks_no_value": ["select", "name", "from", "employee", "where", "employee_id", "not", "in", "(", "select", "employee_id", "from", "evaluation", ")"], "question": "Find the names of employees who never won any award in the evaluation.", "question_toks": ["Find", "the", "names", "of", "employees", "who", "never", "won", "any", "award", "in", "the", "evaluation", "."], "guid": 620}}
{"text": "chip_model: Model_name, Launch_year, RAM_MiB, ROM_MiB, Slots, WiFi, Bluetooth; screen_mode: Graphics_mode, Char_cells, Pixels, Hardware_colours, used_kb, map, Type; phone: Company_name, Hardware_Model_name, Accreditation_type, Accreditation_level, Date, chip_model, screen_mode | How many models do not have the wifi function?", "sql": "SELECT count(*) FROM chip_model WHERE wifi  =  'No'", "example": {"db_id": "phone_1", "query": "SELECT count(*) FROM chip_model WHERE wifi  =  'No'", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "chip_model", "WHERE", "wifi", "=", "'No", "'"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "chip_model", "where", "wifi", "=", "value"], "question": "How many models do not have the wifi function?", "question_toks": ["How", "many", "models", "do", "not", "have", "the", "wifi", "function", "?"], "guid": 621}}
{"text": "regions: REGION_ID, REGION_NAME; countries: COUNTRY_ID, COUNTRY_NAME, REGION_ID; departments: DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID; jobs: JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY; employees: EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID; job_history: EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID; locations: LOCATION_ID, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_ID | Find the first name and last name and department id for those employees who earn such amount of salary which is the smallest salary of any of the departments.", "sql": "SELECT first_name ,  last_name ,  department_id FROM employees WHERE salary IN (SELECT MIN(salary) FROM employees GROUP BY department_id)", "example": {"db_id": "hr_1", "query": "SELECT first_name ,  last_name ,  department_id FROM employees WHERE salary IN (SELECT MIN(salary) FROM employees GROUP BY department_id)", "query_toks": ["SELECT", "first_name", ",", "last_name", ",", "department_id", "FROM", "employees", "WHERE", "salary", "IN", "(", "SELECT", "MIN", "(", "salary", ")", "FROM", "employees", "GROUP", "BY", "department_id", ")"], "query_toks_no_value": ["select", "first_name", ",", "last_name", ",", "department_id", "from", "employees", "where", "salary", "in", "(", "select", "min", "(", "salary", ")", "from", "employees", "group", "by", "department_id", ")"], "question": "Find the first name and last name and department id for those employees who earn such amount of salary which is the smallest salary of any of the departments.", "question_toks": ["Find", "the", "first", "name", "and", "last", "name", "and", "department", "id", "for", "those", "employees", "who", "earn", "such", "amount", "of", "salary", "which", "is", "the", "smallest", "salary", "of", "any", "of", "the", "departments", "."], "guid": 622}}
{"text": "continents: ContId, Continent; countries: CountryId, CountryName, Continent; car_makers: Id, Maker, FullName, Country; model_list: ModelId, Maker, Model; car_names: MakeId, Model, Make; cars_data: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year | What is the count of the car models produced in the United States?", "sql": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';", "example": {"db_id": "car_1", "query": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "MODEL_LIST", "AS", "T1", "JOIN", "CAR_MAKERS", "AS", "T2", "ON", "T1.Maker", "=", "T2.Id", "JOIN", "COUNTRIES", "AS", "T3", "ON", "T2.Country", "=", "T3.CountryId", "WHERE", "T3.CountryName", "=", "'usa", "'", ";"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "model_list", "as", "t1", "join", "car_makers", "as", "t2", "on", "t1", ".", "maker", "=", "t2", ".", "id", "join", "countries", "as", "t3", "on", "t2", ".", "country", "=", "t3", ".", "countryid", "where", "t3", ".", "countryname", "=", "value"], "question": "What is the count of the car models produced in the United States?", "question_toks": ["What", "is", "the", "count", "of", "the", "car", "models", "produced", "in", "the", "United", "States", "?"], "guid": 623}}
{"text": "continents: ContId, Continent; countries: CountryId, CountryName, Continent; car_makers: Id, Maker, FullName, Country; model_list: ModelId, Maker, Model; car_names: MakeId, Model, Make; cars_data: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year | What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?", "sql": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';", "example": {"db_id": "car_1", "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';", "query_toks": ["SELECT", "DISTINCT", "T1.model", "FROM", "MODEL_LIST", "AS", "T1", "JOIN", "CAR_NAMES", "AS", "T2", "ON", "T1.Model", "=", "T2.Model", "JOIN", "CARS_DATA", "AS", "T3", "ON", "T2.MakeId", "=", "T3.Id", "JOIN", "CAR_MAKERS", "AS", "T4", "ON", "T1.Maker", "=", "T4.Id", "WHERE", "T3.weight", "<", "3500", "AND", "T4.FullName", "!", "=", "'Ford", "Motor", "Company", "'", ";"], "query_toks_no_value": ["select", "distinct", "t1", ".", "model", "from", "model_list", "as", "t1", "join", "car_names", "as", "t2", "on", "t1", ".", "model", "=", "t2", ".", "model", "join", "cars_data", "as", "t3", "on", "t2", ".", "makeid", "=", "t3", ".", "id", "join", "car_makers", "as", "t4", "on", "t1", ".", "maker", "=", "t4", ".", "id", "where", "t3", ".", "weight", "<", "value", "and", "t4", ".", "fullname", "!", "=", "value"], "question": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?", "question_toks": ["What", "are", "the", "different", "models", "wthat", "are", "lighter", "than", "3500", "but", "were", "not", "built", "by", "the", "Ford", "Motor", "Company", "?"], "guid": 624}}
{"text": "buildings: id, name, City, Height, Stories, Status; Companies: id, name, Headquarters, Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value_billion; Office_locations: building_id, company_id, move_in_year | What are the names of companies whose headquarters are not \"USA\"?", "sql": "SELECT name FROM Companies WHERE Headquarters != 'USA'", "example": {"db_id": "company_office", "query": "SELECT name FROM Companies WHERE Headquarters != 'USA'", "query_toks": ["SELECT", "name", "FROM", "Companies", "WHERE", "Headquarters", "!", "=", "'USA", "'"], "query_toks_no_value": ["select", "name", "from", "companies", "where", "headquarters", "!", "=", "value"], "question": "What are the names of companies whose headquarters are not \"USA\"?", "question_toks": ["What", "are", "the", "names", "of", "companies", "whose", "headquarters", "are", "not", "``", "USA", "''", "?"], "guid": 625}}
{"text": "buildings: id, name, City, Height, Stories, Status; Companies: id, name, Headquarters, Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value_billion; Office_locations: building_id, company_id, move_in_year | What are the name and assets of each company, sorted in ascending order of company name?", "sql": "SELECT name ,  Assets_billion FROM Companies ORDER BY name ASC", "example": {"db_id": "company_office", "query": "SELECT name ,  Assets_billion FROM Companies ORDER BY name ASC", "query_toks": ["SELECT", "name", ",", "Assets_billion", "FROM", "Companies", "ORDER", "BY", "name", "ASC"], "query_toks_no_value": ["select", "name", ",", "assets_billion", "from", "companies", "order", "by", "name", "asc"], "question": "What are the name and assets of each company, sorted in ascending order of company name?", "question_toks": ["What", "are", "the", "name", "and", "assets", "of", "each", "company", ",", "sorted", "in", "ascending", "order", "of", "company", "name", "?"], "guid": 626}}
{"text": "buildings: id, name, City, Height, Stories, Status; Companies: id, name, Headquarters, Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value_billion; Office_locations: building_id, company_id, move_in_year | Find the names of the buildings in \"on-hold\" status, and sort them in ascending order of building stories.", "sql": "SELECT name FROM buildings WHERE Status  =  \"on-hold\" ORDER BY Stories ASC", "example": {"db_id": "company_office", "query": "SELECT name FROM buildings WHERE Status  =  \"on-hold\" ORDER BY Stories ASC", "query_toks": ["SELECT", "name", "FROM", "buildings", "WHERE", "Status", "=", "``", "on-hold", "''", "ORDER", "BY", "Stories", "ASC"], "query_toks_no_value": ["select", "name", "from", "buildings", "where", "status", "=", "value", "order", "by", "stories", "asc"], "question": "Find the names of the buildings in \"on-hold\" status, and sort them in ascending order of building stories.", "question_toks": ["Find", "the", "names", "of", "the", "buildings", "in", "``", "on-hold", "''", "status", ",", "and", "sort", "them", "in", "ascending", "order", "of", "building", "stories", "."], "guid": 627}}
{"text": "company: Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value; gas_station: Station_ID, Open_Year, Location, Manager_Name, Vice_Manager_Name, Representative_Name; station_company: Station_ID, Company_ID, Rank_of_the_Year | What is the total number of companies?", "sql": "SELECT count(*) FROM company", "example": {"db_id": "gas_company", "query": "SELECT count(*) FROM company", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "company"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "company"], "question": "What is the total number of companies?", "question_toks": ["What", "is", "the", "total", "number", "of", "companies", "?"], "guid": 628}}
{"text": "regions: REGION_ID, REGION_NAME; countries: COUNTRY_ID, COUNTRY_NAME, REGION_ID; departments: DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID; jobs: JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY; employees: EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID; job_history: EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID; locations: LOCATION_ID, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_ID | What are the employee ids for those who had two or more jobs.", "sql": "SELECT employee_id FROM job_history GROUP BY employee_id HAVING COUNT(*)  >= 2", "example": {"db_id": "hr_1", "query": "SELECT employee_id FROM job_history GROUP BY employee_id HAVING COUNT(*)  >= 2", "query_toks": ["SELECT", "employee_id", "FROM", "job_history", "GROUP", "BY", "employee_id", "HAVING", "COUNT", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "employee_id", "from", "job_history", "group", "by", "employee_id", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "What are the employee ids for those who had two or more jobs.", "question_toks": ["What", "are", "the", "employee", "ids", "for", "those", "who", "had", "two", "or", "more", "jobs", "."], "guid": 629}}
{"text": "regions: REGION_ID, REGION_NAME; countries: COUNTRY_ID, COUNTRY_NAME, REGION_ID; departments: DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID; jobs: JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY; employees: EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID; job_history: EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID; locations: LOCATION_ID, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_ID | What the full names, ids of each employee and the name of the country they are in?", "sql": "SELECT T1.first_name ,  T1.last_name , T1.employee_id ,  T4.country_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id JOIN countries AS T4 ON T3.country_id  =  T4.country_id", "example": {"db_id": "hr_1", "query": "SELECT T1.first_name ,  T1.last_name , T1.employee_id ,  T4.country_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id JOIN countries AS T4 ON T3.country_id  =  T4.country_id", "query_toks": ["SELECT", "T1.first_name", ",", "T1.last_name", ",", "T1.employee_id", ",", "T4.country_name", "FROM", "employees", "AS", "T1", "JOIN", "departments", "AS", "T2", "ON", "T1.department_id", "=", "T2.department_id", "JOIN", "locations", "AS", "T3", "ON", "T2.location_id", "=", "T3.location_id", "JOIN", "countries", "AS", "T4", "ON", "T3.country_id", "=", "T4.country_id"], "query_toks_no_value": ["select", "t1", ".", "first_name", ",", "t1", ".", "last_name", ",", "t1", ".", "employee_id", ",", "t4", ".", "country_name", "from", "employees", "as", "t1", "join", "departments", "as", "t2", "on", "t1", ".", "department_id", "=", "t2", ".", "department_id", "join", "locations", "as", "t3", "on", "t2", ".", "location_id", "=", "t3", ".", "location_id", "join", "countries", "as", "t4", "on", "t3", ".", "country_id", "=", "t4", ".", "country_id"], "question": "What the full names, ids of each employee and the name of the country they are in?", "question_toks": ["What", "the", "full", "names", ",", "ids", "of", "each", "employee", "and", "the", "name", "of", "the", "country", "they", "are", "in", "?"], "guid": 630}}
{"text": "regions: REGION_ID, REGION_NAME; countries: COUNTRY_ID, COUNTRY_NAME, REGION_ID; departments: DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID; jobs: JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY; employees: EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID; job_history: EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID; locations: LOCATION_ID, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_ID | Give the name of each department and the number of employees in each.", "sql": "SELECT T2.department_name ,  COUNT(*) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T2.department_name", "example": {"db_id": "hr_1", "query": "SELECT T2.department_name ,  COUNT(*) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T2.department_name", "query_toks": ["SELECT", "T2.department_name", ",", "COUNT", "(", "*", ")", "FROM", "employees", "AS", "T1", "JOIN", "departments", "AS", "T2", "ON", "T1.department_id", "=", "T2.department_id", "GROUP", "BY", "T2.department_name"], "query_toks_no_value": ["select", "t2", ".", "department_name", ",", "count", "(", "*", ")", "from", "employees", "as", "t1", "join", "departments", "as", "t2", "on", "t1", ".", "department_id", "=", "t2", ".", "department_id", "group", "by", "t2", ".", "department_name"], "question": "Give the name of each department and the number of employees in each.", "question_toks": ["Give", "the", "name", "of", "each", "department", "and", "the", "number", "of", "employees", "in", "each", "."], "guid": 631}}
{"text": "member: Member_ID, Name, Nationality, Role; performance: Performance_ID, Date, Host, Location, Attendance; member_attendance: Member_ID, Performance_ID, Num_of_Pieces | What is the average number of attendees for performances?", "sql": "SELECT avg(Attendance) FROM performance", "example": {"db_id": "performance_attendance", "query": "SELECT avg(Attendance) FROM performance", "query_toks": ["SELECT", "avg", "(", "Attendance", ")", "FROM", "performance"], "query_toks_no_value": ["select", "avg", "(", "attendance", ")", "from", "performance"], "question": "What is the average number of attendees for performances?", "question_toks": ["What", "is", "the", "average", "number", "of", "attendees", "for", "performances", "?"], "guid": 632}}
{"text": "buildings: id, name, City, Height, Stories, Status; Companies: id, name, Headquarters, Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value_billion; Office_locations: building_id, company_id, move_in_year | Please show each industry and the corresponding number of companies in that industry.", "sql": "SELECT Industry ,  COUNT(*) FROM Companies GROUP BY Industry", "example": {"db_id": "company_office", "query": "SELECT Industry ,  COUNT(*) FROM Companies GROUP BY Industry", "query_toks": ["SELECT", "Industry", ",", "COUNT", "(", "*", ")", "FROM", "Companies", "GROUP", "BY", "Industry"], "query_toks_no_value": ["select", "industry", ",", "count", "(", "*", ")", "from", "companies", "group", "by", "industry"], "question": "Please show each industry and the corresponding number of companies in that industry.", "question_toks": ["Please", "show", "each", "industry", "and", "the", "corresponding", "number", "of", "companies", "in", "that", "industry", "."], "guid": 633}}
{"text": "regions: REGION_ID, REGION_NAME; countries: COUNTRY_ID, COUNTRY_NAME, REGION_ID; departments: DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID; jobs: JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY; employees: EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID; job_history: EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID; locations: LOCATION_ID, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_ID | What are the ids for employees who do not work in departments with managers that have ids between 100 and 200?", "sql": "SELECT * FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)", "example": {"db_id": "hr_1", "query": "SELECT * FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)", "query_toks": ["SELECT", "*", "FROM", "employees", "WHERE", "department_id", "NOT", "IN", "(", "SELECT", "department_id", "FROM", "departments", "WHERE", "manager_id", "BETWEEN", "100", "AND", "200", ")"], "query_toks_no_value": ["select", "*", "from", "employees", "where", "department_id", "not", "in", "(", "select", "department_id", "from", "departments", "where", "manager_id", "between", "value", "and", "value", ")"], "question": "What are the ids for employees who do not work in departments with managers that have ids between 100 and 200?", "question_toks": ["What", "are", "the", "ids", "for", "employees", "who", "do", "not", "work", "in", "departments", "with", "managers", "that", "have", "ids", "between", "100", "and", "200", "?"], "guid": 634}}
{"text": "regions: REGION_ID, REGION_NAME; countries: COUNTRY_ID, COUNTRY_NAME, REGION_ID; departments: DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID; jobs: JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY; employees: EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID; job_history: EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID; locations: LOCATION_ID, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_ID | Find employee with ID and name of the country presently where (s)he is working.", "sql": "SELECT T1.employee_id ,  T4.country_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id JOIN countries AS T4 ON T3.country_id  =  T4.country_id", "example": {"db_id": "hr_1", "query": "SELECT T1.employee_id ,  T4.country_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id JOIN countries AS T4 ON T3.country_id  =  T4.country_id", "query_toks": ["SELECT", "T1.employee_id", ",", "T4.country_name", "FROM", "employees", "AS", "T1", "JOIN", "departments", "AS", "T2", "ON", "T1.department_id", "=", "T2.department_id", "JOIN", "locations", "AS", "T3", "ON", "T2.location_id", "=", "T3.location_id", "JOIN", "countries", "AS", "T4", "ON", "T3.country_id", "=", "T4.country_id"], "query_toks_no_value": ["select", "t1", ".", "employee_id", ",", "t4", ".", "country_name", "from", "employees", "as", "t1", "join", "departments", "as", "t2", "on", "t1", ".", "department_id", "=", "t2", ".", "department_id", "join", "locations", "as", "t3", "on", "t2", ".", "location_id", "=", "t3", ".", "location_id", "join", "countries", "as", "t4", "on", "t3", ".", "country_id", "=", "t4", ".", "country_id"], "question": "Find employee with ID and name of the country presently where (s)he is working.", "question_toks": ["Find", "employee", "with", "ID", "and", "name", "of", "the", "country", "presently", "where", "(", "s", ")", "he", "is", "working", "."], "guid": 635}}
{"text": "continents: ContId, Continent; countries: CountryId, CountryName, Continent; car_makers: Id, Maker, FullName, Country; model_list: ModelId, Maker, Model; car_names: MakeId, Model, Make; cars_data: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year | Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name.", "sql": "SELECT T2.MakeId ,  T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Horsepower  >  (SELECT min(Horsepower) FROM CARS_DATA) AND T1.Cylinders  <=  3;", "example": {"db_id": "car_1", "query": "SELECT T2.MakeId ,  T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Horsepower  >  (SELECT min(Horsepower) FROM CARS_DATA) AND T1.Cylinders  <=  3;", "query_toks": ["SELECT", "T2.MakeId", ",", "T2.Make", "FROM", "CARS_DATA", "AS", "T1", "JOIN", "CAR_NAMES", "AS", "T2", "ON", "T1.Id", "=", "T2.MakeId", "WHERE", "T1.Horsepower", ">", "(", "SELECT", "min", "(", "Horsepower", ")", "FROM", "CARS_DATA", ")", "AND", "T1.Cylinders", "<", "=", "3", ";"], "query_toks_no_value": ["select", "t2", ".", "makeid", ",", "t2", ".", "make", "from", "cars_data", "as", "t1", "join", "car_names", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "makeid", "where", "t1", ".", "horsepower", ">", "(", "select", "min", "(", "horsepower", ")", "from", "cars_data", ")", "and", "t1", ".", "cylinders", "<", "=", "value"], "question": "Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name.", "question_toks": ["Among", "the", "cars", "with", "more", "than", "lowest", "horsepower", ",", "which", "ones", "do", "not", "have", "more", "than", "3", "cylinders", "?", "List", "the", "car", "makeid", "and", "make", "name", "."], "guid": 636}}
{"text": "employee: Employee_ID, Name, Age, City; shop: Shop_ID, Name, Location, District, Number_products, Manager_name; hiring: Shop_ID, Employee_ID, Start_from, Is_full_time; evaluation: Employee_ID, Year_awarded, Bonus | find the minimum and maximum number of products of all stores.", "sql": "SELECT min(Number_products) ,  max(Number_products) FROM shop", "example": {"db_id": "employee_hire_evaluation", "query": "SELECT min(Number_products) ,  max(Number_products) FROM shop", "query_toks": ["SELECT", "min", "(", "Number_products", ")", ",", "max", "(", "Number_products", ")", "FROM", "shop"], "query_toks_no_value": ["select", "min", "(", "number_products", ")", ",", "max", "(", "number_products", ")", "from", "shop"], "question": "find the minimum and maximum number of products of all stores.", "question_toks": ["find", "the", "minimum", "and", "maximum", "number", "of", "products", "of", "all", "stores", "."], "guid": 637}}
{"text": "employee: Employee_ID, Name, Age, City; shop: Shop_ID, Name, Location, District, Number_products, Manager_name; hiring: Shop_ID, Employee_ID, Start_from, Is_full_time; evaluation: Employee_ID, Year_awarded, Bonus | Return the name, location and district of all shops in descending order of number of products.", "sql": "SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC", "example": {"db_id": "employee_hire_evaluation", "query": "SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC", "query_toks": ["SELECT", "name", ",", "LOCATION", ",", "district", "FROM", "shop", "ORDER", "BY", "number_products", "DESC"], "query_toks_no_value": ["select", "name", ",", "location", ",", "district", "from", "shop", "order", "by", "number_products", "desc"], "question": "Return the name, location and district of all shops in descending order of number of products.", "question_toks": ["Return", "the", "name", ",", "location", "and", "district", "of", "all", "shops", "in", "descending", "order", "of", "number", "of", "products", "."], "guid": 638}}
{"text": "manufacturer: Manufacturer_ID, Open_Year, Name, Num_of_Factories, Num_of_Shops; furniture: Furniture_ID, Name, Num_of_Component, Market_Rate; furniture_manufacte: Manufacturer_ID, Furniture_ID, Price_in_Dollar | Find the component amounts and names of all furnitures that have more than 10 components.", "sql": "SELECT Num_of_Component ,  name FROM furniture WHERE Num_of_Component  >  10", "example": {"db_id": "manufacturer", "query": "SELECT Num_of_Component ,  name FROM furniture WHERE Num_of_Component  >  10", "query_toks": ["SELECT", "Num_of_Component", ",", "name", "FROM", "furniture", "WHERE", "Num_of_Component", ">", "10"], "query_toks_no_value": ["select", "num_of_component", ",", "name", "from", "furniture", "where", "num_of_component", ">", "value"], "question": "Find the component amounts and names of all furnitures that have more than 10 components.", "question_toks": ["Find", "the", "component", "amounts", "and", "names", "of", "all", "furnitures", "that", "have", "more", "than", "10", "components", "."], "guid": 639}}
{"text": "employee: Employee_ID, Name, Age, City; shop: Shop_ID, Name, Location, District, Number_products, Manager_name; hiring: Shop_ID, Employee_ID, Start_from, Is_full_time; evaluation: Employee_ID, Year_awarded, Bonus | Find the manager name and district of the shop whose number of products is the largest.", "sql": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1", "example": {"db_id": "employee_hire_evaluation", "query": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1", "query_toks": ["SELECT", "manager_name", ",", "district", "FROM", "shop", "ORDER", "BY", "number_products", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "manager_name", ",", "district", "from", "shop", "order", "by", "number_products", "desc", "limit", "value"], "question": "Find the manager name and district of the shop whose number of products is the largest.", "question_toks": ["Find", "the", "manager", "name", "and", "district", "of", "the", "shop", "whose", "number", "of", "products", "is", "the", "largest", "."], "guid": 640}}
{"text": "regions: REGION_ID, REGION_NAME; countries: COUNTRY_ID, COUNTRY_NAME, REGION_ID; departments: DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID; jobs: JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY; employees: EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID; job_history: EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID; locations: LOCATION_ID, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_ID | Return the full names and salaries of employees with null commissions.", "sql": "SELECT first_name ,  last_name ,  salary FROM  employees WHERE commission_pct  =  \"null\"", "example": {"db_id": "hr_1", "query": "SELECT first_name ,  last_name ,  salary FROM  employees WHERE commission_pct  =  \"null\"", "query_toks": ["SELECT", "first_name", ",", "last_name", ",", "salary", "FROM", "employees", "WHERE", "commission_pct", "=", "``", "null", "''"], "query_toks_no_value": ["select", "first_name", ",", "last_name", ",", "salary", "from", "employees", "where", "commission_pct", "=", "value"], "question": "Return the full names and salaries of employees with null commissions.", "question_toks": ["Return", "the", "full", "names", "and", "salaries", "of", "employees", "with", "null", "commissions", "."], "guid": 641}}
{"text": "continents: ContId, Continent; countries: CountryId, CountryName, Continent; car_makers: Id, Maker, FullName, Country; model_list: ModelId, Maker, Model; car_names: MakeId, Model, Make; cars_data: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year | What are the countries having at least one car maker? List name and id.", "sql": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;", "example": {"db_id": "car_1", "query": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;", "query_toks": ["SELECT", "T1.CountryName", ",", "T1.CountryId", "FROM", "COUNTRIES", "AS", "T1", "JOIN", "CAR_MAKERS", "AS", "T2", "ON", "T1.CountryId", "=", "T2.Country", "GROUP", "BY", "T1.CountryId", "HAVING", "count", "(", "*", ")", ">", "=", "1", ";"], "query_toks_no_value": ["select", "t1", ".", "countryname", ",", "t1", ".", "countryid", "from", "countries", "as", "t1", "join", "car_makers", "as", "t2", "on", "t1", ".", "countryid", "=", "t2", ".", "country", "group", "by", "t1", ".", "countryid", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "What are the countries having at least one car maker? List name and id.", "question_toks": ["What", "are", "the", "countries", "having", "at", "least", "one", "car", "maker", "?", "List", "name", "and", "id", "."], "guid": 642}}
{"text": "continents: ContId, Continent; countries: CountryId, CountryName, Continent; car_makers: Id, Maker, FullName, Country; model_list: ModelId, Maker, Model; car_names: MakeId, Model, Make; cars_data: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year | For each continent, list its id, name, and how many countries it has?", "sql": "SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;", "example": {"db_id": "car_1", "query": "SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;", "query_toks": ["SELECT", "T1.ContId", ",", "T1.Continent", ",", "count", "(", "*", ")", "FROM", "CONTINENTS", "AS", "T1", "JOIN", "COUNTRIES", "AS", "T2", "ON", "T1.ContId", "=", "T2.Continent", "GROUP", "BY", "T1.ContId", ";"], "query_toks_no_value": ["select", "t1", ".", "contid", ",", "t1", ".", "continent", ",", "count", "(", "*", ")", "from", "continents", "as", "t1", "join", "countries", "as", "t2", "on", "t1", ".", "contid", "=", "t2", ".", "continent", "group", "by", "t1", ".", "contid"], "question": "For each continent, list its id, name, and how many countries it has?", "question_toks": ["For", "each", "continent", ",", "list", "its", "id", ",", "name", ",", "and", "how", "many", "countries", "it", "has", "?"], "guid": 643}}
{"text": "buildings: id, name, City, Height, Stories, Status; Companies: id, name, Headquarters, Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value_billion; Office_locations: building_id, company_id, move_in_year | List the industry shared by the most companies.", "sql": "SELECT Industry FROM Companies GROUP BY Industry ORDER BY COUNT(*) DESC LIMIT 1", "example": {"db_id": "company_office", "query": "SELECT Industry FROM Companies GROUP BY Industry ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "Industry", "FROM", "Companies", "GROUP", "BY", "Industry", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "industry", "from", "companies", "group", "by", "industry", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "List the industry shared by the most companies.", "question_toks": ["List", "the", "industry", "shared", "by", "the", "most", "companies", "."], "guid": 644}}
{"text": "continents: ContId, Continent; countries: CountryId, CountryName, Continent; car_makers: Id, Maker, FullName, Country; model_list: ModelId, Maker, Model; car_names: MakeId, Model, Make; cars_data: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year | Which are the car makers which produce at least 2 models and more than 3 car makers ? List the id and the maker .", "sql": "select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker group by t1.id having count(*)  >=  2 intersect select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker join car_names as t3 on t2.model  =  t3.model group by t1.id having count(*)  >  3;", "example": {"db_id": "car_1", "query": "select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker group by t1.id having count(*)  >=  2 intersect select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker join car_names as t3 on t2.model  =  t3.model group by t1.id having count(*)  >  3;", "query_toks": ["select", "t1.id", ",", "t1.maker", "from", "car_makers", "as", "t1", "join", "model_list", "as", "t2", "on", "t1.id", "=", "t2.maker", "group", "by", "t1.id", "having", "count", "(", "*", ")", ">=", "2", "intersect", "select", "t1.id", ",", "t1.maker", "from", "car_makers", "as", "t1", "join", "model_list", "as", "t2", "on", "t1.id", "=", "t2.maker", "join", "car_names", "as", "t3", "on", "t2.model", "=", "t3.model", "group", "by", "t1.id", "having", "count", "(", "*", ")", ">", "3", ";"], "query_toks_no_value": ["select", "t1", ".", "id", ",", "t1", ".", "maker", "from", "car_makers", "as", "t1", "join", "model_list", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "maker", "group", "by", "t1", ".", "id", "having", "count", "(", "*", ")", ">", "=", "value", "intersect", "select", "t1", ".", "id", ",", "t1", ".", "maker", "from", "car_makers", "as", "t1", "join", "model_list", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "maker", "join", "car_names", "as", "t3", "on", "t2", ".", "model", "=", "t3", ".", "model", "group", "by", "t1", ".", "id", "having", "count", "(", "*", ")", ">", "value"], "question": "Which are the car makers which produce at least 2 models and more than 3 car makers ? List the id and the maker .", "question_toks": ["Which", "are", "the", "car", "makers", "which", "produce", "at", "least", "2", "models", "and", "more", "than", "3", "car", "makers", "?", "List", "the", "id", "and", "the", "maker", "."], "guid": 645}}
{"text": "regions: REGION_ID, REGION_NAME; countries: COUNTRY_ID, COUNTRY_NAME, REGION_ID; departments: DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID; jobs: JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY; employees: EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID; job_history: EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID; locations: LOCATION_ID, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_ID | display the employee number, name( first name and last name ) and job title for all employees whose salary is more than any salary of those employees whose job title is PU_MAN.", "sql": "SELECT employee_id ,  first_name ,  last_name ,  job_id FROM employees WHERE salary  >  ( SELECT max(salary) FROM employees WHERE job_id  =  'PU_MAN' )", "example": {"db_id": "hr_1", "query": "SELECT employee_id ,  first_name ,  last_name ,  job_id FROM employees WHERE salary  >  ( SELECT max(salary) FROM employees WHERE job_id  =  'PU_MAN' )", "query_toks": ["SELECT", "employee_id", ",", "first_name", ",", "last_name", ",", "job_id", "FROM", "employees", "WHERE", "salary", ">", "(", "SELECT", "max", "(", "salary", ")", "FROM", "employees", "WHERE", "job_id", "=", "'PU_MAN", "'", ")"], "query_toks_no_value": ["select", "employee_id", ",", "first_name", ",", "last_name", ",", "job_id", "from", "employees", "where", "salary", ">", "(", "select", "max", "(", "salary", ")", "from", "employees", "where", "job_id", "=", "value", ")"], "question": "display the employee number, name( first name and last name ) and job title for all employees whose salary is more than any salary of those employees whose job title is PU_MAN.", "question_toks": ["display", "the", "employee", "number", ",", "name", "(", "first", "name", "and", "last", "name", ")", "and", "job", "title", "for", "all", "employees", "whose", "salary", "is", "more", "than", "any", "salary", "of", "those", "employees", "whose", "job", "title", "is", "PU_MAN", "."], "guid": 646}}
{"text": "employee: Employee_ID, Name, Age, City; shop: Shop_ID, Name, Location, District, Number_products, Manager_name; hiring: Shop_ID, Employee_ID, Start_from, Is_full_time; evaluation: Employee_ID, Year_awarded, Bonus | Find the name of the shops that do not hire any employee.", "sql": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)", "example": {"db_id": "employee_hire_evaluation", "query": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)", "query_toks": ["SELECT", "name", "FROM", "shop", "WHERE", "shop_id", "NOT", "IN", "(", "SELECT", "shop_id", "FROM", "hiring", ")"], "query_toks_no_value": ["select", "name", "from", "shop", "where", "shop_id", "not", "in", "(", "select", "shop_id", "from", "hiring", ")"], "question": "Find the name of the shops that do not hire any employee.", "question_toks": ["Find", "the", "name", "of", "the", "shops", "that", "do", "not", "hire", "any", "employee", "."], "guid": 647}}
{"text": "regions: REGION_ID, REGION_NAME; countries: COUNTRY_ID, COUNTRY_NAME, REGION_ID; departments: DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID; jobs: JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY; employees: EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID; job_history: EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID; locations: LOCATION_ID, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_ID | What are the full names and hire dates for employees in the same department as someone with the first name Clara, not including Clara?", "sql": "SELECT first_name ,  last_name ,  hire_date FROM employees WHERE department_id  =  ( SELECT department_id FROM employees WHERE first_name  =  \"Clara\") AND first_name != \"Clara\"", "example": {"db_id": "hr_1", "query": "SELECT first_name ,  last_name ,  hire_date FROM employees WHERE department_id  =  ( SELECT department_id FROM employees WHERE first_name  =  \"Clara\") AND first_name != \"Clara\"", "query_toks": ["SELECT", "first_name", ",", "last_name", ",", "hire_date", "FROM", "employees", "WHERE", "department_id", "=", "(", "SELECT", "department_id", "FROM", "employees", "WHERE", "first_name", "=", "``", "Clara", "''", ")", "AND", "first_name", "!", "=", "``", "Clara", "''"], "query_toks_no_value": ["select", "first_name", ",", "last_name", ",", "hire_date", "from", "employees", "where", "department_id", "=", "(", "select", "department_id", "from", "employees", "where", "first_name", "=", "value", ")", "and", "first_name", "!", "=", "value"], "question": "What are the full names and hire dates for employees in the same department as someone with the first name Clara, not including Clara?", "question_toks": ["What", "are", "the", "full", "names", "and", "hire", "dates", "for", "employees", "in", "the", "same", "department", "as", "someone", "with", "the", "first", "name", "Clara", ",", "not", "including", "Clara", "?"], "guid": 648}}
{"text": "Manufacturers: Code, Name, Headquarter, Founder, Revenue; Products: Code, Name, Price, Manufacturer | Find the name of product that is produced by both companies Creative Labs and Sony.", "sql": "SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  'Creative Labs' INTERSECT SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  'Sony'", "example": {"db_id": "manufactory_1", "query": "SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  'Creative Labs' INTERSECT SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  'Sony'", "query_toks": ["SELECT", "T1.name", "FROM", "products", "AS", "T1", "JOIN", "manufacturers", "AS", "T2", "ON", "T1.Manufacturer", "=", "T2.code", "WHERE", "T2.name", "=", "'Creative", "Labs", "'", "INTERSECT", "SELECT", "T1.name", "FROM", "products", "AS", "T1", "JOIN", "manufacturers", "AS", "T2", "ON", "T1.Manufacturer", "=", "T2.code", "WHERE", "T2.name", "=", "'Sony", "'"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "products", "as", "t1", "join", "manufacturers", "as", "t2", "on", "t1", ".", "manufacturer", "=", "t2", ".", "code", "where", "t2", ".", "name", "=", "value", "intersect", "select", "t1", ".", "name", "from", "products", "as", "t1", "join", "manufacturers", "as", "t2", "on", "t1", ".", "manufacturer", "=", "t2", ".", "code", "where", "t2", ".", "name", "=", "value"], "question": "Find the name of product that is produced by both companies Creative Labs and Sony.", "question_toks": ["Find", "the", "name", "of", "product", "that", "is", "produced", "by", "both", "companies", "Creative", "Labs", "and", "Sony", "."], "guid": 649}}
{"text": "Manufacturers: Code, Name, Headquarter, Founder, Revenue; Products: Code, Name, Price, Manufacturer | What are the different cities listed?", "sql": "SELECT DISTINCT headquarter FROM manufacturers", "example": {"db_id": "manufactory_1", "query": "SELECT DISTINCT headquarter FROM manufacturers", "query_toks": ["SELECT", "DISTINCT", "headquarter", "FROM", "manufacturers"], "query_toks_no_value": ["select", "distinct", "headquarter", "from", "manufacturers"], "question": "What are the different cities listed?", "question_toks": ["What", "are", "the", "different", "cities", "listed", "?"], "guid": 650}}
{"text": "manufacturer: Manufacturer_ID, Open_Year, Name, Num_of_Factories, Num_of_Shops; furniture: Furniture_ID, Name, Num_of_Component, Market_Rate; furniture_manufacte: Manufacturer_ID, Furniture_ID, Price_in_Dollar | Give me the names and prices of furnitures which some companies are manufacturing.", "sql": "SELECT t1.name ,  t2.price_in_dollar FROM furniture AS t1 JOIN furniture_manufacte AS t2 ON t1.Furniture_ID  =  t2.Furniture_ID", "example": {"db_id": "manufacturer", "query": "SELECT t1.name ,  t2.price_in_dollar FROM furniture AS t1 JOIN furniture_manufacte AS t2 ON t1.Furniture_ID  =  t2.Furniture_ID", "query_toks": ["SELECT", "t1.name", ",", "t2.price_in_dollar", "FROM", "furniture", "AS", "t1", "JOIN", "furniture_manufacte", "AS", "t2", "ON", "t1.Furniture_ID", "=", "t2.Furniture_ID"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "t2", ".", "price_in_dollar", "from", "furniture", "as", "t1", "join", "furniture_manufacte", "as", "t2", "on", "t1", ".", "furniture_id", "=", "t2", ".", "furniture_id"], "question": "Give me the names and prices of furnitures which some companies are manufacturing.", "question_toks": ["Give", "me", "the", "names", "and", "prices", "of", "furnitures", "which", "some", "companies", "are", "manufacturing", "."], "guid": 651}}
{"text": "regions: REGION_ID, REGION_NAME; countries: COUNTRY_ID, COUNTRY_NAME, REGION_ID; departments: DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID; jobs: JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY; employees: EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID; job_history: EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID; locations: LOCATION_ID, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_ID | What are the full name (first and last name) and salary for all employees who does not have any value for commission?", "sql": "SELECT first_name ,  last_name ,  salary FROM  employees WHERE commission_pct  =  \"null\"", "example": {"db_id": "hr_1", "query": "SELECT first_name ,  last_name ,  salary FROM  employees WHERE commission_pct  =  \"null\"", "query_toks": ["SELECT", "first_name", ",", "last_name", ",", "salary", "FROM", "employees", "WHERE", "commission_pct", "=", "``", "null", "''"], "query_toks_no_value": ["select", "first_name", ",", "last_name", ",", "salary", "from", "employees", "where", "commission_pct", "=", "value"], "question": "What are the full name (first and last name) and salary for all employees who does not have any value for commission?", "question_toks": ["What", "are", "the", "full", "name", "(", "first", "and", "last", "name", ")", "and", "salary", "for", "all", "employees", "who", "does", "not", "have", "any", "value", "for", "commission", "?"], "guid": 652}}
{"text": "regions: REGION_ID, REGION_NAME; countries: COUNTRY_ID, COUNTRY_NAME, REGION_ID; departments: DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID; jobs: JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY; employees: EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID; job_history: EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID; locations: LOCATION_ID, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_ID | What is all the information about employees hired before June 21, 2002?", "sql": "SELECT * FROM employees WHERE hire_date  <  '2002-06-21'", "example": {"db_id": "hr_1", "query": "SELECT * FROM employees WHERE hire_date  <  '2002-06-21'", "query_toks": ["SELECT", "*", "FROM", "employees", "WHERE", "hire_date", "<", "'2002-06-21", "'"], "query_toks_no_value": ["select", "*", "from", "employees", "where", "hire_date", "<", "value"], "question": "What is all the information about employees hired before June 21, 2002?", "question_toks": ["What", "is", "all", "the", "information", "about", "employees", "hired", "before", "June", "21", ",", "2002", "?"], "guid": 653}}
{"text": "phone: Name, Phone_ID, Memory_in_G, Carrier, Price; market: Market_ID, District, Num_of_employees, Num_of_shops, Ranking; phone_market: Market_ID, Phone_ID, Num_of_stock | Show different carriers of phones together with the number of phones with each carrier.", "sql": "SELECT Carrier ,  COUNT(*) FROM phone GROUP BY Carrier", "example": {"db_id": "phone_market", "query": "SELECT Carrier ,  COUNT(*) FROM phone GROUP BY Carrier", "query_toks": ["SELECT", "Carrier", ",", "COUNT", "(", "*", ")", "FROM", "phone", "GROUP", "BY", "Carrier"], "query_toks_no_value": ["select", "carrier", ",", "count", "(", "*", ")", "from", "phone", "group", "by", "carrier"], "question": "Show different carriers of phones together with the number of phones with each carrier.", "question_toks": ["Show", "different", "carriers", "of", "phones", "together", "with", "the", "number", "of", "phones", "with", "each", "carrier", "."], "guid": 654}}
{"text": "chip_model: Model_name, Launch_year, RAM_MiB, ROM_MiB, Slots, WiFi, Bluetooth; screen_mode: Graphics_mode, Char_cells, Pixels, Hardware_colours, used_kb, map, Type; phone: Company_name, Hardware_Model_name, Accreditation_type, Accreditation_level, Date, chip_model, screen_mode | List the hardware model name and company name for all the phones that were launched in year 2002 or have RAM size greater than 32.", "sql": "SELECT T2.Hardware_Model_name ,  T2.Company_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T1.Launch_year = 2002 OR T1.RAM_MiB  >  32;", "example": {"db_id": "phone_1", "query": "SELECT T2.Hardware_Model_name ,  T2.Company_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T1.Launch_year = 2002 OR T1.RAM_MiB  >  32;", "query_toks": ["SELECT", "T2.Hardware_Model_name", ",", "T2.Company_name", "FROM", "chip_model", "AS", "T1", "JOIN", "phone", "AS", "T2", "ON", "T1.Model_name", "=", "T2.chip_model", "WHERE", "T1.Launch_year", "=", "2002", "OR", "T1.RAM_MiB", ">", "32", ";"], "query_toks_no_value": ["select", "t2", ".", "hardware_model_name", ",", "t2", ".", "company_name", "from", "chip_model", "as", "t1", "join", "phone", "as", "t2", "on", "t1", ".", "model_name", "=", "t2", ".", "chip_model", "where", "t1", ".", "launch_year", "=", "value", "or", "t1", ".", "ram_mib", ">", "value"], "question": "List the hardware model name and company name for all the phones that were launched in year 2002 or have RAM size greater than 32.", "question_toks": ["List", "the", "hardware", "model", "name", "and", "company", "name", "for", "all", "the", "phones", "that", "were", "launched", "in", "year", "2002", "or", "have", "RAM", "size", "greater", "than", "32", "."], "guid": 655}}
{"text": "regions: REGION_ID, REGION_NAME; countries: COUNTRY_ID, COUNTRY_NAME, REGION_ID; departments: DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID; jobs: JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY; employees: EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID; job_history: EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID; locations: LOCATION_ID, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_ID | Give the country id and corresponding count of cities in each country.", "sql": "SELECT country_id ,  COUNT(*) FROM locations GROUP BY country_id", "example": {"db_id": "hr_1", "query": "SELECT country_id ,  COUNT(*) FROM locations GROUP BY country_id", "query_toks": ["SELECT", "country_id", ",", "COUNT", "(", "*", ")", "FROM", "locations", "GROUP", "BY", "country_id"], "query_toks_no_value": ["select", "country_id", ",", "count", "(", "*", ")", "from", "locations", "group", "by", "country_id"], "question": "Give the country id and corresponding count of cities in each country.", "question_toks": ["Give", "the", "country", "id", "and", "corresponding", "count", "of", "cities", "in", "each", "country", "."], "guid": 656}}
{"text": "company: Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value; gas_station: Station_ID, Open_Year, Location, Manager_Name, Vice_Manager_Name, Representative_Name; station_company: Station_ID, Company_ID, Rank_of_the_Year | What is the minimum, maximum, and average market value for every company?", "sql": "SELECT min(market_value) ,  max(market_value) ,  avg(market_value) FROM company", "example": {"db_id": "gas_company", "query": "SELECT min(market_value) ,  max(market_value) ,  avg(market_value) FROM company", "query_toks": ["SELECT", "min", "(", "market_value", ")", ",", "max", "(", "market_value", ")", ",", "avg", "(", "market_value", ")", "FROM", "company"], "query_toks_no_value": ["select", "min", "(", "market_value", ")", ",", "max", "(", "market_value", ")", ",", "avg", "(", "market_value", ")", "from", "company"], "question": "What is the minimum, maximum, and average market value for every company?", "question_toks": ["What", "is", "the", "minimum", ",", "maximum", ",", "and", "average", "market", "value", "for", "every", "company", "?"], "guid": 657}}
{"text": "continents: ContId, Continent; countries: CountryId, CountryName, Continent; car_makers: Id, Maker, FullName, Country; model_list: ModelId, Maker, Model; car_names: MakeId, Model, Make; cars_data: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year | How many cars have more than 4 cylinders?", "sql": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;", "example": {"db_id": "car_1", "query": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "CARS_DATA", "WHERE", "Cylinders", ">", "4", ";"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "cars_data", "where", "cylinders", ">", "value"], "question": "How many cars have more than 4 cylinders?", "question_toks": ["How", "many", "cars", "have", "more", "than", "4", "cylinders", "?"], "guid": 658}}
{"text": "continents: ContId, Continent; countries: CountryId, CountryName, Continent; car_makers: Id, Maker, FullName, Country; model_list: ModelId, Maker, Model; car_names: MakeId, Model, Make; cars_data: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year | For model volvo, how many cylinders does the car with the least accelerate have?", "sql": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;", "example": {"db_id": "car_1", "query": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;", "query_toks": ["SELECT", "T1.cylinders", "FROM", "CARS_DATA", "AS", "T1", "JOIN", "CAR_NAMES", "AS", "T2", "ON", "T1.Id", "=", "T2.MakeId", "WHERE", "T2.Model", "=", "'volvo", "'", "ORDER", "BY", "T1.accelerate", "ASC", "LIMIT", "1", ";"], "query_toks_no_value": ["select", "t1", ".", "cylinders", "from", "cars_data", "as", "t1", "join", "car_names", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "makeid", "where", "t2", ".", "model", "=", "value", "order", "by", "t1", ".", "accelerate", "asc", "limit", "value"], "question": "For model volvo, how many cylinders does the car with the least accelerate have?", "question_toks": ["For", "model", "volvo", ",", "how", "many", "cylinders", "does", "the", "car", "with", "the", "least", "accelerate", "have", "?"], "guid": 659}}
{"text": "regions: REGION_ID, REGION_NAME; countries: COUNTRY_ID, COUNTRY_NAME, REGION_ID; departments: DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID; jobs: JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY; employees: EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID; job_history: EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID; locations: LOCATION_ID, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_ID | What are the full name, hire data, salary and department id for employees without the letter M in their first name, ordered by ascending department id?", "sql": "SELECT first_name ,  last_name ,  hire_date ,  salary ,  department_id FROM employees WHERE first_name NOT LIKE '%M%' ORDER BY department_id", "example": {"db_id": "hr_1", "query": "SELECT first_name ,  last_name ,  hire_date ,  salary ,  department_id FROM employees WHERE first_name NOT LIKE '%M%' ORDER BY department_id", "query_toks": ["SELECT", "first_name", ",", "last_name", ",", "hire_date", ",", "salary", ",", "department_id", "FROM", "employees", "WHERE", "first_name", "NOT", "LIKE", "'", "%", "M", "%", "'", "ORDER", "BY", "department_id"], "query_toks_no_value": ["select", "first_name", ",", "last_name", ",", "hire_date", ",", "salary", ",", "department_id", "from", "employees", "where", "first_name", "not", "like", "value", "order", "by", "department_id"], "question": "What are the full name, hire data, salary and department id for employees without the letter M in their first name, ordered by ascending department id?", "question_toks": ["What", "are", "the", "full", "name", ",", "hire", "data", ",", "salary", "and", "department", "id", "for", "employees", "without", "the", "letter", "M", "in", "their", "first", "name", ",", "ordered", "by", "ascending", "department", "id", "?"], "guid": 660}}
{"text": "Manufacturers: Code, Name, Headquarter, Founder, Revenue; Products: Code, Name, Price, Manufacturer | Who is the founders of companies whose first letter is S?", "sql": "SELECT founder FROM manufacturers WHERE name LIKE 'S%'", "example": {"db_id": "manufactory_1", "query": "SELECT founder FROM manufacturers WHERE name LIKE 'S%'", "query_toks": ["SELECT", "founder", "FROM", "manufacturers", "WHERE", "name", "LIKE", "'S", "%", "'"], "query_toks_no_value": ["select", "founder", "from", "manufacturers", "where", "name", "like", "value"], "question": "Who is the founders of companies whose first letter is S?", "question_toks": ["Who", "is", "the", "founders", "of", "companies", "whose", "first", "letter", "is", "S", "?"], "guid": 661}}
{"text": "company: Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value; gas_station: Station_ID, Open_Year, Location, Manager_Name, Vice_Manager_Name, Representative_Name; station_company: Station_ID, Company_ID, Rank_of_the_Year | Show the company name and the main industry for all companies whose headquarters are not from USA.", "sql": "SELECT company ,  main_industry FROM company WHERE headquarters != 'USA'", "example": {"db_id": "gas_company", "query": "SELECT company ,  main_industry FROM company WHERE headquarters != 'USA'", "query_toks": ["SELECT", "company", ",", "main_industry", "FROM", "company", "WHERE", "headquarters", "!", "=", "'USA", "'"], "query_toks_no_value": ["select", "company", ",", "main_industry", "from", "company", "where", "headquarters", "!", "=", "value"], "question": "Show the company name and the main industry for all companies whose headquarters are not from USA.", "question_toks": ["Show", "the", "company", "name", "and", "the", "main", "industry", "for", "all", "companies", "whose", "headquarters", "are", "not", "from", "USA", "."], "guid": 662}}
{"text": "regions: REGION_ID, REGION_NAME; countries: COUNTRY_ID, COUNTRY_NAME, REGION_ID; departments: DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID; jobs: JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY; employees: EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID; job_history: EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID; locations: LOCATION_ID, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_ID | display the full name (first and last), hire date, salary, and department number for those employees whose first name does not containing the letter M and make the result set in ascending order by department number.", "sql": "SELECT first_name ,  last_name ,  hire_date ,  salary ,  department_id FROM employees WHERE first_name NOT LIKE '%M%' ORDER BY department_id", "example": {"db_id": "hr_1", "query": "SELECT first_name ,  last_name ,  hire_date ,  salary ,  department_id FROM employees WHERE first_name NOT LIKE '%M%' ORDER BY department_id", "query_toks": ["SELECT", "first_name", ",", "last_name", ",", "hire_date", ",", "salary", ",", "department_id", "FROM", "employees", "WHERE", "first_name", "NOT", "LIKE", "'", "%", "M", "%", "'", "ORDER", "BY", "department_id"], "query_toks_no_value": ["select", "first_name", ",", "last_name", ",", "hire_date", ",", "salary", ",", "department_id", "from", "employees", "where", "first_name", "not", "like", "value", "order", "by", "department_id"], "question": "display the full name (first and last), hire date, salary, and department number for those employees whose first name does not containing the letter M and make the result set in ascending order by department number.", "question_toks": ["display", "the", "full", "name", "(", "first", "and", "last", ")", ",", "hire", "date", ",", "salary", ",", "and", "department", "number", "for", "those", "employees", "whose", "first", "name", "does", "not", "containing", "the", "letter", "M", "and", "make", "the", "result", "set", "in", "ascending", "order", "by", "department", "number", "."], "guid": 663}}
{"text": "continents: ContId, Continent; countries: CountryId, CountryName, Continent; car_makers: Id, Maker, FullName, Country; model_list: ModelId, Maker, Model; car_names: MakeId, Model, Make; cars_data: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year | What are all the makers and models?", "sql": "SELECT Maker ,  Model FROM MODEL_LIST;", "example": {"db_id": "car_1", "query": "SELECT Maker ,  Model FROM MODEL_LIST;", "query_toks": ["SELECT", "Maker", ",", "Model", "FROM", "MODEL_LIST", ";"], "query_toks_no_value": ["select", "maker", ",", "model", "from", "model_list"], "question": "What are all the makers and models?", "question_toks": ["What", "are", "all", "the", "makers", "and", "models", "?"], "guid": 664}}
{"text": "continents: ContId, Continent; countries: CountryId, CountryName, Continent; car_makers: Id, Maker, FullName, Country; model_list: ModelId, Maker, Model; car_names: MakeId, Model, Make; cars_data: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year | What is the number of cars with a horsepower greater than 150?", "sql": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;", "example": {"db_id": "car_1", "query": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "CARS_DATA", "WHERE", "horsepower", ">", "150", ";"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "cars_data", "where", "horsepower", ">", "value"], "question": "What is the number of cars with a horsepower greater than 150?", "question_toks": ["What", "is", "the", "number", "of", "cars", "with", "a", "horsepower", "greater", "than", "150", "?"], "guid": 665}}
{"text": "phone: Name, Phone_ID, Memory_in_G, Carrier, Price; market: Market_ID, District, Num_of_employees, Num_of_shops, Ranking; phone_market: Market_ID, Phone_ID, Num_of_stock | Show the names of phones and the districts of markets they are on.", "sql": "SELECT T3.Name ,  T2.District FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID  =  T3.Phone_ID", "example": {"db_id": "phone_market", "query": "SELECT T3.Name ,  T2.District FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID  =  T3.Phone_ID", "query_toks": ["SELECT", "T3.Name", ",", "T2.District", "FROM", "phone_market", "AS", "T1", "JOIN", "market", "AS", "T2", "ON", "T1.Market_ID", "=", "T2.Market_ID", "JOIN", "phone", "AS", "T3", "ON", "T1.Phone_ID", "=", "T3.Phone_ID"], "query_toks_no_value": ["select", "t3", ".", "name", ",", "t2", ".", "district", "from", "phone_market", "as", "t1", "join", "market", "as", "t2", "on", "t1", ".", "market_id", "=", "t2", ".", "market_id", "join", "phone", "as", "t3", "on", "t1", ".", "phone_id", "=", "t3", ".", "phone_id"], "question": "Show the names of phones and the districts of markets they are on.", "question_toks": ["Show", "the", "names", "of", "phones", "and", "the", "districts", "of", "markets", "they", "are", "on", "."], "guid": 666}}
{"text": "regions: REGION_ID, REGION_NAME; countries: COUNTRY_ID, COUNTRY_NAME, REGION_ID; departments: DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID; jobs: JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY; employees: EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID; job_history: EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID; locations: LOCATION_ID, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_ID | display the department ID, full name (first and last name), salary for those employees who is highest salary in every department.", "sql": "SELECT first_name ,   last_name ,   salary ,  department_id ,  MAX(salary) FROM employees GROUP BY department_id", "example": {"db_id": "hr_1", "query": "SELECT first_name ,   last_name ,   salary ,  department_id ,  MAX(salary) FROM employees GROUP BY department_id", "query_toks": ["SELECT", "first_name", ",", "last_name", ",", "salary", ",", "department_id", ",", "MAX", "(", "salary", ")", "FROM", "employees", "GROUP", "BY", "department_id"], "query_toks_no_value": ["select", "first_name", ",", "last_name", ",", "salary", ",", "department_id", ",", "max", "(", "salary", ")", "from", "employees", "group", "by", "department_id"], "question": "display the department ID, full name (first and last name), salary for those employees who is highest salary in every department.", "question_toks": ["display", "the", "department", "ID", ",", "full", "name", "(", "first", "and", "last", "name", ")", ",", "salary", "for", "those", "employees", "who", "is", "highest", "salary", "in", "every", "department", "."], "guid": 667}}
{"text": "regions: REGION_ID, REGION_NAME; countries: COUNTRY_ID, COUNTRY_NAME, REGION_ID; departments: DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID; jobs: JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY; employees: EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID; job_history: EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID; locations: LOCATION_ID, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_ID | display the full name (first and last name ) of employee with ID and name of the country presently where (s)he is working.", "sql": "SELECT T1.first_name ,  T1.last_name , T1.employee_id ,  T4.country_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id JOIN countries AS T4 ON T3.country_id  =  T4.country_id", "example": {"db_id": "hr_1", "query": "SELECT T1.first_name ,  T1.last_name , T1.employee_id ,  T4.country_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id JOIN countries AS T4 ON T3.country_id  =  T4.country_id", "query_toks": ["SELECT", "T1.first_name", ",", "T1.last_name", ",", "T1.employee_id", ",", "T4.country_name", "FROM", "employees", "AS", "T1", "JOIN", "departments", "AS", "T2", "ON", "T1.department_id", "=", "T2.department_id", "JOIN", "locations", "AS", "T3", "ON", "T2.location_id", "=", "T3.location_id", "JOIN", "countries", "AS", "T4", "ON", "T3.country_id", "=", "T4.country_id"], "query_toks_no_value": ["select", "t1", ".", "first_name", ",", "t1", ".", "last_name", ",", "t1", ".", "employee_id", ",", "t4", ".", "country_name", "from", "employees", "as", "t1", "join", "departments", "as", "t2", "on", "t1", ".", "department_id", "=", "t2", ".", "department_id", "join", "locations", "as", "t3", "on", "t2", ".", "location_id", "=", "t3", ".", "location_id", "join", "countries", "as", "t4", "on", "t3", ".", "country_id", "=", "t4", ".", "country_id"], "question": "display the full name (first and last name ) of employee with ID and name of the country presently where (s)he is working.", "question_toks": ["display", "the", "full", "name", "(", "first", "and", "last", "name", ")", "of", "employee", "with", "ID", "and", "name", "of", "the", "country", "presently", "where", "(", "s", ")", "he", "is", "working", "."], "guid": 668}}
{"text": "buildings: id, name, City, Height, Stories, Status; Companies: id, name, Headquarters, Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value_billion; Office_locations: building_id, company_id, move_in_year | Find the number of companies whose industry is \"Banking\" or \"Conglomerate\",", "sql": "SELECT count(*) FROM Companies WHERE Industry  =  \"Banking\" OR Industry  =  \"Conglomerate\"", "example": {"db_id": "company_office", "query": "SELECT count(*) FROM Companies WHERE Industry  =  \"Banking\" OR Industry  =  \"Conglomerate\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Companies", "WHERE", "Industry", "=", "``", "Banking", "''", "OR", "Industry", "=", "``", "Conglomerate", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "companies", "where", "industry", "=", "value", "or", "industry", "=", "value"], "question": "Find the number of companies whose industry is \"Banking\" or \"Conglomerate\",", "question_toks": ["Find", "the", "number", "of", "companies", "whose", "industry", "is", "``", "Banking", "''", "or", "``", "Conglomerate", "''", ","], "guid": 669}}
{"text": "regions: REGION_ID, REGION_NAME; countries: COUNTRY_ID, COUNTRY_NAME, REGION_ID; departments: DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID; jobs: JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY; employees: EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID; job_history: EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID; locations: LOCATION_ID, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_ID | What are the emails of employees with null commission, salary between 7000 and 12000, and who work in department 50?", "sql": "SELECT email FROM employees WHERE commission_pct  =  \"null\" AND salary BETWEEN 7000 AND 12000 AND department_id = 50", "example": {"db_id": "hr_1", "query": "SELECT email FROM employees WHERE commission_pct  =  \"null\" AND salary BETWEEN 7000 AND 12000 AND department_id = 50", "query_toks": ["SELECT", "email", "FROM", "employees", "WHERE", "commission_pct", "=", "``", "null", "''", "AND", "salary", "BETWEEN", "7000", "AND", "12000", "AND", "department_id", "=", "50"], "query_toks_no_value": ["select", "email", "from", "employees", "where", "commission_pct", "=", "value", "and", "salary", "between", "value", "and", "value", "and", "department_id", "=", "value"], "question": "What are the emails of employees with null commission, salary between 7000 and 12000, and who work in department 50?", "question_toks": ["What", "are", "the", "emails", "of", "employees", "with", "null", "commission", ",", "salary", "between", "7000", "and", "12000", ",", "and", "who", "work", "in", "department", "50", "?"], "guid": 670}}
{"text": "regions: REGION_ID, REGION_NAME; countries: COUNTRY_ID, COUNTRY_NAME, REGION_ID; departments: DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID; jobs: JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY; employees: EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID; job_history: EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID; locations: LOCATION_ID, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_ID | What are the employee ids and job ids for employees who make less than the lowest earning employee with title MK_MAN?", "sql": "SELECT employee_id ,  job_id FROM employees WHERE salary  <  ( SELECT min(salary) FROM employees WHERE job_id  =  'MK_MAN' )", "example": {"db_id": "hr_1", "query": "SELECT employee_id ,  job_id FROM employees WHERE salary  <  ( SELECT min(salary) FROM employees WHERE job_id  =  'MK_MAN' )", "query_toks": ["SELECT", "employee_id", ",", "job_id", "FROM", "employees", "WHERE", "salary", "<", "(", "SELECT", "min", "(", "salary", ")", "FROM", "employees", "WHERE", "job_id", "=", "'MK_MAN", "'", ")"], "query_toks_no_value": ["select", "employee_id", ",", "job_id", "from", "employees", "where", "salary", "<", "(", "select", "min", "(", "salary", ")", "from", "employees", "where", "job_id", "=", "value", ")"], "question": "What are the employee ids and job ids for employees who make less than the lowest earning employee with title MK_MAN?", "question_toks": ["What", "are", "the", "employee", "ids", "and", "job", "ids", "for", "employees", "who", "make", "less", "than", "the", "lowest", "earning", "employee", "with", "title", "MK_MAN", "?"], "guid": 671}}
{"text": "regions: REGION_ID, REGION_NAME; countries: COUNTRY_ID, COUNTRY_NAME, REGION_ID; departments: DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID; jobs: JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY; employees: EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID; job_history: EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID; locations: LOCATION_ID, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_ID | What are the full names and department ids for the lowest paid employees across all departments.", "sql": "SELECT first_name ,  last_name ,  department_id FROM employees WHERE salary IN (SELECT MIN(salary) FROM employees GROUP BY department_id)", "example": {"db_id": "hr_1", "query": "SELECT first_name ,  last_name ,  department_id FROM employees WHERE salary IN (SELECT MIN(salary) FROM employees GROUP BY department_id)", "query_toks": ["SELECT", "first_name", ",", "last_name", ",", "department_id", "FROM", "employees", "WHERE", "salary", "IN", "(", "SELECT", "MIN", "(", "salary", ")", "FROM", "employees", "GROUP", "BY", "department_id", ")"], "query_toks_no_value": ["select", "first_name", ",", "last_name", ",", "department_id", "from", "employees", "where", "salary", "in", "(", "select", "min", "(", "salary", ")", "from", "employees", "group", "by", "department_id", ")"], "question": "What are the full names and department ids for the lowest paid employees across all departments.", "question_toks": ["What", "are", "the", "full", "names", "and", "department", "ids", "for", "the", "lowest", "paid", "employees", "across", "all", "departments", "."], "guid": 672}}
{"text": "continents: ContId, Continent; countries: CountryId, CountryName, Continent; car_makers: Id, Maker, FullName, Country; model_list: ModelId, Maker, Model; car_names: MakeId, Model, Make; cars_data: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year | What is the number of cars with a greater accelerate than the one with the most horsepower?", "sql": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );", "example": {"db_id": "car_1", "query": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );", "query_toks": ["SELECT", "COUNT", "(", "*", ")", "FROM", "CARS_DATA", "WHERE", "Accelerate", ">", "(", "SELECT", "Accelerate", "FROM", "CARS_DATA", "ORDER", "BY", "Horsepower", "DESC", "LIMIT", "1", ")", ";"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "cars_data", "where", "accelerate", ">", "(", "select", "accelerate", "from", "cars_data", "order", "by", "horsepower", "desc", "limit", "value", ")"], "question": "What is the number of cars with a greater accelerate than the one with the most horsepower?", "question_toks": ["What", "is", "the", "number", "of", "cars", "with", "a", "greater", "accelerate", "than", "the", "one", "with", "the", "most", "horsepower", "?"], "guid": 673}}
{"text": "company: Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value; gas_station: Station_ID, Open_Year, Location, Manager_Name, Vice_Manager_Name, Representative_Name; station_company: Station_ID, Company_ID, Rank_of_the_Year | How many gas companies are there?", "sql": "SELECT count(*) FROM company", "example": {"db_id": "gas_company", "query": "SELECT count(*) FROM company", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "company"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "company"], "question": "How many gas companies are there?", "question_toks": ["How", "many", "gas", "companies", "are", "there", "?"], "guid": 674}}
{"text": "Manufacturers: Code, Name, Headquarter, Founder, Revenue; Products: Code, Name, Price, Manufacturer | What are the codes and names of the cheapest products in each category?", "sql": "SELECT code ,  name ,  min(price) FROM products GROUP BY name", "example": {"db_id": "manufactory_1", "query": "SELECT code ,  name ,  min(price) FROM products GROUP BY name", "query_toks": ["SELECT", "code", ",", "name", ",", "min", "(", "price", ")", "FROM", "products", "GROUP", "BY", "name"], "query_toks_no_value": ["select", "code", ",", "name", ",", "min", "(", "price", ")", "from", "products", "group", "by", "name"], "question": "What are the codes and names of the cheapest products in each category?", "question_toks": ["What", "are", "the", "codes", "and", "names", "of", "the", "cheapest", "products", "in", "each", "category", "?"], "guid": 675}}
{"text": "regions: REGION_ID, REGION_NAME; countries: COUNTRY_ID, COUNTRY_NAME, REGION_ID; departments: DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID; jobs: JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY; employees: EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID; job_history: EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID; locations: LOCATION_ID, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_ID | Display all the information about the department Marketing.", "sql": "SELECT * FROM  departments WHERE department_name  =  'Marketing'", "example": {"db_id": "hr_1", "query": "SELECT * FROM  departments WHERE department_name  =  'Marketing'", "query_toks": ["SELECT", "*", "FROM", "departments", "WHERE", "department_name", "=", "'Marketing", "'"], "query_toks_no_value": ["select", "*", "from", "departments", "where", "department_name", "=", "value"], "question": "Display all the information about the department Marketing.", "question_toks": ["Display", "all", "the", "information", "about", "the", "department", "Marketing", "."], "guid": 676}}
{"text": "company: Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value; gas_station: Station_ID, Open_Year, Location, Manager_Name, Vice_Manager_Name, Representative_Name; station_company: Station_ID, Company_ID, Rank_of_the_Year | What are the main industries of the companies without gas stations and what are the companies?", "sql": "SELECT company ,  main_industry FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company)", "example": {"db_id": "gas_company", "query": "SELECT company ,  main_industry FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company)", "query_toks": ["SELECT", "company", ",", "main_industry", "FROM", "company", "WHERE", "company_id", "NOT", "IN", "(", "SELECT", "company_id", "FROM", "station_company", ")"], "query_toks_no_value": ["select", "company", ",", "main_industry", "from", "company", "where", "company_id", "not", "in", "(", "select", "company_id", "from", "station_company", ")"], "question": "What are the main industries of the companies without gas stations and what are the companies?", "question_toks": ["What", "are", "the", "main", "industries", "of", "the", "companies", "without", "gas", "stations", "and", "what", "are", "the", "companies", "?"], "guid": 677}}
{"text": "Manufacturers: Code, Name, Headquarter, Founder, Revenue; Products: Code, Name, Price, Manufacturer | Find all information of all the products with a price between $60 and $120.", "sql": "SELECT * FROM products WHERE price BETWEEN 60 AND 120", "example": {"db_id": "manufactory_1", "query": "SELECT * FROM products WHERE price BETWEEN 60 AND 120", "query_toks": ["SELECT", "*", "FROM", "products", "WHERE", "price", "BETWEEN", "60", "AND", "120"], "query_toks_no_value": ["select", "*", "from", "products", "where", "price", "between", "value", "and", "value"], "question": "Find all information of all the products with a price between $60 and $120.", "question_toks": ["Find", "all", "information", "of", "all", "the", "products", "with", "a", "price", "between", "$", "60", "and", "$", "120", "."], "guid": 678}}
{"text": "employee: Employee_ID, Name, Age, City; shop: Shop_ID, Name, Location, District, Number_products, Manager_name; hiring: Shop_ID, Employee_ID, Start_from, Is_full_time; evaluation: Employee_ID, Year_awarded, Bonus | How many employees are there?", "sql": "SELECT count(*) FROM employee", "example": {"db_id": "employee_hire_evaluation", "query": "SELECT count(*) FROM employee", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "employee"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "employee"], "question": "How many employees are there?", "question_toks": ["How", "many", "employees", "are", "there", "?"], "guid": 679}}
{"text": "member: Member_ID, Name, Nationality, Role; performance: Performance_ID, Date, Host, Location, Attendance; member_attendance: Member_ID, Performance_ID, Num_of_Pieces | Show the most common location of performances.", "sql": "SELECT LOCATION FROM performance GROUP BY LOCATION ORDER BY COUNT(*) DESC LIMIT 1", "example": {"db_id": "performance_attendance", "query": "SELECT LOCATION FROM performance GROUP BY LOCATION ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "LOCATION", "FROM", "performance", "GROUP", "BY", "LOCATION", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "location", "from", "performance", "group", "by", "location", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Show the most common location of performances.", "question_toks": ["Show", "the", "most", "common", "location", "of", "performances", "."], "guid": 680}}
{"text": "regions: REGION_ID, REGION_NAME; countries: COUNTRY_ID, COUNTRY_NAME, REGION_ID; departments: DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID; jobs: JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY; employees: EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID; job_history: EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID; locations: LOCATION_ID, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_ID | Return the phone numbers of employees with salaries between 8000 and 12000.", "sql": "SELECT phone_number FROM employees WHERE salary BETWEEN 8000 AND 12000", "example": {"db_id": "hr_1", "query": "SELECT phone_number FROM employees WHERE salary BETWEEN 8000 AND 12000", "query_toks": ["SELECT", "phone_number", "FROM", "employees", "WHERE", "salary", "BETWEEN", "8000", "AND", "12000"], "query_toks_no_value": ["select", "phone_number", "from", "employees", "where", "salary", "between", "value", "and", "value"], "question": "Return the phone numbers of employees with salaries between 8000 and 12000.", "question_toks": ["Return", "the", "phone", "numbers", "of", "employees", "with", "salaries", "between", "8000", "and", "12000", "."], "guid": 681}}
{"text": "continents: ContId, Continent; countries: CountryId, CountryName, Continent; car_makers: Id, Maker, FullName, Country; model_list: ModelId, Maker, Model; car_names: MakeId, Model, Make; cars_data: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year | Which distinct car models are the produced after 1980?", "sql": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;", "example": {"db_id": "car_1", "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;", "query_toks": ["SELECT", "DISTINCT", "T1.model", "FROM", "MODEL_LIST", "AS", "T1", "JOIN", "CAR_NAMES", "AS", "T2", "ON", "T1.model", "=", "T2.model", "JOIN", "CARS_DATA", "AS", "T3", "ON", "T2.MakeId", "=", "T3.id", "WHERE", "T3.year", ">", "1980", ";"], "query_toks_no_value": ["select", "distinct", "t1", ".", "model", "from", "model_list", "as", "t1", "join", "car_names", "as", "t2", "on", "t1", ".", "model", "=", "t2", ".", "model", "join", "cars_data", "as", "t3", "on", "t2", ".", "makeid", "=", "t3", ".", "id", "where", "t3", ".", "year", ">", "value"], "question": "Which distinct car models are the produced after 1980?", "question_toks": ["Which", "distinct", "car", "models", "are", "the", "produced", "after", "1980", "?"], "guid": 682}}
{"text": "phone: Name, Phone_ID, Memory_in_G, Carrier, Price; market: Market_ID, District, Num_of_employees, Num_of_shops, Ranking; phone_market: Market_ID, Phone_ID, Num_of_stock | Show the names of phones that are on market with number of shops greater than 50.", "sql": "SELECT T3.Name FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID  =  T3.Phone_ID WHERE T2.Num_of_shops  >  50", "example": {"db_id": "phone_market", "query": "SELECT T3.Name FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID  =  T3.Phone_ID WHERE T2.Num_of_shops  >  50", "query_toks": ["SELECT", "T3.Name", "FROM", "phone_market", "AS", "T1", "JOIN", "market", "AS", "T2", "ON", "T1.Market_ID", "=", "T2.Market_ID", "JOIN", "phone", "AS", "T3", "ON", "T1.Phone_ID", "=", "T3.Phone_ID", "WHERE", "T2.Num_of_shops", ">", "50"], "query_toks_no_value": ["select", "t3", ".", "name", "from", "phone_market", "as", "t1", "join", "market", "as", "t2", "on", "t1", ".", "market_id", "=", "t2", ".", "market_id", "join", "phone", "as", "t3", "on", "t1", ".", "phone_id", "=", "t3", ".", "phone_id", "where", "t2", ".", "num_of_shops", ">", "value"], "question": "Show the names of phones that are on market with number of shops greater than 50.", "question_toks": ["Show", "the", "names", "of", "phones", "that", "are", "on", "market", "with", "number", "of", "shops", "greater", "than", "50", "."], "guid": 683}}
{"text": "continents: ContId, Continent; countries: CountryId, CountryName, Continent; car_makers: Id, Maker, FullName, Country; model_list: ModelId, Maker, Model; car_names: MakeId, Model, Make; cars_data: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year | What is the average horsepower for all cars produced before 1980 ?", "sql": "select avg(horsepower) from cars_data where year  <  1980;", "example": {"db_id": "car_1", "query": "select avg(horsepower) from cars_data where year  <  1980;", "query_toks": ["select", "avg", "(", "horsepower", ")", "from", "cars_data", "where", "year", "<", "1980", ";"], "query_toks_no_value": ["select", "avg", "(", "horsepower", ")", "from", "cars_data", "where", "year", "<", "value"], "question": "What is the average horsepower for all cars produced before 1980 ?", "question_toks": ["What", "is", "the", "average", "horsepower", "for", "all", "cars", "produced", "before", "1980", "?"], "guid": 684}}
{"text": "chip_model: Model_name, Launch_year, RAM_MiB, ROM_MiB, Slots, WiFi, Bluetooth; screen_mode: Graphics_mode, Char_cells, Pixels, Hardware_colours, used_kb, map, Type; phone: Company_name, Hardware_Model_name, Accreditation_type, Accreditation_level, Date, chip_model, screen_mode | Find the names of the chip models that are not used by any phone with full accreditation type.", "sql": "SELECT model_name FROM chip_model EXCEPT SELECT chip_model FROM phone WHERE Accreditation_type  =  'Full'", "example": {"db_id": "phone_1", "query": "SELECT model_name FROM chip_model EXCEPT SELECT chip_model FROM phone WHERE Accreditation_type  =  'Full'", "query_toks": ["SELECT", "model_name", "FROM", "chip_model", "EXCEPT", "SELECT", "chip_model", "FROM", "phone", "WHERE", "Accreditation_type", "=", "'Full", "'"], "query_toks_no_value": ["select", "model_name", "from", "chip_model", "except", "select", "chip_model", "from", "phone", "where", "accreditation_type", "=", "value"], "question": "Find the names of the chip models that are not used by any phone with full accreditation type.", "question_toks": ["Find", "the", "names", "of", "the", "chip", "models", "that", "are", "not", "used", "by", "any", "phone", "with", "full", "accreditation", "type", "."], "guid": 685}}
{"text": "member: Member_ID, Name, Nationality, Role; performance: Performance_ID, Date, Host, Location, Attendance; member_attendance: Member_ID, Performance_ID, Num_of_Pieces | List the names of members who did not attend any performance.", "sql": "SELECT Name FROM member WHERE Member_ID NOT IN (SELECT Member_ID FROM member_attendance)", "example": {"db_id": "performance_attendance", "query": "SELECT Name FROM member WHERE Member_ID NOT IN (SELECT Member_ID FROM member_attendance)", "query_toks": ["SELECT", "Name", "FROM", "member", "WHERE", "Member_ID", "NOT", "IN", "(", "SELECT", "Member_ID", "FROM", "member_attendance", ")"], "query_toks_no_value": ["select", "name", "from", "member", "where", "member_id", "not", "in", "(", "select", "member_id", "from", "member_attendance", ")"], "question": "List the names of members who did not attend any performance.", "question_toks": ["List", "the", "names", "of", "members", "who", "did", "not", "attend", "any", "performance", "."], "guid": 686}}
{"text": "regions: REGION_ID, REGION_NAME; countries: COUNTRY_ID, COUNTRY_NAME, REGION_ID; departments: DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID; jobs: JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY; employees: EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID; job_history: EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID; locations: LOCATION_ID, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_ID | Display the first name, and department number for all employees whose last name is \"McEwen\".", "sql": "SELECT first_name ,  department_id FROM employees WHERE last_name  =  'McEwen'", "example": {"db_id": "hr_1", "query": "SELECT first_name ,  department_id FROM employees WHERE last_name  =  'McEwen'", "query_toks": ["SELECT", "first_name", ",", "department_id", "FROM", "employees", "WHERE", "last_name", "=", "'McEwen", "'"], "query_toks_no_value": ["select", "first_name", ",", "department_id", "from", "employees", "where", "last_name", "=", "value"], "question": "Display the first name, and department number for all employees whose last name is \"McEwen\".", "question_toks": ["Display", "the", "first", "name", ",", "and", "department", "number", "for", "all", "employees", "whose", "last", "name", "is", "``", "McEwen", "''", "."], "guid": 687}}
{"text": "phone: Name, Phone_ID, Memory_in_G, Carrier, Price; market: Market_ID, District, Num_of_employees, Num_of_shops, Ranking; phone_market: Market_ID, Phone_ID, Num_of_stock | For each phone, show its names and total number of stocks.", "sql": "SELECT T2.Name ,  sum(T1.Num_of_stock) FROM phone_market AS T1 JOIN phone AS T2 ON T1.Phone_ID  =  T2.Phone_ID GROUP BY T2.Name", "example": {"db_id": "phone_market", "query": "SELECT T2.Name ,  sum(T1.Num_of_stock) FROM phone_market AS T1 JOIN phone AS T2 ON T1.Phone_ID  =  T2.Phone_ID GROUP BY T2.Name", "query_toks": ["SELECT", "T2.Name", ",", "sum", "(", "T1.Num_of_stock", ")", "FROM", "phone_market", "AS", "T1", "JOIN", "phone", "AS", "T2", "ON", "T1.Phone_ID", "=", "T2.Phone_ID", "GROUP", "BY", "T2.Name"], "query_toks_no_value": ["select", "t2", ".", "name", ",", "sum", "(", "t1", ".", "num_of_stock", ")", "from", "phone_market", "as", "t1", "join", "phone", "as", "t2", "on", "t1", ".", "phone_id", "=", "t2", ".", "phone_id", "group", "by", "t2", ".", "name"], "question": "For each phone, show its names and total number of stocks.", "question_toks": ["For", "each", "phone", ",", "show", "its", "names", "and", "total", "number", "of", "stocks", "."], "guid": 688}}
{"text": "regions: REGION_ID, REGION_NAME; countries: COUNTRY_ID, COUNTRY_NAME, REGION_ID; departments: DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID; jobs: JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY; employees: EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID; job_history: EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID; locations: LOCATION_ID, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_ID | Return all the information for all employees without any department number.", "sql": "SELECT * FROM employees WHERE department_id  =  \"null\"", "example": {"db_id": "hr_1", "query": "SELECT * FROM employees WHERE department_id  =  \"null\"", "query_toks": ["SELECT", "*", "FROM", "employees", "WHERE", "department_id", "=", "``", "null", "''"], "query_toks_no_value": ["select", "*", "from", "employees", "where", "department_id", "=", "value"], "question": "Return all the information for all employees without any department number.", "question_toks": ["Return", "all", "the", "information", "for", "all", "employees", "without", "any", "department", "number", "."], "guid": 689}}
{"text": "continents: ContId, Continent; countries: CountryId, CountryName, Continent; car_makers: Id, Maker, FullName, Country; model_list: ModelId, Maker, Model; car_names: MakeId, Model, Make; cars_data: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year | What model has the most different versions?", "sql": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;", "example": {"db_id": "car_1", "query": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;", "query_toks": ["SELECT", "Model", "FROM", "CAR_NAMES", "GROUP", "BY", "Model", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1", ";"], "query_toks_no_value": ["select", "model", "from", "car_names", "group", "by", "model", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What model has the most different versions?", "question_toks": ["What", "model", "has", "the", "most", "different", "versions", "?"], "guid": 690}}
{"text": "buildings: id, name, City, Height, Stories, Status; Companies: id, name, Headquarters, Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value_billion; Office_locations: building_id, company_id, move_in_year | What are the average profits of companies?", "sql": "SELECT avg(Profits_billion) FROM Companies", "example": {"db_id": "company_office", "query": "SELECT avg(Profits_billion) FROM Companies", "query_toks": ["SELECT", "avg", "(", "Profits_billion", ")", "FROM", "Companies"], "query_toks_no_value": ["select", "avg", "(", "profits_billion", ")", "from", "companies"], "question": "What are the average profits of companies?", "question_toks": ["What", "are", "the", "average", "profits", "of", "companies", "?"], "guid": 691}}
{"text": "company: Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value; gas_station: Station_ID, Open_Year, Location, Manager_Name, Vice_Manager_Name, Representative_Name; station_company: Station_ID, Company_ID, Rank_of_the_Year | Show all company names and headquarters in the descending order of market value.", "sql": "SELECT company ,  headquarters FROM company ORDER BY market_value DESC", "example": {"db_id": "gas_company", "query": "SELECT company ,  headquarters FROM company ORDER BY market_value DESC", "query_toks": ["SELECT", "company", ",", "headquarters", "FROM", "company", "ORDER", "BY", "market_value", "DESC"], "query_toks_no_value": ["select", "company", ",", "headquarters", "from", "company", "order", "by", "market_value", "desc"], "question": "Show all company names and headquarters in the descending order of market value.", "question_toks": ["Show", "all", "company", "names", "and", "headquarters", "in", "the", "descending", "order", "of", "market", "value", "."], "guid": 692}}
{"text": "regions: REGION_ID, REGION_NAME; countries: COUNTRY_ID, COUNTRY_NAME, REGION_ID; departments: DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID; jobs: JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY; employees: EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID; job_history: EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID; locations: LOCATION_ID, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_ID | Which job titles correspond to jobs with salaries over 9000?", "sql": "SELECT job_title FROM jobs WHERE min_salary  >  9000", "example": {"db_id": "hr_1", "query": "SELECT job_title FROM jobs WHERE min_salary  >  9000", "query_toks": ["SELECT", "job_title", "FROM", "jobs", "WHERE", "min_salary", ">", "9000"], "query_toks_no_value": ["select", "job_title", "from", "jobs", "where", "min_salary", ">", "value"], "question": "Which job titles correspond to jobs with salaries over 9000?", "question_toks": ["Which", "job", "titles", "correspond", "to", "jobs", "with", "salaries", "over", "9000", "?"], "guid": 693}}
{"text": "buildings: id, name, City, Height, Stories, Status; Companies: id, name, Headquarters, Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value_billion; Office_locations: building_id, company_id, move_in_year | Please show the industries of companies in descending order of the number of companies.", "sql": "SELECT Industry FROM Companies GROUP BY Industry ORDER BY COUNT(*) DESC", "example": {"db_id": "company_office", "query": "SELECT Industry FROM Companies GROUP BY Industry ORDER BY COUNT(*) DESC", "query_toks": ["SELECT", "Industry", "FROM", "Companies", "GROUP", "BY", "Industry", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC"], "query_toks_no_value": ["select", "industry", "from", "companies", "group", "by", "industry", "order", "by", "count", "(", "*", ")", "desc"], "question": "Please show the industries of companies in descending order of the number of companies.", "question_toks": ["Please", "show", "the", "industries", "of", "companies", "in", "descending", "order", "of", "the", "number", "of", "companies", "."], "guid": 694}}
{"text": "regions: REGION_ID, REGION_NAME; countries: COUNTRY_ID, COUNTRY_NAME, REGION_ID; departments: DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID; jobs: JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY; employees: EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID; job_history: EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID; locations: LOCATION_ID, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_ID | display job Title, the difference between minimum and maximum salaries for those jobs which max salary within the range 12000 to 18000.", "sql": "SELECT job_title ,  max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000", "example": {"db_id": "hr_1", "query": "SELECT job_title ,  max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000", "query_toks": ["SELECT", "job_title", ",", "max_salary", "-", "min_salary", "FROM", "jobs", "WHERE", "max_salary", "BETWEEN", "12000", "AND", "18000"], "query_toks_no_value": ["select", "job_title", ",", "max_salary", "-", "min_salary", "from", "jobs", "where", "max_salary", "between", "value", "and", "value"], "question": "display job Title, the difference between minimum and maximum salaries for those jobs which max salary within the range 12000 to 18000.", "question_toks": ["display", "job", "Title", ",", "the", "difference", "between", "minimum", "and", "maximum", "salaries", "for", "those", "jobs", "which", "max", "salary", "within", "the", "range", "12000", "to", "18000", "."], "guid": 695}}
{"text": "regions: REGION_ID, REGION_NAME; countries: COUNTRY_ID, COUNTRY_NAME, REGION_ID; departments: DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID; jobs: JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY; employees: EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID; job_history: EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID; locations: LOCATION_ID, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_ID | What are the ids, full names, and salaries for employees making more than average and who work in a department with employees who have the letter J in their first name?", "sql": "SELECT employee_id ,  first_name ,  last_name ,  salary FROM employees WHERE salary  >  ( SELECT AVG (salary) FROM employees ) AND department_id IN ( SELECT department_id FROM employees WHERE first_name LIKE '%J%')", "example": {"db_id": "hr_1", "query": "SELECT employee_id ,  first_name ,  last_name ,  salary FROM employees WHERE salary  >  ( SELECT AVG (salary) FROM employees ) AND department_id IN ( SELECT department_id FROM employees WHERE first_name LIKE '%J%')", "query_toks": ["SELECT", "employee_id", ",", "first_name", ",", "last_name", ",", "salary", "FROM", "employees", "WHERE", "salary", ">", "(", "SELECT", "AVG", "(", "salary", ")", "FROM", "employees", ")", "AND", "department_id", "IN", "(", "SELECT", "department_id", "FROM", "employees", "WHERE", "first_name", "LIKE", "'", "%", "J", "%", "'", ")"], "query_toks_no_value": ["select", "employee_id", ",", "first_name", ",", "last_name", ",", "salary", "from", "employees", "where", "salary", ">", "(", "select", "avg", "(", "salary", ")", "from", "employees", ")", "and", "department_id", "in", "(", "select", "department_id", "from", "employees", "where", "first_name", "like", "value", ")"], "question": "What are the ids, full names, and salaries for employees making more than average and who work in a department with employees who have the letter J in their first name?", "question_toks": ["What", "are", "the", "ids", ",", "full", "names", ",", "and", "salaries", "for", "employees", "making", "more", "than", "average", "and", "who", "work", "in", "a", "department", "with", "employees", "who", "have", "the", "letter", "J", "in", "their", "first", "name", "?"], "guid": 696}}
{"text": "continents: ContId, Continent; countries: CountryId, CountryName, Continent; car_makers: Id, Maker, FullName, Country; model_list: ModelId, Maker, Model; car_names: MakeId, Model, Make; cars_data: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year | What are the different models created by either the car maker General Motors or weighed more than 3500?", "sql": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;", "example": {"db_id": "car_1", "query": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;", "query_toks": ["SELECT", "DISTINCT", "T2.Model", "FROM", "CAR_NAMES", "AS", "T1", "JOIN", "MODEL_LIST", "AS", "T2", "ON", "T1.Model", "=", "T2.Model", "JOIN", "CAR_MAKERS", "AS", "T3", "ON", "T2.Maker", "=", "T3.Id", "JOIN", "CARS_DATA", "AS", "T4", "ON", "T1.MakeId", "=", "T4.Id", "WHERE", "T3.FullName", "=", "'General", "Motors", "'", "OR", "T4.weight", ">", "3500", ";"], "query_toks_no_value": ["select", "distinct", "t2", ".", "model", "from", "car_names", "as", "t1", "join", "model_list", "as", "t2", "on", "t1", ".", "model", "=", "t2", ".", "model", "join", "car_makers", "as", "t3", "on", "t2", ".", "maker", "=", "t3", ".", "id", "join", "cars_data", "as", "t4", "on", "t1", ".", "makeid", "=", "t4", ".", "id", "where", "t3", ".", "fullname", "=", "value", "or", "t4", ".", "weight", ">", "value"], "question": "What are the different models created by either the car maker General Motors or weighed more than 3500?", "question_toks": ["What", "are", "the", "different", "models", "created", "by", "either", "the", "car", "maker", "General", "Motors", "or", "weighed", "more", "than", "3500", "?"], "guid": 697}}
{"text": "employee: Employee_ID, Name, Age, City; shop: Shop_ID, Name, Location, District, Number_products, Manager_name; hiring: Shop_ID, Employee_ID, Start_from, Is_full_time; evaluation: Employee_ID, Year_awarded, Bonus | How many different store locations are there?", "sql": "SELECT count(DISTINCT LOCATION) FROM shop", "example": {"db_id": "employee_hire_evaluation", "query": "SELECT count(DISTINCT LOCATION) FROM shop", "query_toks": ["SELECT", "count", "(", "DISTINCT", "LOCATION", ")", "FROM", "shop"], "query_toks_no_value": ["select", "count", "(", "distinct", "location", ")", "from", "shop"], "question": "How many different store locations are there?", "question_toks": ["How", "many", "different", "store", "locations", "are", "there", "?"], "guid": 698}}
{"text": "regions: REGION_ID, REGION_NAME; countries: COUNTRY_ID, COUNTRY_NAME, REGION_ID; departments: DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID; jobs: JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY; employees: EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID; job_history: EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID; locations: LOCATION_ID, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_ID | display job ID for those jobs that were done by two or more for more than 300 days.", "sql": "SELECT job_id FROM job_history WHERE end_date - start_date  > 300 GROUP BY job_id HAVING COUNT(*) >= 2", "example": {"db_id": "hr_1", "query": "SELECT job_id FROM job_history WHERE end_date - start_date  > 300 GROUP BY job_id HAVING COUNT(*) >= 2", "query_toks": ["SELECT", "job_id", "FROM", "job_history", "WHERE", "end_date", "-", "start_date", ">", "300", "GROUP", "BY", "job_id", "HAVING", "COUNT", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "job_id", "from", "job_history", "where", "end_date", "-", "start_date", ">", "value", "group", "by", "job_id", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "display job ID for those jobs that were done by two or more for more than 300 days.", "question_toks": ["display", "job", "ID", "for", "those", "jobs", "that", "were", "done", "by", "two", "or", "more", "for", "more", "than", "300", "days", "."], "guid": 699}}
{"text": "continents: ContId, Continent; countries: CountryId, CountryName, Continent; car_makers: Id, Maker, FullName, Country; model_list: ModelId, Maker, Model; car_names: MakeId, Model, Make; cars_data: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year | What are the names of the countries with no car makers?", "sql": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;", "example": {"db_id": "car_1", "query": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;", "query_toks": ["SELECT", "CountryName", "FROM", "countries", "EXCEPT", "SELECT", "T1.CountryName", "FROM", "countries", "AS", "T1", "JOIN", "CAR_MAKERS", "AS", "T2", "ON", "T1.countryId", "=", "T2.Country", ";"], "query_toks_no_value": ["select", "countryname", "from", "countries", "except", "select", "t1", ".", "countryname", "from", "countries", "as", "t1", "join", "car_makers", "as", "t2", "on", "t1", ".", "countryid", "=", "t2", ".", "country"], "question": "What are the names of the countries with no car makers?", "question_toks": ["What", "are", "the", "names", "of", "the", "countries", "with", "no", "car", "makers", "?"], "guid": 700}}
{"text": "manufacturer: Manufacturer_ID, Open_Year, Name, Num_of_Factories, Num_of_Shops; furniture: Furniture_ID, Name, Num_of_Component, Market_Rate; furniture_manufacte: Manufacturer_ID, Furniture_ID, Price_in_Dollar | Find the average number of factories for the manufacturers that have more than 20 shops.", "sql": "SELECT avg(Num_of_Factories) FROM manufacturer WHERE num_of_shops  >  20", "example": {"db_id": "manufacturer", "query": "SELECT avg(Num_of_Factories) FROM manufacturer WHERE num_of_shops  >  20", "query_toks": ["SELECT", "avg", "(", "Num_of_Factories", ")", "FROM", "manufacturer", "WHERE", "num_of_shops", ">", "20"], "query_toks_no_value": ["select", "avg", "(", "num_of_factories", ")", "from", "manufacturer", "where", "num_of_shops", ">", "value"], "question": "Find the average number of factories for the manufacturers that have more than 20 shops.", "question_toks": ["Find", "the", "average", "number", "of", "factories", "for", "the", "manufacturers", "that", "have", "more", "than", "20", "shops", "."], "guid": 701}}
{"text": "manufacturer: Manufacturer_ID, Open_Year, Name, Num_of_Factories, Num_of_Shops; furniture: Furniture_ID, Name, Num_of_Component, Market_Rate; furniture_manufacte: Manufacturer_ID, Furniture_ID, Price_in_Dollar | Find the names of furnitures whose prices are lower than the highest price.", "sql": "SELECT t1.name FROM furniture AS t1 JOIN furniture_manufacte AS t2 ON t1.Furniture_ID  =  t2.Furniture_ID WHERE t2.Price_in_Dollar  <  (SELECT max(Price_in_Dollar) FROM furniture_manufacte)", "example": {"db_id": "manufacturer", "query": "SELECT t1.name FROM furniture AS t1 JOIN furniture_manufacte AS t2 ON t1.Furniture_ID  =  t2.Furniture_ID WHERE t2.Price_in_Dollar  <  (SELECT max(Price_in_Dollar) FROM furniture_manufacte)", "query_toks": ["SELECT", "t1.name", "FROM", "furniture", "AS", "t1", "JOIN", "furniture_manufacte", "AS", "t2", "ON", "t1.Furniture_ID", "=", "t2.Furniture_ID", "WHERE", "t2.Price_in_Dollar", "<", "(", "SELECT", "max", "(", "Price_in_Dollar", ")", "FROM", "furniture_manufacte", ")"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "furniture", "as", "t1", "join", "furniture_manufacte", "as", "t2", "on", "t1", ".", "furniture_id", "=", "t2", ".", "furniture_id", "where", "t2", ".", "price_in_dollar", "<", "(", "select", "max", "(", "price_in_dollar", ")", "from", "furniture_manufacte", ")"], "question": "Find the names of furnitures whose prices are lower than the highest price.", "question_toks": ["Find", "the", "names", "of", "furnitures", "whose", "prices", "are", "lower", "than", "the", "highest", "price", "."], "guid": 702}}
{"text": "employee: Employee_ID, Name, Age, City; shop: Shop_ID, Name, Location, District, Number_products, Manager_name; hiring: Shop_ID, Employee_ID, Start_from, Is_full_time; evaluation: Employee_ID, Year_awarded, Bonus | What is the name of the shop that is hiring the largest number of employees?", "sql": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "employee_hire_evaluation", "query": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "t2.name", "FROM", "hiring", "AS", "t1", "JOIN", "shop", "AS", "t2", "ON", "t1.shop_id", "=", "t2.shop_id", "GROUP", "BY", "t1.shop_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "hiring", "as", "t1", "join", "shop", "as", "t2", "on", "t1", ".", "shop_id", "=", "t2", ".", "shop_id", "group", "by", "t1", ".", "shop_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the name of the shop that is hiring the largest number of employees?", "question_toks": ["What", "is", "the", "name", "of", "the", "shop", "that", "is", "hiring", "the", "largest", "number", "of", "employees", "?"], "guid": 703}}
{"text": "regions: REGION_ID, REGION_NAME; countries: COUNTRY_ID, COUNTRY_NAME, REGION_ID; departments: DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID; jobs: JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY; employees: EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID; job_history: EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID; locations: LOCATION_ID, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_ID | find the name of all departments that do actually have one or more employees assigned to them.", "sql": "SELECT DISTINCT T2.department_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id", "example": {"db_id": "hr_1", "query": "SELECT DISTINCT T2.department_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id", "query_toks": ["SELECT", "DISTINCT", "T2.department_name", "FROM", "employees", "AS", "T1", "JOIN", "departments", "AS", "T2", "ON", "T1.department_id", "=", "T2.department_id"], "query_toks_no_value": ["select", "distinct", "t2", ".", "department_name", "from", "employees", "as", "t1", "join", "departments", "as", "t2", "on", "t1", ".", "department_id", "=", "t2", ".", "department_id"], "question": "find the name of all departments that do actually have one or more employees assigned to them.", "question_toks": ["find", "the", "name", "of", "all", "departments", "that", "do", "actually", "have", "one", "or", "more", "employees", "assigned", "to", "them", "."], "guid": 704}}
{"text": "continents: ContId, Continent; countries: CountryId, CountryName, Continent; car_makers: Id, Maker, FullName, Country; model_list: ModelId, Maker, Model; car_names: MakeId, Model, Make; cars_data: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year | What is the smallest weight of the car produced with 8 cylinders on 1974 ?", "sql": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974", "example": {"db_id": "car_1", "query": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974", "query_toks": ["select", "min", "(", "weight", ")", "from", "cars_data", "where", "cylinders", "=", "8", "and", "year", "=", "1974"], "query_toks_no_value": ["select", "min", "(", "weight", ")", "from", "cars_data", "where", "cylinders", "=", "value", "and", "year", "=", "value"], "question": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?", "question_toks": ["What", "is", "the", "smallest", "weight", "of", "the", "car", "produced", "with", "8", "cylinders", "on", "1974", "?"], "guid": 705}}
{"text": "company: Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value; gas_station: Station_ID, Open_Year, Location, Manager_Name, Vice_Manager_Name, Representative_Name; station_company: Station_ID, Company_ID, Rank_of_the_Year | Show all locations where a gas station for company with market value greater than 100 is located.", "sql": "SELECT T3.location FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id WHERE T2.market_value  >  100", "example": {"db_id": "gas_company", "query": "SELECT T3.location FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id WHERE T2.market_value  >  100", "query_toks": ["SELECT", "T3.location", "FROM", "station_company", "AS", "T1", "JOIN", "company", "AS", "T2", "ON", "T1.company_id", "=", "T2.company_id", "JOIN", "gas_station", "AS", "T3", "ON", "T1.station_id", "=", "T3.station_id", "WHERE", "T2.market_value", ">", "100"], "query_toks_no_value": ["select", "t3", ".", "location", "from", "station_company", "as", "t1", "join", "company", "as", "t2", "on", "t1", ".", "company_id", "=", "t2", ".", "company_id", "join", "gas_station", "as", "t3", "on", "t1", ".", "station_id", "=", "t3", ".", "station_id", "where", "t2", ".", "market_value", ">", "value"], "question": "Show all locations where a gas station for company with market value greater than 100 is located.", "question_toks": ["Show", "all", "locations", "where", "a", "gas", "station", "for", "company", "with", "market", "value", "greater", "than", "100", "is", "located", "."], "guid": 706}}
{"text": "regions: REGION_ID, REGION_NAME; countries: COUNTRY_ID, COUNTRY_NAME, REGION_ID; departments: DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID; jobs: JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY; employees: EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID; job_history: EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID; locations: LOCATION_ID, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_ID | What are the job titles, and range of salaries for jobs with maximum salary between 12000 and 18000?", "sql": "SELECT job_title ,  max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000", "example": {"db_id": "hr_1", "query": "SELECT job_title ,  max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000", "query_toks": ["SELECT", "job_title", ",", "max_salary", "-", "min_salary", "FROM", "jobs", "WHERE", "max_salary", "BETWEEN", "12000", "AND", "18000"], "query_toks_no_value": ["select", "job_title", ",", "max_salary", "-", "min_salary", "from", "jobs", "where", "max_salary", "between", "value", "and", "value"], "question": "What are the job titles, and range of salaries for jobs with maximum salary between 12000 and 18000?", "question_toks": ["What", "are", "the", "job", "titles", ",", "and", "range", "of", "salaries", "for", "jobs", "with", "maximum", "salary", "between", "12000", "and", "18000", "?"], "guid": 707}}
{"text": "continents: ContId, Continent; countries: CountryId, CountryName, Continent; car_makers: Id, Maker, FullName, Country; model_list: ModelId, Maker, Model; car_names: MakeId, Model, Make; cars_data: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year | Which makers designed more than 3 car models? List full name and the id.", "sql": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;", "example": {"db_id": "car_1", "query": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;", "query_toks": ["SELECT", "T1.FullName", ",", "T1.Id", "FROM", "CAR_MAKERS", "AS", "T1", "JOIN", "MODEL_LIST", "AS", "T2", "ON", "T1.Id", "=", "T2.Maker", "GROUP", "BY", "T1.Id", "HAVING", "count", "(", "*", ")", ">", "3", ";"], "query_toks_no_value": ["select", "t1", ".", "fullname", ",", "t1", ".", "id", "from", "car_makers", "as", "t1", "join", "model_list", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "maker", "group", "by", "t1", ".", "id", "having", "count", "(", "*", ")", ">", "value"], "question": "Which makers designed more than 3 car models? List full name and the id.", "question_toks": ["Which", "makers", "designed", "more", "than", "3", "car", "models", "?", "List", "full", "name", "and", "the", "id", "."], "guid": 708}}
{"text": "Manufacturers: Code, Name, Headquarter, Founder, Revenue; Products: Code, Name, Price, Manufacturer | What are the names and revenues of the companies with the highest revenues in each headquarter city?", "sql": "SELECT name ,  max(revenue) ,  Headquarter FROM manufacturers GROUP BY Headquarter", "example": {"db_id": "manufactory_1", "query": "SELECT name ,  max(revenue) ,  Headquarter FROM manufacturers GROUP BY Headquarter", "query_toks": ["SELECT", "name", ",", "max", "(", "revenue", ")", ",", "Headquarter", "FROM", "manufacturers", "GROUP", "BY", "Headquarter"], "query_toks_no_value": ["select", "name", ",", "max", "(", "revenue", ")", ",", "headquarter", "from", "manufacturers", "group", "by", "headquarter"], "question": "What are the names and revenues of the companies with the highest revenues in each headquarter city?", "question_toks": ["What", "are", "the", "names", "and", "revenues", "of", "the", "companies", "with", "the", "highest", "revenues", "in", "each", "headquarter", "city", "?"], "guid": 709}}
{"text": "employee: Employee_ID, Name, Age, City; shop: Shop_ID, Name, Location, District, Number_products, Manager_name; hiring: Shop_ID, Employee_ID, Start_from, Is_full_time; evaluation: Employee_ID, Year_awarded, Bonus | Count the number of distinct store locations.", "sql": "SELECT count(DISTINCT LOCATION) FROM shop", "example": {"db_id": "employee_hire_evaluation", "query": "SELECT count(DISTINCT LOCATION) FROM shop", "query_toks": ["SELECT", "count", "(", "DISTINCT", "LOCATION", ")", "FROM", "shop"], "query_toks_no_value": ["select", "count", "(", "distinct", "location", ")", "from", "shop"], "question": "Count the number of distinct store locations.", "question_toks": ["Count", "the", "number", "of", "distinct", "store", "locations", "."], "guid": 710}}
{"text": "company: Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value; gas_station: Station_ID, Open_Year, Location, Manager_Name, Vice_Manager_Name, Representative_Name; station_company: Station_ID, Company_ID, Rank_of_the_Year | Show all main industry for all companies.", "sql": "SELECT DISTINCT main_industry FROM company", "example": {"db_id": "gas_company", "query": "SELECT DISTINCT main_industry FROM company", "query_toks": ["SELECT", "DISTINCT", "main_industry", "FROM", "company"], "query_toks_no_value": ["select", "distinct", "main_industry", "from", "company"], "question": "Show all main industry for all companies.", "question_toks": ["Show", "all", "main", "industry", "for", "all", "companies", "."], "guid": 711}}
{"text": "Manufacturers: Code, Name, Headquarter, Founder, Revenue; Products: Code, Name, Price, Manufacturer | Find the total revenue created by the companies whose headquarter is located at Austin.", "sql": "SELECT sum(revenue) FROM manufacturers WHERE headquarter  =  'Austin'", "example": {"db_id": "manufactory_1", "query": "SELECT sum(revenue) FROM manufacturers WHERE headquarter  =  'Austin'", "query_toks": ["SELECT", "sum", "(", "revenue", ")", "FROM", "manufacturers", "WHERE", "headquarter", "=", "'Austin", "'"], "query_toks_no_value": ["select", "sum", "(", "revenue", ")", "from", "manufacturers", "where", "headquarter", "=", "value"], "question": "Find the total revenue created by the companies whose headquarter is located at Austin.", "question_toks": ["Find", "the", "total", "revenue", "created", "by", "the", "companies", "whose", "headquarter", "is", "located", "at", "Austin", "."], "guid": 712}}
{"text": "continents: ContId, Continent; countries: CountryId, CountryName, Continent; car_makers: Id, Maker, FullName, Country; model_list: ModelId, Maker, Model; car_names: MakeId, Model, Make; cars_data: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year | For the cars with 4 cylinders, which model has the largest horsepower?", "sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;", "example": {"db_id": "car_1", "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;", "query_toks": ["SELECT", "T1.Model", "FROM", "CAR_NAMES", "AS", "T1", "JOIN", "CARS_DATA", "AS", "T2", "ON", "T1.MakeId", "=", "T2.Id", "WHERE", "T2.Cylinders", "=", "4", "ORDER", "BY", "T2.horsepower", "DESC", "LIMIT", "1", ";"], "query_toks_no_value": ["select", "t1", ".", "model", "from", "car_names", "as", "t1", "join", "cars_data", "as", "t2", "on", "t1", ".", "makeid", "=", "t2", ".", "id", "where", "t2", ".", "cylinders", "=", "value", "order", "by", "t2", ".", "horsepower", "desc", "limit", "value"], "question": "For the cars with 4 cylinders, which model has the largest horsepower?", "question_toks": ["For", "the", "cars", "with", "4", "cylinders", ",", "which", "model", "has", "the", "largest", "horsepower", "?"], "guid": 713}}
{"text": "continents: ContId, Continent; countries: CountryId, CountryName, Continent; car_makers: Id, Maker, FullName, Country; model_list: ModelId, Maker, Model; car_names: MakeId, Model, Make; cars_data: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year | Which of the countries has the most car makers? List the country name.", "sql": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;", "example": {"db_id": "car_1", "query": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;", "query_toks": ["SELECT", "T2.CountryName", "FROM", "CAR_MAKERS", "AS", "T1", "JOIN", "COUNTRIES", "AS", "T2", "ON", "T1.Country", "=", "T2.CountryId", "GROUP", "BY", "T1.Country", "ORDER", "BY", "Count", "(", "*", ")", "DESC", "LIMIT", "1", ";"], "query_toks_no_value": ["select", "t2", ".", "countryname", "from", "car_makers", "as", "t1", "join", "countries", "as", "t2", "on", "t1", ".", "country", "=", "t2", ".", "countryid", "group", "by", "t1", ".", "country", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which of the countries has the most car makers? List the country name.", "question_toks": ["Which", "of", "the", "countries", "has", "the", "most", "car", "makers", "?", "List", "the", "country", "name", "."], "guid": 714}}
{"text": "works_on: Essn, Pno, Hours; employee: Fname, Minit, Lname, Ssn, Bdate, Address, Sex, Salary, Super_ssn, Dno; department: Dname, Dnumber, Mgr_ssn, Mgr_start_date; project: Pname, Pnumber, Plocation, Dnum; dependent: Essn, Dependent_name, Sex, Bdate, Relationship; dept_locations: Dnumber, Dlocation | Find the names of departments that are located in Houston.", "sql": "SELECT t1.dname FROM department AS t1 JOIN dept_locations AS t2 ON t1.dnumber  =  t2.dnumber WHERE t2.dlocation  =  'Houston'", "example": {"db_id": "company_1", "query": "SELECT t1.dname FROM department AS t1 JOIN dept_locations AS t2 ON t1.dnumber  =  t2.dnumber WHERE t2.dlocation  =  'Houston'", "query_toks": ["SELECT", "t1.dname", "FROM", "department", "AS", "t1", "JOIN", "dept_locations", "AS", "t2", "ON", "t1.dnumber", "=", "t2.dnumber", "WHERE", "t2.dlocation", "=", "'Houston", "'"], "query_toks_no_value": ["select", "t1", ".", "dname", "from", "department", "as", "t1", "join", "dept_locations", "as", "t2", "on", "t1", ".", "dnumber", "=", "t2", ".", "dnumber", "where", "t2", ".", "dlocation", "=", "value"], "question": "Find the names of departments that are located in Houston.", "question_toks": ["Find", "the", "names", "of", "departments", "that", "are", "located", "in", "Houston", "."], "guid": 715}}
{"text": "employee: Employee_ID, Name, Age, City; shop: Shop_ID, Name, Location, District, Number_products, Manager_name; hiring: Shop_ID, Employee_ID, Start_from, Is_full_time; evaluation: Employee_ID, Year_awarded, Bonus | What are the manager name and district of the shop that sells the largest number of products?", "sql": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1", "example": {"db_id": "employee_hire_evaluation", "query": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1", "query_toks": ["SELECT", "manager_name", ",", "district", "FROM", "shop", "ORDER", "BY", "number_products", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "manager_name", ",", "district", "from", "shop", "order", "by", "number_products", "desc", "limit", "value"], "question": "What are the manager name and district of the shop that sells the largest number of products?", "question_toks": ["What", "are", "the", "manager", "name", "and", "district", "of", "the", "shop", "that", "sells", "the", "largest", "number", "of", "products", "?"], "guid": 716}}
{"text": "continents: ContId, Continent; countries: CountryId, CountryName, Continent; car_makers: Id, Maker, FullName, Country; model_list: ModelId, Maker, Model; car_names: MakeId, Model, Make; cars_data: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year | Find the model of the car whose weight is below the average weight.", "sql": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)", "example": {"db_id": "car_1", "query": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)", "query_toks": ["SELECT", "T1.model", "FROM", "CAR_NAMES", "AS", "T1", "JOIN", "CARS_DATA", "AS", "T2", "ON", "T1.MakeId", "=", "T2.Id", "WHERE", "T2.Weight", "<", "(", "SELECT", "avg", "(", "Weight", ")", "FROM", "CARS_DATA", ")"], "query_toks_no_value": ["select", "t1", ".", "model", "from", "car_names", "as", "t1", "join", "cars_data", "as", "t2", "on", "t1", ".", "makeid", "=", "t2", ".", "id", "where", "t2", ".", "weight", "<", "(", "select", "avg", "(", "weight", ")", "from", "cars_data", ")"], "question": "Find the model of the car whose weight is below the average weight.", "question_toks": ["Find", "the", "model", "of", "the", "car", "whose", "weight", "is", "below", "the", "average", "weight", "."], "guid": 717}}
{"text": "buildings: id, name, City, Height, Stories, Status; Companies: id, name, Headquarters, Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value_billion; Office_locations: building_id, company_id, move_in_year | Count the number of distinct company industries.", "sql": "SELECT count(DISTINCT Industry) FROM Companies", "example": {"db_id": "company_office", "query": "SELECT count(DISTINCT Industry) FROM Companies", "query_toks": ["SELECT", "count", "(", "DISTINCT", "Industry", ")", "FROM", "Companies"], "query_toks_no_value": ["select", "count", "(", "distinct", "industry", ")", "from", "companies"], "question": "Count the number of distinct company industries.", "question_toks": ["Count", "the", "number", "of", "distinct", "company", "industries", "."], "guid": 718}}
{"text": "Manufacturers: Code, Name, Headquarter, Founder, Revenue; Products: Code, Name, Price, Manufacturer | Find the name of companies whose revenue is smaller than the revenue of all companies based in Austin.", "sql": "SELECT name FROM manufacturers WHERE revenue  <  (SELECT min(revenue) FROM manufacturers WHERE headquarter  =  'Austin')", "example": {"db_id": "manufactory_1", "query": "SELECT name FROM manufacturers WHERE revenue  <  (SELECT min(revenue) FROM manufacturers WHERE headquarter  =  'Austin')", "query_toks": ["SELECT", "name", "FROM", "manufacturers", "WHERE", "revenue", "<", "(", "SELECT", "min", "(", "revenue", ")", "FROM", "manufacturers", "WHERE", "headquarter", "=", "'Austin", "'", ")"], "query_toks_no_value": ["select", "name", "from", "manufacturers", "where", "revenue", "<", "(", "select", "min", "(", "revenue", ")", "from", "manufacturers", "where", "headquarter", "=", "value", ")"], "question": "Find the name of companies whose revenue is smaller than the revenue of all companies based in Austin.", "question_toks": ["Find", "the", "name", "of", "companies", "whose", "revenue", "is", "smaller", "than", "the", "revenue", "of", "all", "companies", "based", "in", "Austin", "."], "guid": 719}}
{"text": "chip_model: Model_name, Launch_year, RAM_MiB, ROM_MiB, Slots, WiFi, Bluetooth; screen_mode: Graphics_mode, Char_cells, Pixels, Hardware_colours, used_kb, map, Type; phone: Company_name, Hardware_Model_name, Accreditation_type, Accreditation_level, Date, chip_model, screen_mode | Count the number of chip model that do not have wifi.", "sql": "SELECT count(*) FROM chip_model WHERE wifi  =  'No'", "example": {"db_id": "phone_1", "query": "SELECT count(*) FROM chip_model WHERE wifi  =  'No'", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "chip_model", "WHERE", "wifi", "=", "'No", "'"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "chip_model", "where", "wifi", "=", "value"], "question": "Count the number of chip model that do not have wifi.", "question_toks": ["Count", "the", "number", "of", "chip", "model", "that", "do", "not", "have", "wifi", "."], "guid": 720}}
{"text": "regions: REGION_ID, REGION_NAME; countries: COUNTRY_ID, COUNTRY_NAME, REGION_ID; departments: DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID; jobs: JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY; employees: EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID; job_history: EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID; locations: LOCATION_ID, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_ID | display the department name, city, and state province for each department.", "sql": "SELECT T1.department_name ,  T2.city ,  T2.state_province FROM departments AS T1 JOIN locations AS T2 ON T2.location_id  =  T1.location_id", "example": {"db_id": "hr_1", "query": "SELECT T1.department_name ,  T2.city ,  T2.state_province FROM departments AS T1 JOIN locations AS T2 ON T2.location_id  =  T1.location_id", "query_toks": ["SELECT", "T1.department_name", ",", "T2.city", ",", "T2.state_province", "FROM", "departments", "AS", "T1", "JOIN", "locations", "AS", "T2", "ON", "T2.location_id", "=", "T1.location_id"], "query_toks_no_value": ["select", "t1", ".", "department_name", ",", "t2", ".", "city", ",", "t2", ".", "state_province", "from", "departments", "as", "t1", "join", "locations", "as", "t2", "on", "t2", ".", "location_id", "=", "t1", ".", "location_id"], "question": "display the department name, city, and state province for each department.", "question_toks": ["display", "the", "department", "name", ",", "city", ",", "and", "state", "province", "for", "each", "department", "."], "guid": 721}}
{"text": "buildings: id, name, City, Height, Stories, Status; Companies: id, name, Headquarters, Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value_billion; Office_locations: building_id, company_id, move_in_year | Find the stories of the building with the largest height.", "sql": "SELECT Stories FROM buildings ORDER BY Height DESC LIMIT 1", "example": {"db_id": "company_office", "query": "SELECT Stories FROM buildings ORDER BY Height DESC LIMIT 1", "query_toks": ["SELECT", "Stories", "FROM", "buildings", "ORDER", "BY", "Height", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "stories", "from", "buildings", "order", "by", "height", "desc", "limit", "value"], "question": "Find the stories of the building with the largest height.", "question_toks": ["Find", "the", "stories", "of", "the", "building", "with", "the", "largest", "height", "."], "guid": 722}}
{"text": "continents: ContId, Continent; countries: CountryId, CountryName, Continent; car_makers: Id, Maker, FullName, Country; model_list: ModelId, Maker, Model; car_names: MakeId, Model, Make; cars_data: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year | How many car makers are there in france?", "sql": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';", "example": {"db_id": "car_1", "query": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "CAR_MAKERS", "AS", "T1", "JOIN", "COUNTRIES", "AS", "T2", "ON", "T1.Country", "=", "T2.CountryId", "WHERE", "T2.CountryName", "=", "'france", "'", ";"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "car_makers", "as", "t1", "join", "countries", "as", "t2", "on", "t1", ".", "country", "=", "t2", ".", "countryid", "where", "t2", ".", "countryname", "=", "value"], "question": "How many car makers are there in france?", "question_toks": ["How", "many", "car", "makers", "are", "there", "in", "france", "?"], "guid": 723}}
{"text": "regions: REGION_ID, REGION_NAME; countries: COUNTRY_ID, COUNTRY_NAME, REGION_ID; departments: DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID; jobs: JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY; employees: EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID; job_history: EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID; locations: LOCATION_ID, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_ID | display the emails of the employees who have no commission percentage and salary within the range 7000 to 12000 and works in that department which number is 50.", "sql": "SELECT email FROM employees WHERE commission_pct  =  \"null\" AND salary BETWEEN 7000 AND 12000 AND department_id = 50", "example": {"db_id": "hr_1", "query": "SELECT email FROM employees WHERE commission_pct  =  \"null\" AND salary BETWEEN 7000 AND 12000 AND department_id = 50", "query_toks": ["SELECT", "email", "FROM", "employees", "WHERE", "commission_pct", "=", "``", "null", "''", "AND", "salary", "BETWEEN", "7000", "AND", "12000", "AND", "department_id", "=", "50"], "query_toks_no_value": ["select", "email", "from", "employees", "where", "commission_pct", "=", "value", "and", "salary", "between", "value", "and", "value", "and", "department_id", "=", "value"], "question": "display the emails of the employees who have no commission percentage and salary within the range 7000 to 12000 and works in that department which number is 50.", "question_toks": ["display", "the", "emails", "of", "the", "employees", "who", "have", "no", "commission", "percentage", "and", "salary", "within", "the", "range", "7000", "to", "12000", "and", "works", "in", "that", "department", "which", "number", "is", "50", "."], "guid": 724}}
{"text": "continents: ContId, Continent; countries: CountryId, CountryName, Continent; car_makers: Id, Maker, FullName, Country; model_list: ModelId, Maker, Model; car_names: MakeId, Model, Make; cars_data: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year | What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?", "sql": "SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat';", "example": {"db_id": "car_1", "query": "SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat';", "query_toks": ["SELECT", "T1.countryId", ",", "T1.CountryName", "FROM", "Countries", "AS", "T1", "JOIN", "CAR_MAKERS", "AS", "T2", "ON", "T1.CountryId", "=", "T2.Country", "GROUP", "BY", "T1.countryId", "HAVING", "count", "(", "*", ")", ">", "3", "UNION", "SELECT", "T1.countryId", ",", "T1.CountryName", "FROM", "Countries", "AS", "T1", "JOIN", "CAR_MAKERS", "AS", "T2", "ON", "T1.CountryId", "=", "T2.Country", "JOIN", "MODEL_LIST", "AS", "T3", "ON", "T2.Id", "=", "T3.Maker", "WHERE", "T3.Model", "=", "'fiat", "'", ";"], "query_toks_no_value": ["select", "t1", ".", "countryid", ",", "t1", ".", "countryname", "from", "countries", "as", "t1", "join", "car_makers", "as", "t2", "on", "t1", ".", "countryid", "=", "t2", ".", "country", "group", "by", "t1", ".", "countryid", "having", "count", "(", "*", ")", ">", "value", "union", "select", "t1", ".", "countryid", ",", "t1", ".", "countryname", "from", "countries", "as", "t1", "join", "car_makers", "as", "t2", "on", "t1", ".", "countryid", "=", "t2", ".", "country", "join", "model_list", "as", "t3", "on", "t2", ".", "id", "=", "t3", ".", "maker", "where", "t3", ".", "model", "=", "value"], "question": "What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?", "question_toks": ["What", "are", "the", "id", "and", "names", "of", "the", "countries", "which", "have", "more", "than", "3", "car", "makers", "or", "produce", "the", "'fiat", "'", "model", "?"], "guid": 725}}
{"text": "people: People_ID, Age, Name, Nationality, Graduation_College; company: Company_ID, Name, Headquarters, Industry, Sales_in_Billion, Profits_in_Billion, Assets_in_Billion, Market_Value_in_Billion; employment: Company_ID, People_ID, Year_working | Show the names of employees that work for companies with sales bigger than 200.", "sql": "SELECT T2.Name FROM employment AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID JOIN company AS T3 ON T1.Company_ID  =  T3.Company_ID WHERE T3.Sales_in_Billion  >  200", "example": {"db_id": "company_employee", "query": "SELECT T2.Name FROM employment AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID JOIN company AS T3 ON T1.Company_ID  =  T3.Company_ID WHERE T3.Sales_in_Billion  >  200", "query_toks": ["SELECT", "T2.Name", "FROM", "employment", "AS", "T1", "JOIN", "people", "AS", "T2", "ON", "T1.People_ID", "=", "T2.People_ID", "JOIN", "company", "AS", "T3", "ON", "T1.Company_ID", "=", "T3.Company_ID", "WHERE", "T3.Sales_in_Billion", ">", "200"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "employment", "as", "t1", "join", "people", "as", "t2", "on", "t1", ".", "people_id", "=", "t2", ".", "people_id", "join", "company", "as", "t3", "on", "t1", ".", "company_id", "=", "t3", ".", "company_id", "where", "t3", ".", "sales_in_billion", ">", "value"], "question": "Show the names of employees that work for companies with sales bigger than 200.", "question_toks": ["Show", "the", "names", "of", "employees", "that", "work", "for", "companies", "with", "sales", "bigger", "than", "200", "."], "guid": 726}}
{"text": "member: Member_ID, Name, Nationality, Role; performance: Performance_ID, Date, Host, Location, Attendance; member_attendance: Member_ID, Performance_ID, Num_of_Pieces | Show the dates of performances with attending members whose roles are \"Violin\".", "sql": "SELECT T3.Date FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID  =  T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID  =  T3.Performance_ID WHERE T2.Role  =  \"Violin\"", "example": {"db_id": "performance_attendance", "query": "SELECT T3.Date FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID  =  T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID  =  T3.Performance_ID WHERE T2.Role  =  \"Violin\"", "query_toks": ["SELECT", "T3.Date", "FROM", "member_attendance", "AS", "T1", "JOIN", "member", "AS", "T2", "ON", "T1.Member_ID", "=", "T2.Member_ID", "JOIN", "performance", "AS", "T3", "ON", "T1.Performance_ID", "=", "T3.Performance_ID", "WHERE", "T2.Role", "=", "``", "Violin", "''"], "query_toks_no_value": ["select", "t3", ".", "date", "from", "member_attendance", "as", "t1", "join", "member", "as", "t2", "on", "t1", ".", "member_id", "=", "t2", ".", "member_id", "join", "performance", "as", "t3", "on", "t1", ".", "performance_id", "=", "t3", ".", "performance_id", "where", "t2", ".", "role", "=", "value"], "question": "Show the dates of performances with attending members whose roles are \"Violin\".", "question_toks": ["Show", "the", "dates", "of", "performances", "with", "attending", "members", "whose", "roles", "are", "``", "Violin", "''", "."], "guid": 727}}
{"text": "employee: Employee_ID, Name, Age, City; shop: Shop_ID, Name, Location, District, Number_products, Manager_name; hiring: Shop_ID, Employee_ID, Start_from, Is_full_time; evaluation: Employee_ID, Year_awarded, Bonus | Find the total amount of bonus given in all the evaluations.", "sql": "SELECT sum(bonus) FROM evaluation", "example": {"db_id": "employee_hire_evaluation", "query": "SELECT sum(bonus) FROM evaluation", "query_toks": ["SELECT", "sum", "(", "bonus", ")", "FROM", "evaluation"], "query_toks_no_value": ["select", "sum", "(", "bonus", ")", "from", "evaluation"], "question": "Find the total amount of bonus given in all the evaluations.", "question_toks": ["Find", "the", "total", "amount", "of", "bonus", "given", "in", "all", "the", "evaluations", "."], "guid": 728}}
{"text": "regions: REGION_ID, REGION_NAME; countries: COUNTRY_ID, COUNTRY_NAME, REGION_ID; departments: DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID; jobs: JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY; employees: EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID; job_history: EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID; locations: LOCATION_ID, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_ID | What are the first names and department numbers for employees with last name McEwen?", "sql": "SELECT first_name ,  department_id FROM employees WHERE last_name  =  'McEwen'", "example": {"db_id": "hr_1", "query": "SELECT first_name ,  department_id FROM employees WHERE last_name  =  'McEwen'", "query_toks": ["SELECT", "first_name", ",", "department_id", "FROM", "employees", "WHERE", "last_name", "=", "'McEwen", "'"], "query_toks_no_value": ["select", "first_name", ",", "department_id", "from", "employees", "where", "last_name", "=", "value"], "question": "What are the first names and department numbers for employees with last name McEwen?", "question_toks": ["What", "are", "the", "first", "names", "and", "department", "numbers", "for", "employees", "with", "last", "name", "McEwen", "?"], "guid": 729}}
{"text": "Manufacturers: Code, Name, Headquarter, Founder, Revenue; Products: Code, Name, Price, Manufacturer | What are the names of companies with revenue less than the lowest revenue of any manufacturer in Austin?", "sql": "SELECT name FROM manufacturers WHERE revenue  <  (SELECT min(revenue) FROM manufacturers WHERE headquarter  =  'Austin')", "example": {"db_id": "manufactory_1", "query": "SELECT name FROM manufacturers WHERE revenue  <  (SELECT min(revenue) FROM manufacturers WHERE headquarter  =  'Austin')", "query_toks": ["SELECT", "name", "FROM", "manufacturers", "WHERE", "revenue", "<", "(", "SELECT", "min", "(", "revenue", ")", "FROM", "manufacturers", "WHERE", "headquarter", "=", "'Austin", "'", ")"], "query_toks_no_value": ["select", "name", "from", "manufacturers", "where", "revenue", "<", "(", "select", "min", "(", "revenue", ")", "from", "manufacturers", "where", "headquarter", "=", "value", ")"], "question": "What are the names of companies with revenue less than the lowest revenue of any manufacturer in Austin?", "question_toks": ["What", "are", "the", "names", "of", "companies", "with", "revenue", "less", "than", "the", "lowest", "revenue", "of", "any", "manufacturer", "in", "Austin", "?"], "guid": 730}}
{"text": "works_on: Essn, Pno, Hours; employee: Fname, Minit, Lname, Ssn, Bdate, Address, Sex, Salary, Super_ssn, Dno; department: Dname, Dnumber, Mgr_ssn, Mgr_start_date; project: Pname, Pnumber, Plocation, Dnum; dependent: Essn, Dependent_name, Sex, Bdate, Relationship; dept_locations: Dnumber, Dlocation | List all department names ordered by their starting date.", "sql": "SELECT dname FROM department ORDER BY mgr_start_date", "example": {"db_id": "company_1", "query": "SELECT dname FROM department ORDER BY mgr_start_date", "query_toks": ["SELECT", "dname", "FROM", "department", "ORDER", "BY", "mgr_start_date"], "query_toks_no_value": ["select", "dname", "from", "department", "order", "by", "mgr_start_date"], "question": "List all department names ordered by their starting date.", "question_toks": ["List", "all", "department", "names", "ordered", "by", "their", "starting", "date", "."], "guid": 731}}
{"text": "Manufacturers: Code, Name, Headquarter, Founder, Revenue; Products: Code, Name, Price, Manufacturer | Select the names of manufacturer whose products have an average price higher than or equal to $150.", "sql": "SELECT avg(T1.Price) ,  T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code GROUP BY T2.name HAVING avg(T1.price) >= 150", "example": {"db_id": "manufactory_1", "query": "SELECT avg(T1.Price) ,  T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code GROUP BY T2.name HAVING avg(T1.price) >= 150", "query_toks": ["SELECT", "avg", "(", "T1.Price", ")", ",", "T2.name", "FROM", "products", "AS", "T1", "JOIN", "Manufacturers", "AS", "T2", "ON", "T1.manufacturer", "=", "T2.code", "GROUP", "BY", "T2.name", "HAVING", "avg", "(", "T1.price", ")", ">", "=", "150"], "query_toks_no_value": ["select", "avg", "(", "t1", ".", "price", ")", ",", "t2", ".", "name", "from", "products", "as", "t1", "join", "manufacturers", "as", "t2", "on", "t1", ".", "manufacturer", "=", "t2", ".", "code", "group", "by", "t2", ".", "name", "having", "avg", "(", "t1", ".", "price", ")", ">", "=", "value"], "question": "Select the names of manufacturer whose products have an average price higher than or equal to $150.", "question_toks": ["Select", "the", "names", "of", "manufacturer", "whose", "products", "have", "an", "average", "price", "higher", "than", "or", "equal", "to", "$", "150", "."], "guid": 732}}
{"text": "regions: REGION_ID, REGION_NAME; countries: COUNTRY_ID, COUNTRY_NAME, REGION_ID; departments: DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID; jobs: JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY; employees: EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID; job_history: EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID; locations: LOCATION_ID, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_ID | Provide the full names of employees earning more than the employee with id 163.", "sql": "SELECT first_name ,  last_name FROM employees WHERE salary  >  (SELECT salary FROM employees WHERE employee_id = 163 )", "example": {"db_id": "hr_1", "query": "SELECT first_name ,  last_name FROM employees WHERE salary  >  (SELECT salary FROM employees WHERE employee_id = 163 )", "query_toks": ["SELECT", "first_name", ",", "last_name", "FROM", "employees", "WHERE", "salary", ">", "(", "SELECT", "salary", "FROM", "employees", "WHERE", "employee_id", "=", "163", ")"], "query_toks_no_value": ["select", "first_name", ",", "last_name", "from", "employees", "where", "salary", ">", "(", "select", "salary", "from", "employees", "where", "employee_id", "=", "value", ")"], "question": "Provide the full names of employees earning more than the employee with id 163.", "question_toks": ["Provide", "the", "full", "names", "of", "employees", "earning", "more", "than", "the", "employee", "with", "id", "163", "."], "guid": 733}}
{"text": "company: Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value; gas_station: Station_ID, Open_Year, Location, Manager_Name, Vice_Manager_Name, Representative_Name; station_company: Station_ID, Company_ID, Rank_of_the_Year | order all gas station locations by the opening year.", "sql": "SELECT LOCATION FROM gas_station ORDER BY open_year", "example": {"db_id": "gas_company", "query": "SELECT LOCATION FROM gas_station ORDER BY open_year", "query_toks": ["SELECT", "LOCATION", "FROM", "gas_station", "ORDER", "BY", "open_year"], "query_toks_no_value": ["select", "location", "from", "gas_station", "order", "by", "open_year"], "question": "order all gas station locations by the opening year.", "question_toks": ["order", "all", "gas", "station", "locations", "by", "the", "opening", "year", "."], "guid": 734}}
{"text": "regions: REGION_ID, REGION_NAME; countries: COUNTRY_ID, COUNTRY_NAME, REGION_ID; departments: DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID; jobs: JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY; employees: EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID; job_history: EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID; locations: LOCATION_ID, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_ID | What is all the information regarding employees with salaries above the minimum and under 2500?", "sql": "SELECT * FROM employees WHERE salary BETWEEN (SELECT MIN(salary) FROM employees) AND 2500", "example": {"db_id": "hr_1", "query": "SELECT * FROM employees WHERE salary BETWEEN (SELECT MIN(salary) FROM employees) AND 2500", "query_toks": ["SELECT", "*", "FROM", "employees", "WHERE", "salary", "BETWEEN", "(", "SELECT", "MIN", "(", "salary", ")", "FROM", "employees", ")", "AND", "2500"], "query_toks_no_value": ["select", "*", "from", "employees", "where", "salary", "between", "(", "select", "min", "(", "salary", ")", "from", "employees", ")", "and", "value"], "question": "What is all the information regarding employees with salaries above the minimum and under 2500?", "question_toks": ["What", "is", "all", "the", "information", "regarding", "employees", "with", "salaries", "above", "the", "minimum", "and", "under", "2500", "?"], "guid": 735}}
{"text": "regions: REGION_ID, REGION_NAME; countries: COUNTRY_ID, COUNTRY_NAME, REGION_ID; departments: DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID; jobs: JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY; employees: EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID; job_history: EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID; locations: LOCATION_ID, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_ID | get the details of employees who manage a department.", "sql": "SELECT DISTINCT * FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id WHERE T1.employee_id  =  T2.manager_id", "example": {"db_id": "hr_1", "query": "SELECT DISTINCT * FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id WHERE T1.employee_id  =  T2.manager_id", "query_toks": ["SELECT", "DISTINCT", "*", "FROM", "employees", "AS", "T1", "JOIN", "departments", "AS", "T2", "ON", "T1.department_id", "=", "T2.department_id", "WHERE", "T1.employee_id", "=", "T2.manager_id"], "query_toks_no_value": ["select", "distinct", "*", "from", "employees", "as", "t1", "join", "departments", "as", "t2", "on", "t1", ".", "department_id", "=", "t2", ".", "department_id", "where", "t1", ".", "employee_id", "=", "t2", ".", "manager_id"], "question": "get the details of employees who manage a department.", "question_toks": ["get", "the", "details", "of", "employees", "who", "manage", "a", "department", "."], "guid": 736}}
{"text": "regions: REGION_ID, REGION_NAME; countries: COUNTRY_ID, COUNTRY_NAME, REGION_ID; departments: DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID; jobs: JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY; employees: EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID; job_history: EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID; locations: LOCATION_ID, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_ID | What are all the employees without a department number?", "sql": "SELECT * FROM employees WHERE department_id  =  \"null\"", "example": {"db_id": "hr_1", "query": "SELECT * FROM employees WHERE department_id  =  \"null\"", "query_toks": ["SELECT", "*", "FROM", "employees", "WHERE", "department_id", "=", "``", "null", "''"], "query_toks_no_value": ["select", "*", "from", "employees", "where", "department_id", "=", "value"], "question": "What are all the employees without a department number?", "question_toks": ["What", "are", "all", "the", "employees", "without", "a", "department", "number", "?"], "guid": 737}}
{"text": "continents: ContId, Continent; countries: CountryId, CountryName, Continent; car_makers: Id, Maker, FullName, Country; model_list: ModelId, Maker, Model; car_names: MakeId, Model, Make; cars_data: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year | What is the car model with the highest mpg ?", "sql": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1;", "example": {"db_id": "car_1", "query": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1;", "query_toks": ["select", "t1.model", "from", "car_names", "as", "t1", "join", "cars_data", "as", "t2", "on", "t1.makeid", "=", "t2.id", "order", "by", "t2.mpg", "desc", "limit", "1", ";"], "query_toks_no_value": ["select", "t1", ".", "model", "from", "car_names", "as", "t1", "join", "cars_data", "as", "t2", "on", "t1", ".", "makeid", "=", "t2", ".", "id", "order", "by", "t2", ".", "mpg", "desc", "limit", "value"], "question": "What is the car model with the highest mpg ?", "question_toks": ["What", "is", "the", "car", "model", "with", "the", "highest", "mpg", "?"], "guid": 738}}
{"text": "buildings: id, name, City, Height, Stories, Status; Companies: id, name, Headquarters, Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value_billion; Office_locations: building_id, company_id, move_in_year | Which building has the largest number of company offices? Give me the building name.", "sql": "SELECT T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id  =  T2.id JOIN Companies AS T3 ON T1.company_id  =  T3.id GROUP BY T1.building_id ORDER BY COUNT(*) DESC LIMIT 1", "example": {"db_id": "company_office", "query": "SELECT T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id  =  T2.id JOIN Companies AS T3 ON T1.company_id  =  T3.id GROUP BY T1.building_id ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "T2.name", "FROM", "Office_locations", "AS", "T1", "JOIN", "buildings", "AS", "T2", "ON", "T1.building_id", "=", "T2.id", "JOIN", "Companies", "AS", "T3", "ON", "T1.company_id", "=", "T3.id", "GROUP", "BY", "T1.building_id", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "office_locations", "as", "t1", "join", "buildings", "as", "t2", "on", "t1", ".", "building_id", "=", "t2", ".", "id", "join", "companies", "as", "t3", "on", "t1", ".", "company_id", "=", "t3", ".", "id", "group", "by", "t1", ".", "building_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which building has the largest number of company offices? Give me the building name.", "question_toks": ["Which", "building", "has", "the", "largest", "number", "of", "company", "offices", "?", "Give", "me", "the", "building", "name", "."], "guid": 739}}
{"text": "Manufacturers: Code, Name, Headquarter, Founder, Revenue; Products: Code, Name, Price, Manufacturer | Find all manufacturers' names and their headquarters, sorted by the ones with highest revenue first.", "sql": "SELECT name ,  headquarter FROM manufacturers ORDER BY revenue DESC", "example": {"db_id": "manufactory_1", "query": "SELECT name ,  headquarter FROM manufacturers ORDER BY revenue DESC", "query_toks": ["SELECT", "name", ",", "headquarter", "FROM", "manufacturers", "ORDER", "BY", "revenue", "DESC"], "query_toks_no_value": ["select", "name", ",", "headquarter", "from", "manufacturers", "order", "by", "revenue", "desc"], "question": "Find all manufacturers' names and their headquarters, sorted by the ones with highest revenue first.", "question_toks": ["Find", "all", "manufacturers", "'", "names", "and", "their", "headquarters", ",", "sorted", "by", "the", "ones", "with", "highest", "revenue", "first", "."], "guid": 740}}
{"text": "continents: ContId, Continent; countries: CountryId, CountryName, Continent; car_makers: Id, Maker, FullName, Country; model_list: ModelId, Maker, Model; car_names: MakeId, Model, Make; cars_data: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year | How many countries exist?", "sql": "SELECT count(*) FROM COUNTRIES;", "example": {"db_id": "car_1", "query": "SELECT count(*) FROM COUNTRIES;", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "COUNTRIES", ";"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "countries"], "question": "How many countries exist?", "question_toks": ["How", "many", "countries", "exist", "?"], "guid": 741}}
{"text": "regions: REGION_ID, REGION_NAME; countries: COUNTRY_ID, COUNTRY_NAME, REGION_ID; departments: DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID; jobs: JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY; employees: EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID; job_history: EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID; locations: LOCATION_ID, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_ID | Find the employee id for all employees who earn more than the average salary.", "sql": "SELECT employee_id FROM employees WHERE salary  >  (SELECT AVG(salary) FROM employees)", "example": {"db_id": "hr_1", "query": "SELECT employee_id FROM employees WHERE salary  >  (SELECT AVG(salary) FROM employees)", "query_toks": ["SELECT", "employee_id", "FROM", "employees", "WHERE", "salary", ">", "(", "SELECT", "AVG", "(", "salary", ")", "FROM", "employees", ")"], "query_toks_no_value": ["select", "employee_id", "from", "employees", "where", "salary", ">", "(", "select", "avg", "(", "salary", ")", "from", "employees", ")"], "question": "Find the employee id for all employees who earn more than the average salary.", "question_toks": ["Find", "the", "employee", "id", "for", "all", "employees", "who", "earn", "more", "than", "the", "average", "salary", "."], "guid": 742}}
{"text": "company: Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value; gas_station: Station_ID, Open_Year, Location, Manager_Name, Vice_Manager_Name, Representative_Name; station_company: Station_ID, Company_ID, Rank_of_the_Year | For each company id, what are the companies and how many gas stations does each one operate?", "sql": "SELECT T2.company ,  count(*) FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id GROUP BY T1.company_id", "example": {"db_id": "gas_company", "query": "SELECT T2.company ,  count(*) FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id GROUP BY T1.company_id", "query_toks": ["SELECT", "T2.company", ",", "count", "(", "*", ")", "FROM", "station_company", "AS", "T1", "JOIN", "company", "AS", "T2", "ON", "T1.company_id", "=", "T2.company_id", "GROUP", "BY", "T1.company_id"], "query_toks_no_value": ["select", "t2", ".", "company", ",", "count", "(", "*", ")", "from", "station_company", "as", "t1", "join", "company", "as", "t2", "on", "t1", ".", "company_id", "=", "t2", ".", "company_id", "group", "by", "t1", ".", "company_id"], "question": "For each company id, what are the companies and how many gas stations does each one operate?", "question_toks": ["For", "each", "company", "id", ",", "what", "are", "the", "companies", "and", "how", "many", "gas", "stations", "does", "each", "one", "operate", "?"], "guid": 743}}
{"text": "manufacturer: Manufacturer_ID, Open_Year, Name, Num_of_Factories, Num_of_Shops; furniture: Furniture_ID, Name, Num_of_Component, Market_Rate; furniture_manufacte: Manufacturer_ID, Furniture_ID, Price_in_Dollar | List all manufacturer names and ids ordered by their opening year.", "sql": "SELECT name ,  manufacturer_id FROM manufacturer ORDER BY open_year", "example": {"db_id": "manufacturer", "query": "SELECT name ,  manufacturer_id FROM manufacturer ORDER BY open_year", "query_toks": ["SELECT", "name", ",", "manufacturer_id", "FROM", "manufacturer", "ORDER", "BY", "open_year"], "query_toks_no_value": ["select", "name", ",", "manufacturer_id", "from", "manufacturer", "order", "by", "open_year"], "question": "List all manufacturer names and ids ordered by their opening year.", "question_toks": ["List", "all", "manufacturer", "names", "and", "ids", "ordered", "by", "their", "opening", "year", "."], "guid": 744}}
{"text": "people: People_ID, Age, Name, Nationality, Graduation_College; company: Company_ID, Name, Headquarters, Industry, Sales_in_Billion, Profits_in_Billion, Assets_in_Billion, Market_Value_in_Billion; employment: Company_ID, People_ID, Year_working | List the names of people that are not employed by any company", "sql": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM employment)", "example": {"db_id": "company_employee", "query": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM employment)", "query_toks": ["SELECT", "Name", "FROM", "people", "WHERE", "People_ID", "NOT", "IN", "(", "SELECT", "People_ID", "FROM", "employment", ")"], "query_toks_no_value": ["select", "name", "from", "people", "where", "people_id", "not", "in", "(", "select", "people_id", "from", "employment", ")"], "question": "List the names of people that are not employed by any company", "question_toks": ["List", "the", "names", "of", "people", "that", "are", "not", "employed", "by", "any", "company"], "guid": 745}}
{"text": "employee: Employee_ID, Name, Age, City; shop: Shop_ID, Name, Location, District, Number_products, Manager_name; hiring: Shop_ID, Employee_ID, Start_from, Is_full_time; evaluation: Employee_ID, Year_awarded, Bonus | How many shops are there in each location?", "sql": "SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION", "example": {"db_id": "employee_hire_evaluation", "query": "SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "LOCATION", "FROM", "shop", "GROUP", "BY", "LOCATION"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "location", "from", "shop", "group", "by", "location"], "question": "How many shops are there in each location?", "question_toks": ["How", "many", "shops", "are", "there", "in", "each", "location", "?"], "guid": 746}}
{"text": "regions: REGION_ID, REGION_NAME; countries: COUNTRY_ID, COUNTRY_NAME, REGION_ID; departments: DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID; jobs: JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY; employees: EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID; job_history: EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID; locations: LOCATION_ID, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_ID | List the full name (first and last name), and salary for those employees who earn below 6000.", "sql": "SELECT first_name ,  last_name ,  salary FROM employees WHERE salary  <  6000", "example": {"db_id": "hr_1", "query": "SELECT first_name ,  last_name ,  salary FROM employees WHERE salary  <  6000", "query_toks": ["SELECT", "first_name", ",", "last_name", ",", "salary", "FROM", "employees", "WHERE", "salary", "<", "6000"], "query_toks_no_value": ["select", "first_name", ",", "last_name", ",", "salary", "from", "employees", "where", "salary", "<", "value"], "question": "List the full name (first and last name), and salary for those employees who earn below 6000.", "question_toks": ["List", "the", "full", "name", "(", "first", "and", "last", "name", ")", ",", "and", "salary", "for", "those", "employees", "who", "earn", "below", "6000", "."], "guid": 747}}
{"text": "continents: ContId, Continent; countries: CountryId, CountryName, Continent; car_makers: Id, Maker, FullName, Country; model_list: ModelId, Maker, Model; car_names: MakeId, Model, Make; cars_data: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year | Find the name of the makers that produced some cars in the year of 1970?", "sql": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';", "example": {"db_id": "car_1", "query": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';", "query_toks": ["SELECT", "DISTINCT", "T1.Maker", "FROM", "CAR_MAKERS", "AS", "T1", "JOIN", "MODEL_LIST", "AS", "T2", "ON", "T1.Id", "=", "T2.Maker", "JOIN", "CAR_NAMES", "AS", "T3", "ON", "T2.model", "=", "T3.model", "JOIN", "CARS_DATA", "AS", "T4", "ON", "T3.MakeId", "=", "T4.id", "WHERE", "T4.year", "=", "'1970", "'", ";"], "query_toks_no_value": ["select", "distinct", "t1", ".", "maker", "from", "car_makers", "as", "t1", "join", "model_list", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "maker", "join", "car_names", "as", "t3", "on", "t2", ".", "model", "=", "t3", ".", "model", "join", "cars_data", "as", "t4", "on", "t3", ".", "makeid", "=", "t4", ".", "id", "where", "t4", ".", "year", "=", "value"], "question": "Find the name of the makers that produced some cars in the year of 1970?", "question_toks": ["Find", "the", "name", "of", "the", "makers", "that", "produced", "some", "cars", "in", "the", "year", "of", "1970", "?"], "guid": 748}}
{"text": "company: Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value; gas_station: Station_ID, Open_Year, Location, Manager_Name, Vice_Manager_Name, Representative_Name; station_company: Station_ID, Company_ID, Rank_of_the_Year | What are the main indstries and total market value for each industry?", "sql": "SELECT main_industry ,  sum(market_value) FROM company GROUP BY main_industry", "example": {"db_id": "gas_company", "query": "SELECT main_industry ,  sum(market_value) FROM company GROUP BY main_industry", "query_toks": ["SELECT", "main_industry", ",", "sum", "(", "market_value", ")", "FROM", "company", "GROUP", "BY", "main_industry"], "query_toks_no_value": ["select", "main_industry", ",", "sum", "(", "market_value", ")", "from", "company", "group", "by", "main_industry"], "question": "What are the main indstries and total market value for each industry?", "question_toks": ["What", "are", "the", "main", "indstries", "and", "total", "market", "value", "for", "each", "industry", "?"], "guid": 749}}
{"text": "continents: ContId, Continent; countries: CountryId, CountryName, Continent; car_makers: Id, Maker, FullName, Country; model_list: ModelId, Maker, Model; car_names: MakeId, Model, Make; cars_data: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year | What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?", "sql": "select distinct year from cars_data where weight between 3000 and 4000;", "example": {"db_id": "car_1", "query": "select distinct year from cars_data where weight between 3000 and 4000;", "query_toks": ["select", "distinct", "year", "from", "cars_data", "where", "weight", "between", "3000", "and", "4000", ";"], "query_toks_no_value": ["select", "distinct", "year", "from", "cars_data", "where", "weight", "between", "value", "and", "value"], "question": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?", "question_toks": ["What", "are", "the", "different", "years", "in", "which", "there", "were", "cars", "produced", "that", "weighed", "less", "than", "4000", "and", "also", "cars", "that", "weighted", "more", "than", "3000", "?"], "guid": 750}}
{"text": "manufacturer: Manufacturer_ID, Open_Year, Name, Num_of_Factories, Num_of_Shops; furniture: Furniture_ID, Name, Num_of_Component, Market_Rate; furniture_manufacte: Manufacturer_ID, Furniture_ID, Price_in_Dollar | How many furniture components are there in total?", "sql": "SELECT sum(num_of_component) FROM furniture", "example": {"db_id": "manufacturer", "query": "SELECT sum(num_of_component) FROM furniture", "query_toks": ["SELECT", "sum", "(", "num_of_component", ")", "FROM", "furniture"], "query_toks_no_value": ["select", "sum", "(", "num_of_component", ")", "from", "furniture"], "question": "How many furniture components are there in total?", "question_toks": ["How", "many", "furniture", "components", "are", "there", "in", "total", "?"], "guid": 751}}
{"text": "continents: ContId, Continent; countries: CountryId, CountryName, Continent; car_makers: Id, Maker, FullName, Country; model_list: ModelId, Maker, Model; car_names: MakeId, Model, Make; cars_data: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year | What is the average miles per gallon(mpg) of the cars with 4 cylinders?", "sql": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;", "example": {"db_id": "car_1", "query": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;", "query_toks": ["SELECT", "avg", "(", "mpg", ")", "FROM", "CARS_DATA", "WHERE", "Cylinders", "=", "4", ";"], "query_toks_no_value": ["select", "avg", "(", "mpg", ")", "from", "cars_data", "where", "cylinders", "=", "value"], "question": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?", "question_toks": ["What", "is", "the", "average", "miles", "per", "gallon", "(", "mpg", ")", "of", "the", "cars", "with", "4", "cylinders", "?"], "guid": 752}}
{"text": "continents: ContId, Continent; countries: CountryId, CountryName, Continent; car_makers: Id, Maker, FullName, Country; model_list: ModelId, Maker, Model; car_names: MakeId, Model, Make; cars_data: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year | how many cars were produced in 1980?", "sql": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;", "example": {"db_id": "car_1", "query": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "CARS_DATA", "WHERE", "YEAR", "=", "1980", ";"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "cars_data", "where", "year", "=", "value"], "question": "how many cars were produced in 1980?", "question_toks": ["how", "many", "cars", "were", "produced", "in", "1980", "?"], "guid": 753}}
{"text": "regions: REGION_ID, REGION_NAME; countries: COUNTRY_ID, COUNTRY_NAME, REGION_ID; departments: DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID; jobs: JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY; employees: EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID; job_history: EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID; locations: LOCATION_ID, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_ID | What are full names and salaries of employees working in the city of London?", "sql": "SELECT first_name ,  last_name ,  salary FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN  locations AS T3 ON T2.location_id  =  T3.location_id WHERE  T3.city  =  'London'", "example": {"db_id": "hr_1", "query": "SELECT first_name ,  last_name ,  salary FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN  locations AS T3 ON T2.location_id  =  T3.location_id WHERE  T3.city  =  'London'", "query_toks": ["SELECT", "first_name", ",", "last_name", ",", "salary", "FROM", "employees", "AS", "T1", "JOIN", "departments", "AS", "T2", "ON", "T1.department_id", "=", "T2.department_id", "JOIN", "locations", "AS", "T3", "ON", "T2.location_id", "=", "T3.location_id", "WHERE", "T3.city", "=", "'London", "'"], "query_toks_no_value": ["select", "first_name", ",", "last_name", ",", "salary", "from", "employees", "as", "t1", "join", "departments", "as", "t2", "on", "t1", ".", "department_id", "=", "t2", ".", "department_id", "join", "locations", "as", "t3", "on", "t2", ".", "location_id", "=", "t3", ".", "location_id", "where", "t3", ".", "city", "=", "value"], "question": "What are full names and salaries of employees working in the city of London?", "question_toks": ["What", "are", "full", "names", "and", "salaries", "of", "employees", "working", "in", "the", "city", "of", "London", "?"], "guid": 754}}
{"text": "regions: REGION_ID, REGION_NAME; countries: COUNTRY_ID, COUNTRY_NAME, REGION_ID; departments: DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID; jobs: JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY; employees: EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID; job_history: EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID; locations: LOCATION_ID, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_ID | What are the employee ids, full names, and job ids for employees who make more than the highest earning employee with title PU_MAN?", "sql": "SELECT employee_id ,  first_name ,  last_name ,  job_id FROM employees WHERE salary  >  ( SELECT max(salary) FROM employees WHERE job_id  =  'PU_MAN' )", "example": {"db_id": "hr_1", "query": "SELECT employee_id ,  first_name ,  last_name ,  job_id FROM employees WHERE salary  >  ( SELECT max(salary) FROM employees WHERE job_id  =  'PU_MAN' )", "query_toks": ["SELECT", "employee_id", ",", "first_name", ",", "last_name", ",", "job_id", "FROM", "employees", "WHERE", "salary", ">", "(", "SELECT", "max", "(", "salary", ")", "FROM", "employees", "WHERE", "job_id", "=", "'PU_MAN", "'", ")"], "query_toks_no_value": ["select", "employee_id", ",", "first_name", ",", "last_name", ",", "job_id", "from", "employees", "where", "salary", ">", "(", "select", "max", "(", "salary", ")", "from", "employees", "where", "job_id", "=", "value", ")"], "question": "What are the employee ids, full names, and job ids for employees who make more than the highest earning employee with title PU_MAN?", "question_toks": ["What", "are", "the", "employee", "ids", ",", "full", "names", ",", "and", "job", "ids", "for", "employees", "who", "make", "more", "than", "the", "highest", "earning", "employee", "with", "title", "PU_MAN", "?"], "guid": 755}}