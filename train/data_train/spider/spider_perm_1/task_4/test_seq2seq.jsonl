{"text": "employee: Employee_ID, Name, Age, City; shop: Shop_ID, Name, Location, District, Number_products, Manager_name; hiring: Shop_ID, Employee_ID, Start_from, Is_full_time; evaluation: Employee_ID, Year_awarded, Bonus | List the names of employees and sort in ascending order of age.", "sql": "SELECT name FROM employee ORDER BY age", "example": {"db_id": "employee_hire_evaluation", "query": "SELECT name FROM employee ORDER BY age", "query_toks": ["SELECT", "name", "FROM", "employee", "ORDER", "BY", "age"], "query_toks_no_value": ["select", "name", "from", "employee", "order", "by", "age"], "question": "List the names of employees and sort in ascending order of age.", "question_toks": ["List", "the", "names", "of", "employees", "and", "sort", "in", "ascending", "order", "of", "age", "."], "guid": 830}}
{"text": "employee: Employee_ID, Name, Age, City; shop: Shop_ID, Name, Location, District, Number_products, Manager_name; hiring: Shop_ID, Employee_ID, Start_from, Is_full_time; evaluation: Employee_ID, Year_awarded, Bonus | Find the name of the employee who got the highest one time bonus.", "sql": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1", "example": {"db_id": "employee_hire_evaluation", "query": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1", "query_toks": ["SELECT", "t1.name", "FROM", "employee", "AS", "t1", "JOIN", "evaluation", "AS", "t2", "ON", "t1.Employee_ID", "=", "t2.Employee_ID", "ORDER", "BY", "t2.bonus", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "employee", "as", "t1", "join", "evaluation", "as", "t2", "on", "t1", ".", "employee_id", "=", "t2", ".", "employee_id", "order", "by", "t2", ".", "bonus", "desc", "limit", "value"], "question": "Find the name of the employee who got the highest one time bonus.", "question_toks": ["Find", "the", "name", "of", "the", "employee", "who", "got", "the", "highest", "one", "time", "bonus", "."], "guid": 831}}
{"text": "regions: REGION_ID, REGION_NAME; countries: COUNTRY_ID, COUNTRY_NAME, REGION_ID; departments: DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID; jobs: JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY; employees: EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID; job_history: EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID; locations: LOCATION_ID, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_ID | Find job id and date of hire for those employees who was hired between November 5th, 2007 and July 5th, 2009.", "sql": "SELECT job_id ,  hire_date FROM employees WHERE hire_date BETWEEN '2007-11-05' AND '2009-07-05'", "example": {"db_id": "hr_1", "query": "SELECT job_id ,  hire_date FROM employees WHERE hire_date BETWEEN '2007-11-05' AND '2009-07-05'", "query_toks": ["SELECT", "job_id", ",", "hire_date", "FROM", "employees", "WHERE", "hire_date", "BETWEEN", "'2007-11-05", "'", "AND", "'2009-07-05", "'"], "query_toks_no_value": ["select", "job_id", ",", "hire_date", "from", "employees", "where", "hire_date", "between", "value", "and", "value"], "question": "Find job id and date of hire for those employees who was hired between November 5th, 2007 and July 5th, 2009.", "question_toks": ["Find", "job", "id", "and", "date", "of", "hire", "for", "those", "employees", "who", "was", "hired", "between", "November", "5th", ",", "2007", "and", "July", "5th", ",", "2009", "."], "guid": 832}}
{"text": "Manufacturers: Code, Name, Headquarter, Founder, Revenue; Products: Code, Name, Price, Manufacturer | Compute the number of products with a price larger than or equal to $180.", "sql": "SELECT count(*) FROM products WHERE price >= 180", "example": {"db_id": "manufactory_1", "query": "SELECT count(*) FROM products WHERE price >= 180", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "products", "WHERE", "price", ">", "=", "180"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "products", "where", "price", ">", "=", "value"], "question": "Compute the number of products with a price larger than or equal to $180.", "question_toks": ["Compute", "the", "number", "of", "products", "with", "a", "price", "larger", "than", "or", "equal", "to", "$", "180", "."], "guid": 833}}
{"text": "Manufacturers: Code, Name, Headquarter, Founder, Revenue; Products: Code, Name, Price, Manufacturer | Compute the average price of all products with manufacturer code equal to 2.", "sql": "SELECT avg(price) FROM products WHERE Manufacturer  =  2", "example": {"db_id": "manufactory_1", "query": "SELECT avg(price) FROM products WHERE Manufacturer  =  2", "query_toks": ["SELECT", "avg", "(", "price", ")", "FROM", "products", "WHERE", "Manufacturer", "=", "2"], "query_toks_no_value": ["select", "avg", "(", "price", ")", "from", "products", "where", "manufacturer", "=", "value"], "question": "Compute the average price of all products with manufacturer code equal to 2.", "question_toks": ["Compute", "the", "average", "price", "of", "all", "products", "with", "manufacturer", "code", "equal", "to", "2", "."], "guid": 834}}
{"text": "regions: REGION_ID, REGION_NAME; countries: COUNTRY_ID, COUNTRY_NAME, REGION_ID; departments: DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID; jobs: JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY; employees: EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID; job_history: EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID; locations: LOCATION_ID, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_ID | What are the employee ids for employees who make more than the average?", "sql": "SELECT employee_id FROM employees WHERE salary  >  (SELECT AVG(salary) FROM employees)", "example": {"db_id": "hr_1", "query": "SELECT employee_id FROM employees WHERE salary  >  (SELECT AVG(salary) FROM employees)", "query_toks": ["SELECT", "employee_id", "FROM", "employees", "WHERE", "salary", ">", "(", "SELECT", "AVG", "(", "salary", ")", "FROM", "employees", ")"], "query_toks_no_value": ["select", "employee_id", "from", "employees", "where", "salary", ">", "(", "select", "avg", "(", "salary", ")", "from", "employees", ")"], "question": "What are the employee ids for employees who make more than the average?", "question_toks": ["What", "are", "the", "employee", "ids", "for", "employees", "who", "make", "more", "than", "the", "average", "?"], "guid": 835}}
{"text": "continents: ContId, Continent; countries: CountryId, CountryName, Continent; car_makers: Id, Maker, FullName, Country; model_list: ModelId, Maker, Model; car_names: MakeId, Model, Make; cars_data: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year | What is the maximum accelerate for different number of cylinders?", "sql": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;", "example": {"db_id": "car_1", "query": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;", "query_toks": ["SELECT", "max", "(", "Accelerate", ")", ",", "Cylinders", "FROM", "CARS_DATA", "GROUP", "BY", "Cylinders", ";"], "query_toks_no_value": ["select", "max", "(", "accelerate", ")", ",", "cylinders", "from", "cars_data", "group", "by", "cylinders"], "question": "What is the maximum accelerate for different number of cylinders?", "question_toks": ["What", "is", "the", "maximum", "accelerate", "for", "different", "number", "of", "cylinders", "?"], "guid": 836}}
{"text": "continents: ContId, Continent; countries: CountryId, CountryName, Continent; car_makers: Id, Maker, FullName, Country; model_list: ModelId, Maker, Model; car_names: MakeId, Model, Make; cars_data: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year | Which model of the car has the minimum horsepower?", "sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;", "example": {"db_id": "car_1", "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;", "query_toks": ["SELECT", "T1.Model", "FROM", "CAR_NAMES", "AS", "T1", "JOIN", "CARS_DATA", "AS", "T2", "ON", "T1.MakeId", "=", "T2.Id", "ORDER", "BY", "T2.horsepower", "ASC", "LIMIT", "1", ";"], "query_toks_no_value": ["select", "t1", ".", "model", "from", "car_names", "as", "t1", "join", "cars_data", "as", "t2", "on", "t1", ".", "makeid", "=", "t2", ".", "id", "order", "by", "t2", ".", "horsepower", "asc", "limit", "value"], "question": "Which model of the car has the minimum horsepower?", "question_toks": ["Which", "model", "of", "the", "car", "has", "the", "minimum", "horsepower", "?"], "guid": 837}}
{"text": "people: People_ID, Age, Name, Nationality, Graduation_College; company: Company_ID, Name, Headquarters, Industry, Sales_in_Billion, Profits_in_Billion, Assets_in_Billion, Market_Value_in_Billion; employment: Company_ID, People_ID, Year_working | How many companies are headquartered in the US?", "sql": "SELECT count(*) FROM company WHERE Headquarters  =  'USA'", "example": {"db_id": "company_employee", "query": "SELECT count(*) FROM company WHERE Headquarters  =  'USA'", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "company", "WHERE", "Headquarters", "=", "'USA", "'"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "company", "where", "headquarters", "=", "value"], "question": "How many companies are headquartered in the US?", "question_toks": ["How", "many", "companies", "are", "headquartered", "in", "the", "US", "?"], "guid": 838}}
{"text": "chip_model: Model_name, Launch_year, RAM_MiB, ROM_MiB, Slots, WiFi, Bluetooth; screen_mode: Graphics_mode, Char_cells, Pixels, Hardware_colours, used_kb, map, Type; phone: Company_name, Hardware_Model_name, Accreditation_type, Accreditation_level, Date, chip_model, screen_mode | Find the Char cells, Pixels and Hardware colours for the screen of the phone whose hardware model name is \"LG-P760\".", "sql": "SELECT T1.Char_cells ,  T1.Pixels ,  T1.Hardware_colours FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T2.Hardware_Model_name = \"LG-P760\";", "example": {"db_id": "phone_1", "query": "SELECT T1.Char_cells ,  T1.Pixels ,  T1.Hardware_colours FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T2.Hardware_Model_name = \"LG-P760\";", "query_toks": ["SELECT", "T1.Char_cells", ",", "T1.Pixels", ",", "T1.Hardware_colours", "FROM", "screen_mode", "AS", "T1", "JOIN", "phone", "AS", "T2", "ON", "T1.Graphics_mode", "=", "T2.screen_mode", "WHERE", "T2.Hardware_Model_name", "=", "``", "LG-P760", "''", ";"], "query_toks_no_value": ["select", "t1", ".", "char_cells", ",", "t1", ".", "pixels", ",", "t1", ".", "hardware_colours", "from", "screen_mode", "as", "t1", "join", "phone", "as", "t2", "on", "t1", ".", "graphics_mode", "=", "t2", ".", "screen_mode", "where", "t2", ".", "hardware_model_name", "=", "value"], "question": "Find the Char cells, Pixels and Hardware colours for the screen of the phone whose hardware model name is \"LG-P760\".", "question_toks": ["Find", "the", "Char", "cells", ",", "Pixels", "and", "Hardware", "colours", "for", "the", "screen", "of", "the", "phone", "whose", "hardware", "model", "name", "is", "``", "LG-P760", "''", "."], "guid": 839}}
{"text": "company: Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value; gas_station: Station_ID, Open_Year, Location, Manager_Name, Vice_Manager_Name, Representative_Name; station_company: Station_ID, Company_ID, Rank_of_the_Year | find the rank, company names, market values of the companies in the banking industry order by their sales and profits in billion.", "sql": "SELECT rank ,  company ,  market_value FROM company WHERE main_industry  =  'Banking' ORDER BY sales_billion ,  profits_billion", "example": {"db_id": "gas_company", "query": "SELECT rank ,  company ,  market_value FROM company WHERE main_industry  =  'Banking' ORDER BY sales_billion ,  profits_billion", "query_toks": ["SELECT", "rank", ",", "company", ",", "market_value", "FROM", "company", "WHERE", "main_industry", "=", "'Banking", "'", "ORDER", "BY", "sales_billion", ",", "profits_billion"], "query_toks_no_value": ["select", "rank", ",", "company", ",", "market_value", "from", "company", "where", "main_industry", "=", "value", "order", "by", "sales_billion", ",", "profits_billion"], "question": "find the rank, company names, market values of the companies in the banking industry order by their sales and profits in billion.", "question_toks": ["find", "the", "rank", ",", "company", "names", ",", "market", "values", "of", "the", "companies", "in", "the", "banking", "industry", "order", "by", "their", "sales", "and", "profits", "in", "billion", "."], "guid": 840}}
{"text": "buildings: id, name, City, Height, Stories, Status; Companies: id, name, Headquarters, Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value_billion; Office_locations: building_id, company_id, move_in_year | Sort the company names in descending order of the company's market value.", "sql": "SELECT name FROM Companies ORDER BY Market_Value_billion DESC", "example": {"db_id": "company_office", "query": "SELECT name FROM Companies ORDER BY Market_Value_billion DESC", "query_toks": ["SELECT", "name", "FROM", "Companies", "ORDER", "BY", "Market_Value_billion", "DESC"], "query_toks_no_value": ["select", "name", "from", "companies", "order", "by", "market_value_billion", "desc"], "question": "Sort the company names in descending order of the company's market value.", "question_toks": ["Sort", "the", "company", "names", "in", "descending", "order", "of", "the", "company", "'s", "market", "value", "."], "guid": 841}}
{"text": "chip_model: Model_name, Launch_year, RAM_MiB, ROM_MiB, Slots, WiFi, Bluetooth; screen_mode: Graphics_mode, Char_cells, Pixels, Hardware_colours, used_kb, map, Type; phone: Company_name, Hardware_Model_name, Accreditation_type, Accreditation_level, Date, chip_model, screen_mode | Which model has the least amount of RAM? List the model name and the amount of RAM.", "sql": "SELECT Model_name ,  RAM_MiB FROM chip_model ORDER BY RAM_MiB ASC LIMIT 1;", "example": {"db_id": "phone_1", "query": "SELECT Model_name ,  RAM_MiB FROM chip_model ORDER BY RAM_MiB ASC LIMIT 1;", "query_toks": ["SELECT", "Model_name", ",", "RAM_MiB", "FROM", "chip_model", "ORDER", "BY", "RAM_MiB", "ASC", "LIMIT", "1", ";"], "query_toks_no_value": ["select", "model_name", ",", "ram_mib", "from", "chip_model", "order", "by", "ram_mib", "asc", "limit", "value"], "question": "Which model has the least amount of RAM? List the model name and the amount of RAM.", "question_toks": ["Which", "model", "has", "the", "least", "amount", "of", "RAM", "?", "List", "the", "model", "name", "and", "the", "amount", "of", "RAM", "."], "guid": 842}}
{"text": "manufacturer: Manufacturer_ID, Open_Year, Name, Num_of_Factories, Num_of_Shops; furniture: Furniture_ID, Name, Num_of_Component, Market_Rate; furniture_manufacte: Manufacturer_ID, Furniture_ID, Price_in_Dollar | Find the market shares and names of furnitures which no any company is producing in our records.", "sql": "SELECT Market_Rate ,  name FROM furniture WHERE Furniture_ID NOT IN (SELECT Furniture_ID FROM furniture_manufacte)", "example": {"db_id": "manufacturer", "query": "SELECT Market_Rate ,  name FROM furniture WHERE Furniture_ID NOT IN (SELECT Furniture_ID FROM furniture_manufacte)", "query_toks": ["SELECT", "Market_Rate", ",", "name", "FROM", "furniture", "WHERE", "Furniture_ID", "NOT", "IN", "(", "SELECT", "Furniture_ID", "FROM", "furniture_manufacte", ")"], "query_toks_no_value": ["select", "market_rate", ",", "name", "from", "furniture", "where", "furniture_id", "not", "in", "(", "select", "furniture_id", "from", "furniture_manufacte", ")"], "question": "Find the market shares and names of furnitures which no any company is producing in our records.", "question_toks": ["Find", "the", "market", "shares", "and", "names", "of", "furnitures", "which", "no", "any", "company", "is", "producing", "in", "our", "records", "."], "guid": 843}}
{"text": "continents: ContId, Continent; countries: CountryId, CountryName, Continent; car_makers: Id, Maker, FullName, Country; model_list: ModelId, Maker, Model; car_names: MakeId, Model, Make; cars_data: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year | What is the largest amount of horsepower for the models with 3 cylinders and what make is it?", "sql": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;", "example": {"db_id": "car_1", "query": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;", "query_toks": ["SELECT", "T2.horsepower", ",", "T1.Make", "FROM", "CAR_NAMES", "AS", "T1", "JOIN", "CARS_DATA", "AS", "T2", "ON", "T1.MakeId", "=", "T2.Id", "WHERE", "T2.cylinders", "=", "3", "ORDER", "BY", "T2.horsepower", "DESC", "LIMIT", "1", ";"], "query_toks_no_value": ["select", "t2", ".", "horsepower", ",", "t1", ".", "make", "from", "car_names", "as", "t1", "join", "cars_data", "as", "t2", "on", "t1", ".", "makeid", "=", "t2", ".", "id", "where", "t2", ".", "cylinders", "=", "value", "order", "by", "t2", ".", "horsepower", "desc", "limit", "value"], "question": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?", "question_toks": ["What", "is", "the", "largest", "amount", "of", "horsepower", "for", "the", "models", "with", "3", "cylinders", "and", "what", "make", "is", "it", "?"], "guid": 844}}
{"text": "company: Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value; gas_station: Station_ID, Open_Year, Location, Manager_Name, Vice_Manager_Name, Representative_Name; station_company: Station_ID, Company_ID, Rank_of_the_Year | What is the total number of gas stations that opened between 2000 and 2005?", "sql": "SELECT count(*) FROM gas_station WHERE open_year BETWEEN 2000 AND 2005", "example": {"db_id": "gas_company", "query": "SELECT count(*) FROM gas_station WHERE open_year BETWEEN 2000 AND 2005", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "gas_station", "WHERE", "open_year", "BETWEEN", "2000", "AND", "2005"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "gas_station", "where", "open_year", "between", "value", "and", "value"], "question": "What is the total number of gas stations that opened between 2000 and 2005?", "question_toks": ["What", "is", "the", "total", "number", "of", "gas", "stations", "that", "opened", "between", "2000", "and", "2005", "?"], "guid": 845}}
{"text": "chip_model: Model_name, Launch_year, RAM_MiB, ROM_MiB, Slots, WiFi, Bluetooth; screen_mode: Graphics_mode, Char_cells, Pixels, Hardware_colours, used_kb, map, Type; phone: Company_name, Hardware_Model_name, Accreditation_type, Accreditation_level, Date, chip_model, screen_mode | List all the model names sorted by their launch year.", "sql": "SELECT model_name FROM chip_model ORDER BY launch_year", "example": {"db_id": "phone_1", "query": "SELECT model_name FROM chip_model ORDER BY launch_year", "query_toks": ["SELECT", "model_name", "FROM", "chip_model", "ORDER", "BY", "launch_year"], "query_toks_no_value": ["select", "model_name", "from", "chip_model", "order", "by", "launch_year"], "question": "List all the model names sorted by their launch year.", "question_toks": ["List", "all", "the", "model", "names", "sorted", "by", "their", "launch", "year", "."], "guid": 846}}
{"text": "Manufacturers: Code, Name, Headquarter, Founder, Revenue; Products: Code, Name, Price, Manufacturer | What is the total revenue of each manufacturer?", "sql": "SELECT sum(revenue) ,  name FROM manufacturers GROUP BY name", "example": {"db_id": "manufactory_1", "query": "SELECT sum(revenue) ,  name FROM manufacturers GROUP BY name", "query_toks": ["SELECT", "sum", "(", "revenue", ")", ",", "name", "FROM", "manufacturers", "GROUP", "BY", "name"], "query_toks_no_value": ["select", "sum", "(", "revenue", ")", ",", "name", "from", "manufacturers", "group", "by", "name"], "question": "What is the total revenue of each manufacturer?", "question_toks": ["What", "is", "the", "total", "revenue", "of", "each", "manufacturer", "?"], "guid": 847}}
{"text": "company: Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value; gas_station: Station_ID, Open_Year, Location, Manager_Name, Vice_Manager_Name, Representative_Name; station_company: Station_ID, Company_ID, Rank_of_the_Year | What is the name and rank of every company ordered by descending number of sales?", "sql": "SELECT company ,  rank FROM company ORDER BY Sales_billion DESC", "example": {"db_id": "gas_company", "query": "SELECT company ,  rank FROM company ORDER BY Sales_billion DESC", "query_toks": ["SELECT", "company", ",", "rank", "FROM", "company", "ORDER", "BY", "Sales_billion", "DESC"], "query_toks_no_value": ["select", "company", ",", "rank", "from", "company", "order", "by", "sales_billion", "desc"], "question": "What is the name and rank of every company ordered by descending number of sales?", "question_toks": ["What", "is", "the", "name", "and", "rank", "of", "every", "company", "ordered", "by", "descending", "number", "of", "sales", "?"], "guid": 848}}
{"text": "regions: REGION_ID, REGION_NAME; countries: COUNTRY_ID, COUNTRY_NAME, REGION_ID; departments: DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID; jobs: JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY; employees: EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID; job_history: EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID; locations: LOCATION_ID, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_ID | What are the full names of employees who with in department 70 or 90?", "sql": "SELECT first_name ,  last_name FROM employees WHERE department_id  =  70 OR department_id  =  90", "example": {"db_id": "hr_1", "query": "SELECT first_name ,  last_name FROM employees WHERE department_id  =  70 OR department_id  =  90", "query_toks": ["SELECT", "first_name", ",", "last_name", "FROM", "employees", "WHERE", "department_id", "=", "70", "OR", "department_id", "=", "90"], "query_toks_no_value": ["select", "first_name", ",", "last_name", "from", "employees", "where", "department_id", "=", "value", "or", "department_id", "=", "value"], "question": "What are the full names of employees who with in department 70 or 90?", "question_toks": ["What", "are", "the", "full", "names", "of", "employees", "who", "with", "in", "department", "70", "or", "90", "?"], "guid": 849}}
{"text": "Manufacturers: Code, Name, Headquarter, Founder, Revenue; Products: Code, Name, Price, Manufacturer | Find number of products which Sony does not make.", "sql": "SELECT count(DISTINCT name) FROM products WHERE name NOT IN (SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  'Sony')", "example": {"db_id": "manufactory_1", "query": "SELECT count(DISTINCT name) FROM products WHERE name NOT IN (SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  'Sony')", "query_toks": ["SELECT", "count", "(", "DISTINCT", "name", ")", "FROM", "products", "WHERE", "name", "NOT", "IN", "(", "SELECT", "T1.name", "FROM", "products", "AS", "T1", "JOIN", "manufacturers", "AS", "T2", "ON", "T1.Manufacturer", "=", "T2.code", "WHERE", "T2.name", "=", "'Sony", "'", ")"], "query_toks_no_value": ["select", "count", "(", "distinct", "name", ")", "from", "products", "where", "name", "not", "in", "(", "select", "t1", ".", "name", "from", "products", "as", "t1", "join", "manufacturers", "as", "t2", "on", "t1", ".", "manufacturer", "=", "t2", ".", "code", "where", "t2", ".", "name", "=", "value", ")"], "question": "Find number of products which Sony does not make.", "question_toks": ["Find", "number", "of", "products", "which", "Sony", "does", "not", "make", "."], "guid": 850}}
{"text": "manufacturer: Manufacturer_ID, Open_Year, Name, Num_of_Factories, Num_of_Shops; furniture: Furniture_ID, Name, Num_of_Component, Market_Rate; furniture_manufacte: Manufacturer_ID, Furniture_ID, Price_in_Dollar | what is the average number of factories and maximum number of shops for manufacturers that opened before 1990.", "sql": "SELECT max(num_of_shops) ,  avg(Num_of_Factories) FROM manufacturer WHERE open_year  <  1990", "example": {"db_id": "manufacturer", "query": "SELECT max(num_of_shops) ,  avg(Num_of_Factories) FROM manufacturer WHERE open_year  <  1990", "query_toks": ["SELECT", "max", "(", "num_of_shops", ")", ",", "avg", "(", "Num_of_Factories", ")", "FROM", "manufacturer", "WHERE", "open_year", "<", "1990"], "query_toks_no_value": ["select", "max", "(", "num_of_shops", ")", ",", "avg", "(", "num_of_factories", ")", "from", "manufacturer", "where", "open_year", "<", "value"], "question": "what is the average number of factories and maximum number of shops for manufacturers that opened before 1990.", "question_toks": ["what", "is", "the", "average", "number", "of", "factories", "and", "maximum", "number", "of", "shops", "for", "manufacturers", "that", "opened", "before", "1990", "."], "guid": 851}}
{"text": "Manufacturers: Code, Name, Headquarter, Founder, Revenue; Products: Code, Name, Price, Manufacturer | Compute the average price of all the products.", "sql": "SELECT avg(price) FROM products", "example": {"db_id": "manufactory_1", "query": "SELECT avg(price) FROM products", "query_toks": ["SELECT", "avg", "(", "price", ")", "FROM", "products"], "query_toks_no_value": ["select", "avg", "(", "price", ")", "from", "products"], "question": "Compute the average price of all the products.", "question_toks": ["Compute", "the", "average", "price", "of", "all", "the", "products", "."], "guid": 852}}
{"text": "buildings: id, name, City, Height, Stories, Status; Companies: id, name, Headquarters, Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value_billion; Office_locations: building_id, company_id, move_in_year | Sort all the industries in descending order of the count of companies in each industry", "sql": "SELECT Industry FROM Companies GROUP BY Industry ORDER BY COUNT(*) DESC", "example": {"db_id": "company_office", "query": "SELECT Industry FROM Companies GROUP BY Industry ORDER BY COUNT(*) DESC", "query_toks": ["SELECT", "Industry", "FROM", "Companies", "GROUP", "BY", "Industry", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC"], "query_toks_no_value": ["select", "industry", "from", "companies", "group", "by", "industry", "order", "by", "count", "(", "*", ")", "desc"], "question": "Sort all the industries in descending order of the count of companies in each industry", "question_toks": ["Sort", "all", "the", "industries", "in", "descending", "order", "of", "the", "count", "of", "companies", "in", "each", "industry"], "guid": 853}}
{"text": "company: Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value; gas_station: Station_ID, Open_Year, Location, Manager_Name, Vice_Manager_Name, Representative_Name; station_company: Station_ID, Company_ID, Rank_of_the_Year | Show all main industry and total market value in each industry.", "sql": "SELECT main_industry ,  sum(market_value) FROM company GROUP BY main_industry", "example": {"db_id": "gas_company", "query": "SELECT main_industry ,  sum(market_value) FROM company GROUP BY main_industry", "query_toks": ["SELECT", "main_industry", ",", "sum", "(", "market_value", ")", "FROM", "company", "GROUP", "BY", "main_industry"], "query_toks_no_value": ["select", "main_industry", ",", "sum", "(", "market_value", ")", "from", "company", "group", "by", "main_industry"], "question": "Show all main industry and total market value in each industry.", "question_toks": ["Show", "all", "main", "industry", "and", "total", "market", "value", "in", "each", "industry", "."], "guid": 854}}
{"text": "regions: REGION_ID, REGION_NAME; countries: COUNTRY_ID, COUNTRY_NAME, REGION_ID; departments: DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID; jobs: JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY; employees: EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID; job_history: EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID; locations: LOCATION_ID, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_ID | display the employee name ( first name and last name ) and hire date for all employees in the same department as Clara.", "sql": "SELECT first_name ,  last_name ,  hire_date FROM employees WHERE department_id  =  (SELECT department_id FROM employees WHERE first_name  =  \"Clara\")", "example": {"db_id": "hr_1", "query": "SELECT first_name ,  last_name ,  hire_date FROM employees WHERE department_id  =  (SELECT department_id FROM employees WHERE first_name  =  \"Clara\")", "query_toks": ["SELECT", "first_name", ",", "last_name", ",", "hire_date", "FROM", "employees", "WHERE", "department_id", "=", "(", "SELECT", "department_id", "FROM", "employees", "WHERE", "first_name", "=", "``", "Clara", "''", ")"], "query_toks_no_value": ["select", "first_name", ",", "last_name", ",", "hire_date", "from", "employees", "where", "department_id", "=", "(", "select", "department_id", "from", "employees", "where", "first_name", "=", "value", ")"], "question": "display the employee name ( first name and last name ) and hire date for all employees in the same department as Clara.", "question_toks": ["display", "the", "employee", "name", "(", "first", "name", "and", "last", "name", ")", "and", "hire", "date", "for", "all", "employees", "in", "the", "same", "department", "as", "Clara", "."], "guid": 855}}
{"text": "company: Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value; gas_station: Station_ID, Open_Year, Location, Manager_Name, Vice_Manager_Name, Representative_Name; station_company: Station_ID, Company_ID, Rank_of_the_Year | For each location, how many gas stations are there in order?", "sql": "SELECT LOCATION ,  count(*) FROM gas_station GROUP BY LOCATION ORDER BY count(*)", "example": {"db_id": "gas_company", "query": "SELECT LOCATION ,  count(*) FROM gas_station GROUP BY LOCATION ORDER BY count(*)", "query_toks": ["SELECT", "LOCATION", ",", "count", "(", "*", ")", "FROM", "gas_station", "GROUP", "BY", "LOCATION", "ORDER", "BY", "count", "(", "*", ")"], "query_toks_no_value": ["select", "location", ",", "count", "(", "*", ")", "from", "gas_station", "group", "by", "location", "order", "by", "count", "(", "*", ")"], "question": "For each location, how many gas stations are there in order?", "question_toks": ["For", "each", "location", ",", "how", "many", "gas", "stations", "are", "there", "in", "order", "?"], "guid": 856}}
{"text": "Manufacturers: Code, Name, Headquarter, Founder, Revenue; Products: Code, Name, Price, Manufacturer | Find the total revenue for each manufacturer.", "sql": "SELECT sum(revenue) ,  name FROM manufacturers GROUP BY name", "example": {"db_id": "manufactory_1", "query": "SELECT sum(revenue) ,  name FROM manufacturers GROUP BY name", "query_toks": ["SELECT", "sum", "(", "revenue", ")", ",", "name", "FROM", "manufacturers", "GROUP", "BY", "name"], "query_toks_no_value": ["select", "sum", "(", "revenue", ")", ",", "name", "from", "manufacturers", "group", "by", "name"], "question": "Find the total revenue for each manufacturer.", "question_toks": ["Find", "the", "total", "revenue", "for", "each", "manufacturer", "."], "guid": 857}}
{"text": "buildings: id, name, City, Height, Stories, Status; Companies: id, name, Headquarters, Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value_billion; Office_locations: building_id, company_id, move_in_year | Which industries have both companies with headquarter in \"USA\" and companies with headquarter in \"China\"?", "sql": "SELECT Industry FROM Companies WHERE Headquarters  =  \"USA\" INTERSECT SELECT Industry FROM Companies WHERE Headquarters  =  \"China\"", "example": {"db_id": "company_office", "query": "SELECT Industry FROM Companies WHERE Headquarters  =  \"USA\" INTERSECT SELECT Industry FROM Companies WHERE Headquarters  =  \"China\"", "query_toks": ["SELECT", "Industry", "FROM", "Companies", "WHERE", "Headquarters", "=", "``", "USA", "''", "INTERSECT", "SELECT", "Industry", "FROM", "Companies", "WHERE", "Headquarters", "=", "``", "China", "''"], "query_toks_no_value": ["select", "industry", "from", "companies", "where", "headquarters", "=", "value", "intersect", "select", "industry", "from", "companies", "where", "headquarters", "=", "value"], "question": "Which industries have both companies with headquarter in \"USA\" and companies with headquarter in \"China\"?", "question_toks": ["Which", "industries", "have", "both", "companies", "with", "headquarter", "in", "``", "USA", "''", "and", "companies", "with", "headquarter", "in", "``", "China", "''", "?"], "guid": 858}}
{"text": "manufacturer: Manufacturer_ID, Open_Year, Name, Num_of_Factories, Num_of_Shops; furniture: Furniture_ID, Name, Num_of_Component, Market_Rate; furniture_manufacte: Manufacturer_ID, Furniture_ID, Price_in_Dollar | Find the name and component amount of the least popular furniture.", "sql": "SELECT name ,  Num_of_Component FROM furniture ORDER BY market_rate LIMIT 1", "example": {"db_id": "manufacturer", "query": "SELECT name ,  Num_of_Component FROM furniture ORDER BY market_rate LIMIT 1", "query_toks": ["SELECT", "name", ",", "Num_of_Component", "FROM", "furniture", "ORDER", "BY", "market_rate", "LIMIT", "1"], "query_toks_no_value": ["select", "name", ",", "num_of_component", "from", "furniture", "order", "by", "market_rate", "limit", "value"], "question": "Find the name and component amount of the least popular furniture.", "question_toks": ["Find", "the", "name", "and", "component", "amount", "of", "the", "least", "popular", "furniture", "."], "guid": 859}}
{"text": "buildings: id, name, City, Height, Stories, Status; Companies: id, name, Headquarters, Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value_billion; Office_locations: building_id, company_id, move_in_year | Find the names of the companies whose headquarters are not located in \"USA\".", "sql": "SELECT name FROM Companies WHERE Headquarters != 'USA'", "example": {"db_id": "company_office", "query": "SELECT name FROM Companies WHERE Headquarters != 'USA'", "query_toks": ["SELECT", "name", "FROM", "Companies", "WHERE", "Headquarters", "!", "=", "'USA", "'"], "query_toks_no_value": ["select", "name", "from", "companies", "where", "headquarters", "!", "=", "value"], "question": "Find the names of the companies whose headquarters are not located in \"USA\".", "question_toks": ["Find", "the", "names", "of", "the", "companies", "whose", "headquarters", "are", "not", "located", "in", "``", "USA", "''", "."], "guid": 860}}
{"text": "regions: REGION_ID, REGION_NAME; countries: COUNTRY_ID, COUNTRY_NAME, REGION_ID; departments: DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID; jobs: JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY; employees: EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID; job_history: EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID; locations: LOCATION_ID, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_ID | display the average salary of employees for each department who gets a commission percentage.", "sql": "SELECT department_id ,  AVG(salary) FROM employees WHERE commission_pct != \"null\" GROUP BY department_id", "example": {"db_id": "hr_1", "query": "SELECT department_id ,  AVG(salary) FROM employees WHERE commission_pct != \"null\" GROUP BY department_id", "query_toks": ["SELECT", "department_id", ",", "AVG", "(", "salary", ")", "FROM", "employees", "WHERE", "commission_pct", "!", "=", "``", "null", "''", "GROUP", "BY", "department_id"], "query_toks_no_value": ["select", "department_id", ",", "avg", "(", "salary", ")", "from", "employees", "where", "commission_pct", "!", "=", "value", "group", "by", "department_id"], "question": "display the average salary of employees for each department who gets a commission percentage.", "question_toks": ["display", "the", "average", "salary", "of", "employees", "for", "each", "department", "who", "gets", "a", "commission", "percentage", "."], "guid": 861}}
{"text": "Manufacturers: Code, Name, Headquarter, Founder, Revenue; Products: Code, Name, Price, Manufacturer | Find the name and revenue of the company that earns the highest revenue in each city.", "sql": "SELECT name ,  max(revenue) ,  Headquarter FROM manufacturers GROUP BY Headquarter", "example": {"db_id": "manufactory_1", "query": "SELECT name ,  max(revenue) ,  Headquarter FROM manufacturers GROUP BY Headquarter", "query_toks": ["SELECT", "name", ",", "max", "(", "revenue", ")", ",", "Headquarter", "FROM", "manufacturers", "GROUP", "BY", "Headquarter"], "query_toks_no_value": ["select", "name", ",", "max", "(", "revenue", ")", ",", "headquarter", "from", "manufacturers", "group", "by", "headquarter"], "question": "Find the name and revenue of the company that earns the highest revenue in each city.", "question_toks": ["Find", "the", "name", "and", "revenue", "of", "the", "company", "that", "earns", "the", "highest", "revenue", "in", "each", "city", "."], "guid": 862}}
{"text": "buildings: id, name, City, Height, Stories, Status; Companies: id, name, Headquarters, Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value_billion; Office_locations: building_id, company_id, move_in_year | What are the names of buildings sorted in descending order of building height?", "sql": "SELECT name FROM buildings ORDER BY Height DESC", "example": {"db_id": "company_office", "query": "SELECT name FROM buildings ORDER BY Height DESC", "query_toks": ["SELECT", "name", "FROM", "buildings", "ORDER", "BY", "Height", "DESC"], "query_toks_no_value": ["select", "name", "from", "buildings", "order", "by", "height", "desc"], "question": "What are the names of buildings sorted in descending order of building height?", "question_toks": ["What", "are", "the", "names", "of", "buildings", "sorted", "in", "descending", "order", "of", "building", "height", "?"], "guid": 863}}
{"text": "continents: ContId, Continent; countries: CountryId, CountryName, Continent; car_makers: Id, Maker, FullName, Country; model_list: ModelId, Maker, Model; car_names: MakeId, Model, Make; cars_data: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year | What are the names and ids of all makers with more than 3 models?", "sql": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;", "example": {"db_id": "car_1", "query": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;", "query_toks": ["SELECT", "T1.FullName", ",", "T1.Id", "FROM", "CAR_MAKERS", "AS", "T1", "JOIN", "MODEL_LIST", "AS", "T2", "ON", "T1.Id", "=", "T2.Maker", "GROUP", "BY", "T1.Id", "HAVING", "count", "(", "*", ")", ">", "3", ";"], "query_toks_no_value": ["select", "t1", ".", "fullname", ",", "t1", ".", "id", "from", "car_makers", "as", "t1", "join", "model_list", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "maker", "group", "by", "t1", ".", "id", "having", "count", "(", "*", ")", ">", "value"], "question": "What are the names and ids of all makers with more than 3 models?", "question_toks": ["What", "are", "the", "names", "and", "ids", "of", "all", "makers", "with", "more", "than", "3", "models", "?"], "guid": 864}}
{"text": "company: Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value; gas_station: Station_ID, Open_Year, Location, Manager_Name, Vice_Manager_Name, Representative_Name; station_company: Station_ID, Company_ID, Rank_of_the_Year | Show headquarters with at least two companies in the banking industry.", "sql": "SELECT headquarters FROM company WHERE main_industry  =  'Banking' GROUP BY headquarters HAVING count(*)  >=  2", "example": {"db_id": "gas_company", "query": "SELECT headquarters FROM company WHERE main_industry  =  'Banking' GROUP BY headquarters HAVING count(*)  >=  2", "query_toks": ["SELECT", "headquarters", "FROM", "company", "WHERE", "main_industry", "=", "'Banking", "'", "GROUP", "BY", "headquarters", "HAVING", "count", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "headquarters", "from", "company", "where", "main_industry", "=", "value", "group", "by", "headquarters", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "Show headquarters with at least two companies in the banking industry.", "question_toks": ["Show", "headquarters", "with", "at", "least", "two", "companies", "in", "the", "banking", "industry", "."], "guid": 865}}
{"text": "continents: ContId, Continent; countries: CountryId, CountryName, Continent; car_makers: Id, Maker, FullName, Country; model_list: ModelId, Maker, Model; car_names: MakeId, Model, Make; cars_data: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year | How many models does each car maker produce? List maker full name, id and the number.", "sql": "SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;", "example": {"db_id": "car_1", "query": "SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;", "query_toks": ["SELECT", "T1.FullName", ",", "T1.Id", ",", "count", "(", "*", ")", "FROM", "CAR_MAKERS", "AS", "T1", "JOIN", "MODEL_LIST", "AS", "T2", "ON", "T1.Id", "=", "T2.Maker", "GROUP", "BY", "T1.Id", ";"], "query_toks_no_value": ["select", "t1", ".", "fullname", ",", "t1", ".", "id", ",", "count", "(", "*", ")", "from", "car_makers", "as", "t1", "join", "model_list", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "maker", "group", "by", "t1", ".", "id"], "question": "How many models does each car maker produce? List maker full name, id and the number.", "question_toks": ["How", "many", "models", "does", "each", "car", "maker", "produce", "?", "List", "maker", "full", "name", ",", "id", "and", "the", "number", "."], "guid": 866}}
{"text": "chip_model: Model_name, Launch_year, RAM_MiB, ROM_MiB, Slots, WiFi, Bluetooth; screen_mode: Graphics_mode, Char_cells, Pixels, Hardware_colours, used_kb, map, Type; phone: Company_name, Hardware_Model_name, Accreditation_type, Accreditation_level, Date, chip_model, screen_mode | Find the name of the company that has the least number of phone models. List the company name and the number of phone model produced by that company.", "sql": "SELECT Company_name ,  count(*) FROM phone GROUP BY Company_name ORDER BY count(*) ASC LIMIT 1;", "example": {"db_id": "phone_1", "query": "SELECT Company_name ,  count(*) FROM phone GROUP BY Company_name ORDER BY count(*) ASC LIMIT 1;", "query_toks": ["SELECT", "Company_name", ",", "count", "(", "*", ")", "FROM", "phone", "GROUP", "BY", "Company_name", "ORDER", "BY", "count", "(", "*", ")", "ASC", "LIMIT", "1", ";"], "query_toks_no_value": ["select", "company_name", ",", "count", "(", "*", ")", "from", "phone", "group", "by", "company_name", "order", "by", "count", "(", "*", ")", "asc", "limit", "value"], "question": "Find the name of the company that has the least number of phone models. List the company name and the number of phone model produced by that company.", "question_toks": ["Find", "the", "name", "of", "the", "company", "that", "has", "the", "least", "number", "of", "phone", "models", ".", "List", "the", "company", "name", "and", "the", "number", "of", "phone", "model", "produced", "by", "that", "company", "."], "guid": 867}}
{"text": "continents: ContId, Continent; countries: CountryId, CountryName, Continent; car_makers: Id, Maker, FullName, Country; model_list: ModelId, Maker, Model; car_names: MakeId, Model, Make; cars_data: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year | Which model saves the most gasoline? That is to say, have the maximum miles per gallon.", "sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1;", "example": {"db_id": "car_1", "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1;", "query_toks": ["SELECT", "T1.Model", "FROM", "CAR_NAMES", "AS", "T1", "JOIN", "CARS_DATA", "AS", "T2", "ON", "T1.MakeId", "=", "T2.Id", "ORDER", "BY", "T2.mpg", "DESC", "LIMIT", "1", ";"], "query_toks_no_value": ["select", "t1", ".", "model", "from", "car_names", "as", "t1", "join", "cars_data", "as", "t2", "on", "t1", ".", "makeid", "=", "t2", ".", "id", "order", "by", "t2", ".", "mpg", "desc", "limit", "value"], "question": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.", "question_toks": ["Which", "model", "saves", "the", "most", "gasoline", "?", "That", "is", "to", "say", ",", "have", "the", "maximum", "miles", "per", "gallon", "."], "guid": 868}}
{"text": "regions: REGION_ID, REGION_NAME; countries: COUNTRY_ID, COUNTRY_NAME, REGION_ID; departments: DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID; jobs: JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY; employees: EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID; job_history: EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID; locations: LOCATION_ID, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_ID | Which employees were hired after September 7th, 1987?", "sql": "SELECT * FROM employees WHERE hire_date  >  '1987-09-07'", "example": {"db_id": "hr_1", "query": "SELECT * FROM employees WHERE hire_date  >  '1987-09-07'", "query_toks": ["SELECT", "*", "FROM", "employees", "WHERE", "hire_date", ">", "'1987-09-07", "'"], "query_toks_no_value": ["select", "*", "from", "employees", "where", "hire_date", ">", "value"], "question": "Which employees were hired after September 7th, 1987?", "question_toks": ["Which", "employees", "were", "hired", "after", "September", "7th", ",", "1987", "?"], "guid": 869}}
{"text": "member: Member_ID, Name, Nationality, Role; performance: Performance_ID, Date, Host, Location, Attendance; member_attendance: Member_ID, Performance_ID, Num_of_Pieces | What is the date of the performance with the highest number of attendees?", "sql": "SELECT Date FROM performance ORDER BY Attendance DESC LIMIT 1", "example": {"db_id": "performance_attendance", "query": "SELECT Date FROM performance ORDER BY Attendance DESC LIMIT 1", "query_toks": ["SELECT", "Date", "FROM", "performance", "ORDER", "BY", "Attendance", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "date", "from", "performance", "order", "by", "attendance", "desc", "limit", "value"], "question": "What is the date of the performance with the highest number of attendees?", "question_toks": ["What", "is", "the", "date", "of", "the", "performance", "with", "the", "highest", "number", "of", "attendees", "?"], "guid": 870}}
{"text": "buildings: id, name, City, Height, Stories, Status; Companies: id, name, Headquarters, Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value_billion; Office_locations: building_id, company_id, move_in_year | Whah are the name of each industry and the number of companies in that industry?", "sql": "SELECT Industry ,  COUNT(*) FROM Companies GROUP BY Industry", "example": {"db_id": "company_office", "query": "SELECT Industry ,  COUNT(*) FROM Companies GROUP BY Industry", "query_toks": ["SELECT", "Industry", ",", "COUNT", "(", "*", ")", "FROM", "Companies", "GROUP", "BY", "Industry"], "query_toks_no_value": ["select", "industry", ",", "count", "(", "*", ")", "from", "companies", "group", "by", "industry"], "question": "Whah are the name of each industry and the number of companies in that industry?", "question_toks": ["Whah", "are", "the", "name", "of", "each", "industry", "and", "the", "number", "of", "companies", "in", "that", "industry", "?"], "guid": 871}}
{"text": "employee: Employee_ID, Name, Age, City; shop: Shop_ID, Name, Location, District, Number_products, Manager_name; hiring: Shop_ID, Employee_ID, Start_from, Is_full_time; evaluation: Employee_ID, Year_awarded, Bonus | What is the number of employees from each city?", "sql": "SELECT count(*) ,  city FROM employee GROUP BY city", "example": {"db_id": "employee_hire_evaluation", "query": "SELECT count(*) ,  city FROM employee GROUP BY city", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "city", "FROM", "employee", "GROUP", "BY", "city"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "city", "from", "employee", "group", "by", "city"], "question": "What is the number of employees from each city?", "question_toks": ["What", "is", "the", "number", "of", "employees", "from", "each", "city", "?"], "guid": 872}}
{"text": "regions: REGION_ID, REGION_NAME; countries: COUNTRY_ID, COUNTRY_NAME, REGION_ID; departments: DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID; jobs: JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY; employees: EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID; job_history: EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID; locations: LOCATION_ID, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_ID | What are the department ids for which more than 10 employees had a commission?", "sql": "SELECT department_id FROM employees GROUP BY department_id HAVING COUNT(commission_pct) > 10", "example": {"db_id": "hr_1", "query": "SELECT department_id FROM employees GROUP BY department_id HAVING COUNT(commission_pct) > 10", "query_toks": ["SELECT", "department_id", "FROM", "employees", "GROUP", "BY", "department_id", "HAVING", "COUNT", "(", "commission_pct", ")", ">", "10"], "query_toks_no_value": ["select", "department_id", "from", "employees", "group", "by", "department_id", "having", "count", "(", "commission_pct", ")", ">", "value"], "question": "What are the department ids for which more than 10 employees had a commission?", "question_toks": ["What", "are", "the", "department", "ids", "for", "which", "more", "than", "10", "employees", "had", "a", "commission", "?"], "guid": 873}}
{"text": "employee: Employee_ID, Name, Age, City; shop: Shop_ID, Name, Location, District, Number_products, Manager_name; hiring: Shop_ID, Employee_ID, Start_from, Is_full_time; evaluation: Employee_ID, Year_awarded, Bonus | Which district has both stores with less than 3000 products and stores with more than 10000 products?", "sql": "SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000", "example": {"db_id": "employee_hire_evaluation", "query": "SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000", "query_toks": ["SELECT", "district", "FROM", "shop", "WHERE", "Number_products", "<", "3000", "INTERSECT", "SELECT", "district", "FROM", "shop", "WHERE", "Number_products", ">", "10000"], "query_toks_no_value": ["select", "district", "from", "shop", "where", "number_products", "<", "value", "intersect", "select", "district", "from", "shop", "where", "number_products", ">", "value"], "question": "Which district has both stores with less than 3000 products and stores with more than 10000 products?", "question_toks": ["Which", "district", "has", "both", "stores", "with", "less", "than", "3000", "products", "and", "stores", "with", "more", "than", "10000", "products", "?"], "guid": 874}}
{"text": "buildings: id, name, City, Height, Stories, Status; Companies: id, name, Headquarters, Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value_billion; Office_locations: building_id, company_id, move_in_year | Show the headquarters shared by more than two companies.", "sql": "SELECT Headquarters FROM Companies GROUP BY Headquarters HAVING COUNT(*)  >  2", "example": {"db_id": "company_office", "query": "SELECT Headquarters FROM Companies GROUP BY Headquarters HAVING COUNT(*)  >  2", "query_toks": ["SELECT", "Headquarters", "FROM", "Companies", "GROUP", "BY", "Headquarters", "HAVING", "COUNT", "(", "*", ")", ">", "2"], "query_toks_no_value": ["select", "headquarters", "from", "companies", "group", "by", "headquarters", "having", "count", "(", "*", ")", ">", "value"], "question": "Show the headquarters shared by more than two companies.", "question_toks": ["Show", "the", "headquarters", "shared", "by", "more", "than", "two", "companies", "."], "guid": 875}}
{"text": "employee: Employee_ID, Name, Age, City; shop: Shop_ID, Name, Location, District, Number_products, Manager_name; hiring: Shop_ID, Employee_ID, Start_from, Is_full_time; evaluation: Employee_ID, Year_awarded, Bonus | Which shops' number products is above the average? Give me the shop names.", "sql": "SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)", "example": {"db_id": "employee_hire_evaluation", "query": "SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)", "query_toks": ["SELECT", "name", "FROM", "shop", "WHERE", "number_products", ">", "(", "SELECT", "avg", "(", "number_products", ")", "FROM", "shop", ")"], "query_toks_no_value": ["select", "name", "from", "shop", "where", "number_products", ">", "(", "select", "avg", "(", "number_products", ")", "from", "shop", ")"], "question": "Which shops' number products is above the average? Give me the shop names.", "question_toks": ["Which", "shops", "'", "number", "products", "is", "above", "the", "average", "?", "Give", "me", "the", "shop", "names", "."], "guid": 876}}
{"text": "buildings: id, name, City, Height, Stories, Status; Companies: id, name, Headquarters, Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value_billion; Office_locations: building_id, company_id, move_in_year | Show the industries shared by companies whose headquarters are \"USA\" and companies whose headquarters are \"China\".", "sql": "SELECT Industry FROM Companies WHERE Headquarters  =  \"USA\" INTERSECT SELECT Industry FROM Companies WHERE Headquarters  =  \"China\"", "example": {"db_id": "company_office", "query": "SELECT Industry FROM Companies WHERE Headquarters  =  \"USA\" INTERSECT SELECT Industry FROM Companies WHERE Headquarters  =  \"China\"", "query_toks": ["SELECT", "Industry", "FROM", "Companies", "WHERE", "Headquarters", "=", "``", "USA", "''", "INTERSECT", "SELECT", "Industry", "FROM", "Companies", "WHERE", "Headquarters", "=", "``", "China", "''"], "query_toks_no_value": ["select", "industry", "from", "companies", "where", "headquarters", "=", "value", "intersect", "select", "industry", "from", "companies", "where", "headquarters", "=", "value"], "question": "Show the industries shared by companies whose headquarters are \"USA\" and companies whose headquarters are \"China\".", "question_toks": ["Show", "the", "industries", "shared", "by", "companies", "whose", "headquarters", "are", "``", "USA", "''", "and", "companies", "whose", "headquarters", "are", "``", "China", "''", "."], "guid": 877}}
{"text": "works_on: Essn, Pno, Hours; employee: Fname, Minit, Lname, Ssn, Bdate, Address, Sex, Salary, Super_ssn, Dno; department: Dname, Dnumber, Mgr_ssn, Mgr_start_date; project: Pname, Pnumber, Plocation, Dnum; dependent: Essn, Dependent_name, Sex, Bdate, Relationship; dept_locations: Dnumber, Dlocation | find all dependent names who have a spouse relation with some employee.", "sql": "SELECT Dependent_name FROM dependent WHERE relationship  =  'Spouse'", "example": {"db_id": "company_1", "query": "SELECT Dependent_name FROM dependent WHERE relationship  =  'Spouse'", "query_toks": ["SELECT", "Dependent_name", "FROM", "dependent", "WHERE", "relationship", "=", "'Spouse", "'"], "query_toks_no_value": ["select", "dependent_name", "from", "dependent", "where", "relationship", "=", "value"], "question": "find all dependent names who have a spouse relation with some employee.", "question_toks": ["find", "all", "dependent", "names", "who", "have", "a", "spouse", "relation", "with", "some", "employee", "."], "guid": 878}}
{"text": "manufacturer: Manufacturer_ID, Open_Year, Name, Num_of_Factories, Num_of_Shops; furniture: Furniture_ID, Name, Num_of_Component, Market_Rate; furniture_manufacte: Manufacturer_ID, Furniture_ID, Price_in_Dollar | Find the number of funiture types produced by each manufacturer as well as the company names.", "sql": "SELECT count(*) ,  t1.name FROM manufacturer AS t1 JOIN furniture_manufacte AS t2 ON t1.manufacturer_id  =  t2.manufacturer_id GROUP BY t1.manufacturer_id", "example": {"db_id": "manufacturer", "query": "SELECT count(*) ,  t1.name FROM manufacturer AS t1 JOIN furniture_manufacte AS t2 ON t1.manufacturer_id  =  t2.manufacturer_id GROUP BY t1.manufacturer_id", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "t1.name", "FROM", "manufacturer", "AS", "t1", "JOIN", "furniture_manufacte", "AS", "t2", "ON", "t1.manufacturer_id", "=", "t2.manufacturer_id", "GROUP", "BY", "t1.manufacturer_id"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "t1", ".", "name", "from", "manufacturer", "as", "t1", "join", "furniture_manufacte", "as", "t2", "on", "t1", ".", "manufacturer_id", "=", "t2", ".", "manufacturer_id", "group", "by", "t1", ".", "manufacturer_id"], "question": "Find the number of funiture types produced by each manufacturer as well as the company names.", "question_toks": ["Find", "the", "number", "of", "funiture", "types", "produced", "by", "each", "manufacturer", "as", "well", "as", "the", "company", "names", "."], "guid": 879}}
{"text": "continents: ContId, Continent; countries: CountryId, CountryName, Continent; car_makers: Id, Maker, FullName, Country; model_list: ModelId, Maker, Model; car_names: MakeId, Model, Make; cars_data: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year | How many car models were produced by the maker with full name American Motor Company?", "sql": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';", "example": {"db_id": "car_1", "query": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "CAR_MAKERS", "AS", "T1", "JOIN", "MODEL_LIST", "AS", "T2", "ON", "T1.Id", "=", "T2.Maker", "WHERE", "T1.FullName", "=", "'American", "Motor", "Company", "'", ";"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "car_makers", "as", "t1", "join", "model_list", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "maker", "where", "t1", ".", "fullname", "=", "value"], "question": "How many car models were produced by the maker with full name American Motor Company?", "question_toks": ["How", "many", "car", "models", "were", "produced", "by", "the", "maker", "with", "full", "name", "American", "Motor", "Company", "?"], "guid": 880}}
{"text": "company: Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value; gas_station: Station_ID, Open_Year, Location, Manager_Name, Vice_Manager_Name, Representative_Name; station_company: Station_ID, Company_ID, Rank_of_the_Year | What are the locations that have gas stations owned by a company with a market value greater than 100?", "sql": "SELECT T3.location FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id WHERE T2.market_value  >  100", "example": {"db_id": "gas_company", "query": "SELECT T3.location FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id WHERE T2.market_value  >  100", "query_toks": ["SELECT", "T3.location", "FROM", "station_company", "AS", "T1", "JOIN", "company", "AS", "T2", "ON", "T1.company_id", "=", "T2.company_id", "JOIN", "gas_station", "AS", "T3", "ON", "T1.station_id", "=", "T3.station_id", "WHERE", "T2.market_value", ">", "100"], "query_toks_no_value": ["select", "t3", ".", "location", "from", "station_company", "as", "t1", "join", "company", "as", "t2", "on", "t1", ".", "company_id", "=", "t2", ".", "company_id", "join", "gas_station", "as", "t3", "on", "t1", ".", "station_id", "=", "t3", ".", "station_id", "where", "t2", ".", "market_value", ">", "value"], "question": "What are the locations that have gas stations owned by a company with a market value greater than 100?", "question_toks": ["What", "are", "the", "locations", "that", "have", "gas", "stations", "owned", "by", "a", "company", "with", "a", "market", "value", "greater", "than", "100", "?"], "guid": 881}}
{"text": "chip_model: Model_name, Launch_year, RAM_MiB, ROM_MiB, Slots, WiFi, Bluetooth; screen_mode: Graphics_mode, Char_cells, Pixels, Hardware_colours, used_kb, map, Type; phone: Company_name, Hardware_Model_name, Accreditation_type, Accreditation_level, Date, chip_model, screen_mode | Find the details for all chip models.", "sql": "SELECT * FROM chip_model", "example": {"db_id": "phone_1", "query": "SELECT * FROM chip_model", "query_toks": ["SELECT", "*", "FROM", "chip_model"], "query_toks_no_value": ["select", "*", "from", "chip_model"], "question": "Find the details for all chip models.", "question_toks": ["Find", "the", "details", "for", "all", "chip", "models", "."], "guid": 882}}
{"text": "regions: REGION_ID, REGION_NAME; countries: COUNTRY_ID, COUNTRY_NAME, REGION_ID; departments: DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID; jobs: JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY; employees: EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID; job_history: EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID; locations: LOCATION_ID, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_ID | display those employees who contain a letter z to their first name and also display their last name, city.", "sql": "SELECT T1.first_name ,  T1.last_name ,  T3.city FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id WHERE T1.first_name LIKE '%z%'", "example": {"db_id": "hr_1", "query": "SELECT T1.first_name ,  T1.last_name ,  T3.city FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id WHERE T1.first_name LIKE '%z%'", "query_toks": ["SELECT", "T1.first_name", ",", "T1.last_name", ",", "T3.city", "FROM", "employees", "AS", "T1", "JOIN", "departments", "AS", "T2", "ON", "T1.department_id", "=", "T2.department_id", "JOIN", "locations", "AS", "T3", "ON", "T2.location_id", "=", "T3.location_id", "WHERE", "T1.first_name", "LIKE", "'", "%", "z", "%", "'"], "query_toks_no_value": ["select", "t1", ".", "first_name", ",", "t1", ".", "last_name", ",", "t3", ".", "city", "from", "employees", "as", "t1", "join", "departments", "as", "t2", "on", "t1", ".", "department_id", "=", "t2", ".", "department_id", "join", "locations", "as", "t3", "on", "t2", ".", "location_id", "=", "t3", ".", "location_id", "where", "t1", ".", "first_name", "like", "value"], "question": "display those employees who contain a letter z to their first name and also display their last name, city.", "question_toks": ["display", "those", "employees", "who", "contain", "a", "letter", "z", "to", "their", "first", "name", "and", "also", "display", "their", "last", "name", ",", "city", "."], "guid": 883}}
{"text": "continents: ContId, Continent; countries: CountryId, CountryName, Continent; car_makers: Id, Maker, FullName, Country; model_list: ModelId, Maker, Model; car_names: MakeId, Model, Make; cars_data: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year | What are the ids and names of all countries that either have more than 3 car makers or produce fiat model ?", "sql": "select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  3 union select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country join model_list as t3 on t2.id  =  t3.maker where t3.model  =  'fiat';", "example": {"db_id": "car_1", "query": "select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  3 union select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country join model_list as t3 on t2.id  =  t3.maker where t3.model  =  'fiat';", "query_toks": ["select", "t1.countryid", ",", "t1.countryname", "from", "countries", "as", "t1", "join", "car_makers", "as", "t2", "on", "t1.countryid", "=", "t2.country", "group", "by", "t1.countryid", "having", "count", "(", "*", ")", ">", "3", "union", "select", "t1.countryid", ",", "t1.countryname", "from", "countries", "as", "t1", "join", "car_makers", "as", "t2", "on", "t1.countryid", "=", "t2.country", "join", "model_list", "as", "t3", "on", "t2.id", "=", "t3.maker", "where", "t3.model", "=", "\"fiat\"", ";"], "query_toks_no_value": ["select", "t1", ".", "countryid", ",", "t1", ".", "countryname", "from", "countries", "as", "t1", "join", "car_makers", "as", "t2", "on", "t1", ".", "countryid", "=", "t2", ".", "country", "group", "by", "t1", ".", "countryid", "having", "count", "(", "*", ")", ">", "value", "union", "select", "t1", ".", "countryid", ",", "t1", ".", "countryname", "from", "countries", "as", "t1", "join", "car_makers", "as", "t2", "on", "t1", ".", "countryid", "=", "t2", ".", "country", "join", "model_list", "as", "t3", "on", "t2", ".", "id", "=", "t3", ".", "maker", "where", "t3", ".", "model", "=", "value"], "question": "What are the ids and names of all countries that either have more than 3 car makers or produce fiat model ?", "question_toks": ["What", "are", "the", "ids", "and", "names", "of", "all", "countries", "that", "either", "have", "more", "than", "3", "car", "makers", "or", "produce", "fiat", "model", "?"], "guid": 884}}
{"text": "continents: ContId, Continent; countries: CountryId, CountryName, Continent; car_makers: Id, Maker, FullName, Country; model_list: ModelId, Maker, Model; car_names: MakeId, Model, Make; cars_data: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year | What is the number of car models created by the car maker American Motor Company?", "sql": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';", "example": {"db_id": "car_1", "query": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "CAR_MAKERS", "AS", "T1", "JOIN", "MODEL_LIST", "AS", "T2", "ON", "T1.Id", "=", "T2.Maker", "WHERE", "T1.FullName", "=", "'American", "Motor", "Company", "'", ";"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "car_makers", "as", "t1", "join", "model_list", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "maker", "where", "t1", ".", "fullname", "=", "value"], "question": "What is the number of car models created by the car maker American Motor Company?", "question_toks": ["What", "is", "the", "number", "of", "car", "models", "created", "by", "the", "car", "maker", "American", "Motor", "Company", "?"], "guid": 885}}
{"text": "buildings: id, name, City, Height, Stories, Status; Companies: id, name, Headquarters, Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value_billion; Office_locations: building_id, company_id, move_in_year | Compute the average profits companies make.", "sql": "SELECT avg(Profits_billion) FROM Companies", "example": {"db_id": "company_office", "query": "SELECT avg(Profits_billion) FROM Companies", "query_toks": ["SELECT", "avg", "(", "Profits_billion", ")", "FROM", "Companies"], "query_toks_no_value": ["select", "avg", "(", "profits_billion", ")", "from", "companies"], "question": "Compute the average profits companies make.", "question_toks": ["Compute", "the", "average", "profits", "companies", "make", "."], "guid": 886}}
{"text": "people: People_ID, Age, Name, Nationality, Graduation_College; company: Company_ID, Name, Headquarters, Industry, Sales_in_Billion, Profits_in_Billion, Assets_in_Billion, Market_Value_in_Billion; employment: Company_ID, People_ID, Year_working | Show the names of companies and the number of employees they have", "sql": "SELECT T3.Name ,  COUNT(*) FROM employment AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID JOIN company AS T3 ON T1.Company_ID  =  T3.Company_ID GROUP BY T3.Name", "example": {"db_id": "company_employee", "query": "SELECT T3.Name ,  COUNT(*) FROM employment AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID JOIN company AS T3 ON T1.Company_ID  =  T3.Company_ID GROUP BY T3.Name", "query_toks": ["SELECT", "T3.Name", ",", "COUNT", "(", "*", ")", "FROM", "employment", "AS", "T1", "JOIN", "people", "AS", "T2", "ON", "T1.People_ID", "=", "T2.People_ID", "JOIN", "company", "AS", "T3", "ON", "T1.Company_ID", "=", "T3.Company_ID", "GROUP", "BY", "T3.Name"], "query_toks_no_value": ["select", "t3", ".", "name", ",", "count", "(", "*", ")", "from", "employment", "as", "t1", "join", "people", "as", "t2", "on", "t1", ".", "people_id", "=", "t2", ".", "people_id", "join", "company", "as", "t3", "on", "t1", ".", "company_id", "=", "t3", ".", "company_id", "group", "by", "t3", ".", "name"], "question": "Show the names of companies and the number of employees they have", "question_toks": ["Show", "the", "names", "of", "companies", "and", "the", "number", "of", "employees", "they", "have"], "guid": 887}}
{"text": "buildings: id, name, City, Height, Stories, Status; Companies: id, name, Headquarters, Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value_billion; Office_locations: building_id, company_id, move_in_year | Find the maximum and minimum sales of the companies that are not in the \"Banking\" industry.", "sql": "SELECT max(Sales_billion) ,  min(Sales_billion) FROM Companies WHERE Industry != \"Banking\"", "example": {"db_id": "company_office", "query": "SELECT max(Sales_billion) ,  min(Sales_billion) FROM Companies WHERE Industry != \"Banking\"", "query_toks": ["SELECT", "max", "(", "Sales_billion", ")", ",", "min", "(", "Sales_billion", ")", "FROM", "Companies", "WHERE", "Industry", "!", "=", "``", "Banking", "''"], "query_toks_no_value": ["select", "max", "(", "sales_billion", ")", ",", "min", "(", "sales_billion", ")", "from", "companies", "where", "industry", "!", "=", "value"], "question": "Find the maximum and minimum sales of the companies that are not in the \"Banking\" industry.", "question_toks": ["Find", "the", "maximum", "and", "minimum", "sales", "of", "the", "companies", "that", "are", "not", "in", "the", "``", "Banking", "''", "industry", "."], "guid": 888}}
{"text": "chip_model: Model_name, Launch_year, RAM_MiB, ROM_MiB, Slots, WiFi, Bluetooth; screen_mode: Graphics_mode, Char_cells, Pixels, Hardware_colours, used_kb, map, Type; phone: Company_name, Hardware_Model_name, Accreditation_type, Accreditation_level, Date, chip_model, screen_mode | List the hardware model name for the phones that were produced by \"Nokia Corporation\" or whose screen mode type is \"Graphics.\"", "sql": "SELECT DISTINCT T2.Hardware_Model_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.Type  =  \"Graphics\" OR t2.Company_name  =  \"Nokia Corporation\"", "example": {"db_id": "phone_1", "query": "SELECT DISTINCT T2.Hardware_Model_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.Type  =  \"Graphics\" OR t2.Company_name  =  \"Nokia Corporation\"", "query_toks": ["SELECT", "DISTINCT", "T2.Hardware_Model_name", "FROM", "screen_mode", "AS", "T1", "JOIN", "phone", "AS", "T2", "ON", "T1.Graphics_mode", "=", "T2.screen_mode", "WHERE", "T1.Type", "=", "``", "Graphics", "''", "OR", "t2.Company_name", "=", "``", "Nokia", "Corporation", "''"], "query_toks_no_value": ["select", "distinct", "t2", ".", "hardware_model_name", "from", "screen_mode", "as", "t1", "join", "phone", "as", "t2", "on", "t1", ".", "graphics_mode", "=", "t2", ".", "screen_mode", "where", "t1", ".", "type", "=", "value", "or", "t2", ".", "company_name", "=", "value"], "question": "List the hardware model name for the phones that were produced by \"Nokia Corporation\" or whose screen mode type is \"Graphics.\"", "question_toks": ["List", "the", "hardware", "model", "name", "for", "the", "phones", "that", "were", "produced", "by", "``", "Nokia", "Corporation", "''", "or", "whose", "screen", "mode", "type", "is", "``", "Graphics", ".", "''"], "guid": 889}}
{"text": "member: Member_ID, Name, Nationality, Role; performance: Performance_ID, Date, Host, Location, Attendance; member_attendance: Member_ID, Performance_ID, Num_of_Pieces | What are the dates and locations of performances?", "sql": "SELECT Date ,  LOCATION FROM performance", "example": {"db_id": "performance_attendance", "query": "SELECT Date ,  LOCATION FROM performance", "query_toks": ["SELECT", "Date", ",", "LOCATION", "FROM", "performance"], "query_toks_no_value": ["select", "date", ",", "location", "from", "performance"], "question": "What are the dates and locations of performances?", "question_toks": ["What", "are", "the", "dates", "and", "locations", "of", "performances", "?"], "guid": 890}}
{"text": "manufacturer: Manufacturer_ID, Open_Year, Name, Num_of_Factories, Num_of_Shops; furniture: Furniture_ID, Name, Num_of_Component, Market_Rate; furniture_manufacte: Manufacturer_ID, Furniture_ID, Price_in_Dollar | Find the id and number of shops for the company that produces the most expensive furniture.", "sql": "SELECT t1.manufacturer_id ,  t1.num_of_shops FROM manufacturer AS t1 JOIN furniture_manufacte AS t2 ON t1.manufacturer_id  =  t2.manufacturer_id ORDER BY t2.Price_in_Dollar DESC LIMIT 1", "example": {"db_id": "manufacturer", "query": "SELECT t1.manufacturer_id ,  t1.num_of_shops FROM manufacturer AS t1 JOIN furniture_manufacte AS t2 ON t1.manufacturer_id  =  t2.manufacturer_id ORDER BY t2.Price_in_Dollar DESC LIMIT 1", "query_toks": ["SELECT", "t1.manufacturer_id", ",", "t1.num_of_shops", "FROM", "manufacturer", "AS", "t1", "JOIN", "furniture_manufacte", "AS", "t2", "ON", "t1.manufacturer_id", "=", "t2.manufacturer_id", "ORDER", "BY", "t2.Price_in_Dollar", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "manufacturer_id", ",", "t1", ".", "num_of_shops", "from", "manufacturer", "as", "t1", "join", "furniture_manufacte", "as", "t2", "on", "t1", ".", "manufacturer_id", "=", "t2", ".", "manufacturer_id", "order", "by", "t2", ".", "price_in_dollar", "desc", "limit", "value"], "question": "Find the id and number of shops for the company that produces the most expensive furniture.", "question_toks": ["Find", "the", "id", "and", "number", "of", "shops", "for", "the", "company", "that", "produces", "the", "most", "expensive", "furniture", "."], "guid": 891}}
{"text": "regions: REGION_ID, REGION_NAME; countries: COUNTRY_ID, COUNTRY_NAME, REGION_ID; departments: DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID; jobs: JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY; employees: EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID; job_history: EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID; locations: LOCATION_ID, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_ID | What are the employee ids for each employee and final dates of employment at their last job?", "sql": "SELECT employee_id ,  MAX(end_date) FROM job_history GROUP BY employee_id", "example": {"db_id": "hr_1", "query": "SELECT employee_id ,  MAX(end_date) FROM job_history GROUP BY employee_id", "query_toks": ["SELECT", "employee_id", ",", "MAX", "(", "end_date", ")", "FROM", "job_history", "GROUP", "BY", "employee_id"], "query_toks_no_value": ["select", "employee_id", ",", "max", "(", "end_date", ")", "from", "job_history", "group", "by", "employee_id"], "question": "What are the employee ids for each employee and final dates of employment at their last job?", "question_toks": ["What", "are", "the", "employee", "ids", "for", "each", "employee", "and", "final", "dates", "of", "employment", "at", "their", "last", "job", "?"], "guid": 892}}
{"text": "regions: REGION_ID, REGION_NAME; countries: COUNTRY_ID, COUNTRY_NAME, REGION_ID; departments: DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID; jobs: JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY; employees: EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID; job_history: EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID; locations: LOCATION_ID, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_ID | display the employee number and name( first name and last name ) for all employees who work in a department with any employee whose name contains a \u2019T\u2019.", "sql": "SELECT employee_id ,  first_name ,  last_name FROM employees WHERE department_id IN ( SELECT department_id FROM employees WHERE first_name LIKE '%T%' )", "example": {"db_id": "hr_1", "query": "SELECT employee_id ,  first_name ,  last_name FROM employees WHERE department_id IN ( SELECT department_id FROM employees WHERE first_name LIKE '%T%' )", "query_toks": ["SELECT", "employee_id", ",", "first_name", ",", "last_name", "FROM", "employees", "WHERE", "department_id", "IN", "(", "SELECT", "department_id", "FROM", "employees", "WHERE", "first_name", "LIKE", "'", "%", "T", "%", "'", ")"], "query_toks_no_value": ["select", "employee_id", ",", "first_name", ",", "last_name", "from", "employees", "where", "department_id", "in", "(", "select", "department_id", "from", "employees", "where", "first_name", "like", "value", ")"], "question": "display the employee number and name( first name and last name ) for all employees who work in a department with any employee whose name contains a \u2019T\u2019.", "question_toks": ["display", "the", "employee", "number", "and", "name", "(", "first", "name", "and", "last", "name", ")", "for", "all", "employees", "who", "work", "in", "a", "department", "with", "any", "employee", "whose", "name", "contains", "a", "\u2019T\u2019", "."], "guid": 893}}
{"text": "regions: REGION_ID, REGION_NAME; countries: COUNTRY_ID, COUNTRY_NAME, REGION_ID; departments: DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID; jobs: JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY; employees: EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID; job_history: EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID; locations: LOCATION_ID, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_ID | Find the job ID for those jobs which average salary is above 8000.", "sql": "SELECT job_id FROM employees GROUP BY job_id HAVING AVG(salary) > 8000", "example": {"db_id": "hr_1", "query": "SELECT job_id FROM employees GROUP BY job_id HAVING AVG(salary) > 8000", "query_toks": ["SELECT", "job_id", "FROM", "employees", "GROUP", "BY", "job_id", "HAVING", "AVG", "(", "salary", ")", ">", "8000"], "query_toks_no_value": ["select", "job_id", "from", "employees", "group", "by", "job_id", "having", "avg", "(", "salary", ")", ">", "value"], "question": "Find the job ID for those jobs which average salary is above 8000.", "question_toks": ["Find", "the", "job", "ID", "for", "those", "jobs", "which", "average", "salary", "is", "above", "8000", "."], "guid": 894}}
{"text": "continents: ContId, Continent; countries: CountryId, CountryName, Continent; car_makers: Id, Maker, FullName, Country; model_list: ModelId, Maker, Model; car_names: MakeId, Model, Make; cars_data: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year | What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars?", "sql": "SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3;", "example": {"db_id": "car_1", "query": "SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3;", "query_toks": ["SELECT", "T1.Id", ",", "T1.Maker", "FROM", "CAR_MAKERS", "AS", "T1", "JOIN", "MODEL_LIST", "AS", "T2", "ON", "T1.Id", "=", "T2.Maker", "GROUP", "BY", "T1.Id", "HAVING", "count", "(", "*", ")", ">", "=", "2", "INTERSECT", "SELECT", "T1.Id", ",", "T1.Maker", "FROM", "CAR_MAKERS", "AS", "T1", "JOIN", "MODEL_LIST", "AS", "T2", "ON", "T1.Id", "=", "T2.Maker", "JOIN", "CAR_NAMES", "AS", "T3", "ON", "T2.model", "=", "T3.model", "GROUP", "BY", "T1.Id", "HAVING", "count", "(", "*", ")", ">", "3", ";"], "query_toks_no_value": ["select", "t1", ".", "id", ",", "t1", ".", "maker", "from", "car_makers", "as", "t1", "join", "model_list", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "maker", "group", "by", "t1", ".", "id", "having", "count", "(", "*", ")", ">", "=", "value", "intersect", "select", "t1", ".", "id", ",", "t1", ".", "maker", "from", "car_makers", "as", "t1", "join", "model_list", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "maker", "join", "car_names", "as", "t3", "on", "t2", ".", "model", "=", "t3", ".", "model", "group", "by", "t1", ".", "id", "having", "count", "(", "*", ")", ">", "value"], "question": "What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars?", "question_toks": ["What", "are", "the", "ids", "and", "makers", "of", "all", "car", "makers", "that", "produce", "at", "least", "2", "models", "and", "make", "more", "than", "3", "cars", "?"], "guid": 895}}
{"text": "continents: ContId, Continent; countries: CountryId, CountryName, Continent; car_makers: Id, Maker, FullName, Country; model_list: ModelId, Maker, Model; car_names: MakeId, Model, Make; cars_data: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year | How much does the car accelerate that makes amc hornet sportabout (sw)?", "sql": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';", "example": {"db_id": "car_1", "query": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';", "query_toks": ["SELECT", "T1.Accelerate", "FROM", "CARS_DATA", "AS", "T1", "JOIN", "CAR_NAMES", "AS", "T2", "ON", "T1.Id", "=", "T2.MakeId", "WHERE", "T2.Make", "=", "'amc", "hornet", "sportabout", "(", "sw", ")", "'", ";"], "query_toks_no_value": ["select", "t1", ".", "accelerate", "from", "cars_data", "as", "t1", "join", "car_names", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "makeid", "where", "t2", ".", "make", "=", "value"], "question": "How much does the car accelerate that makes amc hornet sportabout (sw)?", "question_toks": ["How", "much", "does", "the", "car", "accelerate", "that", "makes", "amc", "hornet", "sportabout", "(", "sw", ")", "?"], "guid": 896}}
{"text": "Manufacturers: Code, Name, Headquarter, Founder, Revenue; Products: Code, Name, Price, Manufacturer | Find the name, headquarter and founder of the manufacturer that has the highest revenue.", "sql": "SELECT name ,  headquarter ,  founder FROM manufacturers ORDER BY revenue DESC LIMIT 1", "example": {"db_id": "manufactory_1", "query": "SELECT name ,  headquarter ,  founder FROM manufacturers ORDER BY revenue DESC LIMIT 1", "query_toks": ["SELECT", "name", ",", "headquarter", ",", "founder", "FROM", "manufacturers", "ORDER", "BY", "revenue", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "name", ",", "headquarter", ",", "founder", "from", "manufacturers", "order", "by", "revenue", "desc", "limit", "value"], "question": "Find the name, headquarter and founder of the manufacturer that has the highest revenue.", "question_toks": ["Find", "the", "name", ",", "headquarter", "and", "founder", "of", "the", "manufacturer", "that", "has", "the", "highest", "revenue", "."], "guid": 897}}
{"text": "Manufacturers: Code, Name, Headquarter, Founder, Revenue; Products: Code, Name, Price, Manufacturer | What are the names of companies that do not make DVD drives?", "sql": "SELECT name FROM manufacturers EXCEPT SELECT T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T1.name  =  'DVD drive'", "example": {"db_id": "manufactory_1", "query": "SELECT name FROM manufacturers EXCEPT SELECT T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T1.name  =  'DVD drive'", "query_toks": ["SELECT", "name", "FROM", "manufacturers", "EXCEPT", "SELECT", "T2.name", "FROM", "products", "AS", "T1", "JOIN", "manufacturers", "AS", "T2", "ON", "T1.Manufacturer", "=", "T2.code", "WHERE", "T1.name", "=", "'DVD", "drive", "'"], "query_toks_no_value": ["select", "name", "from", "manufacturers", "except", "select", "t2", ".", "name", "from", "products", "as", "t1", "join", "manufacturers", "as", "t2", "on", "t1", ".", "manufacturer", "=", "t2", ".", "code", "where", "t1", ".", "name", "=", "value"], "question": "What are the names of companies that do not make DVD drives?", "question_toks": ["What", "are", "the", "names", "of", "companies", "that", "do", "not", "make", "DVD", "drives", "?"], "guid": 898}}
{"text": "Manufacturers: Code, Name, Headquarter, Founder, Revenue; Products: Code, Name, Price, Manufacturer | What are the average, maximum and total revenues of all companies?", "sql": "SELECT avg(revenue) ,  max(revenue) ,  sum(revenue) FROM manufacturers", "example": {"db_id": "manufactory_1", "query": "SELECT avg(revenue) ,  max(revenue) ,  sum(revenue) FROM manufacturers", "query_toks": ["SELECT", "avg", "(", "revenue", ")", ",", "max", "(", "revenue", ")", ",", "sum", "(", "revenue", ")", "FROM", "manufacturers"], "query_toks_no_value": ["select", "avg", "(", "revenue", ")", ",", "max", "(", "revenue", ")", ",", "sum", "(", "revenue", ")", "from", "manufacturers"], "question": "What are the average, maximum and total revenues of all companies?", "question_toks": ["What", "are", "the", "average", ",", "maximum", "and", "total", "revenues", "of", "all", "companies", "?"], "guid": 899}}
{"text": "regions: REGION_ID, REGION_NAME; countries: COUNTRY_ID, COUNTRY_NAME, REGION_ID; departments: DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID; jobs: JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY; employees: EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID; job_history: EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID; locations: LOCATION_ID, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_ID | return the smallest salary for every departments.", "sql": "SELECT MIN(salary) ,  department_id FROM employees GROUP BY department_id", "example": {"db_id": "hr_1", "query": "SELECT MIN(salary) ,  department_id FROM employees GROUP BY department_id", "query_toks": ["SELECT", "MIN", "(", "salary", ")", ",", "department_id", "FROM", "employees", "GROUP", "BY", "department_id"], "query_toks_no_value": ["select", "min", "(", "salary", ")", ",", "department_id", "from", "employees", "group", "by", "department_id"], "question": "return the smallest salary for every departments.", "question_toks": ["return", "the", "smallest", "salary", "for", "every", "departments", "."], "guid": 900}}
{"text": "chip_model: Model_name, Launch_year, RAM_MiB, ROM_MiB, Slots, WiFi, Bluetooth; screen_mode: Graphics_mode, Char_cells, Pixels, Hardware_colours, used_kb, map, Type; phone: Company_name, Hardware_Model_name, Accreditation_type, Accreditation_level, Date, chip_model, screen_mode | What are the chip model and screen mode of the phone with hardware model name \"LG-P760\"?", "sql": "SELECT chip_model ,  screen_mode FROM phone WHERE Hardware_Model_name = \"LG-P760\";", "example": {"db_id": "phone_1", "query": "SELECT chip_model ,  screen_mode FROM phone WHERE Hardware_Model_name = \"LG-P760\";", "query_toks": ["SELECT", "chip_model", ",", "screen_mode", "FROM", "phone", "WHERE", "Hardware_Model_name", "=", "``", "LG-P760", "''", ";"], "query_toks_no_value": ["select", "chip_model", ",", "screen_mode", "from", "phone", "where", "hardware_model_name", "=", "value"], "question": "What are the chip model and screen mode of the phone with hardware model name \"LG-P760\"?", "question_toks": ["What", "are", "the", "chip", "model", "and", "screen", "mode", "of", "the", "phone", "with", "hardware", "model", "name", "``", "LG-P760", "''", "?"], "guid": 901}}
{"text": "manufacturer: Manufacturer_ID, Open_Year, Name, Num_of_Factories, Num_of_Shops; furniture: Furniture_ID, Name, Num_of_Component, Market_Rate; furniture_manufacte: Manufacturer_ID, Furniture_ID, Price_in_Dollar | Which manufacturer has the most number of shops? List its name and year of opening.", "sql": "SELECT open_year ,  name FROM manufacturer ORDER BY num_of_shops DESC LIMIT 1", "example": {"db_id": "manufacturer", "query": "SELECT open_year ,  name FROM manufacturer ORDER BY num_of_shops DESC LIMIT 1", "query_toks": ["SELECT", "open_year", ",", "name", "FROM", "manufacturer", "ORDER", "BY", "num_of_shops", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "open_year", ",", "name", "from", "manufacturer", "order", "by", "num_of_shops", "desc", "limit", "value"], "question": "Which manufacturer has the most number of shops? List its name and year of opening.", "question_toks": ["Which", "manufacturer", "has", "the", "most", "number", "of", "shops", "?", "List", "its", "name", "and", "year", "of", "opening", "."], "guid": 902}}
{"text": "continents: ContId, Continent; countries: CountryId, CountryName, Continent; car_makers: Id, Maker, FullName, Country; model_list: ModelId, Maker, Model; car_names: MakeId, Model, Make; cars_data: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year | Which model has the most version(make) of cars?", "sql": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;", "example": {"db_id": "car_1", "query": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;", "query_toks": ["SELECT", "Model", "FROM", "CAR_NAMES", "GROUP", "BY", "Model", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1", ";"], "query_toks_no_value": ["select", "model", "from", "car_names", "group", "by", "model", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which model has the most version(make) of cars?", "question_toks": ["Which", "model", "has", "the", "most", "version", "(", "make", ")", "of", "cars", "?"], "guid": 903}}
{"text": "regions: REGION_ID, REGION_NAME; countries: COUNTRY_ID, COUNTRY_NAME, REGION_ID; departments: DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID; jobs: JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY; employees: EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID; job_history: EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID; locations: LOCATION_ID, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_ID | What is all the information about employees with D or S in their first name, ordered by salary descending?", "sql": "SELECT * FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY salary DESC", "example": {"db_id": "hr_1", "query": "SELECT * FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY salary DESC", "query_toks": ["SELECT", "*", "FROM", "employees", "WHERE", "first_name", "LIKE", "'", "%", "D", "%", "'", "OR", "first_name", "LIKE", "'", "%", "S", "%", "'", "ORDER", "BY", "salary", "DESC"], "query_toks_no_value": ["select", "*", "from", "employees", "where", "first_name", "like", "value", "or", "first_name", "like", "value", "order", "by", "salary", "desc"], "question": "What is all the information about employees with D or S in their first name, ordered by salary descending?", "question_toks": ["What", "is", "all", "the", "information", "about", "employees", "with", "D", "or", "S", "in", "their", "first", "name", ",", "ordered", "by", "salary", "descending", "?"], "guid": 904}}
{"text": "member: Member_ID, Name, Nationality, Role; performance: Performance_ID, Date, Host, Location, Attendance; member_attendance: Member_ID, Performance_ID, Num_of_Pieces | Show the attendances of the performances at location \"TD Garden\" or \"Bell Centre\"", "sql": "SELECT Attendance FROM performance WHERE LOCATION  =  \"TD Garden\" OR LOCATION  =  \"Bell Centre\"", "example": {"db_id": "performance_attendance", "query": "SELECT Attendance FROM performance WHERE LOCATION  =  \"TD Garden\" OR LOCATION  =  \"Bell Centre\"", "query_toks": ["SELECT", "Attendance", "FROM", "performance", "WHERE", "LOCATION", "=", "``", "TD", "Garden", "''", "OR", "LOCATION", "=", "``", "Bell", "Centre", "''"], "query_toks_no_value": ["select", "attendance", "from", "performance", "where", "location", "=", "value", "or", "location", "=", "value"], "question": "Show the attendances of the performances at location \"TD Garden\" or \"Bell Centre\"", "question_toks": ["Show", "the", "attendances", "of", "the", "performances", "at", "location", "``", "TD", "Garden", "''", "or", "``", "Bell", "Centre", "''"], "guid": 905}}
{"text": "Manufacturers: Code, Name, Headquarter, Founder, Revenue; Products: Code, Name, Price, Manufacturer | What are the names of manufacturers with revenue greater than the average of all revenues?", "sql": "SELECT name FROM manufacturers WHERE revenue  >  (SELECT avg(revenue) FROM manufacturers)", "example": {"db_id": "manufactory_1", "query": "SELECT name FROM manufacturers WHERE revenue  >  (SELECT avg(revenue) FROM manufacturers)", "query_toks": ["SELECT", "name", "FROM", "manufacturers", "WHERE", "revenue", ">", "(", "SELECT", "avg", "(", "revenue", ")", "FROM", "manufacturers", ")"], "query_toks_no_value": ["select", "name", "from", "manufacturers", "where", "revenue", ">", "(", "select", "avg", "(", "revenue", ")", "from", "manufacturers", ")"], "question": "What are the names of manufacturers with revenue greater than the average of all revenues?", "question_toks": ["What", "are", "the", "names", "of", "manufacturers", "with", "revenue", "greater", "than", "the", "average", "of", "all", "revenues", "?"], "guid": 906}}
{"text": "regions: REGION_ID, REGION_NAME; countries: COUNTRY_ID, COUNTRY_NAME, REGION_ID; departments: DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID; jobs: JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY; employees: EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID; job_history: EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID; locations: LOCATION_ID, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_ID | Display the first name and department name for each employee.", "sql": "SELECT T1.first_name ,  T2.department_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id", "example": {"db_id": "hr_1", "query": "SELECT T1.first_name ,  T2.department_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id", "query_toks": ["SELECT", "T1.first_name", ",", "T2.department_name", "FROM", "employees", "AS", "T1", "JOIN", "departments", "AS", "T2", "ON", "T1.department_id", "=", "T2.department_id"], "query_toks_no_value": ["select", "t1", ".", "first_name", ",", "t2", ".", "department_name", "from", "employees", "as", "t1", "join", "departments", "as", "t2", "on", "t1", ".", "department_id", "=", "t2", ".", "department_id"], "question": "Display the first name and department name for each employee.", "question_toks": ["Display", "the", "first", "name", "and", "department", "name", "for", "each", "employee", "."], "guid": 907}}
{"text": "regions: REGION_ID, REGION_NAME; countries: COUNTRY_ID, COUNTRY_NAME, REGION_ID; departments: DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID; jobs: JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY; employees: EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID; job_history: EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID; locations: LOCATION_ID, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_ID | What are the names of departments that have at least one employee.", "sql": "SELECT DISTINCT T2.department_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id", "example": {"db_id": "hr_1", "query": "SELECT DISTINCT T2.department_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id", "query_toks": ["SELECT", "DISTINCT", "T2.department_name", "FROM", "employees", "AS", "T1", "JOIN", "departments", "AS", "T2", "ON", "T1.department_id", "=", "T2.department_id"], "query_toks_no_value": ["select", "distinct", "t2", ".", "department_name", "from", "employees", "as", "t1", "join", "departments", "as", "t2", "on", "t1", ".", "department_id", "=", "t2", ".", "department_id"], "question": "What are the names of departments that have at least one employee.", "question_toks": ["What", "are", "the", "names", "of", "departments", "that", "have", "at", "least", "one", "employee", "."], "guid": 908}}
{"text": "regions: REGION_ID, REGION_NAME; countries: COUNTRY_ID, COUNTRY_NAME, REGION_ID; departments: DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID; jobs: JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY; employees: EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID; job_history: EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID; locations: LOCATION_ID, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_ID | What are all the employee ids and the names of the countries in which they work?", "sql": "SELECT T1.employee_id ,  T4.country_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id JOIN countries AS T4 ON T3.country_id  =  T4.country_id", "example": {"db_id": "hr_1", "query": "SELECT T1.employee_id ,  T4.country_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id JOIN countries AS T4 ON T3.country_id  =  T4.country_id", "query_toks": ["SELECT", "T1.employee_id", ",", "T4.country_name", "FROM", "employees", "AS", "T1", "JOIN", "departments", "AS", "T2", "ON", "T1.department_id", "=", "T2.department_id", "JOIN", "locations", "AS", "T3", "ON", "T2.location_id", "=", "T3.location_id", "JOIN", "countries", "AS", "T4", "ON", "T3.country_id", "=", "T4.country_id"], "query_toks_no_value": ["select", "t1", ".", "employee_id", ",", "t4", ".", "country_name", "from", "employees", "as", "t1", "join", "departments", "as", "t2", "on", "t1", ".", "department_id", "=", "t2", ".", "department_id", "join", "locations", "as", "t3", "on", "t2", ".", "location_id", "=", "t3", ".", "location_id", "join", "countries", "as", "t4", "on", "t3", ".", "country_id", "=", "t4", ".", "country_id"], "question": "What are all the employee ids and the names of the countries in which they work?", "question_toks": ["What", "are", "all", "the", "employee", "ids", "and", "the", "names", "of", "the", "countries", "in", "which", "they", "work", "?"], "guid": 909}}
{"text": "regions: REGION_ID, REGION_NAME; countries: COUNTRY_ID, COUNTRY_NAME, REGION_ID; departments: DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID; jobs: JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY; employees: EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID; job_history: EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID; locations: LOCATION_ID, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_ID | What are the first name and department name of all employees?", "sql": "SELECT T1.first_name ,  T2.department_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id", "example": {"db_id": "hr_1", "query": "SELECT T1.first_name ,  T2.department_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id", "query_toks": ["SELECT", "T1.first_name", ",", "T2.department_name", "FROM", "employees", "AS", "T1", "JOIN", "departments", "AS", "T2", "ON", "T1.department_id", "=", "T2.department_id"], "query_toks_no_value": ["select", "t1", ".", "first_name", ",", "t2", ".", "department_name", "from", "employees", "as", "t1", "join", "departments", "as", "t2", "on", "t1", ".", "department_id", "=", "t2", ".", "department_id"], "question": "What are the first name and department name of all employees?", "question_toks": ["What", "are", "the", "first", "name", "and", "department", "name", "of", "all", "employees", "?"], "guid": 910}}
{"text": "Manufacturers: Code, Name, Headquarter, Founder, Revenue; Products: Code, Name, Price, Manufacturer | Select all the data from the products and each product's manufacturer.", "sql": "SELECT * FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code", "example": {"db_id": "manufactory_1", "query": "SELECT * FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code", "query_toks": ["SELECT", "*", "FROM", "products", "AS", "T1", "JOIN", "Manufacturers", "AS", "T2", "ON", "T1.manufacturer", "=", "T2.code"], "query_toks_no_value": ["select", "*", "from", "products", "as", "t1", "join", "manufacturers", "as", "t2", "on", "t1", ".", "manufacturer", "=", "t2", ".", "code"], "question": "Select all the data from the products and each product's manufacturer.", "question_toks": ["Select", "all", "the", "data", "from", "the", "products", "and", "each", "product", "'s", "manufacturer", "."], "guid": 911}}
{"text": "buildings: id, name, City, Height, Stories, Status; Companies: id, name, Headquarters, Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value_billion; Office_locations: building_id, company_id, move_in_year | List the name of a building along with the name of a company whose office is in the building.", "sql": "SELECT T3.name ,  T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id  =  T2.id JOIN Companies AS T3 ON T1.company_id  =  T3.id", "example": {"db_id": "company_office", "query": "SELECT T3.name ,  T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id  =  T2.id JOIN Companies AS T3 ON T1.company_id  =  T3.id", "query_toks": ["SELECT", "T3.name", ",", "T2.name", "FROM", "Office_locations", "AS", "T1", "JOIN", "buildings", "AS", "T2", "ON", "T1.building_id", "=", "T2.id", "JOIN", "Companies", "AS", "T3", "ON", "T1.company_id", "=", "T3.id"], "query_toks_no_value": ["select", "t3", ".", "name", ",", "t2", ".", "name", "from", "office_locations", "as", "t1", "join", "buildings", "as", "t2", "on", "t1", ".", "building_id", "=", "t2", ".", "id", "join", "companies", "as", "t3", "on", "t1", ".", "company_id", "=", "t3", ".", "id"], "question": "List the name of a building along with the name of a company whose office is in the building.", "question_toks": ["List", "the", "name", "of", "a", "building", "along", "with", "the", "name", "of", "a", "company", "whose", "office", "is", "in", "the", "building", "."], "guid": 912}}
{"text": "company: Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value; gas_station: Station_ID, Open_Year, Location, Manager_Name, Vice_Manager_Name, Representative_Name; station_company: Station_ID, Company_ID, Rank_of_the_Year | What are the headquarters with at least two companies in the banking industry?", "sql": "SELECT headquarters FROM company WHERE main_industry  =  'Banking' GROUP BY headquarters HAVING count(*)  >=  2", "example": {"db_id": "gas_company", "query": "SELECT headquarters FROM company WHERE main_industry  =  'Banking' GROUP BY headquarters HAVING count(*)  >=  2", "query_toks": ["SELECT", "headquarters", "FROM", "company", "WHERE", "main_industry", "=", "'Banking", "'", "GROUP", "BY", "headquarters", "HAVING", "count", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "headquarters", "from", "company", "where", "main_industry", "=", "value", "group", "by", "headquarters", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "What are the headquarters with at least two companies in the banking industry?", "question_toks": ["What", "are", "the", "headquarters", "with", "at", "least", "two", "companies", "in", "the", "banking", "industry", "?"], "guid": 913}}
{"text": "buildings: id, name, City, Height, Stories, Status; Companies: id, name, Headquarters, Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value_billion; Office_locations: building_id, company_id, move_in_year | List the name and assets of each company in ascending order of company name.", "sql": "SELECT name ,  Assets_billion FROM Companies ORDER BY name ASC", "example": {"db_id": "company_office", "query": "SELECT name ,  Assets_billion FROM Companies ORDER BY name ASC", "query_toks": ["SELECT", "name", ",", "Assets_billion", "FROM", "Companies", "ORDER", "BY", "name", "ASC"], "query_toks_no_value": ["select", "name", ",", "assets_billion", "from", "companies", "order", "by", "name", "asc"], "question": "List the name and assets of each company in ascending order of company name.", "question_toks": ["List", "the", "name", "and", "assets", "of", "each", "company", "in", "ascending", "order", "of", "company", "name", "."], "guid": 914}}
{"text": "phone: Name, Phone_ID, Memory_in_G, Carrier, Price; market: Market_ID, District, Num_of_employees, Num_of_shops, Ranking; phone_market: Market_ID, Phone_ID, Num_of_stock | Show the names of phones and the districts of markets they are on, in ascending order of the ranking of the market.", "sql": "SELECT T3.Name ,  T2.District FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID  =  T3.Phone_ID ORDER BY T2.Ranking", "example": {"db_id": "phone_market", "query": "SELECT T3.Name ,  T2.District FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID  =  T3.Phone_ID ORDER BY T2.Ranking", "query_toks": ["SELECT", "T3.Name", ",", "T2.District", "FROM", "phone_market", "AS", "T1", "JOIN", "market", "AS", "T2", "ON", "T1.Market_ID", "=", "T2.Market_ID", "JOIN", "phone", "AS", "T3", "ON", "T1.Phone_ID", "=", "T3.Phone_ID", "ORDER", "BY", "T2.Ranking"], "query_toks_no_value": ["select", "t3", ".", "name", ",", "t2", ".", "district", "from", "phone_market", "as", "t1", "join", "market", "as", "t2", "on", "t1", ".", "market_id", "=", "t2", ".", "market_id", "join", "phone", "as", "t3", "on", "t1", ".", "phone_id", "=", "t3", ".", "phone_id", "order", "by", "t2", ".", "ranking"], "question": "Show the names of phones and the districts of markets they are on, in ascending order of the ranking of the market.", "question_toks": ["Show", "the", "names", "of", "phones", "and", "the", "districts", "of", "markets", "they", "are", "on", ",", "in", "ascending", "order", "of", "the", "ranking", "of", "the", "market", "."], "guid": 915}}
{"text": "Manufacturers: Code, Name, Headquarter, Founder, Revenue; Products: Code, Name, Price, Manufacturer | Select the name of the products with a price less than or equal to $200.", "sql": "SELECT name FROM products WHERE price  <=  200", "example": {"db_id": "manufactory_1", "query": "SELECT name FROM products WHERE price  <=  200", "query_toks": ["SELECT", "name", "FROM", "products", "WHERE", "price", "<", "=", "200"], "query_toks_no_value": ["select", "name", "from", "products", "where", "price", "<", "=", "value"], "question": "Select the name of the products with a price less than or equal to $200.", "question_toks": ["Select", "the", "name", "of", "the", "products", "with", "a", "price", "less", "than", "or", "equal", "to", "$", "200", "."], "guid": 916}}
{"text": "regions: REGION_ID, REGION_NAME; countries: COUNTRY_ID, COUNTRY_NAME, REGION_ID; departments: DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID; jobs: JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY; employees: EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID; job_history: EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID; locations: LOCATION_ID, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_ID | display the employee ID and job name for all those jobs in department 80.", "sql": "SELECT T1.employee_id ,  T2.job_title FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id  =  T2.job_id WHERE T1.department_id = 80", "example": {"db_id": "hr_1", "query": "SELECT T1.employee_id ,  T2.job_title FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id  =  T2.job_id WHERE T1.department_id = 80", "query_toks": ["SELECT", "T1.employee_id", ",", "T2.job_title", "FROM", "employees", "AS", "T1", "JOIN", "jobs", "AS", "T2", "ON", "T1.job_id", "=", "T2.job_id", "WHERE", "T1.department_id", "=", "80"], "query_toks_no_value": ["select", "t1", ".", "employee_id", ",", "t2", ".", "job_title", "from", "employees", "as", "t1", "join", "jobs", "as", "t2", "on", "t1", ".", "job_id", "=", "t2", ".", "job_id", "where", "t1", ".", "department_id", "=", "value"], "question": "display the employee ID and job name for all those jobs in department 80.", "question_toks": ["display", "the", "employee", "ID", "and", "job", "name", "for", "all", "those", "jobs", "in", "department", "80", "."], "guid": 917}}
{"text": "employee: Employee_ID, Name, Age, City; shop: Shop_ID, Name, Location, District, Number_products, Manager_name; hiring: Shop_ID, Employee_ID, Start_from, Is_full_time; evaluation: Employee_ID, Year_awarded, Bonus | Which employee received the biggest bonus? Give me the employee name.", "sql": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1", "example": {"db_id": "employee_hire_evaluation", "query": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1", "query_toks": ["SELECT", "t1.name", "FROM", "employee", "AS", "t1", "JOIN", "evaluation", "AS", "t2", "ON", "t1.Employee_ID", "=", "t2.Employee_ID", "ORDER", "BY", "t2.bonus", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "employee", "as", "t1", "join", "evaluation", "as", "t2", "on", "t1", ".", "employee_id", "=", "t2", ".", "employee_id", "order", "by", "t2", ".", "bonus", "desc", "limit", "value"], "question": "Which employee received the biggest bonus? Give me the employee name.", "question_toks": ["Which", "employee", "received", "the", "biggest", "bonus", "?", "Give", "me", "the", "employee", "name", "."], "guid": 918}}
{"text": "chip_model: Model_name, Launch_year, RAM_MiB, ROM_MiB, Slots, WiFi, Bluetooth; screen_mode: Graphics_mode, Char_cells, Pixels, Hardware_colours, used_kb, map, Type; phone: Company_name, Hardware_Model_name, Accreditation_type, Accreditation_level, Date, chip_model, screen_mode | Find the number of phones for each accreditation type.", "sql": "SELECT Accreditation_type ,  count(*) FROM phone GROUP BY Accreditation_type", "example": {"db_id": "phone_1", "query": "SELECT Accreditation_type ,  count(*) FROM phone GROUP BY Accreditation_type", "query_toks": ["SELECT", "Accreditation_type", ",", "count", "(", "*", ")", "FROM", "phone", "GROUP", "BY", "Accreditation_type"], "query_toks_no_value": ["select", "accreditation_type", ",", "count", "(", "*", ")", "from", "phone", "group", "by", "accreditation_type"], "question": "Find the number of phones for each accreditation type.", "question_toks": ["Find", "the", "number", "of", "phones", "for", "each", "accreditation", "type", "."], "guid": 919}}
{"text": "chip_model: Model_name, Launch_year, RAM_MiB, ROM_MiB, Slots, WiFi, Bluetooth; screen_mode: Graphics_mode, Char_cells, Pixels, Hardware_colours, used_kb, map, Type; phone: Company_name, Hardware_Model_name, Accreditation_type, Accreditation_level, Date, chip_model, screen_mode | List the hardware model name for the phones that have screen mode type \"Text\" or RAM size greater than 32.", "sql": "SELECT T2.Hardware_Model_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model JOIN screen_mode AS T3 ON T2.screen_mode = T3.Graphics_mode WHERE T3.Type = \"Text\" OR T1.RAM_MiB  >  32;", "example": {"db_id": "phone_1", "query": "SELECT T2.Hardware_Model_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model JOIN screen_mode AS T3 ON T2.screen_mode = T3.Graphics_mode WHERE T3.Type = \"Text\" OR T1.RAM_MiB  >  32;", "query_toks": ["SELECT", "T2.Hardware_Model_name", "FROM", "chip_model", "AS", "T1", "JOIN", "phone", "AS", "T2", "ON", "T1.Model_name", "=", "T2.chip_model", "JOIN", "screen_mode", "AS", "T3", "ON", "T2.screen_mode", "=", "T3.Graphics_mode", "WHERE", "T3.Type", "=", "``", "Text", "''", "OR", "T1.RAM_MiB", ">", "32", ";"], "query_toks_no_value": ["select", "t2", ".", "hardware_model_name", "from", "chip_model", "as", "t1", "join", "phone", "as", "t2", "on", "t1", ".", "model_name", "=", "t2", ".", "chip_model", "join", "screen_mode", "as", "t3", "on", "t2", ".", "screen_mode", "=", "t3", ".", "graphics_mode", "where", "t3", ".", "type", "=", "value", "or", "t1", ".", "ram_mib", ">", "value"], "question": "List the hardware model name for the phones that have screen mode type \"Text\" or RAM size greater than 32.", "question_toks": ["List", "the", "hardware", "model", "name", "for", "the", "phones", "that", "have", "screen", "mode", "type", "``", "Text", "''", "or", "RAM", "size", "greater", "than", "32", "."], "guid": 920}}
{"text": "continents: ContId, Continent; countries: CountryId, CountryName, Continent; car_makers: Id, Maker, FullName, Country; model_list: ModelId, Maker, Model; car_names: MakeId, Model, Make; cars_data: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year | What is the number of countries with more than 2 car makers ?", "sql": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2", "example": {"db_id": "car_1", "query": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2", "query_toks": ["select", "count", "(", "*", ")", "from", "countries", "as", "t1", "join", "car_makers", "as", "t2", "on", "t1.countryid", "=", "t2.country", "group", "by", "t1.countryid", "having", "count", "(", "*", ")", ">", "2"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "countries", "as", "t1", "join", "car_makers", "as", "t2", "on", "t1", ".", "countryid", "=", "t2", ".", "country", "group", "by", "t1", ".", "countryid", "having", "count", "(", "*", ")", ">", "value"], "question": "What is the number of countries with more than 2 car makers ?", "question_toks": ["What", "is", "the", "number", "of", "countries", "with", "more", "than", "2", "car", "makers", "?"], "guid": 921}}
{"text": "company: Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value; gas_station: Station_ID, Open_Year, Location, Manager_Name, Vice_Manager_Name, Representative_Name; station_company: Station_ID, Company_ID, Rank_of_the_Year | What are the companies and main industries of all companies that are not headquartered in the United States?", "sql": "SELECT company ,  main_industry FROM company WHERE headquarters != 'USA'", "example": {"db_id": "gas_company", "query": "SELECT company ,  main_industry FROM company WHERE headquarters != 'USA'", "query_toks": ["SELECT", "company", ",", "main_industry", "FROM", "company", "WHERE", "headquarters", "!", "=", "'USA", "'"], "query_toks_no_value": ["select", "company", ",", "main_industry", "from", "company", "where", "headquarters", "!", "=", "value"], "question": "What are the companies and main industries of all companies that are not headquartered in the United States?", "question_toks": ["What", "are", "the", "companies", "and", "main", "industries", "of", "all", "companies", "that", "are", "not", "headquartered", "in", "the", "United", "States", "?"], "guid": 922}}
{"text": "regions: REGION_ID, REGION_NAME; countries: COUNTRY_ID, COUNTRY_NAME, REGION_ID; departments: DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID; jobs: JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY; employees: EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID; job_history: EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID; locations: LOCATION_ID, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_ID | display the department id and the total salary for those departments which contains at least two employees.", "sql": "SELECT department_id ,  SUM(salary) FROM employees GROUP BY department_id HAVING count(*)  >=  2", "example": {"db_id": "hr_1", "query": "SELECT department_id ,  SUM(salary) FROM employees GROUP BY department_id HAVING count(*)  >=  2", "query_toks": ["SELECT", "department_id", ",", "SUM", "(", "salary", ")", "FROM", "employees", "GROUP", "BY", "department_id", "HAVING", "count", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "department_id", ",", "sum", "(", "salary", ")", "from", "employees", "group", "by", "department_id", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "display the department id and the total salary for those departments which contains at least two employees.", "question_toks": ["display", "the", "department", "id", "and", "the", "total", "salary", "for", "those", "departments", "which", "contains", "at", "least", "two", "employees", "."], "guid": 923}}
{"text": "continents: ContId, Continent; countries: CountryId, CountryName, Continent; car_makers: Id, Maker, FullName, Country; model_list: ModelId, Maker, Model; car_names: MakeId, Model, Make; cars_data: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year | What is the model of the car with the smallest amount of horsepower?", "sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;", "example": {"db_id": "car_1", "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;", "query_toks": ["SELECT", "T1.Model", "FROM", "CAR_NAMES", "AS", "T1", "JOIN", "CARS_DATA", "AS", "T2", "ON", "T1.MakeId", "=", "T2.Id", "ORDER", "BY", "T2.horsepower", "ASC", "LIMIT", "1", ";"], "query_toks_no_value": ["select", "t1", ".", "model", "from", "car_names", "as", "t1", "join", "cars_data", "as", "t2", "on", "t1", ".", "makeid", "=", "t2", ".", "id", "order", "by", "t2", ".", "horsepower", "asc", "limit", "value"], "question": "What is the model of the car with the smallest amount of horsepower?", "question_toks": ["What", "is", "the", "model", "of", "the", "car", "with", "the", "smallest", "amount", "of", "horsepower", "?"], "guid": 924}}
{"text": "company: Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value; gas_station: Station_ID, Open_Year, Location, Manager_Name, Vice_Manager_Name, Representative_Name; station_company: Station_ID, Company_ID, Rank_of_the_Year | How many gas station are opened between 2000 and 2005?", "sql": "SELECT count(*) FROM gas_station WHERE open_year BETWEEN 2000 AND 2005", "example": {"db_id": "gas_company", "query": "SELECT count(*) FROM gas_station WHERE open_year BETWEEN 2000 AND 2005", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "gas_station", "WHERE", "open_year", "BETWEEN", "2000", "AND", "2005"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "gas_station", "where", "open_year", "between", "value", "and", "value"], "question": "How many gas station are opened between 2000 and 2005?", "question_toks": ["How", "many", "gas", "station", "are", "opened", "between", "2000", "and", "2005", "?"], "guid": 925}}
{"text": "regions: REGION_ID, REGION_NAME; countries: COUNTRY_ID, COUNTRY_NAME, REGION_ID; departments: DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID; jobs: JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY; employees: EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID; job_history: EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID; locations: LOCATION_ID, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_ID | What are the department names, cities, and state provinces for each department?", "sql": "SELECT T1.department_name ,  T2.city ,  T2.state_province FROM departments AS T1 JOIN locations AS T2 ON T2.location_id  =  T1.location_id", "example": {"db_id": "hr_1", "query": "SELECT T1.department_name ,  T2.city ,  T2.state_province FROM departments AS T1 JOIN locations AS T2 ON T2.location_id  =  T1.location_id", "query_toks": ["SELECT", "T1.department_name", ",", "T2.city", ",", "T2.state_province", "FROM", "departments", "AS", "T1", "JOIN", "locations", "AS", "T2", "ON", "T2.location_id", "=", "T1.location_id"], "query_toks_no_value": ["select", "t1", ".", "department_name", ",", "t2", ".", "city", ",", "t2", ".", "state_province", "from", "departments", "as", "t1", "join", "locations", "as", "t2", "on", "t2", ".", "location_id", "=", "t1", ".", "location_id"], "question": "What are the department names, cities, and state provinces for each department?", "question_toks": ["What", "are", "the", "department", "names", ",", "cities", ",", "and", "state", "provinces", "for", "each", "department", "?"], "guid": 926}}
{"text": "Manufacturers: Code, Name, Headquarter, Founder, Revenue; Products: Code, Name, Price, Manufacturer | Find the name, headquarter and revenue of all manufacturers sorted by their revenue in the descending order.", "sql": "SELECT name ,  headquarter ,  revenue FROM manufacturers ORDER BY revenue DESC", "example": {"db_id": "manufactory_1", "query": "SELECT name ,  headquarter ,  revenue FROM manufacturers ORDER BY revenue DESC", "query_toks": ["SELECT", "name", ",", "headquarter", ",", "revenue", "FROM", "manufacturers", "ORDER", "BY", "revenue", "DESC"], "query_toks_no_value": ["select", "name", ",", "headquarter", ",", "revenue", "from", "manufacturers", "order", "by", "revenue", "desc"], "question": "Find the name, headquarter and revenue of all manufacturers sorted by their revenue in the descending order.", "question_toks": ["Find", "the", "name", ",", "headquarter", "and", "revenue", "of", "all", "manufacturers", "sorted", "by", "their", "revenue", "in", "the", "descending", "order", "."], "guid": 927}}
{"text": "company: Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value; gas_station: Station_ID, Open_Year, Location, Manager_Name, Vice_Manager_Name, Representative_Name; station_company: Station_ID, Company_ID, Rank_of_the_Year | Show all locations and the number of gas stations in each location ordered by the count.", "sql": "SELECT LOCATION ,  count(*) FROM gas_station GROUP BY LOCATION ORDER BY count(*)", "example": {"db_id": "gas_company", "query": "SELECT LOCATION ,  count(*) FROM gas_station GROUP BY LOCATION ORDER BY count(*)", "query_toks": ["SELECT", "LOCATION", ",", "count", "(", "*", ")", "FROM", "gas_station", "GROUP", "BY", "LOCATION", "ORDER", "BY", "count", "(", "*", ")"], "query_toks_no_value": ["select", "location", ",", "count", "(", "*", ")", "from", "gas_station", "group", "by", "location", "order", "by", "count", "(", "*", ")"], "question": "Show all locations and the number of gas stations in each location ordered by the count.", "question_toks": ["Show", "all", "locations", "and", "the", "number", "of", "gas", "stations", "in", "each", "location", "ordered", "by", "the", "count", "."], "guid": 928}}
{"text": "regions: REGION_ID, REGION_NAME; countries: COUNTRY_ID, COUNTRY_NAME, REGION_ID; departments: DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID; jobs: JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY; employees: EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID; job_history: EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID; locations: LOCATION_ID, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_ID | What are the full names and cities of employees who have the letter Z in their first names?", "sql": "SELECT T1.first_name ,  T1.last_name ,  T3.city FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id WHERE T1.first_name LIKE '%z%'", "example": {"db_id": "hr_1", "query": "SELECT T1.first_name ,  T1.last_name ,  T3.city FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id WHERE T1.first_name LIKE '%z%'", "query_toks": ["SELECT", "T1.first_name", ",", "T1.last_name", ",", "T3.city", "FROM", "employees", "AS", "T1", "JOIN", "departments", "AS", "T2", "ON", "T1.department_id", "=", "T2.department_id", "JOIN", "locations", "AS", "T3", "ON", "T2.location_id", "=", "T3.location_id", "WHERE", "T1.first_name", "LIKE", "'", "%", "z", "%", "'"], "query_toks_no_value": ["select", "t1", ".", "first_name", ",", "t1", ".", "last_name", ",", "t3", ".", "city", "from", "employees", "as", "t1", "join", "departments", "as", "t2", "on", "t1", ".", "department_id", "=", "t2", ".", "department_id", "join", "locations", "as", "t3", "on", "t2", ".", "location_id", "=", "t3", ".", "location_id", "where", "t1", ".", "first_name", "like", "value"], "question": "What are the full names and cities of employees who have the letter Z in their first names?", "question_toks": ["What", "are", "the", "full", "names", "and", "cities", "of", "employees", "who", "have", "the", "letter", "Z", "in", "their", "first", "names", "?"], "guid": 929}}
{"text": "continents: ContId, Continent; countries: CountryId, CountryName, Continent; car_makers: Id, Maker, FullName, Country; model_list: ModelId, Maker, Model; car_names: MakeId, Model, Make; cars_data: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year | Which models are lighter than 3500 but not built by the 'Ford Motor Company'?", "sql": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';", "example": {"db_id": "car_1", "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';", "query_toks": ["SELECT", "DISTINCT", "T1.model", "FROM", "MODEL_LIST", "AS", "T1", "JOIN", "CAR_NAMES", "AS", "T2", "ON", "T1.Model", "=", "T2.Model", "JOIN", "CARS_DATA", "AS", "T3", "ON", "T2.MakeId", "=", "T3.Id", "JOIN", "CAR_MAKERS", "AS", "T4", "ON", "T1.Maker", "=", "T4.Id", "WHERE", "T3.weight", "<", "3500", "AND", "T4.FullName", "!", "=", "'Ford", "Motor", "Company", "'", ";"], "query_toks_no_value": ["select", "distinct", "t1", ".", "model", "from", "model_list", "as", "t1", "join", "car_names", "as", "t2", "on", "t1", ".", "model", "=", "t2", ".", "model", "join", "cars_data", "as", "t3", "on", "t2", ".", "makeid", "=", "t3", ".", "id", "join", "car_makers", "as", "t4", "on", "t1", ".", "maker", "=", "t4", ".", "id", "where", "t3", ".", "weight", "<", "value", "and", "t4", ".", "fullname", "!", "=", "value"], "question": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?", "question_toks": ["Which", "models", "are", "lighter", "than", "3500", "but", "not", "built", "by", "the", "'Ford", "Motor", "Company", "'", "?"], "guid": 930}}
{"text": "works_on: Essn, Pno, Hours; employee: Fname, Minit, Lname, Ssn, Bdate, Address, Sex, Salary, Super_ssn, Dno; department: Dname, Dnumber, Mgr_ssn, Mgr_start_date; project: Pname, Pnumber, Plocation, Dnum; dependent: Essn, Dependent_name, Sex, Bdate, Relationship; dept_locations: Dnumber, Dlocation | Return the first names and last names of employees who earn more than 30000 in salary.", "sql": "SELECT fname ,  lname FROM employee WHERE salary  >  30000", "example": {"db_id": "company_1", "query": "SELECT fname ,  lname FROM employee WHERE salary  >  30000", "query_toks": ["SELECT", "fname", ",", "lname", "FROM", "employee", "WHERE", "salary", ">", "30000"], "query_toks_no_value": ["select", "fname", ",", "lname", "from", "employee", "where", "salary", ">", "value"], "question": "Return the first names and last names of employees who earn more than 30000 in salary.", "question_toks": ["Return", "the", "first", "names", "and", "last", "names", "of", "employees", "who", "earn", "more", "than", "30000", "in", "salary", "."], "guid": 931}}
{"text": "employee: Employee_ID, Name, Age, City; shop: Shop_ID, Name, Location, District, Number_products, Manager_name; hiring: Shop_ID, Employee_ID, Start_from, Is_full_time; evaluation: Employee_ID, Year_awarded, Bonus | Count the number of employees", "sql": "SELECT count(*) FROM employee", "example": {"db_id": "employee_hire_evaluation", "query": "SELECT count(*) FROM employee", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "employee"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "employee"], "question": "Count the number of employees", "question_toks": ["Count", "the", "number", "of", "employees"], "guid": 932}}
{"text": "Manufacturers: Code, Name, Headquarter, Founder, Revenue; Products: Code, Name, Price, Manufacturer | What are the average prices of products for each manufacturer?", "sql": "SELECT avg(T1.price) ,  T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.name", "example": {"db_id": "manufactory_1", "query": "SELECT avg(T1.price) ,  T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.name", "query_toks": ["SELECT", "avg", "(", "T1.price", ")", ",", "T2.name", "FROM", "products", "AS", "T1", "JOIN", "manufacturers", "AS", "T2", "ON", "T1.Manufacturer", "=", "T2.code", "GROUP", "BY", "T2.name"], "query_toks_no_value": ["select", "avg", "(", "t1", ".", "price", ")", ",", "t2", ".", "name", "from", "products", "as", "t1", "join", "manufacturers", "as", "t2", "on", "t1", ".", "manufacturer", "=", "t2", ".", "code", "group", "by", "t2", ".", "name"], "question": "What are the average prices of products for each manufacturer?", "question_toks": ["What", "are", "the", "average", "prices", "of", "products", "for", "each", "manufacturer", "?"], "guid": 933}}
{"text": "regions: REGION_ID, REGION_NAME; countries: COUNTRY_ID, COUNTRY_NAME, REGION_ID; departments: DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID; jobs: JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY; employees: EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID; job_history: EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID; locations: LOCATION_ID, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_ID | display the full name (first and last), hire date, salary, and department number for those employees whose first name does not containing the letter M.", "sql": "SELECT first_name ,  last_name ,  hire_date ,  salary ,  department_id FROM employees WHERE first_name NOT LIKE '%M%'", "example": {"db_id": "hr_1", "query": "SELECT first_name ,  last_name ,  hire_date ,  salary ,  department_id FROM employees WHERE first_name NOT LIKE '%M%'", "query_toks": ["SELECT", "first_name", ",", "last_name", ",", "hire_date", ",", "salary", ",", "department_id", "FROM", "employees", "WHERE", "first_name", "NOT", "LIKE", "'", "%", "M", "%", "'"], "query_toks_no_value": ["select", "first_name", ",", "last_name", ",", "hire_date", ",", "salary", ",", "department_id", "from", "employees", "where", "first_name", "not", "like", "value"], "question": "display the full name (first and last), hire date, salary, and department number for those employees whose first name does not containing the letter M.", "question_toks": ["display", "the", "full", "name", "(", "first", "and", "last", ")", ",", "hire", "date", ",", "salary", ",", "and", "department", "number", "for", "those", "employees", "whose", "first", "name", "does", "not", "containing", "the", "letter", "M", "."], "guid": 934}}
{"text": "company: Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value; gas_station: Station_ID, Open_Year, Location, Manager_Name, Vice_Manager_Name, Representative_Name; station_company: Station_ID, Company_ID, Rank_of_the_Year | What is the name of the manager with the most gas stations that opened after 2000?", "sql": "SELECT manager_name FROM gas_station WHERE open_year  >  2000 GROUP BY manager_name ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "gas_company", "query": "SELECT manager_name FROM gas_station WHERE open_year  >  2000 GROUP BY manager_name ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "manager_name", "FROM", "gas_station", "WHERE", "open_year", ">", "2000", "GROUP", "BY", "manager_name", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "manager_name", "from", "gas_station", "where", "open_year", ">", "value", "group", "by", "manager_name", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the name of the manager with the most gas stations that opened after 2000?", "question_toks": ["What", "is", "the", "name", "of", "the", "manager", "with", "the", "most", "gas", "stations", "that", "opened", "after", "2000", "?"], "guid": 935}}
{"text": "chip_model: Model_name, Launch_year, RAM_MiB, ROM_MiB, Slots, WiFi, Bluetooth; screen_mode: Graphics_mode, Char_cells, Pixels, Hardware_colours, used_kb, map, Type; phone: Company_name, Hardware_Model_name, Accreditation_type, Accreditation_level, Date, chip_model, screen_mode | How many phones belongs to each accreditation type?", "sql": "SELECT Accreditation_type ,  count(*) FROM phone GROUP BY Accreditation_type", "example": {"db_id": "phone_1", "query": "SELECT Accreditation_type ,  count(*) FROM phone GROUP BY Accreditation_type", "query_toks": ["SELECT", "Accreditation_type", ",", "count", "(", "*", ")", "FROM", "phone", "GROUP", "BY", "Accreditation_type"], "query_toks_no_value": ["select", "accreditation_type", ",", "count", "(", "*", ")", "from", "phone", "group", "by", "accreditation_type"], "question": "How many phones belongs to each accreditation type?", "question_toks": ["How", "many", "phones", "belongs", "to", "each", "accreditation", "type", "?"], "guid": 936}}
{"text": "member: Member_ID, Name, Nationality, Role; performance: Performance_ID, Date, Host, Location, Attendance; member_attendance: Member_ID, Performance_ID, Num_of_Pieces | Show the names of members and the location of the performances they attended.", "sql": "SELECT T2.Name ,  T3.Location FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID  =  T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID  =  T3.Performance_ID", "example": {"db_id": "performance_attendance", "query": "SELECT T2.Name ,  T3.Location FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID  =  T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID  =  T3.Performance_ID", "query_toks": ["SELECT", "T2.Name", ",", "T3.Location", "FROM", "member_attendance", "AS", "T1", "JOIN", "member", "AS", "T2", "ON", "T1.Member_ID", "=", "T2.Member_ID", "JOIN", "performance", "AS", "T3", "ON", "T1.Performance_ID", "=", "T3.Performance_ID"], "query_toks_no_value": ["select", "t2", ".", "name", ",", "t3", ".", "location", "from", "member_attendance", "as", "t1", "join", "member", "as", "t2", "on", "t1", ".", "member_id", "=", "t2", ".", "member_id", "join", "performance", "as", "t3", "on", "t1", ".", "performance_id", "=", "t3", ".", "performance_id"], "question": "Show the names of members and the location of the performances they attended.", "question_toks": ["Show", "the", "names", "of", "members", "and", "the", "location", "of", "the", "performances", "they", "attended", "."], "guid": 937}}
{"text": "Manufacturers: Code, Name, Headquarter, Founder, Revenue; Products: Code, Name, Price, Manufacturer | What is the average price of products with manufacturer codes equal to 2?", "sql": "SELECT avg(price) FROM products WHERE Manufacturer  =  2", "example": {"db_id": "manufactory_1", "query": "SELECT avg(price) FROM products WHERE Manufacturer  =  2", "query_toks": ["SELECT", "avg", "(", "price", ")", "FROM", "products", "WHERE", "Manufacturer", "=", "2"], "query_toks_no_value": ["select", "avg", "(", "price", ")", "from", "products", "where", "manufacturer", "=", "value"], "question": "What is the average price of products with manufacturer codes equal to 2?", "question_toks": ["What", "is", "the", "average", "price", "of", "products", "with", "manufacturer", "codes", "equal", "to", "2", "?"], "guid": 938}}
{"text": "continents: ContId, Continent; countries: CountryId, CountryName, Continent; car_makers: Id, Maker, FullName, Country; model_list: ModelId, Maker, Model; car_names: MakeId, Model, Make; cars_data: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year | What are the names of all European countries with at least 3 manufacturers?", "sql": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;", "example": {"db_id": "car_1", "query": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;", "query_toks": ["SELECT", "T1.CountryName", "FROM", "COUNTRIES", "AS", "T1", "JOIN", "CONTINENTS", "AS", "T2", "ON", "T1.Continent", "=", "T2.ContId", "JOIN", "CAR_MAKERS", "AS", "T3", "ON", "T1.CountryId", "=", "T3.Country", "WHERE", "T2.Continent", "=", "'europe", "'", "GROUP", "BY", "T1.CountryName", "HAVING", "count", "(", "*", ")", ">", "=", "3", ";"], "query_toks_no_value": ["select", "t1", ".", "countryname", "from", "countries", "as", "t1", "join", "continents", "as", "t2", "on", "t1", ".", "continent", "=", "t2", ".", "contid", "join", "car_makers", "as", "t3", "on", "t1", ".", "countryid", "=", "t3", ".", "country", "where", "t2", ".", "continent", "=", "value", "group", "by", "t1", ".", "countryname", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "What are the names of all European countries with at least 3 manufacturers?", "question_toks": ["What", "are", "the", "names", "of", "all", "European", "countries", "with", "at", "least", "3", "manufacturers", "?"], "guid": 939}}
{"text": "company: Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value; gas_station: Station_ID, Open_Year, Location, Manager_Name, Vice_Manager_Name, Representative_Name; station_company: Station_ID, Company_ID, Rank_of_the_Year | What is the rank, company, and market value of every comapny in the banking industry ordered by sales and profits?", "sql": "SELECT rank ,  company ,  market_value FROM company WHERE main_industry  =  'Banking' ORDER BY sales_billion ,  profits_billion", "example": {"db_id": "gas_company", "query": "SELECT rank ,  company ,  market_value FROM company WHERE main_industry  =  'Banking' ORDER BY sales_billion ,  profits_billion", "query_toks": ["SELECT", "rank", ",", "company", ",", "market_value", "FROM", "company", "WHERE", "main_industry", "=", "'Banking", "'", "ORDER", "BY", "sales_billion", ",", "profits_billion"], "query_toks_no_value": ["select", "rank", ",", "company", ",", "market_value", "from", "company", "where", "main_industry", "=", "value", "order", "by", "sales_billion", ",", "profits_billion"], "question": "What is the rank, company, and market value of every comapny in the banking industry ordered by sales and profits?", "question_toks": ["What", "is", "the", "rank", ",", "company", ",", "and", "market", "value", "of", "every", "comapny", "in", "the", "banking", "industry", "ordered", "by", "sales", "and", "profits", "?"], "guid": 940}}
{"text": "company: Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value; gas_station: Station_ID, Open_Year, Location, Manager_Name, Vice_Manager_Name, Representative_Name; station_company: Station_ID, Company_ID, Rank_of_the_Year | Show gas station id, location, and manager_name for all gas stations ordered by open year.", "sql": "SELECT station_id ,  LOCATION ,  manager_name FROM gas_station ORDER BY open_year", "example": {"db_id": "gas_company", "query": "SELECT station_id ,  LOCATION ,  manager_name FROM gas_station ORDER BY open_year", "query_toks": ["SELECT", "station_id", ",", "LOCATION", ",", "manager_name", "FROM", "gas_station", "ORDER", "BY", "open_year"], "query_toks_no_value": ["select", "station_id", ",", "location", ",", "manager_name", "from", "gas_station", "order", "by", "open_year"], "question": "Show gas station id, location, and manager_name for all gas stations ordered by open year.", "question_toks": ["Show", "gas", "station", "id", ",", "location", ",", "and", "manager_name", "for", "all", "gas", "stations", "ordered", "by", "open", "year", "."], "guid": 941}}
{"text": "Manufacturers: Code, Name, Headquarter, Founder, Revenue; Products: Code, Name, Price, Manufacturer | What is the total revenue of companies started by founder?", "sql": "SELECT sum(revenue) ,  founder FROM manufacturers GROUP BY founder", "example": {"db_id": "manufactory_1", "query": "SELECT sum(revenue) ,  founder FROM manufacturers GROUP BY founder", "query_toks": ["SELECT", "sum", "(", "revenue", ")", ",", "founder", "FROM", "manufacturers", "GROUP", "BY", "founder"], "query_toks_no_value": ["select", "sum", "(", "revenue", ")", ",", "founder", "from", "manufacturers", "group", "by", "founder"], "question": "What is the total revenue of companies started by founder?", "question_toks": ["What", "is", "the", "total", "revenue", "of", "companies", "started", "by", "founder", "?"], "guid": 942}}
{"text": "buildings: id, name, City, Height, Stories, Status; Companies: id, name, Headquarters, Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value_billion; Office_locations: building_id, company_id, move_in_year | What is the stories of highest building?", "sql": "SELECT Stories FROM buildings ORDER BY Height DESC LIMIT 1", "example": {"db_id": "company_office", "query": "SELECT Stories FROM buildings ORDER BY Height DESC LIMIT 1", "query_toks": ["SELECT", "Stories", "FROM", "buildings", "ORDER", "BY", "Height", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "stories", "from", "buildings", "order", "by", "height", "desc", "limit", "value"], "question": "What is the stories of highest building?", "question_toks": ["What", "is", "the", "stories", "of", "highest", "building", "?"], "guid": 943}}
{"text": "people: People_ID, Age, Name, Nationality, Graduation_College; company: Company_ID, Name, Headquarters, Industry, Sales_in_Billion, Profits_in_Billion, Assets_in_Billion, Market_Value_in_Billion; employment: Company_ID, People_ID, Year_working | Show the headquarters that have at least two companies.", "sql": "SELECT Headquarters FROM company GROUP BY Headquarters HAVING COUNT(*)  >=  2", "example": {"db_id": "company_employee", "query": "SELECT Headquarters FROM company GROUP BY Headquarters HAVING COUNT(*)  >=  2", "query_toks": ["SELECT", "Headquarters", "FROM", "company", "GROUP", "BY", "Headquarters", "HAVING", "COUNT", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "headquarters", "from", "company", "group", "by", "headquarters", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "Show the headquarters that have at least two companies.", "question_toks": ["Show", "the", "headquarters", "that", "have", "at", "least", "two", "companies", "."], "guid": 944}}
{"text": "regions: REGION_ID, REGION_NAME; countries: COUNTRY_ID, COUNTRY_NAME, REGION_ID; departments: DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID; jobs: JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY; employees: EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID; job_history: EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID; locations: LOCATION_ID, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_ID | display all the details from Employees table for those employees who was hired before 2002-06-21.", "sql": "SELECT * FROM employees WHERE hire_date  <  '2002-06-21'", "example": {"db_id": "hr_1", "query": "SELECT * FROM employees WHERE hire_date  <  '2002-06-21'", "query_toks": ["SELECT", "*", "FROM", "employees", "WHERE", "hire_date", "<", "'2002-06-21", "'"], "query_toks_no_value": ["select", "*", "from", "employees", "where", "hire_date", "<", "value"], "question": "display all the details from Employees table for those employees who was hired before 2002-06-21.", "question_toks": ["display", "all", "the", "details", "from", "Employees", "table", "for", "those", "employees", "who", "was", "hired", "before", "2002-06-21", "."], "guid": 945}}
{"text": "regions: REGION_ID, REGION_NAME; countries: COUNTRY_ID, COUNTRY_NAME, REGION_ID; departments: DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID; jobs: JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY; employees: EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID; job_history: EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID; locations: LOCATION_ID, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_ID | Display the first and last name, and salary for those employees whose first name is ending with the letter m.", "sql": "SELECT first_name ,  last_name ,  salary FROM employees WHERE first_name LIKE '%m'", "example": {"db_id": "hr_1", "query": "SELECT first_name ,  last_name ,  salary FROM employees WHERE first_name LIKE '%m'", "query_toks": ["SELECT", "first_name", ",", "last_name", ",", "salary", "FROM", "employees", "WHERE", "first_name", "LIKE", "'", "%", "m", "'"], "query_toks_no_value": ["select", "first_name", ",", "last_name", ",", "salary", "from", "employees", "where", "first_name", "like", "value"], "question": "Display the first and last name, and salary for those employees whose first name is ending with the letter m.", "question_toks": ["Display", "the", "first", "and", "last", "name", ",", "and", "salary", "for", "those", "employees", "whose", "first", "name", "is", "ending", "with", "the", "letter", "m", "."], "guid": 946}}
{"text": "continents: ContId, Continent; countries: CountryId, CountryName, Continent; car_makers: Id, Maker, FullName, Country; model_list: ModelId, Maker, Model; car_names: MakeId, Model, Make; cars_data: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year | What are the makers and models?", "sql": "SELECT Maker ,  Model FROM MODEL_LIST;", "example": {"db_id": "car_1", "query": "SELECT Maker ,  Model FROM MODEL_LIST;", "query_toks": ["SELECT", "Maker", ",", "Model", "FROM", "MODEL_LIST", ";"], "query_toks_no_value": ["select", "maker", ",", "model", "from", "model_list"], "question": "What are the makers and models?", "question_toks": ["What", "are", "the", "makers", "and", "models", "?"], "guid": 947}}
{"text": "continents: ContId, Continent; countries: CountryId, CountryName, Continent; car_makers: Id, Maker, FullName, Country; model_list: ModelId, Maker, Model; car_names: MakeId, Model, Make; cars_data: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year | What is the average weight of cars each year?", "sql": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;", "example": {"db_id": "car_1", "query": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;", "query_toks": ["SELECT", "avg", "(", "Weight", ")", ",", "YEAR", "FROM", "CARS_DATA", "GROUP", "BY", "YEAR", ";"], "query_toks_no_value": ["select", "avg", "(", "weight", ")", ",", "year", "from", "cars_data", "group", "by", "year"], "question": "What is the average weight of cars each year?", "question_toks": ["What", "is", "the", "average", "weight", "of", "cars", "each", "year", "?"], "guid": 948}}
{"text": "regions: REGION_ID, REGION_NAME; countries: COUNTRY_ID, COUNTRY_NAME, REGION_ID; departments: DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID; jobs: JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY; employees: EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID; job_history: EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID; locations: LOCATION_ID, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_ID | display those employees who joined after 7th September, 1987.", "sql": "SELECT * FROM employees WHERE hire_date  >  '1987-09-07'", "example": {"db_id": "hr_1", "query": "SELECT * FROM employees WHERE hire_date  >  '1987-09-07'", "query_toks": ["SELECT", "*", "FROM", "employees", "WHERE", "hire_date", ">", "'1987-09-07", "'"], "query_toks_no_value": ["select", "*", "from", "employees", "where", "hire_date", ">", "value"], "question": "display those employees who joined after 7th September, 1987.", "question_toks": ["display", "those", "employees", "who", "joined", "after", "7th", "September", ",", "1987", "."], "guid": 949}}
{"text": "regions: REGION_ID, REGION_NAME; countries: COUNTRY_ID, COUNTRY_NAME, REGION_ID; departments: DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID; jobs: JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY; employees: EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID; job_history: EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID; locations: LOCATION_ID, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_ID | What is all the information about employees who have never had a job in the past?", "sql": "SELECT * FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)", "example": {"db_id": "hr_1", "query": "SELECT * FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)", "query_toks": ["SELECT", "*", "FROM", "employees", "WHERE", "employee_id", "NOT", "IN", "(", "SELECT", "employee_id", "FROM", "job_history", ")"], "query_toks_no_value": ["select", "*", "from", "employees", "where", "employee_id", "not", "in", "(", "select", "employee_id", "from", "job_history", ")"], "question": "What is all the information about employees who have never had a job in the past?", "question_toks": ["What", "is", "all", "the", "information", "about", "employees", "who", "have", "never", "had", "a", "job", "in", "the", "past", "?"], "guid": 950}}
{"text": "company: Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value; gas_station: Station_ID, Open_Year, Location, Manager_Name, Vice_Manager_Name, Representative_Name; station_company: Station_ID, Company_ID, Rank_of_the_Year | What are the names of the managers for gas stations that are operated by the ExxonMobil company?", "sql": "SELECT T3.manager_name FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id WHERE T2.company  =  'ExxonMobil'", "example": {"db_id": "gas_company", "query": "SELECT T3.manager_name FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id WHERE T2.company  =  'ExxonMobil'", "query_toks": ["SELECT", "T3.manager_name", "FROM", "station_company", "AS", "T1", "JOIN", "company", "AS", "T2", "ON", "T1.company_id", "=", "T2.company_id", "JOIN", "gas_station", "AS", "T3", "ON", "T1.station_id", "=", "T3.station_id", "WHERE", "T2.company", "=", "'ExxonMobil", "'"], "query_toks_no_value": ["select", "t3", ".", "manager_name", "from", "station_company", "as", "t1", "join", "company", "as", "t2", "on", "t1", ".", "company_id", "=", "t2", ".", "company_id", "join", "gas_station", "as", "t3", "on", "t1", ".", "station_id", "=", "t3", ".", "station_id", "where", "t2", ".", "company", "=", "value"], "question": "What are the names of the managers for gas stations that are operated by the ExxonMobil company?", "question_toks": ["What", "are", "the", "names", "of", "the", "managers", "for", "gas", "stations", "that", "are", "operated", "by", "the", "ExxonMobil", "company", "?"], "guid": 951}}
{"text": "company: Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value; gas_station: Station_ID, Open_Year, Location, Manager_Name, Vice_Manager_Name, Representative_Name; station_company: Station_ID, Company_ID, Rank_of_the_Year | What are the locations and representatives' names of the gas stations owned by the companies with the 3 largest amounts of assets?", "sql": "SELECT T3.location ,  T3.Representative_Name FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id ORDER BY T2.Assets_billion DESC LIMIT 3", "example": {"db_id": "gas_company", "query": "SELECT T3.location ,  T3.Representative_Name FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id ORDER BY T2.Assets_billion DESC LIMIT 3", "query_toks": ["SELECT", "T3.location", ",", "T3.Representative_Name", "FROM", "station_company", "AS", "T1", "JOIN", "company", "AS", "T2", "ON", "T1.company_id", "=", "T2.company_id", "JOIN", "gas_station", "AS", "T3", "ON", "T1.station_id", "=", "T3.station_id", "ORDER", "BY", "T2.Assets_billion", "DESC", "LIMIT", "3"], "query_toks_no_value": ["select", "t3", ".", "location", ",", "t3", ".", "representative_name", "from", "station_company", "as", "t1", "join", "company", "as", "t2", "on", "t1", ".", "company_id", "=", "t2", ".", "company_id", "join", "gas_station", "as", "t3", "on", "t1", ".", "station_id", "=", "t3", ".", "station_id", "order", "by", "t2", ".", "assets_billion", "desc", "limit", "value"], "question": "What are the locations and representatives' names of the gas stations owned by the companies with the 3 largest amounts of assets?", "question_toks": ["What", "are", "the", "locations", "and", "representatives", "'", "names", "of", "the", "gas", "stations", "owned", "by", "the", "companies", "with", "the", "3", "largest", "amounts", "of", "assets", "?"], "guid": 952}}
{"text": "regions: REGION_ID, REGION_NAME; countries: COUNTRY_ID, COUNTRY_NAME, REGION_ID; departments: DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID; jobs: JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY; employees: EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID; job_history: EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID; locations: LOCATION_ID, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_ID | display the ID for those employees who did two or more jobs in the past.", "sql": "SELECT employee_id FROM job_history GROUP BY employee_id HAVING COUNT(*)  >= 2", "example": {"db_id": "hr_1", "query": "SELECT employee_id FROM job_history GROUP BY employee_id HAVING COUNT(*)  >= 2", "query_toks": ["SELECT", "employee_id", "FROM", "job_history", "GROUP", "BY", "employee_id", "HAVING", "COUNT", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "employee_id", "from", "job_history", "group", "by", "employee_id", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "display the ID for those employees who did two or more jobs in the past.", "question_toks": ["display", "the", "ID", "for", "those", "employees", "who", "did", "two", "or", "more", "jobs", "in", "the", "past", "."], "guid": 953}}
{"text": "Manufacturers: Code, Name, Headquarter, Founder, Revenue; Products: Code, Name, Price, Manufacturer | Find the name of companies whose revenue is greater than the average revenue of all companies.", "sql": "SELECT name FROM manufacturers WHERE revenue  >  (SELECT avg(revenue) FROM manufacturers)", "example": {"db_id": "manufactory_1", "query": "SELECT name FROM manufacturers WHERE revenue  >  (SELECT avg(revenue) FROM manufacturers)", "query_toks": ["SELECT", "name", "FROM", "manufacturers", "WHERE", "revenue", ">", "(", "SELECT", "avg", "(", "revenue", ")", "FROM", "manufacturers", ")"], "query_toks_no_value": ["select", "name", "from", "manufacturers", "where", "revenue", ">", "(", "select", "avg", "(", "revenue", ")", "from", "manufacturers", ")"], "question": "Find the name of companies whose revenue is greater than the average revenue of all companies.", "question_toks": ["Find", "the", "name", "of", "companies", "whose", "revenue", "is", "greater", "than", "the", "average", "revenue", "of", "all", "companies", "."], "guid": 954}}
{"text": "buildings: id, name, City, Height, Stories, Status; Companies: id, name, Headquarters, Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value_billion; Office_locations: building_id, company_id, move_in_year | Which buildings have more than one company offices? Give me the building names.", "sql": "SELECT T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id  =  T2.id JOIN Companies AS T3 ON T1.company_id  =  T3.id GROUP BY T1.building_id HAVING COUNT(*)  >  1", "example": {"db_id": "company_office", "query": "SELECT T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id  =  T2.id JOIN Companies AS T3 ON T1.company_id  =  T3.id GROUP BY T1.building_id HAVING COUNT(*)  >  1", "query_toks": ["SELECT", "T2.name", "FROM", "Office_locations", "AS", "T1", "JOIN", "buildings", "AS", "T2", "ON", "T1.building_id", "=", "T2.id", "JOIN", "Companies", "AS", "T3", "ON", "T1.company_id", "=", "T3.id", "GROUP", "BY", "T1.building_id", "HAVING", "COUNT", "(", "*", ")", ">", "1"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "office_locations", "as", "t1", "join", "buildings", "as", "t2", "on", "t1", ".", "building_id", "=", "t2", ".", "id", "join", "companies", "as", "t3", "on", "t1", ".", "company_id", "=", "t3", ".", "id", "group", "by", "t1", ".", "building_id", "having", "count", "(", "*", ")", ">", "value"], "question": "Which buildings have more than one company offices? Give me the building names.", "question_toks": ["Which", "buildings", "have", "more", "than", "one", "company", "offices", "?", "Give", "me", "the", "building", "names", "."], "guid": 955}}
{"text": "member: Member_ID, Name, Nationality, Role; performance: Performance_ID, Date, Host, Location, Attendance; member_attendance: Member_ID, Performance_ID, Num_of_Pieces | Show the locations that have at least two performances.", "sql": "SELECT LOCATION FROM performance GROUP BY LOCATION HAVING COUNT(*)  >=  2", "example": {"db_id": "performance_attendance", "query": "SELECT LOCATION FROM performance GROUP BY LOCATION HAVING COUNT(*)  >=  2", "query_toks": ["SELECT", "LOCATION", "FROM", "performance", "GROUP", "BY", "LOCATION", "HAVING", "COUNT", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "location", "from", "performance", "group", "by", "location", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "Show the locations that have at least two performances.", "question_toks": ["Show", "the", "locations", "that", "have", "at", "least", "two", "performances", "."], "guid": 956}}
{"text": "Manufacturers: Code, Name, Headquarter, Founder, Revenue; Products: Code, Name, Price, Manufacturer | What are the names, headquarters and revenues for manufacturers, sorted by revenue descending?", "sql": "SELECT name ,  headquarter ,  revenue FROM manufacturers ORDER BY revenue DESC", "example": {"db_id": "manufactory_1", "query": "SELECT name ,  headquarter ,  revenue FROM manufacturers ORDER BY revenue DESC", "query_toks": ["SELECT", "name", ",", "headquarter", ",", "revenue", "FROM", "manufacturers", "ORDER", "BY", "revenue", "DESC"], "query_toks_no_value": ["select", "name", ",", "headquarter", ",", "revenue", "from", "manufacturers", "order", "by", "revenue", "desc"], "question": "What are the names, headquarters and revenues for manufacturers, sorted by revenue descending?", "question_toks": ["What", "are", "the", "names", ",", "headquarters", "and", "revenues", "for", "manufacturers", ",", "sorted", "by", "revenue", "descending", "?"], "guid": 957}}
{"text": "Manufacturers: Code, Name, Headquarter, Founder, Revenue; Products: Code, Name, Price, Manufacturer | How many companies were created by Andy?", "sql": "SELECT count(*) FROM manufacturers WHERE founder  =  'Andy'", "example": {"db_id": "manufactory_1", "query": "SELECT count(*) FROM manufacturers WHERE founder  =  'Andy'", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "manufacturers", "WHERE", "founder", "=", "'Andy", "'"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "manufacturers", "where", "founder", "=", "value"], "question": "How many companies were created by Andy?", "question_toks": ["How", "many", "companies", "were", "created", "by", "Andy", "?"], "guid": 958}}
{"text": "buildings: id, name, City, Height, Stories, Status; Companies: id, name, Headquarters, Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value_billion; Office_locations: building_id, company_id, move_in_year | Please show the names of the buildings whose status is \"on-hold\", in ascending order of stories.", "sql": "SELECT name FROM buildings WHERE Status  =  \"on-hold\" ORDER BY Stories ASC", "example": {"db_id": "company_office", "query": "SELECT name FROM buildings WHERE Status  =  \"on-hold\" ORDER BY Stories ASC", "query_toks": ["SELECT", "name", "FROM", "buildings", "WHERE", "Status", "=", "``", "on-hold", "''", "ORDER", "BY", "Stories", "ASC"], "query_toks_no_value": ["select", "name", "from", "buildings", "where", "status", "=", "value", "order", "by", "stories", "asc"], "question": "Please show the names of the buildings whose status is \"on-hold\", in ascending order of stories.", "question_toks": ["Please", "show", "the", "names", "of", "the", "buildings", "whose", "status", "is", "``", "on-hold", "''", ",", "in", "ascending", "order", "of", "stories", "."], "guid": 959}}
{"text": "Manufacturers: Code, Name, Headquarter, Founder, Revenue; Products: Code, Name, Price, Manufacturer | Find the number of different products that are produced by companies at different headquarter cities.", "sql": "SELECT count(DISTINCT T1.name) ,  T2.Headquarter FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.Headquarter", "example": {"db_id": "manufactory_1", "query": "SELECT count(DISTINCT T1.name) ,  T2.Headquarter FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.Headquarter", "query_toks": ["SELECT", "count", "(", "DISTINCT", "T1.name", ")", ",", "T2.Headquarter", "FROM", "products", "AS", "T1", "JOIN", "manufacturers", "AS", "T2", "ON", "T1.Manufacturer", "=", "T2.code", "GROUP", "BY", "T2.Headquarter"], "query_toks_no_value": ["select", "count", "(", "distinct", "t1", ".", "name", ")", ",", "t2", ".", "headquarter", "from", "products", "as", "t1", "join", "manufacturers", "as", "t2", "on", "t1", ".", "manufacturer", "=", "t2", ".", "code", "group", "by", "t2", ".", "headquarter"], "question": "Find the number of different products that are produced by companies at different headquarter cities.", "question_toks": ["Find", "the", "number", "of", "different", "products", "that", "are", "produced", "by", "companies", "at", "different", "headquarter", "cities", "."], "guid": 960}}
{"text": "employee: Employee_ID, Name, Age, City; shop: Shop_ID, Name, Location, District, Number_products, Manager_name; hiring: Shop_ID, Employee_ID, Start_from, Is_full_time; evaluation: Employee_ID, Year_awarded, Bonus | Sort all the shops by number products in descending order, and return the name, location and district of each shop.", "sql": "SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC", "example": {"db_id": "employee_hire_evaluation", "query": "SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC", "query_toks": ["SELECT", "name", ",", "LOCATION", ",", "district", "FROM", "shop", "ORDER", "BY", "number_products", "DESC"], "query_toks_no_value": ["select", "name", ",", "location", ",", "district", "from", "shop", "order", "by", "number_products", "desc"], "question": "Sort all the shops by number products in descending order, and return the name, location and district of each shop.", "question_toks": ["Sort", "all", "the", "shops", "by", "number", "products", "in", "descending", "order", ",", "and", "return", "the", "name", ",", "location", "and", "district", "of", "each", "shop", "."], "guid": 961}}
{"text": "chip_model: Model_name, Launch_year, RAM_MiB, ROM_MiB, Slots, WiFi, Bluetooth; screen_mode: Graphics_mode, Char_cells, Pixels, Hardware_colours, used_kb, map, Type; phone: Company_name, Hardware_Model_name, Accreditation_type, Accreditation_level, Date, chip_model, screen_mode | How many phone hardware models are produced by the company named \"Nokia Corporation\"?", "sql": "SELECT count(*) FROM phone WHERE Company_name = \"Nokia Corporation\";", "example": {"db_id": "phone_1", "query": "SELECT count(*) FROM phone WHERE Company_name = \"Nokia Corporation\";", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "phone", "WHERE", "Company_name", "=", "``", "Nokia", "Corporation", "''", ";"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "phone", "where", "company_name", "=", "value"], "question": "How many phone hardware models are produced by the company named \"Nokia Corporation\"?", "question_toks": ["How", "many", "phone", "hardware", "models", "are", "produced", "by", "the", "company", "named", "``", "Nokia", "Corporation", "''", "?"], "guid": 962}}
{"text": "Manufacturers: Code, Name, Headquarter, Founder, Revenue; Products: Code, Name, Price, Manufacturer | Select the name and price of the cheapest product.", "sql": "SELECT name ,  price FROM Products ORDER BY price ASC LIMIT 1", "example": {"db_id": "manufactory_1", "query": "SELECT name ,  price FROM Products ORDER BY price ASC LIMIT 1", "query_toks": ["SELECT", "name", ",", "price", "FROM", "Products", "ORDER", "BY", "price", "ASC", "LIMIT", "1"], "query_toks_no_value": ["select", "name", ",", "price", "from", "products", "order", "by", "price", "asc", "limit", "value"], "question": "Select the name and price of the cheapest product.", "question_toks": ["Select", "the", "name", "and", "price", "of", "the", "cheapest", "product", "."], "guid": 963}}
{"text": "regions: REGION_ID, REGION_NAME; countries: COUNTRY_ID, COUNTRY_NAME, REGION_ID; departments: DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID; jobs: JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY; employees: EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID; job_history: EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID; locations: LOCATION_ID, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_ID | What are the employee ids for employees who have held two or more jobs?", "sql": "SELECT employee_id FROM job_history GROUP BY employee_id HAVING COUNT(*)  >= 2", "example": {"db_id": "hr_1", "query": "SELECT employee_id FROM job_history GROUP BY employee_id HAVING COUNT(*)  >= 2", "query_toks": ["SELECT", "employee_id", "FROM", "job_history", "GROUP", "BY", "employee_id", "HAVING", "COUNT", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "employee_id", "from", "job_history", "group", "by", "employee_id", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "What are the employee ids for employees who have held two or more jobs?", "question_toks": ["What", "are", "the", "employee", "ids", "for", "employees", "who", "have", "held", "two", "or", "more", "jobs", "?"], "guid": 964}}
{"text": "regions: REGION_ID, REGION_NAME; countries: COUNTRY_ID, COUNTRY_NAME, REGION_ID; departments: DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID; jobs: JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY; employees: EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID; job_history: EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID; locations: LOCATION_ID, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_ID | Find the ids of the departments where any manager is managing 4 or more employees.", "sql": "SELECT DISTINCT department_id FROM employees GROUP BY department_id ,  manager_id HAVING COUNT(employee_id)  >= 4", "example": {"db_id": "hr_1", "query": "SELECT DISTINCT department_id FROM employees GROUP BY department_id ,  manager_id HAVING COUNT(employee_id)  >= 4", "query_toks": ["SELECT", "DISTINCT", "department_id", "FROM", "employees", "GROUP", "BY", "department_id", ",", "manager_id", "HAVING", "COUNT", "(", "employee_id", ")", ">", "=", "4"], "query_toks_no_value": ["select", "distinct", "department_id", "from", "employees", "group", "by", "department_id", ",", "manager_id", "having", "count", "(", "employee_id", ")", ">", "=", "value"], "question": "Find the ids of the departments where any manager is managing 4 or more employees.", "question_toks": ["Find", "the", "ids", "of", "the", "departments", "where", "any", "manager", "is", "managing", "4", "or", "more", "employees", "."], "guid": 965}}
{"text": "buildings: id, name, City, Height, Stories, Status; Companies: id, name, Headquarters, Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value_billion; Office_locations: building_id, company_id, move_in_year | For each company, return the company name and the name of the building its office is located in.", "sql": "SELECT T3.name ,  T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id  =  T2.id JOIN Companies AS T3 ON T1.company_id  =  T3.id", "example": {"db_id": "company_office", "query": "SELECT T3.name ,  T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id  =  T2.id JOIN Companies AS T3 ON T1.company_id  =  T3.id", "query_toks": ["SELECT", "T3.name", ",", "T2.name", "FROM", "Office_locations", "AS", "T1", "JOIN", "buildings", "AS", "T2", "ON", "T1.building_id", "=", "T2.id", "JOIN", "Companies", "AS", "T3", "ON", "T1.company_id", "=", "T3.id"], "query_toks_no_value": ["select", "t3", ".", "name", ",", "t2", ".", "name", "from", "office_locations", "as", "t1", "join", "buildings", "as", "t2", "on", "t1", ".", "building_id", "=", "t2", ".", "id", "join", "companies", "as", "t3", "on", "t1", ".", "company_id", "=", "t3", ".", "id"], "question": "For each company, return the company name and the name of the building its office is located in.", "question_toks": ["For", "each", "company", ",", "return", "the", "company", "name", "and", "the", "name", "of", "the", "building", "its", "office", "is", "located", "in", "."], "guid": 966}}
{"text": "Manufacturers: Code, Name, Headquarter, Founder, Revenue; Products: Code, Name, Price, Manufacturer | Find the average prices of all products from each manufacture, and list each company's name.", "sql": "SELECT avg(T1.price) ,  T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.name", "example": {"db_id": "manufactory_1", "query": "SELECT avg(T1.price) ,  T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.name", "query_toks": ["SELECT", "avg", "(", "T1.price", ")", ",", "T2.name", "FROM", "products", "AS", "T1", "JOIN", "manufacturers", "AS", "T2", "ON", "T1.Manufacturer", "=", "T2.code", "GROUP", "BY", "T2.name"], "query_toks_no_value": ["select", "avg", "(", "t1", ".", "price", ")", ",", "t2", ".", "name", "from", "products", "as", "t1", "join", "manufacturers", "as", "t2", "on", "t1", ".", "manufacturer", "=", "t2", ".", "code", "group", "by", "t2", ".", "name"], "question": "Find the average prices of all products from each manufacture, and list each company's name.", "question_toks": ["Find", "the", "average", "prices", "of", "all", "products", "from", "each", "manufacture", ",", "and", "list", "each", "company", "'s", "name", "."], "guid": 967}}
{"text": "continents: ContId, Continent; countries: CountryId, CountryName, Continent; car_makers: Id, Maker, FullName, Country; model_list: ModelId, Maker, Model; car_names: MakeId, Model, Make; cars_data: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year | How many countries has more than 2 car makers ?", "sql": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2", "example": {"db_id": "car_1", "query": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2", "query_toks": ["select", "count", "(", "*", ")", "from", "countries", "as", "t1", "join", "car_makers", "as", "t2", "on", "t1.countryid", "=", "t2.country", "group", "by", "t1.countryid", "having", "count", "(", "*", ")", ">", "2"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "countries", "as", "t1", "join", "car_makers", "as", "t2", "on", "t1", ".", "countryid", "=", "t2", ".", "country", "group", "by", "t1", ".", "countryid", "having", "count", "(", "*", ")", ">", "value"], "question": "How many countries has more than 2 car makers ?", "question_toks": ["How", "many", "countries", "has", "more", "than", "2", "car", "makers", "?"], "guid": 968}}
{"text": "employee: Employee_ID, Name, Age, City; shop: Shop_ID, Name, Location, District, Number_products, Manager_name; hiring: Shop_ID, Employee_ID, Start_from, Is_full_time; evaluation: Employee_ID, Year_awarded, Bonus | Which shops run with no employees? Find the shop names", "sql": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)", "example": {"db_id": "employee_hire_evaluation", "query": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)", "query_toks": ["SELECT", "name", "FROM", "shop", "WHERE", "shop_id", "NOT", "IN", "(", "SELECT", "shop_id", "FROM", "hiring", ")"], "query_toks_no_value": ["select", "name", "from", "shop", "where", "shop_id", "not", "in", "(", "select", "shop_id", "from", "hiring", ")"], "question": "Which shops run with no employees? Find the shop names", "question_toks": ["Which", "shops", "run", "with", "no", "employees", "?", "Find", "the", "shop", "names"], "guid": 969}}
{"text": "employee: Employee_ID, Name, Age, City; shop: Shop_ID, Name, Location, District, Number_products, Manager_name; hiring: Shop_ID, Employee_ID, Start_from, Is_full_time; evaluation: Employee_ID, Year_awarded, Bonus | What are the minimum and maximum number of products across all the shops?", "sql": "SELECT min(Number_products) ,  max(Number_products) FROM shop", "example": {"db_id": "employee_hire_evaluation", "query": "SELECT min(Number_products) ,  max(Number_products) FROM shop", "query_toks": ["SELECT", "min", "(", "Number_products", ")", ",", "max", "(", "Number_products", ")", "FROM", "shop"], "query_toks_no_value": ["select", "min", "(", "number_products", ")", ",", "max", "(", "number_products", ")", "from", "shop"], "question": "What are the minimum and maximum number of products across all the shops?", "question_toks": ["What", "are", "the", "minimum", "and", "maximum", "number", "of", "products", "across", "all", "the", "shops", "?"], "guid": 970}}
{"text": "company: Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value; gas_station: Station_ID, Open_Year, Location, Manager_Name, Vice_Manager_Name, Representative_Name; station_company: Station_ID, Company_ID, Rank_of_the_Year | For each headquarter, what are the headquarter and how many companies are centered there?", "sql": "SELECT headquarters ,  count(*) FROM company GROUP BY headquarters", "example": {"db_id": "gas_company", "query": "SELECT headquarters ,  count(*) FROM company GROUP BY headquarters", "query_toks": ["SELECT", "headquarters", ",", "count", "(", "*", ")", "FROM", "company", "GROUP", "BY", "headquarters"], "query_toks_no_value": ["select", "headquarters", ",", "count", "(", "*", ")", "from", "company", "group", "by", "headquarters"], "question": "For each headquarter, what are the headquarter and how many companies are centered there?", "question_toks": ["For", "each", "headquarter", ",", "what", "are", "the", "headquarter", "and", "how", "many", "companies", "are", "centered", "there", "?"], "guid": 971}}
{"text": "people: People_ID, Age, Name, Nationality, Graduation_College; company: Company_ID, Name, Headquarters, Industry, Sales_in_Billion, Profits_in_Billion, Assets_in_Billion, Market_Value_in_Billion; employment: Company_ID, People_ID, Year_working | Show the headquarters that have both companies in banking industry and companies in oil and gas industry.", "sql": "SELECT Headquarters FROM company WHERE Industry  =  \"Banking\" INTERSECT SELECT Headquarters FROM company WHERE Industry  =  \"Oil and gas\"", "example": {"db_id": "company_employee", "query": "SELECT Headquarters FROM company WHERE Industry  =  \"Banking\" INTERSECT SELECT Headquarters FROM company WHERE Industry  =  \"Oil and gas\"", "query_toks": ["SELECT", "Headquarters", "FROM", "company", "WHERE", "Industry", "=", "``", "Banking", "''", "INTERSECT", "SELECT", "Headquarters", "FROM", "company", "WHERE", "Industry", "=", "``", "Oil", "and", "gas", "''"], "query_toks_no_value": ["select", "headquarters", "from", "company", "where", "industry", "=", "value", "intersect", "select", "headquarters", "from", "company", "where", "industry", "=", "value"], "question": "Show the headquarters that have both companies in banking industry and companies in oil and gas industry.", "question_toks": ["Show", "the", "headquarters", "that", "have", "both", "companies", "in", "banking", "industry", "and", "companies", "in", "oil", "and", "gas", "industry", "."], "guid": 972}}
{"text": "company: Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value; gas_station: Station_ID, Open_Year, Location, Manager_Name, Vice_Manager_Name, Representative_Name; station_company: Station_ID, Company_ID, Rank_of_the_Year | What are the locations of all the gas stations ordered by opening year?", "sql": "SELECT LOCATION FROM gas_station ORDER BY open_year", "example": {"db_id": "gas_company", "query": "SELECT LOCATION FROM gas_station ORDER BY open_year", "query_toks": ["SELECT", "LOCATION", "FROM", "gas_station", "ORDER", "BY", "open_year"], "query_toks_no_value": ["select", "location", "from", "gas_station", "order", "by", "open_year"], "question": "What are the locations of all the gas stations ordered by opening year?", "question_toks": ["What", "are", "the", "locations", "of", "all", "the", "gas", "stations", "ordered", "by", "opening", "year", "?"], "guid": 973}}
{"text": "regions: REGION_ID, REGION_NAME; countries: COUNTRY_ID, COUNTRY_NAME, REGION_ID; departments: DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID; jobs: JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY; employees: EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID; job_history: EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID; locations: LOCATION_ID, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_ID | What are the first and last name for those employees who works either in department 70 or 90?", "sql": "SELECT first_name ,  last_name FROM employees WHERE department_id  =  70 OR department_id  =  90", "example": {"db_id": "hr_1", "query": "SELECT first_name ,  last_name FROM employees WHERE department_id  =  70 OR department_id  =  90", "query_toks": ["SELECT", "first_name", ",", "last_name", "FROM", "employees", "WHERE", "department_id", "=", "70", "OR", "department_id", "=", "90"], "query_toks_no_value": ["select", "first_name", ",", "last_name", "from", "employees", "where", "department_id", "=", "value", "or", "department_id", "=", "value"], "question": "What are the first and last name for those employees who works either in department 70 or 90?", "question_toks": ["What", "are", "the", "first", "and", "last", "name", "for", "those", "employees", "who", "works", "either", "in", "department", "70", "or", "90", "?"], "guid": 974}}
{"text": "Manufacturers: Code, Name, Headquarter, Founder, Revenue; Products: Code, Name, Price, Manufacturer | What are the names of all products?", "sql": "SELECT Name FROM Products", "example": {"db_id": "manufactory_1", "query": "SELECT Name FROM Products", "query_toks": ["SELECT", "Name", "FROM", "Products"], "query_toks_no_value": ["select", "name", "from", "products"], "question": "What are the names of all products?", "question_toks": ["What", "are", "the", "names", "of", "all", "products", "?"], "guid": 975}}
{"text": "buildings: id, name, City, Height, Stories, Status; Companies: id, name, Headquarters, Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value_billion; Office_locations: building_id, company_id, move_in_year | List the names of companies in descending order of market value.", "sql": "SELECT name FROM Companies ORDER BY Market_Value_billion DESC", "example": {"db_id": "company_office", "query": "SELECT name FROM Companies ORDER BY Market_Value_billion DESC", "query_toks": ["SELECT", "name", "FROM", "Companies", "ORDER", "BY", "Market_Value_billion", "DESC"], "query_toks_no_value": ["select", "name", "from", "companies", "order", "by", "market_value_billion", "desc"], "question": "List the names of companies in descending order of market value.", "question_toks": ["List", "the", "names", "of", "companies", "in", "descending", "order", "of", "market", "value", "."], "guid": 976}}
{"text": "Manufacturers: Code, Name, Headquarter, Founder, Revenue; Products: Code, Name, Price, Manufacturer | Give the distinct headquarters of manufacturers.", "sql": "SELECT DISTINCT headquarter FROM manufacturers", "example": {"db_id": "manufactory_1", "query": "SELECT DISTINCT headquarter FROM manufacturers", "query_toks": ["SELECT", "DISTINCT", "headquarter", "FROM", "manufacturers"], "query_toks_no_value": ["select", "distinct", "headquarter", "from", "manufacturers"], "question": "Give the distinct headquarters of manufacturers.", "question_toks": ["Give", "the", "distinct", "headquarters", "of", "manufacturers", "."], "guid": 977}}